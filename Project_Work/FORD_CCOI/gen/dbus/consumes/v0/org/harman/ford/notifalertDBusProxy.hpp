/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_ORG_HARMAN_FORD_notifalert_DBUS_PROXY_HPP_
#define V0_ORG_HARMAN_FORD_notifalert_DBUS_PROXY_HPP_

#include <v0/org/harman/ford/notifalertProxyBase.hpp>
#include "v0/org/harman/ford/notifalertDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v0 {
namespace org {
namespace harman {
namespace ford {

class notifalertDBusProxy
    : virtual public notifalertProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    notifalertDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~notifalertDBusProxy() { }

    virtual CCOI_PolicyClient_St_enumAttribute& getCCOI_PolicyClient_St_enumAttribute();
    virtual AHU_Chime_Not_Recgnizd_enumAttribute& getAHU_Chime_Not_Recgnizd_enumAttribute();
    virtual AHU_Chime2_Not_Recgnizd_enumAttribute& getAHU_Chime2_Not_Recgnizd_enumAttribute();
    virtual AHU_Chime_Supported_enumAttribute& getAHU_Chime_Supported_enumAttribute();
    virtual AHU_Chime_Active_enumAttribute& getAHU_Chime_Active_enumAttribute();
    virtual AHU_Chime2_Active_enumAttribute& getAHU_Chime2_Active_enumAttribute();
    virtual CDWarnChime_St_enumAttribute& getCDWarnChime_St_enumAttribute();
    virtual CDWarnChime_Rq_enumAttribute& getCDWarnChime_Rq_enumAttribute();
    virtual IPC_ChimeAttribute& getIPC_ChimeAttribute();
    virtual IPC_Chime2Attribute& getIPC_Chime2Attribute();
    virtual GWM_Send_Signals_8_HS3_sig_4Attribute& getGWM_Send_Signals_8_HS3_sig_4Attribute();




    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    class DBuscCOI_PolicyClient_St_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CCOI_PolicyClient_St_enumAttribute>> {
    public:
    template <typename... _A>
    	DBuscCOI_PolicyClient_St_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CCOI_PolicyClient_St_enumAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v0::org::harman::ford::notifalert_types::CCOI_PolicyClient_St_enum& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v0::org::harman::ford::notifalert_types::CCOI_PolicyClient_St_enum& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CCOI_PolicyClient_St_enumAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v0::org::harman::ford::notifalert_types::CCOI_PolicyClient_St_enum& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v0::org::harman::ford::notifalert_types::CCOI_PolicyClient_St_enum)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v0::org::harman::ford::notifalert_types::CCOI_PolicyClient_St_enum _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CCOI_PolicyClient_St_enumAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBuscCOI_PolicyClient_St_enum_Attribute cCOI_PolicyClient_St_enum_;
    class DBusaHU_Chime_Not_Recgnizd_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AHU_Chime_Not_Recgnizd_enumAttribute>> {
    public:
    template <typename... _A>
    	DBusaHU_Chime_Not_Recgnizd_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AHU_Chime_Not_Recgnizd_enumAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v0::org::harman::ford::notifalert_types::AHU_Chime_Not_Recgnizd_enum& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v0::org::harman::ford::notifalert_types::AHU_Chime_Not_Recgnizd_enum& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AHU_Chime_Not_Recgnizd_enumAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v0::org::harman::ford::notifalert_types::AHU_Chime_Not_Recgnizd_enum& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v0::org::harman::ford::notifalert_types::AHU_Chime_Not_Recgnizd_enum)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v0::org::harman::ford::notifalert_types::AHU_Chime_Not_Recgnizd_enum _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AHU_Chime_Not_Recgnizd_enumAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusaHU_Chime_Not_Recgnizd_enum_Attribute aHU_Chime_Not_Recgnizd_enum_;
    class DBusaHU_Chime2_Not_Recgnizd_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AHU_Chime2_Not_Recgnizd_enumAttribute>> {
    public:
    template <typename... _A>
    	DBusaHU_Chime2_Not_Recgnizd_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AHU_Chime2_Not_Recgnizd_enumAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v0::org::harman::ford::notifalert_types::AHU_Chime2_Not_Recgnizd_enum& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v0::org::harman::ford::notifalert_types::AHU_Chime2_Not_Recgnizd_enum& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AHU_Chime2_Not_Recgnizd_enumAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v0::org::harman::ford::notifalert_types::AHU_Chime2_Not_Recgnizd_enum& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v0::org::harman::ford::notifalert_types::AHU_Chime2_Not_Recgnizd_enum)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v0::org::harman::ford::notifalert_types::AHU_Chime2_Not_Recgnizd_enum _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AHU_Chime2_Not_Recgnizd_enumAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusaHU_Chime2_Not_Recgnizd_enum_Attribute aHU_Chime2_Not_Recgnizd_enum_;
    class DBusaHU_Chime_Supported_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AHU_Chime_Supported_enumAttribute>> {
    public:
    template <typename... _A>
    	DBusaHU_Chime_Supported_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AHU_Chime_Supported_enumAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v0::org::harman::ford::notifalert_types::AHU_Chime_Supported_enum& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v0::org::harman::ford::notifalert_types::AHU_Chime_Supported_enum& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AHU_Chime_Supported_enumAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v0::org::harman::ford::notifalert_types::AHU_Chime_Supported_enum& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v0::org::harman::ford::notifalert_types::AHU_Chime_Supported_enum)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v0::org::harman::ford::notifalert_types::AHU_Chime_Supported_enum _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AHU_Chime_Supported_enumAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusaHU_Chime_Supported_enum_Attribute aHU_Chime_Supported_enum_;
    class DBusaHU_Chime_Active_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AHU_Chime_Active_enumAttribute>> {
    public:
    template <typename... _A>
    	DBusaHU_Chime_Active_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AHU_Chime_Active_enumAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v0::org::harman::ford::notifalert_types::AHU_Chime_Active_enum& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v0::org::harman::ford::notifalert_types::AHU_Chime_Active_enum& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AHU_Chime_Active_enumAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v0::org::harman::ford::notifalert_types::AHU_Chime_Active_enum& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v0::org::harman::ford::notifalert_types::AHU_Chime_Active_enum)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v0::org::harman::ford::notifalert_types::AHU_Chime_Active_enum _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AHU_Chime_Active_enumAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusaHU_Chime_Active_enum_Attribute aHU_Chime_Active_enum_;
    class DBusaHU_Chime2_Active_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AHU_Chime2_Active_enumAttribute>> {
    public:
    template <typename... _A>
    	DBusaHU_Chime2_Active_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AHU_Chime2_Active_enumAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v0::org::harman::ford::notifalert_types::AHU_Chime2_Active_enum& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v0::org::harman::ford::notifalert_types::AHU_Chime2_Active_enum& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AHU_Chime2_Active_enumAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v0::org::harman::ford::notifalert_types::AHU_Chime2_Active_enum& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v0::org::harman::ford::notifalert_types::AHU_Chime2_Active_enum)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v0::org::harman::ford::notifalert_types::AHU_Chime2_Active_enum _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AHU_Chime2_Active_enumAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusaHU_Chime2_Active_enum_Attribute aHU_Chime2_Active_enum_;
    class DBuscDWarnChime_St_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CDWarnChime_St_enumAttribute>> {
    public:
    template <typename... _A>
    	DBuscDWarnChime_St_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CDWarnChime_St_enumAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v0::org::harman::ford::notifalert_types::CDWarnChime_St_enum& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v0::org::harman::ford::notifalert_types::CDWarnChime_St_enum& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CDWarnChime_St_enumAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v0::org::harman::ford::notifalert_types::CDWarnChime_St_enum& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v0::org::harman::ford::notifalert_types::CDWarnChime_St_enum)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v0::org::harman::ford::notifalert_types::CDWarnChime_St_enum _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CDWarnChime_St_enumAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBuscDWarnChime_St_enum_Attribute cDWarnChime_St_enum_;
    class DBuscDWarnChime_Rq_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CDWarnChime_Rq_enumAttribute>> {
    public:
    template <typename... _A>
    	DBuscDWarnChime_Rq_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CDWarnChime_Rq_enumAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v0::org::harman::ford::notifalert_types::CDWarnChime_Rq_enum& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v0::org::harman::ford::notifalert_types::CDWarnChime_Rq_enum& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CDWarnChime_Rq_enumAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v0::org::harman::ford::notifalert_types::CDWarnChime_Rq_enum& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v0::org::harman::ford::notifalert_types::CDWarnChime_Rq_enum)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v0::org::harman::ford::notifalert_types::CDWarnChime_Rq_enum _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CDWarnChime_Rq_enumAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBuscDWarnChime_Rq_enum_Attribute cDWarnChime_Rq_enum_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<IPC_ChimeAttribute, ::v0::org::harman::ford::notifalert_types_::IPC_Chime_structDeployment_t>> iPC_Chime_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<IPC_Chime2Attribute, ::v0::org::harman::ford::notifalert_types_::IPC_Chime2_structDeployment_t>> iPC_Chime2_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<GWM_Send_Signals_8_HS3_sig_4Attribute, ::v0::org::harman::ford::notifalert_types_::GWM_Send_Signals_8_HS3_sig_4_structDeployment_t>> gWM_Send_Signals_8_HS3_sig_4_;


};

} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

#endif // V0_ORG_HARMAN_FORD_notifalert_DBUS_PROXY_HPP_

