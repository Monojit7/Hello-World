/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COM_HARMAN_VEHICLE_Clock_Service_DBUS_PROXY_HPP_
#define V0_COM_HARMAN_VEHICLE_Clock_Service_DBUS_PROXY_HPP_

#include <v0/com/harman/vehicle/ClockServiceProxyBase.hpp>
#include "v0/com/harman/vehicle/ClockServiceDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v0 {
namespace com {
namespace harman {
namespace vehicle {

class ClockServiceDBusProxy
    : virtual public ClockServiceProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    ClockServiceDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~ClockServiceDBusProxy() { }

    virtual DisplayTimeLeadingZeroAttribute& getDisplayTimeLeadingZeroAttribute();

    virtual ClockData_NtfyEvent& getClockData_NtfyEvent();
    virtual CANUnavailability_NtfyEvent& getCANUnavailability_NtfyEvent();

    virtual void SetTime_Req(const ::v1::com::harman::vehicle::ClockType::StrTimeDataMsg &_p_stTimeDataMsg, const ::v1::com::harman::vehicle::ClockType::ESetType &_p_eSetType, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::ClockType::EGenericResp &_p_eGenResp, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> SetTime_ReqAsync(const ::v1::com::harman::vehicle::ClockType::StrTimeDataMsg &_p_stTimeDataMsg, const ::v1::com::harman::vehicle::ClockType::ESetType &_p_eSetType, SetTime_ReqAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void SetTimeFormat_Req(const ::v1::com::harman::vehicle::ClockType::ETimeForamt &_p_eTimeFormat, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::ClockType::EGenericResp &_p_eGenericResp, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> SetTimeFormat_ReqAsync(const ::v1::com::harman::vehicle::ClockType::ETimeForamt &_p_eTimeFormat, SetTimeFormat_ReqAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void SyncClockWithGPS_Req(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::ClockType::EGenericResp &_p_eGenericResp, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> SyncClockWithGPS_ReqAsync(SyncClockWithGPS_ReqAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void GetClockData_Req(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::ClockType::StrClockMsgData &_p_pstClockMsgData, ::v1::com::harman::vehicle::ClockType::EGenericResp &_p_eGenericResp, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> GetClockData_ReqAsync(GetClockData_ReqAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void GetUserOffSet_Req(CommonAPI::CallStatus &_internalCallStatus, int16_t &_p_u8UserOffSetMin, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> GetUserOffSet_ReqAsync(GetUserOffSet_ReqAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<DisplayTimeLeadingZeroAttribute>> displayTimeLeadingZero_;

    CommonAPI::DBus::DBusEvent<ClockData_NtfyEvent, CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::StrClockMsgData, ::v1::com::harman::vehicle::ClockType_::StrClockMsgDataDeployment_t>> clockData_Ntfy_;
    CommonAPI::DBus::DBusEvent<CANUnavailability_NtfyEvent> cANUnavailability_Ntfy_;

};

} // namespace vehicle
} // namespace harman
} // namespace com
} // namespace v0

#endif // V0_COM_HARMAN_VEHICLE_Clock_Service_DBUS_PROXY_HPP_

