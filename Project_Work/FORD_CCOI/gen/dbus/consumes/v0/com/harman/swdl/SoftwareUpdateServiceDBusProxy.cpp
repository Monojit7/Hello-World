/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v0/com/harman/swdl/SoftwareUpdateServiceDBusProxy.hpp>

namespace v0 {
namespace com {
namespace harman {
namespace swdl {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createSoftwareUpdateServiceDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<SoftwareUpdateServiceDBusProxy>(_address, _connection);
}

INITIALIZER(registerSoftwareUpdateServiceDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		SoftwareUpdateService::getInterface(),
		&createSoftwareUpdateServiceDBusProxy);
}

SoftwareUpdateServiceDBusProxy::SoftwareUpdateServiceDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		installProgress_(*this, "onInstallProgressAttributeChanged", "setInstallProgressAttribute", "(yys)", "getInstallProgressAttribute", static_cast<::v1::com::harman::swdl::SoftwareUpdateTypes_::tInstallProgressDeployment_t*>(nullptr)),
		downloadProgress_(*this, "onDownloadProgressAttributeChanged", "setDownloadProgressAttribute", "(yys)", "getDownloadProgressAttribute", static_cast<::v1::com::harman::swdl::SoftwareUpdateTypes_::tDownloadProgressDeployment_t*>(nullptr)),
		activationResult_(*this, "onActivationResultAttributeChanged", "setActivationResultAttribute", "(i(isssu))", "getActivationResultAttribute", static_cast<::v1::com::harman::swdl::SoftwareUpdateTypes_::tActivationResultDeployment_t*>(nullptr)),
		systemUpdateIconStatus_(*this, "onSystemUpdateIconStatusAttributeChanged", "setSystemUpdateIconStatusAttribute", "b", "getSystemUpdateIconStatusAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr))
,		softwareUpdateStatus_(*this, "SoftwareUpdateStatus", "(i(is))i", std::make_tuple(static_cast<::v1::com::harman::swdl::SoftwareUpdateTypes_::tStatusDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
{
}

      SoftwareUpdateServiceDBusProxy::InstallProgressAttribute& SoftwareUpdateServiceDBusProxy::getInstallProgressAttribute() {
          return installProgress_;
      }
      SoftwareUpdateServiceDBusProxy::DownloadProgressAttribute& SoftwareUpdateServiceDBusProxy::getDownloadProgressAttribute() {
          return downloadProgress_;
      }
      SoftwareUpdateServiceDBusProxy::ActivationResultAttribute& SoftwareUpdateServiceDBusProxy::getActivationResultAttribute() {
          return activationResult_;
      }
      SoftwareUpdateServiceDBusProxy::SystemUpdateIconStatusAttribute& SoftwareUpdateServiceDBusProxy::getSystemUpdateIconStatusAttribute() {
          return systemUpdateIconStatus_;
      }

SoftwareUpdateServiceDBusProxy::SoftwareUpdateStatusEvent& SoftwareUpdateServiceDBusProxy::getSoftwareUpdateStatusEvent() {
    return softwareUpdateStatus_;
}
    
    /**
     * description: Method to start software update.
     */
    void SoftwareUpdateServiceDBusProxy::StartUpdate(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult &_error, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "StartUpdate",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_error);
_error = deploy_error.getValue();
}
    std::future<CommonAPI::CallStatus> SoftwareUpdateServiceDBusProxy::StartUpdateAsync(StartUpdateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "StartUpdate",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment> _deploy_error) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue());
        },
        std::make_tuple(deploy_error));
    }
    /**
     * description: To get when last update was checked. The information will include date and
     *   time. The output
    					will be in format Month DD, YYYY at Time
     */
    void SoftwareUpdateServiceDBusProxy::GetLastCheckedForUpdate(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult &_error, std::string &_lastUpdate, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_lastUpdate(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "GetLastCheckedForUpdate",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_error,
deploy_lastUpdate);
_error = deploy_error.getValue();
_lastUpdate = deploy_lastUpdate.getValue();
}
    std::future<CommonAPI::CallStatus> SoftwareUpdateServiceDBusProxy::GetLastCheckedForUpdateAsync(GetLastCheckedForUpdateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_lastUpdate(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "GetLastCheckedForUpdate",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment> _deploy_error, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _lastUpdate) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue(), _lastUpdate.getValue());
        },
        std::make_tuple(deploy_error, deploy_lastUpdate));
    }
    /**
     * description: Method to Scan For Updates.
     */
    void SoftwareUpdateServiceDBusProxy::ScanForUpdates(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult &_error, ::v1::com::harman::swdl::SoftwareUpdateTypes::tUpdateSearchResult &_checkResult, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::tUpdateSearchResult, ::v1::com::harman::swdl::SoftwareUpdateTypes_::tUpdateSearchResultDeployment_t> deploy_checkResult(static_cast<::v1::com::harman::swdl::SoftwareUpdateTypes_::tUpdateSearchResultDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::tUpdateSearchResult,::v1::com::harman::swdl::SoftwareUpdateTypes_::tUpdateSearchResultDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "ScanForUpdates",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_error,
deploy_checkResult);
_error = deploy_error.getValue();
_checkResult = deploy_checkResult.getValue();
}
    std::future<CommonAPI::CallStatus> SoftwareUpdateServiceDBusProxy::ScanForUpdatesAsync(ScanForUpdatesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::tUpdateSearchResult, ::v1::com::harman::swdl::SoftwareUpdateTypes_::tUpdateSearchResultDeployment_t> deploy_checkResult(static_cast<::v1::com::harman::swdl::SoftwareUpdateTypes_::tUpdateSearchResultDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::tUpdateSearchResult,::v1::com::harman::swdl::SoftwareUpdateTypes_::tUpdateSearchResultDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "ScanForUpdates",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment> _deploy_error, CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::tUpdateSearchResult, ::v1::com::harman::swdl::SoftwareUpdateTypes_::tUpdateSearchResultDeployment_t> _checkResult) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue(), _checkResult.getValue());
        },
        std::make_tuple(deploy_error, deploy_checkResult));
    }
    /**
     * description: To enable disable automatic download. true for enabling automatic download and
     *   false for disabling.
     */
    void SoftwareUpdateServiceDBusProxy::SetAutomaticDownload(const bool &_enableAutoDownload, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult &_error, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_enableAutoDownload(_enableAutoDownload, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "SetAutomaticDownload",
        "b",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_enableAutoDownload,
_internalCallStatus,
deploy_error);
_error = deploy_error.getValue();
}
    std::future<CommonAPI::CallStatus> SoftwareUpdateServiceDBusProxy::SetAutomaticDownloadAsync(const bool &_enableAutoDownload, SetAutomaticDownloadAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_enableAutoDownload(_enableAutoDownload, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "SetAutomaticDownload",
        "b",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_enableAutoDownload,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment> _deploy_error) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue());
        },
        std::make_tuple(deploy_error));
    }
    /**
     * description: To get the enable/disable status of automatic download.
     */
    void SoftwareUpdateServiceDBusProxy::GetAutomaticDownloadStatus(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult &_error, bool &_enableAutoDownload, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_enableAutoDownload(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "GetAutomaticDownloadStatus",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_error,
deploy_enableAutoDownload);
_error = deploy_error.getValue();
_enableAutoDownload = deploy_enableAutoDownload.getValue();
}
    std::future<CommonAPI::CallStatus> SoftwareUpdateServiceDBusProxy::GetAutomaticDownloadStatusAsync(GetAutomaticDownloadStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_enableAutoDownload(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "GetAutomaticDownloadStatus",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult, CommonAPI::EmptyDeployment> _deploy_error, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> _enableAutoDownload) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue(), _enableAutoDownload.getValue());
        },
        std::make_tuple(deploy_error, deploy_enableAutoDownload));
    }


void SoftwareUpdateServiceDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 2;
      }

      } // namespace swdl
      } // namespace harman
      } // namespace com
      } // namespace v0
