/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v0/com/harman/vehicle/ClockServiceDBusProxy.hpp>

namespace v0 {
namespace com {
namespace harman {
namespace vehicle {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createClockServiceDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<ClockServiceDBusProxy>(_address, _connection);
}

INITIALIZER(registerClockServiceDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		ClockService::getInterface(),
		&createClockServiceDBusProxy);
}

ClockServiceDBusProxy::ClockServiceDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		displayTimeLeadingZero_(*this, "onDisplayTimeLeadingZeroAttributeChanged", "b", "getDisplayTimeLeadingZeroAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr))
,		clockData_Ntfy_(*this, "ClockData_Ntfy", "(sss)", std::make_tuple(static_cast<::v1::com::harman::vehicle::ClockType_::StrClockMsgDataDeployment_t*>(nullptr))),
		cANUnavailability_Ntfy_(*this, "CANUnavailability_Ntfy", "", std::make_tuple())
{
}

      ClockServiceDBusProxy::DisplayTimeLeadingZeroAttribute& ClockServiceDBusProxy::getDisplayTimeLeadingZeroAttribute() {
          return displayTimeLeadingZero_;
      }

ClockServiceDBusProxy::ClockData_NtfyEvent& ClockServiceDBusProxy::getClockData_NtfyEvent() {
    return clockData_Ntfy_;
}
ClockServiceDBusProxy::CANUnavailability_NtfyEvent& ClockServiceDBusProxy::getCANUnavailability_NtfyEvent() {
    return cANUnavailability_Ntfy_;
}
    
    void ClockServiceDBusProxy::SetTime_Req(const ::v1::com::harman::vehicle::ClockType::StrTimeDataMsg &_p_stTimeDataMsg, const ::v1::com::harman::vehicle::ClockType::ESetType &_p_eSetType, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::ClockType::EGenericResp &_p_eGenResp, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::StrTimeDataMsg, ::v1::com::harman::vehicle::ClockType_::StrTimeDataMsgDeployment_t> deploy_p_stTimeDataMsg(_p_stTimeDataMsg, static_cast<::v1::com::harman::vehicle::ClockType_::StrTimeDataMsgDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::ESetType, CommonAPI::EmptyDeployment> deploy_p_eSetType(_p_eSetType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::EGenericResp, CommonAPI::EmptyDeployment> deploy_p_eGenResp(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::StrTimeDataMsg, ::v1::com::harman::vehicle::ClockType_::StrTimeDataMsgDeployment_t >,
            CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::ESetType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::EGenericResp,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "SetTime_Req",
        "(yyi)i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_p_stTimeDataMsg, deploy_p_eSetType,
_internalCallStatus,
deploy_p_eGenResp);
_p_eGenResp = deploy_p_eGenResp.getValue();
}
    std::future<CommonAPI::CallStatus> ClockServiceDBusProxy::SetTime_ReqAsync(const ::v1::com::harman::vehicle::ClockType::StrTimeDataMsg &_p_stTimeDataMsg, const ::v1::com::harman::vehicle::ClockType::ESetType &_p_eSetType, SetTime_ReqAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::StrTimeDataMsg, ::v1::com::harman::vehicle::ClockType_::StrTimeDataMsgDeployment_t> deploy_p_stTimeDataMsg(_p_stTimeDataMsg, static_cast<::v1::com::harman::vehicle::ClockType_::StrTimeDataMsgDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::ESetType, CommonAPI::EmptyDeployment> deploy_p_eSetType(_p_eSetType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::EGenericResp, CommonAPI::EmptyDeployment> deploy_p_eGenResp(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::StrTimeDataMsg, ::v1::com::harman::vehicle::ClockType_::StrTimeDataMsgDeployment_t >,
            CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::ESetType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::EGenericResp,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "SetTime_Req",
        "(yyi)i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_p_stTimeDataMsg, deploy_p_eSetType,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::EGenericResp, CommonAPI::EmptyDeployment> _p_eGenResp) {
        	if (_callback)
        		_callback(_internalCallStatus, _p_eGenResp.getValue());
        },
        std::make_tuple(deploy_p_eGenResp));
    }
    void ClockServiceDBusProxy::SetTimeFormat_Req(const ::v1::com::harman::vehicle::ClockType::ETimeForamt &_p_eTimeFormat, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::ClockType::EGenericResp &_p_eGenericResp, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::ETimeForamt, CommonAPI::EmptyDeployment> deploy_p_eTimeFormat(_p_eTimeFormat, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::EGenericResp, CommonAPI::EmptyDeployment> deploy_p_eGenericResp(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::ETimeForamt, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::EGenericResp,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "SetTimeFormat_Req",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_p_eTimeFormat,
_internalCallStatus,
deploy_p_eGenericResp);
_p_eGenericResp = deploy_p_eGenericResp.getValue();
}
    std::future<CommonAPI::CallStatus> ClockServiceDBusProxy::SetTimeFormat_ReqAsync(const ::v1::com::harman::vehicle::ClockType::ETimeForamt &_p_eTimeFormat, SetTimeFormat_ReqAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::ETimeForamt, CommonAPI::EmptyDeployment> deploy_p_eTimeFormat(_p_eTimeFormat, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::EGenericResp, CommonAPI::EmptyDeployment> deploy_p_eGenericResp(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::ETimeForamt, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::EGenericResp,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "SetTimeFormat_Req",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_p_eTimeFormat,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::EGenericResp, CommonAPI::EmptyDeployment> _p_eGenericResp) {
        	if (_callback)
        		_callback(_internalCallStatus, _p_eGenericResp.getValue());
        },
        std::make_tuple(deploy_p_eGenericResp));
    }
    void ClockServiceDBusProxy::SyncClockWithGPS_Req(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::ClockType::EGenericResp &_p_eGenericResp, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::EGenericResp, CommonAPI::EmptyDeployment> deploy_p_eGenericResp(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::EGenericResp,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "SyncClockWithGPS_Req",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_p_eGenericResp);
_p_eGenericResp = deploy_p_eGenericResp.getValue();
}
    std::future<CommonAPI::CallStatus> ClockServiceDBusProxy::SyncClockWithGPS_ReqAsync(SyncClockWithGPS_ReqAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::EGenericResp, CommonAPI::EmptyDeployment> deploy_p_eGenericResp(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::EGenericResp,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "SyncClockWithGPS_Req",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::EGenericResp, CommonAPI::EmptyDeployment> _p_eGenericResp) {
        	if (_callback)
        		_callback(_internalCallStatus, _p_eGenericResp.getValue());
        },
        std::make_tuple(deploy_p_eGenericResp));
    }
    void ClockServiceDBusProxy::GetClockData_Req(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::ClockType::StrClockMsgData &_p_pstClockMsgData, ::v1::com::harman::vehicle::ClockType::EGenericResp &_p_eGenericResp, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::StrClockMsgData, ::v1::com::harman::vehicle::ClockType_::StrClockMsgDataDeployment_t> deploy_p_pstClockMsgData(static_cast<::v1::com::harman::vehicle::ClockType_::StrClockMsgDataDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::EGenericResp, CommonAPI::EmptyDeployment> deploy_p_eGenericResp(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::StrClockMsgData,::v1::com::harman::vehicle::ClockType_::StrClockMsgDataDeployment_t>,
            CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::EGenericResp,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "GetClockData_Req",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_p_pstClockMsgData, deploy_p_eGenericResp);
_p_pstClockMsgData = deploy_p_pstClockMsgData.getValue();
_p_eGenericResp = deploy_p_eGenericResp.getValue();
}
    std::future<CommonAPI::CallStatus> ClockServiceDBusProxy::GetClockData_ReqAsync(GetClockData_ReqAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::StrClockMsgData, ::v1::com::harman::vehicle::ClockType_::StrClockMsgDataDeployment_t> deploy_p_pstClockMsgData(static_cast<::v1::com::harman::vehicle::ClockType_::StrClockMsgDataDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::EGenericResp, CommonAPI::EmptyDeployment> deploy_p_eGenericResp(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::StrClockMsgData,::v1::com::harman::vehicle::ClockType_::StrClockMsgDataDeployment_t>,
            CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::EGenericResp,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "GetClockData_Req",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::StrClockMsgData, ::v1::com::harman::vehicle::ClockType_::StrClockMsgDataDeployment_t> _p_pstClockMsgData, CommonAPI::Deployable<::v1::com::harman::vehicle::ClockType::EGenericResp, CommonAPI::EmptyDeployment> _p_eGenericResp) {
        	if (_callback)
        		_callback(_internalCallStatus, _p_pstClockMsgData.getValue(), _p_eGenericResp.getValue());
        },
        std::make_tuple(deploy_p_pstClockMsgData, deploy_p_eGenericResp));
    }
    void ClockServiceDBusProxy::GetUserOffSet_Req(CommonAPI::CallStatus &_internalCallStatus, int16_t &_p_u8UserOffSetMin, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_p_u8UserOffSetMin(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int16_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "GetUserOffSet_Req",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_p_u8UserOffSetMin);
_p_u8UserOffSetMin = deploy_p_u8UserOffSetMin.getValue();
}
    std::future<CommonAPI::CallStatus> ClockServiceDBusProxy::GetUserOffSet_ReqAsync(GetUserOffSet_ReqAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_p_u8UserOffSetMin(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int16_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "GetUserOffSet_Req",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> _p_u8UserOffSetMin) {
        	if (_callback)
        		_callback(_internalCallStatus, _p_u8UserOffSetMin.getValue());
        },
        std::make_tuple(deploy_p_u8UserOffSetMin));
    }


void ClockServiceDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 1;
      }

      } // namespace vehicle
      } // namespace harman
      } // namespace com
      } // namespace v0
