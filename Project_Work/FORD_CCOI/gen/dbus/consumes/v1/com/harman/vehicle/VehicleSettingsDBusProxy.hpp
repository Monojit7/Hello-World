/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: The interface towards the Controlling Instance (e.g. HMI). It handles the
 *   communication towards the HMI and other system components who need to interact
 *   with the Vehicle Settings.
 * author: Pramod kumar kar, Yogesh sharma
 */
#ifndef V1_COM_HARMAN_VEHICLE_Vehicle_Settings_DBUS_PROXY_HPP_
#define V1_COM_HARMAN_VEHICLE_Vehicle_Settings_DBUS_PROXY_HPP_

#include <v1/com/harman/vehicle/VehicleSettingsProxyBase.hpp>
#include "v1/com/harman/vehicle/VehicleSettingsDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace com {
namespace harman {
namespace vehicle {

class VehicleSettingsDBusProxy
    : virtual public VehicleSettingsProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    VehicleSettingsDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~VehicleSettingsDBusProxy() { }

    virtual AmbLightSettingsAttribute& getAmbLightSettingsAttribute();
    virtual DispDistanceUnitsAttribute& getDispDistanceUnitsAttribute();
    virtual DispLangStatusAttribute& getDispLangStatusAttribute();
    virtual DispTemperatureAttribute& getDispTemperatureAttribute();
    virtual TimeModeAttribute& getTimeModeAttribute();
    virtual DriverRestrictionsGeneralAttribute& getDriverRestrictionsGeneralAttribute();
    virtual DriverRestrictionsVideoAttribute& getDriverRestrictionsVideoAttribute();
    virtual TouchBeepStatusAttribute& getTouchBeepStatusAttribute();
    virtual CountryRegionAttribute& getCountryRegionAttribute();
    virtual AllVersionsAttribute& getAllVersionsAttribute();

    virtual DispLangResponseEvent& getDispLangResponseEvent();

    /**
     * description: This interface is used to set the colour and intensity of the ambient light
     */
    virtual void SetAmbientLight_Req(const ::v1::com::harman::vehicle::VehicleType::eAmbientLightingColor &_AmbientLightColor, const int16_t &_AmbientLightIntensity, CommonAPI::CallStatus &_internalCallStatus, bool &_AmbientLight_Req_status, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> SetAmbientLight_ReqAsync(const ::v1::com::harman::vehicle::VehicleType::eAmbientLightingColor &_AmbientLightColor, const int16_t &_AmbientLightIntensity, SetAmbientLight_ReqAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Display language change can be requested through this parameter,Vehiclesetting
     *   prescontrol will replay to requested module whether requested language
     *   supported both the screens or not
     */
    virtual void SetDisplayLanguage_Req(const ::v1::com::harman::vehicle::VehicleType::eDisplayLang &_dispLangReq, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::VehicleType::EGenericVehResp &_p_eGenericvehResp, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> SetDisplayLanguage_ReqAsync(const ::v1::com::harman::vehicle::VehicleType::eDisplayLang &_dispLangReq, SetDisplayLanguage_ReqAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AmbLightSettingsAttribute, ::v1::com::harman::vehicle::VehicleType_::ListAmbLightSettingsDeployment_t>> ambLightSettings_;
    class DBusdispDistanceUnits_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DispDistanceUnitsAttribute>> {
    public:
    template <typename... _A>
    	DBusdispDistanceUnits_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DispDistanceUnitsAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v1::com::harman::vehicle::VehicleType::eDistanceUnits& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v1::com::harman::vehicle::VehicleType::eDistanceUnits& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DispDistanceUnitsAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::com::harman::vehicle::VehicleType::eDistanceUnits& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v1::com::harman::vehicle::VehicleType::eDistanceUnits)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v1::com::harman::vehicle::VehicleType::eDistanceUnits _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DispDistanceUnitsAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusdispDistanceUnits_Attribute dispDistanceUnits_;
    class DBusdispLangStatus_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<DispLangStatusAttribute>> {
    public:
    template <typename... _A>
    	DBusdispLangStatus_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<DispLangStatusAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusdispLangStatus_Attribute dispLangStatus_;
    class DBusdispTemperature_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DispTemperatureAttribute>> {
    public:
    template <typename... _A>
    	DBusdispTemperature_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DispTemperatureAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v1::com::harman::vehicle::VehicleType::eTempreatureUnits& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v1::com::harman::vehicle::VehicleType::eTempreatureUnits& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DispTemperatureAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::com::harman::vehicle::VehicleType::eTempreatureUnits& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v1::com::harman::vehicle::VehicleType::eTempreatureUnits)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v1::com::harman::vehicle::VehicleType::eTempreatureUnits _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DispTemperatureAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusdispTemperature_Attribute dispTemperature_;
    class DBustimeMode_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TimeModeAttribute>> {
    public:
    template <typename... _A>
    	DBustimeMode_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TimeModeAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v1::com::harman::vehicle::VehicleType::eTimeFormat& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v1::com::harman::vehicle::VehicleType::eTimeFormat& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TimeModeAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::com::harman::vehicle::VehicleType::eTimeFormat& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v1::com::harman::vehicle::VehicleType::eTimeFormat)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v1::com::harman::vehicle::VehicleType::eTimeFormat _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TimeModeAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBustimeMode_Attribute timeMode_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<DriverRestrictionsGeneralAttribute>> driverRestrictionsGeneral_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<DriverRestrictionsVideoAttribute>> driverRestrictionsVideo_;
    class DBustouchBeepStatus_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TouchBeepStatusAttribute>> {
    public:
    template <typename... _A>
    	DBustouchBeepStatus_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TouchBeepStatusAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v1::com::harman::vehicle::VehicleType::eBezelBeeps& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v1::com::harman::vehicle::VehicleType::eBezelBeeps& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TouchBeepStatusAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::com::harman::vehicle::VehicleType::eBezelBeeps& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v1::com::harman::vehicle::VehicleType::eBezelBeeps)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v1::com::harman::vehicle::VehicleType::eBezelBeeps _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TouchBeepStatusAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBustouchBeepStatus_Attribute touchBeepStatus_;
    class DBuscountryRegion_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CountryRegionAttribute>> {
    public:
    template <typename... _A>
    	DBuscountryRegion_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CountryRegionAttribute>>(
    			_proxy, arguments...) {}
    };
    DBuscountryRegion_Attribute countryRegion_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<AllVersionsAttribute, ::v1::com::harman::vehicle::VehicleType_::VersionInfoListDeployment_t>> allVersions_;

    CommonAPI::DBus::DBusEvent<DispLangResponseEvent, CommonAPI::Deployable<::v1::com::harman::vehicle::VehicleType::eDisplayLangResponse, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v1::com::harman::vehicle::VehicleType::eDisplayLang, CommonAPI::EmptyDeployment>> dispLangResponse_;

};

} // namespace vehicle
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_VEHICLE_Vehicle_Settings_DBUS_PROXY_HPP_

