/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_HARMAN_HMIDIALOGUESERVICE_hmi_Dialogue_Service_Interface_DBUS_PROXY_HPP_
#define V1_COM_HARMAN_HMIDIALOGUESERVICE_hmi_Dialogue_Service_Interface_DBUS_PROXY_HPP_

#include <v1/com/harman/hmiDialogueService/hmiDialogueServiceInterfaceProxyBase.hpp>
#include "v1/com/harman/hmiDialogueService/hmiDialogueServiceInterfaceDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace com {
namespace harman {
namespace hmiDialogueService {

class hmiDialogueServiceInterfaceDBusProxy
    : virtual public hmiDialogueServiceInterfaceProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    hmiDialogueServiceInterfaceDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~hmiDialogueServiceInterfaceDBusProxy() { }


    virtual Event_AlertStatusEvent& getEvent_AlertStatusEvent();
    virtual Event_BandONSStatusEvent& getEvent_BandONSStatusEvent();
    virtual Event_alertButtonInteractionEvent& getEvent_alertButtonInteractionEvent();
    virtual Event_alertSpecialButtonInteractionEvent& getEvent_alertSpecialButtonInteractionEvent();

    /**
     * description: Requests for an Alert to be shown, updated, or hidden from the user
     * param: request (RequestDialogueAlert) : values used to direct the Alert, including
     *   showing or hiding it
            
            returns: response
     *   (RequestDialogueResponse) : indication of success or failure
     */
    virtual void request_alert(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueAlert &_request, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueResponse &_response, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> request_alertAsync(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueAlert &_request, Request_alertAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Requests for an Alert to be shown, updated, or hidden from the user with
     *   special buttons along with other basic button and properties
     * param: request (RequestDialogueAlertWithSpecialButton) : values used to direct the
     *   Alert
            
            returns: response (RequestDialogueResponse) :
     *   indication of success or failure
     */
    virtual void request_special_alert(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueSpecialAlert &_request, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueResponse &_response, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> request_special_alertAsync(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueSpecialAlert &_request, Request_special_alertAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Requests for a BandONS to be shown, updated, or hidden from the user
     * param: request (RequestDialogueBandONS) : values used to direct the BandONS, including
     *   showing or hiding it
            
            returns: response
     *   (RequestDialogueResponse) : indication of success or failure
     */
    virtual void request_bandONS(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueBandONS &_request, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueResponse &_response, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> request_bandONSAsync(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueBandONS &_request, Request_bandONSAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Request to destroy an existing Alert. This will destroy the alert under given
     *   context permanently.
     * param: AlertContext : context to identify the alert to be destroyed
            
           
     *   returns: DialogueResponseCode : indication of success or failure
     */
    virtual void Remove_alert(const std::string &_AlertContext, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode &_code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> Remove_alertAsync(const std::string &_AlertContext, Remove_alertAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Request to destroy an existing BandONS. This will destroy the BandONS under
     *   given context permanently.
     * param: BandONSContext : context to identify the BandONS to be destroyed
            
         
     *     returns: DialogueResponseCode : indication of success or failure
     */
    virtual void Remove_BandONS(const std::string &_BandONSContext, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode &_code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> Remove_BandONSAsync(const std::string &_BandONSContext, Remove_BandONSAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Request to provide status of an existing Alert.
     * param: AlertContext : context to identify the alert 
            
            returns:
     *   DialogueResponseCode : indication of success or failure
     */
    virtual void status_alert(const std::string &_AlertContext, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode &_code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> status_alertAsync(const std::string &_AlertContext, Status_alertAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Request to provide status of an existing BandONS.
     * param: BandONSContext : context to identify the BandONS
            
            returns:
     *   DialogueResponseCode : indication of success or failure
     */
    virtual void status_BandONS(const std::string &_BandONSContext, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode &_code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> status_BandONSAsync(const std::string &_BandONSContext, Status_BandONSAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<Event_AlertStatusEvent, CommonAPI::Deployable<::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::StatusDialogue, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes_::StatusDialogueDeployment_t>> event_AlertStatus_;
    CommonAPI::DBus::DBusEvent<Event_BandONSStatusEvent, CommonAPI::Deployable<::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::StatusDialogue, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes_::StatusDialogueDeployment_t>> event_BandONSStatus_;
    CommonAPI::DBus::DBusEvent<Event_alertButtonInteractionEvent, CommonAPI::Deployable<::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::ButtonInteraction, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes_::ButtonInteractionDeployment_t>> event_alertButtonInteraction_;
    CommonAPI::DBus::DBusEvent<Event_alertSpecialButtonInteractionEvent, CommonAPI::Deployable<::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::SpecialButtonInteraction, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes_::SpecialButtonInteractionDeployment_t>> event_alertSpecialButtonInteraction_;

};

} // namespace hmiDialogueService
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_HMIDIALOGUESERVICE_hmi_Dialogue_Service_Interface_DBUS_PROXY_HPP_

