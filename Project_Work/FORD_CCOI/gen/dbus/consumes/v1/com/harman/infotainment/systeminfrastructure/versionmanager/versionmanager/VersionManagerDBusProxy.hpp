/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: The VersionManager component is responsible for gathering version information
 *   of the different modules at run time as well as managing
    a set of required
 *   version for a certain release, the release configuration that is defined at
 *   integration time.


    Version: 1.0
    Reason:
        - Initial Version
   
 *   Changes:
        1. readonly attributes: versionlist
        2. methods:
 *   GetVersion, SetVersion
        3. signal : versioninfochanged
 * author: Dinesh D
 */
#ifndef V1_COM_HARMAN_INFOTAINMENT_SYSTEMINFRASTRUCTURE_VERSIONMANAGER_VERSIONMANAGER_Version_Manager_DBUS_PROXY_HPP_
#define V1_COM_HARMAN_INFOTAINMENT_SYSTEMINFRASTRUCTURE_VERSIONMANAGER_VERSIONMANAGER_Version_Manager_DBUS_PROXY_HPP_

#include <v1/com/harman/infotainment/systeminfrastructure/versionmanager/versionmanager/VersionManagerProxyBase.hpp>
#include "v1/com/harman/infotainment/systeminfrastructure/versionmanager/versionmanager/VersionManagerDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>
#include <CommonAPI/Types.hpp>
#include <CommonAPI/DBus/DBusSelectiveEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace com {
namespace harman {
namespace infotainment {
namespace systeminfrastructure {
namespace versionmanager {
namespace versionmanager {

class VersionManagerDBusProxy
    : virtual public VersionManagerProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    VersionManagerDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~VersionManagerDBusProxy() { }

    virtual AllVersionsAttribute& getAllVersionsAttribute();

    virtual VersionupdatedSelectiveEvent& getVersionupdatedSelectiveEvent();

    /**
     * description: a method to retrieve known version information of a specific component
           
     *   to retrieve all versions "attribute VersionInfoList allVersions" can be used
     */
    virtual void getVersion(const std::string &_versionName, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfo &_versionInfo, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(const std::string &_versionName, GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: a method to update version list from specific client
     */
    virtual void setVersion(const ::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfoList &_versions, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setVersionAsync(const ::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfoList &_versions, SetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<AllVersionsAttribute, ::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes_::VersionInfoListDeployment_t>> allVersions_;

    CommonAPI::DBus::DBusSelectiveEvent<VersionupdatedSelectiveEvent, CommonAPI::Deployable<::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfo, ::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes_::VersionInfoDeployment_t>> versionupdatedSelective_;

};

} // namespace versionmanager
} // namespace versionmanager
} // namespace systeminfrastructure
} // namespace infotainment
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_INFOTAINMENT_SYSTEMINFRASTRUCTURE_VERSIONMANAGER_VERSIONMANAGER_Version_Manager_DBUS_PROXY_HPP_

