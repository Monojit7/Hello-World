/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: The VersionManager component is responsible for gathering version information
 *   of the different modules at run time as well as managing
    a set of required
 *   version for a certain release, the release configuration that is defined at
 *   integration time.


    Version: 1.0
    Reason:
        - Initial Version
   
 *   Changes:
        1. readonly attributes: versionlist
        2. methods:
 *   GetVersion, SetVersion
        3. signal : versioninfochanged
 * author: Dinesh D
 */
#include <v1/com/harman/infotainment/systeminfrastructure/versionmanager/versionmanager/VersionManagerDBusProxy.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace infotainment {
namespace systeminfrastructure {
namespace versionmanager {
namespace versionmanager {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createVersionManagerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<VersionManagerDBusProxy>(_address, _connection);
}

INITIALIZER(registerVersionManagerDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		VersionManager::getInterface(),
		&createVersionManagerDBusProxy);
}

VersionManagerDBusProxy::VersionManagerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		allVersions_(*this, "onAllVersionsAttributeChanged", "a(ssi)", "getAllVersionsAttribute", static_cast<::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes_::VersionInfoListDeployment_t*>(nullptr))
,		versionupdatedSelective_(*this, "versionupdated", "(ssi)", std::make_tuple(static_cast<::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes_::VersionInfoDeployment_t*>(nullptr)))
{
}

      VersionManagerDBusProxy::AllVersionsAttribute& VersionManagerDBusProxy::getAllVersionsAttribute() {
          return allVersions_;
      }

VersionManagerDBusProxy::VersionupdatedSelectiveEvent& VersionManagerDBusProxy::getVersionupdatedSelectiveEvent() {
    return versionupdatedSelective_;
}
    
    /**
     * description: a method to retrieve known version information of a specific component
           
     *   to retrieve all versions "attribute VersionInfoList allVersions" can be used
     */
    void VersionManagerDBusProxy::getVersion(const std::string &_versionName, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfo &_versionInfo, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_versionName(_versionName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfo, ::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes_::VersionInfoDeployment_t> deploy_versionInfo(static_cast<::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes_::VersionInfoDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfo,::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes_::VersionInfoDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getVersion",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_versionName,
_internalCallStatus,
deploy_versionInfo);
_versionInfo = deploy_versionInfo.getValue();
}
    std::future<CommonAPI::CallStatus> VersionManagerDBusProxy::getVersionAsync(const std::string &_versionName, GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_versionName(_versionName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfo, ::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes_::VersionInfoDeployment_t> deploy_versionInfo(static_cast<::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes_::VersionInfoDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfo,::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes_::VersionInfoDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getVersion",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_versionName,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfo, ::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes_::VersionInfoDeployment_t> _versionInfo) {
        	if (_callback)
        		_callback(_internalCallStatus, _versionInfo.getValue());
        },
        std::make_tuple(deploy_versionInfo));
    }
    /**
     * description: a method to update version list from specific client
     */
    void VersionManagerDBusProxy::setVersion(const ::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfoList &_versions, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfoList, ::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes_::VersionInfoListDeployment_t> deploy_versions(_versions, static_cast<::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes_::VersionInfoListDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfoList, ::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes_::VersionInfoListDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setVersion",
        "a(ssi)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_versions,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> VersionManagerDBusProxy::setVersionAsync(const ::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfoList &_versions, SetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfoList, ::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes_::VersionInfoListDeployment_t> deploy_versions(_versions, static_cast<::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes_::VersionInfoListDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfoList, ::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes_::VersionInfoListDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setVersion",
        "a(ssi)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_versions,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }


void VersionManagerDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace versionmanager
      } // namespace versionmanager
      } // namespace systeminfrastructure
      } // namespace infotainment
      } // namespace harman
      } // namespace com
      } // namespace v1
