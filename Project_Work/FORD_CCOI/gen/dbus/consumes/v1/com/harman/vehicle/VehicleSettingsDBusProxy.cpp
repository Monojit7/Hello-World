/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: The interface towards the Controlling Instance (e.g. HMI). It handles the
 *   communication towards the HMI and other system components who need to interact
 *   with the Vehicle Settings.
 * author: Pramod kumar kar, Yogesh sharma
 */
#include <v1/com/harman/vehicle/VehicleSettingsDBusProxy.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace vehicle {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createVehicleSettingsDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<VehicleSettingsDBusProxy>(_address, _connection);
}

INITIALIZER(registerVehicleSettingsDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		VehicleSettings::getInterface(),
		&createVehicleSettingsDBusProxy);
}

VehicleSettingsDBusProxy::VehicleSettingsDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		ambLightSettings_(*this, "onAmbLightSettingsAttributeChanged", "setAmbLightSettingsAttribute", "a(in)", "getAmbLightSettingsAttribute", static_cast<::v1::com::harman::vehicle::VehicleType_::ListAmbLightSettingsDeployment_t*>(nullptr)),
		dispDistanceUnits_(*this, "onDispDistanceUnitsAttributeChanged", "setDispDistanceUnitsAttribute", "i", "getDispDistanceUnitsAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		dispLangStatus_(*this, "onDispLangStatusAttributeChanged", "i", "getDispLangStatusAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		dispTemperature_(*this, "onDispTemperatureAttributeChanged", "setDispTemperatureAttribute", "i", "getDispTemperatureAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		timeMode_(*this, "onTimeModeAttributeChanged", "setTimeModeAttribute", "i", "getTimeModeAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		driverRestrictionsGeneral_(*this, "onDriverRestrictionsGeneralAttributeChanged", "b", "getDriverRestrictionsGeneralAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		driverRestrictionsVideo_(*this, "onDriverRestrictionsVideoAttributeChanged", "b", "getDriverRestrictionsVideoAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		touchBeepStatus_(*this, "onTouchBeepStatusAttributeChanged", "setTouchBeepStatusAttribute", "i", "getTouchBeepStatusAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		countryRegion_(*this, "onCountryRegionAttributeChanged", "i", "getCountryRegionAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		allVersions_(*this, "onAllVersionsAttributeChanged", "(ssssss)", "getAllVersionsAttribute", static_cast<::v1::com::harman::vehicle::VehicleType_::VersionInfoListDeployment_t*>(nullptr))
,		dispLangResponse_(*this, "dispLangResponse", "ii", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
{
}

      VehicleSettingsDBusProxy::AmbLightSettingsAttribute& VehicleSettingsDBusProxy::getAmbLightSettingsAttribute() {
          return ambLightSettings_;
      }
      VehicleSettingsDBusProxy::DispDistanceUnitsAttribute& VehicleSettingsDBusProxy::getDispDistanceUnitsAttribute() {
          return dispDistanceUnits_;
      }
      VehicleSettingsDBusProxy::DispLangStatusAttribute& VehicleSettingsDBusProxy::getDispLangStatusAttribute() {
          return dispLangStatus_;
      }
      VehicleSettingsDBusProxy::DispTemperatureAttribute& VehicleSettingsDBusProxy::getDispTemperatureAttribute() {
          return dispTemperature_;
      }
      VehicleSettingsDBusProxy::TimeModeAttribute& VehicleSettingsDBusProxy::getTimeModeAttribute() {
          return timeMode_;
      }
      VehicleSettingsDBusProxy::DriverRestrictionsGeneralAttribute& VehicleSettingsDBusProxy::getDriverRestrictionsGeneralAttribute() {
          return driverRestrictionsGeneral_;
      }
      VehicleSettingsDBusProxy::DriverRestrictionsVideoAttribute& VehicleSettingsDBusProxy::getDriverRestrictionsVideoAttribute() {
          return driverRestrictionsVideo_;
      }
      VehicleSettingsDBusProxy::TouchBeepStatusAttribute& VehicleSettingsDBusProxy::getTouchBeepStatusAttribute() {
          return touchBeepStatus_;
      }
      VehicleSettingsDBusProxy::CountryRegionAttribute& VehicleSettingsDBusProxy::getCountryRegionAttribute() {
          return countryRegion_;
      }
      VehicleSettingsDBusProxy::AllVersionsAttribute& VehicleSettingsDBusProxy::getAllVersionsAttribute() {
          return allVersions_;
      }

VehicleSettingsDBusProxy::DispLangResponseEvent& VehicleSettingsDBusProxy::getDispLangResponseEvent() {
    return dispLangResponse_;
}
    
    /**
     * description: This interface is used to set the colour and intensity of the ambient light
     */
    void VehicleSettingsDBusProxy::SetAmbientLight_Req(const ::v1::com::harman::vehicle::VehicleType::eAmbientLightingColor &_AmbientLightColor, const int16_t &_AmbientLightIntensity, CommonAPI::CallStatus &_internalCallStatus, bool &_AmbientLight_Req_status, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::vehicle::VehicleType::eAmbientLightingColor, CommonAPI::EmptyDeployment> deploy_AmbientLightColor(_AmbientLightColor, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_AmbientLightIntensity(_AmbientLightIntensity, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_AmbientLight_Req_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::vehicle::VehicleType::eAmbientLightingColor, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "SetAmbientLight_Req",
        "in",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_AmbientLightColor, deploy_AmbientLightIntensity,
_internalCallStatus,
deploy_AmbientLight_Req_status);
_AmbientLight_Req_status = deploy_AmbientLight_Req_status.getValue();
}
    std::future<CommonAPI::CallStatus> VehicleSettingsDBusProxy::SetAmbientLight_ReqAsync(const ::v1::com::harman::vehicle::VehicleType::eAmbientLightingColor &_AmbientLightColor, const int16_t &_AmbientLightIntensity, SetAmbientLight_ReqAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::vehicle::VehicleType::eAmbientLightingColor, CommonAPI::EmptyDeployment> deploy_AmbientLightColor(_AmbientLightColor, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_AmbientLightIntensity(_AmbientLightIntensity, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_AmbientLight_Req_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::vehicle::VehicleType::eAmbientLightingColor, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "SetAmbientLight_Req",
        "in",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_AmbientLightColor, deploy_AmbientLightIntensity,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> _AmbientLight_Req_status) {
        	if (_callback)
        		_callback(_internalCallStatus, _AmbientLight_Req_status.getValue());
        },
        std::make_tuple(deploy_AmbientLight_Req_status));
    }
    /**
     * description: Display language change can be requested through this parameter,Vehiclesetting
     *   prescontrol will replay to requested module whether requested language
     *   supported both the screens or not
     */
    void VehicleSettingsDBusProxy::SetDisplayLanguage_Req(const ::v1::com::harman::vehicle::VehicleType::eDisplayLang &_dispLangReq, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::VehicleType::EGenericVehResp &_p_eGenericvehResp, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::vehicle::VehicleType::eDisplayLang, CommonAPI::EmptyDeployment> deploy_dispLangReq(_dispLangReq, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::vehicle::VehicleType::EGenericVehResp, CommonAPI::EmptyDeployment> deploy_p_eGenericvehResp(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::vehicle::VehicleType::eDisplayLang, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::vehicle::VehicleType::EGenericVehResp,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "SetDisplayLanguage_Req",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_dispLangReq,
_internalCallStatus,
deploy_p_eGenericvehResp);
_p_eGenericvehResp = deploy_p_eGenericvehResp.getValue();
}
    std::future<CommonAPI::CallStatus> VehicleSettingsDBusProxy::SetDisplayLanguage_ReqAsync(const ::v1::com::harman::vehicle::VehicleType::eDisplayLang &_dispLangReq, SetDisplayLanguage_ReqAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::vehicle::VehicleType::eDisplayLang, CommonAPI::EmptyDeployment> deploy_dispLangReq(_dispLangReq, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::vehicle::VehicleType::EGenericVehResp, CommonAPI::EmptyDeployment> deploy_p_eGenericvehResp(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::vehicle::VehicleType::eDisplayLang, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::vehicle::VehicleType::EGenericVehResp,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "SetDisplayLanguage_Req",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_dispLangReq,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::vehicle::VehicleType::EGenericVehResp, CommonAPI::EmptyDeployment> _p_eGenericvehResp) {
        	if (_callback)
        		_callback(_internalCallStatus, _p_eGenericvehResp.getValue());
        },
        std::make_tuple(deploy_p_eGenericvehResp));
    }


void VehicleSettingsDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace vehicle
      } // namespace harman
      } // namespace com
      } // namespace v1
