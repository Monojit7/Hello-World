/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v2/com/harman/voice/CCOIPresCtrl.hpp>
#include <v2/com/harman/voice/CCOIPresCtrlDBusStubAdapter.hpp>

namespace v2 {
namespace com {
namespace harman {
namespace voice {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createCCOIPresCtrlDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<CCOIPresCtrlDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerCCOIPresCtrlDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	CCOIPresCtrl::getInterface(), &createCCOIPresCtrlDBusStubAdapter);
}

CCOIPresCtrlDBusStubAdapterInternal::~CCOIPresCtrlDBusStubAdapterInternal() {
    deactivateManagedInstances();
    CCOIPresCtrlDBusStubAdapterHelper::deinit();
}

void CCOIPresCtrlDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* CCOIPresCtrlDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"getLoc_data_icon_valAttribute\">\n"
            "<arg name=\"value\" type=\"i\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onLoc_data_icon_valAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
        "</signal>\n"
        "<method name=\"getResponseAttribute\">\n"
            "<arg name=\"value\" type=\"a(ssssissbibb)\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onResponseAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"a(ssssissbibb)\" />\n"
        "</signal>\n"
        "<method name=\"getInfoMessageAttribute\">\n"
            "<arg name=\"value\" type=\"s\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onInfoMessageAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"s\" />\n"
        "</signal>\n"
        "<method name=\"getLocationstsAttribute\">\n"
            "<arg name=\"value\" type=\"(bb)\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onLocationstsAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"(bb)\" />\n"
        "</signal>\n"
        "<method name=\"getTcu_snAttribute\">\n"
            "<arg name=\"value\" type=\"ay\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onTcu_snAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"ay\" />\n"
        "</signal>\n"
        "<method name=\"getAppBrandNamesAttribute\">\n"
            "<arg name=\"value\" type=\"(ss)\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onAppBrandNamesAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"(ss)\" />\n"
        "</signal>\n"
        "<method name=\"getSyncMessageAttribute\">\n"
            "<arg name=\"value\" type=\"(is)\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onSyncMessageAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"(is)\" />\n"
        "</signal>\n"
        /**
         * description: HMI can inform the CCOI module with the below method that user has changes the
         *   settings screen  
        		    entity status
         * param: request (entity) : user changes setting entity's updated details
                
             
         *     	returns: response (entity) : true or false to indicate the success of
         *   updation of the status
         */
        "<method name=\"SettingsEntriesUpdate\">\n"
            "<arg name=\"_request\" type=\"(ssssissbibb)\" direction=\"in\" />\n"
            "<arg name=\"_response\" type=\"(ssssissbibb)\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v2::com::harman::voice::CCOIPresCtrlStub,
        CommonAPI::Version
        > CCOIPresCtrlDBusStubAdapterInternal::getCCOIPresCtrlInterfaceVersionStubDispatcher(&CCOIPresCtrlStub::getInterfaceVersion, "uu");

/**
 * description: Refer the description in the enumerator LocDataShareIconValues 
		  This is for
 *   showing the location-data-icons as per policy files
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v2::com::harman::voice::CCOIPresCtrlStub,
        ::v2::com::harman::voice::CCOIPresCtrl::LocDataShareIconValues
        > CCOIPresCtrlDBusStubAdapterInternal::getLoc_data_icon_valAttributeStubDispatcher(
            &::v2::com::harman::voice::CCOIPresCtrlStub::getLoc_data_icon_valAttribute
            , "i"
            );
/**
 * description: HMI can query the below method to get complete set of entries that need to be
 *   
		    populated in the settings screen
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v2::com::harman::voice::CCOIPresCtrlStub,
        ::v2::com::harman::voice::CCOIPresCtrl::entity,
        CCOIPresCtrl_::entityDeployment_t
        > CCOIPresCtrlDBusStubAdapterInternal::getResponseAttributeStubDispatcher(
            &::v2::com::harman::voice::CCOIPresCtrlStub::getResponseAttribute
            , "a(ssssissbibb)"
            );
/**
 * description: attribute holding the info text pop-up message for Connectivity Settings
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v2::com::harman::voice::CCOIPresCtrlStub,
        std::string,
        CommonAPI::DBus::StringDeployment
        > CCOIPresCtrlDBusStubAdapterInternal::getInfoMessageAttributeStubDispatcher(
            &::v2::com::harman::voice::CCOIPresCtrlStub::getInfoMessageAttribute
            , "s"
            );
/**
 * description: refer struct Location.
	    	Applink has to act based on this status
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v2::com::harman::voice::CCOIPresCtrlStub,
        ::v2::com::harman::voice::CCOIPresCtrl::Location,
        CCOIPresCtrl_::LocationDeployment_t
        > CCOIPresCtrlDBusStubAdapterInternal::getLocationstsAttributeStubDispatcher(
            &::v2::com::harman::voice::CCOIPresCtrlStub::getLocationstsAttribute
            , "(bb)"
            );
/**
 * description: TCU serial number will be mapped in the below parameter
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v2::com::harman::voice::CCOIPresCtrlStub,
        std::vector<uint8_t>,
        CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>
        > CCOIPresCtrlDBusStubAdapterInternal::getTcu_snAttributeStubDispatcher(
            &::v2::com::harman::voice::CCOIPresCtrlStub::getTcu_snAttribute
            , "ay"
            );
/**
 * description: refer struct AppBrandNames.
	    	WifiPresCtrl has to retrieve this value and
 *   display their variable text screens accordingly based on the Names for the App
 *   & Brand
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v2::com::harman::voice::CCOIPresCtrlStub,
        ::v2::com::harman::voice::CCOIPresCtrl::AppBrandNames,
        CCOIPresCtrl_::AppBrandNamesDeployment_t
        > CCOIPresCtrlDBusStubAdapterInternal::getAppBrandNamesAttributeStubDispatcher(
            &::v2::com::harman::voice::CCOIPresCtrlStub::getAppBrandNamesAttribute
            , "(ss)"
            );
/**
 * description: refer struct syncPopupMessage
		                  sync popups along with Ids,
 *   as per latest PTE & UFM received the message displayed in the pop-up is
 *   dynamic and shall retrieved from PTE, UFM
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v2::com::harman::voice::CCOIPresCtrlStub,
        ::v2::com::harman::voice::CCOIPresCtrl::syncPopupMessage,
        CCOIPresCtrl_::syncPopupMessageDeployment_t
        > CCOIPresCtrlDBusStubAdapterInternal::getSyncMessageAttributeStubDispatcher(
            &::v2::com::harman::voice::CCOIPresCtrlStub::getSyncMessageAttribute
            , "(is)"
            );



/**
 * description: HMI can inform the CCOI module with the below method that user has changes the
 *   settings screen  
		    entity status
 * param: request (entity) : user changes setting entity's updated details
        
     
 *     	returns: response (entity) : true or false to indicate the success of
 *   updation of the status
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v2::com::harman::voice::CCOIPresCtrlStub,
    std::tuple<CCOIPresCtrl::entityDetails>,
    std::tuple<CCOIPresCtrl::entityDetails>,
    std::tuple<CCOIPresCtrl_::entityDetailsDeployment_t>,
    std::tuple<CCOIPresCtrl_::entityDetailsDeployment_t>
    
    > CCOIPresCtrlDBusStubAdapterInternal::settingsEntriesUpdateStubDispatcher(
    &CCOIPresCtrlStub::SettingsEntriesUpdate, "(ssssissbibb)",
					std::make_tuple(static_cast<CCOIPresCtrl_::entityDetailsDeployment_t*>(nullptr)),
                	std::make_tuple(static_cast<CCOIPresCtrl_::entityDetailsDeployment_t*>(nullptr)));


/**
 * description: Refer the description in the enumerator LocDataShareIconValues 
		  This is for
 *   showing the location-data-icons as per policy files
 */
void CCOIPresCtrlDBusStubAdapterInternal::fireLoc_data_icon_valAttributeChanged(const ::v2::com::harman::voice::CCOIPresCtrl::LocDataShareIconValues& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v2::com::harman::voice::CCOIPresCtrl::LocDataShareIconValues
    >>
        ::sendSignal(
            *this,
            "onLoc_data_icon_valAttributeChanged",
            "i",
            value
    
    );
}
/**
 * description: HMI can query the below method to get complete set of entries that need to be
 *   
		    populated in the settings screen
 */
void CCOIPresCtrlDBusStubAdapterInternal::fireResponseAttributeChanged(const ::v2::com::harman::voice::CCOIPresCtrl::entity& value) {
    CommonAPI::Deployable<CCOIPresCtrl::entity, CCOIPresCtrl_::entityDeployment_t> deployedValue(value, static_cast<CCOIPresCtrl_::entityDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v2::com::harman::voice::CCOIPresCtrl::entity,
        CCOIPresCtrl_::entityDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onResponseAttributeChanged",
            "a(ssssissbibb)",
            deployedValue
    
    );
}
/**
 * description: attribute holding the info text pop-up message for Connectivity Settings
 */
void CCOIPresCtrlDBusStubAdapterInternal::fireInfoMessageAttributeChanged(const std::string& value) {
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deployedValue(value, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        std::string,
        CommonAPI::DBus::StringDeployment
    >
    >>
        ::sendSignal(
            *this,
            "onInfoMessageAttributeChanged",
            "s",
            deployedValue
    
    );
}
/**
 * description: refer struct Location.
	    	Applink has to act based on this status
 */
void CCOIPresCtrlDBusStubAdapterInternal::fireLocationstsAttributeChanged(const ::v2::com::harman::voice::CCOIPresCtrl::Location& value) {
    CommonAPI::Deployable<CCOIPresCtrl::Location, CCOIPresCtrl_::LocationDeployment_t> deployedValue(value, static_cast<CCOIPresCtrl_::LocationDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v2::com::harman::voice::CCOIPresCtrl::Location,
        CCOIPresCtrl_::LocationDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onLocationstsAttributeChanged",
            "(bb)",
            deployedValue
    
    );
}
/**
 * description: TCU serial number will be mapped in the below parameter
 */
void CCOIPresCtrlDBusStubAdapterInternal::fireTcu_snAttributeChanged(const std::vector<uint8_t>& value) {
    CommonAPI::Deployable<std::vector<uint8_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deployedValue(value, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        std::vector<uint8_t>,
        CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>
    >
    >>
        ::sendSignal(
            *this,
            "onTcu_snAttributeChanged",
            "ay",
            deployedValue
    
    );
}
/**
 * description: refer struct AppBrandNames.
	    	WifiPresCtrl has to retrieve this value and
 *   display their variable text screens accordingly based on the Names for the App
 *   & Brand
 */
void CCOIPresCtrlDBusStubAdapterInternal::fireAppBrandNamesAttributeChanged(const ::v2::com::harman::voice::CCOIPresCtrl::AppBrandNames& value) {
    CommonAPI::Deployable<CCOIPresCtrl::AppBrandNames, CCOIPresCtrl_::AppBrandNamesDeployment_t> deployedValue(value, static_cast<CCOIPresCtrl_::AppBrandNamesDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v2::com::harman::voice::CCOIPresCtrl::AppBrandNames,
        CCOIPresCtrl_::AppBrandNamesDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onAppBrandNamesAttributeChanged",
            "(ss)",
            deployedValue
    
    );
}
/**
 * description: refer struct syncPopupMessage
		                  sync popups along with Ids,
 *   as per latest PTE & UFM received the message displayed in the pop-up is
 *   dynamic and shall retrieved from PTE, UFM
 */
void CCOIPresCtrlDBusStubAdapterInternal::fireSyncMessageAttributeChanged(const ::v2::com::harman::voice::CCOIPresCtrl::syncPopupMessage& value) {
    CommonAPI::Deployable<CCOIPresCtrl::syncPopupMessage, CCOIPresCtrl_::syncPopupMessageDeployment_t> deployedValue(value, static_cast<CCOIPresCtrl_::syncPopupMessageDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v2::com::harman::voice::CCOIPresCtrl::syncPopupMessage,
        CCOIPresCtrl_::syncPopupMessageDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onSyncMessageAttributeChanged",
            "(is)",
            deployedValue
    
    );
}



const CCOIPresCtrlDBusStubAdapterHelper::StubDispatcherTable& CCOIPresCtrlDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& CCOIPresCtrlDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

CCOIPresCtrlDBusStubAdapterInternal::CCOIPresCtrlDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      CCOIPresCtrlDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<CCOIPresCtrlStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: Refer the description in the enumerator LocDataShareIconValues 
            		  This is for
             *   showing the location-data-icons as per policy files
             */
            { { "getLoc_data_icon_valAttribute", "" }, &com::harman::voice::CCOIPresCtrlDBusStubAdapterInternal::getLoc_data_icon_valAttributeStubDispatcher },
            /**
             * description: HMI can query the below method to get complete set of entries that need to be
             *   
            		    populated in the settings screen
             */
            { { "getResponseAttribute", "" }, &com::harman::voice::CCOIPresCtrlDBusStubAdapterInternal::getResponseAttributeStubDispatcher },
            /**
             * description: attribute holding the info text pop-up message for Connectivity Settings
             */
            { { "getInfoMessageAttribute", "" }, &com::harman::voice::CCOIPresCtrlDBusStubAdapterInternal::getInfoMessageAttributeStubDispatcher },
            /**
             * description: refer struct Location.
            	    	Applink has to act based on this status
             */
            { { "getLocationstsAttribute", "" }, &com::harman::voice::CCOIPresCtrlDBusStubAdapterInternal::getLocationstsAttributeStubDispatcher },
            /**
             * description: TCU serial number will be mapped in the below parameter
             */
            { { "getTcu_snAttribute", "" }, &com::harman::voice::CCOIPresCtrlDBusStubAdapterInternal::getTcu_snAttributeStubDispatcher },
            /**
             * description: refer struct AppBrandNames.
            	    	WifiPresCtrl has to retrieve this value and
             *   display their variable text screens accordingly based on the Names for the App
             *   & Brand
             */
            { { "getAppBrandNamesAttribute", "" }, &com::harman::voice::CCOIPresCtrlDBusStubAdapterInternal::getAppBrandNamesAttributeStubDispatcher },
            /**
             * description: refer struct syncPopupMessage
            		                  sync popups along with Ids,
             *   as per latest PTE & UFM received the message displayed in the pop-up is
             *   dynamic and shall retrieved from PTE, UFM
             */
            { { "getSyncMessageAttribute", "" }, &com::harman::voice::CCOIPresCtrlDBusStubAdapterInternal::getSyncMessageAttributeStubDispatcher }
            ,
            /**
             * description: HMI can inform the CCOI module with the below method that user has changes the
             *   settings screen  
            		    entity status
             * param: request (entity) : user changes setting entity's updated details
                    
                 
             *     	returns: response (entity) : true or false to indicate the success of
             *   updation of the status
             */
            { { "SettingsEntriesUpdate", "(ssssissbibb)" }, &com::harman::voice::CCOIPresCtrlDBusStubAdapterInternal::settingsEntriesUpdateStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &com::harman::voice::CCOIPresCtrlDBusStubAdapterInternal::getCCOIPresCtrlInterfaceVersionStubDispatcher });
}

bool CCOIPresCtrlDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace voice
} // namespace harman
} // namespace com
} // namespace v2
