/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V2_COM_HARMAN_VOICE_CCOI_Pres_Ctrl_STUB_HPP_
#define V2_COM_HARMAN_VOICE_CCOI_Pres_Ctrl_STUB_HPP_

#include <functional>




#include <v2/com/harman/voice/CCOIPresCtrl.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v2 {
namespace com {
namespace harman {
namespace voice {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service CCOIPresCtrl. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class CCOIPresCtrlStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual CCOIPresCtrl {
 public:
    ///Notifies all remote listeners about a change of value of the attribute loc_data_icon_val.
    virtual void fireLoc_data_icon_valAttributeChanged(const ::v2::com::harman::voice::CCOIPresCtrl::LocDataShareIconValues& loc_data_icon_val) = 0;
    ///Notifies all remote listeners about a change of value of the attribute response.
    virtual void fireResponseAttributeChanged(const ::v2::com::harman::voice::CCOIPresCtrl::entity& response) = 0;
    ///Notifies all remote listeners about a change of value of the attribute infoMessage.
    virtual void fireInfoMessageAttributeChanged(const std::string& infoMessage) = 0;
    ///Notifies all remote listeners about a change of value of the attribute locationsts.
    virtual void fireLocationstsAttributeChanged(const ::v2::com::harman::voice::CCOIPresCtrl::Location& locationsts) = 0;
    ///Notifies all remote listeners about a change of value of the attribute tcu_sn.
    virtual void fireTcu_snAttributeChanged(const std::vector<uint8_t>& tcu_sn) = 0;
    ///Notifies all remote listeners about a change of value of the attribute appBrandNames.
    virtual void fireAppBrandNamesAttributeChanged(const ::v2::com::harman::voice::CCOIPresCtrl::AppBrandNames& appBrandNames) = 0;
    ///Notifies all remote listeners about a change of value of the attribute syncMessage.
    virtual void fireSyncMessageAttributeChanged(const ::v2::com::harman::voice::CCOIPresCtrl::syncPopupMessage& syncMessage) = 0;



    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for CCOIPresCtrl.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class CCOIPresCtrlStubRemoteEvent
{
public:
    virtual ~CCOIPresCtrlStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service CCOIPresCtrl to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class CCOIPresCtrlStub
    : public virtual CommonAPI::Stub<CCOIPresCtrlStubAdapter, CCOIPresCtrlStubRemoteEvent>
{
public:
    typedef std::function<void (CCOIPresCtrl::entityDetails _response)>SettingsEntriesUpdateReply_t;

    virtual ~CCOIPresCtrlStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /**
     * description: Refer the description in the enumerator LocDataShareIconValues 
    		  This is for
     *   showing the location-data-icons as per policy files
     */
    /// Provides getter access to the attribute loc_data_icon_val
    virtual const ::v2::com::harman::voice::CCOIPresCtrl::LocDataShareIconValues &getLoc_data_icon_valAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: HMI can query the below method to get complete set of entries that need to be
     *   
    		    populated in the settings screen
     */
    /// Provides getter access to the attribute response
    virtual const ::v2::com::harman::voice::CCOIPresCtrl::entity &getResponseAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: attribute holding the info text pop-up message for Connectivity Settings
     */
    /// Provides getter access to the attribute infoMessage
    virtual const std::string &getInfoMessageAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: refer struct Location.
    	    	Applink has to act based on this status
     */
    /// Provides getter access to the attribute locationsts
    virtual const ::v2::com::harman::voice::CCOIPresCtrl::Location &getLocationstsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: TCU serial number will be mapped in the below parameter
     */
    /// Provides getter access to the attribute tcu_sn
    virtual const std::vector<uint8_t> &getTcu_snAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: refer struct AppBrandNames.
    	    	WifiPresCtrl has to retrieve this value and
     *   display their variable text screens accordingly based on the Names for the App
     *   & Brand
     */
    /// Provides getter access to the attribute appBrandNames
    virtual const ::v2::com::harman::voice::CCOIPresCtrl::AppBrandNames &getAppBrandNamesAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: refer struct syncPopupMessage
    		                  sync popups along with Ids,
     *   as per latest PTE & UFM received the message displayed in the pop-up is
     *   dynamic and shall retrieved from PTE, UFM
     */
    /// Provides getter access to the attribute syncMessage
    virtual const ::v2::com::harman::voice::CCOIPresCtrl::syncPopupMessage &getSyncMessageAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /**
     * description: HMI can inform the CCOI module with the below method that user has changes the
     *   settings screen  
    		    entity status
     * param: request (entity) : user changes setting entity's updated details
            
         
     *     	returns: response (entity) : true or false to indicate the success of
     *   updation of the status
     */
    /// This is the method that will be called on remote calls on the method SettingsEntriesUpdate.
    virtual void SettingsEntriesUpdate(const std::shared_ptr<CommonAPI::ClientId> _client, CCOIPresCtrl::entityDetails _request, SettingsEntriesUpdateReply_t _reply) = 0;

    using CommonAPI::Stub<CCOIPresCtrlStubAdapter, CCOIPresCtrlStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<CCOIPresCtrlStubAdapter, CCOIPresCtrlStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<CCOIPresCtrlStubAdapter, CCOIPresCtrlStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef CCOIPresCtrlStubRemoteEvent RemoteEventType;
    typedef CCOIPresCtrl StubInterface;
};

} // namespace voice
} // namespace harman
} // namespace com
} // namespace v2


// Compatibility
namespace v2_0 = v2;

#endif // V2_COM_HARMAN_VOICE_CCOI_Pres_Ctrl_STUB_HPP_
