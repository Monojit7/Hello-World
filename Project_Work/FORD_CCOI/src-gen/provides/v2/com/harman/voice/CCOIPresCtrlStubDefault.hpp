/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V2_COM_HARMAN_VOICE_CCOI_Pres_Ctrl_STUB_DEFAULT_HPP_
#define V2_COM_HARMAN_VOICE_CCOI_Pres_Ctrl_STUB_DEFAULT_HPP_


#include <v2/com/harman/voice/CCOIPresCtrlStub.hpp>
#include <sstream>

namespace v2 {
namespace com {
namespace harman {
namespace voice {

/**
 * Provides a default implementation for CCOIPresCtrlStubRemoteEvent and
 * CCOIPresCtrlStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class CCOIPresCtrlStubDefault
    : public virtual CCOIPresCtrlStub {
public:
    CCOIPresCtrlStubDefault();

    CCOIPresCtrlStubRemoteEvent* initStubAdapter(const std::shared_ptr<CCOIPresCtrlStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    virtual const ::v2::com::harman::voice::CCOIPresCtrl::LocDataShareIconValues& getLoc_data_icon_valAttribute();
    virtual const ::v2::com::harman::voice::CCOIPresCtrl::LocDataShareIconValues& getLoc_data_icon_valAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setLoc_data_icon_valAttribute(::v2::com::harman::voice::CCOIPresCtrl::LocDataShareIconValues _value);
    virtual const ::v2::com::harman::voice::CCOIPresCtrl::entity& getResponseAttribute();
    virtual const ::v2::com::harman::voice::CCOIPresCtrl::entity& getResponseAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setResponseAttribute(::v2::com::harman::voice::CCOIPresCtrl::entity _value);
    virtual const std::string& getInfoMessageAttribute();
    virtual const std::string& getInfoMessageAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setInfoMessageAttribute(std::string _value);
    virtual const ::v2::com::harman::voice::CCOIPresCtrl::Location& getLocationstsAttribute();
    virtual const ::v2::com::harman::voice::CCOIPresCtrl::Location& getLocationstsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setLocationstsAttribute(::v2::com::harman::voice::CCOIPresCtrl::Location _value);
    virtual const std::vector<uint8_t>& getTcu_snAttribute();
    virtual const std::vector<uint8_t>& getTcu_snAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setTcu_snAttribute(std::vector<uint8_t> _value);
    virtual const ::v2::com::harman::voice::CCOIPresCtrl::AppBrandNames& getAppBrandNamesAttribute();
    virtual const ::v2::com::harman::voice::CCOIPresCtrl::AppBrandNames& getAppBrandNamesAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setAppBrandNamesAttribute(::v2::com::harman::voice::CCOIPresCtrl::AppBrandNames _value);
    virtual const ::v2::com::harman::voice::CCOIPresCtrl::syncPopupMessage& getSyncMessageAttribute();
    virtual const ::v2::com::harman::voice::CCOIPresCtrl::syncPopupMessage& getSyncMessageAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setSyncMessageAttribute(::v2::com::harman::voice::CCOIPresCtrl::syncPopupMessage _value);

    /**
     * description: HMI can inform the CCOI module with the below method that user has changes the
     *   settings screen  
    		    entity status
     * param: request (entity) : user changes setting entity's updated details
            
         
     *     	returns: response (entity) : true or false to indicate the success of
     *   updation of the status
     */
    virtual void SettingsEntriesUpdate(const std::shared_ptr<CommonAPI::ClientId> _client, CCOIPresCtrl::entityDetails _request, SettingsEntriesUpdateReply_t _reply);



protected:
    /**
     * description: Refer the description in the enumerator LocDataShareIconValues 
    		  This is for
     *   showing the location-data-icons as per policy files
     */
    virtual bool trySetLoc_data_icon_valAttribute(::v2::com::harman::voice::CCOIPresCtrl::LocDataShareIconValues _value);
    virtual bool validateLoc_data_icon_valAttributeRequestedValue(const ::v2::com::harman::voice::CCOIPresCtrl::LocDataShareIconValues &_value);
    /**
     * description: HMI can query the below method to get complete set of entries that need to be
     *   
    		    populated in the settings screen
     */
    virtual bool trySetResponseAttribute(::v2::com::harman::voice::CCOIPresCtrl::entity _value);
    virtual bool validateResponseAttributeRequestedValue(const ::v2::com::harman::voice::CCOIPresCtrl::entity &_value);
    /**
     * description: attribute holding the info text pop-up message for Connectivity Settings
     */
    virtual bool trySetInfoMessageAttribute(std::string _value);
    virtual bool validateInfoMessageAttributeRequestedValue(const std::string &_value);
    /**
     * description: refer struct Location.
    	    	Applink has to act based on this status
     */
    virtual bool trySetLocationstsAttribute(::v2::com::harman::voice::CCOIPresCtrl::Location _value);
    virtual bool validateLocationstsAttributeRequestedValue(const ::v2::com::harman::voice::CCOIPresCtrl::Location &_value);
    /**
     * description: TCU serial number will be mapped in the below parameter
     */
    virtual bool trySetTcu_snAttribute(std::vector<uint8_t> _value);
    virtual bool validateTcu_snAttributeRequestedValue(const std::vector<uint8_t> &_value);
    /**
     * description: refer struct AppBrandNames.
    	    	WifiPresCtrl has to retrieve this value and
     *   display their variable text screens accordingly based on the Names for the App
     *   & Brand
     */
    virtual bool trySetAppBrandNamesAttribute(::v2::com::harman::voice::CCOIPresCtrl::AppBrandNames _value);
    virtual bool validateAppBrandNamesAttributeRequestedValue(const ::v2::com::harman::voice::CCOIPresCtrl::AppBrandNames &_value);
    /**
     * description: refer struct syncPopupMessage
    		                  sync popups along with Ids,
     *   as per latest PTE & UFM received the message displayed in the pop-up is
     *   dynamic and shall retrieved from PTE, UFM
     */
    virtual bool trySetSyncMessageAttribute(::v2::com::harman::voice::CCOIPresCtrl::syncPopupMessage _value);
    virtual bool validateSyncMessageAttributeRequestedValue(const ::v2::com::harman::voice::CCOIPresCtrl::syncPopupMessage &_value);
    class RemoteEventHandler: public virtual CCOIPresCtrlStubRemoteEvent {
    public:
        RemoteEventHandler(CCOIPresCtrlStubDefault *_defaultStub);

        /**
         * description: Refer the description in the enumerator LocDataShareIconValues 
        		  This is for
         *   showing the location-data-icons as per policy files
         */

        /**
         * description: HMI can query the below method to get complete set of entries that need to be
         *   
        		    populated in the settings screen
         */

        /**
         * description: attribute holding the info text pop-up message for Connectivity Settings
         */

        /**
         * description: refer struct Location.
        	    	Applink has to act based on this status
         */

        /**
         * description: TCU serial number will be mapped in the below parameter
         */

        /**
         * description: refer struct AppBrandNames.
        	    	WifiPresCtrl has to retrieve this value and
         *   display their variable text screens accordingly based on the Names for the App
         *   & Brand
         */

        /**
         * description: refer struct syncPopupMessage
        		                  sync popups along with Ids,
         *   as per latest PTE & UFM received the message displayed in the pop-up is
         *   dynamic and shall retrieved from PTE, UFM
         */


    private:
        CCOIPresCtrlStubDefault *defaultStub_;
    };
private:
    CCOIPresCtrlStubDefault::RemoteEventHandler remoteEventHandler_;

    /**
     * description: Refer the description in the enumerator LocDataShareIconValues 
    		  This is for
     *   showing the location-data-icons as per policy files
     */
    ::v2::com::harman::voice::CCOIPresCtrl::LocDataShareIconValues loc_data_icon_valAttributeValue_ {};
    /**
     * description: HMI can query the below method to get complete set of entries that need to be
     *   
    		    populated in the settings screen
     */
    ::v2::com::harman::voice::CCOIPresCtrl::entity responseAttributeValue_ {};
    /**
     * description: attribute holding the info text pop-up message for Connectivity Settings
     */
    std::string infoMessageAttributeValue_ {};
    /**
     * description: refer struct Location.
    	    	Applink has to act based on this status
     */
    ::v2::com::harman::voice::CCOIPresCtrl::Location locationstsAttributeValue_ {};
    /**
     * description: TCU serial number will be mapped in the below parameter
     */
    std::vector<uint8_t> tcu_snAttributeValue_ {};
    /**
     * description: refer struct AppBrandNames.
    	    	WifiPresCtrl has to retrieve this value and
     *   display their variable text screens accordingly based on the Names for the App
     *   & Brand
     */
    ::v2::com::harman::voice::CCOIPresCtrl::AppBrandNames appBrandNamesAttributeValue_ {};
    /**
     * description: refer struct syncPopupMessage
    		                  sync popups along with Ids,
     *   as per latest PTE & UFM received the message displayed in the pop-up is
     *   dynamic and shall retrieved from PTE, UFM
     */
    ::v2::com::harman::voice::CCOIPresCtrl::syncPopupMessage syncMessageAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace voice
} // namespace harman
} // namespace com
} // namespace v2


// Compatibility
namespace v2_0 = v2;

#endif // V2_COM_HARMAN_VOICE_CCOI_Pres_Ctrl_STUB_DEFAULT
