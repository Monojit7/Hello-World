/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v2/com/harman/voice/CCOIPresCtrlStubDefault.hpp>
#include <assert.h>

namespace v2 {
namespace com {
namespace harman {
namespace voice {

CCOIPresCtrlStubDefault::CCOIPresCtrlStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(CCOIPresCtrl::getInterfaceVersion()) {
}

const CommonAPI::Version& CCOIPresCtrlStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

CCOIPresCtrlStubRemoteEvent* CCOIPresCtrlStubDefault::initStubAdapter(const std::shared_ptr<CCOIPresCtrlStubAdapter> &_adapter) {
    CommonAPI::Stub<CCOIPresCtrlStubAdapter, CCOIPresCtrlStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

const ::v2::com::harman::voice::CCOIPresCtrl::LocDataShareIconValues& CCOIPresCtrlStubDefault::getLoc_data_icon_valAttribute() {
    return loc_data_icon_valAttributeValue_;
}

const ::v2::com::harman::voice::CCOIPresCtrl::LocDataShareIconValues& CCOIPresCtrlStubDefault::getLoc_data_icon_valAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getLoc_data_icon_valAttribute();
}

void CCOIPresCtrlStubDefault::setLoc_data_icon_valAttribute(::v2::com::harman::voice::CCOIPresCtrl::LocDataShareIconValues _value) {
    const bool valueChanged = trySetLoc_data_icon_valAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<CCOIPresCtrlStubAdapter, CCOIPresCtrlStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireLoc_data_icon_valAttributeChanged(loc_data_icon_valAttributeValue_);
    }
}

bool CCOIPresCtrlStubDefault::trySetLoc_data_icon_valAttribute(::v2::com::harman::voice::CCOIPresCtrl::LocDataShareIconValues _value) {
    if (!validateLoc_data_icon_valAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (loc_data_icon_valAttributeValue_ != _value);
    loc_data_icon_valAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool CCOIPresCtrlStubDefault::validateLoc_data_icon_valAttributeRequestedValue(const ::v2::com::harman::voice::CCOIPresCtrl::LocDataShareIconValues &_value) {
    (void)_value;
	return _value.validate();
}


const ::v2::com::harman::voice::CCOIPresCtrl::entity& CCOIPresCtrlStubDefault::getResponseAttribute() {
    return responseAttributeValue_;
}

const ::v2::com::harman::voice::CCOIPresCtrl::entity& CCOIPresCtrlStubDefault::getResponseAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getResponseAttribute();
}

void CCOIPresCtrlStubDefault::setResponseAttribute(::v2::com::harman::voice::CCOIPresCtrl::entity _value) {
    const bool valueChanged = trySetResponseAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<CCOIPresCtrlStubAdapter, CCOIPresCtrlStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireResponseAttributeChanged(responseAttributeValue_);
    }
}

bool CCOIPresCtrlStubDefault::trySetResponseAttribute(::v2::com::harman::voice::CCOIPresCtrl::entity _value) {
    if (!validateResponseAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (responseAttributeValue_ != _value);
    responseAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool CCOIPresCtrlStubDefault::validateResponseAttributeRequestedValue(const ::v2::com::harman::voice::CCOIPresCtrl::entity &_value) {
    (void)_value;
	return true;
}


const std::string& CCOIPresCtrlStubDefault::getInfoMessageAttribute() {
    return infoMessageAttributeValue_;
}

const std::string& CCOIPresCtrlStubDefault::getInfoMessageAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getInfoMessageAttribute();
}

void CCOIPresCtrlStubDefault::setInfoMessageAttribute(std::string _value) {
    const bool valueChanged = trySetInfoMessageAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<CCOIPresCtrlStubAdapter, CCOIPresCtrlStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireInfoMessageAttributeChanged(infoMessageAttributeValue_);
    }
}

bool CCOIPresCtrlStubDefault::trySetInfoMessageAttribute(std::string _value) {
    if (!validateInfoMessageAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (infoMessageAttributeValue_ != _value);
    infoMessageAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool CCOIPresCtrlStubDefault::validateInfoMessageAttributeRequestedValue(const std::string &_value) {
    (void)_value;
	return true;
}


const ::v2::com::harman::voice::CCOIPresCtrl::Location& CCOIPresCtrlStubDefault::getLocationstsAttribute() {
    return locationstsAttributeValue_;
}

const ::v2::com::harman::voice::CCOIPresCtrl::Location& CCOIPresCtrlStubDefault::getLocationstsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getLocationstsAttribute();
}

void CCOIPresCtrlStubDefault::setLocationstsAttribute(::v2::com::harman::voice::CCOIPresCtrl::Location _value) {
    const bool valueChanged = trySetLocationstsAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<CCOIPresCtrlStubAdapter, CCOIPresCtrlStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireLocationstsAttributeChanged(locationstsAttributeValue_);
    }
}

bool CCOIPresCtrlStubDefault::trySetLocationstsAttribute(::v2::com::harman::voice::CCOIPresCtrl::Location _value) {
    if (!validateLocationstsAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (locationstsAttributeValue_ != _value);
    locationstsAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool CCOIPresCtrlStubDefault::validateLocationstsAttributeRequestedValue(const ::v2::com::harman::voice::CCOIPresCtrl::Location &_value) {
    (void)_value;
	return true;
}


const std::vector<uint8_t>& CCOIPresCtrlStubDefault::getTcu_snAttribute() {
    return tcu_snAttributeValue_;
}

const std::vector<uint8_t>& CCOIPresCtrlStubDefault::getTcu_snAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getTcu_snAttribute();
}

void CCOIPresCtrlStubDefault::setTcu_snAttribute(std::vector<uint8_t> _value) {
    const bool valueChanged = trySetTcu_snAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<CCOIPresCtrlStubAdapter, CCOIPresCtrlStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireTcu_snAttributeChanged(tcu_snAttributeValue_);
    }
}

bool CCOIPresCtrlStubDefault::trySetTcu_snAttribute(std::vector<uint8_t> _value) {
    if (!validateTcu_snAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (tcu_snAttributeValue_ != _value);
    tcu_snAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool CCOIPresCtrlStubDefault::validateTcu_snAttributeRequestedValue(const std::vector<uint8_t> &_value) {
    (void)_value;
	return true;
}


const ::v2::com::harman::voice::CCOIPresCtrl::AppBrandNames& CCOIPresCtrlStubDefault::getAppBrandNamesAttribute() {
    return appBrandNamesAttributeValue_;
}

const ::v2::com::harman::voice::CCOIPresCtrl::AppBrandNames& CCOIPresCtrlStubDefault::getAppBrandNamesAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getAppBrandNamesAttribute();
}

void CCOIPresCtrlStubDefault::setAppBrandNamesAttribute(::v2::com::harman::voice::CCOIPresCtrl::AppBrandNames _value) {
    const bool valueChanged = trySetAppBrandNamesAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<CCOIPresCtrlStubAdapter, CCOIPresCtrlStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireAppBrandNamesAttributeChanged(appBrandNamesAttributeValue_);
    }
}

bool CCOIPresCtrlStubDefault::trySetAppBrandNamesAttribute(::v2::com::harman::voice::CCOIPresCtrl::AppBrandNames _value) {
    if (!validateAppBrandNamesAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (appBrandNamesAttributeValue_ != _value);
    appBrandNamesAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool CCOIPresCtrlStubDefault::validateAppBrandNamesAttributeRequestedValue(const ::v2::com::harman::voice::CCOIPresCtrl::AppBrandNames &_value) {
    (void)_value;
	return true;
}


const ::v2::com::harman::voice::CCOIPresCtrl::syncPopupMessage& CCOIPresCtrlStubDefault::getSyncMessageAttribute() {
    return syncMessageAttributeValue_;
}

const ::v2::com::harman::voice::CCOIPresCtrl::syncPopupMessage& CCOIPresCtrlStubDefault::getSyncMessageAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getSyncMessageAttribute();
}

void CCOIPresCtrlStubDefault::setSyncMessageAttribute(::v2::com::harman::voice::CCOIPresCtrl::syncPopupMessage _value) {
    const bool valueChanged = trySetSyncMessageAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<CCOIPresCtrlStubAdapter, CCOIPresCtrlStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireSyncMessageAttributeChanged(syncMessageAttributeValue_);
    }
}

bool CCOIPresCtrlStubDefault::trySetSyncMessageAttribute(::v2::com::harman::voice::CCOIPresCtrl::syncPopupMessage _value) {
    if (!validateSyncMessageAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (syncMessageAttributeValue_ != _value);
    syncMessageAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool CCOIPresCtrlStubDefault::validateSyncMessageAttributeRequestedValue(const ::v2::com::harman::voice::CCOIPresCtrl::syncPopupMessage &_value) {
    (void)_value;
	return true;
}



/**
 * description: HMI can inform the CCOI module with the below method that user has changes the
 *   settings screen  
		    entity status
 * param: request (entity) : user changes setting entity's updated details
        
     
 *     	returns: response (entity) : true or false to indicate the success of
 *   updation of the status
 */
void CCOIPresCtrlStubDefault::SettingsEntriesUpdate(const std::shared_ptr<CommonAPI::ClientId> _client, CCOIPresCtrl::entityDetails _request, SettingsEntriesUpdateReply_t _reply) {
    (void)_client;
    (void) _request;
    CCOIPresCtrl::entityDetails response = {};
    _reply(response);
}




CCOIPresCtrlStubDefault::RemoteEventHandler::RemoteEventHandler(CCOIPresCtrlStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace voice
} // namespace harman
} // namespace com
} // namespace v2
