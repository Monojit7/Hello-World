/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef COM_HARMAN_HMIDIALOGUESERVICETYPES_hmi_Dialogue_Service_Types_HPP_
#define COM_HARMAN_HMIDIALOGUESERVICETYPES_hmi_Dialogue_Service_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace com {
namespace harman {
namespace hmiDialogueServiceTypes {

struct hmiDialogueServiceTypes {
    typedef std::vector<std::string> AlertStringList;
    
    struct ImageType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID_ENUM = -1,
            STATIC = 0,
            DYNAMIC = 1
        };
        
        ImageType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID_ENUM)) {}
        ImageType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID_ENUM):
                case static_cast<int32_t>(Literal::STATIC):
                case static_cast<int32_t>(Literal::DYNAMIC):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ImageType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ImageType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ImageType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ImageType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ImageType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ImageType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: properties of SoftButton Image.
     */
    struct SoftButtonImage : CommonAPI::Struct<ImageType, std::string> {
    	
    	SoftButtonImage() {
    	}
    	SoftButtonImage(const ImageType &_ButtonImageType, const std::string &_ImageValue)
    	{
    		std::get<0>(values_) = _ButtonImageType;
    		std::get<1>(values_) = _ImageValue;
    	}
    	/**
    	 * description: Image Type - static or Dynamic
    	 */
    	inline const ImageType &getButtonImageType() const { return std::get<0>(values_); }
    	inline void setButtonImageType(const ImageType &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Image Type - static or Dynamic
    	 */
    	inline const std::string &getImageValue() const { return std::get<1>(values_); }
    	inline void setImageValue(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const SoftButtonImage& _other) const {
                return (getButtonImageType() == _other.getButtonImageType() && getImageValue() == _other.getImageValue());
        }
    	inline bool operator!=(const SoftButtonImage &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct SoftButtonType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID_ENUM = -1,
            TEXT = 0,
            IMAGE = 1,
            BOTH = 2
        };
        
        SoftButtonType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID_ENUM)) {}
        SoftButtonType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID_ENUM):
                case static_cast<int32_t>(Literal::TEXT):
                case static_cast<int32_t>(Literal::IMAGE):
                case static_cast<int32_t>(Literal::BOTH):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SoftButtonType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SoftButtonType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SoftButtonType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SoftButtonType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SoftButtonType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SoftButtonType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct HMIActionOnSoftButtonPress : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID_ENUM = -1,
            DEFAULT_ACTION = 0,
            KEEP_ALIVE = 1,
            FOLLOW_FLOW_1 = 2,
            FOLLOW_FLOW_2 = 3
        };
        
        HMIActionOnSoftButtonPress() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID_ENUM)) {}
        HMIActionOnSoftButtonPress(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID_ENUM):
                case static_cast<int32_t>(Literal::DEFAULT_ACTION):
                case static_cast<int32_t>(Literal::KEEP_ALIVE):
                case static_cast<int32_t>(Literal::FOLLOW_FLOW_1):
                case static_cast<int32_t>(Literal::FOLLOW_FLOW_2):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const HMIActionOnSoftButtonPress &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HMIActionOnSoftButtonPress &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HMIActionOnSoftButtonPress &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HMIActionOnSoftButtonPress &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HMIActionOnSoftButtonPress &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const HMIActionOnSoftButtonPress &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: properties of SoftButton.
     */
    struct AlertSoftButtons : CommonAPI::Struct<std::string, uint32_t, uint32_t, bool, bool, HMIActionOnSoftButtonPress, SoftButtonType, SoftButtonImage> {
    	
    	AlertSoftButtons() {
    		std::get<3>(values_) = false;
    		std::get<4>(values_) = false;
    	}
    	AlertSoftButtons(const std::string &_ButtonText, const uint32_t &_ButtonID, const uint32_t &_ButtonHoldInterval, const bool &_IsButtonHighlighted, const bool &_IsButtonDisabled, const HMIActionOnSoftButtonPress &_ButtonAction, const SoftButtonType &_ButtonType, const SoftButtonImage &_ButtonImage)
    	{
    		std::get<0>(values_) = _ButtonText;
    		std::get<1>(values_) = _ButtonID;
    		std::get<2>(values_) = _ButtonHoldInterval;
    		std::get<3>(values_) = _IsButtonHighlighted;
    		std::get<4>(values_) = _IsButtonDisabled;
    		std::get<5>(values_) = _ButtonAction;
    		std::get<6>(values_) = _ButtonType;
    		std::get<7>(values_) = _ButtonImage;
    	}
    	/**
    	 * description: Text to be displayed in button.
    	 */
    	inline const std::string &getButtonText() const { return std::get<0>(values_); }
    	inline void setButtonText(const std::string &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: ID for the softButton and it should be unique for each button within a alert.
    	 */
    	inline const uint32_t &getButtonID() const { return std::get<1>(values_); }
    	inline void setButtonID(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: HoldInterval for the softButton.
    	 */
    	inline const uint32_t &getButtonHoldInterval() const { return std::get<2>(values_); }
    	inline void setButtonHoldInterval(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: To highlight a softButton.
    	 */
    	inline const bool &getIsButtonHighlighted() const { return std::get<3>(values_); }
    	inline void setIsButtonHighlighted(const bool _value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: To disable a softButton.
    	 */
    	inline const bool &getIsButtonDisabled() const { return std::get<4>(values_); }
    	inline void setIsButtonDisabled(const bool _value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: Action to be taken by HMI upon button press.
    	 */
    	inline const HMIActionOnSoftButtonPress &getButtonAction() const { return std::get<5>(values_); }
    	inline void setButtonAction(const HMIActionOnSoftButtonPress &_value) { std::get<5>(values_) = _value; }
    	/**
    	 * description: Type of button ( whether text, Image or Both)
    	 */
    	inline const SoftButtonType &getButtonType() const { return std::get<6>(values_); }
    	inline void setButtonType(const SoftButtonType &_value) { std::get<6>(values_) = _value; }
    	/**
    	 * description: Details of button Image. It should be filled only if the button type is image
    	 *   or both
    	 */
    	inline const SoftButtonImage &getButtonImage() const { return std::get<7>(values_); }
    	inline void setButtonImage(const SoftButtonImage &_value) { std::get<7>(values_) = _value; }
    	inline bool operator==(const AlertSoftButtons& _other) const {
                return (getButtonText() == _other.getButtonText() && getButtonID() == _other.getButtonID() && getButtonHoldInterval() == _other.getButtonHoldInterval() && getIsButtonHighlighted() == _other.getIsButtonHighlighted() && getIsButtonDisabled() == _other.getIsButtonDisabled() && getButtonAction() == _other.getButtonAction() && getButtonType() == _other.getButtonType() && getButtonImage() == _other.getButtonImage());
        }
    	inline bool operator!=(const AlertSoftButtons &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<hmiDialogueServiceTypes::AlertSoftButtons> AlertSoftButtonList;
    
    struct SpecialButtonType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID_ENUM = -1,
            SPECIAL_BUTTON_1 = 0,
            SPECIAL_BUTTON_2 = 1,
            SPECIAL_BUTTON_3 = 2
        };
        
        SpecialButtonType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID_ENUM)) {}
        SpecialButtonType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID_ENUM):
                case static_cast<int32_t>(Literal::SPECIAL_BUTTON_1):
                case static_cast<int32_t>(Literal::SPECIAL_BUTTON_2):
                case static_cast<int32_t>(Literal::SPECIAL_BUTTON_3):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SpecialButtonType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SpecialButtonType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SpecialButtonType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SpecialButtonType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SpecialButtonType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SpecialButtonType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: properties of special buttons such as checkbox or toggle.
     */
    struct AlertSpecialButton : CommonAPI::Struct<SpecialButtonType, std::string, uint32_t, bool, uint32_t, uint32_t, bool, bool, HMIActionOnSoftButtonPress, bool> {
    	
    	AlertSpecialButton() {
    		std::get<3>(values_) = false;
    		std::get<6>(values_) = false;
    		std::get<7>(values_) = false;
    		std::get<9>(values_) = false;
    	}
    	AlertSpecialButton(const SpecialButtonType &_ButtonType, const std::string &_SpecialButtonText, const uint32_t &_SpecialButtonID, const bool &_SpecialButtonValue, const uint32_t &_InfoButtonID, const uint32_t &_ButtonHoldInterval, const bool &_IsButtonSelected, const bool &_IsButtonDisabled, const HMIActionOnSoftButtonPress &_ButtonAction, const bool &_TakeActionOnSpecialButton)
    	{
    		std::get<0>(values_) = _ButtonType;
    		std::get<1>(values_) = _SpecialButtonText;
    		std::get<2>(values_) = _SpecialButtonID;
    		std::get<3>(values_) = _SpecialButtonValue;
    		std::get<4>(values_) = _InfoButtonID;
    		std::get<5>(values_) = _ButtonHoldInterval;
    		std::get<6>(values_) = _IsButtonSelected;
    		std::get<7>(values_) = _IsButtonDisabled;
    		std::get<8>(values_) = _ButtonAction;
    		std::get<9>(values_) = _TakeActionOnSpecialButton;
    	}
    	/**
    	 * description: Type of special button
    	 */
    	inline const SpecialButtonType &getButtonType() const { return std::get<0>(values_); }
    	inline void setButtonType(const SpecialButtonType &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Text to be displayed in  special button.
    	 */
    	inline const std::string &getSpecialButtonText() const { return std::get<1>(values_); }
    	inline void setSpecialButtonText(const std::string &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: ID for the special Button and it should be unique for each button within a
    	 *   alert.
    	 */
    	inline const uint32_t &getSpecialButtonID() const { return std::get<2>(values_); }
    	inline void setSpecialButtonID(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: value of the requested special Button. For Example: if special button is a
    	 *   toggle button, HMI will display with button as on or off based on the given
    	 *   value
    	 */
    	inline const bool &getSpecialButtonValue() const { return std::get<3>(values_); }
    	inline void setSpecialButtonValue(const bool _value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: ID for the special Button and it should be unique for each button within a
    	 *   alert.
    	 */
    	inline const uint32_t &getInfoButtonID() const { return std::get<4>(values_); }
    	inline void setInfoButtonID(const uint32_t &_value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: HoldInterval for the special Button.
    	 */
    	inline const uint32_t &getButtonHoldInterval() const { return std::get<5>(values_); }
    	inline void setButtonHoldInterval(const uint32_t &_value) { std::get<5>(values_) = _value; }
    	/**
    	 * description: To highlight a special Button.
    	 */
    	inline const bool &getIsButtonSelected() const { return std::get<6>(values_); }
    	inline void setIsButtonSelected(const bool _value) { std::get<6>(values_) = _value; }
    	/**
    	 * description: To disable a special Button.
    	 */
    	inline const bool &getIsButtonDisabled() const { return std::get<7>(values_); }
    	inline void setIsButtonDisabled(const bool _value) { std::get<7>(values_) = _value; }
    	/**
    	 * description: Action to be taken by HMI upon button press.
    	 */
    	inline const HMIActionOnSoftButtonPress &getButtonAction() const { return std::get<8>(values_); }
    	inline void setButtonAction(const HMIActionOnSoftButtonPress &_value) { std::get<8>(values_) = _value; }
    	/**
    	 * description: Whether to take action on special button by HMI upon button press. 		          
    	 *           HMI will take action on the button such as enable/disable,
    	 *   selected/not selected based on the predefined definitions.                    
    	 *          For Example: if special item is checkbox with info button, HMI will
    	 *   check or uncheck based on the previous state of the button
    	 */
    	inline const bool &getTakeActionOnSpecialButton() const { return std::get<9>(values_); }
    	inline void setTakeActionOnSpecialButton(const bool _value) { std::get<9>(values_) = _value; }
    	inline bool operator==(const AlertSpecialButton& _other) const {
                return (getButtonType() == _other.getButtonType() && getSpecialButtonText() == _other.getSpecialButtonText() && getSpecialButtonID() == _other.getSpecialButtonID() && getSpecialButtonValue() == _other.getSpecialButtonValue() && getInfoButtonID() == _other.getInfoButtonID() && getButtonHoldInterval() == _other.getButtonHoldInterval() && getIsButtonSelected() == _other.getIsButtonSelected() && getIsButtonDisabled() == _other.getIsButtonDisabled() && getButtonAction() == _other.getButtonAction() && getTakeActionOnSpecialButton() == _other.getTakeActionOnSpecialButton());
        }
    	inline bool operator!=(const AlertSpecialButton &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<hmiDialogueServiceTypes::AlertSpecialButton> AlertSpecialButtonList;
    
    struct AlertDisplayPriority : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID_ENUM = -1,
            NORMAL = 0,
            HIGH = 1,
            LOW = 2,
            CRITICAL = 3
        };
        
        AlertDisplayPriority() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID_ENUM)) {}
        AlertDisplayPriority(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID_ENUM):
                case static_cast<int32_t>(Literal::NORMAL):
                case static_cast<int32_t>(Literal::HIGH):
                case static_cast<int32_t>(Literal::LOW):
                case static_cast<int32_t>(Literal::CRITICAL):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AlertDisplayPriority &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AlertDisplayPriority &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AlertDisplayPriority &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AlertDisplayPriority &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AlertDisplayPriority &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AlertDisplayPriority &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: provides all basic properties of Alert.
     */
    struct RequestDialogueAlert : CommonAPI::Struct<std::string, bool, std::string, AlertStringList, bool, bool, AlertDisplayPriority, AlertSoftButtonList, uint32_t, bool> {
    	
    	RequestDialogueAlert() {
    		std::get<1>(values_) = false;
    		std::get<4>(values_) = false;
    		std::get<5>(values_) = false;
    		std::get<9>(values_) = false;
    	}
    	RequestDialogueAlert(const std::string &_AlertContext, const bool &_ShowAlert, const std::string &_AlertTitleText, const AlertStringList &_Text, const bool &_ShowWarningIcon, const bool &_ShowLoadingIcon, const AlertDisplayPriority &_Priority, const AlertSoftButtonList &_SoftButtons, const uint32_t &_AlertTimeoutDuration, const bool &_HonorDrivingRestrictions)
    	{
    		std::get<0>(values_) = _AlertContext;
    		std::get<1>(values_) = _ShowAlert;
    		std::get<2>(values_) = _AlertTitleText;
    		std::get<3>(values_) = _Text;
    		std::get<4>(values_) = _ShowWarningIcon;
    		std::get<5>(values_) = _ShowLoadingIcon;
    		std::get<6>(values_) = _Priority;
    		std::get<7>(values_) = _SoftButtons;
    		std::get<8>(values_) = _AlertTimeoutDuration;
    		std::get<9>(values_) = _HonorDrivingRestrictions;
    	}
    	/**
    	 * description: Alert Name and it should be unique for each alert.
    	 */
    	inline const std::string &getAlertContext() const { return std::get<0>(values_); }
    	inline void setAlertContext(const std::string &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: To display or close Alert.
    	 */
    	inline const bool &getShowAlert() const { return std::get<1>(values_); }
    	inline void setShowAlert(const bool _value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Title text displayed at the top of popup.
    	 */
    	inline const std::string &getAlertTitleText() const { return std::get<2>(values_); }
    	inline void setAlertTitleText(const std::string &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: List of Texts to be displayed in the popup.
    	 */
    	inline const AlertStringList &getText() const { return std::get<3>(values_); }
    	inline void setText(const AlertStringList &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: To display or close Warning Icon.
    	 */
    	inline const bool &getShowWarningIcon() const { return std::get<4>(values_); }
    	inline void setShowWarningIcon(const bool _value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: To display or close Loading Icon.
    	 */
    	inline const bool &getShowLoadingIcon() const { return std::get<5>(values_); }
    	inline void setShowLoadingIcon(const bool _value) { std::get<5>(values_) = _value; }
    	/**
    	 * description: Priority with which alert needs to be displayed .
    	 */
    	inline const AlertDisplayPriority &getPriority() const { return std::get<6>(values_); }
    	inline void setPriority(const AlertDisplayPriority &_value) { std::get<6>(values_) = _value; }
    	/**
    	 * description: List of Soft Buttons to be displayed as part of alert .
    	 */
    	inline const AlertSoftButtonList &getSoftButtons() const { return std::get<7>(values_); }
    	inline void setSoftButtons(const AlertSoftButtonList &_value) { std::get<7>(values_) = _value; }
    	/**
    	 * description: Timeout duration in milliseconds for alert  .
    	 */
    	inline const uint32_t &getAlertTimeoutDuration() const { return std::get<8>(values_); }
    	inline void setAlertTimeoutDuration(const uint32_t &_value) { std::get<8>(values_) = _value; }
    	/**
    	 * description: To apply driving restriction rules or not for the requested popup
    	 */
    	inline const bool &getHonorDrivingRestrictions() const { return std::get<9>(values_); }
    	inline void setHonorDrivingRestrictions(const bool _value) { std::get<9>(values_) = _value; }
    	inline bool operator==(const RequestDialogueAlert& _other) const {
                return (getAlertContext() == _other.getAlertContext() && getShowAlert() == _other.getShowAlert() && getAlertTitleText() == _other.getAlertTitleText() && getText() == _other.getText() && getShowWarningIcon() == _other.getShowWarningIcon() && getShowLoadingIcon() == _other.getShowLoadingIcon() && getPriority() == _other.getPriority() && getSoftButtons() == _other.getSoftButtons() && getAlertTimeoutDuration() == _other.getAlertTimeoutDuration() && getHonorDrivingRestrictions() == _other.getHonorDrivingRestrictions());
        }
    	inline bool operator!=(const RequestDialogueAlert &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct AlertTitleImage : CommonAPI::Struct<bool, ImageType, std::string> {
    	
    	AlertTitleImage() {
    		std::get<0>(values_) = false;
    	}
    	AlertTitleImage(const bool &_show, const ImageType &_AlertTitleImageType, const std::string &_ImageValue)
    	{
    		std::get<0>(values_) = _show;
    		std::get<1>(values_) = _AlertTitleImageType;
    		std::get<2>(values_) = _ImageValue;
    	}
    	/**
    	 * description: To display title image or not
    	 */
    	inline const bool &getShow() const { return std::get<0>(values_); }
    	inline void setShow(const bool _value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Image Type - static or Dynamic
    	 */
    	inline const ImageType &getAlertTitleImageType() const { return std::get<1>(values_); }
    	inline void setAlertTitleImageType(const ImageType &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: provides - code if the image type is static or full image path if the image
    	 *   type is dynamic
    	 */
    	inline const std::string &getImageValue() const { return std::get<2>(values_); }
    	inline void setImageValue(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const AlertTitleImage& _other) const {
                return (getShow() == _other.getShow() && getAlertTitleImageType() == _other.getAlertTitleImageType() && getImageValue() == _other.getImageValue());
        }
    	inline bool operator!=(const AlertTitleImage &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: provides all basic properties of Alert along with special button properties.
     */
    struct RequestDialogueSpecialAlert : CommonAPI::Struct<RequestDialogueAlert, AlertTitleImage, AlertSpecialButtonList> {
    	
    	RequestDialogueSpecialAlert() {
    	}
    	RequestDialogueSpecialAlert(const RequestDialogueAlert &_BasicAlertProperties, const AlertTitleImage &_titleImage, const AlertSpecialButtonList &_AlertSpecialButton)
    	{
    		std::get<0>(values_) = _BasicAlertProperties;
    		std::get<1>(values_) = _titleImage;
    		std::get<2>(values_) = _AlertSpecialButton;
    	}
    	/**
    	 * description: provides all basic properties of Alert.
    	 */
    	inline const RequestDialogueAlert &getBasicAlertProperties() const { return std::get<0>(values_); }
    	inline void setBasicAlertProperties(const RequestDialogueAlert &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: struct to provide info about the alert title image .
    	 */
    	inline const AlertTitleImage &getTitleImage() const { return std::get<1>(values_); }
    	inline void setTitleImage(const AlertTitleImage &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: List of special Soft Buttons to be displayed as part of alert .
    	 */
    	inline const AlertSpecialButtonList &getAlertSpecialButton() const { return std::get<2>(values_); }
    	inline void setAlertSpecialButton(const AlertSpecialButtonList &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const RequestDialogueSpecialAlert& _other) const {
                return (getBasicAlertProperties() == _other.getBasicAlertProperties() && getTitleImage() == _other.getTitleImage() && getAlertSpecialButton() == _other.getAlertSpecialButton());
        }
    	inline bool operator!=(const RequestDialogueSpecialAlert &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: provides all properties of BandONS.
     */
    struct RequestDialogueBandONS : CommonAPI::Struct<std::string, std::string, bool, uint32_t> {
    	
    	RequestDialogueBandONS() {
    		std::get<2>(values_) = false;
    	}
    	RequestDialogueBandONS(const std::string &_BandONSContext, const std::string &_Text, const bool &_ShowBandONS, const uint32_t &_BandONSTimeoutDuration)
    	{
    		std::get<0>(values_) = _BandONSContext;
    		std::get<1>(values_) = _Text;
    		std::get<2>(values_) = _ShowBandONS;
    		std::get<3>(values_) = _BandONSTimeoutDuration;
    	}
    	/**
    	 * description: BandONS Name and it should be unique for each BandONS.
    	 */
    	inline const std::string &getBandONSContext() const { return std::get<0>(values_); }
    	inline void setBandONSContext(const std::string &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Text to be displayed in the BandONS.
    	 */
    	inline const std::string &getText() const { return std::get<1>(values_); }
    	inline void setText(const std::string &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: To display or close BandONS.
    	 */
    	inline const bool &getShowBandONS() const { return std::get<2>(values_); }
    	inline void setShowBandONS(const bool _value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: Timeout duration in milliseconds for BandONS  .
    	 */
    	inline const uint32_t &getBandONSTimeoutDuration() const { return std::get<3>(values_); }
    	inline void setBandONSTimeoutDuration(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const RequestDialogueBandONS& _other) const {
                return (getBandONSContext() == _other.getBandONSContext() && getText() == _other.getText() && getShowBandONS() == _other.getShowBandONS() && getBandONSTimeoutDuration() == _other.getBandONSTimeoutDuration());
        }
    	inline bool operator!=(const RequestDialogueBandONS &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct DialogueResponseCode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID_ENUM = -1,
            SUCCESS = 0,
            FAILURE = 1,
            FAILURE_PARAMS = 2
        };
        
        DialogueResponseCode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID_ENUM)) {}
        DialogueResponseCode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID_ENUM):
                case static_cast<int32_t>(Literal::SUCCESS):
                case static_cast<int32_t>(Literal::FAILURE):
                case static_cast<int32_t>(Literal::FAILURE_PARAMS):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DialogueResponseCode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DialogueResponseCode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DialogueResponseCode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DialogueResponseCode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DialogueResponseCode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DialogueResponseCode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Provides details whether a given request was successful or not, and what
     *   context was supplied with it
     */
    struct RequestDialogueResponse : CommonAPI::Struct<std::string, DialogueResponseCode> {
    	
    	RequestDialogueResponse() {
    	}
    	RequestDialogueResponse(const std::string &_Context, const DialogueResponseCode &_Code)
    	{
    		std::get<0>(values_) = _Context;
    		std::get<1>(values_) = _Code;
    	}
    	/**
    	 * description: Alert or BandONS Context for which resquest sent to HMI.
    	 */
    	inline const std::string &getContext() const { return std::get<0>(values_); }
    	inline void setContext(const std::string &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Response code for Request sent to HMI
    	 */
    	inline const DialogueResponseCode &getCode() const { return std::get<1>(values_); }
    	inline void setCode(const DialogueResponseCode &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const RequestDialogueResponse& _other) const {
                return (getContext() == _other.getContext() && getCode() == _other.getCode());
        }
    	inline bool operator!=(const RequestDialogueResponse &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct DialogueStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID_ENUM = -1,
            CONNECTED = 1,
            ACTIVE = 2,
            WAITING = 3,
            CLOSED = 4,
            CLOSED_DUE_TO_DRIVING_RESTRICTION = 5
        };
        
        DialogueStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID_ENUM)) {}
        DialogueStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID_ENUM):
                case static_cast<int32_t>(Literal::CONNECTED):
                case static_cast<int32_t>(Literal::ACTIVE):
                case static_cast<int32_t>(Literal::WAITING):
                case static_cast<int32_t>(Literal::CLOSED):
                case static_cast<int32_t>(Literal::CLOSED_DUE_TO_DRIVING_RESTRICTION):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DialogueStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DialogueStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DialogueStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DialogueStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DialogueStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DialogueStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Provides details on what Dialogue is being presented to the user
     */
    struct StatusDialogue : CommonAPI::Struct<std::string, bool, DialogueStatus> {
    	
    	StatusDialogue() {
    		std::get<1>(values_) = false;
    	}
    	StatusDialogue(const std::string &_context, const bool &_showing, const DialogueStatus &_status)
    	{
    		std::get<0>(values_) = _context;
    		std::get<1>(values_) = _showing;
    		std::get<2>(values_) = _status;
    	}
    	/**
    	 * description: ID of Alert or BandONS, which is being displayed to the user
    	 */
    	inline const std::string &getContext() const { return std::get<0>(values_); }
    	inline void setContext(const std::string &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Alert or BandONS Context for which resquest sent to HMI.
    	 */
    	inline const bool &getShowing() const { return std::get<1>(values_); }
    	inline void setShowing(const bool _value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Alert or BandONS Context for which resquest sent to HMI.
    	 */
    	inline const DialogueStatus &getStatus() const { return std::get<2>(values_); }
    	inline void setStatus(const DialogueStatus &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const StatusDialogue& _other) const {
                return (getContext() == _other.getContext() && getShowing() == _other.getShowing() && getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const StatusDialogue &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct ButtonAction : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID_ENUM = -1,
            PRESSED = 0,
            RELEASED = 1,
            HELD = 2,
            HELD_RELEASED = 3
        };
        
        ButtonAction() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID_ENUM)) {}
        ButtonAction(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID_ENUM):
                case static_cast<int32_t>(Literal::PRESSED):
                case static_cast<int32_t>(Literal::RELEASED):
                case static_cast<int32_t>(Literal::HELD):
                case static_cast<int32_t>(Literal::HELD_RELEASED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ButtonAction &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ButtonAction &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ButtonAction &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ButtonAction &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ButtonAction &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ButtonAction &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Provides basic details about the button Interaction
     */
    struct ButtonInteraction : CommonAPI::Struct<std::string, uint32_t, std::string, ButtonAction> {
    	
    	ButtonInteraction() {
    	}
    	ButtonInteraction(const std::string &_buttonText, const uint32_t &_buttonID, const std::string &_Alertcontext, const ButtonAction &_action)
    	{
    		std::get<0>(values_) = _buttonText;
    		std::get<1>(values_) = _buttonID;
    		std::get<2>(values_) = _Alertcontext;
    		std::get<3>(values_) = _action;
    	}
    	/**
    	 * description: Text displayed on the button
    	 */
    	inline const std::string &getButtonText() const { return std::get<0>(values_); }
    	inline void setButtonText(const std::string &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: ID of the button
    	 */
    	inline const uint32_t &getButtonID() const { return std::get<1>(values_); }
    	inline void setButtonID(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Alert context on which button interaction occured
    	 */
    	inline const std::string &getAlertcontext() const { return std::get<2>(values_); }
    	inline void setAlertcontext(const std::string &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: Response code for Request sent to HMI
    	 */
    	inline const ButtonAction &getAction() const { return std::get<3>(values_); }
    	inline void setAction(const ButtonAction &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const ButtonInteraction& _other) const {
                return (getButtonText() == _other.getButtonText() && getButtonID() == _other.getButtonID() && getAlertcontext() == _other.getAlertcontext() && getAction() == _other.getAction());
        }
    	inline bool operator!=(const ButtonInteraction &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Provides details about the user Interaction with special button
     */
    struct SpecialButtonInteraction : CommonAPI::Struct<ButtonInteraction, bool, SpecialButtonType> {
    	
    	SpecialButtonInteraction() {
    		std::get<1>(values_) = false;
    	}
    	SpecialButtonInteraction(const ButtonInteraction &_basicButtonInteractionInfo, const bool &_SpecialButtonValue, const SpecialButtonType &_ButtonType)
    	{
    		std::get<0>(values_) = _basicButtonInteractionInfo;
    		std::get<1>(values_) = _SpecialButtonValue;
    		std::get<2>(values_) = _ButtonType;
    	}
    	/**
    	 * description: Provides basic details about the button Interaction
    	 */
    	inline const ButtonInteraction &getBasicButtonInteractionInfo() const { return std::get<0>(values_); }
    	inline void setBasicButtonInteractionInfo(const ButtonInteraction &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: value of the special Button upon user action
    	 */
    	inline const bool &getSpecialButtonValue() const { return std::get<1>(values_); }
    	inline void setSpecialButtonValue(const bool _value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Type of special button
    	 */
    	inline const SpecialButtonType &getButtonType() const { return std::get<2>(values_); }
    	inline void setButtonType(const SpecialButtonType &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const SpecialButtonInteraction& _other) const {
                return (getBasicButtonInteractionInfo() == _other.getBasicButtonInteractionInfo() && getSpecialButtonValue() == _other.getSpecialButtonValue() && getButtonType() == _other.getButtonType());
        }
    	inline bool operator!=(const SpecialButtonInteraction &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.hmiDialogueServiceTypes.hmiDialogueServiceTypes";
    return typeCollectionName;
}


}; // struct hmiDialogueServiceTypes

} // namespace hmiDialogueServiceTypes
} // namespace harman
} // namespace com

namespace CommonAPI {
}


namespace std {
    //Hash for AlertDisplayPriority
    template<>
    struct hash<::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::AlertDisplayPriority> {
        inline size_t operator()(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::AlertDisplayPriority& alertDisplayPriority) const {
            return static_cast<int32_t>(alertDisplayPriority);
        }
    };
    //Hash for SpecialButtonType
    template<>
    struct hash<::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::SpecialButtonType> {
        inline size_t operator()(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::SpecialButtonType& specialButtonType) const {
            return static_cast<int32_t>(specialButtonType);
        }
    };
    //Hash for SoftButtonType
    template<>
    struct hash<::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::SoftButtonType> {
        inline size_t operator()(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::SoftButtonType& softButtonType) const {
            return static_cast<int32_t>(softButtonType);
        }
    };
    //Hash for ImageType
    template<>
    struct hash<::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::ImageType> {
        inline size_t operator()(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::ImageType& imageType) const {
            return static_cast<int32_t>(imageType);
        }
    };
    //Hash for HMIActionOnSoftButtonPress
    template<>
    struct hash<::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::HMIActionOnSoftButtonPress> {
        inline size_t operator()(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::HMIActionOnSoftButtonPress& hMIActionOnSoftButtonPress) const {
            return static_cast<int32_t>(hMIActionOnSoftButtonPress);
        }
    };
    //Hash for DialogueResponseCode
    template<>
    struct hash<::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode> {
        inline size_t operator()(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode& dialogueResponseCode) const {
            return static_cast<int32_t>(dialogueResponseCode);
        }
    };
    //Hash for DialogueStatus
    template<>
    struct hash<::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueStatus> {
        inline size_t operator()(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueStatus& dialogueStatus) const {
            return static_cast<int32_t>(dialogueStatus);
        }
    };
    //Hash for ButtonAction
    template<>
    struct hash<::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::ButtonAction> {
        inline size_t operator()(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::ButtonAction& buttonAction) const {
            return static_cast<int32_t>(buttonAction);
        }
    };
}



#endif // COM_HARMAN_HMIDIALOGUESERVICETYPES_hmi_Dialogue_Service_Types_HPP_
