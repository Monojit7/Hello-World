/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_HARMAN_HMIDIALOGUESERVICE_hmi_Dialogue_Service_Interface_PROXY_HPP_
#define V1_COM_HARMAN_HMIDIALOGUESERVICE_hmi_Dialogue_Service_Interface_PROXY_HPP_

#include <v1/com/harman/hmiDialogueService/hmiDialogueServiceInterfaceProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace hmiDialogueService {

template <typename ... _AttributeExtensions>
class hmiDialogueServiceInterfaceProxy
    : virtual public hmiDialogueServiceInterface, 
      virtual public hmiDialogueServiceInterfaceProxyBase,
      virtual public _AttributeExtensions... {
public:
    hmiDialogueServiceInterfaceProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~hmiDialogueServiceInterfaceProxy();

    typedef hmiDialogueServiceInterface InterfaceType;



    /**
     * description: Indicates the status of the requested alert. This broadcast will be provided
     *   upon receiving the request for alert status or HMI action on alert while
     *   driving restriction enabled
     */
    /**
     * Returns the wrapper class that provides access to the broadcast event_AlertStatus.
     */
    virtual Event_AlertStatusEvent& getEvent_AlertStatusEvent() {
        return delegate_->getEvent_AlertStatusEvent();
    }
    /**
     * description: Indicates the status of the requested BandONS. This broadcast will be provided
     *   upon receiving the requset for BandONS status or HMI action on BandONS while
     *   driving restriction enabled
     */
    /**
     * Returns the wrapper class that provides access to the broadcast event_BandONSStatus.
     */
    virtual Event_BandONSStatusEvent& getEvent_BandONSStatusEvent() {
        return delegate_->getEvent_BandONSStatusEvent();
    }
    /**
     * description: Indicates that a button interaction has occurred
     */
    /**
     * Returns the wrapper class that provides access to the broadcast event_alertButtonInteraction.
     */
    virtual Event_alertButtonInteractionEvent& getEvent_alertButtonInteractionEvent() {
        return delegate_->getEvent_alertButtonInteractionEvent();
    }
    /**
     * description: Indicates that a special button interaction has occurred.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast event_alertSpecialButtonInteraction.
     */
    virtual Event_alertSpecialButtonInteractionEvent& getEvent_alertSpecialButtonInteractionEvent() {
        return delegate_->getEvent_alertSpecialButtonInteractionEvent();
    }

    /**
     * description: Requests for an Alert to be shown, updated, or hidden from the user
     * param: request (RequestDialogueAlert) : values used to direct the Alert, including
     *   showing or hiding it
            
            returns: response
     *   (RequestDialogueResponse) : indication of success or failure
     * Calls request_alert with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void request_alert(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueAlert &_request, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueResponse &_response, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls request_alert with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> request_alertAsync(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueAlert &_request, Request_alertAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Requests for an Alert to be shown, updated, or hidden from the user with
     *   special buttons along with other basic button and properties
     * param: request (RequestDialogueAlertWithSpecialButton) : values used to direct the
     *   Alert
            
            returns: response (RequestDialogueResponse) :
     *   indication of success or failure
     * Calls request_special_alert with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void request_special_alert(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueSpecialAlert &_request, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueResponse &_response, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls request_special_alert with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> request_special_alertAsync(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueSpecialAlert &_request, Request_special_alertAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Requests for a BandONS to be shown, updated, or hidden from the user
     * param: request (RequestDialogueBandONS) : values used to direct the BandONS, including
     *   showing or hiding it
            
            returns: response
     *   (RequestDialogueResponse) : indication of success or failure
     * Calls request_bandONS with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void request_bandONS(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueBandONS &_request, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueResponse &_response, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls request_bandONS with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> request_bandONSAsync(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueBandONS &_request, Request_bandONSAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Request to destroy an existing Alert. This will destroy the alert under given
     *   context permanently.
     * param: AlertContext : context to identify the alert to be destroyed
            
           
     *   returns: DialogueResponseCode : indication of success or failure
     * Calls Remove_alert with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void Remove_alert(const std::string &_AlertContext, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode &_code, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls Remove_alert with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> Remove_alertAsync(const std::string &_AlertContext, Remove_alertAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Request to destroy an existing BandONS. This will destroy the BandONS under
     *   given context permanently.
     * param: BandONSContext : context to identify the BandONS to be destroyed
            
         
     *     returns: DialogueResponseCode : indication of success or failure
     * Calls Remove_BandONS with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void Remove_BandONS(const std::string &_BandONSContext, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode &_code, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls Remove_BandONS with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> Remove_BandONSAsync(const std::string &_BandONSContext, Remove_BandONSAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Request to provide status of an existing Alert.
     * param: AlertContext : context to identify the alert 
            
            returns:
     *   DialogueResponseCode : indication of success or failure
     * Calls status_alert with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void status_alert(const std::string &_AlertContext, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode &_code, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls status_alert with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> status_alertAsync(const std::string &_AlertContext, Status_alertAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Request to provide status of an existing BandONS.
     * param: BandONSContext : context to identify the BandONS
            
            returns:
     *   DialogueResponseCode : indication of success or failure
     * Calls status_BandONS with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void status_BandONS(const std::string &_BandONSContext, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode &_code, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls status_BandONS with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> status_BandONSAsync(const std::string &_BandONSContext, Status_BandONSAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<hmiDialogueServiceInterfaceProxyBase> delegate_;
};

typedef hmiDialogueServiceInterfaceProxy<> hmiDialogueServiceInterfaceProxyDefault;


//
// hmiDialogueServiceInterfaceProxy Implementation
//
template <typename ... _AttributeExtensions>
hmiDialogueServiceInterfaceProxy<_AttributeExtensions...>::hmiDialogueServiceInterfaceProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<hmiDialogueServiceInterfaceProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<hmiDialogueServiceInterfaceProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
hmiDialogueServiceInterfaceProxy<_AttributeExtensions...>::~hmiDialogueServiceInterfaceProxy() {
}

/**
 * description: Requests for an Alert to be shown, updated, or hidden from the user
 * param: request (RequestDialogueAlert) : values used to direct the Alert, including
 *   showing or hiding it
        
        returns: response
 *   (RequestDialogueResponse) : indication of success or failure
 */
template <typename ... _AttributeExtensions>
void hmiDialogueServiceInterfaceProxy<_AttributeExtensions...>::request_alert(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueAlert &_request, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueResponse &_response, const CommonAPI::CallInfo *_info) {
    delegate_->request_alert(_request, _internalCallStatus, _response, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> hmiDialogueServiceInterfaceProxy<_AttributeExtensions...>::request_alertAsync(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueAlert &_request, Request_alertAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->request_alertAsync(_request, _callback, _info);
}
/**
 * description: Requests for an Alert to be shown, updated, or hidden from the user with
 *   special buttons along with other basic button and properties
 * param: request (RequestDialogueAlertWithSpecialButton) : values used to direct the
 *   Alert
        
        returns: response (RequestDialogueResponse) :
 *   indication of success or failure
 */
template <typename ... _AttributeExtensions>
void hmiDialogueServiceInterfaceProxy<_AttributeExtensions...>::request_special_alert(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueSpecialAlert &_request, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueResponse &_response, const CommonAPI::CallInfo *_info) {
    delegate_->request_special_alert(_request, _internalCallStatus, _response, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> hmiDialogueServiceInterfaceProxy<_AttributeExtensions...>::request_special_alertAsync(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueSpecialAlert &_request, Request_special_alertAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->request_special_alertAsync(_request, _callback, _info);
}
/**
 * description: Requests for a BandONS to be shown, updated, or hidden from the user
 * param: request (RequestDialogueBandONS) : values used to direct the BandONS, including
 *   showing or hiding it
        
        returns: response
 *   (RequestDialogueResponse) : indication of success or failure
 */
template <typename ... _AttributeExtensions>
void hmiDialogueServiceInterfaceProxy<_AttributeExtensions...>::request_bandONS(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueBandONS &_request, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueResponse &_response, const CommonAPI::CallInfo *_info) {
    delegate_->request_bandONS(_request, _internalCallStatus, _response, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> hmiDialogueServiceInterfaceProxy<_AttributeExtensions...>::request_bandONSAsync(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueBandONS &_request, Request_bandONSAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->request_bandONSAsync(_request, _callback, _info);
}
/**
 * description: Request to destroy an existing Alert. This will destroy the alert under given
 *   context permanently.
 * param: AlertContext : context to identify the alert to be destroyed
        
       
 *   returns: DialogueResponseCode : indication of success or failure
 */
template <typename ... _AttributeExtensions>
void hmiDialogueServiceInterfaceProxy<_AttributeExtensions...>::Remove_alert(const std::string &_AlertContext, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode &_code, const CommonAPI::CallInfo *_info) {
    delegate_->Remove_alert(_AlertContext, _internalCallStatus, _code, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> hmiDialogueServiceInterfaceProxy<_AttributeExtensions...>::Remove_alertAsync(const std::string &_AlertContext, Remove_alertAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->Remove_alertAsync(_AlertContext, _callback, _info);
}
/**
 * description: Request to destroy an existing BandONS. This will destroy the BandONS under
 *   given context permanently.
 * param: BandONSContext : context to identify the BandONS to be destroyed
        
     
 *     returns: DialogueResponseCode : indication of success or failure
 */
template <typename ... _AttributeExtensions>
void hmiDialogueServiceInterfaceProxy<_AttributeExtensions...>::Remove_BandONS(const std::string &_BandONSContext, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode &_code, const CommonAPI::CallInfo *_info) {
    delegate_->Remove_BandONS(_BandONSContext, _internalCallStatus, _code, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> hmiDialogueServiceInterfaceProxy<_AttributeExtensions...>::Remove_BandONSAsync(const std::string &_BandONSContext, Remove_BandONSAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->Remove_BandONSAsync(_BandONSContext, _callback, _info);
}
/**
 * description: Request to provide status of an existing Alert.
 * param: AlertContext : context to identify the alert 
        
        returns:
 *   DialogueResponseCode : indication of success or failure
 */
template <typename ... _AttributeExtensions>
void hmiDialogueServiceInterfaceProxy<_AttributeExtensions...>::status_alert(const std::string &_AlertContext, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode &_code, const CommonAPI::CallInfo *_info) {
    delegate_->status_alert(_AlertContext, _internalCallStatus, _code, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> hmiDialogueServiceInterfaceProxy<_AttributeExtensions...>::status_alertAsync(const std::string &_AlertContext, Status_alertAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->status_alertAsync(_AlertContext, _callback, _info);
}
/**
 * description: Request to provide status of an existing BandONS.
 * param: BandONSContext : context to identify the BandONS
        
        returns:
 *   DialogueResponseCode : indication of success or failure
 */
template <typename ... _AttributeExtensions>
void hmiDialogueServiceInterfaceProxy<_AttributeExtensions...>::status_BandONS(const std::string &_BandONSContext, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode &_code, const CommonAPI::CallInfo *_info) {
    delegate_->status_BandONS(_BandONSContext, _internalCallStatus, _code, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> hmiDialogueServiceInterfaceProxy<_AttributeExtensions...>::status_BandONSAsync(const std::string &_BandONSContext, Status_BandONSAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->status_BandONSAsync(_BandONSContext, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &hmiDialogueServiceInterfaceProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool hmiDialogueServiceInterfaceProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool hmiDialogueServiceInterfaceProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& hmiDialogueServiceInterfaceProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& hmiDialogueServiceInterfaceProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace hmiDialogueService
} // namespace harman
} // namespace com
} // namespace v1



// Compatibility
namespace v1_1 = v1;

#endif // V1_COM_HARMAN_HMIDIALOGUESERVICE_hmi_Dialogue_Service_Interface_PROXY_HPP_
