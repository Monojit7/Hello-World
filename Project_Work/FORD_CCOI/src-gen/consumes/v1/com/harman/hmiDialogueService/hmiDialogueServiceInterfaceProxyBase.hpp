/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_HARMAN_HMIDIALOGUESERVICE_hmi_Dialogue_Service_Interface_PROXY_BASE_HPP_
#define V1_COM_HARMAN_HMIDIALOGUESERVICE_hmi_Dialogue_Service_Interface_PROXY_BASE_HPP_

#include <v1/com/harman/hmiDialogueService/hmiDialogueServiceInterface.hpp>


#include <com/harman/hmiDialogueServiceTypes/hmiDialogueServiceTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace hmiDialogueService {

class hmiDialogueServiceInterfaceProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::StatusDialogue
    > Event_AlertStatusEvent;
    typedef CommonAPI::Event<
        ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::StatusDialogue
    > Event_BandONSStatusEvent;
    typedef CommonAPI::Event<
        ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::ButtonInteraction
    > Event_alertButtonInteractionEvent;
    typedef CommonAPI::Event<
        ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::SpecialButtonInteraction
    > Event_alertSpecialButtonInteractionEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueResponse&)> Request_alertAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueResponse&)> Request_special_alertAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueResponse&)> Request_bandONSAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode&)> Remove_alertAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode&)> Remove_BandONSAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode&)> Status_alertAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode&)> Status_BandONSAsyncCallback;


    /**
     * description: Indicates the status of the requested alert. This broadcast will be provided
     *   upon receiving the request for alert status or HMI action on alert while
     *   driving restriction enabled
     */
    virtual Event_AlertStatusEvent& getEvent_AlertStatusEvent() = 0;
    /**
     * description: Indicates the status of the requested BandONS. This broadcast will be provided
     *   upon receiving the requset for BandONS status or HMI action on BandONS while
     *   driving restriction enabled
     */
    virtual Event_BandONSStatusEvent& getEvent_BandONSStatusEvent() = 0;
    /**
     * description: Indicates that a button interaction has occurred
     */
    virtual Event_alertButtonInteractionEvent& getEvent_alertButtonInteractionEvent() = 0;
    /**
     * description: Indicates that a special button interaction has occurred.
     */
    virtual Event_alertSpecialButtonInteractionEvent& getEvent_alertSpecialButtonInteractionEvent() = 0;

    /**
     * description: Requests for an Alert to be shown, updated, or hidden from the user
     * param: request (RequestDialogueAlert) : values used to direct the Alert, including
     *   showing or hiding it
            
            returns: response
     *   (RequestDialogueResponse) : indication of success or failure
     */
    virtual void request_alert(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueAlert &_request, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueResponse &_response, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> request_alertAsync(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueAlert &_request, Request_alertAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Requests for an Alert to be shown, updated, or hidden from the user with
     *   special buttons along with other basic button and properties
     * param: request (RequestDialogueAlertWithSpecialButton) : values used to direct the
     *   Alert
            
            returns: response (RequestDialogueResponse) :
     *   indication of success or failure
     */
    virtual void request_special_alert(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueSpecialAlert &_request, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueResponse &_response, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> request_special_alertAsync(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueSpecialAlert &_request, Request_special_alertAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Requests for a BandONS to be shown, updated, or hidden from the user
     * param: request (RequestDialogueBandONS) : values used to direct the BandONS, including
     *   showing or hiding it
            
            returns: response
     *   (RequestDialogueResponse) : indication of success or failure
     */
    virtual void request_bandONS(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueBandONS &_request, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueResponse &_response, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> request_bandONSAsync(const ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::RequestDialogueBandONS &_request, Request_bandONSAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Request to destroy an existing Alert. This will destroy the alert under given
     *   context permanently.
     * param: AlertContext : context to identify the alert to be destroyed
            
           
     *   returns: DialogueResponseCode : indication of success or failure
     */
    virtual void Remove_alert(const std::string &_AlertContext, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode &_code, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> Remove_alertAsync(const std::string &_AlertContext, Remove_alertAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Request to destroy an existing BandONS. This will destroy the BandONS under
     *   given context permanently.
     * param: BandONSContext : context to identify the BandONS to be destroyed
            
         
     *     returns: DialogueResponseCode : indication of success or failure
     */
    virtual void Remove_BandONS(const std::string &_BandONSContext, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode &_code, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> Remove_BandONSAsync(const std::string &_BandONSContext, Remove_BandONSAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Request to provide status of an existing Alert.
     * param: AlertContext : context to identify the alert 
            
            returns:
     *   DialogueResponseCode : indication of success or failure
     */
    virtual void status_alert(const std::string &_AlertContext, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode &_code, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> status_alertAsync(const std::string &_AlertContext, Status_alertAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Request to provide status of an existing BandONS.
     * param: BandONSContext : context to identify the BandONS
            
            returns:
     *   DialogueResponseCode : indication of success or failure
     */
    virtual void status_BandONS(const std::string &_BandONSContext, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::hmiDialogueServiceTypes::hmiDialogueServiceTypes::DialogueResponseCode &_code, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> status_BandONSAsync(const std::string &_BandONSContext, Status_BandONSAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace hmiDialogueService
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_1 = v1;

#endif // V1_COM_HARMAN_HMIDIALOGUESERVICE_hmi_Dialogue_Service_Interface_PROXY_BASE_HPP_
