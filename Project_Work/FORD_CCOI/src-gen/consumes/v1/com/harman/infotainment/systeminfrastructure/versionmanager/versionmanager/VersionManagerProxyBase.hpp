/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: The VersionManager component is responsible for gathering version information
 *   of the different modules at run time as well as managing
    a set of required
 *   version for a certain release, the release configuration that is defined at
 *   integration time.


    Version: 1.0
    Reason:
        - Initial Version
   
 *   Changes:
        1. readonly attributes: versionlist
        2. methods:
 *   GetVersion, SetVersion
        3. signal : versioninfochanged
 * author: Dinesh D
 */
#ifndef V1_COM_HARMAN_INFOTAINMENT_SYSTEMINFRASTRUCTURE_VERSIONMANAGER_VERSIONMANAGER_Version_Manager_PROXY_BASE_HPP_
#define V1_COM_HARMAN_INFOTAINMENT_SYSTEMINFRASTRUCTURE_VERSIONMANAGER_VERSIONMANAGER_Version_Manager_PROXY_BASE_HPP_

#include <v1/com/harman/infotainment/systeminfrastructure/versionmanager/versionmanager/VersionManager.hpp>


#include <v1/com/harman/infotainment/systeminfrastructure/versionmanager/versionmanagertypes/versionmanagertypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/SelectiveEvent.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace infotainment {
namespace systeminfrastructure {
namespace versionmanager {
namespace versionmanager {

class VersionManagerProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfoList> AllVersionsAttribute;
    typedef CommonAPI::SelectiveEvent<::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfo> VersionupdatedSelectiveEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfo&)> GetVersionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetVersionAsyncCallback;

    /**
     * description: list of all known version informations at runtime
     */
    virtual AllVersionsAttribute& getAllVersionsAttribute() = 0;

    /**
     * description: signals availabilty/update of a version entry in the runtime
     */
    virtual VersionupdatedSelectiveEvent& getVersionupdatedSelectiveEvent() = 0;

    /**
     * description: a method to retrieve known version information of a specific component
           
     *   to retrieve all versions "attribute VersionInfoList allVersions" can be used
     */
    virtual void getVersion(const std::string &_versionName, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfo &_versionInfo, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(const std::string &_versionName, GetVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: a method to update version list from specific client
     */
    virtual void setVersion(const ::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfoList &_versions, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setVersionAsync(const ::v1::com::harman::infotainment::systeminfrastructure::versionmanager::versionmanagertypes::versionmanagertypes::VersionInfoList &_versions, SetVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace versionmanager
} // namespace versionmanager
} // namespace systeminfrastructure
} // namespace infotainment
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_INFOTAINMENT_SYSTEMINFRASTRUCTURE_VERSIONMANAGER_VERSIONMANAGER_Version_Manager_PROXY_BASE_HPP_
