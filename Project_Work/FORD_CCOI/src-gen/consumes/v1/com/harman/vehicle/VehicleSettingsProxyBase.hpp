/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: The interface towards the Controlling Instance (e.g. HMI). It handles the
 *   communication towards the HMI and other system components who need to interact
 *   with the Vehicle Settings.
 * author: Pramod kumar kar, Yogesh sharma
 */
#ifndef V1_COM_HARMAN_VEHICLE_Vehicle_Settings_PROXY_BASE_HPP_
#define V1_COM_HARMAN_VEHICLE_Vehicle_Settings_PROXY_BASE_HPP_

#include <v1/com/harman/vehicle/VehicleSettings.hpp>


#include <v1/com/harman/vehicle/VehicleType.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace vehicle {

class VehicleSettingsProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableAttribute<::v1::com::harman::vehicle::VehicleType::ListAmbLightSettings> AmbLightSettingsAttribute;
    typedef CommonAPI::ObservableAttribute<::v1::com::harman::vehicle::VehicleType::eDistanceUnits> DispDistanceUnitsAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::vehicle::VehicleType::eDisplayLang> DispLangStatusAttribute;
    typedef CommonAPI::ObservableAttribute<::v1::com::harman::vehicle::VehicleType::eTempreatureUnits> DispTemperatureAttribute;
    typedef CommonAPI::ObservableAttribute<::v1::com::harman::vehicle::VehicleType::eTimeFormat> TimeModeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> DriverRestrictionsGeneralAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> DriverRestrictionsVideoAttribute;
    typedef CommonAPI::ObservableAttribute<::v1::com::harman::vehicle::VehicleType::eBezelBeeps> TouchBeepStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::vehicle::VehicleType::eCountryRegion> CountryRegionAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::vehicle::VehicleType::VersionInfoList> AllVersionsAttribute;
    typedef CommonAPI::Event<
        ::v1::com::harman::vehicle::VehicleType::eDisplayLangResponse, ::v1::com::harman::vehicle::VehicleType::eDisplayLang
    > DispLangResponseEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const bool&)> SetAmbientLight_ReqAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::vehicle::VehicleType::EGenericVehResp&)> SetDisplayLanguage_ReqAsyncCallback;

    /**
     * description: Array of structures for providing data to HMI for all the colour ids
     */
    virtual AmbLightSettingsAttribute& getAmbLightSettingsAttribute() = 0;
    virtual DispDistanceUnitsAttribute& getDispDistanceUnitsAttribute() = 0;
    /**
     * description: for Finding  current display language.
     */
    virtual DispLangStatusAttribute& getDispLangStatusAttribute() = 0;
    virtual DispTemperatureAttribute& getDispTemperatureAttribute() = 0;
    virtual TimeModeAttribute& getTimeModeAttribute() = 0;
    /**
     * description: Provides Driver Restriction status (Enabled(TRUE)/Disabled(FALSE)) to HMI and
     *   Other PresCtrls.
    	                   All the PresCtrls would subscribe to the
     *   attribute to know the driving restrictions status
     */
    virtual DriverRestrictionsGeneralAttribute& getDriverRestrictionsGeneralAttribute() = 0;
    virtual DriverRestrictionsVideoAttribute& getDriverRestrictionsVideoAttribute() = 0;
    /**
     * description: User need to either enable or disable  TouchBeepStatus .Vehiclesetting will
     *   store the enable and disable status into persistency
     */
    virtual TouchBeepStatusAttribute& getTouchBeepStatusAttribute() = 0;
    /**
     * description: Provides the region code derived from Country Code based on the EOL DE07 byte
     *   23 in Diagnostic Spec
     */
    virtual CountryRegionAttribute& getCountryRegionAttribute() = 0;
    /**
     * description: Provides Software Part Number, Revision Number, ESN Number, TCU ESN Number,
     *   Part Number and VIN Number
     */
    virtual AllVersionsAttribute& getAllVersionsAttribute() = 0;

    virtual DispLangResponseEvent& getDispLangResponseEvent() = 0;

    /**
     * description: This interface is used to set the colour and intensity of the ambient light
     */
    virtual void SetAmbientLight_Req(const ::v1::com::harman::vehicle::VehicleType::eAmbientLightingColor &_AmbientLightColor, const int16_t &_AmbientLightIntensity, CommonAPI::CallStatus &_internalCallStatus, bool &_AmbientLight_Req_status, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetAmbientLight_ReqAsync(const ::v1::com::harman::vehicle::VehicleType::eAmbientLightingColor &_AmbientLightColor, const int16_t &_AmbientLightIntensity, SetAmbientLight_ReqAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Display language change can be requested through this parameter,Vehiclesetting
     *   prescontrol will replay to requested module whether requested language
     *   supported both the screens or not
     */
    virtual void SetDisplayLanguage_Req(const ::v1::com::harman::vehicle::VehicleType::eDisplayLang &_dispLangReq, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::VehicleType::EGenericVehResp &_p_eGenericvehResp, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetDisplayLanguage_ReqAsync(const ::v1::com::harman::vehicle::VehicleType::eDisplayLang &_dispLangReq, SetDisplayLanguage_ReqAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace vehicle
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_VEHICLE_Vehicle_Settings_PROXY_BASE_HPP_
