/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: The interface towards the Controlling Instance (e.g. HMI). It handles the
 *   communication towards the HMI and other system components who need to interact
 *   with the Vehicle Settings.
 * author: Pramod kumar kar, Yogesh sharma
 */
#ifndef V1_COM_HARMAN_VEHICLE_Vehicle_Settings_PROXY_HPP_
#define V1_COM_HARMAN_VEHICLE_Vehicle_Settings_PROXY_HPP_

#include <v1/com/harman/vehicle/VehicleSettingsProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace vehicle {

template <typename ... _AttributeExtensions>
class VehicleSettingsProxy
    : virtual public VehicleSettings, 
      virtual public VehicleSettingsProxyBase,
      virtual public _AttributeExtensions... {
public:
    VehicleSettingsProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~VehicleSettingsProxy();

    typedef VehicleSettings InterfaceType;


    /**
     * description: Array of structures for providing data to HMI for all the colour ids
     */
    /**
     * Returns the wrapper class that provides access to the attribute AmbLightSettings.
     */
    virtual AmbLightSettingsAttribute& getAmbLightSettingsAttribute() {
        return delegate_->getAmbLightSettingsAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute dispDistanceUnits.
     */
    virtual DispDistanceUnitsAttribute& getDispDistanceUnitsAttribute() {
        return delegate_->getDispDistanceUnitsAttribute();
    }
    /**
     * description: for Finding  current display language.
     */
    /**
     * Returns the wrapper class that provides access to the attribute dispLangStatus.
     */
    virtual DispLangStatusAttribute& getDispLangStatusAttribute() {
        return delegate_->getDispLangStatusAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute dispTemperature.
     */
    virtual DispTemperatureAttribute& getDispTemperatureAttribute() {
        return delegate_->getDispTemperatureAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute timeMode.
     */
    virtual TimeModeAttribute& getTimeModeAttribute() {
        return delegate_->getTimeModeAttribute();
    }
    /**
     * description: Provides Driver Restriction status (Enabled(TRUE)/Disabled(FALSE)) to HMI and
     *   Other PresCtrls.
    	                   All the PresCtrls would subscribe to the
     *   attribute to know the driving restrictions status
     */
    /**
     * Returns the wrapper class that provides access to the attribute driverRestrictionsGeneral.
     */
    virtual DriverRestrictionsGeneralAttribute& getDriverRestrictionsGeneralAttribute() {
        return delegate_->getDriverRestrictionsGeneralAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute driverRestrictionsVideo.
     */
    virtual DriverRestrictionsVideoAttribute& getDriverRestrictionsVideoAttribute() {
        return delegate_->getDriverRestrictionsVideoAttribute();
    }
    /**
     * description: User need to either enable or disable  TouchBeepStatus .Vehiclesetting will
     *   store the enable and disable status into persistency
     */
    /**
     * Returns the wrapper class that provides access to the attribute TouchBeepStatus.
     */
    virtual TouchBeepStatusAttribute& getTouchBeepStatusAttribute() {
        return delegate_->getTouchBeepStatusAttribute();
    }
    /**
     * description: Provides the region code derived from Country Code based on the EOL DE07 byte
     *   23 in Diagnostic Spec
     */
    /**
     * Returns the wrapper class that provides access to the attribute countryRegion.
     */
    virtual CountryRegionAttribute& getCountryRegionAttribute() {
        return delegate_->getCountryRegionAttribute();
    }
    /**
     * description: Provides Software Part Number, Revision Number, ESN Number, TCU ESN Number,
     *   Part Number and VIN Number
     */
    /**
     * Returns the wrapper class that provides access to the attribute allVersions.
     */
    virtual AllVersionsAttribute& getAllVersionsAttribute() {
        return delegate_->getAllVersionsAttribute();
    }

    /**
     * Returns the wrapper class that provides access to the broadcast dispLangResponse.
     */
    virtual DispLangResponseEvent& getDispLangResponseEvent() {
        return delegate_->getDispLangResponseEvent();
    }

    /**
     * description: This interface is used to set the colour and intensity of the ambient light
     * Calls SetAmbientLight_Req with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SetAmbientLight_Req(const ::v1::com::harman::vehicle::VehicleType::eAmbientLightingColor &_AmbientLightColor, const int16_t &_AmbientLightIntensity, CommonAPI::CallStatus &_internalCallStatus, bool &_AmbientLight_Req_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SetAmbientLight_Req with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SetAmbientLight_ReqAsync(const ::v1::com::harman::vehicle::VehicleType::eAmbientLightingColor &_AmbientLightColor, const int16_t &_AmbientLightIntensity, SetAmbientLight_ReqAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Display language change can be requested through this parameter,Vehiclesetting
     *   prescontrol will replay to requested module whether requested language
     *   supported both the screens or not
     * Calls SetDisplayLanguage_Req with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SetDisplayLanguage_Req(const ::v1::com::harman::vehicle::VehicleType::eDisplayLang &_dispLangReq, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::VehicleType::EGenericVehResp &_p_eGenericvehResp, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SetDisplayLanguage_Req with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SetDisplayLanguage_ReqAsync(const ::v1::com::harman::vehicle::VehicleType::eDisplayLang &_dispLangReq, SetDisplayLanguage_ReqAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<VehicleSettingsProxyBase> delegate_;
};

typedef VehicleSettingsProxy<> VehicleSettingsProxyDefault;

namespace VehicleSettingsExtensions {
    /**
     * description: Array of structures for providing data to HMI for all the colour ids
     */
    template <template <typename > class _ExtensionType>
    class AmbLightSettingsAttributeExtension {
     public:
        typedef _ExtensionType<VehicleSettingsProxyBase::AmbLightSettingsAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<VehicleSettingsProxyBase::AmbLightSettingsAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        AmbLightSettingsAttributeExtension() {}
    #endif
    
        AmbLightSettingsAttributeExtension(VehicleSettingsProxyBase& proxy): attributeExtension_(proxy.getAmbLightSettingsAttribute()) {
        }
    
        inline extension_type& getAmbLightSettingsAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class DispDistanceUnitsAttributeExtension {
     public:
        typedef _ExtensionType<VehicleSettingsProxyBase::DispDistanceUnitsAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<VehicleSettingsProxyBase::DispDistanceUnitsAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DispDistanceUnitsAttributeExtension() {}
    #endif
    
        DispDistanceUnitsAttributeExtension(VehicleSettingsProxyBase& proxy): attributeExtension_(proxy.getDispDistanceUnitsAttribute()) {
        }
    
        inline extension_type& getDispDistanceUnitsAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: for Finding  current display language.
     */
    template <template <typename > class _ExtensionType>
    class DispLangStatusAttributeExtension {
     public:
        typedef _ExtensionType<VehicleSettingsProxyBase::DispLangStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<VehicleSettingsProxyBase::DispLangStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DispLangStatusAttributeExtension() {}
    #endif
    
        DispLangStatusAttributeExtension(VehicleSettingsProxyBase& proxy): attributeExtension_(proxy.getDispLangStatusAttribute()) {
        }
    
        inline extension_type& getDispLangStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class DispTemperatureAttributeExtension {
     public:
        typedef _ExtensionType<VehicleSettingsProxyBase::DispTemperatureAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<VehicleSettingsProxyBase::DispTemperatureAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DispTemperatureAttributeExtension() {}
    #endif
    
        DispTemperatureAttributeExtension(VehicleSettingsProxyBase& proxy): attributeExtension_(proxy.getDispTemperatureAttribute()) {
        }
    
        inline extension_type& getDispTemperatureAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TimeModeAttributeExtension {
     public:
        typedef _ExtensionType<VehicleSettingsProxyBase::TimeModeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<VehicleSettingsProxyBase::TimeModeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TimeModeAttributeExtension() {}
    #endif
    
        TimeModeAttributeExtension(VehicleSettingsProxyBase& proxy): attributeExtension_(proxy.getTimeModeAttribute()) {
        }
    
        inline extension_type& getTimeModeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Provides Driver Restriction status (Enabled(TRUE)/Disabled(FALSE)) to HMI and
     *   Other PresCtrls.
    	                   All the PresCtrls would subscribe to the
     *   attribute to know the driving restrictions status
     */
    template <template <typename > class _ExtensionType>
    class DriverRestrictionsGeneralAttributeExtension {
     public:
        typedef _ExtensionType<VehicleSettingsProxyBase::DriverRestrictionsGeneralAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<VehicleSettingsProxyBase::DriverRestrictionsGeneralAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DriverRestrictionsGeneralAttributeExtension() {}
    #endif
    
        DriverRestrictionsGeneralAttributeExtension(VehicleSettingsProxyBase& proxy): attributeExtension_(proxy.getDriverRestrictionsGeneralAttribute()) {
        }
    
        inline extension_type& getDriverRestrictionsGeneralAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class DriverRestrictionsVideoAttributeExtension {
     public:
        typedef _ExtensionType<VehicleSettingsProxyBase::DriverRestrictionsVideoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<VehicleSettingsProxyBase::DriverRestrictionsVideoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DriverRestrictionsVideoAttributeExtension() {}
    #endif
    
        DriverRestrictionsVideoAttributeExtension(VehicleSettingsProxyBase& proxy): attributeExtension_(proxy.getDriverRestrictionsVideoAttribute()) {
        }
    
        inline extension_type& getDriverRestrictionsVideoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: User need to either enable or disable  TouchBeepStatus .Vehiclesetting will
     *   store the enable and disable status into persistency
     */
    template <template <typename > class _ExtensionType>
    class TouchBeepStatusAttributeExtension {
     public:
        typedef _ExtensionType<VehicleSettingsProxyBase::TouchBeepStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<VehicleSettingsProxyBase::TouchBeepStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TouchBeepStatusAttributeExtension() {}
    #endif
    
        TouchBeepStatusAttributeExtension(VehicleSettingsProxyBase& proxy): attributeExtension_(proxy.getTouchBeepStatusAttribute()) {
        }
    
        inline extension_type& getTouchBeepStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Provides the region code derived from Country Code based on the EOL DE07 byte
     *   23 in Diagnostic Spec
     */
    template <template <typename > class _ExtensionType>
    class CountryRegionAttributeExtension {
     public:
        typedef _ExtensionType<VehicleSettingsProxyBase::CountryRegionAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<VehicleSettingsProxyBase::CountryRegionAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CountryRegionAttributeExtension() {}
    #endif
    
        CountryRegionAttributeExtension(VehicleSettingsProxyBase& proxy): attributeExtension_(proxy.getCountryRegionAttribute()) {
        }
    
        inline extension_type& getCountryRegionAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Provides Software Part Number, Revision Number, ESN Number, TCU ESN Number,
     *   Part Number and VIN Number
     */
    template <template <typename > class _ExtensionType>
    class AllVersionsAttributeExtension {
     public:
        typedef _ExtensionType<VehicleSettingsProxyBase::AllVersionsAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<VehicleSettingsProxyBase::AllVersionsAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        AllVersionsAttributeExtension() {}
    #endif
    
        AllVersionsAttributeExtension(VehicleSettingsProxyBase& proxy): attributeExtension_(proxy.getAllVersionsAttribute()) {
        }
    
        inline extension_type& getAllVersionsAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace VehicleSettingsExtensions

//
// VehicleSettingsProxy Implementation
//
template <typename ... _AttributeExtensions>
VehicleSettingsProxy<_AttributeExtensions...>::VehicleSettingsProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<VehicleSettingsProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<VehicleSettingsProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
VehicleSettingsProxy<_AttributeExtensions...>::~VehicleSettingsProxy() {
}

/**
 * description: This interface is used to set the colour and intensity of the ambient light
 */
template <typename ... _AttributeExtensions>
void VehicleSettingsProxy<_AttributeExtensions...>::SetAmbientLight_Req(const ::v1::com::harman::vehicle::VehicleType::eAmbientLightingColor &_AmbientLightColor, const int16_t &_AmbientLightIntensity, CommonAPI::CallStatus &_internalCallStatus, bool &_AmbientLight_Req_status, const CommonAPI::CallInfo *_info) {
    if (!_AmbientLightColor.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->SetAmbientLight_Req(_AmbientLightColor, _AmbientLightIntensity, _internalCallStatus, _AmbientLight_Req_status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> VehicleSettingsProxy<_AttributeExtensions...>::SetAmbientLight_ReqAsync(const ::v1::com::harman::vehicle::VehicleType::eAmbientLightingColor &_AmbientLightColor, const int16_t &_AmbientLightIntensity, SetAmbientLight_ReqAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_AmbientLightColor.validate()) {
        bool AmbientLight_Req_status = false;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, AmbientLight_Req_status);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->SetAmbientLight_ReqAsync(_AmbientLightColor, _AmbientLightIntensity, _callback, _info);
}
/**
 * description: Display language change can be requested through this parameter,Vehiclesetting
 *   prescontrol will replay to requested module whether requested language
 *   supported both the screens or not
 */
template <typename ... _AttributeExtensions>
void VehicleSettingsProxy<_AttributeExtensions...>::SetDisplayLanguage_Req(const ::v1::com::harman::vehicle::VehicleType::eDisplayLang &_dispLangReq, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::VehicleType::EGenericVehResp &_p_eGenericvehResp, const CommonAPI::CallInfo *_info) {
    if (!_dispLangReq.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->SetDisplayLanguage_Req(_dispLangReq, _internalCallStatus, _p_eGenericvehResp, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> VehicleSettingsProxy<_AttributeExtensions...>::SetDisplayLanguage_ReqAsync(const ::v1::com::harman::vehicle::VehicleType::eDisplayLang &_dispLangReq, SetDisplayLanguage_ReqAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_dispLangReq.validate()) {
        ::v1::com::harman::vehicle::VehicleType::EGenericVehResp p_eGenericvehResp = ::v1::com::harman::vehicle::VehicleType::EGenericVehResp::e_Failure;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, p_eGenericvehResp);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->SetDisplayLanguage_ReqAsync(_dispLangReq, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &VehicleSettingsProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool VehicleSettingsProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool VehicleSettingsProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& VehicleSettingsProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& VehicleSettingsProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace vehicle
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v1::com::harman::vehicle::VehicleSettingsProxy,
    _AttributeExtension> {
    typedef typename ::v1::com::harman::vehicle::VehicleSettingsProxy<
            ::v1::com::harman::vehicle::VehicleSettingsExtensions::AmbLightSettingsAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::vehicle::VehicleSettingsExtensions::DispDistanceUnitsAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::vehicle::VehicleSettingsExtensions::DispLangStatusAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::vehicle::VehicleSettingsExtensions::DispTemperatureAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::vehicle::VehicleSettingsExtensions::TimeModeAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::vehicle::VehicleSettingsExtensions::DriverRestrictionsGeneralAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::vehicle::VehicleSettingsExtensions::DriverRestrictionsVideoAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::vehicle::VehicleSettingsExtensions::TouchBeepStatusAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::vehicle::VehicleSettingsExtensions::CountryRegionAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::vehicle::VehicleSettingsExtensions::AllVersionsAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_VEHICLE_Vehicle_Settings_PROXY_HPP_
