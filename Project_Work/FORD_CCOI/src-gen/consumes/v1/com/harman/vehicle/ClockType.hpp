/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_HARMAN_VEHICLE_Clock_Type_HPP_
#define V1_COM_HARMAN_VEHICLE_Clock_Type_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace vehicle {

struct ClockType {
    
    struct ETimeSpec : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Invalid = 0,
            e_AM = 1,
            e_PM = 2
        };
        
        ETimeSpec() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Invalid)) {}
        ETimeSpec(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Invalid):
                case static_cast<int32_t>(Literal::e_AM):
                case static_cast<int32_t>(Literal::e_PM):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ETimeSpec &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ETimeSpec &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ETimeSpec &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ETimeSpec &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ETimeSpec &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ETimeSpec &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ESetType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Invalid = 0,
            e_Hour = 1,
            e_Minute = 2,
            e_both = 3
        };
        
        ESetType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Invalid)) {}
        ESetType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Invalid):
                case static_cast<int32_t>(Literal::e_Hour):
                case static_cast<int32_t>(Literal::e_Minute):
                case static_cast<int32_t>(Literal::e_both):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ESetType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ESetType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ESetType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ESetType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ESetType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ESetType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ETimeForamt : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Invalid = 0,
            e_TwelvehrFormat = 1,
            e_TwentyFourHrFormt = 2
        };
        
        ETimeForamt() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Invalid)) {}
        ETimeForamt(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Invalid):
                case static_cast<int32_t>(Literal::e_TwelvehrFormat):
                case static_cast<int32_t>(Literal::e_TwentyFourHrFormt):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ETimeForamt &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ETimeForamt &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ETimeForamt &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ETimeForamt &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ETimeForamt &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ETimeForamt &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct EGenericResp : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Failure = 0,
            e_Success = 1
        };
        
        EGenericResp() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Failure)) {}
        EGenericResp(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Failure):
                case static_cast<int32_t>(Literal::e_Success):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EGenericResp &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EGenericResp &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EGenericResp &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EGenericResp &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EGenericResp &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EGenericResp &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct StrTimeDataMsg : CommonAPI::Struct<uint8_t, uint8_t, ETimeSpec> {
    	
    	StrTimeDataMsg() {
    	}
    	StrTimeDataMsg(const uint8_t &_m_U8Hr, const uint8_t &_m_U8Min, const ETimeSpec &_m_eTimeSpec)
    	{
    		std::get<0>(values_) = _m_U8Hr;
    		std::get<1>(values_) = _m_U8Min;
    		std::get<2>(values_) = _m_eTimeSpec;
    	}
    	inline const uint8_t &getM_U8Hr() const { return std::get<0>(values_); }
    	inline void setM_U8Hr(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint8_t &getM_U8Min() const { return std::get<1>(values_); }
    	inline void setM_U8Min(const uint8_t &_value) { std::get<1>(values_) = _value; }
    	inline const ETimeSpec &getM_eTimeSpec() const { return std::get<2>(values_); }
    	inline void setM_eTimeSpec(const ETimeSpec &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const StrTimeDataMsg& _other) const {
                return (getM_U8Hr() == _other.getM_U8Hr() && getM_U8Min() == _other.getM_U8Min() && getM_eTimeSpec() == _other.getM_eTimeSpec());
        }
    	inline bool operator!=(const StrTimeDataMsg &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct StrClockMsgData : CommonAPI::Struct<std::string, std::string, std::string> {
    	
    	StrClockMsgData() {
    	}
    	StrClockMsgData(const std::string &_m_Date, const std::string &_m_TimeWithoutSec, const std::string &_m_TimeWithSec)
    	{
    		std::get<0>(values_) = _m_Date;
    		std::get<1>(values_) = _m_TimeWithoutSec;
    		std::get<2>(values_) = _m_TimeWithSec;
    	}
    	inline const std::string &getM_Date() const { return std::get<0>(values_); }
    	inline void setM_Date(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getM_TimeWithoutSec() const { return std::get<1>(values_); }
    	inline void setM_TimeWithoutSec(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const std::string &getM_TimeWithSec() const { return std::get<2>(values_); }
    	inline void setM_TimeWithSec(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const StrClockMsgData& _other) const {
                return (getM_Date() == _other.getM_Date() && getM_TimeWithoutSec() == _other.getM_TimeWithoutSec() && getM_TimeWithSec() == _other.getM_TimeWithSec());
        }
    	inline bool operator!=(const StrClockMsgData &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.vehicle.ClockType";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct ClockType

} // namespace vehicle
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for ETimeSpec
    template<>
    struct hash<::v1::com::harman::vehicle::ClockType::ETimeSpec> {
        inline size_t operator()(const ::v1::com::harman::vehicle::ClockType::ETimeSpec& eTimeSpec) const {
            return static_cast<int32_t>(eTimeSpec);
        }
    };
    //Hash for ESetType
    template<>
    struct hash<::v1::com::harman::vehicle::ClockType::ESetType> {
        inline size_t operator()(const ::v1::com::harman::vehicle::ClockType::ESetType& eSetType) const {
            return static_cast<int32_t>(eSetType);
        }
    };
    //Hash for ETimeForamt
    template<>
    struct hash<::v1::com::harman::vehicle::ClockType::ETimeForamt> {
        inline size_t operator()(const ::v1::com::harman::vehicle::ClockType::ETimeForamt& eTimeForamt) const {
            return static_cast<int32_t>(eTimeForamt);
        }
    };
    //Hash for EGenericResp
    template<>
    struct hash<::v1::com::harman::vehicle::ClockType::EGenericResp> {
        inline size_t operator()(const ::v1::com::harman::vehicle::ClockType::EGenericResp& eGenericResp) const {
            return static_cast<int32_t>(eGenericResp);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_VEHICLE_Clock_Type_HPP_
