/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_HARMAN_VEHICLE_Reset_Type_HPP_
#define V1_COM_HARMAN_VEHICLE_Reset_Type_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace vehicle {

struct ResetType {
    
    struct eFactoryResetParams : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            RESET_UNKNOWN = -1,
            RESET_FACTORY_DEFAULTS = 0,
            RESET_MULTIMEDIA_APP = 1,
            RESET_TCU_APP = 2,
            RESET_ERROR = 3
        };
        
        eFactoryResetParams() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::RESET_UNKNOWN)) {}
        eFactoryResetParams(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::RESET_UNKNOWN):
                case static_cast<int32_t>(Literal::RESET_FACTORY_DEFAULTS):
                case static_cast<int32_t>(Literal::RESET_MULTIMEDIA_APP):
                case static_cast<int32_t>(Literal::RESET_TCU_APP):
                case static_cast<int32_t>(Literal::RESET_ERROR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eFactoryResetParams &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eFactoryResetParams &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eFactoryResetParams &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eFactoryResetParams &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eFactoryResetParams &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eFactoryResetParams &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eFactoryResetStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            UNKNOWN = 0,
            INVALID = 1,
            SUCCESS = 2,
            FAILURE = 3
        };
        
        eFactoryResetStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::UNKNOWN)) {}
        eFactoryResetStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::UNKNOWN):
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::SUCCESS):
                case static_cast<int32_t>(Literal::FAILURE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eFactoryResetStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eFactoryResetStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eFactoryResetStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eFactoryResetStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eFactoryResetStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eFactoryResetStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eRestartRequire : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            YES = 0,
            NO = 1
        };
        
        eRestartRequire() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::YES)) {}
        eRestartRequire(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::YES):
                case static_cast<int32_t>(Literal::NO):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eRestartRequire &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eRestartRequire &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eRestartRequire &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eRestartRequire &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eRestartRequire &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eRestartRequire &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eModuleID : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            MID_UNKNOWN_ERR = 0,
            MID_HMI_APP = 1,
            MID_APPLINK_SVC = 2,
            MID_AUDIO_PRES = 3,
            MID_CARPLAY_PRES = 4,
            MID_ANDROIDAUTO_PRES = 5,
            MID_CARLIFE_PRES = 6,
            MID_TUNER_PRES = 7,
            MID_TUNER_CORE = 8,
            MID_SDARS_SVC = 9,
            MID_MEDIAONE_SVC = 10,
            MID_MEDIA_PRES = 11,
            MID_BT_PRES = 12,
            MID_BT_SVC = 13,
            MID_TELEMATICS_SVC = 14,
            MID_APA_PRES = 15,
            MID_WIFI_PRES = 16,
            MID_IVSU_PRES = 17,
            MID_IVSU_CORE = 18,
            MID_VEHSETT_PRES = 19,
            MID_INPUT_PRES = 20,
            MID_ILLUM_PRES = 21,
            MID_DIAG_PRES = 22,
            MID_CLIMATE_PRES = 23,
            MID_SECUTIRY_SVC = 24,
            MID_TCU_ECU = 25,
            MID_CUSTOME1_APP = 26,
            MID_CUSTOME2_APP = 27,
            MID_CUSTOME3_APP = 28,
            MID_CUSTOME4_APP = 29,
            MID_CUSTOME5_APP = 30,
            MID_CUSTOME6_APP = 31
        };
        
        eModuleID() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::MID_UNKNOWN_ERR)) {}
        eModuleID(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::MID_UNKNOWN_ERR):
                case static_cast<int32_t>(Literal::MID_HMI_APP):
                case static_cast<int32_t>(Literal::MID_APPLINK_SVC):
                case static_cast<int32_t>(Literal::MID_AUDIO_PRES):
                case static_cast<int32_t>(Literal::MID_CARPLAY_PRES):
                case static_cast<int32_t>(Literal::MID_ANDROIDAUTO_PRES):
                case static_cast<int32_t>(Literal::MID_CARLIFE_PRES):
                case static_cast<int32_t>(Literal::MID_TUNER_PRES):
                case static_cast<int32_t>(Literal::MID_TUNER_CORE):
                case static_cast<int32_t>(Literal::MID_SDARS_SVC):
                case static_cast<int32_t>(Literal::MID_MEDIAONE_SVC):
                case static_cast<int32_t>(Literal::MID_MEDIA_PRES):
                case static_cast<int32_t>(Literal::MID_BT_PRES):
                case static_cast<int32_t>(Literal::MID_BT_SVC):
                case static_cast<int32_t>(Literal::MID_TELEMATICS_SVC):
                case static_cast<int32_t>(Literal::MID_APA_PRES):
                case static_cast<int32_t>(Literal::MID_WIFI_PRES):
                case static_cast<int32_t>(Literal::MID_IVSU_PRES):
                case static_cast<int32_t>(Literal::MID_IVSU_CORE):
                case static_cast<int32_t>(Literal::MID_VEHSETT_PRES):
                case static_cast<int32_t>(Literal::MID_INPUT_PRES):
                case static_cast<int32_t>(Literal::MID_ILLUM_PRES):
                case static_cast<int32_t>(Literal::MID_DIAG_PRES):
                case static_cast<int32_t>(Literal::MID_CLIMATE_PRES):
                case static_cast<int32_t>(Literal::MID_SECUTIRY_SVC):
                case static_cast<int32_t>(Literal::MID_TCU_ECU):
                case static_cast<int32_t>(Literal::MID_CUSTOME1_APP):
                case static_cast<int32_t>(Literal::MID_CUSTOME2_APP):
                case static_cast<int32_t>(Literal::MID_CUSTOME3_APP):
                case static_cast<int32_t>(Literal::MID_CUSTOME4_APP):
                case static_cast<int32_t>(Literal::MID_CUSTOME5_APP):
                case static_cast<int32_t>(Literal::MID_CUSTOME6_APP):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eModuleID &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eModuleID &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eModuleID &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eModuleID &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eModuleID &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eModuleID &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.vehicle.ResetType";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct ResetType

} // namespace vehicle
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for eFactoryResetParams
    template<>
    struct hash<::v1::com::harman::vehicle::ResetType::eFactoryResetParams> {
        inline size_t operator()(const ::v1::com::harman::vehicle::ResetType::eFactoryResetParams& eFactoryResetParams) const {
            return static_cast<int32_t>(eFactoryResetParams);
        }
    };
    //Hash for eFactoryResetStatus
    template<>
    struct hash<::v1::com::harman::vehicle::ResetType::eFactoryResetStatus> {
        inline size_t operator()(const ::v1::com::harman::vehicle::ResetType::eFactoryResetStatus& eFactoryResetStatus) const {
            return static_cast<int32_t>(eFactoryResetStatus);
        }
    };
    //Hash for eRestartRequire
    template<>
    struct hash<::v1::com::harman::vehicle::ResetType::eRestartRequire> {
        inline size_t operator()(const ::v1::com::harman::vehicle::ResetType::eRestartRequire& eRestartRequire) const {
            return static_cast<int32_t>(eRestartRequire);
        }
    };
    //Hash for eModuleID
    template<>
    struct hash<::v1::com::harman::vehicle::ResetType::eModuleID> {
        inline size_t operator()(const ::v1::com::harman::vehicle::ResetType::eModuleID& eModuleID) const {
            return static_cast<int32_t>(eModuleID);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_VEHICLE_Reset_Type_HPP_
