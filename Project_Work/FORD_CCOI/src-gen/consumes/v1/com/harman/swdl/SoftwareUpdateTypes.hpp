/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_HARMAN_SWDL_Software_Update_Types_HPP_
#define V1_COM_HARMAN_SWDL_Software_Update_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace swdl {

struct SoftwareUpdateTypes {
    
    struct eUpdateSource : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            UPDATE_SOURCE_MSD = 0,
            UPDATE_SOURCE_OTA = 1,
            UPDATE_SOURCE_VEHICLE_NETWORK = 2,
            UPDATE_SOURCE_DIAGNOSIS = 3,
            UPDATE_SOURCE_ALL = 4,
            UPDATE_SOURCE_UNKNOWN = 5
        };
        
        eUpdateSource() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::UPDATE_SOURCE_MSD)) {}
        eUpdateSource(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::UPDATE_SOURCE_MSD):
                case static_cast<int32_t>(Literal::UPDATE_SOURCE_OTA):
                case static_cast<int32_t>(Literal::UPDATE_SOURCE_VEHICLE_NETWORK):
                case static_cast<int32_t>(Literal::UPDATE_SOURCE_DIAGNOSIS):
                case static_cast<int32_t>(Literal::UPDATE_SOURCE_ALL):
                case static_cast<int32_t>(Literal::UPDATE_SOURCE_UNKNOWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eUpdateSource &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eUpdateSource &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eUpdateSource &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eUpdateSource &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eUpdateSource &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eUpdateSource &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eUpdateAvailability : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            UPDATE_READY_TO_DOWNLOAD = 0,
            UPDATE_READY_TO_INSTALL = 1,
            NW_NOT_IN_UPDATABLE_MODE = 2,
            NO_UPDATE_AVAILABLE = 3,
            UPDATE_ALREADY_IN_PROGRESS = 4,
            UPDATE_NOT_REQUIRED = 5
        };
        
        eUpdateAvailability() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::UPDATE_READY_TO_DOWNLOAD)) {}
        eUpdateAvailability(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::UPDATE_READY_TO_DOWNLOAD):
                case static_cast<int32_t>(Literal::UPDATE_READY_TO_INSTALL):
                case static_cast<int32_t>(Literal::NW_NOT_IN_UPDATABLE_MODE):
                case static_cast<int32_t>(Literal::NO_UPDATE_AVAILABLE):
                case static_cast<int32_t>(Literal::UPDATE_ALREADY_IN_PROGRESS):
                case static_cast<int32_t>(Literal::UPDATE_NOT_REQUIRED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eUpdateAvailability &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eUpdateAvailability &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eUpdateAvailability &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eUpdateAvailability &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eUpdateAvailability &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eUpdateAvailability &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Update package details that is available for download.
     */
    struct tPackageDetails : CommonAPI::Struct<eUpdateSource, std::string, std::string, std::string, uint32_t> {
    	
    	tPackageDetails() {
    	}
    	tPackageDetails(const eUpdateSource &_source, const std::string &_PackageName, const std::string &_Description, const std::string &_Version, const uint32_t &_PackageSize)
    	{
    		std::get<0>(values_) = _source;
    		std::get<1>(values_) = _PackageName;
    		std::get<2>(values_) = _Description;
    		std::get<3>(values_) = _Version;
    		std::get<4>(values_) = _PackageSize;
    	}
    	/**
    	 * description: Source from which package details are sent.
    	 */
    	inline const eUpdateSource &getSource() const { return std::get<0>(values_); }
    	inline void setSource(const eUpdateSource &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Update package name.
    	 */
    	inline const std::string &getPackageName() const { return std::get<1>(values_); }
    	inline void setPackageName(const std::string &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Change description  or release note of the new softwarepackage.
    	 */
    	inline const std::string &getDescription() const { return std::get<2>(values_); }
    	inline void setDescription(const std::string &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: Update package version (destination version).
    	 */
    	inline const std::string &getVersion() const { return std::get<3>(values_); }
    	inline void setVersion(const std::string &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: Update package size.
    	 */
    	inline const uint32_t &getPackageSize() const { return std::get<4>(values_); }
    	inline void setPackageSize(const uint32_t &_value) { std::get<4>(values_) = _value; }
    	inline bool operator==(const tPackageDetails& _other) const {
                return (getSource() == _other.getSource() && getPackageName() == _other.getPackageName() && getDescription() == _other.getDescription() && getVersion() == _other.getVersion() && getPackageSize() == _other.getPackageSize());
        }
    	inline bool operator!=(const tPackageDetails &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Result of check for Update
     */
    struct tUpdateSearchResult : CommonAPI::Struct<eUpdateAvailability, tPackageDetails> {
    	
    	tUpdateSearchResult() {
    	}
    	tUpdateSearchResult(const eUpdateAvailability &_updateAvailability, const tPackageDetails &_packageDetails)
    	{
    		std::get<0>(values_) = _updateAvailability;
    		std::get<1>(values_) = _packageDetails;
    	}
    	/**
    	 * description: Package availability status.
    	 */
    	inline const eUpdateAvailability &getUpdateAvailability() const { return std::get<0>(values_); }
    	inline void setUpdateAvailability(const eUpdateAvailability &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Package information.
    	 */
    	inline const tPackageDetails &getPackageDetails() const { return std::get<1>(values_); }
    	inline void setPackageDetails(const tPackageDetails &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const tUpdateSearchResult& _other) const {
                return (getUpdateAvailability() == _other.getUpdateAvailability() && getPackageDetails() == _other.getPackageDetails());
        }
    	inline bool operator!=(const tUpdateSearchResult &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct eActivationStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ACTIVATION_IN_PROGRESS = 0,
            ACTIVATION_PENDING = 1,
            ACTIVATION_SUCCESSFULL = 2,
            ACTIVATION_FAILED = 3,
            ACTIVATION_NONE = 4
        };
        
        eActivationStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ACTIVATION_IN_PROGRESS)) {}
        eActivationStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ACTIVATION_IN_PROGRESS):
                case static_cast<int32_t>(Literal::ACTIVATION_PENDING):
                case static_cast<int32_t>(Literal::ACTIVATION_SUCCESSFULL):
                case static_cast<int32_t>(Literal::ACTIVATION_FAILED):
                case static_cast<int32_t>(Literal::ACTIVATION_NONE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eActivationStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eActivationStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eActivationStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eActivationStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eActivationStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eActivationStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Result of previously installed software activation
     */
    struct tActivationResult : CommonAPI::Struct<eActivationStatus, tPackageDetails> {
    	
    	tActivationResult() {
    	}
    	tActivationResult(const eActivationStatus &_activationStatus, const tPackageDetails &_packageDetails)
    	{
    		std::get<0>(values_) = _activationStatus;
    		std::get<1>(values_) = _packageDetails;
    	}
    	/**
    	 * description: current status of activation
    	 */
    	inline const eActivationStatus &getActivationStatus() const { return std::get<0>(values_); }
    	inline void setActivationStatus(const eActivationStatus &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Installed Package information.
    	 */
    	inline const tPackageDetails &getPackageDetails() const { return std::get<1>(values_); }
    	inline void setPackageDetails(const tPackageDetails &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const tActivationResult& _other) const {
                return (getActivationStatus() == _other.getActivationStatus() && getPackageDetails() == _other.getPackageDetails());
        }
    	inline bool operator!=(const tActivationResult &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct eRequestDownload : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            START_DOWNLOAD = 0,
            DEFER_DOWNLOAD = 1,
            DECLINE_DOWNLOAD = 2,
            PAUSE_DOWNLOAD = 3,
            RESUME_DOWNLOAD = 4,
            CANCEL_DOWNLOAD = 5
        };
        
        eRequestDownload() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::START_DOWNLOAD)) {}
        eRequestDownload(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::START_DOWNLOAD):
                case static_cast<int32_t>(Literal::DEFER_DOWNLOAD):
                case static_cast<int32_t>(Literal::DECLINE_DOWNLOAD):
                case static_cast<int32_t>(Literal::PAUSE_DOWNLOAD):
                case static_cast<int32_t>(Literal::RESUME_DOWNLOAD):
                case static_cast<int32_t>(Literal::CANCEL_DOWNLOAD):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eRequestDownload &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eRequestDownload &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eRequestDownload &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eRequestDownload &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eRequestDownload &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eRequestDownload &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eRequestInstall : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            START_INSTALLATION = 0,
            DEFER_INSTALLATION = 1,
            DECLINE_INSTALLATION = 2,
            PAUSE_INSTALLATION = 3,
            RESUME_INSTALLATION = 4,
            CANCEL_INSTALLATION = 5
        };
        
        eRequestInstall() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::START_INSTALLATION)) {}
        eRequestInstall(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::START_INSTALLATION):
                case static_cast<int32_t>(Literal::DEFER_INSTALLATION):
                case static_cast<int32_t>(Literal::DECLINE_INSTALLATION):
                case static_cast<int32_t>(Literal::PAUSE_INSTALLATION):
                case static_cast<int32_t>(Literal::RESUME_INSTALLATION):
                case static_cast<int32_t>(Literal::CANCEL_INSTALLATION):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eRequestInstall &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eRequestInstall &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eRequestInstall &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eRequestInstall &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eRequestInstall &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eRequestInstall &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eMethodResult : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            REQ_OK = 0,
            REQ_FAILED = 1,
            REQ_UNKNOWN = 2,
            REQ_UNSUPPORTED = 3,
            REQ_BUSY = 4
        };
        
        eMethodResult() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::REQ_OK)) {}
        eMethodResult(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::REQ_OK):
                case static_cast<int32_t>(Literal::REQ_FAILED):
                case static_cast<int32_t>(Literal::REQ_UNKNOWN):
                case static_cast<int32_t>(Literal::REQ_UNSUPPORTED):
                case static_cast<int32_t>(Literal::REQ_BUSY):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eMethodResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eMethodResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eMethodResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eMethodResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eMethodResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eMethodResult &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eErrorCode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            PACKAGE_VALIDATION_FAILED = 0,
            PACKAGE_DOWNLOAD_FAILED = 1,
            PACKAGE_INSTALLATION_FAILED = 2,
            SERVER_SESSION_ERROR = 3,
            SERVER_CONNECTION_NOT_AVAILABLE = 4,
            MSD_DISCONNECTED = 5,
            MSD_INVALID = 6,
            PRECONDITION_CHECK_FAILED = 7,
            INVALID_SEQUENCE = 8,
            UNKNOWN_ERROR = 9,
            NO_ERROR = 10
        };
        
        eErrorCode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::PACKAGE_VALIDATION_FAILED)) {}
        eErrorCode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::PACKAGE_VALIDATION_FAILED):
                case static_cast<int32_t>(Literal::PACKAGE_DOWNLOAD_FAILED):
                case static_cast<int32_t>(Literal::PACKAGE_INSTALLATION_FAILED):
                case static_cast<int32_t>(Literal::SERVER_SESSION_ERROR):
                case static_cast<int32_t>(Literal::SERVER_CONNECTION_NOT_AVAILABLE):
                case static_cast<int32_t>(Literal::MSD_DISCONNECTED):
                case static_cast<int32_t>(Literal::MSD_INVALID):
                case static_cast<int32_t>(Literal::PRECONDITION_CHECK_FAILED):
                case static_cast<int32_t>(Literal::INVALID_SEQUENCE):
                case static_cast<int32_t>(Literal::UNKNOWN_ERROR):
                case static_cast<int32_t>(Literal::NO_ERROR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eErrorCode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eErrorCode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eErrorCode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eErrorCode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eErrorCode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eErrorCode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Software update error information.
     */
    struct tErrorInfo : CommonAPI::Struct<eErrorCode, std::string> {
    	
    	tErrorInfo() {
    	}
    	tErrorInfo(const eErrorCode &_errorCode, const std::string &_errorString)
    	{
    		std::get<0>(values_) = _errorCode;
    		std::get<1>(values_) = _errorString;
    	}
    	/**
    	 * description: Error code.
    	 */
    	inline const eErrorCode &getErrorCode() const { return std::get<0>(values_); }
    	inline void setErrorCode(const eErrorCode &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Error information.
    	 */
    	inline const std::string &getErrorString() const { return std::get<1>(values_); }
    	inline void setErrorString(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const tErrorInfo& _other) const {
                return (getErrorCode() == _other.getErrorCode() && getErrorString() == _other.getErrorString());
        }
    	inline bool operator!=(const tErrorInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct eSwdlState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            IDLE = 0,
            SEARCHING_FOR_UPDATE = 1,
            DOWNLOADING_UPDATE = 2,
            DOWNLOAD_COMPLETE = 3,
            VALIDATION_IN_PROGRESS = 4,
            READY_TO_INSTALL = 5,
            INSTALLATION_IN_PROGRESS = 6,
            INSTALLATION_COMPLETE = 7,
            READY_FOR_ACTIVATION = 8,
            DOWNLOAD_INTERRUPTED = 9,
            INSTALL_INTERRUPTED = 10
        };
        
        eSwdlState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::IDLE)) {}
        eSwdlState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::IDLE):
                case static_cast<int32_t>(Literal::SEARCHING_FOR_UPDATE):
                case static_cast<int32_t>(Literal::DOWNLOADING_UPDATE):
                case static_cast<int32_t>(Literal::DOWNLOAD_COMPLETE):
                case static_cast<int32_t>(Literal::VALIDATION_IN_PROGRESS):
                case static_cast<int32_t>(Literal::READY_TO_INSTALL):
                case static_cast<int32_t>(Literal::INSTALLATION_IN_PROGRESS):
                case static_cast<int32_t>(Literal::INSTALLATION_COMPLETE):
                case static_cast<int32_t>(Literal::READY_FOR_ACTIVATION):
                case static_cast<int32_t>(Literal::DOWNLOAD_INTERRUPTED):
                case static_cast<int32_t>(Literal::INSTALL_INTERRUPTED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eSwdlState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eSwdlState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eSwdlState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eSwdlState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eSwdlState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eSwdlState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Software package update status.
     */
    struct tStatus : CommonAPI::Struct<eSwdlState, tErrorInfo> {
    	
    	tStatus() {
    	}
    	tStatus(const eSwdlState &_currentState, const tErrorInfo &_errorInfo)
    	{
    		std::get<0>(values_) = _currentState;
    		std::get<1>(values_) = _errorInfo;
    	}
    	/**
    	 * description: Current state to be sent.
    	 */
    	inline const eSwdlState &getCurrentState() const { return std::get<0>(values_); }
    	inline void setCurrentState(const eSwdlState &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Error information.
    	 */
    	inline const tErrorInfo &getErrorInfo() const { return std::get<1>(values_); }
    	inline void setErrorInfo(const tErrorInfo &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const tStatus& _other) const {
                return (getCurrentState() == _other.getCurrentState() && getErrorInfo() == _other.getErrorInfo());
        }
    	inline bool operator!=(const tStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Software package intallation progress.
     */
    struct tInstallProgress : CommonAPI::Struct<uint8_t, uint8_t, std::string> {
    	
    	tInstallProgress() {
    	}
    	tInstallProgress(const uint8_t &_overallProgress, const uint8_t &_currModuleProgress, const std::string &_currModuleName)
    	{
    		std::get<0>(values_) = _overallProgress;
    		std::get<1>(values_) = _currModuleProgress;
    		std::get<2>(values_) = _currModuleName;
    	}
    	/**
    	 * description: This gives the overall progress percentage of the package install.
    	 */
    	inline const uint8_t &getOverallProgress() const { return std::get<0>(values_); }
    	inline void setOverallProgress(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Progress percentage of the current module installations.
    	 */
    	inline const uint8_t &getCurrModuleProgress() const { return std::get<1>(values_); }
    	inline void setCurrModuleProgress(const uint8_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Module name of the current software module being installed.
    	 */
    	inline const std::string &getCurrModuleName() const { return std::get<2>(values_); }
    	inline void setCurrModuleName(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const tInstallProgress& _other) const {
                return (getOverallProgress() == _other.getOverallProgress() && getCurrModuleProgress() == _other.getCurrModuleProgress() && getCurrModuleName() == _other.getCurrModuleName());
        }
    	inline bool operator!=(const tInstallProgress &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Software package download progress. Copying of the packages from the source to
     *   the target.
                           E.g., From OTA server/USB storage to the
     *   target cache location.
     */
    struct tDownloadProgress : CommonAPI::Struct<uint8_t, uint8_t, std::string> {
    	
    	tDownloadProgress() {
    	}
    	tDownloadProgress(const uint8_t &_overallProgress, const uint8_t &_currModuleProgress, const std::string &_currModuleName)
    	{
    		std::get<0>(values_) = _overallProgress;
    		std::get<1>(values_) = _currModuleProgress;
    		std::get<2>(values_) = _currModuleName;
    	}
    	/**
    	 * description: This gives the overall progress percentage of the update being downloaded.
    	 */
    	inline const uint8_t &getOverallProgress() const { return std::get<0>(values_); }
    	inline void setOverallProgress(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: This gives the progress percentage of the module currently under download.
    	 */
    	inline const uint8_t &getCurrModuleProgress() const { return std::get<1>(values_); }
    	inline void setCurrModuleProgress(const uint8_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Name of the current software module being downloaded.
    	 */
    	inline const std::string &getCurrModuleName() const { return std::get<2>(values_); }
    	inline void setCurrModuleName(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const tDownloadProgress& _other) const {
                return (getOverallProgress() == _other.getOverallProgress() && getCurrModuleProgress() == _other.getCurrModuleProgress() && getCurrModuleName() == _other.getCurrModuleName());
        }
    	inline bool operator!=(const tDownloadProgress &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.swdl.SoftwareUpdateTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct SoftwareUpdateTypes

} // namespace swdl
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for eUpdateSource
    template<>
    struct hash<::v1::com::harman::swdl::SoftwareUpdateTypes::eUpdateSource> {
        inline size_t operator()(const ::v1::com::harman::swdl::SoftwareUpdateTypes::eUpdateSource& eUpdateSource) const {
            return static_cast<int32_t>(eUpdateSource);
        }
    };
    //Hash for eActivationStatus
    template<>
    struct hash<::v1::com::harman::swdl::SoftwareUpdateTypes::eActivationStatus> {
        inline size_t operator()(const ::v1::com::harman::swdl::SoftwareUpdateTypes::eActivationStatus& eActivationStatus) const {
            return static_cast<int32_t>(eActivationStatus);
        }
    };
    //Hash for eUpdateAvailability
    template<>
    struct hash<::v1::com::harman::swdl::SoftwareUpdateTypes::eUpdateAvailability> {
        inline size_t operator()(const ::v1::com::harman::swdl::SoftwareUpdateTypes::eUpdateAvailability& eUpdateAvailability) const {
            return static_cast<int32_t>(eUpdateAvailability);
        }
    };
    //Hash for eRequestDownload
    template<>
    struct hash<::v1::com::harman::swdl::SoftwareUpdateTypes::eRequestDownload> {
        inline size_t operator()(const ::v1::com::harman::swdl::SoftwareUpdateTypes::eRequestDownload& eRequestDownload) const {
            return static_cast<int32_t>(eRequestDownload);
        }
    };
    //Hash for eRequestInstall
    template<>
    struct hash<::v1::com::harman::swdl::SoftwareUpdateTypes::eRequestInstall> {
        inline size_t operator()(const ::v1::com::harman::swdl::SoftwareUpdateTypes::eRequestInstall& eRequestInstall) const {
            return static_cast<int32_t>(eRequestInstall);
        }
    };
    //Hash for eMethodResult
    template<>
    struct hash<::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult> {
        inline size_t operator()(const ::v1::com::harman::swdl::SoftwareUpdateTypes::eMethodResult& eMethodResult) const {
            return static_cast<int32_t>(eMethodResult);
        }
    };
    //Hash for eErrorCode
    template<>
    struct hash<::v1::com::harman::swdl::SoftwareUpdateTypes::eErrorCode> {
        inline size_t operator()(const ::v1::com::harman::swdl::SoftwareUpdateTypes::eErrorCode& eErrorCode) const {
            return static_cast<int32_t>(eErrorCode);
        }
    };
    //Hash for eSwdlState
    template<>
    struct hash<::v1::com::harman::swdl::SoftwareUpdateTypes::eSwdlState> {
        inline size_t operator()(const ::v1::com::harman::swdl::SoftwareUpdateTypes::eSwdlState& eSwdlState) const {
            return static_cast<int32_t>(eSwdlState);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_SWDL_Software_Update_Types_HPP_
