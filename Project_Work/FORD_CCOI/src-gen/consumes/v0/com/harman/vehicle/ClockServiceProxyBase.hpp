/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COM_HARMAN_VEHICLE_Clock_Service_PROXY_BASE_HPP_
#define V0_COM_HARMAN_VEHICLE_Clock_Service_PROXY_BASE_HPP_

#include <v0/com/harman/vehicle/ClockService.hpp>


#include <v1/com/harman/vehicle/ClockType.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace vehicle {

class ClockServiceProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<bool> DisplayTimeLeadingZeroAttribute;
    typedef CommonAPI::Event<
        ::v1::com::harman::vehicle::ClockType::StrClockMsgData
    > ClockData_NtfyEvent;
    typedef CommonAPI::Event<
    > CANUnavailability_NtfyEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::vehicle::ClockType::EGenericResp&)> SetTime_ReqAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::vehicle::ClockType::EGenericResp&)> SetTimeFormat_ReqAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::vehicle::ClockType::EGenericResp&)> SyncClockWithGPS_ReqAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::vehicle::ClockType::StrClockMsgData&, const ::v1::com::harman::vehicle::ClockType::EGenericResp&)> GetClockData_ReqAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int16_t&)> GetUserOffSet_ReqAsyncCallback;

    /**
     * description: Provides  clock Time format  information to HMI ,whaether to show the time with
     *   leading zero or without leading zero in single didgit hour/minute
     */
    virtual DisplayTimeLeadingZeroAttribute& getDisplayTimeLeadingZeroAttribute() = 0;

    virtual ClockData_NtfyEvent& getClockData_NtfyEvent() = 0;
    virtual CANUnavailability_NtfyEvent& getCANUnavailability_NtfyEvent() = 0;

    virtual void SetTime_Req(const ::v1::com::harman::vehicle::ClockType::StrTimeDataMsg &_p_stTimeDataMsg, const ::v1::com::harman::vehicle::ClockType::ESetType &_p_eSetType, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::ClockType::EGenericResp &_p_eGenResp, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetTime_ReqAsync(const ::v1::com::harman::vehicle::ClockType::StrTimeDataMsg &_p_stTimeDataMsg, const ::v1::com::harman::vehicle::ClockType::ESetType &_p_eSetType, SetTime_ReqAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void SetTimeFormat_Req(const ::v1::com::harman::vehicle::ClockType::ETimeForamt &_p_eTimeFormat, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::ClockType::EGenericResp &_p_eGenericResp, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetTimeFormat_ReqAsync(const ::v1::com::harman::vehicle::ClockType::ETimeForamt &_p_eTimeFormat, SetTimeFormat_ReqAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void SyncClockWithGPS_Req(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::ClockType::EGenericResp &_p_eGenericResp, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SyncClockWithGPS_ReqAsync(SyncClockWithGPS_ReqAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void GetClockData_Req(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::ClockType::StrClockMsgData &_p_pstClockMsgData, ::v1::com::harman::vehicle::ClockType::EGenericResp &_p_eGenericResp, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetClockData_ReqAsync(GetClockData_ReqAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void GetUserOffSet_Req(CommonAPI::CallStatus &_internalCallStatus, int16_t &_p_u8UserOffSetMin, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetUserOffSet_ReqAsync(GetUserOffSet_ReqAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace vehicle
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_VEHICLE_Clock_Service_PROXY_BASE_HPP_
