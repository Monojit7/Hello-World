/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: Vehicle Settings interface for Master Reset functionality.
 * author: Yogesh Sharma
 */
#ifndef V0_COM_HARMAN_VEHICLE_Master_Reset_PROXY_HPP_
#define V0_COM_HARMAN_VEHICLE_Master_Reset_PROXY_HPP_

#include <v0/com/harman/vehicle/MasterResetProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace vehicle {

template <typename ... _AttributeExtensions>
class MasterResetProxy
    : virtual public MasterReset, 
      virtual public MasterResetProxyBase,
      virtual public _AttributeExtensions... {
public:
    MasterResetProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~MasterResetProxy();

    typedef MasterReset InterfaceType;



    /**
     * description: Notification for factory reset to PresCtrls. All PresCtrls and interested
     *   components should listen to this notification.
    	                   On
     *   receiving the notification, they must start their reset procedure and clear
     *   the persistencies
     */
    /**
     * Returns the wrapper class that provides access to the broadcast FactoryResetNotification.
     */
    virtual FactoryResetNotificationEvent& getFactoryResetNotificationEvent() {
        return delegate_->getFactoryResetNotificationEvent();
    }
    /**
     * description: Response to HMI for the Factory Reset request. Once all the components returns
     *   to VehicleSettings or timedout, VehicleSettings
    					   Would inform the HMI
     *   about the status of reset to HMI using the API
     */
    /**
     * Returns the wrapper class that provides access to the broadcast FactoryResetRequestResponse.
     */
    virtual FactoryResetRequestResponseEvent& getFactoryResetRequestResponseEvent() {
        return delegate_->getFactoryResetRequestResponseEvent();
    }

    /**
     * description: HMI triggers the signal to VehicleSettings to start factory reset
     *   procedure.
    					   VehicleSettings then inform other PresCtrls to reset
     *   factory defauls using broadcast FactoryResetNotification
     * Calls FactoryResetRequest with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void FactoryResetRequest(const ::v1::com::harman::vehicle::ResetType::eFactoryResetParams &_requestCode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls FactoryResetRequest with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> FactoryResetRequestAsync(const ::v1::com::harman::vehicle::ResetType::eFactoryResetParams &_requestCode, FactoryResetRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Factory Reset Status from PresCtrls to VehicleSettings to inform the status of
     *   the FactoryReset.
    					   VehicleSetings would track the return status of all
     *   the components.
    					   In case some component doesn't come back with in
     *   pre-defined time, VehicleSettings would continue with the reset.
    					   This
     *   is just for VehicleSettings internal bookkeeping purpose. Also would be used
     *   to fine tune the timeout time.
     * Calls FactoryResetStatus with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void FactoryResetStatus(const ::v1::com::harman::vehicle::ResetType::eModuleID &_moduleID, const ::v1::com::harman::vehicle::ResetType::eFactoryResetStatus &_resetStatus, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls FactoryResetStatus with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> FactoryResetStatusAsync(const ::v1::com::harman::vehicle::ResetType::eModuleID &_moduleID, const ::v1::com::harman::vehicle::ResetType::eFactoryResetStatus &_resetStatus, FactoryResetStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Restart request from HMI to VehicleSettings. HMI could show some warning
     *   message to user and once user confirms,
    	                   send the restart
     *   request to VehicleSettings which in turn informs NSM for restart.
     * Calls requestRestart with synchronous semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestRestart(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestRestart with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestRestartAsync(RequestRestartAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<MasterResetProxyBase> delegate_;
};

typedef MasterResetProxy<> MasterResetProxyDefault;


//
// MasterResetProxy Implementation
//
template <typename ... _AttributeExtensions>
MasterResetProxy<_AttributeExtensions...>::MasterResetProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<MasterResetProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<MasterResetProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
MasterResetProxy<_AttributeExtensions...>::~MasterResetProxy() {
}

/**
 * description: HMI triggers the signal to VehicleSettings to start factory reset
 *   procedure.
					   VehicleSettings then inform other PresCtrls to reset
 *   factory defauls using broadcast FactoryResetNotification
 */
template <typename ... _AttributeExtensions>
void MasterResetProxy<_AttributeExtensions...>::FactoryResetRequest(const ::v1::com::harman::vehicle::ResetType::eFactoryResetParams &_requestCode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_requestCode.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->FactoryResetRequest(_requestCode, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MasterResetProxy<_AttributeExtensions...>::FactoryResetRequestAsync(const ::v1::com::harman::vehicle::ResetType::eFactoryResetParams &_requestCode, FactoryResetRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_requestCode.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->FactoryResetRequestAsync(_requestCode, _callback, _info);
}
/**
 * description: Factory Reset Status from PresCtrls to VehicleSettings to inform the status of
 *   the FactoryReset.
					   VehicleSetings would track the return status of all
 *   the components.
					   In case some component doesn't come back with in
 *   pre-defined time, VehicleSettings would continue with the reset.
					   This
 *   is just for VehicleSettings internal bookkeeping purpose. Also would be used
 *   to fine tune the timeout time.
 */
template <typename ... _AttributeExtensions>
void MasterResetProxy<_AttributeExtensions...>::FactoryResetStatus(const ::v1::com::harman::vehicle::ResetType::eModuleID &_moduleID, const ::v1::com::harman::vehicle::ResetType::eFactoryResetStatus &_resetStatus, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_moduleID.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    if (!_resetStatus.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->FactoryResetStatus(_moduleID, _resetStatus, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MasterResetProxy<_AttributeExtensions...>::FactoryResetStatusAsync(const ::v1::com::harman::vehicle::ResetType::eModuleID &_moduleID, const ::v1::com::harman::vehicle::ResetType::eFactoryResetStatus &_resetStatus, FactoryResetStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_moduleID.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    if (!_resetStatus.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->FactoryResetStatusAsync(_moduleID, _resetStatus, _callback, _info);
}
/**
 * description: Restart request from HMI to VehicleSettings. HMI could show some warning
 *   message to user and once user confirms,
	                   send the restart
 *   request to VehicleSettings which in turn informs NSM for restart.
 */
template <typename ... _AttributeExtensions>
void MasterResetProxy<_AttributeExtensions...>::requestRestart(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->requestRestart(_internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MasterResetProxy<_AttributeExtensions...>::requestRestartAsync(RequestRestartAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestRestartAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &MasterResetProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool MasterResetProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool MasterResetProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& MasterResetProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& MasterResetProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace vehicle
} // namespace harman
} // namespace com
} // namespace v0



// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_VEHICLE_Master_Reset_PROXY_HPP_
