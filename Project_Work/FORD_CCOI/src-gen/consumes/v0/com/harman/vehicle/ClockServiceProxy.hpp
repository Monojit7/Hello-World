/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COM_HARMAN_VEHICLE_Clock_Service_PROXY_HPP_
#define V0_COM_HARMAN_VEHICLE_Clock_Service_PROXY_HPP_

#include <v0/com/harman/vehicle/ClockServiceProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace vehicle {

template <typename ... _AttributeExtensions>
class ClockServiceProxy
    : virtual public ClockService, 
      virtual public ClockServiceProxyBase,
      virtual public _AttributeExtensions... {
public:
    ClockServiceProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~ClockServiceProxy();

    typedef ClockService InterfaceType;


    /**
     * description: Provides  clock Time format  information to HMI ,whaether to show the time with
     *   leading zero or without leading zero in single didgit hour/minute
     */
    /**
     * Returns the wrapper class that provides access to the attribute DisplayTimeLeadingZero.
     */
    virtual DisplayTimeLeadingZeroAttribute& getDisplayTimeLeadingZeroAttribute() {
        return delegate_->getDisplayTimeLeadingZeroAttribute();
    }

    /**
     * Returns the wrapper class that provides access to the broadcast ClockData_Ntfy.
     */
    virtual ClockData_NtfyEvent& getClockData_NtfyEvent() {
        return delegate_->getClockData_NtfyEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast CANUnavailability_Ntfy.
     */
    virtual CANUnavailability_NtfyEvent& getCANUnavailability_NtfyEvent() {
        return delegate_->getCANUnavailability_NtfyEvent();
    }

    /**
     * Calls SetTime_Req with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SetTime_Req(const ::v1::com::harman::vehicle::ClockType::StrTimeDataMsg &_p_stTimeDataMsg, const ::v1::com::harman::vehicle::ClockType::ESetType &_p_eSetType, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::ClockType::EGenericResp &_p_eGenResp, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SetTime_Req with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SetTime_ReqAsync(const ::v1::com::harman::vehicle::ClockType::StrTimeDataMsg &_p_stTimeDataMsg, const ::v1::com::harman::vehicle::ClockType::ESetType &_p_eSetType, SetTime_ReqAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SetTimeFormat_Req with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SetTimeFormat_Req(const ::v1::com::harman::vehicle::ClockType::ETimeForamt &_p_eTimeFormat, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::ClockType::EGenericResp &_p_eGenericResp, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SetTimeFormat_Req with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SetTimeFormat_ReqAsync(const ::v1::com::harman::vehicle::ClockType::ETimeForamt &_p_eTimeFormat, SetTimeFormat_ReqAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SyncClockWithGPS_Req with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SyncClockWithGPS_Req(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::ClockType::EGenericResp &_p_eGenericResp, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SyncClockWithGPS_Req with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SyncClockWithGPS_ReqAsync(SyncClockWithGPS_ReqAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetClockData_Req with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetClockData_Req(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::ClockType::StrClockMsgData &_p_pstClockMsgData, ::v1::com::harman::vehicle::ClockType::EGenericResp &_p_eGenericResp, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetClockData_Req with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetClockData_ReqAsync(GetClockData_ReqAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetUserOffSet_Req with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetUserOffSet_Req(CommonAPI::CallStatus &_internalCallStatus, int16_t &_p_u8UserOffSetMin, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetUserOffSet_Req with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetUserOffSet_ReqAsync(GetUserOffSet_ReqAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<ClockServiceProxyBase> delegate_;
};

typedef ClockServiceProxy<> ClockServiceProxyDefault;

namespace ClockServiceExtensions {
    /**
     * description: Provides  clock Time format  information to HMI ,whaether to show the time with
     *   leading zero or without leading zero in single didgit hour/minute
     */
    template <template <typename > class _ExtensionType>
    class DisplayTimeLeadingZeroAttributeExtension {
     public:
        typedef _ExtensionType<ClockServiceProxyBase::DisplayTimeLeadingZeroAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ClockServiceProxyBase::DisplayTimeLeadingZeroAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DisplayTimeLeadingZeroAttributeExtension() {}
    #endif
    
        DisplayTimeLeadingZeroAttributeExtension(ClockServiceProxyBase& proxy): attributeExtension_(proxy.getDisplayTimeLeadingZeroAttribute()) {
        }
    
        inline extension_type& getDisplayTimeLeadingZeroAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace ClockServiceExtensions

//
// ClockServiceProxy Implementation
//
template <typename ... _AttributeExtensions>
ClockServiceProxy<_AttributeExtensions...>::ClockServiceProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<ClockServiceProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<ClockServiceProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
ClockServiceProxy<_AttributeExtensions...>::~ClockServiceProxy() {
}

template <typename ... _AttributeExtensions>
void ClockServiceProxy<_AttributeExtensions...>::SetTime_Req(const ::v1::com::harman::vehicle::ClockType::StrTimeDataMsg &_p_stTimeDataMsg, const ::v1::com::harman::vehicle::ClockType::ESetType &_p_eSetType, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::ClockType::EGenericResp &_p_eGenResp, const CommonAPI::CallInfo *_info) {
    if (!_p_eSetType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->SetTime_Req(_p_stTimeDataMsg, _p_eSetType, _internalCallStatus, _p_eGenResp, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ClockServiceProxy<_AttributeExtensions...>::SetTime_ReqAsync(const ::v1::com::harman::vehicle::ClockType::StrTimeDataMsg &_p_stTimeDataMsg, const ::v1::com::harman::vehicle::ClockType::ESetType &_p_eSetType, SetTime_ReqAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_p_eSetType.validate()) {
        ::v1::com::harman::vehicle::ClockType::EGenericResp p_eGenResp = ::v1::com::harman::vehicle::ClockType::EGenericResp::e_Failure;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, p_eGenResp);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->SetTime_ReqAsync(_p_stTimeDataMsg, _p_eSetType, _callback, _info);
}
template <typename ... _AttributeExtensions>
void ClockServiceProxy<_AttributeExtensions...>::SetTimeFormat_Req(const ::v1::com::harman::vehicle::ClockType::ETimeForamt &_p_eTimeFormat, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::ClockType::EGenericResp &_p_eGenericResp, const CommonAPI::CallInfo *_info) {
    if (!_p_eTimeFormat.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->SetTimeFormat_Req(_p_eTimeFormat, _internalCallStatus, _p_eGenericResp, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ClockServiceProxy<_AttributeExtensions...>::SetTimeFormat_ReqAsync(const ::v1::com::harman::vehicle::ClockType::ETimeForamt &_p_eTimeFormat, SetTimeFormat_ReqAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_p_eTimeFormat.validate()) {
        ::v1::com::harman::vehicle::ClockType::EGenericResp p_eGenericResp = ::v1::com::harman::vehicle::ClockType::EGenericResp::e_Failure;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, p_eGenericResp);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->SetTimeFormat_ReqAsync(_p_eTimeFormat, _callback, _info);
}
template <typename ... _AttributeExtensions>
void ClockServiceProxy<_AttributeExtensions...>::SyncClockWithGPS_Req(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::ClockType::EGenericResp &_p_eGenericResp, const CommonAPI::CallInfo *_info) {
    delegate_->SyncClockWithGPS_Req(_internalCallStatus, _p_eGenericResp, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ClockServiceProxy<_AttributeExtensions...>::SyncClockWithGPS_ReqAsync(SyncClockWithGPS_ReqAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->SyncClockWithGPS_ReqAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void ClockServiceProxy<_AttributeExtensions...>::GetClockData_Req(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::vehicle::ClockType::StrClockMsgData &_p_pstClockMsgData, ::v1::com::harman::vehicle::ClockType::EGenericResp &_p_eGenericResp, const CommonAPI::CallInfo *_info) {
    delegate_->GetClockData_Req(_internalCallStatus, _p_pstClockMsgData, _p_eGenericResp, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ClockServiceProxy<_AttributeExtensions...>::GetClockData_ReqAsync(GetClockData_ReqAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetClockData_ReqAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void ClockServiceProxy<_AttributeExtensions...>::GetUserOffSet_Req(CommonAPI::CallStatus &_internalCallStatus, int16_t &_p_u8UserOffSetMin, const CommonAPI::CallInfo *_info) {
    delegate_->GetUserOffSet_Req(_internalCallStatus, _p_u8UserOffSetMin, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ClockServiceProxy<_AttributeExtensions...>::GetUserOffSet_ReqAsync(GetUserOffSet_ReqAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetUserOffSet_ReqAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &ClockServiceProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool ClockServiceProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool ClockServiceProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& ClockServiceProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& ClockServiceProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace vehicle
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::com::harman::vehicle::ClockServiceProxy,
    _AttributeExtension> {
    typedef typename ::v0::com::harman::vehicle::ClockServiceProxy<
            ::v0::com::harman::vehicle::ClockServiceExtensions::DisplayTimeLeadingZeroAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_VEHICLE_Clock_Service_PROXY_HPP_
