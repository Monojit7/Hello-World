/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: Vehicle Settings interface for Master Reset functionality.
 * author: Yogesh Sharma
 */
#ifndef V0_COM_HARMAN_VEHICLE_Master_Reset_PROXY_BASE_HPP_
#define V0_COM_HARMAN_VEHICLE_Master_Reset_PROXY_BASE_HPP_

#include <v0/com/harman/vehicle/MasterReset.hpp>


#include <v1/com/harman/vehicle/ResetType.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace vehicle {

class MasterResetProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::v1::com::harman::vehicle::ResetType::eFactoryResetParams
    > FactoryResetNotificationEvent;
    typedef CommonAPI::Event<
        ::v1::com::harman::vehicle::ResetType::eFactoryResetStatus, ::v1::com::harman::vehicle::ResetType::eRestartRequire
    > FactoryResetRequestResponseEvent;

    typedef std::function<void(const CommonAPI::CallStatus&)> FactoryResetRequestAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> FactoryResetStatusAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> RequestRestartAsyncCallback;


    /**
     * description: Notification for factory reset to PresCtrls. All PresCtrls and interested
     *   components should listen to this notification.
    	                   On
     *   receiving the notification, they must start their reset procedure and clear
     *   the persistencies
     */
    virtual FactoryResetNotificationEvent& getFactoryResetNotificationEvent() = 0;
    /**
     * description: Response to HMI for the Factory Reset request. Once all the components returns
     *   to VehicleSettings or timedout, VehicleSettings
    					   Would inform the HMI
     *   about the status of reset to HMI using the API
     */
    virtual FactoryResetRequestResponseEvent& getFactoryResetRequestResponseEvent() = 0;

    /**
     * description: HMI triggers the signal to VehicleSettings to start factory reset
     *   procedure.
    					   VehicleSettings then inform other PresCtrls to reset
     *   factory defauls using broadcast FactoryResetNotification
     */
    virtual void FactoryResetRequest(const ::v1::com::harman::vehicle::ResetType::eFactoryResetParams &_requestCode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> FactoryResetRequestAsync(const ::v1::com::harman::vehicle::ResetType::eFactoryResetParams &_requestCode, FactoryResetRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Factory Reset Status from PresCtrls to VehicleSettings to inform the status of
     *   the FactoryReset.
    					   VehicleSetings would track the return status of all
     *   the components.
    					   In case some component doesn't come back with in
     *   pre-defined time, VehicleSettings would continue with the reset.
    					   This
     *   is just for VehicleSettings internal bookkeeping purpose. Also would be used
     *   to fine tune the timeout time.
     */
    virtual void FactoryResetStatus(const ::v1::com::harman::vehicle::ResetType::eModuleID &_moduleID, const ::v1::com::harman::vehicle::ResetType::eFactoryResetStatus &_resetStatus, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> FactoryResetStatusAsync(const ::v1::com::harman::vehicle::ResetType::eModuleID &_moduleID, const ::v1::com::harman::vehicle::ResetType::eFactoryResetStatus &_resetStatus, FactoryResetStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Restart request from HMI to VehicleSettings. HMI could show some warning
     *   message to user and once user confirms,
    	                   send the restart
     *   request to VehicleSettings which in turn informs NSM for restart.
     */
    virtual void requestRestart(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestRestartAsync(RequestRestartAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace vehicle
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_VEHICLE_Master_Reset_PROXY_BASE_HPP_
