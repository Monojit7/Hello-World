/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_ORG_HARMAN_FORD_notifalert_PROXY_HPP_
#define V0_ORG_HARMAN_FORD_notifalert_PROXY_HPP_

#include <v0/org/harman/ford/notifalertProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

template <typename ... _AttributeExtensions>
class notifalertProxy
    : virtual public notifalert, 
      virtual public notifalertProxyBase,
      virtual public _AttributeExtensions... {
public:
    notifalertProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~notifalertProxy();

    typedef notifalert InterfaceType;


    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute cCOI_PolicyClient_St_enum.
     */
    virtual CCOI_PolicyClient_St_enumAttribute& getCCOI_PolicyClient_St_enumAttribute() {
        return delegate_->getCCOI_PolicyClient_St_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute aHU_Chime_Not_Recgnizd_enum.
     */
    virtual AHU_Chime_Not_Recgnizd_enumAttribute& getAHU_Chime_Not_Recgnizd_enumAttribute() {
        return delegate_->getAHU_Chime_Not_Recgnizd_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute aHU_Chime2_Not_Recgnizd_enum.
     */
    virtual AHU_Chime2_Not_Recgnizd_enumAttribute& getAHU_Chime2_Not_Recgnizd_enumAttribute() {
        return delegate_->getAHU_Chime2_Not_Recgnizd_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute aHU_Chime_Supported_enum.
     */
    virtual AHU_Chime_Supported_enumAttribute& getAHU_Chime_Supported_enumAttribute() {
        return delegate_->getAHU_Chime_Supported_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute aHU_Chime_Active_enum.
     */
    virtual AHU_Chime_Active_enumAttribute& getAHU_Chime_Active_enumAttribute() {
        return delegate_->getAHU_Chime_Active_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute aHU_Chime2_Active_enum.
     */
    virtual AHU_Chime2_Active_enumAttribute& getAHU_Chime2_Active_enumAttribute() {
        return delegate_->getAHU_Chime2_Active_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute cDWarnChime_St_enum.
     */
    virtual CDWarnChime_St_enumAttribute& getCDWarnChime_St_enumAttribute() {
        return delegate_->getCDWarnChime_St_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute cDWarnChime_Rq_enum.
     */
    virtual CDWarnChime_Rq_enumAttribute& getCDWarnChime_Rq_enumAttribute() {
        return delegate_->getCDWarnChime_Rq_enumAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute IPC_Chime.
     */
    virtual IPC_ChimeAttribute& getIPC_ChimeAttribute() {
        return delegate_->getIPC_ChimeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute IPC_Chime2.
     */
    virtual IPC_Chime2Attribute& getIPC_Chime2Attribute() {
        return delegate_->getIPC_Chime2Attribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute gWM_Send_Signals_8_HS3_sig_4.
     */
    virtual GWM_Send_Signals_8_HS3_sig_4Attribute& getGWM_Send_Signals_8_HS3_sig_4Attribute() {
        return delegate_->getGWM_Send_Signals_8_HS3_sig_4Attribute();
    }




    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<notifalertProxyBase> delegate_;
};

typedef notifalertProxy<> notifalertProxyDefault;

namespace notifalertExtensions {
    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class CCOI_PolicyClient_St_enumAttributeExtension {
     public:
        typedef _ExtensionType<notifalertProxyBase::CCOI_PolicyClient_St_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<notifalertProxyBase::CCOI_PolicyClient_St_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CCOI_PolicyClient_St_enumAttributeExtension() {}
    #endif
    
        CCOI_PolicyClient_St_enumAttributeExtension(notifalertProxyBase& proxy): attributeExtension_(proxy.getCCOI_PolicyClient_St_enumAttribute()) {
        }
    
        inline extension_type& getCCOI_PolicyClient_St_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class AHU_Chime_Not_Recgnizd_enumAttributeExtension {
     public:
        typedef _ExtensionType<notifalertProxyBase::AHU_Chime_Not_Recgnizd_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<notifalertProxyBase::AHU_Chime_Not_Recgnizd_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        AHU_Chime_Not_Recgnizd_enumAttributeExtension() {}
    #endif
    
        AHU_Chime_Not_Recgnizd_enumAttributeExtension(notifalertProxyBase& proxy): attributeExtension_(proxy.getAHU_Chime_Not_Recgnizd_enumAttribute()) {
        }
    
        inline extension_type& getAHU_Chime_Not_Recgnizd_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class AHU_Chime2_Not_Recgnizd_enumAttributeExtension {
     public:
        typedef _ExtensionType<notifalertProxyBase::AHU_Chime2_Not_Recgnizd_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<notifalertProxyBase::AHU_Chime2_Not_Recgnizd_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        AHU_Chime2_Not_Recgnizd_enumAttributeExtension() {}
    #endif
    
        AHU_Chime2_Not_Recgnizd_enumAttributeExtension(notifalertProxyBase& proxy): attributeExtension_(proxy.getAHU_Chime2_Not_Recgnizd_enumAttribute()) {
        }
    
        inline extension_type& getAHU_Chime2_Not_Recgnizd_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class AHU_Chime_Supported_enumAttributeExtension {
     public:
        typedef _ExtensionType<notifalertProxyBase::AHU_Chime_Supported_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<notifalertProxyBase::AHU_Chime_Supported_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        AHU_Chime_Supported_enumAttributeExtension() {}
    #endif
    
        AHU_Chime_Supported_enumAttributeExtension(notifalertProxyBase& proxy): attributeExtension_(proxy.getAHU_Chime_Supported_enumAttribute()) {
        }
    
        inline extension_type& getAHU_Chime_Supported_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class AHU_Chime_Active_enumAttributeExtension {
     public:
        typedef _ExtensionType<notifalertProxyBase::AHU_Chime_Active_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<notifalertProxyBase::AHU_Chime_Active_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        AHU_Chime_Active_enumAttributeExtension() {}
    #endif
    
        AHU_Chime_Active_enumAttributeExtension(notifalertProxyBase& proxy): attributeExtension_(proxy.getAHU_Chime_Active_enumAttribute()) {
        }
    
        inline extension_type& getAHU_Chime_Active_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class AHU_Chime2_Active_enumAttributeExtension {
     public:
        typedef _ExtensionType<notifalertProxyBase::AHU_Chime2_Active_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<notifalertProxyBase::AHU_Chime2_Active_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        AHU_Chime2_Active_enumAttributeExtension() {}
    #endif
    
        AHU_Chime2_Active_enumAttributeExtension(notifalertProxyBase& proxy): attributeExtension_(proxy.getAHU_Chime2_Active_enumAttribute()) {
        }
    
        inline extension_type& getAHU_Chime2_Active_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class CDWarnChime_St_enumAttributeExtension {
     public:
        typedef _ExtensionType<notifalertProxyBase::CDWarnChime_St_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<notifalertProxyBase::CDWarnChime_St_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CDWarnChime_St_enumAttributeExtension() {}
    #endif
    
        CDWarnChime_St_enumAttributeExtension(notifalertProxyBase& proxy): attributeExtension_(proxy.getCDWarnChime_St_enumAttribute()) {
        }
    
        inline extension_type& getCDWarnChime_St_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class CDWarnChime_Rq_enumAttributeExtension {
     public:
        typedef _ExtensionType<notifalertProxyBase::CDWarnChime_Rq_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<notifalertProxyBase::CDWarnChime_Rq_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CDWarnChime_Rq_enumAttributeExtension() {}
    #endif
    
        CDWarnChime_Rq_enumAttributeExtension(notifalertProxyBase& proxy): attributeExtension_(proxy.getCDWarnChime_Rq_enumAttribute()) {
        }
    
        inline extension_type& getCDWarnChime_Rq_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class IPC_ChimeAttributeExtension {
     public:
        typedef _ExtensionType<notifalertProxyBase::IPC_ChimeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<notifalertProxyBase::IPC_ChimeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        IPC_ChimeAttributeExtension() {}
    #endif
    
        IPC_ChimeAttributeExtension(notifalertProxyBase& proxy): attributeExtension_(proxy.getIPC_ChimeAttribute()) {
        }
    
        inline extension_type& getIPC_ChimeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class IPC_Chime2AttributeExtension {
     public:
        typedef _ExtensionType<notifalertProxyBase::IPC_Chime2Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<notifalertProxyBase::IPC_Chime2Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        IPC_Chime2AttributeExtension() {}
    #endif
    
        IPC_Chime2AttributeExtension(notifalertProxyBase& proxy): attributeExtension_(proxy.getIPC_Chime2Attribute()) {
        }
    
        inline extension_type& getIPC_Chime2AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class GWM_Send_Signals_8_HS3_sig_4AttributeExtension {
     public:
        typedef _ExtensionType<notifalertProxyBase::GWM_Send_Signals_8_HS3_sig_4Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<notifalertProxyBase::GWM_Send_Signals_8_HS3_sig_4Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        GWM_Send_Signals_8_HS3_sig_4AttributeExtension() {}
    #endif
    
        GWM_Send_Signals_8_HS3_sig_4AttributeExtension(notifalertProxyBase& proxy): attributeExtension_(proxy.getGWM_Send_Signals_8_HS3_sig_4Attribute()) {
        }
    
        inline extension_type& getGWM_Send_Signals_8_HS3_sig_4AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace notifalertExtensions

//
// notifalertProxy Implementation
//
template <typename ... _AttributeExtensions>
notifalertProxy<_AttributeExtensions...>::notifalertProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<notifalertProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<notifalertProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
notifalertProxy<_AttributeExtensions...>::~notifalertProxy() {
}


template <typename ... _AttributeExtensions>
const CommonAPI::Address &notifalertProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool notifalertProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool notifalertProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& notifalertProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& notifalertProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::org::harman::ford::notifalertProxy,
    _AttributeExtension> {
    typedef typename ::v0::org::harman::ford::notifalertProxy<
            ::v0::org::harman::ford::notifalertExtensions::CCOI_PolicyClient_St_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::notifalertExtensions::AHU_Chime_Not_Recgnizd_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::notifalertExtensions::AHU_Chime2_Not_Recgnizd_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::notifalertExtensions::AHU_Chime_Supported_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::notifalertExtensions::AHU_Chime_Active_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::notifalertExtensions::AHU_Chime2_Active_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::notifalertExtensions::CDWarnChime_St_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::notifalertExtensions::CDWarnChime_Rq_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::notifalertExtensions::IPC_ChimeAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::notifalertExtensions::IPC_Chime2AttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::notifalertExtensions::GWM_Send_Signals_8_HS3_sig_4AttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_notifalert_PROXY_HPP_
