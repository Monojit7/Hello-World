/**
 * generated by Voice CodeGen Version: R1_v1.3.0
 * generated on: Tue Feb 21 15:08:42 IST 2017
 */

#include <sys/stat.h>
#include <thread>
#include <unistd.h>
#include <CommonAPI/CommonAPI.hpp>
#include <SysetIds.h>
#include <fstream>
#include <cstdlib>
#include <string>
#include <persistence_client_library_file.h>
#include <persistence_client_library_key.h>
#include <persistence_client_library.h>

#include "provides/v2/com/harman/voice/CCOIPresCtrlStubImpl.hpp"
#include "CCOIManager.hpp"
#include "CCOIPersist.hpp"
#include "CCOIMegaTP.hpp"
#include "HmiInterfaces.hpp"
#include "CCOIException.hpp"
#include "CCOILog.hpp"

// update this version on every master merge request
#define OUR_VERSION             ( "4.0.0" )

#define CCOI_DB_ID               ( PCL_LDBID_LOCAL )
#define CCOI_APP_NAME           ( "CCOI" )
#define CCOI_USER_NUM           ( 104729 )  // 10000th prime number just to be sure no one would have used it.
#define CCOI_SEAT_NUM           ( 7919 )    // 1000th prime number just to be sure no one would have used it. 
#define PCL_FILE_PATH_SIZE      ( 500 )     // choose the size big enough to hold a file path name of decent filename length.

// global instance of the logger - will be used by all class/ modules in the CCOI component.
v0::com::harman::voice::CCOILog lg ;

v0::com::harman::voice::CCOITimer timer ;
shared_ptr < v2::com::harman::voice::CCOIPresCtrlStubImpl > presCtrl = nullptr ;
shared_ptr < v0::com::harman::voice::CCOIProxyManager > proxyFac     = nullptr ;

#ifdef TESTING
shared_ptr < v0::com::harman::voice::CCOIMockTcu > mockTcu ;
#endif

// global instance of megaTP
CCOIMegaTP megaTp ;

unsigned int ReadEOLFromPersistency()
{
      unsigned int user_no = 1;
      unsigned int seat_no = 1;
	  unsigned int uiEOL = 1;

      unsigned long sysSetID = ADJ_E2P_DIAG_EOL_DE00_AUDIO_CONNECTIVITY_MODULE_ID;

      char res_id[4];
      res_id[0] = (sysSetID >> 24) & 0xFF;
      res_id[1] = (sysSetID >> 16) & 0xFF;
      res_id[2] = (sysSetID >> 8) & 0xFF;
      res_id[3] = sysSetID & 0xFF;

      unsigned char buf[1] = "";

      (void)pclKeyReadData(PCL_LDBID_EOL, (const char *)res_id, user_no, seat_no, buf, ADJ_E2P_DIAG_EOL_DE00_AUDIO_CONNECTIVITY_MODULE_SIZE);

      int32_t val = buf[0];
      uiEOL = (val > 0) ? val : 0;
	  
	  return uiEOL;
}

void updateVersionFile ( void )
{
    string versionFilePath ( CCOI_ROOT_PERSISTPATH ) ;

    versionFilePath. append ( "/ccoiSoftwareVersion") ;

    ofstream versionFile ( versionFilePath. c_str () ) ;

    if ( versionFile. is_open () )
    {
        versionFile << OUR_VERSION ;
        versionFile. close () ; 
    }
    else
    {
	    lg.write ( v0::com::harman::voice::CCOILog::eLogCCOIMain, v0::com::harman::voice::CCOILog::LOG_ERROR, "%s:%d unable to open ccoiSoftwareVersion file") ;
    }
}

int main(int argc, char **argv) 
{
    // setup logger
    lg.init () ;
    
	lg.write ( v0::com::harman::voice::CCOILog::eLogCCOIMain, v0::com::harman::voice::CCOILog::LOG_INFO, "pclInitLibrary called with appName CCOI shutdown PCL_SHUTDOWN_TYPE_NORMAL\n") ;
    int pclSuccess = pclInitLibrary ( CCOI_APP_NAME, PCL_SHUTDOWN_TYPE_NORMAL ) ;

    if ( pclSuccess < 0 )
    {
	    lg.write ( v0::com::harman::voice::CCOILog::eLogCCOIMain, v0::com::harman::voice::CCOILog::LOG_ERROR, "pclInitLibrary call failed with return value %d\n", pclSuccess ) ;
    }

    // remove them if not needed, have added just for a quick look to know the log level of CCOI APP.
	lg.write ( v0::com::harman::voice::CCOILog::eLogCCOIMain, v0::com::harman::voice::CCOILog::LOG_INFO, "%s:%d LOG INFO\n", __FUNCTION__, __LINE__ ) ;
	lg.write ( v0::com::harman::voice::CCOILog::eLogCCOIMain, v0::com::harman::voice::CCOILog::LOG_DEBUG, "%s:%d LOG DEBUG\n", __FUNCTION__, __LINE__ ) ;
	lg.write ( v0::com::harman::voice::CCOILog::eLogCCOIMain, v0::com::harman::voice::CCOILog::LOG_ERROR, "%s:%d OUR_VERSION %s", __FUNCTION__, __LINE__, OUR_VERSION ) ;

    //Verify the presence of the persist path for ccoi module..
    struct stat sb;
    if((stat(CCOI_ROOT, &sb) == 0) && (S_ISDIR(sb.st_mode)))
    {
        lg.write ( v0::com::harman::voice::CCOILog::eLogCCOIMain, v0::com::harman::voice::CCOILog::LOG_INFO, "CCOIPresCtrl:directory exists\n" ) ;
    }
    else
    {
        lg.write ( v0::com::harman::voice::CCOILog::eLogCCOIMain, v0::com::harman::voice::CCOILog::LOG_INFO, "directory  don't exists... creating now\n" ) ;

        mkdir(CCOI_ROOT, 0777);
        mkdir(CCOI_ROOT_PERSISTPATH, 0777);
    }
    
    // update the current version of CCOI module software to persistant
    updateVersionFile () ;

	CommonAPI::Runtime::setProperty("LogContext", "CCOIPresCtrl");
	CommonAPI::Runtime::setProperty("LibraryBase", "CCOIPresCtrl");

 	/*
	 * create the runtime
	 */
	std::shared_ptr<CommonAPI::Runtime> runtime = CommonAPI::Runtime::get();
	if(!runtime)
	{
		// Error: could not load runtime
		return 1;
	}

    // create our instance which others call for data related to CustomerOptIn
    std::string domain = "local";
    std::string connection = "CCOIPresCtrl";
    std::string instance = "CCOIPresCtrl.CCOIPresCtrlSrvInst";

    presCtrl = std::make_shared < v2::com::harman::voice::CCOIPresCtrlStubImpl > ( );
    runtime->registerService(domain, instance, presCtrl, connection);
        
    // instance of ccoimgr
    v0::com::harman::voice::CCOIManager ccoimgr ;
        
    // create proxy instance first 
    proxyFac = make_shared < v0::com::harman::voice::CCOIProxyManager > ( ) ;
    proxyFac-> pccoi = &ccoimgr ;
    proxyFac-> getAllProxies () ;

    presCtrl-> pccoi = &ccoimgr ;
    presCtrl-> loadEntities () ;
    
    try
    {
#ifdef TESTING
        mockTcu = maked_shared < v0::com::harman::voice::CCOIMockTcu > ( ) ;
#endif
        // CCOI Mega Tp initialization
        megaTp. init ();
        megaTp. pccoi = &ccoimgr ;

    }
    catch ( v0::com::harman::voice::CCOIException &e )
    {
		lg.write ( v0::com::harman::voice::CCOILog::eLogCCOIMain, v0::com::harman::voice::CCOILog::LOG_ERROR, "%s", e.what () ) ;
    }

    while (true) 
    {
		lg.write ( v0::com::harman::voice::CCOILog::eLogCCOIMain, v0::com::harman::voice::CCOILog::LOG_DEBUG, "Waiting for calls... (Abort with CTRL+C)\n" ) ;
        std::this_thread::sleep_for(std::chrono::seconds(60));
    }
    return 0;
}
