/**
 * generated by Voice CodeGen Version: R1_v1.3.0
 * generated on: Mon Feb 27 15:02:49 IST 2017
 */

#ifndef V2_COM_HARMAN_VOICE_CCOIPRESCTRLSTUBIMPL_HPP
#define V2_COM_HARMAN_VOICE_CCOIPRESCTRLSTUBIMPL_HPP

#include <sys/types.h>
#include <dirent.h>
#include <errno.h>
#include <vector>
#include <string>
#include <iostream>
#include <sys/stat.h>
#include <unordered_map>
#include <algorithm>

#include <CommonAPI/CommonAPI.hpp>
#include "v2/com/harman/voice/CCOIPresCtrlStubDefault.hpp"
#include "v2/com/harman/voice/CCOIPresCtrl.hpp"
#include "Persistpath.hpp"
#include "EntityElement.hpp"
#include "CCOIMessagesUtil.hpp"
#include "CCOIManager.hpp"
#include "CCOIButton.hpp"
#include "CCOIUserPromptScreenData.hpp"
#include "CCOILog.hpp"
#include "CCOIException.hpp"

#define NO_UPDATE                           ( -1 )
#define NUM_ENTITY_FLAGS                    (  4 )

using namespace std ;
using namespace v0::com::harman::voice ;

namespace v2 {
    namespace com {
        namespace harman {
            namespace voice {

// typedefs
typedef shared_ptr < CCOIButton > CCOIButtonPtr ;
typedef shared_ptr < CCOIMenuButton > CCOIMenuButtonPtr ;
typedef pair < CCOIMenuButtonPtr, CCOIButtonPtr > settingsMenuEntry ;

class CCOIPresCtrlStubImpl : public v2::com::harman::voice::CCOIPresCtrlStubDefault
{
    
private:
    
    void    populateHMIData ( CCOIPresCtrl::entity &menu ) ;
    
    // contains data of the settings items data   - user sees this pair of menu item besides info button with the value of it corresponding to the menu item.
    vector < settingsMenuEntry >  settingMenuEntries_ ;
   
    // gives back the < visible, enable, toggleOnOffStatus > triplet based on the entity flags contents < bPAllow, bFPOnOff, bSAllow > triplet
    int     computeVESFlag ( Entity &entity, bool &bUAllowOnOff ) ;
    bool    computeAllowOnOFF ( shared_ptr < EntityElement > &entity, bool &bSAllowOnOff ) ;

    // Gives the instance of the button from the list of buttons (of settingsMenuEntry list) corresponding to the ButtonID
    bool    getMenuButton ( const string &name, settingsMenuEntry &button ) ;

    // returns the icon type based on the icon PNG file name sent as parameter
    int     getIconType ( const string &name ) ;
    
    // returns true if we need to pick the softwareDownload message text for the repective menuButton or not.
    bool    packageDownloadMsg ( const CCOIMenuButton &menu ) ;
    
    // updates Location status for the clients
    void    updateLocationStatus ( ) ;

    string  getSyncPopupMessage ( CCOIPresCtrl::SyncStatus status ) ;

public:     // sync & HMI callback functions - all static as we would have only one copy/ instance of them.
    
    // synchronization status, based on which the HMI will control pop-ups display or permission to enter into settings menu
    static  CCOIPresCtrl::syncPopupMessage syncStatus_ ;
    
    // CCoimgr or the state machine component would call this whenever the state with TCU changes.
    void    setSyncStatus ( int ccoiStsValue ) ;

    // container to hold the status map values of CCOI component to HMI understanding status values.
    static  unordered_map < int, CCOIPresCtrl::SyncStatus >   statusCCOItoHMIMap_ ;

public:
    // getters
	inline vector < settingsMenuEntry > & getButtons ()         {   return settingMenuEntries_ ;  }

    // setters
    // adds the menu element pair into the list of button.
    void    addButton ( CCOIMenuButton &menu, CCOIButton &info ) ;
    void    removeButton ( CCOIMenuButton &menu, CCOIButton &info ) { }   // not required now, may be in future.
	void    updateMenuButton ( const string &id, const string &type, int visible, int enable, int value ) ;
	
    // user choice, userprompt component calls this to inform what is the user choice in the consent prompt for this menu button
    void    userConsentResponse ( int response, const string &name ) ;

    // ccoimgr instance to send the user responses back.
    CCOIManager *pccoi ;

    // hold the entities and its flags
    EntityList entities_ ;    
    
    bool    getEntity ( const string &entityId, const string &entityType, Entity &element ) ;
    inline  EntityList& getEntities ( )                                            {   return entities_ ;  }

    bool loadEntities ( ) ;
    bool loadHMIData  ( ) ;
    bool getEntityValue ( string name, bool &bSAllowOnOff ) ;

    static unordered_map < string, pair < string, string > > entityNamesMap_ ; 
    static unordered_map < int, int >                        flagsSummaryBitMap_ ;
    static unordered_map < int, int >                        flagsVESBitMap_ ;

    void    updateLocDataShareIcon ( string icon, string iconPopup ) ;
    
    // to take of sequence of display
    bool compareMenu ( const settingsMenuEntry &x, const settingsMenuEntry &y ) const  { return ( x. first-> getSequence () < y. first-> getSequence () ) ; }

public:
	CCOIPresCtrlStubImpl () ;
	CCOIPresCtrlStubImpl ( vector < string > &files ) ;
    virtual ~CCOIPresCtrlStubImpl () ;

    virtual void SettingsEntriesUpdate(const std::shared_ptr<CommonAPI::ClientId> _client, CCOIPresCtrl::entityDetails _request, SettingsEntriesUpdateReply_t _reply) ;
    
    // get calls        - not using client param functions, to cross check.
    virtual const CCOIPresCtrl::entity&                     getResponseAttribute ( ) ;
    virtual const CCOIPresCtrl::Location&                   getLocationstsAttribute ( ) ; 
    virtual const std::vector<uint8_t>&                     getTcu_snAttribute ( ) ;
    virtual const CCOIPresCtrl::LocDataShareIconValues&     getLoc_data_icon_valAttribute ( const shared_ptr < CommonAPI::ClientId > _client ) ;
    virtual const string&                                   getInfoMessageAttribute ( const std::shared_ptr<CommonAPI::ClientId> _client ) ;
    virtual const CCOIPresCtrl::syncPopupMessage&           getSyncMessageAttribute ( ) ;

    // set calls is implemented in default stub class - see src-gen.
};

            } // voice
        } // harman
    } // com
} // v2

#endif // V2_COM_HARMAN_VOICE_CCOIPRESCTRLSTUBIMPL_HPP
