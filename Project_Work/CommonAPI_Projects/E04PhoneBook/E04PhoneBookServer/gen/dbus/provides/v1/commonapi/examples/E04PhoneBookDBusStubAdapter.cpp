/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Fri Jun 23 13:08:16 IST 2017
*/
#include <v1/commonapi/examples/E04PhoneBook.hpp>
#include <v1/commonapi/examples/E04PhoneBookDBusStubAdapter.hpp>

namespace v1 {
namespace commonapi {
namespace examples {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createE04PhoneBookDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<E04PhoneBookDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerE04PhoneBookDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	E04PhoneBook::getInterface(), &createE04PhoneBookDBusStubAdapter);
}

E04PhoneBookDBusStubAdapterInternal::~E04PhoneBookDBusStubAdapterInternal() {
    deactivateManagedInstances();
    E04PhoneBookDBusStubAdapterHelper::deinit();
}

void E04PhoneBookDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* E04PhoneBookDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"getPhoneBookAttribute\">\n"
            "<arg name=\"value\" type=\"a(sssssua{is})\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onPhoneBookAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"a(sssssua{is})\" />\n"
        "</signal>\n"
        /**
         * description: filter result
         */
        "<signal name=\"phoneBookDataSet\">\n"
            "<arg name=\"phoneBookDataSet\" type=\"aa{i(uv)}\" />\n"
        "</signal>\n"
        /**
         * description: filter operations
         */
        "<method name=\"setPhoneBookDataFilter\">\n"
            "<arg name=\"_elementFilter\" type=\"(bbbbbb)\" direction=\"in\" />\n"
            "<arg name=\"_contentFilter\" type=\"a(is)\" direction=\"in\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::commonapi::examples::E04PhoneBookStub,
        CommonAPI::Version
        > E04PhoneBookDBusStubAdapterInternal::getE04PhoneBookInterfaceVersionStubDispatcher(&E04PhoneBookStub::getInterfaceVersion, "uu");

/**
 * description: the phone book itself
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::commonapi::examples::E04PhoneBookStub,
        std::vector<::v1::commonapi::examples::E04PhoneBook::phoneBookStruct>,
        CommonAPI::DBus::ArrayDeployment<E04PhoneBook_::phoneBookStructDeployment_t>
        > E04PhoneBookDBusStubAdapterInternal::getPhoneBookAttributeStubDispatcher(
            &::v1::commonapi::examples::E04PhoneBookStub::getPhoneBookAttribute
            , "a(sssssua{is})"
            );



/**
 * description: filter operations
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::commonapi::examples::E04PhoneBookStub,
    std::tuple<E04PhoneBook::elementFilterStruct, std::vector<E04PhoneBook::contentFilterStruct>>,
    std::tuple<>,
    std::tuple<E04PhoneBook_::elementFilterStructDeployment_t, CommonAPI::DBus::ArrayDeployment<E04PhoneBook_::contentFilterStructDeployment_t>>,
    std::tuple<>
    
    > E04PhoneBookDBusStubAdapterInternal::setPhoneBookDataFilterStubDispatcher(
    &E04PhoneBookStub::setPhoneBookDataFilter, "",
					std::make_tuple(static_cast<E04PhoneBook_::elementFilterStructDeployment_t*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<E04PhoneBook_::contentFilterStructDeployment_t>*>(nullptr)),
                	std::make_tuple());


/**
 * description: the phone book itself
 */
void E04PhoneBookDBusStubAdapterInternal::firePhoneBookAttributeChanged(const std::vector<::v1::commonapi::examples::E04PhoneBook::phoneBookStruct>& value) {
    CommonAPI::Deployable<std::vector<E04PhoneBook::phoneBookStruct>, CommonAPI::DBus::ArrayDeployment<E04PhoneBook_::phoneBookStructDeployment_t>> deployedValue(value, static_cast<CommonAPI::DBus::ArrayDeployment<E04PhoneBook_::phoneBookStructDeployment_t>*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        std::vector<::v1::commonapi::examples::E04PhoneBook::phoneBookStruct>,
        CommonAPI::DBus::ArrayDeployment<E04PhoneBook_::phoneBookStructDeployment_t>
    >
    >>
        ::sendSignal(
            *this,
            "onPhoneBookAttributeChanged",
            "a(sssssua{is})",
            deployedValue
    
    );
}

/**
 * description: filter result
 */
CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ::v1::commonapi::examples::E04PhoneBookStub,
    E04PhoneBookStubAdapter,
    std::tuple<>,
    std::tuple<bool>
    > E04PhoneBookDBusStubAdapterInternal::subscribePhoneBookDataSetSelectiveStubDispatcher(&E04PhoneBookStubAdapter::subscribeForphoneBookDataSetSelective, "b");

CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ::v1::commonapi::examples::E04PhoneBookStub,
    E04PhoneBookStubAdapter,
    std::tuple<>,
    std::tuple<>
    > E04PhoneBookDBusStubAdapterInternal::unsubscribePhoneBookDataSetSelectiveStubDispatcher(&E04PhoneBookStubAdapter::unsubscribeFromphoneBookDataSetSelective, "");

void E04PhoneBookDBusStubAdapterInternal::firePhoneBookDataSetSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::vector<::v1::commonapi::examples::E04PhoneBook::phoneBookDataElementMap> &_phoneBookDataSet) {
    std::shared_ptr<CommonAPI::DBus::DBusClientId> dbusClient = std::dynamic_pointer_cast<CommonAPI::DBus::DBusClientId, CommonAPI::ClientId>(_client);

    if(dbusClient)
    {
        CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
        CommonAPI::Deployable<std::vector<::v1::commonapi::examples::E04PhoneBook::phoneBookDataElementMap>, CommonAPI::DBus::ArrayDeployment<E04PhoneBook_::phoneBookDataElementMapDeployment_t>>
        >>::sendSignal(
                dbusClient->getDBusId(),
                *this,
                "phoneBookDataSet",
                "aa{i(uv)}",
        CommonAPI::Deployable<std::vector<::v1::commonapi::examples::E04PhoneBook::phoneBookDataElementMap>, CommonAPI::DBus::ArrayDeployment<E04PhoneBook_::phoneBookDataElementMapDeployment_t>>(_phoneBookDataSet, static_cast<CommonAPI::DBus::ArrayDeployment<E04PhoneBook_::phoneBookDataElementMapDeployment_t>*>(nullptr))
        );
    }
}

void E04PhoneBookDBusStubAdapterInternal::sendPhoneBookDataSetSelective(const std::vector<::v1::commonapi::examples::E04PhoneBook::phoneBookDataElementMap> &_phoneBookDataSet, const std::shared_ptr<CommonAPI::ClientIdList> _receivers) {
    std::shared_ptr<CommonAPI::ClientIdList> actualReceiverList = _receivers;

    if (!_receivers)
        actualReceiverList = subscribersForPhoneBookDataSetSelective_;

    for (auto clientIdIterator = actualReceiverList->cbegin(); clientIdIterator != actualReceiverList->cend(); clientIdIterator++) {
        if (!_receivers || subscribersForPhoneBookDataSetSelective_->find(*clientIdIterator) != subscribersForPhoneBookDataSetSelective_->end()) {
            firePhoneBookDataSetSelective(*clientIdIterator, _phoneBookDataSet);
        }
    }
}

void E04PhoneBookDBusStubAdapterInternal::subscribeForphoneBookDataSetSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) {
    bool ok = E04PhoneBookDBusStubAdapterHelper::stub_->onPhoneBookDataSetSelectiveSubscriptionRequested(clientId);
    if (ok) {
        subscribersForPhoneBookDataSetSelective_->insert(clientId);
        E04PhoneBookDBusStubAdapterHelper::stub_->onPhoneBookDataSetSelectiveSubscriptionChanged(clientId, CommonAPI::SelectiveBroadcastSubscriptionEvent::SUBSCRIBED);
        success = true;
    } else {
        success = false;
    }
}

void E04PhoneBookDBusStubAdapterInternal::unsubscribeFromphoneBookDataSetSelective(const std::shared_ptr<CommonAPI::ClientId> clientId) {
    subscribersForPhoneBookDataSetSelective_->erase(clientId);
    E04PhoneBookDBusStubAdapterHelper::stub_->onPhoneBookDataSetSelectiveSubscriptionChanged(clientId, CommonAPI::SelectiveBroadcastSubscriptionEvent::UNSUBSCRIBED);
}

std::shared_ptr<CommonAPI::ClientIdList> const E04PhoneBookDBusStubAdapterInternal::getSubscribersForPhoneBookDataSetSelective() {
    return subscribersForPhoneBookDataSetSelective_;
}


const E04PhoneBookDBusStubAdapterHelper::StubDispatcherTable& E04PhoneBookDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& E04PhoneBookDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

E04PhoneBookDBusStubAdapterInternal::E04PhoneBookDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      E04PhoneBookDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<E04PhoneBookStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: the phone book itself
             */
            { { "getPhoneBookAttribute", "" }, &commonapi::examples::E04PhoneBookDBusStubAdapterInternal::getPhoneBookAttributeStubDispatcher }
            ,
            /**
             * description: filter operations
             */
            { { "setPhoneBookDataFilter", "(bbbbbb)a(is)" }, &commonapi::examples::E04PhoneBookDBusStubAdapterInternal::setPhoneBookDataFilterStubDispatcher }
            ,
            { { "subscribeForphoneBookDataSetSelective", "" }, &commonapi::examples::E04PhoneBookDBusStubAdapterInternal::subscribePhoneBookDataSetSelectiveStubDispatcher }
            ,
            { { "unsubscribeFromphoneBookDataSetSelective", "" }, &commonapi::examples::E04PhoneBookDBusStubAdapterInternal::unsubscribePhoneBookDataSetSelectiveStubDispatcher }
            }),
        stubAttributeTable_() {
    subscribersForPhoneBookDataSetSelective_ = std::make_shared<CommonAPI::ClientIdList>();

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &commonapi::examples::E04PhoneBookDBusStubAdapterInternal::getE04PhoneBookInterfaceVersionStubDispatcher });
}

bool E04PhoneBookDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace examples
} // namespace commonapi
} // namespace v1
