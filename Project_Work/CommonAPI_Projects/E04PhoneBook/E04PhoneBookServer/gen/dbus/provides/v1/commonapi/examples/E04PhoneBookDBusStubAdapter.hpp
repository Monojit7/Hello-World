/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Fri Jun 23 13:08:16 IST 2017
*/
#ifndef V1_COMMONAPI_EXAMPLES_E04_Phone_Book_DBUS_STUB_ADAPTER_HPP_
#define V1_COMMONAPI_EXAMPLES_E04_Phone_Book_DBUS_STUB_ADAPTER_HPP_

#include <v1/commonapi/examples/E04PhoneBookStub.hpp>
#include "v1/commonapi/examples/E04PhoneBookDBusDeployment.hpp"        
#include <v1/commonapi/examples/E04PhoneBookDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace commonapi {
namespace examples {

typedef CommonAPI::DBus::DBusStubAdapterHelper<E04PhoneBookStub> E04PhoneBookDBusStubAdapterHelper;

class E04PhoneBookDBusStubAdapterInternal
    : public virtual E04PhoneBookStubAdapter,
      public E04PhoneBookDBusStubAdapterHelper
{
public:
    E04PhoneBookDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~E04PhoneBookDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return E04PhoneBook::getInterface();
    }

    /**
     * description: the phone book itself
     */
    void firePhoneBookAttributeChanged(const std::vector<::v1::commonapi::examples::E04PhoneBook::phoneBookStruct>& value);

    /**
     * description: filter result
     */
    void firePhoneBookDataSetSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::vector<::v1::commonapi::examples::E04PhoneBook::phoneBookDataElementMap> &_phoneBookDataSet);
    void sendPhoneBookDataSetSelective(const std::vector<::v1::commonapi::examples::E04PhoneBook::phoneBookDataElementMap> &_phoneBookDataSet, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
    void subscribeForphoneBookDataSetSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success);
    void unsubscribeFromphoneBookDataSetSelective(const std::shared_ptr<CommonAPI::ClientId> clientId);
    std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForPhoneBookDataSetSelective();


    const E04PhoneBookDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::commonapi::examples::E04PhoneBookStub,
        CommonAPI::Version
        > getE04PhoneBookInterfaceVersionStubDispatcher;

/**
 * description: the phone book itself
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::commonapi::examples::E04PhoneBookStub,
        std::vector<::v1::commonapi::examples::E04PhoneBook::phoneBookStruct>,
        CommonAPI::DBus::ArrayDeployment<E04PhoneBook_::phoneBookStructDeployment_t>                
        > getPhoneBookAttributeStubDispatcher;


/**
 * description: filter operations
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::commonapi::examples::E04PhoneBookStub,
    std::tuple<E04PhoneBook::elementFilterStruct, std::vector<E04PhoneBook::contentFilterStruct>>,
    std::tuple<>,
    std::tuple<E04PhoneBook_::elementFilterStructDeployment_t, CommonAPI::DBus::ArrayDeployment<E04PhoneBook_::contentFilterStructDeployment_t>>,
    std::tuple<>
    
    > setPhoneBookDataFilterStubDispatcher;


static CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ::v1::commonapi::examples::E04PhoneBookStub,
    E04PhoneBookStubAdapter,
    std::tuple<>,
    std::tuple<bool>
    > subscribePhoneBookDataSetSelectiveStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ::v1::commonapi::examples::E04PhoneBookStub,
    E04PhoneBookStubAdapter,
 std::tuple<>,
    std::tuple<>
    > unsubscribePhoneBookDataSetSelectiveStubDispatcher;


 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    E04PhoneBookDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class E04PhoneBookDBusStubAdapter
    : public E04PhoneBookDBusStubAdapterInternal,
      public std::enable_shared_from_this<E04PhoneBookDBusStubAdapter> {
public:
    E04PhoneBookDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          E04PhoneBookDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace examples
} // namespace commonapi
} // namespace v1

#endif // V1_COMMONAPI_EXAMPLES_E04_Phone_Book_DBUS_STUB_ADAPTER_HPP_
