/**
 * generated by Voice CodeGen Version: R1_v1.3.0
 * generated on: Wed Jun 21 17:26:02 IST 2017
 */

#include <thread>

#include <CommonAPI/CommonAPI.hpp>
#include "v1/commonapi/examples/E04PhoneBook.hpp"
#include "v1/commonapi/examples/E04PhoneBookProxy.hpp"
#include <unistd.h>

std::shared_ptr<v1::commonapi::examples::E04PhoneBookProxy<>> E04PhoneBookClientInstance;

std::string phoneNumberType2String(v1::commonapi::examples::E04PhoneBook::phoneNumberEnum phoneNumberType) {

    switch (phoneNumberType) {
        case 0:
            return "WORK";
            break;
        case 1:
            return "HOME";
            break;
        case 2:
            return "MOBILE1";
            break;
        case 3:
            return "MOBILE2";
            break;
        default:
            return "";
            break;
    }
}

void recv_cb (std::vector<::v1::commonapi::examples::E04PhoneBook::phoneBookStruct> myPhoneBook)
{

   std::cout << "Received PhoneBook" << std::endl;
    std::vector<::v1::commonapi::examples::E04PhoneBook::phoneBookStruct>::const_iterator myIterator;

    std::cout << "Actual phoneBook content: " << std::endl;
    for (myIterator = myPhoneBook.begin(); myIterator != myPhoneBook.end(); myIterator++) {

        std::cout << "Name: " << myIterator->getName() << std::endl;
        std::cout << "Forename: " << myIterator->getForename() << std::endl;
        std::cout << "Organisation: " << myIterator->getOrganisation() << std::endl;
        std::cout << "Address: " << myIterator->getAddress() << std::endl;
        std::cout << "EMail: " << myIterator->getEmail() << std::endl;
        std::cout << "data: " << myIterator->getData() << std::endl;
              for (::v1::commonapi::examples::E04PhoneBook::phoneNumberMap::const_iterator myPhoneNumberIterator = myIterator->getPhoneNumber().begin();
                        myPhoneNumberIterator != myIterator->getPhoneNumber().end();
                        myPhoneNumberIterator++) {
            std::cout << "phoneNumber[" << phoneNumberType2String(myPhoneNumberIterator->first) << "]: ";
            std::cout << myPhoneNumberIterator->second << std::endl;
        }

        std::cout << std::endl;
    }

}

int main(int argc, char **argv) {
	CommonAPI::Runtime::setProperty("LogContext", "E04PhoneBookClient");
	CommonAPI::Runtime::setProperty("LibraryBase", "E04PhoneBookClient");

	/*
	 * create the runtime
	 */
	std::shared_ptr<CommonAPI::Runtime> runtime = CommonAPI::Runtime::get();
	if(!runtime)
	{
		// Error: could not load runtime
		return 1;
	}
	
	std::string domain = "local";



	    // create the E04PhoneBook proxy
	    {
	    	std::string connection = "E04PhoneBookClientInstance";
	    	std::string instance = "E04PhoneBookServer.E04PhoneBookServerInstance";
	    	 E04PhoneBookClientInstance = runtime->buildProxy<v1::commonapi::examples::E04PhoneBookProxy>(domain, instance, connection);
	    	if(!E04PhoneBookClientInstance)
	    	{
                       std::cout << "client not created" << std::endl;
	    		// Error: could not create E04PhoneBookProxy
	    	}

                        else
                        {
                                std::cout << "Client created successfully" << std::endl;


                                std::cout << "Created Client Instance" << std::endl;

                                while (!E04PhoneBookClientInstance->isAvailable())
                                {
                                        sleep(1);
                                }

                             E04PhoneBookClientInstance->getPhoneBookAttribute().getChangedEvent().subscribe(std::bind(recv_cb, std::placeholders::_1));

                       }

	    }
	
    
    while (true) {
//        std::cout << "Waiting for calls... (Abort with CTRL+C)" << std::endl;
        std::this_thread::sleep_for(std::chrono::seconds(60));
    }
    return 0;
}
