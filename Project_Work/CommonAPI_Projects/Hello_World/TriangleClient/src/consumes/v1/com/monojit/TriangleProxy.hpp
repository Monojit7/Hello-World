/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Mon Nov 14 16:54:17 IST 2016
*/
#ifndef V1_COM_MONOJIT_Triangle_PROXY_HPP_
#define V1_COM_MONOJIT_Triangle_PROXY_HPP_

#include <v1/com/monojit/TriangleProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace monojit {

template <typename ... _AttributeExtensions>
class TriangleProxy
    : virtual public Triangle, 
      virtual public TriangleProxyBase,
      virtual public _AttributeExtensions... {
public:
    TriangleProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~TriangleProxy();

    typedef Triangle InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute height.
     */
    virtual HeightAttribute& getHeightAttribute() {
        return delegate_->getHeightAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute width.
     */
    virtual WidthAttribute& getWidthAttribute() {
        return delegate_->getWidthAttribute();
    }

    /**
     * Returns the wrapper class that provides access to the broadcast AreaResult.
     */
    virtual AreaResultEvent& getAreaResultEvent() {
        return delegate_->getAreaResultEvent();
    }

    /**
     * description: Example comment
     * Calls Area with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void Area(CommonAPI::CallStatus &_internalCallStatus, std::string &_output, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls Area with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> AreaAsync(AreaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<TriangleProxyBase> delegate_;
};

typedef TriangleProxy<> TriangleProxyDefault;

namespace TriangleExtensions {
    template <template <typename > class _ExtensionType>
    class HeightAttributeExtension {
     public:
        typedef _ExtensionType<TriangleProxyBase::HeightAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<TriangleProxyBase::HeightAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        HeightAttributeExtension() {}
    #endif
    
        HeightAttributeExtension(TriangleProxyBase& proxy): attributeExtension_(proxy.getHeightAttribute()) {
        }
    
        inline extension_type& getHeightAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class WidthAttributeExtension {
     public:
        typedef _ExtensionType<TriangleProxyBase::WidthAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<TriangleProxyBase::WidthAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        WidthAttributeExtension() {}
    #endif
    
        WidthAttributeExtension(TriangleProxyBase& proxy): attributeExtension_(proxy.getWidthAttribute()) {
        }
    
        inline extension_type& getWidthAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace TriangleExtensions

//
// TriangleProxy Implementation
//
template <typename ... _AttributeExtensions>
TriangleProxy<_AttributeExtensions...>::TriangleProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<TriangleProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<TriangleProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
TriangleProxy<_AttributeExtensions...>::~TriangleProxy() {
}

/**
 * description: Example comment
 */
template <typename ... _AttributeExtensions>
void TriangleProxy<_AttributeExtensions...>::Area(CommonAPI::CallStatus &_internalCallStatus, std::string &_output, const CommonAPI::CallInfo *_info) {
    delegate_->Area(_internalCallStatus, _output, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TriangleProxy<_AttributeExtensions...>::AreaAsync(AreaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->AreaAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &TriangleProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool TriangleProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool TriangleProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& TriangleProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& TriangleProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace monojit
} // namespace com
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v1::com::monojit::TriangleProxy,
    _AttributeExtension> {
    typedef typename ::v1::com::monojit::TriangleProxy<
            ::v1::com::monojit::TriangleExtensions::HeightAttributeExtension<_AttributeExtension>, 
            ::v1::com::monojit::TriangleExtensions::WidthAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_MONOJIT_Triangle_PROXY_HPP_
