/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Mon Nov 14 16:54:17 IST 2016
*/
#ifndef V1_COM_MONOJIT_Triangle_STUB_HPP_
#define V1_COM_MONOJIT_Triangle_STUB_HPP_

#include <functional>




#include <v1/com/monojit/Triangle.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace monojit {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service Triangle. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class TriangleStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual Triangle {
 public:
    ///Notifies all remote listeners about a change of value of the attribute height.
    virtual void fireHeightAttributeChanged(const uint32_t& height) = 0;
    ///Notifies all remote listeners about a change of value of the attribute width.
    virtual void fireWidthAttributeChanged(const uint32_t& width) = 0;

    /**
     * Sends a broadcast event for AreaResult. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireAreaResultEvent(const std::string &_e) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for Triangle.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class TriangleStubRemoteEvent
{
public:
    virtual ~TriangleStubRemoteEvent() { }

    /// Verification callback for remote set requests on the attribute height
    virtual bool onRemoteSetHeightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _value) = 0;
    /// Action callback for remote set requests on the attribute height
    virtual void onRemoteHeightAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute width
    virtual bool onRemoteSetWidthAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _value) = 0;
    /// Action callback for remote set requests on the attribute width
    virtual void onRemoteWidthAttributeChanged() = 0;
};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service Triangle to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class TriangleStub
    : public virtual CommonAPI::Stub<TriangleStubAdapter, TriangleStubRemoteEvent>
{
public:
    typedef std::function<void (std::string _output)>AreaReply_t;

    virtual ~TriangleStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /// Provides getter access to the attribute height
    virtual const uint32_t &getHeightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute width
    virtual const uint32_t &getWidthAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /**
     * description: Example comment
     */
    /// This is the method that will be called on remote calls on the method Area.
    virtual void Area(const std::shared_ptr<CommonAPI::ClientId> _client, AreaReply_t _reply) = 0;
    /// Sends a broadcast event for AreaResult.
    virtual void fireAreaResultEvent(const std::string &_e) = 0;

    using CommonAPI::Stub<TriangleStubAdapter, TriangleStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<TriangleStubAdapter, TriangleStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<TriangleStubAdapter, TriangleStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef TriangleStubRemoteEvent RemoteEventType;
    typedef Triangle StubInterface;
};

} // namespace monojit
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_MONOJIT_Triangle_STUB_HPP_
