/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Mon Nov 14 16:54:17 IST 2016
*/
#include <v1/com/monojit/TriangleStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace com {
namespace monojit {

TriangleStubDefault::TriangleStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(Triangle::getInterfaceVersion()) {
}

const CommonAPI::Version& TriangleStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

TriangleStubRemoteEvent* TriangleStubDefault::initStubAdapter(const std::shared_ptr<TriangleStubAdapter> &_adapter) {
    CommonAPI::Stub<TriangleStubAdapter, TriangleStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

const uint32_t& TriangleStubDefault::getHeightAttribute() {
    return heightAttributeValue_;
}

const uint32_t& TriangleStubDefault::getHeightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getHeightAttribute();
}

void TriangleStubDefault::setHeightAttribute(uint32_t _value) {
    const bool valueChanged = trySetHeightAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<TriangleStubAdapter, TriangleStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireHeightAttributeChanged(heightAttributeValue_);
    }
}

bool TriangleStubDefault::trySetHeightAttribute(uint32_t _value) {
    if (!validateHeightAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (heightAttributeValue_ != _value);
    heightAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool TriangleStubDefault::validateHeightAttributeRequestedValue(const uint32_t &_value) {
    (void)_value;
	return true;
}

void TriangleStubDefault::setHeightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _value) {
    (void)_client;
    setHeightAttribute(_value);
}

void TriangleStubDefault::onRemoteHeightAttributeChanged() {

	std::cout << "onRemoteHeightAttributeChanged" << std::endl;
    // No operation in default
}

void TriangleStubDefault::RemoteEventHandler::onRemoteHeightAttributeChanged() {
	assert(defaultStub_ !=NULL);
    defaultStub_->onRemoteHeightAttributeChanged();
}

bool TriangleStubDefault::RemoteEventHandler::onRemoteSetHeightAttribute(uint32_t _value) {
	assert(defaultStub_ !=NULL);
    return defaultStub_->trySetHeightAttribute(std::move(_value));
}

bool TriangleStubDefault::RemoteEventHandler::onRemoteSetHeightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _value) {
    (void)_client;
    return onRemoteSetHeightAttribute(_value);
}

const uint32_t& TriangleStubDefault::getWidthAttribute() {
    return widthAttributeValue_;
}

const uint32_t& TriangleStubDefault::getWidthAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getWidthAttribute();
}

void TriangleStubDefault::setWidthAttribute(uint32_t _value) {
    const bool valueChanged = trySetWidthAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<TriangleStubAdapter, TriangleStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireWidthAttributeChanged(widthAttributeValue_);
    }
}

bool TriangleStubDefault::trySetWidthAttribute(uint32_t _value) {
    if (!validateWidthAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (widthAttributeValue_ != _value);
    widthAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool TriangleStubDefault::validateWidthAttributeRequestedValue(const uint32_t &_value) {
    (void)_value;
	return true;
}

void TriangleStubDefault::setWidthAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _value) {
    (void)_client;
    setWidthAttribute(_value);
}

void TriangleStubDefault::onRemoteWidthAttributeChanged() {
    // No operation in default
}

void TriangleStubDefault::RemoteEventHandler::onRemoteWidthAttributeChanged() {
	assert(defaultStub_ !=NULL);
    defaultStub_->onRemoteWidthAttributeChanged();
}

bool TriangleStubDefault::RemoteEventHandler::onRemoteSetWidthAttribute(uint32_t _value) {
	assert(defaultStub_ !=NULL);
    return defaultStub_->trySetWidthAttribute(std::move(_value));
}

bool TriangleStubDefault::RemoteEventHandler::onRemoteSetWidthAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _value) {
    (void)_client;
    return onRemoteSetWidthAttribute(_value);
}


/**
 * description: Example comment
 */
void TriangleStubDefault::Area(const std::shared_ptr<CommonAPI::ClientId> _client, AreaReply_t _reply) {
    (void)_client;
    std::string output = "";
    _reply(output);
}


void TriangleStubDefault::fireAreaResultEvent(const std::string &_e) {
    assert((CommonAPI::Stub<TriangleStubAdapter, TriangleStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<TriangleStubAdapter, TriangleStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireAreaResultEvent(_e);
}


TriangleStubDefault::RemoteEventHandler::RemoteEventHandler(TriangleStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace monojit
} // namespace com
} // namespace v1
