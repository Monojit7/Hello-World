/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Mon Nov 14 16:54:17 IST 2016
*/
#include <v1/com/monojit/Triangle.hpp>
#include <v1/com/monojit/TriangleDBusStubAdapter.hpp>

namespace v1 {
namespace com {
namespace monojit {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createTriangleDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<TriangleDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerTriangleDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	Triangle::getInterface(), &createTriangleDBusStubAdapter);
}

TriangleDBusStubAdapterInternal::~TriangleDBusStubAdapterInternal() {
    deactivateManagedInstances();
    TriangleDBusStubAdapterHelper::deinit();
}

void TriangleDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* TriangleDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"getHeightAttribute\">\n"
            "<arg name=\"value\" type=\"u\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"setHeightAttribute\">\n"
            "<arg name=\"requestedValue\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"u\" direction=\"out\" />\n"
        "</method>\n"
        "<signal name=\"onHeightAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"u\" />\n"
        "</signal>\n"
        "<method name=\"getWidthAttribute\">\n"
            "<arg name=\"value\" type=\"u\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"setWidthAttribute\">\n"
            "<arg name=\"requestedValue\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"u\" direction=\"out\" />\n"
        "</method>\n"
        "<signal name=\"onWidthAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"u\" />\n"
        "</signal>\n"
        "<signal name=\"AreaResult\">\n"
            "<arg name=\"e\" type=\"s\" />\n"
        "</signal>\n"
        /**
         * description: Example comment
         */
        "<method name=\"Area\">\n"
            "<arg name=\"_output\" type=\"s\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::monojit::TriangleStub,
        CommonAPI::Version
        > TriangleDBusStubAdapterInternal::getTriangleInterfaceVersionStubDispatcher(&TriangleStub::getInterfaceVersion, "uu");

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::monojit::TriangleStub,
        uint32_t
        > TriangleDBusStubAdapterInternal::getHeightAttributeStubDispatcher(
            &::v1::com::monojit::TriangleStub::getHeightAttribute
            , "u"
            );
CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::com::monojit::TriangleStub,
        uint32_t
        > TriangleDBusStubAdapterInternal::setHeightAttributeStubDispatcher(
                &::v1::com::monojit::TriangleStub::getHeightAttribute,
                &TriangleStubRemoteEvent::onRemoteSetHeightAttribute,
                &TriangleStubRemoteEvent::onRemoteHeightAttributeChanged
                ,&TriangleStubAdapter::fireHeightAttributeChanged
                ,"u"
                );
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::monojit::TriangleStub,
        uint32_t
        > TriangleDBusStubAdapterInternal::getWidthAttributeStubDispatcher(
            &::v1::com::monojit::TriangleStub::getWidthAttribute
            , "u"
            );
CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::com::monojit::TriangleStub,
        uint32_t
        > TriangleDBusStubAdapterInternal::setWidthAttributeStubDispatcher(
                &::v1::com::monojit::TriangleStub::getWidthAttribute,
                &TriangleStubRemoteEvent::onRemoteSetWidthAttribute,
                &TriangleStubRemoteEvent::onRemoteWidthAttributeChanged
                ,&TriangleStubAdapter::fireWidthAttributeChanged
                ,"u"
                );



/**
 * description: Example comment
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::monojit::TriangleStub,
    std::tuple<>,
    std::tuple<std::string>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::StringDeployment>
    
    > TriangleDBusStubAdapterInternal::areaStubDispatcher(
    &TriangleStub::Area, "s",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)));


void TriangleDBusStubAdapterInternal::fireHeightAttributeChanged(const uint32_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    uint32_t
    >>
        ::sendSignal(
            *this,
            "onHeightAttributeChanged",
            "u",
            value
    
    );
}
void TriangleDBusStubAdapterInternal::fireWidthAttributeChanged(const uint32_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    uint32_t
    >>
        ::sendSignal(
            *this,
            "onWidthAttributeChanged",
            "u",
            value
    
    );
}

void TriangleDBusStubAdapterInternal::fireAreaResultEvent(const std::string& e) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>
    >>::sendSignal(
            *this,
            "AreaResult",
            "s",
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(e, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))
    );
}


const TriangleDBusStubAdapterHelper::StubDispatcherTable& TriangleDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& TriangleDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

TriangleDBusStubAdapterInternal::TriangleDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      TriangleDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<TriangleStub>(_stub), false),
      stubDispatcherTable_({
            { { "getHeightAttribute", "" }, &com::monojit::TriangleDBusStubAdapterInternal::getHeightAttributeStubDispatcher }
            , { { "setHeightAttribute", "u" }, &com::monojit::TriangleDBusStubAdapterInternal::setHeightAttributeStubDispatcher },
            { { "getWidthAttribute", "" }, &com::monojit::TriangleDBusStubAdapterInternal::getWidthAttributeStubDispatcher }
            , { { "setWidthAttribute", "u" }, &com::monojit::TriangleDBusStubAdapterInternal::setWidthAttributeStubDispatcher }
            ,
            /**
             * description: Example comment
             */
            { { "Area", "" }, &com::monojit::TriangleDBusStubAdapterInternal::areaStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &com::monojit::TriangleDBusStubAdapterInternal::getTriangleInterfaceVersionStubDispatcher });
}

bool TriangleDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace monojit
} // namespace com
} // namespace v1
