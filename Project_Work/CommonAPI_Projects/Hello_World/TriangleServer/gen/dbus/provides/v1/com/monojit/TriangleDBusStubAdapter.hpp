/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Mon Nov 14 16:54:17 IST 2016
*/
#ifndef V1_COM_MONOJIT_Triangle_DBUS_STUB_ADAPTER_HPP_
#define V1_COM_MONOJIT_Triangle_DBUS_STUB_ADAPTER_HPP_

#include <v1/com/monojit/TriangleStub.hpp>
#include "v1/com/monojit/TriangleDBusDeployment.hpp"        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace monojit {

typedef CommonAPI::DBus::DBusStubAdapterHelper<TriangleStub> TriangleDBusStubAdapterHelper;

class TriangleDBusStubAdapterInternal
    : public virtual TriangleStubAdapter,
      public TriangleDBusStubAdapterHelper
{
public:
    TriangleDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~TriangleDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return Triangle::getInterface();
    }

    void fireHeightAttributeChanged(const uint32_t& value);
    void fireWidthAttributeChanged(const uint32_t& value);

    void fireAreaResultEvent(const std::string& e);


    const TriangleDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::monojit::TriangleStub,
        CommonAPI::Version
        > getTriangleInterfaceVersionStubDispatcher;

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::monojit::TriangleStub,
        uint32_t                
        > getHeightAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::com::monojit::TriangleStub,
        uint32_t                    
        > setHeightAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::monojit::TriangleStub,
        uint32_t                
        > getWidthAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::com::monojit::TriangleStub,
        uint32_t                    
        > setWidthAttributeStubDispatcher;


/**
 * description: Example comment
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::monojit::TriangleStub,
    std::tuple<>,
    std::tuple<std::string>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::StringDeployment>
    
    > areaStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    TriangleDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class TriangleDBusStubAdapter
    : public TriangleDBusStubAdapterInternal,
      public std::enable_shared_from_this<TriangleDBusStubAdapter> {
public:
    TriangleDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          TriangleDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace monojit
} // namespace com
} // namespace v1

#endif // V1_COM_MONOJIT_Triangle_DBUS_STUB_ADAPTER_HPP_
