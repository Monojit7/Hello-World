/**
 * generated by Voice CodeGen Version: R1_v1.3.0
 * generated on: Mon Feb 06 15:58:49 IST 2017
 */

#ifndef V1_COM_HARMAN_MMPRES_MEDIASETTINGSSTUBIMPL_HPP
#define V1_COM_HARMAN_MMPRES_MEDIASETTINGSSTUBIMPL_HPP

#include <device/DeviceBase.h>

using namespace v1::com::harman::media;

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

class MediaSettingsStubImpl : public v1::com::harman::mmpres::MediaSettingsStubDefault
{

public:
	MediaSettingsStubImpl();
    virtual ~MediaSettingsStubImpl();

	virtual void masterMediaReset(const std::shared_ptr<CommonAPI::ClientId> _client, masterMediaResetReply_t);
	virtual void resetMediaIndex(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t slotId, resetMediaIndexReply_t);
	virtual void updateIndex(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t slotId, updateIndexReply_t);
	virtual void setSubtitle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus dispSubtitle, setSubtitleReply_t);
	virtual void setAudioChannel(const std::shared_ptr<CommonAPI::ClientId> _client, ::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus audioChannel, setAudioChannelReply_t);
	virtual void setDisplayWindow(const std::shared_ptr<CommonAPI::ClientId> _client, bool isFullscreen, ::v3::com::harman::mmpres::MMPresTypes::tScreen screeenDimension, setDisplayWindowReply_t);
	virtual void updateIndexCallBack(const CommonAPI::CallStatus& status, const Indexer::IndexerError& error);
	virtual void setSubtitleCallback(const CommonAPI::CallStatus& status, const PlayerTypes::SubtitleStatus& subtitle);
	virtual void setAudioChannelCallback(const CommonAPI::CallStatus& status, const PlayerTypes::AudioChannelStatus& audiochannel);
	virtual void setUpScaleCallback(const CommonAPI::CallStatus& status, const PlayerTypes::AspectModeStatus& aspectModeStatus);
	virtual void setDisplayWindowCallback(const CommonAPI::CallStatus& status, const PlayerTypes::PlayerError& error);

	virtual const ::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus& getAudioChannelAttribute();
    virtual void setAudioChannelAttribute(::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus _value);

    virtual const bool& getIsFullScreenAttribute();
    virtual void setIsFullScreenAttribute(bool _value);

    virtual const ::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus& getSubtitleStatusAttribute();
    virtual void setSubtitleStatusAttribute(::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus _value);

private:
	bool isFullScreenLocal = false ;
	FacadeHelper<MediaDetectionEngine> mDetect;
	FacadeHelper<MediaBrowseEngine> mBrowseEngine;
	FacadeHelper<MediaPlaybackEngine> mPlayEngine;
	MMPresTypes::eAudioChannelStatus mAudioChannelAttribute;
	MMPresTypes::eSubtitleStatus mSubtitleStatusAttribute;

	void registerMediaSettingsCallback();
	void unRegisterMediaSettingsCallback();
};

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1

#endif //V1_COM_HARMAN_MMPRES_MEDIASETTINGSSTUBIMPL_HPP
