/**
 * generated by Voice CodeGen Version: R1_v1.3.0
 * generated on: Wed Jun 22 09:34:32 IST 2016
 */

#ifndef V1_COM_HARMAN_MMPRES_MEDIAPLAYERSTUBIMPL_HPP
#define V1_COM_HARMAN_MMPRES_MEDIAPLAYERSTUBIMPL_HPP


#include <playengine/MediaPlaybackEngine.h>
#include <detectionengine/MediaDetectionEngine.h>
#include <v1/com/harman/mmpres/MediaSettingsStub.hpp>
#include <playengine/RemoteCDplaybackengine.h>

class RemoteCDPlaybackEngine;

using namespace v1::com::harman::media;

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

class MediaPlayerStubImpl : public v1::com::harman::mmpres::MediaPlayerStubDefault
{

public:
	MediaPlayerStubImpl();
    virtual ~MediaPlayerStubImpl();

	virtual void next(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t step, nextReply_t);
	virtual void previous(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t step, previousReply_t);
	virtual void pause(const std::shared_ptr<CommonAPI::ClientId> _client, pauseReply_t);
	virtual void resume(const std::shared_ptr<CommonAPI::ClientId> _client, resumeReply_t);
	virtual void seekToTime(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t timePosition, seekToTimeReply_t);
	virtual void fastForward(const std::shared_ptr<CommonAPI::ClientId> _client, fastForwardReply_t);
	virtual void fastReverse(const std::shared_ptr<CommonAPI::ClientId> _client, fastReverseReply_t);
	virtual void setRepeat(const std::shared_ptr<CommonAPI::ClientId> _client, ::v3::com::harman::mmpres::MMPresTypes::eRepeatMode mode, setRepeatReply_t);
	virtual void setShuffle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v3::com::harman::mmpres::MMPresTypes::eShuffleMode mode, setShuffleReply_t);
	virtual void getNowPlayingAlbumArtInformation(const std::shared_ptr<CommonAPI::ClientId> _client, getNowPlayingAlbumArtInformationReply_t);
	virtual void getNowPlayingAlbumArtPath(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t imageNumber, getNowPlayingAlbumArtPathReply_t);
	virtual void getNowPlayingAlbumArtData(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t imageNumber, getNowPlayingAlbumArtDataReply_t);
	virtual void getAlbumArtInformationForTrack(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t trackId, getAlbumArtInformationForTrackReply_t);
	virtual void getAlbumArtPathForTrack(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t trackId, uint8_t imageNumber, getAlbumArtPathForTrackReply_t);
	virtual void getAlbumArtDataForTrack(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t trackId, uint8_t imageNumber, getAlbumArtDataForTrackReply_t);
	virtual void playAll(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _slotId, ::v3::com::harman::mmpres::MMPresTypes::eMetadataType _objectType, playAllReply_t _reply);
   virtual void promote(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t fileid, promoteReply_t _reply);
   virtual void demote(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t fileid, demoteReply_t _reply);
   virtual void addToWishList(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t fileid, addToWishListReply_t _reply);
   virtual void sendIAP2KeyEvent(const std::shared_ptr<CommonAPI::ClientId> _client, ::v3::com::harman::mmpres::MMPresTypes::IAP2ButtonType _buttonType, bool _pressed, sendIAP2KeyEventReply_t _reply);

   // override stub default implementation. This is to do a forceful set of the playDuration attribute.
	virtual void setTotalPlayDurationAttribute(uint64_t _value);
	virtual const uint64_t& getTotalPlayDurationAttribute();

   virtual void setRemotePlayerChangedAttribute(uint32_t _value);
   virtual const uint32_t& getRemotePlayerChangedAttribute();

	virtual const ::v3::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus& getNowPlayingArtworkStatusAttribute();
	virtual void setNowPlayingArtworkStatusAttribute(::v3::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus);

	virtual void setSpeed(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t slotId, ::v3::com::harman::mmpres::MMPresTypes::eMetadataType type, ::v3::com::harman::mmpres::MMPresTypes::ePlaybackSpeed speed, setSpeedReply_t);
	virtual void getSpeed(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t slotId, ::v3::com::harman::mmpres::MMPresTypes::eMetadataType type, getSpeedReply_t);

	virtual void getSpeedCallback(const CommonAPI::CallStatus&, const double&, const ::v1::com::harman::media::BaseType::tBaseError&);
	virtual void setSpeedCallback(const CommonAPI::CallStatus&,const ::v1::com::harman::media::BaseType::tBaseError&);
    virtual void setRateCallback(const CommonAPI::CallStatus& status, const double& rate);

    virtual const bool& getMRemoteCDEjectChimesWarningAttribute();
    virtual void setMRemoteCDEjectChimesWarningAttribute(const bool value);

	virtual const ::v3::com::harman::mmpres::MMPresTypes::tNowPlayingInfo& getNowPlayingDataAttribute();
	virtual void setNowPlayingDataAttribute(::v3::com::harman::mmpres::MMPresTypes::tNowPlayingInfo);
    
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eRemoteCDDiscStatus& getMRemoteCDDiscStatusAttribute();
    virtual void setMRemoteCDDiscStatusAttribute(::v3::com::harman::mmpres::MMPresTypes::eRemoteCDDiscStatus _value);
    
    virtual const ::v3::com::harman::mmpres::MMPresTypes::RemoteCDErrorStatus& getMRemoteCDErrorStatusAttribute();
    virtual void setMRemoteCDErrorStatusAttribute(::v3::com::harman::mmpres::MMPresTypes::RemoteCDErrorStatus _value);

    virtual const ::v3::com::harman::mmpres::MMPresTypes::MediaErrorMap& getMediaErrorAttribute();
    virtual void setMediaErrorAttribute(::v3::com::harman::mmpres::MMPresTypes::MediaErrorMap _value);
    
    virtual const ::v3::com::harman::mmpres::MMPresTypes::tRemotePlayerCapability& getRemotePlayerCapabilityAttribute();
    virtual void setRemotePlayerCapabilityAttribute(::v3::com::harman::mmpres::MMPresTypes::tRemotePlayerCapability _value);

    virtual const ::v3::com::harman::mmpres::MMPresTypes::tTrackState& getTrackStateAttribute();
    virtual void setTrackStateAttribute(::v3::com::harman::mmpres::MMPresTypes::tTrackState _value);

    virtual const ::v3::com::harman::mmpres::MMPresTypes::eRepeatMode& getRepeatModeAttribute();
    virtual void setRepeatModeAttribute(::v3::com::harman::mmpres::MMPresTypes::eRepeatMode _value);

    virtual const ::v3::com::harman::mmpres::MMPresTypes::eShuffleMode& getShuffleModeAttribute();
    virtual void setShuffleModeAttribute(::v3::com::harman::mmpres::MMPresTypes::eShuffleMode _value);

    virtual const uint64_t& getCurrentPlayTimeAttribute();
    virtual void setCurrentPlayTimeAttribute(uint64_t _value);

    virtual const ::v3::com::harman::mmpres::MMPresTypes::tPlaybackSpeed& getPlaybackSpeedAttribute();
    virtual void setPlaybackSpeedAttribute(::v3::com::harman::mmpres::MMPresTypes::tPlaybackSpeed _value);

    virtual const bool& getActiveDeviceBTLinkLossAttribute();
    virtual void setActiveDeviceBTLinkLossAttribute(bool _value);

    virtual const ::v3::com::harman::mmpres::MMPresTypes::tTrackListSupport& getTrackListSupportAttribute();
    virtual void setTrackListSupportAttribute(::v3::com::harman::mmpres::MMPresTypes::tTrackListSupport _value);

    virtual const bool& getPromoteStatusAttribute();
    virtual void setPromoteStatusAttribute(bool _value);

    virtual const bool& getDemoteStatusAttribute();
    virtual void setDemoteStatusAttribute(bool _value);

    virtual const bool& getAddToWishListStatusAttribute();
    virtual void setAddToWishListStatusAttribute(bool _value);

    virtual const ::v3::com::harman::mmpres::MMPresTypes::eCDEOLStatus& getMCDEOLStatusAttribute();
    virtual void setMCDEOLStatusAttribute(::v3::com::harman::mmpres::MMPresTypes::eCDEOLStatus _value);

private : 
	FacadeHelper<MediaDetectionEngine> mDetectionEngine;
	FacadeHelper<MediaPlaybackEngine> mPlayEngine;
    FacadeHelper<RemoteCDPlaybackEngine> mRemoteCDPlayEngine;
    FacadeHelper<SourceSwitch> mSourceSwitch;
	void registerPlayerCallback();
	void unRegisterPlayerCallback();

	uint64_t mTotalPlayDurationAttributeValue = 0;
   uint32_t mRemotePlayerChangedAttributeValue = 0u;
	MMPresTypes::eArtWorkAvailabilityStatus mArtworkStatus;
	MMPresTypes::tNowPlayingInfo mNowPlayingInfo;
	MMPresTypes::tTrackState mTrackStateAttribute;
	MMPresTypes::eRepeatMode mRepeatModeAttribute;
	MMPresTypes::eShuffleMode mShuffleModeAttribute;
	uint64_t mCurrentPlayTimeAttribute = 0;
	MMPresTypes::tPlaybackSpeed mPlaybackSpeedAttribute;
	bool mActiveDeviceBTLinkLossAttribute = false ;
	MMPresTypes::tTrackListSupport mTrackListSupportAttribute;
   bool mbPromoteStatus= false;
   bool mbDemoteStatus = false;
   bool mbAddToWishListStatus = false;

    ::v3::com::harman::mmpres::MMPresTypes::eCDEOLStatus mEOLStatus = ::v3::com::harman::mmpres::MMPresTypes::eCDEOLStatus::Literal::eNONE_REMOTECD_EOL ;
    bool videoPlayStatusAttributeValue = false;
    ::v3::com::harman::mmpres::MMPresTypes::tRemotePlayerCapability mRemotePlayerCapability;
    ::v3::com::harman::mmpres::MMPresTypes::MediaErrorMap mMediaErrorMap;

public:
    ::v3::com::harman::mmpres::MMPresTypes::eRemoteCDDiscStatus mDiscStatus = ::v3::com::harman::mmpres::MMPresTypes::eRemoteCDDiscStatus::Literal::eInvalidStatus ;
    ::v3::com::harman::mmpres::MMPresTypes::RemoteCDErrorStatus mErrorStatus;
    bool mbEjectChaimWarningStatus = false;
};

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1

#endif //V1_COM_HARMAN_MMPRES_MEDIAPLAYERSTUBIMPL_HPP
