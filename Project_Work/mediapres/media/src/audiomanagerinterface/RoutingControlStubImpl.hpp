/**
 * generated by Voice CodeGen Version: R1_v1.3.0
 * generated on: Sun Sep 11 19:00:26 IST 2016
 */

#ifndef V1_ORG_GENIVI_AM_ROUTINGINTERFACE_ROUTINGCONTROLSTUBIMPL_HPP
#define V1_ORG_GENIVI_AM_ROUTINGINTERFACE_ROUTINGCONTROLSTUBIMPL_HPP

#include<audiomanagerinterface/audiomanagerinterface.h>
#include<statemachine/sourceswitch.h>
namespace v1 {
namespace org {
namespace genivi {
namespace am {
namespace routinginterface {

class RoutingControlStubImpl : public v1::org::genivi::am::routinginterface::RoutingControlStubDefault
{

public:
	RoutingControlStubImpl();
    virtual ~RoutingControlStubImpl();
	virtual void asyncSetSourceState(const std::shared_ptr<CommonAPI::ClientId> _client, ::v3::org::genivi::am_t::am_Handle_s handle, ::v3::org::genivi::am_t::am_sourceID_t sourceID, ::v3::org::genivi::am_t::am_SourceState_e state, asyncSetSourceStateReply_t);
	virtual void fireAckSetSourceStateSelective(const ::v3::org::genivi::am_t::am_Handle_s &_handle, const ::v3::org::genivi::am_t::am_Error_e &_amError, const std::shared_ptr<CommonAPI::ClientIdList> _receivers);
	void registerAsyncSetSourceStateFunction();
private:
	FacadeHelper<AudioManagerInterface> mAudioManager;
	FacadeHelper<MediaDetectionEngine> mDetect;
	FacadeHelper<SourceSwitch> mSourceSwitch;
};

} // namespace routinginterface
} // namespace am
} // namespace genivi
} // namespace org
} // namespace v1

#endif //V1_ORG_GENIVI_AM_ROUTINGINTERFACE_ROUTINGCONTROLSTUBIMPL_HPP
