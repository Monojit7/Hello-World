/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_HARMAN_MMPRES_Media_Player_STUB_HPP_
#define V1_COM_HARMAN_MMPRES_Media_Player_STUB_HPP_

#include <functional>



#include <v3/com/harman/mmpres/MMPresTypes.hpp>

#include <v1/com/harman/mmpres/MediaPlayer.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service MediaPlayer. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class MediaPlayerStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual MediaPlayer {
 public:
    ///Notifies all remote listeners about a change of value of the attribute currentPlayTime.
    virtual void fireCurrentPlayTimeAttributeChanged(const uint64_t& currentPlayTime) = 0;
    ///Notifies all remote listeners about a change of value of the attribute totalPlayDuration.
    virtual void fireTotalPlayDurationAttributeChanged(const uint64_t& totalPlayDuration) = 0;
    ///Notifies all remote listeners about a change of value of the attribute trackState.
    virtual void fireTrackStateAttributeChanged(const ::v3::com::harman::mmpres::MMPresTypes::tTrackState& trackState) = 0;
    ///Notifies all remote listeners about a change of value of the attribute nowPlayingData.
    virtual void fireNowPlayingDataAttributeChanged(const ::v3::com::harman::mmpres::MMPresTypes::tNowPlayingInfo& nowPlayingData) = 0;
    ///Notifies all remote listeners about a change of value of the attribute playState.
    virtual void firePlayStateAttributeChanged(const ::v3::com::harman::mmpres::MMPresTypes::ePlayState& playState) = 0;
    ///Notifies all remote listeners about a change of value of the attribute speed.
    virtual void fireSpeedAttributeChanged(const ::v3::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed& speed) = 0;
    ///Notifies all remote listeners about a change of value of the attribute repeatMode.
    virtual void fireRepeatModeAttributeChanged(const ::v3::com::harman::mmpres::MMPresTypes::eRepeatMode& repeatMode) = 0;
    ///Notifies all remote listeners about a change of value of the attribute shuffleMode.
    virtual void fireShuffleModeAttributeChanged(const ::v3::com::harman::mmpres::MMPresTypes::eShuffleMode& shuffleMode) = 0;
    ///Notifies all remote listeners about a change of value of the attribute playbackSpeed.
    virtual void firePlaybackSpeedAttributeChanged(const ::v3::com::harman::mmpres::MMPresTypes::tPlaybackSpeed& playbackSpeed) = 0;
    ///Notifies all remote listeners about a change of value of the attribute playsessionState.
    virtual void firePlaysessionStateAttributeChanged(const ::v3::com::harman::mmpres::MMPresTypes::PlaySessionStateMap& playsessionState) = 0;
    ///Notifies all remote listeners about a change of value of the attribute activeDeviceBTLinkLoss.
    virtual void fireActiveDeviceBTLinkLossAttributeChanged(const bool& activeDeviceBTLinkLoss) = 0;
    ///Notifies all remote listeners about a change of value of the attribute nowPlayingArtworkStatus.
    virtual void fireNowPlayingArtworkStatusAttributeChanged(const ::v3::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus& nowPlayingArtworkStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute playbackPreview.
    virtual void firePlaybackPreviewAttributeChanged(const ::v3::com::harman::mmpres::MMPresTypes::MetadataItemList& playbackPreview) = 0;
    ///Notifies all remote listeners about a change of value of the attribute videoPlayStatus.
    virtual void fireVideoPlayStatusAttributeChanged(const bool& videoPlayStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute RemotePlayerChanged.
    virtual void fireRemotePlayerChangedAttributeChanged(const uint32_t& RemotePlayerChanged) = 0;
    ///Notifies all remote listeners about a change of value of the attribute remotePlayerCapability.
    virtual void fireRemotePlayerCapabilityAttributeChanged(const ::v3::com::harman::mmpres::MMPresTypes::tRemotePlayerCapability& remotePlayerCapability) = 0;
    ///Notifies all remote listeners about a change of value of the attribute mediaError.
    virtual void fireMediaErrorAttributeChanged(const ::v3::com::harman::mmpres::MMPresTypes::MediaErrorMap& mediaError) = 0;
    ///Notifies all remote listeners about a change of value of the attribute syncStatus.
    virtual void fireSyncStatusAttributeChanged(const ::v3::com::harman::mmpres::MMPresTypes::SyncMap& syncStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute trackListSupport.
    virtual void fireTrackListSupportAttributeChanged(const ::v3::com::harman::mmpres::MMPresTypes::tTrackListSupport& trackListSupport) = 0;
    ///Notifies all remote listeners about a change of value of the attribute promoteStatus.
    virtual void firePromoteStatusAttributeChanged(const bool& promoteStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute demoteStatus.
    virtual void fireDemoteStatusAttributeChanged(const bool& demoteStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute addToWishListStatus.
    virtual void fireAddToWishListStatusAttributeChanged(const bool& addToWishListStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute mRemoteCDDiscStatus.
    virtual void fireMRemoteCDDiscStatusAttributeChanged(const ::v3::com::harman::mmpres::MMPresTypes::eRemoteCDDiscStatus& mRemoteCDDiscStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute mRemoteCDErrorStatus.
    virtual void fireMRemoteCDErrorStatusAttributeChanged(const ::v3::com::harman::mmpres::MMPresTypes::RemoteCDErrorStatus& mRemoteCDErrorStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute mRemoteCDEjectChimesWarning.
    virtual void fireMRemoteCDEjectChimesWarningAttributeChanged(const bool& mRemoteCDEjectChimesWarning) = 0;
    ///Notifies all remote listeners about a change of value of the attribute mCDEOLStatus.
    virtual void fireMCDEOLStatusAttributeChanged(const ::v3::com::harman::mmpres::MMPresTypes::eCDEOLStatus& mCDEOLStatus) = 0;



    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for MediaPlayer.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class MediaPlayerStubRemoteEvent
{
public:
    virtual ~MediaPlayerStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service MediaPlayer to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class MediaPlayerStub
    : public virtual CommonAPI::Stub<MediaPlayerStubAdapter, MediaPlayerStubRemoteEvent>
{
public:
    typedef std::function<void ()>sendIAP2KeyEventReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::eCallResult _result)>playAllReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::eCallResult _result)>nextReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::eCallResult _result)>previousReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::eCallResult _result)>pauseReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::eCallResult _result)>resumeReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::eCallResult _result)>seekToTimeReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::eCallResult _result)>fastForwardReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::eCallResult _result)>fastReverseReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::eCallResult _result)>setRepeatReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::eCallResult _result)>setShuffleReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::tAlbumArtInformation _albumArtInfo)>getNowPlayingAlbumArtInformationReply_t;
    typedef std::function<void (std::string _path)>getNowPlayingAlbumArtPathReply_t;
    typedef std::function<void (std::vector<uint8_t> _albumArtData)>getNowPlayingAlbumArtDataReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::tAlbumArtInformation _albumArtInfo)>getAlbumArtInformationForTrackReply_t;
    typedef std::function<void (std::string _path)>getAlbumArtPathForTrackReply_t;
    typedef std::function<void (std::vector<uint8_t> _albumArtData)>getAlbumArtDataForTrackReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::eCallResult _result)>setSpeedReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::ePlaybackSpeed _speed)>getSpeedReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::eCallResult _result)>promoteReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::eCallResult _result)>demoteReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::eCallResult _result)>addToWishListReply_t;

    virtual ~MediaPlayerStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /// Provides getter access to the attribute currentPlayTime
    virtual const uint64_t &getCurrentPlayTimeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute totalPlayDuration
    virtual const uint64_t &getTotalPlayDurationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute trackState
    virtual const ::v3::com::harman::mmpres::MMPresTypes::tTrackState &getTrackStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute nowPlayingData
    virtual const ::v3::com::harman::mmpres::MMPresTypes::tNowPlayingInfo &getNowPlayingDataAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute playState
    virtual const ::v3::com::harman::mmpres::MMPresTypes::ePlayState &getPlayStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute speed
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed &getSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute repeatMode
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eRepeatMode &getRepeatModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute shuffleMode
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eShuffleMode &getShuffleModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute playbackSpeed
    virtual const ::v3::com::harman::mmpres::MMPresTypes::tPlaybackSpeed &getPlaybackSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Indicates the status of the Playsession for the device
     */
    /// Provides getter access to the attribute playsessionState
    virtual const ::v3::com::harman::mmpres::MMPresTypes::PlaySessionStateMap &getPlaysessionStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Indicates the connection status of the active BT device if it has been
     *   disconnected due to Link loss
     */
    /// Provides getter access to the attribute activeDeviceBTLinkLoss
    virtual const bool &getActiveDeviceBTLinkLossAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute nowPlayingArtworkStatus
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus &getNowPlayingArtworkStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute playbackPreview
    virtual const ::v3::com::harman::mmpres::MMPresTypes::MetadataItemList &getPlaybackPreviewAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Indicates playback video only,true: start video play; false: stop
     */
    /// Provides getter access to the attribute videoPlayStatus
    virtual const bool &getVideoPlayStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Indicates change in the BT Player. Provides the MediumID for which the change
     *   has occured
     */
    /// Provides getter access to the attribute RemotePlayerChanged
    virtual const uint32_t &getRemotePlayerChangedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Indicates current BT Player capability
     */
    /// Provides getter access to the attribute remotePlayerCapability
    virtual const ::v3::com::harman::mmpres::MMPresTypes::tRemotePlayerCapability &getRemotePlayerCapabilityAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Indicates the error encountered by Media
     */
    /// Provides getter access to the attribute mediaError
    virtual const ::v3::com::harman::mmpres::MMPresTypes::MediaErrorMap &getMediaErrorAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Provides the sync level information for the device
     */
    /// Provides getter access to the attribute syncStatus
    virtual const ::v3::com::harman::mmpres::MMPresTypes::SyncMap &getSyncStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Provides whether the device supports NowPlayingSupport browse information for
     *   the device
     */
    /// Provides getter access to the attribute trackListSupport
    virtual const ::v3::com::harman::mmpres::MMPresTypes::tTrackListSupport &getTrackListSupportAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Indicates the status of the buttons for the currently playing iTunes station
     */
    /// Provides getter access to the attribute promoteStatus
    virtual const bool &getPromoteStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute demoteStatus
    virtual const bool &getDemoteStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute addToWishListStatus
    virtual const bool &getAddToWishListStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Provides RemoteCD disc status
     */
    /// Provides getter access to the attribute mRemoteCDDiscStatus
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eRemoteCDDiscStatus &getMRemoteCDDiscStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Provides RemoteCD disc status
     */
    /// Provides getter access to the attribute mRemoteCDErrorStatus
    virtual const ::v3::com::harman::mmpres::MMPresTypes::RemoteCDErrorStatus &getMRemoteCDErrorStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute mRemoteCDEjectChimesWarning
    virtual const bool &getMRemoteCDEjectChimesWarningAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Provides  RemoteCD EOL Status
     */
    /// Provides getter access to the attribute mCDEOLStatus
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eCDEOLStatus &getMCDEOLStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /**
     * description: Method to send the button events received from HMI
     */
    /// This is the method that will be called on remote calls on the method sendIAP2KeyEvent.
    virtual void sendIAP2KeyEvent(const std::shared_ptr<CommonAPI::ClientId> _client, ::v3::com::harman::mmpres::MMPresTypes::IAP2ButtonType _buttonType, bool _pressed, sendIAP2KeyEventReply_t _reply) = 0;
    /**
     * description: Method to initiate the playback of all items of a specific object type in the
     *   device
     */
    /// This is the method that will be called on remote calls on the method playAll.
    virtual void playAll(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _slotId, ::v3::com::harman::mmpres::MMPresTypes::eMetadataType _objectType, playAllReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method next.
    virtual void next(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _step, nextReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method previous.
    virtual void previous(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _step, previousReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method pause.
    virtual void pause(const std::shared_ptr<CommonAPI::ClientId> _client, pauseReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method resume.
    virtual void resume(const std::shared_ptr<CommonAPI::ClientId> _client, resumeReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method seekToTime.
    virtual void seekToTime(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _timePosition, seekToTimeReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method fastForward.
    virtual void fastForward(const std::shared_ptr<CommonAPI::ClientId> _client, fastForwardReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method fastReverse.
    virtual void fastReverse(const std::shared_ptr<CommonAPI::ClientId> _client, fastReverseReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method setRepeat.
    virtual void setRepeat(const std::shared_ptr<CommonAPI::ClientId> _client, ::v3::com::harman::mmpres::MMPresTypes::eRepeatMode _mode, setRepeatReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method setShuffle.
    virtual void setShuffle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v3::com::harman::mmpres::MMPresTypes::eShuffleMode _mode, setShuffleReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method getNowPlayingAlbumArtInformation.
    virtual void getNowPlayingAlbumArtInformation(const std::shared_ptr<CommonAPI::ClientId> _client, getNowPlayingAlbumArtInformationReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method getNowPlayingAlbumArtPath.
    virtual void getNowPlayingAlbumArtPath(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _imageNumber, getNowPlayingAlbumArtPathReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method getNowPlayingAlbumArtData.
    virtual void getNowPlayingAlbumArtData(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _imageNumber, getNowPlayingAlbumArtDataReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method getAlbumArtInformationForTrack.
    virtual void getAlbumArtInformationForTrack(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _trackId, getAlbumArtInformationForTrackReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method getAlbumArtPathForTrack.
    virtual void getAlbumArtPathForTrack(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _trackId, uint8_t _imageNumber, getAlbumArtPathForTrackReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method getAlbumArtDataForTrack.
    virtual void getAlbumArtDataForTrack(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _trackId, uint8_t _imageNumber, getAlbumArtDataForTrackReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method setSpeed.
    virtual void setSpeed(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _slotId, ::v3::com::harman::mmpres::MMPresTypes::eMetadataType _type, ::v3::com::harman::mmpres::MMPresTypes::ePlaybackSpeed _speed, setSpeedReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method getSpeed.
    virtual void getSpeed(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _slotId, ::v3::com::harman::mmpres::MMPresTypes::eMetadataType _type, getSpeedReply_t _reply) = 0;
    /**
     * description: Promote the track
     * param: fileId is the fileID of the iTunes Station to be promoted. 0 can be used for
     *   current station
     */
    /// This is the method that will be called on remote calls on the method promote.
    virtual void promote(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _fileId, promoteReply_t _reply) = 0;
    /**
     * description: demote the track
     * param: fileId is the fileID of the iTunes Station to be demoted. 0 can be used for
     *   current station
     */
    /// This is the method that will be called on remote calls on the method demote.
    virtual void demote(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _fileId, demoteReply_t _reply) = 0;
    /**
     * description: add iTunes station to a WishList
     * param: fileId is the fileID of the iTunes Station to be added to the wishlist. 0 can
     *   be used for current station
     */
    /// This is the method that will be called on remote calls on the method addToWishList.
    virtual void addToWishList(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _fileId, addToWishListReply_t _reply) = 0;

    using CommonAPI::Stub<MediaPlayerStubAdapter, MediaPlayerStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<MediaPlayerStubAdapter, MediaPlayerStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<MediaPlayerStubAdapter, MediaPlayerStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef MediaPlayerStubRemoteEvent RemoteEventType;
    typedef MediaPlayer StubInterface;
};

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_1 = v1;

#endif // V1_COM_HARMAN_MMPRES_Media_Player_STUB_HPP_
