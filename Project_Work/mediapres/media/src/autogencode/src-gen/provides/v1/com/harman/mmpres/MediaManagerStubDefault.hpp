/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_HARMAN_MMPRES_Media_Manager_STUB_DEFAULT_HPP_
#define V1_COM_HARMAN_MMPRES_Media_Manager_STUB_DEFAULT_HPP_


#include <v1/com/harman/mmpres/MediaManagerStub.hpp>
#include <sstream>

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

/**
 * Provides a default implementation for MediaManagerStubRemoteEvent and
 * MediaManagerStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class MediaManagerStubDefault
    : public virtual MediaManagerStub {
public:
    MediaManagerStubDefault();

    MediaManagerStubRemoteEvent* initStubAdapter(const std::shared_ptr<MediaManagerStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);


    /**
     * description: Gets details for all the configured slots in the pres ctrl. Whichever slots are
     *   configured in the Presentation Controller config will be returned here, with
     *   the  					  current status.  	 		               returns:	  tSlotList:	Slot data
     */
    virtual void getSlots(const std::shared_ptr<CommonAPI::ClientId> _client, getSlotsReply_t _reply);
    /**
     * description: Gets additional details of the device in a particular slot 	 		              
     *   returns:	  tAdditionalDeviceInfo:	Additional Hw and firware info
     */
    virtual void getAdditionalDeviceInfo(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _slotId, getAdditionalDeviceInfoReply_t _reply);

/**
 * description: Emitted if there is a state change for any slot.  	 		               returns:	 
 *   slot:	Slot data
 */
virtual void fireSlotUpdateEvent(const ::v3::com::harman::mmpres::MMPresTypes::tSlot &_slot);


protected:
    class RemoteEventHandler: public virtual MediaManagerStubRemoteEvent {
    public:
        RemoteEventHandler(MediaManagerStubDefault *_defaultStub);


    private:
        MediaManagerStubDefault *defaultStub_;
    };
private:
    MediaManagerStubDefault::RemoteEventHandler remoteEventHandler_;


    CommonAPI::Version interfaceVersion_;
};

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_MMPRES_Media_Manager_STUB_DEFAULT
