/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_HARMAN_MMPRES_Media_Player_STUB_DEFAULT_HPP_
#define V1_COM_HARMAN_MMPRES_Media_Player_STUB_DEFAULT_HPP_


#include <v1/com/harman/mmpres/MediaPlayerStub.hpp>
#include <sstream>

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

/**
 * Provides a default implementation for MediaPlayerStubRemoteEvent and
 * MediaPlayerStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class MediaPlayerStubDefault
    : public virtual MediaPlayerStub {
public:
    MediaPlayerStubDefault();

    MediaPlayerStubRemoteEvent* initStubAdapter(const std::shared_ptr<MediaPlayerStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    virtual const uint64_t& getCurrentPlayTimeAttribute();
    virtual const uint64_t& getCurrentPlayTimeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setCurrentPlayTimeAttribute(uint64_t _value);
    virtual const uint64_t& getTotalPlayDurationAttribute();
    virtual const uint64_t& getTotalPlayDurationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setTotalPlayDurationAttribute(uint64_t _value);
    virtual const ::v3::com::harman::mmpres::MMPresTypes::tTrackState& getTrackStateAttribute();
    virtual const ::v3::com::harman::mmpres::MMPresTypes::tTrackState& getTrackStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setTrackStateAttribute(::v3::com::harman::mmpres::MMPresTypes::tTrackState _value);
    virtual const ::v3::com::harman::mmpres::MMPresTypes::tNowPlayingInfo& getNowPlayingDataAttribute();
    virtual const ::v3::com::harman::mmpres::MMPresTypes::tNowPlayingInfo& getNowPlayingDataAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setNowPlayingDataAttribute(::v3::com::harman::mmpres::MMPresTypes::tNowPlayingInfo _value);
    virtual const ::v3::com::harman::mmpres::MMPresTypes::ePlayState& getPlayStateAttribute();
    virtual const ::v3::com::harman::mmpres::MMPresTypes::ePlayState& getPlayStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPlayStateAttribute(::v3::com::harman::mmpres::MMPresTypes::ePlayState _value);
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed& getSpeedAttribute();
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed& getSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setSpeedAttribute(::v3::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed _value);
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eRepeatMode& getRepeatModeAttribute();
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eRepeatMode& getRepeatModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setRepeatModeAttribute(::v3::com::harman::mmpres::MMPresTypes::eRepeatMode _value);
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eShuffleMode& getShuffleModeAttribute();
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eShuffleMode& getShuffleModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setShuffleModeAttribute(::v3::com::harman::mmpres::MMPresTypes::eShuffleMode _value);
    virtual const ::v3::com::harman::mmpres::MMPresTypes::tPlaybackSpeed& getPlaybackSpeedAttribute();
    virtual const ::v3::com::harman::mmpres::MMPresTypes::tPlaybackSpeed& getPlaybackSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPlaybackSpeedAttribute(::v3::com::harman::mmpres::MMPresTypes::tPlaybackSpeed _value);
    virtual const ::v3::com::harman::mmpres::MMPresTypes::PlaySessionStateMap& getPlaysessionStateAttribute();
    virtual const ::v3::com::harman::mmpres::MMPresTypes::PlaySessionStateMap& getPlaysessionStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPlaysessionStateAttribute(::v3::com::harman::mmpres::MMPresTypes::PlaySessionStateMap _value);
    virtual const bool& getActiveDeviceBTLinkLossAttribute();
    virtual const bool& getActiveDeviceBTLinkLossAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setActiveDeviceBTLinkLossAttribute(bool _value);
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus& getNowPlayingArtworkStatusAttribute();
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus& getNowPlayingArtworkStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setNowPlayingArtworkStatusAttribute(::v3::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus _value);
    virtual const ::v3::com::harman::mmpres::MMPresTypes::MetadataItemList& getPlaybackPreviewAttribute();
    virtual const ::v3::com::harman::mmpres::MMPresTypes::MetadataItemList& getPlaybackPreviewAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPlaybackPreviewAttribute(::v3::com::harman::mmpres::MMPresTypes::MetadataItemList _value);
    virtual const bool& getVideoPlayStatusAttribute();
    virtual const bool& getVideoPlayStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setVideoPlayStatusAttribute(bool _value);
    virtual const uint32_t& getRemotePlayerChangedAttribute();
    virtual const uint32_t& getRemotePlayerChangedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setRemotePlayerChangedAttribute(uint32_t _value);
    virtual const ::v3::com::harman::mmpres::MMPresTypes::tRemotePlayerCapability& getRemotePlayerCapabilityAttribute();
    virtual const ::v3::com::harman::mmpres::MMPresTypes::tRemotePlayerCapability& getRemotePlayerCapabilityAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setRemotePlayerCapabilityAttribute(::v3::com::harman::mmpres::MMPresTypes::tRemotePlayerCapability _value);
    virtual const ::v3::com::harman::mmpres::MMPresTypes::MediaErrorMap& getMediaErrorAttribute();
    virtual const ::v3::com::harman::mmpres::MMPresTypes::MediaErrorMap& getMediaErrorAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setMediaErrorAttribute(::v3::com::harman::mmpres::MMPresTypes::MediaErrorMap _value);
    virtual const ::v3::com::harman::mmpres::MMPresTypes::SyncMap& getSyncStatusAttribute();
    virtual const ::v3::com::harman::mmpres::MMPresTypes::SyncMap& getSyncStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setSyncStatusAttribute(::v3::com::harman::mmpres::MMPresTypes::SyncMap _value);
    virtual const ::v3::com::harman::mmpres::MMPresTypes::tTrackListSupport& getTrackListSupportAttribute();
    virtual const ::v3::com::harman::mmpres::MMPresTypes::tTrackListSupport& getTrackListSupportAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setTrackListSupportAttribute(::v3::com::harman::mmpres::MMPresTypes::tTrackListSupport _value);
    virtual const bool& getPromoteStatusAttribute();
    virtual const bool& getPromoteStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPromoteStatusAttribute(bool _value);
    virtual const bool& getDemoteStatusAttribute();
    virtual const bool& getDemoteStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setDemoteStatusAttribute(bool _value);
    virtual const bool& getAddToWishListStatusAttribute();
    virtual const bool& getAddToWishListStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setAddToWishListStatusAttribute(bool _value);
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eRemoteCDDiscStatus& getMRemoteCDDiscStatusAttribute();
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eRemoteCDDiscStatus& getMRemoteCDDiscStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setMRemoteCDDiscStatusAttribute(::v3::com::harman::mmpres::MMPresTypes::eRemoteCDDiscStatus _value);
    virtual const ::v3::com::harman::mmpres::MMPresTypes::RemoteCDErrorStatus& getMRemoteCDErrorStatusAttribute();
    virtual const ::v3::com::harman::mmpres::MMPresTypes::RemoteCDErrorStatus& getMRemoteCDErrorStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setMRemoteCDErrorStatusAttribute(::v3::com::harman::mmpres::MMPresTypes::RemoteCDErrorStatus _value);
    virtual const bool& getMRemoteCDEjectChimesWarningAttribute();
    virtual const bool& getMRemoteCDEjectChimesWarningAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setMRemoteCDEjectChimesWarningAttribute(bool _value);
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eCDEOLStatus& getMCDEOLStatusAttribute();
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eCDEOLStatus& getMCDEOLStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setMCDEOLStatusAttribute(::v3::com::harman::mmpres::MMPresTypes::eCDEOLStatus _value);

    /**
     * description: Method to send the button events received from HMI
     */
    virtual void sendIAP2KeyEvent(const std::shared_ptr<CommonAPI::ClientId> _client, ::v3::com::harman::mmpres::MMPresTypes::IAP2ButtonType _buttonType, bool _pressed, sendIAP2KeyEventReply_t _reply);
    /**
     * description: Method to initiate the playback of all items of a specific object type in the
     *   device
     */
    virtual void playAll(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _slotId, ::v3::com::harman::mmpres::MMPresTypes::eMetadataType _objectType, playAllReply_t _reply);
    virtual void next(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _step, nextReply_t _reply);
    virtual void previous(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _step, previousReply_t _reply);
    virtual void pause(const std::shared_ptr<CommonAPI::ClientId> _client, pauseReply_t _reply);
    virtual void resume(const std::shared_ptr<CommonAPI::ClientId> _client, resumeReply_t _reply);
    virtual void seekToTime(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _timePosition, seekToTimeReply_t _reply);
    virtual void fastForward(const std::shared_ptr<CommonAPI::ClientId> _client, fastForwardReply_t _reply);
    virtual void fastReverse(const std::shared_ptr<CommonAPI::ClientId> _client, fastReverseReply_t _reply);
    virtual void setRepeat(const std::shared_ptr<CommonAPI::ClientId> _client, ::v3::com::harman::mmpres::MMPresTypes::eRepeatMode _mode, setRepeatReply_t _reply);
    virtual void setShuffle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v3::com::harman::mmpres::MMPresTypes::eShuffleMode _mode, setShuffleReply_t _reply);
    virtual void getNowPlayingAlbumArtInformation(const std::shared_ptr<CommonAPI::ClientId> _client, getNowPlayingAlbumArtInformationReply_t _reply);
    virtual void getNowPlayingAlbumArtPath(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _imageNumber, getNowPlayingAlbumArtPathReply_t _reply);
    virtual void getNowPlayingAlbumArtData(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _imageNumber, getNowPlayingAlbumArtDataReply_t _reply);
    virtual void getAlbumArtInformationForTrack(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _trackId, getAlbumArtInformationForTrackReply_t _reply);
    virtual void getAlbumArtPathForTrack(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _trackId, uint8_t _imageNumber, getAlbumArtPathForTrackReply_t _reply);
    virtual void getAlbumArtDataForTrack(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _trackId, uint8_t _imageNumber, getAlbumArtDataForTrackReply_t _reply);
    virtual void setSpeed(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _slotId, ::v3::com::harman::mmpres::MMPresTypes::eMetadataType _type, ::v3::com::harman::mmpres::MMPresTypes::ePlaybackSpeed _speed, setSpeedReply_t _reply);
    virtual void getSpeed(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _slotId, ::v3::com::harman::mmpres::MMPresTypes::eMetadataType _type, getSpeedReply_t _reply);
    /**
     * description: Promote the track
     * param: fileId is the fileID of the iTunes Station to be promoted. 0 can be used for
     *   current station
     */
    virtual void promote(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _fileId, promoteReply_t _reply);
    /**
     * description: demote the track
     * param: fileId is the fileID of the iTunes Station to be demoted. 0 can be used for
     *   current station
     */
    virtual void demote(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _fileId, demoteReply_t _reply);
    /**
     * description: add iTunes station to a WishList
     * param: fileId is the fileID of the iTunes Station to be added to the wishlist. 0 can
     *   be used for current station
     */
    virtual void addToWishList(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _fileId, addToWishListReply_t _reply);



protected:
    virtual bool trySetCurrentPlayTimeAttribute(uint64_t _value);
    virtual bool validateCurrentPlayTimeAttributeRequestedValue(const uint64_t &_value);
    virtual bool trySetTotalPlayDurationAttribute(uint64_t _value);
    virtual bool validateTotalPlayDurationAttributeRequestedValue(const uint64_t &_value);
    virtual bool trySetTrackStateAttribute(::v3::com::harman::mmpres::MMPresTypes::tTrackState _value);
    virtual bool validateTrackStateAttributeRequestedValue(const ::v3::com::harman::mmpres::MMPresTypes::tTrackState &_value);
    virtual bool trySetNowPlayingDataAttribute(::v3::com::harman::mmpres::MMPresTypes::tNowPlayingInfo _value);
    virtual bool validateNowPlayingDataAttributeRequestedValue(const ::v3::com::harman::mmpres::MMPresTypes::tNowPlayingInfo &_value);
    virtual bool trySetPlayStateAttribute(::v3::com::harman::mmpres::MMPresTypes::ePlayState _value);
    virtual bool validatePlayStateAttributeRequestedValue(const ::v3::com::harman::mmpres::MMPresTypes::ePlayState &_value);
    virtual bool trySetSpeedAttribute(::v3::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed _value);
    virtual bool validateSpeedAttributeRequestedValue(const ::v3::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed &_value);
    virtual bool trySetRepeatModeAttribute(::v3::com::harman::mmpres::MMPresTypes::eRepeatMode _value);
    virtual bool validateRepeatModeAttributeRequestedValue(const ::v3::com::harman::mmpres::MMPresTypes::eRepeatMode &_value);
    virtual bool trySetShuffleModeAttribute(::v3::com::harman::mmpres::MMPresTypes::eShuffleMode _value);
    virtual bool validateShuffleModeAttributeRequestedValue(const ::v3::com::harman::mmpres::MMPresTypes::eShuffleMode &_value);
    virtual bool trySetPlaybackSpeedAttribute(::v3::com::harman::mmpres::MMPresTypes::tPlaybackSpeed _value);
    virtual bool validatePlaybackSpeedAttributeRequestedValue(const ::v3::com::harman::mmpres::MMPresTypes::tPlaybackSpeed &_value);
    /**
     * description: Indicates the status of the Playsession for the device
     */
    virtual bool trySetPlaysessionStateAttribute(::v3::com::harman::mmpres::MMPresTypes::PlaySessionStateMap _value);
    virtual bool validatePlaysessionStateAttributeRequestedValue(const ::v3::com::harman::mmpres::MMPresTypes::PlaySessionStateMap &_value);
    /**
     * description: Indicates the connection status of the active BT device if it has been
     *   disconnected due to Link loss
     */
    virtual bool trySetActiveDeviceBTLinkLossAttribute(bool _value);
    virtual bool validateActiveDeviceBTLinkLossAttributeRequestedValue(const bool &_value);
    virtual bool trySetNowPlayingArtworkStatusAttribute(::v3::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus _value);
    virtual bool validateNowPlayingArtworkStatusAttributeRequestedValue(const ::v3::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus &_value);
    virtual bool trySetPlaybackPreviewAttribute(::v3::com::harman::mmpres::MMPresTypes::MetadataItemList _value);
    virtual bool validatePlaybackPreviewAttributeRequestedValue(const ::v3::com::harman::mmpres::MMPresTypes::MetadataItemList &_value);
    /**
     * description: Indicates playback video only,true: start video play; false: stop
     */
    virtual bool trySetVideoPlayStatusAttribute(bool _value);
    virtual bool validateVideoPlayStatusAttributeRequestedValue(const bool &_value);
    /**
     * description: Indicates change in the BT Player. Provides the MediumID for which the change
     *   has occured
     */
    virtual bool trySetRemotePlayerChangedAttribute(uint32_t _value);
    virtual bool validateRemotePlayerChangedAttributeRequestedValue(const uint32_t &_value);
    /**
     * description: Indicates current BT Player capability
     */
    virtual bool trySetRemotePlayerCapabilityAttribute(::v3::com::harman::mmpres::MMPresTypes::tRemotePlayerCapability _value);
    virtual bool validateRemotePlayerCapabilityAttributeRequestedValue(const ::v3::com::harman::mmpres::MMPresTypes::tRemotePlayerCapability &_value);
    /**
     * description: Indicates the error encountered by Media
     */
    virtual bool trySetMediaErrorAttribute(::v3::com::harman::mmpres::MMPresTypes::MediaErrorMap _value);
    virtual bool validateMediaErrorAttributeRequestedValue(const ::v3::com::harman::mmpres::MMPresTypes::MediaErrorMap &_value);
    /**
     * description: Provides the sync level information for the device
     */
    virtual bool trySetSyncStatusAttribute(::v3::com::harman::mmpres::MMPresTypes::SyncMap _value);
    virtual bool validateSyncStatusAttributeRequestedValue(const ::v3::com::harman::mmpres::MMPresTypes::SyncMap &_value);
    /**
     * description: Provides whether the device supports NowPlayingSupport browse information for
     *   the device
     */
    virtual bool trySetTrackListSupportAttribute(::v3::com::harman::mmpres::MMPresTypes::tTrackListSupport _value);
    virtual bool validateTrackListSupportAttributeRequestedValue(const ::v3::com::harman::mmpres::MMPresTypes::tTrackListSupport &_value);
    /**
     * description: Indicates the status of the buttons for the currently playing iTunes station
     */
    virtual bool trySetPromoteStatusAttribute(bool _value);
    virtual bool validatePromoteStatusAttributeRequestedValue(const bool &_value);
    virtual bool trySetDemoteStatusAttribute(bool _value);
    virtual bool validateDemoteStatusAttributeRequestedValue(const bool &_value);
    virtual bool trySetAddToWishListStatusAttribute(bool _value);
    virtual bool validateAddToWishListStatusAttributeRequestedValue(const bool &_value);
    /**
     * description: Provides RemoteCD disc status
     */
    virtual bool trySetMRemoteCDDiscStatusAttribute(::v3::com::harman::mmpres::MMPresTypes::eRemoteCDDiscStatus _value);
    virtual bool validateMRemoteCDDiscStatusAttributeRequestedValue(const ::v3::com::harman::mmpres::MMPresTypes::eRemoteCDDiscStatus &_value);
    /**
     * description: Provides RemoteCD disc status
     */
    virtual bool trySetMRemoteCDErrorStatusAttribute(::v3::com::harman::mmpres::MMPresTypes::RemoteCDErrorStatus _value);
    virtual bool validateMRemoteCDErrorStatusAttributeRequestedValue(const ::v3::com::harman::mmpres::MMPresTypes::RemoteCDErrorStatus &_value);
    virtual bool trySetMRemoteCDEjectChimesWarningAttribute(bool _value);
    virtual bool validateMRemoteCDEjectChimesWarningAttributeRequestedValue(const bool &_value);
    /**
     * description: Provides  RemoteCD EOL Status
     */
    virtual bool trySetMCDEOLStatusAttribute(::v3::com::harman::mmpres::MMPresTypes::eCDEOLStatus _value);
    virtual bool validateMCDEOLStatusAttributeRequestedValue(const ::v3::com::harman::mmpres::MMPresTypes::eCDEOLStatus &_value);
    class RemoteEventHandler: public virtual MediaPlayerStubRemoteEvent {
    public:
        RemoteEventHandler(MediaPlayerStubDefault *_defaultStub);










        /**
         * description: Indicates the status of the Playsession for the device
         */

        /**
         * description: Indicates the connection status of the active BT device if it has been
         *   disconnected due to Link loss
         */



        /**
         * description: Indicates playback video only,true: start video play; false: stop
         */

        /**
         * description: Indicates change in the BT Player. Provides the MediumID for which the change
         *   has occured
         */

        /**
         * description: Indicates current BT Player capability
         */

        /**
         * description: Indicates the error encountered by Media
         */

        /**
         * description: Provides the sync level information for the device
         */

        /**
         * description: Provides whether the device supports NowPlayingSupport browse information for
         *   the device
         */

        /**
         * description: Indicates the status of the buttons for the currently playing iTunes station
         */



        /**
         * description: Provides RemoteCD disc status
         */

        /**
         * description: Provides RemoteCD disc status
         */


        /**
         * description: Provides  RemoteCD EOL Status
         */


    private:
        MediaPlayerStubDefault *defaultStub_;
    };
private:
    MediaPlayerStubDefault::RemoteEventHandler remoteEventHandler_;

    uint64_t currentPlayTimeAttributeValue_ {};
    uint64_t totalPlayDurationAttributeValue_ {};
    ::v3::com::harman::mmpres::MMPresTypes::tTrackState trackStateAttributeValue_ {};
    ::v3::com::harman::mmpres::MMPresTypes::tNowPlayingInfo nowPlayingDataAttributeValue_ {};
    ::v3::com::harman::mmpres::MMPresTypes::ePlayState playStateAttributeValue_ {};
    ::v3::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed speedAttributeValue_ {};
    ::v3::com::harman::mmpres::MMPresTypes::eRepeatMode repeatModeAttributeValue_ {};
    ::v3::com::harman::mmpres::MMPresTypes::eShuffleMode shuffleModeAttributeValue_ {};
    ::v3::com::harman::mmpres::MMPresTypes::tPlaybackSpeed playbackSpeedAttributeValue_ {};
    /**
     * description: Indicates the status of the Playsession for the device
     */
    ::v3::com::harman::mmpres::MMPresTypes::PlaySessionStateMap playsessionStateAttributeValue_ {};
    /**
     * description: Indicates the connection status of the active BT device if it has been
     *   disconnected due to Link loss
     */
    bool activeDeviceBTLinkLossAttributeValue_ {};
    ::v3::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus nowPlayingArtworkStatusAttributeValue_ {};
    ::v3::com::harman::mmpres::MMPresTypes::MetadataItemList playbackPreviewAttributeValue_ {};
    /**
     * description: Indicates playback video only,true: start video play; false: stop
     */
    bool videoPlayStatusAttributeValue_ {};
    /**
     * description: Indicates change in the BT Player. Provides the MediumID for which the change
     *   has occured
     */
    uint32_t remotePlayerChangedAttributeValue_ {};
    /**
     * description: Indicates current BT Player capability
     */
    ::v3::com::harman::mmpres::MMPresTypes::tRemotePlayerCapability remotePlayerCapabilityAttributeValue_ {};
    /**
     * description: Indicates the error encountered by Media
     */
    ::v3::com::harman::mmpres::MMPresTypes::MediaErrorMap mediaErrorAttributeValue_ {};
    /**
     * description: Provides the sync level information for the device
     */
    ::v3::com::harman::mmpres::MMPresTypes::SyncMap syncStatusAttributeValue_ {};
    /**
     * description: Provides whether the device supports NowPlayingSupport browse information for
     *   the device
     */
    ::v3::com::harman::mmpres::MMPresTypes::tTrackListSupport trackListSupportAttributeValue_ {};
    /**
     * description: Indicates the status of the buttons for the currently playing iTunes station
     */
    bool promoteStatusAttributeValue_ {};
    bool demoteStatusAttributeValue_ {};
    bool addToWishListStatusAttributeValue_ {};
    /**
     * description: Provides RemoteCD disc status
     */
    ::v3::com::harman::mmpres::MMPresTypes::eRemoteCDDiscStatus mRemoteCDDiscStatusAttributeValue_ {};
    /**
     * description: Provides RemoteCD disc status
     */
    ::v3::com::harman::mmpres::MMPresTypes::RemoteCDErrorStatus mRemoteCDErrorStatusAttributeValue_ {};
    bool mRemoteCDEjectChimesWarningAttributeValue_ {};
    /**
     * description: Provides  RemoteCD EOL Status
     */
    ::v3::com::harman::mmpres::MMPresTypes::eCDEOLStatus mCDEOLStatusAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_1 = v1;

#endif // V1_COM_HARMAN_MMPRES_Media_Player_STUB_DEFAULT
