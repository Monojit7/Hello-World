/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/com/harman/mmpres/MediaSettingsStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

MediaSettingsStubDefault::MediaSettingsStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(MediaSettings::getInterfaceVersion()) {
}

const CommonAPI::Version& MediaSettingsStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

MediaSettingsStubRemoteEvent* MediaSettingsStubDefault::initStubAdapter(const std::shared_ptr<MediaSettingsStubAdapter> &_adapter) {
    CommonAPI::Stub<MediaSettingsStubAdapter, MediaSettingsStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

const ::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus& MediaSettingsStubDefault::getSubtitleStatusAttribute() {
    return subtitleStatusAttributeValue_;
}

const ::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus& MediaSettingsStubDefault::getSubtitleStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getSubtitleStatusAttribute();
}

void MediaSettingsStubDefault::setSubtitleStatusAttribute(::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus _value) {
    const bool valueChanged = trySetSubtitleStatusAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<MediaSettingsStubAdapter, MediaSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireSubtitleStatusAttributeChanged(subtitleStatusAttributeValue_);
    }
}

bool MediaSettingsStubDefault::trySetSubtitleStatusAttribute(::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus _value) {
    if (!validateSubtitleStatusAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (subtitleStatusAttributeValue_ != _value);
    subtitleStatusAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool MediaSettingsStubDefault::validateSubtitleStatusAttributeRequestedValue(const ::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus &_value) {
    (void)_value;
	return _value.validate();
}


const bool& MediaSettingsStubDefault::getIsFullScreenAttribute() {
    return isFullScreenAttributeValue_;
}

const bool& MediaSettingsStubDefault::getIsFullScreenAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getIsFullScreenAttribute();
}

void MediaSettingsStubDefault::setIsFullScreenAttribute(bool _value) {
    const bool valueChanged = trySetIsFullScreenAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<MediaSettingsStubAdapter, MediaSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireIsFullScreenAttributeChanged(isFullScreenAttributeValue_);
    }
}

bool MediaSettingsStubDefault::trySetIsFullScreenAttribute(bool _value) {
    if (!validateIsFullScreenAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (isFullScreenAttributeValue_ != _value);
    isFullScreenAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool MediaSettingsStubDefault::validateIsFullScreenAttributeRequestedValue(const bool &_value) {
    (void)_value;
	return true;
}


const ::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus& MediaSettingsStubDefault::getAudioChannelAttribute() {
    return audioChannelAttributeValue_;
}

const ::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus& MediaSettingsStubDefault::getAudioChannelAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getAudioChannelAttribute();
}

void MediaSettingsStubDefault::setAudioChannelAttribute(::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus _value) {
    const bool valueChanged = trySetAudioChannelAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<MediaSettingsStubAdapter, MediaSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireAudioChannelAttributeChanged(audioChannelAttributeValue_);
    }
}

bool MediaSettingsStubDefault::trySetAudioChannelAttribute(::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus _value) {
    if (!validateAudioChannelAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (audioChannelAttributeValue_ != _value);
    audioChannelAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool MediaSettingsStubDefault::validateAudioChannelAttributeRequestedValue(const ::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus &_value) {
    (void)_value;
	return _value.validate();
}


const bool& MediaSettingsStubDefault::getAppleAuthenticationChipstatusAttribute() {
    return appleAuthenticationChipstatusAttributeValue_;
}

const bool& MediaSettingsStubDefault::getAppleAuthenticationChipstatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getAppleAuthenticationChipstatusAttribute();
}

void MediaSettingsStubDefault::setAppleAuthenticationChipstatusAttribute(bool _value) {
    const bool valueChanged = trySetAppleAuthenticationChipstatusAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<MediaSettingsStubAdapter, MediaSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireAppleAuthenticationChipstatusAttributeChanged(appleAuthenticationChipstatusAttributeValue_);
    }
}

bool MediaSettingsStubDefault::trySetAppleAuthenticationChipstatusAttribute(bool _value) {
    if (!validateAppleAuthenticationChipstatusAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (appleAuthenticationChipstatusAttributeValue_ != _value);
    appleAuthenticationChipstatusAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool MediaSettingsStubDefault::validateAppleAuthenticationChipstatusAttributeRequestedValue(const bool &_value) {
    (void)_value;
	return true;
}



/**
 * description: reset all the Media related settings to the default.  		e: error code.
 */
void MediaSettingsStubDefault::masterMediaReset(const std::shared_ptr<CommonAPI::ClientId> _client, masterMediaResetReply_t _reply) {
    (void)_client;
    ::v3::com::harman::mmpres::MMPresTypes::eCallResult e = ::v3::com::harman::mmpres::MMPresTypes::eCallResult::CALLRESULT_OK;
    if (!e.validate()) {
        return;
    }
    _reply(e);
}

/**
 * description: removes the database file of specified device on device ejection.
 * param: slotId: the specified slot id         returns:	  eCallResult:	Result of the API
 *   call
 */
void MediaSettingsStubDefault::resetMediaIndex(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _slotId, resetMediaIndexReply_t _reply) {
    (void)_client;
    (void) _slotId;
    ::v3::com::harman::mmpres::MMPresTypes::eCallResult e = ::v3::com::harman::mmpres::MMPresTypes::eCallResult::CALLRESULT_OK;
    if (!e.validate()) {
        return;
    }
    _reply(e);
}

/**
 * description: Updates the index of a device
 * param: slotId: the specified slot id         returns:	  e:	Result of the API call
 */
void MediaSettingsStubDefault::updateIndex(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _slotId, updateIndexReply_t _reply) {
    (void)_client;
    (void) _slotId;
    ::v3::com::harman::mmpres::MMPresTypes::eMediaError e = ::v3::com::harman::mmpres::MMPresTypes::eMediaError::MEDIAERROR_NO_ERROR;
    if (!e.validate()) {
        return;
    }
    _reply(e);
}

/**
 * description: Set Audio channel for playback
 * param: audioChannel - of type eAudioChannelStatus
 */
void MediaSettingsStubDefault::setAudioChannel(const std::shared_ptr<CommonAPI::ClientId> _client, ::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus _audioChannel, setAudioChannelReply_t _reply) {
    (void)_client;
    (void) _audioChannel;
    ::v3::com::harman::mmpres::MMPresTypes::eCallResult result = ::v3::com::harman::mmpres::MMPresTypes::eCallResult::CALLRESULT_OK;
    if (!result.validate()) {
        return;
    }
    _reply(result);
}

/**
 * description: Set Subtitle ON or OFF
 * param: dispSubtitle - eSubtitleStatus:ON is to enable Subtitle, eSubtitleStatus:OFF is
 *   to disable subtitle
 */
void MediaSettingsStubDefault::setSubtitle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus _dispSubtitle, setSubtitleReply_t _reply) {
    (void)_client;
    (void) _dispSubtitle;
    ::v3::com::harman::mmpres::MMPresTypes::eCallResult result = ::v3::com::harman::mmpres::MMPresTypes::eCallResult::CALLRESULT_OK;
    if (!result.validate()) {
        return;
    }
    _reply(result);
}

/**
 * description: Set the display window coordinates of video playback
 * param: isFullscreen True is to enable fullscreen, false is to disable fullscreen and
 *   manually assign by screeenDimension                 screeenDimension  Screen
 *   coordinates
 */
void MediaSettingsStubDefault::setDisplayWindow(const std::shared_ptr<CommonAPI::ClientId> _client, bool _isFullscreen, ::v3::com::harman::mmpres::MMPresTypes::tScreen _screeenDimension, setDisplayWindowReply_t _reply) {
    (void)_client;
    (void) _isFullscreen;
    (void) _screeenDimension;
    ::v3::com::harman::mmpres::MMPresTypes::eMediaError e = ::v3::com::harman::mmpres::MMPresTypes::eMediaError::MEDIAERROR_NO_ERROR;
    if (!e.validate()) {
        return;
    }
    _reply(e);
}




MediaSettingsStubDefault::RemoteEventHandler::RemoteEventHandler(MediaSettingsStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1
