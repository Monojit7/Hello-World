/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/org/genivi/am/routinginterface/RoutingControlStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace org {
namespace genivi {
namespace am {
namespace routinginterface {

RoutingControlStubDefault::RoutingControlStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(RoutingControl::getInterfaceVersion()) {
}

const CommonAPI::Version& RoutingControlStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

RoutingControlStubRemoteEvent* RoutingControlStubDefault::initStubAdapter(const std::shared_ptr<RoutingControlStubAdapter> &_adapter) {
    CommonAPI::Stub<RoutingControlStubAdapter, RoutingControlStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


/**
 * description: This function is used to set the source state of a particular source.
 *   (at)return E_OK on success, E_UNKNOWN on error
 */
void RoutingControlStubDefault::asyncSetSourceState(const std::shared_ptr<CommonAPI::ClientId> _client, ::v3::org::genivi::am_t::am_Handle_s _handle, ::v3::org::genivi::am_t::am_sourceID_t _sourceID, ::v3::org::genivi::am_t::am_SourceState_e _state, asyncSetSourceStateReply_t _reply) {
    (void)_client;
    (void) _handle;
    (void) _sourceID;
    (void) _state;
    _reply();
}


/**
 * description: Acknowledges for asyncSetSourceState.
 */
void RoutingControlStubDefault::fireAckSetSourceStateSelective(const ::v3::org::genivi::am_t::am_Handle_s &_handle, const ::v3::org::genivi::am_t::am_Error_e &_amError, const std::shared_ptr<CommonAPI::ClientIdList> _receivers) {
    if (!_amError.validate()) {
        return;
    }
    assert((CommonAPI::Stub<RoutingControlStubAdapter, RoutingControlStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<RoutingControlStubAdapter, RoutingControlStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->sendAckSetSourceStateSelective(_handle, _amError, _receivers);
}
void RoutingControlStubDefault::onAckSetSourceStateSelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event) {
    (void)_client;
    (void)_event;
    // No operation in default
}
bool RoutingControlStubDefault::onAckSetSourceStateSelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    // Accept in default
    return true;
}
std::shared_ptr<CommonAPI::ClientIdList> const RoutingControlStubDefault::getSubscribersForAckSetSourceStateSelective() {
    assert((CommonAPI::Stub<RoutingControlStubAdapter, RoutingControlStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<RoutingControlStubAdapter, RoutingControlStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        return(stubAdapter->getSubscribersForAckSetSourceStateSelective());
    else
        return NULL;
}



RoutingControlStubDefault::RemoteEventHandler::RemoteEventHandler(RoutingControlStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace routinginterface
} // namespace am
} // namespace genivi
} // namespace org
} // namespace v1
