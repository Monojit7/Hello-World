/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_HARMAN_MMPRES_Media_Settings_STUB_DEFAULT_HPP_
#define V1_COM_HARMAN_MMPRES_Media_Settings_STUB_DEFAULT_HPP_


#include <v1/com/harman/mmpres/MediaSettingsStub.hpp>
#include <sstream>

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

/**
 * Provides a default implementation for MediaSettingsStubRemoteEvent and
 * MediaSettingsStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class MediaSettingsStubDefault
    : public virtual MediaSettingsStub {
public:
    MediaSettingsStubDefault();

    MediaSettingsStubRemoteEvent* initStubAdapter(const std::shared_ptr<MediaSettingsStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    virtual const ::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus& getSubtitleStatusAttribute();
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus& getSubtitleStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setSubtitleStatusAttribute(::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus _value);
    virtual const bool& getIsFullScreenAttribute();
    virtual const bool& getIsFullScreenAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setIsFullScreenAttribute(bool _value);
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus& getAudioChannelAttribute();
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus& getAudioChannelAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setAudioChannelAttribute(::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus _value);
    virtual const bool& getAppleAuthenticationChipstatusAttribute();
    virtual const bool& getAppleAuthenticationChipstatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setAppleAuthenticationChipstatusAttribute(bool _value);

    /**
     * description: reset all the Media related settings to the default.  		e: error code.
     */
    virtual void masterMediaReset(const std::shared_ptr<CommonAPI::ClientId> _client, masterMediaResetReply_t _reply);
    /**
     * description: removes the database file of specified device on device ejection.
     * param: slotId: the specified slot id         returns:	  eCallResult:	Result of the API
     *   call
     */
    virtual void resetMediaIndex(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _slotId, resetMediaIndexReply_t _reply);
    /**
     * description: Updates the index of a device
     * param: slotId: the specified slot id         returns:	  e:	Result of the API call
     */
    virtual void updateIndex(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _slotId, updateIndexReply_t _reply);
    /**
     * description: Set Audio channel for playback
     * param: audioChannel - of type eAudioChannelStatus
     */
    virtual void setAudioChannel(const std::shared_ptr<CommonAPI::ClientId> _client, ::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus _audioChannel, setAudioChannelReply_t _reply);
    /**
     * description: Set Subtitle ON or OFF
     * param: dispSubtitle - eSubtitleStatus:ON is to enable Subtitle, eSubtitleStatus:OFF is
     *   to disable subtitle
     */
    virtual void setSubtitle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus _dispSubtitle, setSubtitleReply_t _reply);
    /**
     * description: Set the display window coordinates of video playback
     * param: isFullscreen True is to enable fullscreen, false is to disable fullscreen and
     *   manually assign by screeenDimension                 screeenDimension  Screen
     *   coordinates
     */
    virtual void setDisplayWindow(const std::shared_ptr<CommonAPI::ClientId> _client, bool _isFullscreen, ::v3::com::harman::mmpres::MMPresTypes::tScreen _screeenDimension, setDisplayWindowReply_t _reply);



protected:
    virtual bool trySetSubtitleStatusAttribute(::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus _value);
    virtual bool validateSubtitleStatusAttributeRequestedValue(const ::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus &_value);
    virtual bool trySetIsFullScreenAttribute(bool _value);
    virtual bool validateIsFullScreenAttributeRequestedValue(const bool &_value);
    /**
     * description: Indicates the audio channels for the current track
     */
    virtual bool trySetAudioChannelAttribute(::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus _value);
    virtual bool validateAudioChannelAttributeRequestedValue(const ::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus &_value);
    /**
     * description: this will provide information as to whether the Apple authentication ship is
     *   operational or not
     */
    virtual bool trySetAppleAuthenticationChipstatusAttribute(bool _value);
    virtual bool validateAppleAuthenticationChipstatusAttributeRequestedValue(const bool &_value);
    class RemoteEventHandler: public virtual MediaSettingsStubRemoteEvent {
    public:
        RemoteEventHandler(MediaSettingsStubDefault *_defaultStub);



        /**
         * description: Indicates the audio channels for the current track
         */

        /**
         * description: this will provide information as to whether the Apple authentication ship is
         *   operational or not
         */


    private:
        MediaSettingsStubDefault *defaultStub_;
    };
private:
    MediaSettingsStubDefault::RemoteEventHandler remoteEventHandler_;

    ::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus subtitleStatusAttributeValue_ {};
    bool isFullScreenAttributeValue_ {};
    /**
     * description: Indicates the audio channels for the current track
     */
    ::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus audioChannelAttributeValue_ {};
    /**
     * description: this will provide information as to whether the Apple authentication ship is
     *   operational or not
     */
    bool appleAuthenticationChipstatusAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_MMPRES_Media_Settings_STUB_DEFAULT
