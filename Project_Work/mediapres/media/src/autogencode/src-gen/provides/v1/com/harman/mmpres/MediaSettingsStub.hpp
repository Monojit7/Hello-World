/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_HARMAN_MMPRES_Media_Settings_STUB_HPP_
#define V1_COM_HARMAN_MMPRES_Media_Settings_STUB_HPP_

#include <functional>



#include <v3/com/harman/mmpres/MMPresTypes.hpp>

#include <v1/com/harman/mmpres/MediaSettings.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service MediaSettings. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class MediaSettingsStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual MediaSettings {
 public:
    ///Notifies all remote listeners about a change of value of the attribute subtitleStatus.
    virtual void fireSubtitleStatusAttributeChanged(const ::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus& subtitleStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute isFullScreen.
    virtual void fireIsFullScreenAttributeChanged(const bool& isFullScreen) = 0;
    ///Notifies all remote listeners about a change of value of the attribute audioChannel.
    virtual void fireAudioChannelAttributeChanged(const ::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus& audioChannel) = 0;
    ///Notifies all remote listeners about a change of value of the attribute AppleAuthenticationChipstatus.
    virtual void fireAppleAuthenticationChipstatusAttributeChanged(const bool& AppleAuthenticationChipstatus) = 0;



    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for MediaSettings.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class MediaSettingsStubRemoteEvent
{
public:
    virtual ~MediaSettingsStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service MediaSettings to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class MediaSettingsStub
    : public virtual CommonAPI::Stub<MediaSettingsStubAdapter, MediaSettingsStubRemoteEvent>
{
public:
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::eCallResult _e)>masterMediaResetReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::eCallResult _e)>resetMediaIndexReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::eMediaError _e)>updateIndexReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::eCallResult _result)>setAudioChannelReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::eCallResult _result)>setSubtitleReply_t;
    typedef std::function<void (::v3::com::harman::mmpres::MMPresTypes::eMediaError _e)>setDisplayWindowReply_t;

    virtual ~MediaSettingsStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /// Provides getter access to the attribute subtitleStatus
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus &getSubtitleStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute isFullScreen
    virtual const bool &getIsFullScreenAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Indicates the audio channels for the current track
     */
    /// Provides getter access to the attribute audioChannel
    virtual const ::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus &getAudioChannelAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: this will provide information as to whether the Apple authentication ship is
     *   operational or not
     */
    /// Provides getter access to the attribute AppleAuthenticationChipstatus
    virtual const bool &getAppleAuthenticationChipstatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /**
     * description: reset all the Media related settings to the default.  		e: error code.
     */
    /// This is the method that will be called on remote calls on the method masterMediaReset.
    virtual void masterMediaReset(const std::shared_ptr<CommonAPI::ClientId> _client, masterMediaResetReply_t _reply) = 0;
    /**
     * description: removes the database file of specified device on device ejection.
     * param: slotId: the specified slot id         returns:	  eCallResult:	Result of the API
     *   call
     */
    /// This is the method that will be called on remote calls on the method resetMediaIndex.
    virtual void resetMediaIndex(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _slotId, resetMediaIndexReply_t _reply) = 0;
    /**
     * description: Updates the index of a device
     * param: slotId: the specified slot id         returns:	  e:	Result of the API call
     */
    /// This is the method that will be called on remote calls on the method updateIndex.
    virtual void updateIndex(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _slotId, updateIndexReply_t _reply) = 0;
    /**
     * description: Set Audio channel for playback
     * param: audioChannel - of type eAudioChannelStatus
     */
    /// This is the method that will be called on remote calls on the method setAudioChannel.
    virtual void setAudioChannel(const std::shared_ptr<CommonAPI::ClientId> _client, ::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus _audioChannel, setAudioChannelReply_t _reply) = 0;
    /**
     * description: Set Subtitle ON or OFF
     * param: dispSubtitle - eSubtitleStatus:ON is to enable Subtitle, eSubtitleStatus:OFF is
     *   to disable subtitle
     */
    /// This is the method that will be called on remote calls on the method setSubtitle.
    virtual void setSubtitle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus _dispSubtitle, setSubtitleReply_t _reply) = 0;
    /**
     * description: Set the display window coordinates of video playback
     * param: isFullscreen True is to enable fullscreen, false is to disable fullscreen and
     *   manually assign by screeenDimension                 screeenDimension  Screen
     *   coordinates
     */
    /// This is the method that will be called on remote calls on the method setDisplayWindow.
    virtual void setDisplayWindow(const std::shared_ptr<CommonAPI::ClientId> _client, bool _isFullscreen, ::v3::com::harman::mmpres::MMPresTypes::tScreen _screeenDimension, setDisplayWindowReply_t _reply) = 0;

    using CommonAPI::Stub<MediaSettingsStubAdapter, MediaSettingsStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<MediaSettingsStubAdapter, MediaSettingsStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<MediaSettingsStubAdapter, MediaSettingsStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef MediaSettingsStubRemoteEvent RemoteEventType;
    typedef MediaSettings StubInterface;
};

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_MMPRES_Media_Settings_STUB_HPP_
