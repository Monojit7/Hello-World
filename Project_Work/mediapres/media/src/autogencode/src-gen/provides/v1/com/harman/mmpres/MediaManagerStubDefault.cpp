/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/com/harman/mmpres/MediaManagerStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

MediaManagerStubDefault::MediaManagerStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(MediaManager::getInterfaceVersion()) {
}

const CommonAPI::Version& MediaManagerStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

MediaManagerStubRemoteEvent* MediaManagerStubDefault::initStubAdapter(const std::shared_ptr<MediaManagerStubAdapter> &_adapter) {
    CommonAPI::Stub<MediaManagerStubAdapter, MediaManagerStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


/**
 * description: Gets details for all the configured slots in the pres ctrl. Whichever slots are
 *   configured in the Presentation Controller config will be returned here, with
 *   the  					  current status.  	 		               returns:	  tSlotList:	Slot data
 */
void MediaManagerStubDefault::getSlots(const std::shared_ptr<CommonAPI::ClientId> _client, getSlotsReply_t _reply) {
    (void)_client;
    ::v3::com::harman::mmpres::MMPresTypes::tSlotList list = {};
    _reply(list);
}

/**
 * description: Gets additional details of the device in a particular slot 	 		              
 *   returns:	  tAdditionalDeviceInfo:	Additional Hw and firware info
 */
void MediaManagerStubDefault::getAdditionalDeviceInfo(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _slotId, getAdditionalDeviceInfoReply_t _reply) {
    (void)_client;
    (void) _slotId;
    ::v3::com::harman::mmpres::MMPresTypes::tAdditionalDeviceInfo additionalInfo = {};
    _reply(additionalInfo);
}


/**
 * description: Emitted if there is a state change for any slot.  	 		               returns:	 
 *   slot:	Slot data
 */
void MediaManagerStubDefault::fireSlotUpdateEvent(const ::v3::com::harman::mmpres::MMPresTypes::tSlot &_slot) {
    assert((CommonAPI::Stub<MediaManagerStubAdapter, MediaManagerStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MediaManagerStubAdapter, MediaManagerStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireSlotUpdateEvent(_slot);
}


MediaManagerStubDefault::RemoteEventHandler::RemoteEventHandler(MediaManagerStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1
