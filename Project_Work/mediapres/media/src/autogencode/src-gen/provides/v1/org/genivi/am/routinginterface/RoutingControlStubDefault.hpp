/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This class implements everything from Audiomanager -&gt; RoutingAdapter
 * author: lian zhang
 */
#ifndef V1_ORG_GENIVI_AM_ROUTINGINTERFACE_Routing_Control_STUB_DEFAULT_HPP_
#define V1_ORG_GENIVI_AM_ROUTINGINTERFACE_Routing_Control_STUB_DEFAULT_HPP_


#include <v1/org/genivi/am/routinginterface/RoutingControlStub.hpp>
#include <sstream>

namespace v1 {
namespace org {
namespace genivi {
namespace am {
namespace routinginterface {

/**
 * Provides a default implementation for RoutingControlStubRemoteEvent and
 * RoutingControlStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class RoutingControlStubDefault
    : public virtual RoutingControlStub {
public:
    RoutingControlStubDefault();

    RoutingControlStubRemoteEvent* initStubAdapter(const std::shared_ptr<RoutingControlStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);


    /**
     * description: This function is used to set the source state of a particular source.
     *   (at)return E_OK on success, E_UNKNOWN on error
     */
    virtual void asyncSetSourceState(const std::shared_ptr<CommonAPI::ClientId> _client, ::v3::org::genivi::am_t::am_Handle_s _handle, ::v3::org::genivi::am_t::am_sourceID_t _sourceID, ::v3::org::genivi::am_t::am_SourceState_e _state, asyncSetSourceStateReply_t _reply);

/**
 * description: Acknowledges for asyncSetSourceState.
 */
virtual void fireAckSetSourceStateSelective(const ::v3::org::genivi::am_t::am_Handle_s &_handle, const ::v3::org::genivi::am_t::am_Error_e &_amError, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForAckSetSourceStateSelective();
/// Hook method for reacting on new subscriptions or removed subscriptions respectively for selective broadcasts.
virtual void onAckSetSourceStateSelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event);
/// Hook method for reacting accepting or denying new subscriptions 
virtual bool onAckSetSourceStateSelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client);


protected:
    class RemoteEventHandler: public virtual RoutingControlStubRemoteEvent {
    public:
        RemoteEventHandler(RoutingControlStubDefault *_defaultStub);


    private:
        RoutingControlStubDefault *defaultStub_;
    };
private:
    RoutingControlStubDefault::RemoteEventHandler remoteEventHandler_;


    CommonAPI::Version interfaceVersion_;
};

} // namespace routinginterface
} // namespace am
} // namespace genivi
} // namespace org
} // namespace v1


// Compatibility
namespace v1_1 = v1;

#endif // V1_ORG_GENIVI_AM_ROUTINGINTERFACE_Routing_Control_STUB_DEFAULT
