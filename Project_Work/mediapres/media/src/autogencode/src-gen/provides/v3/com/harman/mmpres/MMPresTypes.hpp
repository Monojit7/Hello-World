/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V3_COM_HARMAN_MMPRES_MM_Pres_Types_HPP_
#define V3_COM_HARMAN_MMPRES_MM_Pres_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v3 {
namespace com {
namespace harman {
namespace mmpres {

struct MMPresTypes {
    
    struct eSlotType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SLOTTYPE_USB = 0,
            SLOTTYPE_IPOD = 1,
            SLOTTYPE_BLUETOOTH = 2,
            SLOTTYPE_OPTICAL_DRIVE = 3,
            SLOTTYPE_WIFI = 4,
            SLOTTYPE_HDD = 5,
            SLOTTYPE_CARD = 6,
            SLOTTYPE_REMOTE_CD = 7,
            SLOTTYPE_UNKNOWN = 8
        };
        
        eSlotType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SLOTTYPE_USB)) {}
        eSlotType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SLOTTYPE_USB):
                case static_cast<int32_t>(Literal::SLOTTYPE_IPOD):
                case static_cast<int32_t>(Literal::SLOTTYPE_BLUETOOTH):
                case static_cast<int32_t>(Literal::SLOTTYPE_OPTICAL_DRIVE):
                case static_cast<int32_t>(Literal::SLOTTYPE_WIFI):
                case static_cast<int32_t>(Literal::SLOTTYPE_HDD):
                case static_cast<int32_t>(Literal::SLOTTYPE_CARD):
                case static_cast<int32_t>(Literal::SLOTTYPE_REMOTE_CD):
                case static_cast<int32_t>(Literal::SLOTTYPE_UNKNOWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eSlotType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eSlotType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eSlotType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eSlotType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eSlotType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eSlotType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eFileSystemContentType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            FS_CONTENT_TYPE_FILE = 1,
            FS_CONTENT_TYPE_FOLDER = 2,
            FS_CONTENT_TYPE_PLAYLIST = 4,
            FS_CONTENT_TYPE_UNKNOWN = 8
        };
        
        eFileSystemContentType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::FS_CONTENT_TYPE_FILE)) {}
        eFileSystemContentType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::FS_CONTENT_TYPE_FILE):
                case static_cast<int32_t>(Literal::FS_CONTENT_TYPE_FOLDER):
                case static_cast<int32_t>(Literal::FS_CONTENT_TYPE_PLAYLIST):
                case static_cast<int32_t>(Literal::FS_CONTENT_TYPE_UNKNOWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eFileSystemContentType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eFileSystemContentType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eFileSystemContentType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eFileSystemContentType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eFileSystemContentType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eFileSystemContentType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eDeviceType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DEVICETYPE_HDD = 0,
            DEVICETYPE_DISCSINGLE = 1,
            DEVICETYPE_DISCCHANGER = 2,
            DEVICETYPE_USB = 3,
            DEVICETYPE_MEMORYCARD = 4,
            DEVICETYPE_IPOD = 5,
            DEVICETYPE_MTP = 6,
            DEVICETYPE_BLUETOOTH = 7,
            DEVICETYPE_NETWORK = 8,
            DEVICETYPE_UPNP = 9,
            DEVICETYPE_DMB = 10,
            DEVICETYPE_SND = 11,
            DEVICETYPE_MASTER = 12,
            DEVICETYPE_AMP = 13,
            DEVICETYPE_STREAM = 14,
            DEVICETYPE_OAP = 15,
            DEVICETYPE_UKNOWN = 16,
            DEVICETYPE_REMOTE_CD = 17,
            DEVICETYPE_NODEV = 18
        };
        
        eDeviceType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DEVICETYPE_HDD)) {}
        eDeviceType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DEVICETYPE_HDD):
                case static_cast<int32_t>(Literal::DEVICETYPE_DISCSINGLE):
                case static_cast<int32_t>(Literal::DEVICETYPE_DISCCHANGER):
                case static_cast<int32_t>(Literal::DEVICETYPE_USB):
                case static_cast<int32_t>(Literal::DEVICETYPE_MEMORYCARD):
                case static_cast<int32_t>(Literal::DEVICETYPE_IPOD):
                case static_cast<int32_t>(Literal::DEVICETYPE_MTP):
                case static_cast<int32_t>(Literal::DEVICETYPE_BLUETOOTH):
                case static_cast<int32_t>(Literal::DEVICETYPE_NETWORK):
                case static_cast<int32_t>(Literal::DEVICETYPE_UPNP):
                case static_cast<int32_t>(Literal::DEVICETYPE_DMB):
                case static_cast<int32_t>(Literal::DEVICETYPE_SND):
                case static_cast<int32_t>(Literal::DEVICETYPE_MASTER):
                case static_cast<int32_t>(Literal::DEVICETYPE_AMP):
                case static_cast<int32_t>(Literal::DEVICETYPE_STREAM):
                case static_cast<int32_t>(Literal::DEVICETYPE_OAP):
                case static_cast<int32_t>(Literal::DEVICETYPE_UKNOWN):
                case static_cast<int32_t>(Literal::DEVICETYPE_REMOTE_CD):
                case static_cast<int32_t>(Literal::DEVICETYPE_NODEV):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eDeviceType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eDeviceType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eDeviceType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eDeviceType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eDeviceType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eDeviceType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eDeviceCapabilities : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DEVICECAP_METADATABROWSE = 1,
            DEVICECAP_METADATASEARCH = 2,
            DEVICECAP_FSBROWSE = 4,
            DEVICECAP_NOWPLAYINGLIST = 8,
            DEVICECAP_COVERART = 16,
            DEVICECAP_COVERFLOW = 32,
            DEVICECAP_SEEKTOTIME = 64,
            DEVICECAP_VIDEOPLAYBACK = 128,
            DEVICECAP_CARPLAY = 256,
            DEVICECAP_ANDROIDAUTO = 512,
            DEVICECAP_THIRDPARTYPLAYBACK = 1024,
            DEVICECAP_PLAYPOS_UPDATE = 2048,
            DEVICECAP_TIMEPOS_UPDATE = 4096,
            DEVICECAP_FSSEARCH = 8192
        };
        
        eDeviceCapabilities() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DEVICECAP_METADATABROWSE)) {}
        eDeviceCapabilities(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DEVICECAP_METADATABROWSE):
                case static_cast<int32_t>(Literal::DEVICECAP_METADATASEARCH):
                case static_cast<int32_t>(Literal::DEVICECAP_FSBROWSE):
                case static_cast<int32_t>(Literal::DEVICECAP_NOWPLAYINGLIST):
                case static_cast<int32_t>(Literal::DEVICECAP_COVERART):
                case static_cast<int32_t>(Literal::DEVICECAP_COVERFLOW):
                case static_cast<int32_t>(Literal::DEVICECAP_SEEKTOTIME):
                case static_cast<int32_t>(Literal::DEVICECAP_VIDEOPLAYBACK):
                case static_cast<int32_t>(Literal::DEVICECAP_CARPLAY):
                case static_cast<int32_t>(Literal::DEVICECAP_ANDROIDAUTO):
                case static_cast<int32_t>(Literal::DEVICECAP_THIRDPARTYPLAYBACK):
                case static_cast<int32_t>(Literal::DEVICECAP_PLAYPOS_UPDATE):
                case static_cast<int32_t>(Literal::DEVICECAP_TIMEPOS_UPDATE):
                case static_cast<int32_t>(Literal::DEVICECAP_FSSEARCH):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eDeviceCapabilities &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eDeviceCapabilities &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eDeviceCapabilities &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eDeviceCapabilities &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eDeviceCapabilities &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eDeviceCapabilities &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eRemotePlayerCapability : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            REMOTEPLAYERCAP_PLAY = 1,
            REMOTEPLAYERCAP_PAUSE = 2,
            REMOTEPLAYERCAP_NEXT = 4,
            REMOTEPLAYERCAP_PREVIOUS = 8,
            REMOTEPLAYERCAP_FASTFORWARD = 16,
            REMOTEPLAYERCAP_FASTREWIND = 32,
            REMOTEPLAYERCAP_REPEATOFF = 64,
            REMOTEPLAYERCAP_REPEATSINGLE = 128,
            REMOTEPLAYERCAP_REPEATALL = 256,
            REMOTEPLAYERCAP_SHUFFLE = 512,
            REMOTEPLAYERCAP_UNSHUFFLE = 1024,
            REMOTEPLAYERCAP_BROWSING = 2048
        };
        
        eRemotePlayerCapability() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::REMOTEPLAYERCAP_PLAY)) {}
        eRemotePlayerCapability(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::REMOTEPLAYERCAP_PLAY):
                case static_cast<int32_t>(Literal::REMOTEPLAYERCAP_PAUSE):
                case static_cast<int32_t>(Literal::REMOTEPLAYERCAP_NEXT):
                case static_cast<int32_t>(Literal::REMOTEPLAYERCAP_PREVIOUS):
                case static_cast<int32_t>(Literal::REMOTEPLAYERCAP_FASTFORWARD):
                case static_cast<int32_t>(Literal::REMOTEPLAYERCAP_FASTREWIND):
                case static_cast<int32_t>(Literal::REMOTEPLAYERCAP_REPEATOFF):
                case static_cast<int32_t>(Literal::REMOTEPLAYERCAP_REPEATSINGLE):
                case static_cast<int32_t>(Literal::REMOTEPLAYERCAP_REPEATALL):
                case static_cast<int32_t>(Literal::REMOTEPLAYERCAP_SHUFFLE):
                case static_cast<int32_t>(Literal::REMOTEPLAYERCAP_UNSHUFFLE):
                case static_cast<int32_t>(Literal::REMOTEPLAYERCAP_BROWSING):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eRemotePlayerCapability &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eRemotePlayerCapability &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eRemotePlayerCapability &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eRemotePlayerCapability &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eRemotePlayerCapability &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eRemotePlayerCapability &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct tRemotePlayerCapability : CommonAPI::Struct<uint8_t, uint32_t> {
    	
    	tRemotePlayerCapability() {
    	}
    	tRemotePlayerCapability(const uint8_t &_slotId, const uint32_t &_capability)
    	{
    		std::get<0>(values_) = _slotId;
    		std::get<1>(values_) = _capability;
    	}
    	inline const uint8_t &getSlotId() const { return std::get<0>(values_); }
    	inline void setSlotId(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint32_t &getCapability() const { return std::get<1>(values_); }
    	inline void setCapability(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const tRemotePlayerCapability& _other) const {
                return (getSlotId() == _other.getSlotId() && getCapability() == _other.getCapability());
        }
    	inline bool operator!=(const tRemotePlayerCapability &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct eRepeatMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            REPEAT_ALL = 1,
            REPEAT_OFF = 2,
            REPEAT_SONG = 4,
            REPEAT_FOLDER = 8,
            REPEAT_SUBFOLDER = 16,
            REPEAT_ALBUM = 32,
            REPEAT_ERROR = 64,
            REPEAT_UNKNOWN = 128,
            REPEAT_TOGGLE = 256,
            REPEAT_NOTSUP = 512
        };
        
        eRepeatMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::REPEAT_ALL)) {}
        eRepeatMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::REPEAT_ALL):
                case static_cast<int32_t>(Literal::REPEAT_OFF):
                case static_cast<int32_t>(Literal::REPEAT_SONG):
                case static_cast<int32_t>(Literal::REPEAT_FOLDER):
                case static_cast<int32_t>(Literal::REPEAT_SUBFOLDER):
                case static_cast<int32_t>(Literal::REPEAT_ALBUM):
                case static_cast<int32_t>(Literal::REPEAT_ERROR):
                case static_cast<int32_t>(Literal::REPEAT_UNKNOWN):
                case static_cast<int32_t>(Literal::REPEAT_TOGGLE):
                case static_cast<int32_t>(Literal::REPEAT_NOTSUP):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eRepeatMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eRepeatMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eRepeatMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eRepeatMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eRepeatMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eRepeatMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eShuffleMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SHUFFLE_ALL = 1,
            SHUFFLE_OFF = 2,
            SHUFFLE_FOLDER = 4,
            SHUFFLE_SUBFOLDER = 8,
            SHUFFLE_ALBUM = 16,
            SHUFFLE_ERROR = 32,
            SHUFFLE_UNKNOWN = 64,
            SHUFFLE_TOGGLE = 128,
            SHUFFLE_NOTSUP = 256
        };
        
        eShuffleMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SHUFFLE_ALL)) {}
        eShuffleMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SHUFFLE_ALL):
                case static_cast<int32_t>(Literal::SHUFFLE_OFF):
                case static_cast<int32_t>(Literal::SHUFFLE_FOLDER):
                case static_cast<int32_t>(Literal::SHUFFLE_SUBFOLDER):
                case static_cast<int32_t>(Literal::SHUFFLE_ALBUM):
                case static_cast<int32_t>(Literal::SHUFFLE_ERROR):
                case static_cast<int32_t>(Literal::SHUFFLE_UNKNOWN):
                case static_cast<int32_t>(Literal::SHUFFLE_TOGGLE):
                case static_cast<int32_t>(Literal::SHUFFLE_NOTSUP):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eShuffleMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eShuffleMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eShuffleMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eShuffleMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eShuffleMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eShuffleMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eSlotState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SLOTSTATE_LOADING = 0,
            SLOTSTATE_READY = 1,
            SLOTSTATE_READY_AUTOINSERT = 2,
            SLOTSTATE_EJECTING = 3,
            SLOTSTATE_EJECTED = 4
        };
        
        eSlotState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SLOTSTATE_LOADING)) {}
        eSlotState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SLOTSTATE_LOADING):
                case static_cast<int32_t>(Literal::SLOTSTATE_READY):
                case static_cast<int32_t>(Literal::SLOTSTATE_READY_AUTOINSERT):
                case static_cast<int32_t>(Literal::SLOTSTATE_EJECTING):
                case static_cast<int32_t>(Literal::SLOTSTATE_EJECTED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eSlotState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eSlotState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eSlotState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eSlotState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eSlotState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eSlotState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eSyncState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            STATE_UNKNOWN = 0,
            STATE_START = 1,
            STATE_FIRST_FILE_SYNCED = 2,
            STATE_FILE_PASS_SYNCED = 3,
            STATE_METADATA_PASS_SYNCED = 4,
            STATE_PLAYLIST_PASS_SYNCED = 5,
            STATE_THUMBNAIL_PASS_SYNCED = 6,
            STATE_GRACENOTE_PASS_SYNCED = 7
        };
        
        eSyncState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::STATE_UNKNOWN)) {}
        eSyncState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::STATE_UNKNOWN):
                case static_cast<int32_t>(Literal::STATE_START):
                case static_cast<int32_t>(Literal::STATE_FIRST_FILE_SYNCED):
                case static_cast<int32_t>(Literal::STATE_FILE_PASS_SYNCED):
                case static_cast<int32_t>(Literal::STATE_METADATA_PASS_SYNCED):
                case static_cast<int32_t>(Literal::STATE_PLAYLIST_PASS_SYNCED):
                case static_cast<int32_t>(Literal::STATE_THUMBNAIL_PASS_SYNCED):
                case static_cast<int32_t>(Literal::STATE_GRACENOTE_PASS_SYNCED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eSyncState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eSyncState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eSyncState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eSyncState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eSyncState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eSyncState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    typedef std::unordered_map<uint8_t, ::v3::com::harman::mmpres::MMPresTypes::eSyncState> SyncMap;
    
    struct eTitleContentType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            TITLETYPE_AUDIO = 1,
            TITLETYPE_VIDEO = 2,
            TITLETYPE_IMAGE = 4,
            TITLETYPE_UNKNOWN = 8
        };
        
        eTitleContentType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::TITLETYPE_AUDIO)) {}
        eTitleContentType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::TITLETYPE_AUDIO):
                case static_cast<int32_t>(Literal::TITLETYPE_VIDEO):
                case static_cast<int32_t>(Literal::TITLETYPE_IMAGE):
                case static_cast<int32_t>(Literal::TITLETYPE_UNKNOWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eTitleContentType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eTitleContentType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eTitleContentType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eTitleContentType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eTitleContentType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eTitleContentType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    typedef std::unordered_map<::v3::com::harman::mmpres::MMPresTypes::eTitleContentType, uint64_t, CommonAPI::EnumHasher<::v3::com::harman::mmpres::MMPresTypes::eTitleContentType>> ContentInfoMap;
    
    struct eBTMediaProfile : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            AVRCP = 0,
            A2DP = 1,
            AVRCPA2DP = 2,
            UNKNOWN = 3
        };
        
        eBTMediaProfile() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::AVRCP)) {}
        eBTMediaProfile(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::AVRCP):
                case static_cast<int32_t>(Literal::A2DP):
                case static_cast<int32_t>(Literal::AVRCPA2DP):
                case static_cast<int32_t>(Literal::UNKNOWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eBTMediaProfile &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eBTMediaProfile &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eBTMediaProfile &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eBTMediaProfile &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eBTMediaProfile &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eBTMediaProfile &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct tBTStatus : CommonAPI::Struct<eBTMediaProfile, uint8_t, uint8_t> {
    	
    	tBTStatus() {
    	}
    	tBTStatus(const eBTMediaProfile &_profile, const uint8_t &_majorVersion, const uint8_t &_minorVersion)
    	{
    		std::get<0>(values_) = _profile;
    		std::get<1>(values_) = _majorVersion;
    		std::get<2>(values_) = _minorVersion;
    	}
    	inline const eBTMediaProfile &getProfile() const { return std::get<0>(values_); }
    	inline void setProfile(const eBTMediaProfile &_value) { std::get<0>(values_) = _value; }
    	inline const uint8_t &getMajorVersion() const { return std::get<1>(values_); }
    	inline void setMajorVersion(const uint8_t &_value) { std::get<1>(values_) = _value; }
    	inline const uint8_t &getMinorVersion() const { return std::get<2>(values_); }
    	inline void setMinorVersion(const uint8_t &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const tBTStatus& _other) const {
                return (getProfile() == _other.getProfile() && getMajorVersion() == _other.getMajorVersion() && getMinorVersion() == _other.getMinorVersion());
        }
    	inline bool operator!=(const tBTStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct tDevice : CommonAPI::Struct<uint64_t, eDeviceType, uint32_t, uint32_t, uint32_t, std::string, ContentInfoMap, tBTStatus> {
    	
    	tDevice() {
    	}
    	tDevice(const uint64_t &_deviceId, const eDeviceType &_deviceType, const uint32_t &_deviceCaps, const uint32_t &_deviceRepeatModes, const uint32_t &_devicesShuffleModes, const std::string &_deviceName, const ContentInfoMap &_contentInfo, const tBTStatus &_btstatus)
    	{
    		std::get<0>(values_) = _deviceId;
    		std::get<1>(values_) = _deviceType;
    		std::get<2>(values_) = _deviceCaps;
    		std::get<3>(values_) = _deviceRepeatModes;
    		std::get<4>(values_) = _devicesShuffleModes;
    		std::get<5>(values_) = _deviceName;
    		std::get<6>(values_) = _contentInfo;
    		std::get<7>(values_) = _btstatus;
    	}
    	inline const uint64_t &getDeviceId() const { return std::get<0>(values_); }
    	inline void setDeviceId(const uint64_t &_value) { std::get<0>(values_) = _value; }
    	inline const eDeviceType &getDeviceType() const { return std::get<1>(values_); }
    	inline void setDeviceType(const eDeviceType &_value) { std::get<1>(values_) = _value; }
    	inline const uint32_t &getDeviceCaps() const { return std::get<2>(values_); }
    	inline void setDeviceCaps(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	inline const uint32_t &getDeviceRepeatModes() const { return std::get<3>(values_); }
    	inline void setDeviceRepeatModes(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	inline const uint32_t &getDevicesShuffleModes() const { return std::get<4>(values_); }
    	inline void setDevicesShuffleModes(const uint32_t &_value) { std::get<4>(values_) = _value; }
    	inline const std::string &getDeviceName() const { return std::get<5>(values_); }
    	inline void setDeviceName(const std::string &_value) { std::get<5>(values_) = _value; }
    	inline const ContentInfoMap &getContentInfo() const { return std::get<6>(values_); }
    	inline void setContentInfo(const ContentInfoMap &_value) { std::get<6>(values_) = _value; }
    	inline const tBTStatus &getBtstatus() const { return std::get<7>(values_); }
    	inline void setBtstatus(const tBTStatus &_value) { std::get<7>(values_) = _value; }
    	inline bool operator==(const tDevice& _other) const {
                return (getDeviceId() == _other.getDeviceId() && getDeviceType() == _other.getDeviceType() && getDeviceCaps() == _other.getDeviceCaps() && getDeviceRepeatModes() == _other.getDeviceRepeatModes() && getDevicesShuffleModes() == _other.getDevicesShuffleModes() && getDeviceName() == _other.getDeviceName() && getContentInfo() == _other.getContentInfo() && getBtstatus() == _other.getBtstatus());
        }
    	inline bool operator!=(const tDevice &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct eMetadataType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            METADATATYPE_UNKNOWN = 0,
            METADATATYPE_NAME = 1,
            METADATATYPE_TITLE = 2,
            METADATATYPE_ARTIST = 4,
            METADATATYPE_NORMALIZEDARTIST = 8,
            METADATATYPE_ALBUMARTIST = 16,
            METADATATYPE_ALBUM = 32,
            METADATATYPE_GENRE = 64,
            METADATATYPE_COVERART = 128,
            METADTATATYPE_PLAYLIST = 256,
            METADTATATYPE_AUDIOBOOK = 1024,
            METADTATATYPE_CHAPTER = 2048,
            METADTATATYPE_PODCAST = 4096,
            METADTATATYPE_EPISODE = 8192,
            METADATATYPE_CATEGORY = 16384,
            METADATATYPE_FILE = 32768,
            METADATATYPE_COMPOSER = 65536,
            METADATATYPE_FOLDER = 131072,
            METADATATYPE_RELEASEDATE = 262144,
            METADATATYPE_YEAR = 524288,
            METADATATYPE_DECADE = 1048576,
            METADATATYPE_DURATION = 2097152,
            METADATATYPE_VIDEO = 4194304,
            METADATATYPE_REMOTECD_MP3 = 8388608,
            METADATATYPE_REMOTECD_CDDA = 16777216,
            METADATATYPE_TRACKNUM = 33554432,
            METADATATYPE_IMAGE = 67108864,
            METADATATYPE_MEDIUMID = 134217728,
            METADATATYPE_COMPILATION = 268435456,
            METADATATYPE_RATING = 536870912,
            METADATATYPE_CONDUCTOR = 1073741824
        };
        
        eMetadataType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::METADATATYPE_UNKNOWN)) {}
        eMetadataType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::METADATATYPE_UNKNOWN):
                case static_cast<int32_t>(Literal::METADATATYPE_NAME):
                case static_cast<int32_t>(Literal::METADATATYPE_TITLE):
                case static_cast<int32_t>(Literal::METADATATYPE_ARTIST):
                case static_cast<int32_t>(Literal::METADATATYPE_NORMALIZEDARTIST):
                case static_cast<int32_t>(Literal::METADATATYPE_ALBUMARTIST):
                case static_cast<int32_t>(Literal::METADATATYPE_ALBUM):
                case static_cast<int32_t>(Literal::METADATATYPE_GENRE):
                case static_cast<int32_t>(Literal::METADATATYPE_COVERART):
                case static_cast<int32_t>(Literal::METADTATATYPE_PLAYLIST):
                case static_cast<int32_t>(Literal::METADTATATYPE_AUDIOBOOK):
                case static_cast<int32_t>(Literal::METADTATATYPE_CHAPTER):
                case static_cast<int32_t>(Literal::METADTATATYPE_PODCAST):
                case static_cast<int32_t>(Literal::METADTATATYPE_EPISODE):
                case static_cast<int32_t>(Literal::METADATATYPE_CATEGORY):
                case static_cast<int32_t>(Literal::METADATATYPE_FILE):
                case static_cast<int32_t>(Literal::METADATATYPE_COMPOSER):
                case static_cast<int32_t>(Literal::METADATATYPE_FOLDER):
                case static_cast<int32_t>(Literal::METADATATYPE_RELEASEDATE):
                case static_cast<int32_t>(Literal::METADATATYPE_YEAR):
                case static_cast<int32_t>(Literal::METADATATYPE_DECADE):
                case static_cast<int32_t>(Literal::METADATATYPE_DURATION):
                case static_cast<int32_t>(Literal::METADATATYPE_VIDEO):
                case static_cast<int32_t>(Literal::METADATATYPE_REMOTECD_MP3):
                case static_cast<int32_t>(Literal::METADATATYPE_REMOTECD_CDDA):
                case static_cast<int32_t>(Literal::METADATATYPE_TRACKNUM):
                case static_cast<int32_t>(Literal::METADATATYPE_IMAGE):
                case static_cast<int32_t>(Literal::METADATATYPE_MEDIUMID):
                case static_cast<int32_t>(Literal::METADATATYPE_COMPILATION):
                case static_cast<int32_t>(Literal::METADATATYPE_RATING):
                case static_cast<int32_t>(Literal::METADATATYPE_CONDUCTOR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eMetadataType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eMetadataType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eMetadataType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eMetadataType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eMetadataType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eMetadataType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    typedef std::unordered_map<::v3::com::harman::mmpres::MMPresTypes::eMetadataType, uint64_t, CommonAPI::EnumHasher<::v3::com::harman::mmpres::MMPresTypes::eMetadataType>> MetadataCountMap;
    typedef std::unordered_map<::v3::com::harman::mmpres::MMPresTypes::eTitleContentType, ::v3::com::harman::mmpres::MMPresTypes::MetadataCountMap, CommonAPI::EnumHasher<::v3::com::harman::mmpres::MMPresTypes::eTitleContentType>> BrowseCategoryMap;
    typedef std::unordered_map<uint8_t, bool> PlaySessionStateMap;
    typedef std::unordered_map<uint32_t, uint64_t> HighlightItemIndexMap;
    struct tDeviceBrowseCategoryInfo : CommonAPI::Struct<uint8_t, BrowseCategoryMap> {
    	
    	tDeviceBrowseCategoryInfo() {
    	}
    	tDeviceBrowseCategoryInfo(const uint8_t &_slotId, const BrowseCategoryMap &_categoryInfo)
    	{
    		std::get<0>(values_) = _slotId;
    		std::get<1>(values_) = _categoryInfo;
    	}
    	inline const uint8_t &getSlotId() const { return std::get<0>(values_); }
    	inline void setSlotId(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	inline const BrowseCategoryMap &getCategoryInfo() const { return std::get<1>(values_); }
    	inline void setCategoryInfo(const BrowseCategoryMap &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const tDeviceBrowseCategoryInfo& _other) const {
                return (getSlotId() == _other.getSlotId() && getCategoryInfo() == _other.getCategoryInfo());
        }
    	inline bool operator!=(const tDeviceBrowseCategoryInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MMPresTypes::tDeviceBrowseCategoryInfo> tDeviceBrowseCategoryList;
    struct tAdditionalDeviceInfo : CommonAPI::Struct<std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string> {
    	
    	tAdditionalDeviceInfo() {
    	}
    	tAdditionalDeviceInfo(const std::string &_firmware, const std::string &_protocol, const std::string &_modelNumber, const std::string &_productName, const std::string &_serialNumber, const std::string &_versionNumber, const std::string &_vendorId, const std::string &_productId, const std::string &_manufacturer, const std::string &_MAC)
    	{
    		std::get<0>(values_) = _firmware;
    		std::get<1>(values_) = _protocol;
    		std::get<2>(values_) = _modelNumber;
    		std::get<3>(values_) = _productName;
    		std::get<4>(values_) = _serialNumber;
    		std::get<5>(values_) = _versionNumber;
    		std::get<6>(values_) = _vendorId;
    		std::get<7>(values_) = _productId;
    		std::get<8>(values_) = _manufacturer;
    		std::get<9>(values_) = _MAC;
    	}
    	/**
    	 * description: device firmware version.
    	 */
    	inline const std::string &getFirmware() const { return std::get<0>(values_); }
    	inline void setFirmware(const std::string &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: device protocol version.
    	 */
    	inline const std::string &getProtocol() const { return std::get<1>(values_); }
    	inline void setProtocol(const std::string &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: device model number.
    	 */
    	inline const std::string &getModelNumber() const { return std::get<2>(values_); }
    	inline void setModelNumber(const std::string &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: user friend product name.
    	 */
    	inline const std::string &getProductName() const { return std::get<3>(values_); }
    	inline void setProductName(const std::string &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: device serial number.
    	 */
    	inline const std::string &getSerialNumber() const { return std::get<4>(values_); }
    	inline void setSerialNumber(const std::string &_value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: device version number.
    	 */
    	inline const std::string &getVersionNumber() const { return std::get<5>(values_); }
    	inline void setVersionNumber(const std::string &_value) { std::get<5>(values_) = _value; }
    	/**
    	 * description: device vendor id.
    	 */
    	inline const std::string &getVendorId() const { return std::get<6>(values_); }
    	inline void setVendorId(const std::string &_value) { std::get<6>(values_) = _value; }
    	/**
    	 * description: device productId id.
    	 */
    	inline const std::string &getProductId() const { return std::get<7>(values_); }
    	inline void setProductId(const std::string &_value) { std::get<7>(values_) = _value; }
    	/**
    	 * description: device manufacturer.
    	 */
    	inline const std::string &getManufacturer() const { return std::get<8>(values_); }
    	inline void setManufacturer(const std::string &_value) { std::get<8>(values_) = _value; }
    	/**
    	 * description: device MAC address if exist.
    	 */
    	inline const std::string &getMAC() const { return std::get<9>(values_); }
    	inline void setMAC(const std::string &_value) { std::get<9>(values_) = _value; }
    	inline bool operator==(const tAdditionalDeviceInfo& _other) const {
                return (getFirmware() == _other.getFirmware() && getProtocol() == _other.getProtocol() && getModelNumber() == _other.getModelNumber() && getProductName() == _other.getProductName() && getSerialNumber() == _other.getSerialNumber() && getVersionNumber() == _other.getVersionNumber() && getVendorId() == _other.getVendorId() && getProductId() == _other.getProductId() && getManufacturer() == _other.getManufacturer() && getMAC() == _other.getMAC());
        }
    	inline bool operator!=(const tAdditionalDeviceInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct tSlot : CommonAPI::Struct<uint8_t, eSlotType, eSlotState, tDevice> {
    	
    	tSlot() {
    	}
    	tSlot(const uint8_t &_slotId, const eSlotType &_slotType, const eSlotState &_slotState, const tDevice &_device)
    	{
    		std::get<0>(values_) = _slotId;
    		std::get<1>(values_) = _slotType;
    		std::get<2>(values_) = _slotState;
    		std::get<3>(values_) = _device;
    	}
    	inline const uint8_t &getSlotId() const { return std::get<0>(values_); }
    	inline void setSlotId(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	inline const eSlotType &getSlotType() const { return std::get<1>(values_); }
    	inline void setSlotType(const eSlotType &_value) { std::get<1>(values_) = _value; }
    	inline const eSlotState &getSlotState() const { return std::get<2>(values_); }
    	inline void setSlotState(const eSlotState &_value) { std::get<2>(values_) = _value; }
    	inline const tDevice &getDevice() const { return std::get<3>(values_); }
    	inline void setDevice(const tDevice &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const tSlot& _other) const {
                return (getSlotId() == _other.getSlotId() && getSlotType() == _other.getSlotType() && getSlotState() == _other.getSlotState() && getDevice() == _other.getDevice());
        }
    	inline bool operator!=(const tSlot &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MMPresTypes::tSlot> tSlotList;
    
    struct eFilterType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            BEGINS_WITH = 0,
            NOT_BEGIN_WITH = 1,
            ENDS_WITH = 2,
            NOT_END_WITH = 3,
            CONTAINS = 4,
            NOT_CONTAINS = 5,
            EXACT_MATCH = 6
        };
        
        eFilterType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::BEGINS_WITH)) {}
        eFilterType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::BEGINS_WITH):
                case static_cast<int32_t>(Literal::NOT_BEGIN_WITH):
                case static_cast<int32_t>(Literal::ENDS_WITH):
                case static_cast<int32_t>(Literal::NOT_END_WITH):
                case static_cast<int32_t>(Literal::CONTAINS):
                case static_cast<int32_t>(Literal::NOT_CONTAINS):
                case static_cast<int32_t>(Literal::EXACT_MATCH):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eFilterType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eFilterType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eFilterType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eFilterType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eFilterType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eFilterType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ePrevBrowseLevel : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            PREVBROWSELEVEL_DEFAULT = 0,
            PREVBROWSELEVEL_ROOT = 1,
            PREVBROWSELEVEL_NOWPLAYINGDATA = 2,
            PREVBROWSELEVEL_PREVIOUSSEARCHLEVEL = 3
        };
        
        ePrevBrowseLevel() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::PREVBROWSELEVEL_DEFAULT)) {}
        ePrevBrowseLevel(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::PREVBROWSELEVEL_DEFAULT):
                case static_cast<int32_t>(Literal::PREVBROWSELEVEL_ROOT):
                case static_cast<int32_t>(Literal::PREVBROWSELEVEL_NOWPLAYINGDATA):
                case static_cast<int32_t>(Literal::PREVBROWSELEVEL_PREVIOUSSEARCHLEVEL):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ePrevBrowseLevel &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ePrevBrowseLevel &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ePrevBrowseLevel &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ePrevBrowseLevel &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ePrevBrowseLevel &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ePrevBrowseLevel &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    typedef std::unordered_map<::v3::com::harman::mmpres::MMPresTypes::eMetadataType, uint64_t, CommonAPI::EnumHasher<::v3::com::harman::mmpres::MMPresTypes::eMetadataType>> FilterIDMap;
    typedef std::unordered_map<::v3::com::harman::mmpres::MMPresTypes::eFilterType, std::string, CommonAPI::EnumHasher<::v3::com::harman::mmpres::MMPresTypes::eFilterType>> FilterMap;
    typedef std::unordered_map<::v3::com::harman::mmpres::MMPresTypes::eMetadataType, std::string, CommonAPI::EnumHasher<::v3::com::harman::mmpres::MMPresTypes::eMetadataType>> MetadataStringMap;
    
    struct eSessionQueryTypes : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SESSION_QUERY_FS_BROWSE = 0,
            SESSION_QUERY_METADATA_BROWSE = 1,
            SESSION_QUERY_NOWPLAYINGLIST_BROWSE = 2,
            SESSION_QUERY_HIGHESTRATED = 3,
            SESSION_QUERY_LOWESTRATED = 4,
            SESSION_QUERY_RECENTLYPLAYED = 5,
            SESSION_QUERY_FAVOURITE = 6,
            SESSION_QUERY_CATEGORY_BROWSE = 7
        };
        
        eSessionQueryTypes() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SESSION_QUERY_FS_BROWSE)) {}
        eSessionQueryTypes(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SESSION_QUERY_FS_BROWSE):
                case static_cast<int32_t>(Literal::SESSION_QUERY_METADATA_BROWSE):
                case static_cast<int32_t>(Literal::SESSION_QUERY_NOWPLAYINGLIST_BROWSE):
                case static_cast<int32_t>(Literal::SESSION_QUERY_HIGHESTRATED):
                case static_cast<int32_t>(Literal::SESSION_QUERY_LOWESTRATED):
                case static_cast<int32_t>(Literal::SESSION_QUERY_RECENTLYPLAYED):
                case static_cast<int32_t>(Literal::SESSION_QUERY_FAVOURITE):
                case static_cast<int32_t>(Literal::SESSION_QUERY_CATEGORY_BROWSE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eSessionQueryTypes &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eSessionQueryTypes &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eSessionQueryTypes &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eSessionQueryTypes &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eSessionQueryTypes &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eSessionQueryTypes &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct tMetadataItem : CommonAPI::Struct<uint64_t, std::string, bool, bool, eFileSystemContentType, eTitleContentType, MetadataCountMap, MetadataStringMap, eMetadataType> {
    	
    	tMetadataItem() {
    		std::get<2>(values_) = false;
    		std::get<3>(values_) = false;
    	}
    	tMetadataItem(const uint64_t &_ID, const std::string &_value, const bool &_playable, const bool &_browsable, const eFileSystemContentType &_folderType, const eTitleContentType &_contentType, const MetadataCountMap &_metadataCountMap, const MetadataStringMap &_metadataMap, const eMetadataType &_itemType)
    	{
    		std::get<0>(values_) = _ID;
    		std::get<1>(values_) = _value;
    		std::get<2>(values_) = _playable;
    		std::get<3>(values_) = _browsable;
    		std::get<4>(values_) = _folderType;
    		std::get<5>(values_) = _contentType;
    		std::get<6>(values_) = _metadataCountMap;
    		std::get<7>(values_) = _metadataMap;
    		std::get<8>(values_) = _itemType;
    	}
    	inline const uint64_t &getID() const { return std::get<0>(values_); }
    	inline void setID(const uint64_t &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getValue() const { return std::get<1>(values_); }
    	inline void setValue(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const bool &getPlayable() const { return std::get<2>(values_); }
    	inline void setPlayable(const bool _value) { std::get<2>(values_) = _value; }
    	inline const bool &getBrowsable() const { return std::get<3>(values_); }
    	inline void setBrowsable(const bool _value) { std::get<3>(values_) = _value; }
    	inline const eFileSystemContentType &getFolderType() const { return std::get<4>(values_); }
    	inline void setFolderType(const eFileSystemContentType &_value) { std::get<4>(values_) = _value; }
    	inline const eTitleContentType &getContentType() const { return std::get<5>(values_); }
    	inline void setContentType(const eTitleContentType &_value) { std::get<5>(values_) = _value; }
    	inline const MetadataCountMap &getMetadataCountMap() const { return std::get<6>(values_); }
    	inline void setMetadataCountMap(const MetadataCountMap &_value) { std::get<6>(values_) = _value; }
    	inline const MetadataStringMap &getMetadataMap() const { return std::get<7>(values_); }
    	inline void setMetadataMap(const MetadataStringMap &_value) { std::get<7>(values_) = _value; }
    	inline const eMetadataType &getItemType() const { return std::get<8>(values_); }
    	inline void setItemType(const eMetadataType &_value) { std::get<8>(values_) = _value; }
    	inline bool operator==(const tMetadataItem& _other) const {
                return (getID() == _other.getID() && getValue() == _other.getValue() && getPlayable() == _other.getPlayable() && getBrowsable() == _other.getBrowsable() && getFolderType() == _other.getFolderType() && getContentType() == _other.getContentType() && getMetadataCountMap() == _other.getMetadataCountMap() && getMetadataMap() == _other.getMetadataMap() && getItemType() == _other.getItemType());
        }
    	inline bool operator!=(const tMetadataItem &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MMPresTypes::tMetadataItem> MetadataItemList;
    
    struct eMediaError : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            MEDIAERROR_NO_ERROR = 0,
            MEDIAERROR_INVALIDPARAMATERS = 1,
            MEDIAERROR_WRONGSTATE = 2,
            MEDIAERROR_FSUNSUPPORTED = 3,
            MEDIAERROR_FILES_SKIPPED = 4,
            MEDIAERROR_BUSY = 5,
            MEDIAERROR_NO_MEMORY = 6,
            MEDIAERROR_CORRUPTED = 7,
            MEDIAERROR_BADPLAYLIST = 8,
            MEDIAERROR_ENDOFPLAYLIST = 9,
            MEDIAERROR_BACKEND_UNREACHABLE = 10,
            MEDIAERROR_DRM = 11,
            MEDIAERROR_COMMUNICATION = 12,
            MEDIAERROR_FILEUNAVAILABLE = 13,
            MEDIAERROR_FILENOTEXIST = 14,
            MEDIAERROR_FILECORRUPT = 15,
            MEDIAERROR_NO_PLAYLIST = 16,
            MEDIAERROR_EMPTY_PLAYLIST = 17,
            MEDIAERROR_CORRUPT_PLAYLIST = 18,
            MEDIAERROR_NO_PERMISSION = 19,
            MEDIAERROR_CHARGING_NOTSUPPORTED = 20,
            MEDIAERROR_OFFBOARD_UNAVAILABLE = 21,
            MEDIAERROR_CONCURRTPLAYBACK_NOTSUPPORTED = 22,
            MEDIAERROR_DEVICE_UNAVAILABLE = 23,
            MEDIAERROR_DEVICE_UNSUPPORTED = 24,
            MEDIAERROR_DEVICE_EMPTY = 25,
            MEDIAERROR_READ_ERROR = 26,
            MEDIAERROR_MOUNT_ERROR = 27,
            MEDIAERROR_UMOUNT_ERROR = 28,
            MEDIAERROR_MEDIUM_REMOVED = 29,
            MEDIAERROR_MECHANICAL_ERROR = 30,
            MEDIAERROR_PARTITION_ERROR = 31,
            MEDIAERROR_FILESYSTEM_FORMAT_ERROR = 32,
            MEDIAERROR_FILESYSTEM_FORMAT_UNSUPPORTED = 33,
            MEDIAERROR_USBHUB_UNSUPPORTED = 34,
            MEDIAERROR_EXCESSIVE_POWER = 35,
            MEDIAERROR_APPLE_UNACCESSIBLE = 36,
            MEDIAERROR_APPLE_ACCESSIBLE = 37,
            MEDIAERROR_TOOMANY_USBDEVICES = 38,
            MEDIAERROR_AUDIOLANGUAGE_INVALID = 39,
            MEDIAERROR_SUBTITLE_INVALID = 40,
            MEDIAERROR_SUBTITLE_UNAVAILABLE = 41,
            MEDIAERROR_VIDEO_UNAVAILABLE = 42,
            MEDIAERROR_ITUNES_UNACCESSIBLE = 43,
            MEDIAERROR_UNSUPPORTED = 44,
            MEDIAERROR_UNKNOWN = 45
        };
        
        eMediaError() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::MEDIAERROR_NO_ERROR)) {}
        eMediaError(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::MEDIAERROR_NO_ERROR):
                case static_cast<int32_t>(Literal::MEDIAERROR_INVALIDPARAMATERS):
                case static_cast<int32_t>(Literal::MEDIAERROR_WRONGSTATE):
                case static_cast<int32_t>(Literal::MEDIAERROR_FSUNSUPPORTED):
                case static_cast<int32_t>(Literal::MEDIAERROR_FILES_SKIPPED):
                case static_cast<int32_t>(Literal::MEDIAERROR_BUSY):
                case static_cast<int32_t>(Literal::MEDIAERROR_NO_MEMORY):
                case static_cast<int32_t>(Literal::MEDIAERROR_CORRUPTED):
                case static_cast<int32_t>(Literal::MEDIAERROR_BADPLAYLIST):
                case static_cast<int32_t>(Literal::MEDIAERROR_ENDOFPLAYLIST):
                case static_cast<int32_t>(Literal::MEDIAERROR_BACKEND_UNREACHABLE):
                case static_cast<int32_t>(Literal::MEDIAERROR_DRM):
                case static_cast<int32_t>(Literal::MEDIAERROR_COMMUNICATION):
                case static_cast<int32_t>(Literal::MEDIAERROR_FILEUNAVAILABLE):
                case static_cast<int32_t>(Literal::MEDIAERROR_FILENOTEXIST):
                case static_cast<int32_t>(Literal::MEDIAERROR_FILECORRUPT):
                case static_cast<int32_t>(Literal::MEDIAERROR_NO_PLAYLIST):
                case static_cast<int32_t>(Literal::MEDIAERROR_EMPTY_PLAYLIST):
                case static_cast<int32_t>(Literal::MEDIAERROR_CORRUPT_PLAYLIST):
                case static_cast<int32_t>(Literal::MEDIAERROR_NO_PERMISSION):
                case static_cast<int32_t>(Literal::MEDIAERROR_CHARGING_NOTSUPPORTED):
                case static_cast<int32_t>(Literal::MEDIAERROR_OFFBOARD_UNAVAILABLE):
                case static_cast<int32_t>(Literal::MEDIAERROR_CONCURRTPLAYBACK_NOTSUPPORTED):
                case static_cast<int32_t>(Literal::MEDIAERROR_DEVICE_UNAVAILABLE):
                case static_cast<int32_t>(Literal::MEDIAERROR_DEVICE_UNSUPPORTED):
                case static_cast<int32_t>(Literal::MEDIAERROR_DEVICE_EMPTY):
                case static_cast<int32_t>(Literal::MEDIAERROR_READ_ERROR):
                case static_cast<int32_t>(Literal::MEDIAERROR_MOUNT_ERROR):
                case static_cast<int32_t>(Literal::MEDIAERROR_UMOUNT_ERROR):
                case static_cast<int32_t>(Literal::MEDIAERROR_MEDIUM_REMOVED):
                case static_cast<int32_t>(Literal::MEDIAERROR_MECHANICAL_ERROR):
                case static_cast<int32_t>(Literal::MEDIAERROR_PARTITION_ERROR):
                case static_cast<int32_t>(Literal::MEDIAERROR_FILESYSTEM_FORMAT_ERROR):
                case static_cast<int32_t>(Literal::MEDIAERROR_FILESYSTEM_FORMAT_UNSUPPORTED):
                case static_cast<int32_t>(Literal::MEDIAERROR_USBHUB_UNSUPPORTED):
                case static_cast<int32_t>(Literal::MEDIAERROR_EXCESSIVE_POWER):
                case static_cast<int32_t>(Literal::MEDIAERROR_APPLE_UNACCESSIBLE):
                case static_cast<int32_t>(Literal::MEDIAERROR_APPLE_ACCESSIBLE):
                case static_cast<int32_t>(Literal::MEDIAERROR_TOOMANY_USBDEVICES):
                case static_cast<int32_t>(Literal::MEDIAERROR_AUDIOLANGUAGE_INVALID):
                case static_cast<int32_t>(Literal::MEDIAERROR_SUBTITLE_INVALID):
                case static_cast<int32_t>(Literal::MEDIAERROR_SUBTITLE_UNAVAILABLE):
                case static_cast<int32_t>(Literal::MEDIAERROR_VIDEO_UNAVAILABLE):
                case static_cast<int32_t>(Literal::MEDIAERROR_ITUNES_UNACCESSIBLE):
                case static_cast<int32_t>(Literal::MEDIAERROR_UNSUPPORTED):
                case static_cast<int32_t>(Literal::MEDIAERROR_UNKNOWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eMediaError &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eMediaError &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eMediaError &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eMediaError &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eMediaError &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eMediaError &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    typedef std::unordered_map<uint8_t, ::v3::com::harman::mmpres::MMPresTypes::eMediaError> MediaErrorMap;
    
    struct eCallResult : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            CALLRESULT_OK = 0,
            CALLRESULT_CANCELLED_USER_REQUEST = 1,
            CALLRESULT_BAD_PARAMETER = 2,
            CALLRESULT_FAILED_MEDIUM_REMOVED = 3,
            CALLRESULT_FAILED_INTERNALERROR = 4,
            CALLRESULT_FAILED_NORES = 5
        };
        
        eCallResult() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::CALLRESULT_OK)) {}
        eCallResult(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::CALLRESULT_OK):
                case static_cast<int32_t>(Literal::CALLRESULT_CANCELLED_USER_REQUEST):
                case static_cast<int32_t>(Literal::CALLRESULT_BAD_PARAMETER):
                case static_cast<int32_t>(Literal::CALLRESULT_FAILED_MEDIUM_REMOVED):
                case static_cast<int32_t>(Literal::CALLRESULT_FAILED_INTERNALERROR):
                case static_cast<int32_t>(Literal::CALLRESULT_FAILED_NORES):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eCallResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eCallResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eCallResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eCallResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eCallResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eCallResult &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ePlayState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            PLAYSTATE_PLAYING = 0,
            PLAYSTATE_PAUSED = 1,
            PLAYSTATE_STOPPED = 2,
            PLAYSTATE_FASTFORWARD = 3,
            PLAYSTATE_FASTREVERSE = 4,
            PLAYSTATE_ERROR = 5,
            PLAYSTATE_UNKNOWN = 6
        };
        
        ePlayState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::PLAYSTATE_PLAYING)) {}
        ePlayState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::PLAYSTATE_PLAYING):
                case static_cast<int32_t>(Literal::PLAYSTATE_PAUSED):
                case static_cast<int32_t>(Literal::PLAYSTATE_STOPPED):
                case static_cast<int32_t>(Literal::PLAYSTATE_FASTFORWARD):
                case static_cast<int32_t>(Literal::PLAYSTATE_FASTREVERSE):
                case static_cast<int32_t>(Literal::PLAYSTATE_ERROR):
                case static_cast<int32_t>(Literal::PLAYSTATE_UNKNOWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ePlayState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ePlayState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ePlayState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ePlayState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ePlayState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ePlayState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eScanStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SCAN_ON = 0,
            SCAN_OFF = 1,
            SCAN_ERROR = 2,
            SCAN_UNKNOWN = 3
        };
        
        eScanStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SCAN_ON)) {}
        eScanStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SCAN_ON):
                case static_cast<int32_t>(Literal::SCAN_OFF):
                case static_cast<int32_t>(Literal::SCAN_ERROR):
                case static_cast<int32_t>(Literal::SCAN_UNKNOWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eScanStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eScanStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eScanStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eScanStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eScanStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eScanStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eTrackSeekSpeed : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SPEED_ZERO = 1,
            SPEED_1X = 2,
            SPEED_2X = 4,
            SPEED_4X = 8,
            SPEED_8X = 16,
            SPEED_16X = 32,
            SPEED_32X = 64,
            SPEED_64X = 128,
            SPEED_128X = 256,
            SPEED_DEVICE_DEPENDENT = 512
        };
        
        eTrackSeekSpeed() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SPEED_ZERO)) {}
        eTrackSeekSpeed(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SPEED_ZERO):
                case static_cast<int32_t>(Literal::SPEED_1X):
                case static_cast<int32_t>(Literal::SPEED_2X):
                case static_cast<int32_t>(Literal::SPEED_4X):
                case static_cast<int32_t>(Literal::SPEED_8X):
                case static_cast<int32_t>(Literal::SPEED_16X):
                case static_cast<int32_t>(Literal::SPEED_32X):
                case static_cast<int32_t>(Literal::SPEED_64X):
                case static_cast<int32_t>(Literal::SPEED_128X):
                case static_cast<int32_t>(Literal::SPEED_DEVICE_DEPENDENT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eTrackSeekSpeed &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eTrackSeekSpeed &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eTrackSeekSpeed &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eTrackSeekSpeed &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eTrackSeekSpeed &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eTrackSeekSpeed &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ePlaybackSpeed : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SLOWER = 0,
            NORMAL = 1,
            FASTER = 2
        };
        
        ePlaybackSpeed() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SLOWER)) {}
        ePlaybackSpeed(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SLOWER):
                case static_cast<int32_t>(Literal::NORMAL):
                case static_cast<int32_t>(Literal::FASTER):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ePlaybackSpeed &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ePlaybackSpeed &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ePlaybackSpeed &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ePlaybackSpeed &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ePlaybackSpeed &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ePlaybackSpeed &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct tTrackState : CommonAPI::Struct<uint64_t, uint64_t> {
    	
    	tTrackState() {
    	}
    	tTrackState(const uint64_t &_currentTrack, const uint64_t &_totalTracks)
    	{
    		std::get<0>(values_) = _currentTrack;
    		std::get<1>(values_) = _totalTracks;
    	}
    	inline const uint64_t &getCurrentTrack() const { return std::get<0>(values_); }
    	inline void setCurrentTrack(const uint64_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint64_t &getTotalTracks() const { return std::get<1>(values_); }
    	inline void setTotalTracks(const uint64_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const tTrackState& _other) const {
                return (getCurrentTrack() == _other.getCurrentTrack() && getTotalTracks() == _other.getTotalTracks());
        }
    	inline bool operator!=(const tTrackState &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct tNowPlayingInfo : CommonAPI::Struct<std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string, uint64_t, bool, uint64_t, uint64_t, uint64_t, bool, eMetadataType> {
    	
    	tNowPlayingInfo() {
    		std::get<11>(values_) = false;
    		std::get<15>(values_) = false;
    	}
    	tNowPlayingInfo(const std::string &_title, const std::string &_artist, const std::string &_album, const std::string &_genre, const std::string &_composer, const std::string &_filename, const std::string &_audiobook, const std::string &_podcast, const std::string &_episode, const std::string &_playlist, const uint64_t &_year, const bool &_chaptersAvailable, const uint64_t &_chapterNumber, const uint64_t &_mediumId, const uint64_t &_fid, const bool &_isFav, const eMetadataType &_nowPlayingItemType)
    	{
    		std::get<0>(values_) = _title;
    		std::get<1>(values_) = _artist;
    		std::get<2>(values_) = _album;
    		std::get<3>(values_) = _genre;
    		std::get<4>(values_) = _composer;
    		std::get<5>(values_) = _filename;
    		std::get<6>(values_) = _audiobook;
    		std::get<7>(values_) = _podcast;
    		std::get<8>(values_) = _episode;
    		std::get<9>(values_) = _playlist;
    		std::get<10>(values_) = _year;
    		std::get<11>(values_) = _chaptersAvailable;
    		std::get<12>(values_) = _chapterNumber;
    		std::get<13>(values_) = _mediumId;
    		std::get<14>(values_) = _fid;
    		std::get<15>(values_) = _isFav;
    		std::get<16>(values_) = _nowPlayingItemType;
    	}
    	inline const std::string &getTitle() const { return std::get<0>(values_); }
    	inline void setTitle(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getArtist() const { return std::get<1>(values_); }
    	inline void setArtist(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const std::string &getAlbum() const { return std::get<2>(values_); }
    	inline void setAlbum(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getGenre() const { return std::get<3>(values_); }
    	inline void setGenre(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline const std::string &getComposer() const { return std::get<4>(values_); }
    	inline void setComposer(const std::string &_value) { std::get<4>(values_) = _value; }
    	inline const std::string &getFilename() const { return std::get<5>(values_); }
    	inline void setFilename(const std::string &_value) { std::get<5>(values_) = _value; }
    	inline const std::string &getAudiobook() const { return std::get<6>(values_); }
    	inline void setAudiobook(const std::string &_value) { std::get<6>(values_) = _value; }
    	inline const std::string &getPodcast() const { return std::get<7>(values_); }
    	inline void setPodcast(const std::string &_value) { std::get<7>(values_) = _value; }
    	inline const std::string &getEpisode() const { return std::get<8>(values_); }
    	inline void setEpisode(const std::string &_value) { std::get<8>(values_) = _value; }
    	inline const std::string &getPlaylist() const { return std::get<9>(values_); }
    	inline void setPlaylist(const std::string &_value) { std::get<9>(values_) = _value; }
    	inline const uint64_t &getYear() const { return std::get<10>(values_); }
    	inline void setYear(const uint64_t &_value) { std::get<10>(values_) = _value; }
    	inline const bool &getChaptersAvailable() const { return std::get<11>(values_); }
    	inline void setChaptersAvailable(const bool _value) { std::get<11>(values_) = _value; }
    	inline const uint64_t &getChapterNumber() const { return std::get<12>(values_); }
    	inline void setChapterNumber(const uint64_t &_value) { std::get<12>(values_) = _value; }
    	inline const uint64_t &getMediumId() const { return std::get<13>(values_); }
    	inline void setMediumId(const uint64_t &_value) { std::get<13>(values_) = _value; }
    	inline const uint64_t &getFid() const { return std::get<14>(values_); }
    	inline void setFid(const uint64_t &_value) { std::get<14>(values_) = _value; }
    	inline const bool &getIsFav() const { return std::get<15>(values_); }
    	inline void setIsFav(const bool _value) { std::get<15>(values_) = _value; }
    	inline const eMetadataType &getNowPlayingItemType() const { return std::get<16>(values_); }
    	inline void setNowPlayingItemType(const eMetadataType &_value) { std::get<16>(values_) = _value; }
    	inline bool operator==(const tNowPlayingInfo& _other) const {
                return (getTitle() == _other.getTitle() && getArtist() == _other.getArtist() && getAlbum() == _other.getAlbum() && getGenre() == _other.getGenre() && getComposer() == _other.getComposer() && getFilename() == _other.getFilename() && getAudiobook() == _other.getAudiobook() && getPodcast() == _other.getPodcast() && getEpisode() == _other.getEpisode() && getPlaylist() == _other.getPlaylist() && getYear() == _other.getYear() && getChaptersAvailable() == _other.getChaptersAvailable() && getChapterNumber() == _other.getChapterNumber() && getMediumId() == _other.getMediumId() && getFid() == _other.getFid() && getIsFav() == _other.getIsFav() && getNowPlayingItemType() == _other.getNowPlayingItemType());
        }
    	inline bool operator!=(const tNowPlayingInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct eArtWorkAvailabilityStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ARTWORK_STATUS_AVAILABLE = 0,
            ARTWORK_STATUS_UNAVAILABLE = 1,
            ARTWORK_STATUS_UNKNOWN = 2,
            ARTWORK_NOT_SUPPORTED = 3
        };
        
        eArtWorkAvailabilityStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ARTWORK_STATUS_AVAILABLE)) {}
        eArtWorkAvailabilityStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ARTWORK_STATUS_AVAILABLE):
                case static_cast<int32_t>(Literal::ARTWORK_STATUS_UNAVAILABLE):
                case static_cast<int32_t>(Literal::ARTWORK_STATUS_UNKNOWN):
                case static_cast<int32_t>(Literal::ARTWORK_NOT_SUPPORTED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eArtWorkAvailabilityStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eArtWorkAvailabilityStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eArtWorkAvailabilityStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eArtWorkAvailabilityStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eArtWorkAvailabilityStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eArtWorkAvailabilityStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct tArtWorkImageProperty : CommonAPI::Struct<uint64_t, uint64_t, uint64_t, std::string> {
    	
    	tArtWorkImageProperty() {
    	}
    	tArtWorkImageProperty(const uint64_t &_width, const uint64_t &_height, const uint64_t &_size, const std::string &_description)
    	{
    		std::get<0>(values_) = _width;
    		std::get<1>(values_) = _height;
    		std::get<2>(values_) = _size;
    		std::get<3>(values_) = _description;
    	}
    	inline const uint64_t &getWidth() const { return std::get<0>(values_); }
    	inline void setWidth(const uint64_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint64_t &getHeight() const { return std::get<1>(values_); }
    	inline void setHeight(const uint64_t &_value) { std::get<1>(values_) = _value; }
    	inline const uint64_t &getSize() const { return std::get<2>(values_); }
    	inline void setSize(const uint64_t &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getDescription() const { return std::get<3>(values_); }
    	inline void setDescription(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const tArtWorkImageProperty& _other) const {
                return (getWidth() == _other.getWidth() && getHeight() == _other.getHeight() && getSize() == _other.getSize() && getDescription() == _other.getDescription());
        }
    	inline bool operator!=(const tArtWorkImageProperty &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct tArtWorkImagePositionType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ALBUMART_POSITION_TIME = 0,
            ALBUMART_POSITION_CHAPTERNUMBER = 1,
            ALBUMART_POSITION_NONE = 2
        };
        
        tArtWorkImagePositionType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ALBUMART_POSITION_TIME)) {}
        tArtWorkImagePositionType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ALBUMART_POSITION_TIME):
                case static_cast<int32_t>(Literal::ALBUMART_POSITION_CHAPTERNUMBER):
                case static_cast<int32_t>(Literal::ALBUMART_POSITION_NONE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const tArtWorkImagePositionType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const tArtWorkImagePositionType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const tArtWorkImagePositionType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const tArtWorkImagePositionType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const tArtWorkImagePositionType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const tArtWorkImagePositionType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct tArtWorkArtImage : CommonAPI::Struct<uint8_t, tArtWorkImagePositionType, uint64_t, tArtWorkImageProperty> {
    	
    	tArtWorkArtImage() {
    	}
    	tArtWorkArtImage(const uint8_t &_imageNumber, const tArtWorkImagePositionType &_positionType, const uint64_t &_artWorkPosition, const tArtWorkImageProperty &_property)
    	{
    		std::get<0>(values_) = _imageNumber;
    		std::get<1>(values_) = _positionType;
    		std::get<2>(values_) = _artWorkPosition;
    		std::get<3>(values_) = _property;
    	}
    	inline const uint8_t &getImageNumber() const { return std::get<0>(values_); }
    	inline void setImageNumber(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	inline const tArtWorkImagePositionType &getPositionType() const { return std::get<1>(values_); }
    	inline void setPositionType(const tArtWorkImagePositionType &_value) { std::get<1>(values_) = _value; }
    	inline const uint64_t &getArtWorkPosition() const { return std::get<2>(values_); }
    	inline void setArtWorkPosition(const uint64_t &_value) { std::get<2>(values_) = _value; }
    	inline const tArtWorkImageProperty &getProperty() const { return std::get<3>(values_); }
    	inline void setProperty(const tArtWorkImageProperty &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const tArtWorkArtImage& _other) const {
                return (getImageNumber() == _other.getImageNumber() && getPositionType() == _other.getPositionType() && getArtWorkPosition() == _other.getArtWorkPosition() && getProperty() == _other.getProperty());
        }
    	inline bool operator!=(const tArtWorkArtImage &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MMPresTypes::tArtWorkArtImage> artWorkImageInfo;
    struct tAlbumArtInformation : CommonAPI::Struct<uint8_t, artWorkImageInfo> {
    	
    	tAlbumArtInformation() {
    	}
    	tAlbumArtInformation(const uint8_t &_totalImages, const artWorkImageInfo &_info)
    	{
    		std::get<0>(values_) = _totalImages;
    		std::get<1>(values_) = _info;
    	}
    	inline const uint8_t &getTotalImages() const { return std::get<0>(values_); }
    	inline void setTotalImages(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	inline const artWorkImageInfo &getInfo() const { return std::get<1>(values_); }
    	inline void setInfo(const artWorkImageInfo &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const tAlbumArtInformation& _other) const {
                return (getTotalImages() == _other.getTotalImages() && getInfo() == _other.getInfo());
        }
    	inline bool operator!=(const tAlbumArtInformation &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Screen coordinates.
     */
    struct tScreen : CommonAPI::Struct<uint32_t, uint32_t, uint32_t, uint32_t> {
    	
    	tScreen() {
    	}
    	tScreen(const uint32_t &_left, const uint32_t &_top, const uint32_t &_right, const uint32_t &_bottom)
    	{
    		std::get<0>(values_) = _left;
    		std::get<1>(values_) = _top;
    		std::get<2>(values_) = _right;
    		std::get<3>(values_) = _bottom;
    	}
    	inline const uint32_t &getLeft() const { return std::get<0>(values_); }
    	inline void setLeft(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint32_t &getTop() const { return std::get<1>(values_); }
    	inline void setTop(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	inline const uint32_t &getRight() const { return std::get<2>(values_); }
    	inline void setRight(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	inline const uint32_t &getBottom() const { return std::get<3>(values_); }
    	inline void setBottom(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const tScreen& _other) const {
                return (getLeft() == _other.getLeft() && getTop() == _other.getTop() && getRight() == _other.getRight() && getBottom() == _other.getBottom());
        }
    	inline bool operator!=(const tScreen &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct eAudioChannelStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            STEREO = 0,
            LEFT = 1,
            RIGHT = 2
        };
        
        eAudioChannelStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::STEREO)) {}
        eAudioChannelStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::STEREO):
                case static_cast<int32_t>(Literal::LEFT):
                case static_cast<int32_t>(Literal::RIGHT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eAudioChannelStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eAudioChannelStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eAudioChannelStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eAudioChannelStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eAudioChannelStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eAudioChannelStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eSubtitleStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ON = 0,
            OFF = 1
        };
        
        eSubtitleStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ON)) {}
        eSubtitleStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ON):
                case static_cast<int32_t>(Literal::OFF):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eSubtitleStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eSubtitleStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eSubtitleStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eSubtitleStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eSubtitleStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eSubtitleStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eQueryStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            QUERY_STATE_PROCESSING = 0,
            QUERY_STATE_FINISHED = 1,
            QUERY_STATE_ABORTED = 2
        };
        
        eQueryStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::QUERY_STATE_PROCESSING)) {}
        eQueryStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::QUERY_STATE_PROCESSING):
                case static_cast<int32_t>(Literal::QUERY_STATE_FINISHED):
                case static_cast<int32_t>(Literal::QUERY_STATE_ABORTED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eQueryStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eQueryStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eQueryStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eQueryStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eQueryStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eQueryStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct tAlphaIndex : CommonAPI::Struct<std::string, uint32_t> {
    	
    	tAlphaIndex() {
    	}
    	tAlphaIndex(const std::string &_alpha, const uint32_t &_index)
    	{
    		std::get<0>(values_) = _alpha;
    		std::get<1>(values_) = _index;
    	}
    	inline const std::string &getAlpha() const { return std::get<0>(values_); }
    	inline void setAlpha(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const uint32_t &getIndex() const { return std::get<1>(values_); }
    	inline void setIndex(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const tAlphaIndex& _other) const {
                return (getAlpha() == _other.getAlpha() && getIndex() == _other.getIndex());
        }
    	inline bool operator!=(const tAlphaIndex &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MMPresTypes::tAlphaIndex> arAlphaIndex;
    struct tPlaybackSpeed : CommonAPI::Struct<uint8_t, eMetadataType, ePlaybackSpeed> {
    	
    	tPlaybackSpeed() {
    	}
    	tPlaybackSpeed(const uint8_t &_slotId, const eMetadataType &_type, const ePlaybackSpeed &_PlaybackSpeed)
    	{
    		std::get<0>(values_) = _slotId;
    		std::get<1>(values_) = _type;
    		std::get<2>(values_) = _PlaybackSpeed;
    	}
    	inline const uint8_t &getSlotId() const { return std::get<0>(values_); }
    	inline void setSlotId(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	inline const eMetadataType &getType() const { return std::get<1>(values_); }
    	inline void setType(const eMetadataType &_value) { std::get<1>(values_) = _value; }
    	inline const ePlaybackSpeed &getPlaybackSpeed() const { return std::get<2>(values_); }
    	inline void setPlaybackSpeed(const ePlaybackSpeed &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const tPlaybackSpeed& _other) const {
                return (getSlotId() == _other.getSlotId() && getType() == _other.getType() && getPlaybackSpeed() == _other.getPlaybackSpeed());
        }
    	inline bool operator!=(const tPlaybackSpeed &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct tTrackListSupport : CommonAPI::Struct<uint8_t, bool> {
    	
    	tTrackListSupport() {
    		std::get<1>(values_) = false;
    	}
    	tTrackListSupport(const uint8_t &_slotId, const bool &_IsTrackListSupported)
    	{
    		std::get<0>(values_) = _slotId;
    		std::get<1>(values_) = _IsTrackListSupported;
    	}
    	inline const uint8_t &getSlotId() const { return std::get<0>(values_); }
    	inline void setSlotId(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	inline const bool &getIsTrackListSupported() const { return std::get<1>(values_); }
    	inline void setIsTrackListSupported(const bool _value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const tTrackListSupport& _other) const {
                return (getSlotId() == _other.getSlotId() && getIsTrackListSupported() == _other.getIsTrackListSupported());
        }
    	inline bool operator!=(const tTrackListSupport &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct IAP2ButtonType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            BUTTON_PLAY = 0,
            BUTTON_PAUSE = 1,
            BUTTON_NEXTTRACK = 2,
            BUTTON_PREVTRACK = 3,
            BUTTON_RANDOM = 4,
            BUTTON_REPEAT = 5,
            BUTTON_NORMALSPEED = 6,
            BUTTON_INCREASESPEED = 7,
            BUTTON_DECREASESPEED = 8,
            BUTTON_PLAYPAUSE = 9,
            BUTTON_SIRI = 10,
            BUTTON_MUTE = 11,
            BUTTON_INCREASEVOLUME = 12,
            BUTTON_DECREASEVOLUME = 13,
            BUTTON_PROMOTE = 14,
            BUTTON_DEMOTE = 15,
            BUTTON_ADDTOWISHLIST = 16
        };
        
        IAP2ButtonType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::BUTTON_PLAY)) {}
        IAP2ButtonType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::BUTTON_PLAY):
                case static_cast<int32_t>(Literal::BUTTON_PAUSE):
                case static_cast<int32_t>(Literal::BUTTON_NEXTTRACK):
                case static_cast<int32_t>(Literal::BUTTON_PREVTRACK):
                case static_cast<int32_t>(Literal::BUTTON_RANDOM):
                case static_cast<int32_t>(Literal::BUTTON_REPEAT):
                case static_cast<int32_t>(Literal::BUTTON_NORMALSPEED):
                case static_cast<int32_t>(Literal::BUTTON_INCREASESPEED):
                case static_cast<int32_t>(Literal::BUTTON_DECREASESPEED):
                case static_cast<int32_t>(Literal::BUTTON_PLAYPAUSE):
                case static_cast<int32_t>(Literal::BUTTON_SIRI):
                case static_cast<int32_t>(Literal::BUTTON_MUTE):
                case static_cast<int32_t>(Literal::BUTTON_INCREASEVOLUME):
                case static_cast<int32_t>(Literal::BUTTON_DECREASEVOLUME):
                case static_cast<int32_t>(Literal::BUTTON_PROMOTE):
                case static_cast<int32_t>(Literal::BUTTON_DEMOTE):
                case static_cast<int32_t>(Literal::BUTTON_ADDTOWISHLIST):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const IAP2ButtonType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const IAP2ButtonType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const IAP2ButtonType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const IAP2ButtonType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const IAP2ButtonType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const IAP2ButtonType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eRemoteCDDiscStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            eInvalidStatus = 0,
            eReading = 1,
            eLoading = 2,
            eLoaded = 3,
            eInsert = 4,
            ePrepareEject = 5,
            eEjecting = 6,
            eRemoveDisc = 7
        };
        
        eRemoteCDDiscStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::eInvalidStatus)) {}
        eRemoteCDDiscStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::eInvalidStatus):
                case static_cast<int32_t>(Literal::eReading):
                case static_cast<int32_t>(Literal::eLoading):
                case static_cast<int32_t>(Literal::eLoaded):
                case static_cast<int32_t>(Literal::eInsert):
                case static_cast<int32_t>(Literal::ePrepareEject):
                case static_cast<int32_t>(Literal::eEjecting):
                case static_cast<int32_t>(Literal::eRemoveDisc):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eRemoteCDDiscStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eRemoteCDDiscStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eRemoteCDDiscStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eRemoteCDDiscStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eRemoteCDDiscStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eRemoteCDDiscStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eRemoteCDError : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            eInvalid = 0,
            eNoError = 1,
            eNoDisc = 2,
            eUnableToReadDisc = 3
        };
        
        eRemoteCDError() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::eInvalid)) {}
        eRemoteCDError(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::eInvalid):
                case static_cast<int32_t>(Literal::eNoError):
                case static_cast<int32_t>(Literal::eNoDisc):
                case static_cast<int32_t>(Literal::eUnableToReadDisc):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eRemoteCDError &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eRemoteCDError &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eRemoteCDError &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eRemoteCDError &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eRemoteCDError &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eRemoteCDError &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eRemoteCDHardwareError : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            eInvalid = 0,
            eNoError = 1,
            eROMReadError = 2,
            eKeyCodeLocked = 3,
            eKeyCodeLockedForever = 4,
            eCommunicationError = 5,
            eOverTemperatureError = 6,
            eFocusError = 7
        };
        
        eRemoteCDHardwareError() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::eInvalid)) {}
        eRemoteCDHardwareError(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::eInvalid):
                case static_cast<int32_t>(Literal::eNoError):
                case static_cast<int32_t>(Literal::eROMReadError):
                case static_cast<int32_t>(Literal::eKeyCodeLocked):
                case static_cast<int32_t>(Literal::eKeyCodeLockedForever):
                case static_cast<int32_t>(Literal::eCommunicationError):
                case static_cast<int32_t>(Literal::eOverTemperatureError):
                case static_cast<int32_t>(Literal::eFocusError):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eRemoteCDHardwareError &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eRemoteCDHardwareError &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eRemoteCDHardwareError &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eRemoteCDHardwareError &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eRemoteCDHardwareError &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eRemoteCDHardwareError &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct RemoteCDErrorStatus : CommonAPI::Struct<eRemoteCDError, eRemoteCDHardwareError> {
    	
    	RemoteCDErrorStatus() {
    	}
    	RemoteCDErrorStatus(const eRemoteCDError &_DiskError, const eRemoteCDHardwareError &_hwError)
    	{
    		std::get<0>(values_) = _DiskError;
    		std::get<1>(values_) = _hwError;
    	}
    	inline const eRemoteCDError &getDiskError() const { return std::get<0>(values_); }
    	inline void setDiskError(const eRemoteCDError &_value) { std::get<0>(values_) = _value; }
    	inline const eRemoteCDHardwareError &getHwError() const { return std::get<1>(values_); }
    	inline void setHwError(const eRemoteCDHardwareError &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const RemoteCDErrorStatus& _other) const {
                return (getDiskError() == _other.getDiskError() && getHwError() == _other.getHwError());
        }
    	inline bool operator!=(const RemoteCDErrorStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct eCDEOLStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            eNONE_REMOTECD_EOL = 0,
            eDISABLE_REMOTE_CD = 1,
            eENABLE_CD_WITHOUT_EJECT_WARNING_POPUP = 2,
            eENABLE_CD_WITH_EJECT_WARNING_POPUP = 3
        };
        
        eCDEOLStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::eNONE_REMOTECD_EOL)) {}
        eCDEOLStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::eNONE_REMOTECD_EOL):
                case static_cast<int32_t>(Literal::eDISABLE_REMOTE_CD):
                case static_cast<int32_t>(Literal::eENABLE_CD_WITHOUT_EJECT_WARNING_POPUP):
                case static_cast<int32_t>(Literal::eENABLE_CD_WITH_EJECT_WARNING_POPUP):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eCDEOLStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eCDEOLStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eCDEOLStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eCDEOLStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eCDEOLStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eCDEOLStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.mmpres.MMPresTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(3, 0);
}

}; // struct MMPresTypes

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v3

namespace CommonAPI {
}


namespace std {
    //Hash for eSlotType
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eSlotType> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eSlotType& eSlotType) const {
            return static_cast<int32_t>(eSlotType);
        }
    };
    //Hash for eFileSystemContentType
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eFileSystemContentType> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eFileSystemContentType& eFileSystemContentType) const {
            return static_cast<int32_t>(eFileSystemContentType);
        }
    };
    //Hash for eDeviceType
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eDeviceType> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eDeviceType& eDeviceType) const {
            return static_cast<int32_t>(eDeviceType);
        }
    };
    //Hash for eDeviceCapabilities
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eDeviceCapabilities> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eDeviceCapabilities& eDeviceCapabilities) const {
            return static_cast<int32_t>(eDeviceCapabilities);
        }
    };
    //Hash for eRemotePlayerCapability
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eRemotePlayerCapability> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eRemotePlayerCapability& eRemotePlayerCapability) const {
            return static_cast<int32_t>(eRemotePlayerCapability);
        }
    };
    //Hash for eRepeatMode
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eRepeatMode> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eRepeatMode& eRepeatMode) const {
            return static_cast<int32_t>(eRepeatMode);
        }
    };
    //Hash for eShuffleMode
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eShuffleMode> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eShuffleMode& eShuffleMode) const {
            return static_cast<int32_t>(eShuffleMode);
        }
    };
    //Hash for eSlotState
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eSlotState> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eSlotState& eSlotState) const {
            return static_cast<int32_t>(eSlotState);
        }
    };
    //Hash for eSyncState
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eSyncState> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eSyncState& eSyncState) const {
            return static_cast<int32_t>(eSyncState);
        }
    };
    //Hash for eTitleContentType
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eTitleContentType> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eTitleContentType& eTitleContentType) const {
            return static_cast<int32_t>(eTitleContentType);
        }
    };
    //Hash for eBTMediaProfile
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eBTMediaProfile> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eBTMediaProfile& eBTMediaProfile) const {
            return static_cast<int32_t>(eBTMediaProfile);
        }
    };
    //Hash for eMetadataType
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eMetadataType> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eMetadataType& eMetadataType) const {
            return static_cast<int32_t>(eMetadataType);
        }
    };
    //Hash for eFilterType
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eFilterType> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eFilterType& eFilterType) const {
            return static_cast<int32_t>(eFilterType);
        }
    };
    //Hash for ePrevBrowseLevel
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::ePrevBrowseLevel> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::ePrevBrowseLevel& ePrevBrowseLevel) const {
            return static_cast<int32_t>(ePrevBrowseLevel);
        }
    };
    //Hash for eSessionQueryTypes
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eSessionQueryTypes> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eSessionQueryTypes& eSessionQueryTypes) const {
            return static_cast<int32_t>(eSessionQueryTypes);
        }
    };
    //Hash for eMediaError
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eMediaError> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eMediaError& eMediaError) const {
            return static_cast<int32_t>(eMediaError);
        }
    };
    //Hash for eCallResult
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eCallResult> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eCallResult& eCallResult) const {
            return static_cast<int32_t>(eCallResult);
        }
    };
    //Hash for ePlayState
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::ePlayState> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::ePlayState& ePlayState) const {
            return static_cast<int32_t>(ePlayState);
        }
    };
    //Hash for eScanStatus
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eScanStatus> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eScanStatus& eScanStatus) const {
            return static_cast<int32_t>(eScanStatus);
        }
    };
    //Hash for eTrackSeekSpeed
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed& eTrackSeekSpeed) const {
            return static_cast<int32_t>(eTrackSeekSpeed);
        }
    };
    //Hash for ePlaybackSpeed
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::ePlaybackSpeed> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::ePlaybackSpeed& ePlaybackSpeed) const {
            return static_cast<int32_t>(ePlaybackSpeed);
        }
    };
    //Hash for eArtWorkAvailabilityStatus
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus& eArtWorkAvailabilityStatus) const {
            return static_cast<int32_t>(eArtWorkAvailabilityStatus);
        }
    };
    //Hash for tArtWorkImagePositionType
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::tArtWorkImagePositionType> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::tArtWorkImagePositionType& tArtWorkImagePositionType) const {
            return static_cast<int32_t>(tArtWorkImagePositionType);
        }
    };
    //Hash for eAudioChannelStatus
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus& eAudioChannelStatus) const {
            return static_cast<int32_t>(eAudioChannelStatus);
        }
    };
    //Hash for eSubtitleStatus
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus& eSubtitleStatus) const {
            return static_cast<int32_t>(eSubtitleStatus);
        }
    };
    //Hash for eQueryStatus
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eQueryStatus> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eQueryStatus& eQueryStatus) const {
            return static_cast<int32_t>(eQueryStatus);
        }
    };
    //Hash for IAP2ButtonType
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::IAP2ButtonType> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::IAP2ButtonType& iAP2ButtonType) const {
            return static_cast<int32_t>(iAP2ButtonType);
        }
    };
    //Hash for eRemoteCDDiscStatus
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eRemoteCDDiscStatus> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eRemoteCDDiscStatus& eRemoteCDDiscStatus) const {
            return static_cast<int32_t>(eRemoteCDDiscStatus);
        }
    };
    //Hash for eRemoteCDError
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eRemoteCDError> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eRemoteCDError& eRemoteCDError) const {
            return static_cast<int32_t>(eRemoteCDError);
        }
    };
    //Hash for eRemoteCDHardwareError
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eRemoteCDHardwareError> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eRemoteCDHardwareError& eRemoteCDHardwareError) const {
            return static_cast<int32_t>(eRemoteCDHardwareError);
        }
    };
    //Hash for eCDEOLStatus
    template<>
    struct hash<::v3::com::harman::mmpres::MMPresTypes::eCDEOLStatus> {
        inline size_t operator()(const ::v3::com::harman::mmpres::MMPresTypes::eCDEOLStatus& eCDEOLStatus) const {
            return static_cast<int32_t>(eCDEOLStatus);
        }
    };
}


// Compatibility
namespace v3_0 = v3;

#endif // V3_COM_HARMAN_MMPRES_MM_Pres_Types_HPP_
