/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This class implements all Bluetooth and Telephony Operations
 * author: Poornima Hiremath
 */
#ifndef V4_COM_HARMAN_CONNECTIVITY_Bt_Service_PROXY_BASE_HPP_
#define V4_COM_HARMAN_CONNECTIVITY_Bt_Service_PROXY_BASE_HPP_

#include <v4/com/harman/connectivity/BtService.hpp>


#include <com/harman/connectivity/btTypedefs.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace com {
namespace harman {
namespace connectivity {

class BtServiceProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        bool
    > BluetoothStatusEvent;
    typedef CommonAPI::Event<
        ::com::harman::connectivity::btTypedefs::eOnOffState
    > OnOffStateEvent;
    typedef CommonAPI::Event<
        std::string
    > LocalDevAddrEvent;
    typedef CommonAPI::Event<
        std::string
    > PasskeyEvent;
    typedef CommonAPI::Event<
        std::string, int32_t
    > SignalQualityEvent;
    typedef CommonAPI::Event<
        std::string, bool, bool
    > VrModeEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string, std::string, std::string, std::string
    > NetworkOperatorEvent;
    typedef CommonAPI::Event<
        std::string, ::com::harman::connectivity::btTypedefs::stringList
    > SupportedFeaturesEvent;
    typedef CommonAPI::Event<
        ::com::harman::connectivity::btTypedefs::deviceSearchEntryList
    > DeviceSearchListEvent;
    typedef CommonAPI::Event<
        std::string, std::string, int32_t, std::string
    > StandardBondingRequestEvent;
    typedef CommonAPI::Event<
        std::string, std::string
    > StandardBondingRejectedEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string
    > SecureSimpleBondingRequestEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string
    > ServiceConnectionRequestEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string, bool
    > ServiceConnectedEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string, std::string
    > ServiceDisconnectedEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string
    > DeviceDisconnectedEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string
    > ServiceConnectionErrorEvent;
    typedef CommonAPI::Event<
        std::string, ::com::harman::connectivity::btTypedefs::profileList
    > BondedDeviceProfileListChangedEvent;
    typedef CommonAPI::Event<
        std::string, std::string, ::com::harman::connectivity::btTypedefs::serviceList, bool
    > BondedDeviceServiceListChangedEvent;
    typedef CommonAPI::Event<
        std::string, std::string, ::com::harman::connectivity::btTypedefs::eReasonDeviceDeleted
    > DeviceDeletedEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string
    > NetworkIfUpEvent;
    typedef CommonAPI::Event<
        std::string
    > NetworkIfDownEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string
    > BondingStatusEvent;
    typedef CommonAPI::Event<
        std::string, std::string, int32_t, bool
    > IncomingCallInfoEvent;
    typedef CommonAPI::Event<
        std::string, bool, std::string, bool
    > HandsFreeModeEvent;
    typedef CommonAPI::Event<
        std::string, bool, std::string, bool
    > AudioStatusEvent;
    typedef CommonAPI::Event<
        std::string, int32_t
    > BatteryChargeEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string, std::string, std::string, std::string
    > NetworkOperatorChangedEvent;
    typedef CommonAPI::Event<
        std::string, std::string
    > NetworkRegistrationStateEvent;
    typedef CommonAPI::Event<
        std::string, ::com::harman::connectivity::btTypedefs::callstateInfoList
    > CallStatusEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string, std::string
    > CallListUpdateEvent;
    typedef CommonAPI::Event<
    > ReconnectTimeoutExpiredEvent;
    typedef CommonAPI::Event<
    > DeviceSearchCompleteEvent;
    typedef CommonAPI::Event<
        std::string, bool, bool
    > SiriStatusEvent;
    typedef CommonAPI::Event<
        std::string, std::string
    > SubscriberNumberEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string, bool
    > ServiceConnectingEvent;
    typedef CommonAPI::Event<
        ::com::harman::connectivity::btTypedefs::eAutoConnState, int32_t, int32_t, int32_t, int32_t, int32_t
    > AutoConnectStateEvent;
    typedef CommonAPI::Event<
    > StackResetInProgressEvent;
    typedef CommonAPI::Event<
    > StackResetDoneEvent;
    typedef CommonAPI::Event<
        std::string, std::string
    > DeviceNameChangedEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string, std::string, std::string
    > DeviceIDInfoEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> SetIgnitionStateAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const bool&, const int32_t&)> GetPropBluetoothStatusAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const int32_t&)> GetSignalQualityAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const int32_t&)> GetBatteryChargeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&)> GetPropLocalDeviceAddressAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&)> GetPropLocalDeviceNameAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const bool&, const int32_t&)> GetHfpConnectionStatusAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::com::harman::connectivity::btTypedefs::bondedDevList&, const int32_t&)> GetPropBondedDeviceListAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const ::com::harman::connectivity::btTypedefs::stringList&, const int32_t&)> GetSupportedFeaturesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const bool&, const int32_t&)> GetNetworkAvailabilityAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&)> GetNetworkRegistrationStateAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&)> GetSubscriberNumberAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::com::harman::connectivity::btTypedefs::lastConnectedDevList&, const int32_t&, const std::string&)> GetlastConnectedDeviceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const ::com::harman::connectivity::btTypedefs::callstateInfoList&, const int32_t&, const std::string&)> GetCallStateEventDataAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<std::string>&, const std::vector<std::string>&)> SppInterfacesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> EnterBondingModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> ExitBondingModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const std::string&)> ChangePriorityAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> StartDeviceSearchAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> StopDeviceSearchAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const std::string&)> SecureSimpleBondingReplyAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> DeleteDeviceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> DeleteAllDevicesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> StartServiceConnectionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&)> AllowServiceConnectionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const std::string&)> StartServiceDisconnectionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> ServiceConnectionReplyAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const std::string&)> GetBondedDeviceServiceListAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::com::harman::connectivity::btTypedefs::stringList&, const ::com::harman::connectivity::btTypedefs::stringList&, const ::com::harman::connectivity::btTypedefs::integerList&, const ::com::harman::connectivity::btTypedefs::integerList&, const ::com::harman::connectivity::btTypedefs::integerList&, const ::com::harman::connectivity::btTypedefs::stringList&, const int32_t&, const std::string&)> GetRadioStatusAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const std::string&)> RenameBondedDeviceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> RenameLocalDeviceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> StartAutoConnectAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> PauseAutoConnectAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> StopAutoConnectAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> SetAutoConnectServicesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const std::string&, const std::string&, const std::string&, const std::string&, const int32_t&, const std::string&)> GetNetworkOperatorInfoAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::com::harman::connectivity::btTypedefs::bondedDevList&, const int32_t&, const std::string&)> GetBondedDeviceListAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> SetBluetoothOnAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> SetBluetoothOffAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const ::com::harman::connectivity::btTypedefs::serviceList&, const int32_t&, const std::string&)> ServiceListQueryAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> SetPinAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const int32_t&, const std::string&)> DialAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const int32_t&, const std::string&)> ReDialAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const std::string&)> SendDtmfToneAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> AcceptIncomingCallAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> EndCallAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> EndActiveCallAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> EndAllCallsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> RejectIncomingCallAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> HoldActiveCallAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> ResumeHeldCallAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> ConferenceCallAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> SelectCallAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&)> SelectVoiceCallAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const std::string&)> SetHfModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const std::string&)> SetVRModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const std::string&)> SetEyesFreeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> ClearTransferTimeoutAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> SwapCallsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> StartAutoReconnectAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> StopAutoReconnectAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::com::harman::connectivity::btTypedefs::eOnOffState&)> GetPropOnOffStatusAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const bool&, const std::string&, const int32_t&, const std::string&, const std::string&, const std::string&, const std::string&, const bool&, const std::string&, const std::string&, const std::string&, const ::com::harman::connectivity::btTypedefs::serviceList&, const int32_t&)> GetServiceListAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> StandardBondingReplyAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> AddSPPServiceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> RemoveSPPServiceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> SetDriveProfileAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> DeleteDriveProfileAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const std::string&, const std::string&, const std::string&, const int32_t&)> GetDeviceIDProfileInfoAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> MasterResetAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> RemoveDeviceFromAutoReconnectionAsyncCallback;


    /**
     * description: This event is sent to all registered listeners to inform BT status.
     * author: Poornima Hiremath
     */
    virtual BluetoothStatusEvent& getBluetoothStatusEvent() = 0;
    /**
     * description: This event is sent to all registered listeners to inform Off / On state.
     * author: Poornima Hiremath
     */
    virtual OnOffStateEvent& getOnOffStateEvent() = 0;
    /**
     * description: This event is sent to all registered listeners to inform Local device address.
     * author: Poornima Hiremath
     */
    virtual LocalDevAddrEvent& getLocalDevAddrEvent() = 0;
    /**
     * description: This event is sent to all registered listeners to inform pass Key.
     * author: Poornima Hiremath
     */
    virtual PasskeyEvent& getPasskeyEvent() = 0;
    /**
     * description: This signal is sent whenever there is a change in the signal quality.
     * author: Poornima Hiremath
     */
    virtual SignalQualityEvent& getSignalQualityEvent() = 0;
    /**
     * description: This signal is sent whenever vrMode is set.
     * author: Poornima Hiremath
     */
    virtual VrModeEvent& getVrModeEvent() = 0;
    /**
     * description: This signal is used to indicate when network operator changes.
     * author: Poornima Hiremath
     */
    virtual NetworkOperatorEvent& getNetworkOperatorEvent() = 0;
    /**
     * description: This signal is used to send the list of supported features.
     * author: Poornima Hiremath
     */
    virtual SupportedFeaturesEvent& getSupportedFeaturesEvent() = 0;
    /**
     * description: This signal is used to send the list of searched devices.
     * author: Poornima Hiremath
     */
    virtual DeviceSearchListEvent& getDeviceSearchListEvent() = 0;
    /**
     * description: This signal is used to inform HMi about the bonding request coming from
     *   external device.
     * author: Poornima Hiremath
     */
    virtual StandardBondingRequestEvent& getStandardBondingRequestEvent() = 0;
    /**
     * description: This signal is used to inform about the standard bonding request being rejected
     *   as legacy pairing is not enabled in BtService configuration.
     * author: Poornima Hiremath
     */
    virtual StandardBondingRejectedEvent& getStandardBondingRejectedEvent() = 0;
    /**
     * description: This signal is used to inform HMi about the secure bonding request coming from
     *   external device.
     * author: Poornima Hiremath
     */
    virtual SecureSimpleBondingRequestEvent& getSecureSimpleBondingRequestEvent() = 0;
    /**
     * description: This signal is used to inform HMi about the service connection request coming
     *   from external device.
     * author: Poornima Hiremath
     */
    virtual ServiceConnectionRequestEvent& getServiceConnectionRequestEvent() = 0;
    /**
     * description: This signal is sent when a service level connection to a BT profile is
     *   successfully connected.
     * author: Poornima Hiremath
     */
    virtual ServiceConnectedEvent& getServiceConnectedEvent() = 0;
    /**
     * description: This signal is sent when a service level connection to a BT profile is
     *   disconnected.
     * author: Poornima Hiremath
     */
    virtual ServiceDisconnectedEvent& getServiceDisconnectedEvent() = 0;
    /**
     * description: This signal is sent when a device is disconnected.
     * author: Poornima Hiremath
     */
    virtual DeviceDisconnectedEvent& getDeviceDisconnectedEvent() = 0;
    /**
     * description: This signal is sent when there is an error in service connection.
     * author: Poornima Hiremath
     */
    virtual ServiceConnectionErrorEvent& getServiceConnectionErrorEvent() = 0;
    /**
     * description: This signal is sent when a profile is changed for a bonded device.
     * author: Poornima Hiremath
     */
    virtual BondedDeviceProfileListChangedEvent& getBondedDeviceProfileListChangedEvent() = 0;
    /**
     * description: This signal is sent when service list gets changed for a device.
     * author: Poornima Hiremath
     */
    virtual BondedDeviceServiceListChangedEvent& getBondedDeviceServiceListChangedEvent() = 0;
    /**
     * description: This signal is sent when a device is getting deleted.
     * author: Poornima Hiremath
     */
    virtual DeviceDeletedEvent& getDeviceDeletedEvent() = 0;
    /**
     * description: This signal is sent when the network interface is UP.
     * author: Poornima Hiremath
     */
    virtual NetworkIfUpEvent& getNetworkIfUpEvent() = 0;
    /**
     * description: This signal is sent when the network interface is DOWN.
     * author: Poornima Hiremath
     */
    virtual NetworkIfDownEvent& getNetworkIfDownEvent() = 0;
    /**
     * description: This signal is sent inform the pairing status of device.
     * author: Poornima Hiremath
     */
    virtual BondingStatusEvent& getBondingStatusEvent() = 0;
    /**
     * description: This signal is sent whenever there is an incoming call to the connected mobile
     *   phone.     	Along with this signal the, call state and the phone number is
     *   sent.
     * author: Poornima Hiremath
     */
    virtual IncomingCallInfoEvent& getIncomingCallInfoEvent() = 0;
    /**
     * description: This signal is sent to inform, whether Hands free mode is set or not.
     * author: Poornima Hiremath
     */
    virtual HandsFreeModeEvent& getHandsFreeModeEvent() = 0;
    /**
     * description: This signal is sent whenever there is change in audio status.
     * author: Poornima Hiremath
     */
    virtual AudioStatusEvent& getAudioStatusEvent() = 0;
    /**
     * description: This signal is used to indicate the received battery charge level.
     * author: Poornima Hiremath
     */
    virtual BatteryChargeEvent& getBatteryChargeEvent() = 0;
    /**
     * description: This signal is used to indicate when network operator changes.
     * author: Poornima Hiremath
     */
    virtual NetworkOperatorChangedEvent& getNetworkOperatorChangedEvent() = 0;
    /**
     * description: This signal is used to indicate when registration state of network operator
     *   changes.
     * author: Poornima Hiremath
     */
    virtual NetworkRegistrationStateEvent& getNetworkRegistrationStateEvent() = 0;
    /**
     * description: This signal is used to indicate call status.
     * author: Poornima Hiremath
     */
    virtual CallStatusEvent& getCallStatusEvent() = 0;
    /**
     * description: This signal is used to indicate call list update.
     * author: Poornima Hiremath
     */
    virtual CallListUpdateEvent& getCallListUpdateEvent() = 0;
    /**
     * description: This signal is sent after method startAutoReconnect is called      and is used
     *   to indicate that reconnect time out mentioned     with configuration parameter
     *   reconnect_timeout has expired.
     * author: Poornima Hiremath
     */
    virtual ReconnectTimeoutExpiredEvent& getReconnectTimeoutExpiredEvent() = 0;
    /**
     * description: This signal is sent after device search is complete
     * author: Poornima Hiremath
     */
    virtual DeviceSearchCompleteEvent& getDeviceSearchCompleteEvent() = 0;
    /**
     * description: This signal is sent whenever siriStatus is modified.
     * author: Poornima Hiremath
     */
    virtual SiriStatusEvent& getSiriStatusEvent() = 0;
    /**
     * description: This signal is used to indicate the subscriber number.
     * author: Poornima Hiremath
     */
    virtual SubscriberNumberEvent& getSubscriberNumberEvent() = 0;
    /**
     * description: This signal is sent to report a connecting state of a service .
     * author: Poornima Hiremath
     */
    virtual ServiceConnectingEvent& getServiceConnectingEvent() = 0;
    /**
     * description: This signal is sent to report the auto connection state,     iterations,
     *   connection attempts, current priority and service being tried/last attempted
     *   for autoconnection.
     * author: Poornima Hiremath
     */
    virtual AutoConnectStateEvent& getAutoConnectStateEvent() = 0;
    /**
     * description: This signal is sent when stack reset in in progress
     * author: Poornima Hiremath
     */
    virtual StackResetInProgressEvent& getStackResetInProgressEvent() = 0;
    /**
     * description: This signal is sent after stack reset is complete
     * author: Poornima Hiremath
     */
    virtual StackResetDoneEvent& getStackResetDoneEvent() = 0;
    /**
     * description: This signal is used to indicate when remote device name changes.
     * author: Poornima Hiremath
     */
    virtual DeviceNameChangedEvent& getDeviceNameChangedEvent() = 0;
    /**
     * description: This signal is used to indicate when Device ID info of remote device is
     *   available.
     * author: Poornima Hiremath
     */
    virtual DeviceIDInfoEvent& getDeviceIDInfoEvent() = 0;

    /**
     * description: The method is used by to Set the current ignition state.
     * author: Poornima Hiremath
     */
    virtual void setIgnitionState(const bool &_ignitionState, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setIgnitionStateAsync(const bool &_ignitionState, SetIgnitionStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used by to Get value of the Bluetooth ON or OFF.
     * author: Poornima Hiremath
     */
    virtual void getPropBluetoothStatus(CommonAPI::CallStatus &_internalCallStatus, bool &_Status, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getPropBluetoothStatusAsync(GetPropBluetoothStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used by to Get Bluetooth Signal quality.
     * author: Poornima Hiremath
     */
    virtual void getSignalQuality(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_signalQual, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSignalQualityAsync(const std::string &_inAddress, GetSignalQualityAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used by to Get remote device battery change status.
     * author: Poornima Hiremath
     */
    virtual void getBatteryCharge(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_batteryCharge, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getBatteryChargeAsync(const std::string &_inAddress, GetBatteryChargeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used by to Get value of the Local Bluetooth Device address
     *   property.
     * author: Poornima Hiremath
     */
    virtual void getPropLocalDeviceAddress(CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getPropLocalDeviceAddressAsync(GetPropLocalDeviceAddressAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used by to Get the local device name.
     * author: Poornima Hiremath
     */
    virtual void getPropLocalDeviceName(CommonAPI::CallStatus &_internalCallStatus, std::string &_name, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getPropLocalDeviceNameAsync(GetPropLocalDeviceNameAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used by to Get the HFP connection status.
     * author: Poornima Hiremath
     */
    virtual void getHfpConnectionStatus(CommonAPI::CallStatus &_internalCallStatus, bool &_Status, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getHfpConnectionStatusAsync(GetHfpConnectionStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used by to get the bonded device list.
     * author: Poornima Hiremath
     */
    virtual void getPropBondedDeviceList(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::bondedDevList &_list, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getPropBondedDeviceListAsync(GetPropBondedDeviceListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used by to get supported feature list.
     * author: Poornima Hiremath
     */
    virtual void getSupportedFeatures(const std::string &_inAddrress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, ::com::harman::connectivity::btTypedefs::stringList &_featureList, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSupportedFeaturesAsync(const std::string &_inAddrress, GetSupportedFeaturesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used by to get the network availability.
     * author: Poornima Hiremath
     */
    virtual void getNetworkAvailability(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, bool &_netwrkStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getNetworkAvailabilityAsync(const std::string &_inAddress, GetNetworkAvailabilityAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used by to get the network registration state.
     * author: Poornima Hiremath
     */
    virtual void getNetworkRegistrationState(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_regState, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getNetworkRegistrationStateAsync(const std::string &_inAddress, GetNetworkRegistrationStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used by to get the subscriber number.
     * author: Poornima Hiremath
     */
    virtual void getSubscriberNumber(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_subscrbNum, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSubscriberNumberAsync(const std::string &_inAddress, GetSubscriberNumberAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used by to get the list of last connected devices.
     * author: Poornima Hiremath
     */
    virtual void getlastConnectedDevice(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::lastConnectedDevList &_list, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getlastConnectedDeviceAsync(GetlastConnectedDeviceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used by to get call state event data.
     * author: Poornima Hiremath
     */
    virtual void getCallStateEventData(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, ::com::harman::connectivity::btTypedefs::callstateInfoList &_list, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getCallStateEventDataAsync(const std::string &_inAddress, GetCallStateEventDataAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used by to get call state event data.
     * author: Poornima Hiremath
     */
    virtual void sppInterfaces(CommonAPI::CallStatus &_internalCallStatus, std::vector<std::string> &_devA, std::vector<std::string> &_devB, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> sppInterfacesAsync(SppInterfacesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Prepares the HU to enter bonding mode, this implies that BT core will wait for
     *   any ongoing disconnections to complete then abort any pending connection
     *   request.
     * author: Poornima Hiremath
     */
    virtual void enterBondingMode(const uint32_t &_timeout, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> enterBondingModeAsync(const uint32_t &_timeout, EnterBondingModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Exits the bonding mode, this implies that BT core will make the HU
     *   UnDiscoverable and also wait for any ongoing connections/disconnections to
     *   complete.
     * author: Poornima Hiremath
     */
    virtual void exitBondingMode(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> exitBondingModeAsync(ExitBondingModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Changes the priority of a service for a device. It will modify the current
     *   priority of a device for a given service.
     * author: Poornima Hiremath
     */
    virtual void changePriority(const std::string &_inAddress, const std::string &_service, const int32_t &_priority, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> changePriorityAsync(const std::string &_inAddress, const std::string &_service, const int32_t &_priority, ChangePriorityAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Starts the procedure of discovering devices in range and finding their
     *   capabilities.
     * author: Poornima Hiremath
     */
    virtual void startDeviceSearch(const uint32_t &_maxDevice, const uint32_t &_timeout, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startDeviceSearchAsync(const uint32_t &_maxDevice, const uint32_t &_timeout, StartDeviceSearchAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Stops the procedure of discovering devices in range.
     * author: Poornima Hiremath
     */
    virtual void stopDeviceSearch(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> stopDeviceSearchAsync(StopDeviceSearchAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method should be called by HMI in response to receiving the signal
     *   "secureSimpleBondingRequest" from Bluetooth Service.
     * author: Poornima Hiremath
     */
    virtual void secureSimpleBondingReply(const std::string &_inAddress, const bool &_accept, const bool &_trusted, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> secureSimpleBondingReplyAsync(const std::string &_inAddress, const bool &_accept, const bool &_trusted, SecureSimpleBondingReplyAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method will result in disconnection of all service level connections
     *   including ACL connection,     	deletion of link keys and eventually un-bonding
     *   of the requested device from the head unit.
     * author: Poornima Hiremath
     */
    virtual void deleteDevice(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> deleteDeviceAsync(const std::string &_inAddress, DeleteDeviceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method will result in calling internally deleteDevice of all connected
     *   devices.
     * author: Poornima Hiremath
     */
    virtual void deleteAllDevices(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> deleteAllDevicesAsync(DeleteAllDevicesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Starts the procedure connection for the given service to the given phone.
     * author: Poornima Hiremath
     */
    virtual void startServiceConnection(const std::string &_inAddress, const std::string &_service, const std::string &_instanceName, const std::string &_replaceAddr, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_devName, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startServiceConnectionAsync(const std::string &_inAddress, const std::string &_service, const std::string &_instanceName, const std::string &_replaceAddr, StartServiceConnectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Allows the existance of the service connection to this device and service..
     * author: Poornima Hiremath
     */
    virtual void allowServiceConnection(const std::string &_inAddress, const ::com::harman::connectivity::btTypedefs::eRequestingModule &_module, const std::string &_service, const bool &_allow, const bool &_reconnect, const bool &_deviceInvert, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> allowServiceConnectionAsync(const std::string &_inAddress, const ::com::harman::connectivity::btTypedefs::eRequestingModule &_module, const std::string &_service, const bool &_allow, const bool &_reconnect, const bool &_deviceInvert, AllowServiceConnectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method can be invoked by clients to disconnect a previously connected
     *   service from a previously bonded device.
     * author: Poornima Hiremath
     */
    virtual void startServiceDisconnection(const std::string &_inAddress, const std::string &_service, const bool &_internalReq, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startServiceDisconnectionAsync(const std::string &_inAddress, const std::string &_service, const bool &_internalReq, StartServiceDisconnectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method should be called by clients in order to reply to the incoming
     *   service connection request from     	a remote device as indicated by the
     *   signal 'serviceConnectionRequest'.     	The reply can be to accept or reject
     *   incoming service connection request.
     * author: Poornima Hiremath
     */
    virtual void serviceConnectionReply(const std::string &_inAddress, const std::string &_service, const bool &_accept, const std::string &_instanceName, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_devName, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> serviceConnectionReplyAsync(const std::string &_inAddress, const std::string &_service, const bool &_accept, const std::string &_instanceName, ServiceConnectionReplyAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method would return the list of service of a device.
     * author: Poornima Hiremath
     */
    virtual void getBondedDeviceServiceList(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getBondedDeviceServiceListAsync(const std::string &_inAddress, GetBondedDeviceServiceListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method Requests diagnostic radio status information.
     * author: Poornima Hiremath
     */
    virtual void getRadioStatus(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::stringList &_addrList, ::com::harman::connectivity::btTypedefs::stringList &_connRoleList, ::com::harman::connectivity::btTypedefs::integerList &_linkQualitylist, ::com::harman::connectivity::btTypedefs::integerList &_rssiList, ::com::harman::connectivity::btTypedefs::integerList &_txPowerList, ::com::harman::connectivity::btTypedefs::stringList &_modeTypeList, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getRadioStatusAsync(GetRadioStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method will rename a device identified with the address passed in the
     *   parameter.     	The device must have been bonded previously; if not error code
     *   response will be sent.
     * author: Poornima Hiremath
     */
    virtual void renameBondedDevice(const std::string &_inAddress, const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> renameBondedDeviceAsync(const std::string &_inAddress, const std::string &_name, RenameBondedDeviceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method will rename a device identified with the name passed in the
     *   parameter.
     * author: Poornima Hiremath
     */
    virtual void renameLocalDevice(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> renameLocalDeviceAsync(const std::string &_name, RenameLocalDeviceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method will start the auto connection procedure.
     * author: Poornima Hiremath
     */
    virtual void startAutoConnect(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startAutoConnectAsync(StartAutoConnectAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method will pause the auto connection procedure.
     * author: Poornima Hiremath
     */
    virtual void pauseAutoConnect(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> pauseAutoConnectAsync(PauseAutoConnectAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method will stop the auto connection procedure.
     * author: Poornima Hiremath
     */
    virtual void stopAutoConnect(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> stopAutoConnectAsync(StopAutoConnectAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method Adds the service/services to the auto connect service list.
     * author: Poornima Hiremath
     */
    virtual void setAutoConnectServices(const std::string &_serviceName, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setAutoConnectServicesAsync(const std::string &_serviceName, SetAutoConnectServicesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method will provide the network operator information.
     * author: Poornima Hiremath
     */
    virtual void getNetworkOperatorInfo(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_code, std::string &_longName, std::string &_shortName, std::string &_mode, std::string &_accTech, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getNetworkOperatorInfoAsync(const std::string &_inAddress, GetNetworkOperatorInfoAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method Provide list of bonded device
     * author: Poornima Hiremath
     */
    virtual void getBondedDeviceList(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::bondedDevList &_list, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getBondedDeviceListAsync(GetBondedDeviceListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method Sets Bluetooth ON.
     * author: Poornima Hiremath
     */
    virtual void setBluetoothOn(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setBluetoothOnAsync(SetBluetoothOnAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method Sets Bluetooth OFF.
     * author: Poornima Hiremath
     */
    virtual void setBluetoothOff(const bool &_doNotStore, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setBluetoothOffAsync(const bool &_doNotStore, SetBluetoothOffAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method used to get the service list information from the remote device.
     * author: Poornima Hiremath
     */
    virtual void serviceListQuery(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, ::com::harman::connectivity::btTypedefs::serviceList &_list, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> serviceListQueryAsync(const std::string &_inAddress, ServiceListQueryAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used for setting the passkey which is used during pairing
     *   procedure.
     * author: Poornima Hiremath
     */
    virtual void setPin(const std::string &_passkey, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setPinAsync(const std::string &_passkey, SetPinAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used for dialing an outgoing phone call. On successful dial, a
     *   unique Call Id is returned identifying the current call..
     * author: Poornima Hiremath
     */
    virtual void dial(const std::string &_inAddress, const std::string &_num, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_callId, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> dialAsync(const std::string &_inAddress, const std::string &_num, DialAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used for redialing a dialed number.
     * author: Poornima Hiremath
     */
    virtual void reDial(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_callId, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> reDialAsync(const std::string &_inAddress, ReDialAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The function is used for sending a DTMF tone. To enable the sending of these
     *   tones a call has to be established first.
     * author: Poornima Hiremath
     */
    virtual void sendDtmfTone(const std::string &_inAddress, const std::string &_dtmfTone, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> sendDtmfToneAsync(const std::string &_inAddress, const std::string &_dtmfTone, SendDtmfToneAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used by HMI for accepting an incoming call. If an active call is
     *   going on and incoming call is accepted,     	the active call is put on hold
     *   and the accepted call is made active call.
     * author: Poornima Hiremath
     */
    virtual void acceptIncomingCall(const std::string &_inAddress, const bool &_transfer, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> acceptIncomingCallAsync(const std::string &_inAddress, const bool &_transfer, AcceptIncomingCallAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used by HMI to end a call with specified call Id.This call can
     *   be an active call or a held call.    	If an active single party call is ended
     *   and if another call is on hold at this point,the held call shall be made
     *   active on hanging up the active call.
     * author: Poornima Hiremath
     */
    virtual void endCall(const std::string &_inAddress, const int32_t &_callId, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> endCallAsync(const std::string &_inAddress, const int32_t &_callId, EndCallAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used by HMI to end an active single party call or an active conf
     *   call.     	If another call is on hold at this point, that call shall be made
     *   active on hanging up the active call.
     * author: Poornima Hiremath
     */
    virtual void endActiveCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> endActiveCallAsync(const std::string &_inAddress, EndActiveCallAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used by HMI to end all calls. This method ends the active
     *   call/active conference call and the held call.
     * author: Poornima Hiremath
     */
    virtual void endAllCalls(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> endAllCallsAsync(const std::string &_inAddress, EndAllCallsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used for rejecting an incoming call.  The �endCall� API can be
     *   used to reject an incoming call.
     * author: Poornima Hiremath
     */
    virtual void rejectIncomingCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> rejectIncomingCallAsync(const std::string &_inAddress, RejectIncomingCallAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to put the active call into hold state.
     * author: Poornima Hiremath
     */
    virtual void holdActiveCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> holdActiveCallAsync(const std::string &_inAddress, HoldActiveCallAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used by HMI to put a held call/conference call to active state.
     * author: Poornima Hiremath
     */
    virtual void resumeHeldCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> resumeHeldCallAsync(const std::string &_inAddress, ResumeHeldCallAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used by HMI to initiate a conference call.  		1.	To establish a
     *   conference call at least 2 calls must be available. i.e. one active call and a
     *   held call. 		2.	In case the active call is a conference call, this system call
     *   adds an additional member to this conference.  		3.	The call which is added to
     *   the conference call can be a waiting call or a held call. 		4.	If a call is
     *   put on hold and an active call is going on, when a conference call is
     *   established, the held call is added to conference call.
     * author: Poornima Hiremath
     */
    virtual void conferenceCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> conferenceCallAsync(const std::string &_inAddress, ConferenceCallAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used by HMI to select a particular call.
     * author: Poornima Hiremath
     */
    virtual void selectCall(const std::string &_inAddress, const int32_t &_callId, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> selectCallAsync(const std::string &_inAddress, const int32_t &_callId, SelectCallAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to switch between calls if calls are active  	at a time on
     *   two Hands free instance connections
     * author: Vipul Mendapara
     */
    virtual void selectVoiceCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> selectVoiceCallAsync(const std::string &_inAddress, SelectVoiceCallAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to toggle between hands-free and private mode.     	This
     *   function puts the ongoing hands-free call to private mode, meaning the phone
     *   audio is not played out on the head unit speakers and the head unit microphone
     *   does not capture the voice.     	The HMI should call this API when the user
     *   wants to use his phone instead of the hands free during the ongoing call.    
     *   	By default the hands-free mode is set to OFF.
     * author: Poornima Hiremath
     */
    virtual void setHfMode(const std::string &_inAddress, const bool &_hfMode, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setHfModeAsync(const std::string &_inAddress, const bool &_hfMode, SetHfModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used to Set the debug mode.
     * author: Poornima Hiremath
     */
    virtual void setVRMode(const std::string &_inAddress, const bool &_mode, CommonAPI::CallStatus &_internalCallStatus, std::string &_OutAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setVRModeAsync(const std::string &_inAddress, const bool &_mode, SetVRModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used to Set the debug mode.
     * author: Poornima Hiremath
     */
    virtual void setEyesFree(const std::string &_inAddress, const bool &_toSet, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setEyesFreeAsync(const std::string &_inAddress, const bool &_toSet, SetEyesFreeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: clearTransferTimeout:    	errorCode: This is OUT parameter, will contain either
     *   success or error value. 0 in case of SUCCESS.    	errorDesc: This is OUT
     *   parameter, Contains the error description.       	The method is used to Clear
     *   the transfer timeout.
     * author: Poornima Hiremath
     */
    virtual void clearTransferTimeout(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> clearTransferTimeoutAsync(ClearTransferTimeoutAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used for, swapping the held and the active calls i.e. setting a
     *   held call/ conference call to active state     	and the active call or
     *   conference call to hold state.    	When an active call/conference call is
     *   going on, when user uses swap calls, the active call/ conference call is put
     *   to hold state and if a held call exists,     	that call will be placed to
     *   active call state.
     * author: Poornima Hiremath
     */
    virtual void swapCalls(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> swapCallsAsync(const std::string &_inAddress, SwapCallsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method will start the auto re-connection procedure which will continue till
     *       reconnect_timeout is reached or will continue forever if reconnect_timeout
     *   is 0, unless 	method stopAutoReconnect is called. 	The reconnect_timeout
     *   parameter can be modified with the configuration file.
     * author: Poornima Hiremath
     */
    virtual void startAutoReconnect(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startAutoReconnectAsync(StartAutoReconnectAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method will stop the auto re-connection procedure.
     * author: Poornima Hiremath
     */
    virtual void stopAutoReconnect(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> stopAutoReconnectAsync(StopAutoReconnectAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used by to get value of onOffState.     This method can be
     *   queried to know the value of onOffState in case signal - onOffState is missed
     *   out by Proxy.
     * author: Poornima Hiremath
     */
    virtual void getPropOnOffStatus(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::eOnOffState &_OnOffState, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getPropOnOffStatusAsync(GetPropOnOffStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method used to get the service list information of a paired device.
     * author: Poornima Hiremath
     */
    virtual void getServiceList(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_deviceName, bool &_deviceInRange, std::string &_date, int32_t &_cod, std::string &_vendorId, std::string &_vendorIdSource, std::string &_productId, std::string &_versionnum, bool &_complete, std::string &_deviceVendor, std::string &_deviceModel, std::string &_deviceRevision, ::com::harman::connectivity::btTypedefs::serviceList &_list, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getServiceListAsync(const std::string &_inAddress, GetServiceListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method used to reply for bonding request from a device supporting legacy
     *   pairing.                         If legacy pairing is disabled in the
     *   BTService configuration, then errorCode BTSERVICECORE_ERR_FAILURE is sent.
     * author: Poornima Hiremath
     */
    virtual void standardBondingReply(const std::string &_inAddress, const bool &_accept, const bool &_trusted, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> standardBondingReplyAsync(const std::string &_inAddress, const bool &_accept, const bool &_trusted, StandardBondingReplyAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used to Add SPP Service.
     * author: Viraj Barwatkar
     */
    virtual void addSPPService(const std::string &_serviceName, const std::string &_UUIDReg, const std::string &_UUIDConn, const bool &_devBRole, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> addSPPServiceAsync(const std::string &_serviceName, const std::string &_UUIDReg, const std::string &_UUIDConn, const bool &_devBRole, AddSPPServiceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used to Remove SPP Service.
     * author: Viraj Barwatkar
     */
    virtual void removeSPPService(const std::string &_serviceName, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> removeSPPServiceAsync(const std::string &_serviceName, RemoveSPPServiceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used to set current driver profile.
     * author: Viraj Barwatkar
     */
    virtual void setDriveProfile(const int32_t &_profileID, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setDriveProfileAsync(const int32_t &_profileID, SetDriveProfileAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used to delete a driver profile.
     * author: Viraj Barwatkar
     */
    virtual void deleteDriveProfile(const int32_t &_profileID, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> deleteDriveProfileAsync(const int32_t &_profileID, DeleteDriveProfileAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used to query Device ID Profile info of remote device.
     * author: Poornima Hiremath
     */
    virtual void getDeviceIDProfileInfo(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_vendorId, std::string &_vendorIdSource, std::string &_productId, std::string &_versionnum, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getDeviceIDProfileInfoAsync(const std::string &_inAddress, GetDeviceIDProfileInfoAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used to consider handling done upon receiving master reset
     *   condition.                        Though no IN params - the project specific
     *   handling for master/factory reset will  		       be based on config flag.
     * author: Poornima Hiremath
     */
    virtual void masterReset(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> masterResetAsync(MasterResetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used to remove device from auto re-connection list.              
     *            No auto re-connection attempts will be made on the device,  					  
     *   unless the device gets connected from user initiated request.
     * author: Vipul Mendapara
     */
    virtual void removeDeviceFromAutoReconnection(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> removeDeviceFromAutoReconnectionAsync(const std::string &_inAddress, RemoveDeviceFromAutoReconnectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace connectivity
} // namespace harman
} // namespace com
} // namespace v4


// Compatibility
namespace v4_3 = v4;

#endif // V4_COM_HARMAN_CONNECTIVITY_Bt_Service_PROXY_BASE_HPP_
