/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef COM_HARMAN_CONNECTIVITY_bt_Typedefs_HPP_
#define COM_HARMAN_CONNECTIVITY_bt_Typedefs_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace com {
namespace harman {
namespace connectivity {

struct btTypedefs {
    /**
     * description: The type defines the BT service structure.
     */
    struct service : CommonAPI::Struct<std::string, bool, std::string, int32_t, int32_t> {
    	
    	service() {
    		std::get<1>(values_) = false;
    	}
    	service(const std::string &_serviceName, const bool &_connectionState, const std::string &_serviceState, const int32_t &_majorNum, const int32_t &_minorNum)
    	{
    		std::get<0>(values_) = _serviceName;
    		std::get<1>(values_) = _connectionState;
    		std::get<2>(values_) = _serviceState;
    		std::get<3>(values_) = _majorNum;
    		std::get<4>(values_) = _minorNum;
    	}
    	inline const std::string &getServiceName() const { return std::get<0>(values_); }
    	inline void setServiceName(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const bool &getConnectionState() const { return std::get<1>(values_); }
    	inline void setConnectionState(const bool _value) { std::get<1>(values_) = _value; }
    	inline const std::string &getServiceState() const { return std::get<2>(values_); }
    	inline void setServiceState(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline const int32_t &getMajorNum() const { return std::get<3>(values_); }
    	inline void setMajorNum(const int32_t &_value) { std::get<3>(values_) = _value; }
    	inline const int32_t &getMinorNum() const { return std::get<4>(values_); }
    	inline void setMinorNum(const int32_t &_value) { std::get<4>(values_) = _value; }
    	inline bool operator==(const service& _other) const {
                return (getServiceName() == _other.getServiceName() && getConnectionState() == _other.getConnectionState() && getServiceState() == _other.getServiceState() && getMajorNum() == _other.getMajorNum() && getMinorNum() == _other.getMinorNum());
        }
    	inline bool operator!=(const service &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: The type defines the structure for Device Search Entry.
     */
    struct deviceSearchEntry : CommonAPI::Struct<std::string, std::string, int32_t> {
    	
    	deviceSearchEntry() {
    	}
    	deviceSearchEntry(const std::string &_deviceName, const std::string &_deviceAddr, const int32_t &_deviceClass)
    	{
    		std::get<0>(values_) = _deviceName;
    		std::get<1>(values_) = _deviceAddr;
    		std::get<2>(values_) = _deviceClass;
    	}
    	inline const std::string &getDeviceName() const { return std::get<0>(values_); }
    	inline void setDeviceName(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getDeviceAddr() const { return std::get<1>(values_); }
    	inline void setDeviceAddr(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const int32_t &getDeviceClass() const { return std::get<2>(values_); }
    	inline void setDeviceClass(const int32_t &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const deviceSearchEntry& _other) const {
                return (getDeviceName() == _other.getDeviceName() && getDeviceAddr() == _other.getDeviceAddr() && getDeviceClass() == _other.getDeviceClass());
        }
    	inline bool operator!=(const deviceSearchEntry &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: The type defines the structure that contains profile information.
     */
    struct profile : CommonAPI::Struct<std::string, int32_t, int32_t> {
    	
    	profile() {
    	}
    	profile(const std::string &_profileName, const int32_t &_majorNum, const int32_t &_minorNum)
    	{
    		std::get<0>(values_) = _profileName;
    		std::get<1>(values_) = _majorNum;
    		std::get<2>(values_) = _minorNum;
    	}
    	inline const std::string &getProfileName() const { return std::get<0>(values_); }
    	inline void setProfileName(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const int32_t &getMajorNum() const { return std::get<1>(values_); }
    	inline void setMajorNum(const int32_t &_value) { std::get<1>(values_) = _value; }
    	inline const int32_t &getMinorNum() const { return std::get<2>(values_); }
    	inline void setMinorNum(const int32_t &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const profile& _other) const {
                return (getProfileName() == _other.getProfileName() && getMajorNum() == _other.getMajorNum() && getMinorNum() == _other.getMinorNum());
        }
    	inline bool operator!=(const profile &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: The type defines the structure for a duration.
     */
    struct durationStruct : CommonAPI::Struct<bool, int32_t> {
    	
    	durationStruct() {
    		std::get<0>(values_) = false;
    	}
    	durationStruct(const bool &_isValid, const int32_t &_duration)
    	{
    		std::get<0>(values_) = _isValid;
    		std::get<1>(values_) = _duration;
    	}
    	inline const bool &getIsValid() const { return std::get<0>(values_); }
    	inline void setIsValid(const bool _value) { std::get<0>(values_) = _value; }
    	inline const int32_t &getDuration() const { return std::get<1>(values_); }
    	inline void setDuration(const int32_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const durationStruct& _other) const {
                return (getIsValid() == _other.getIsValid() && getDuration() == _other.getDuration());
        }
    	inline bool operator!=(const durationStruct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct eCallState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            CALL_STATE_IDLE = 0,
            CALL_STATE_ACTIVE = 1,
            CALL_STATE_ON_HOLD = 2,
            CALL_STATE_TERMINATED = 3,
            CALL_STATE_DIALING = 4,
            CALL_STATE_RINGING = 5,
            CALL_STATE_ALERTING = 6,
            CALL_STATE_WAITING = 7
        };
        
        eCallState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::CALL_STATE_IDLE)) {}
        eCallState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::CALL_STATE_IDLE):
                case static_cast<int32_t>(Literal::CALL_STATE_ACTIVE):
                case static_cast<int32_t>(Literal::CALL_STATE_ON_HOLD):
                case static_cast<int32_t>(Literal::CALL_STATE_TERMINATED):
                case static_cast<int32_t>(Literal::CALL_STATE_DIALING):
                case static_cast<int32_t>(Literal::CALL_STATE_RINGING):
                case static_cast<int32_t>(Literal::CALL_STATE_ALERTING):
                case static_cast<int32_t>(Literal::CALL_STATE_WAITING):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eCallState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eCallState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eCallState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eCallState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eCallState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eCallState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eCallDirection : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            CALL_DIRECTION_IN = 0,
            CALL_DIRECTION_OUT = 1
        };
        
        eCallDirection() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::CALL_DIRECTION_IN)) {}
        eCallDirection(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::CALL_DIRECTION_IN):
                case static_cast<int32_t>(Literal::CALL_DIRECTION_OUT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eCallDirection &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eCallDirection &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eCallDirection &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eCallDirection &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eCallDirection &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eCallDirection &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eNumberType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NUMBERTYPE_MOBILE = 0,
            NUMBERTYPE_WORK = 1,
            NUMBERTYPE_HOME = 2,
            NUMBERTYPE_OTHER = 3
        };
        
        eNumberType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NUMBERTYPE_MOBILE)) {}
        eNumberType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NUMBERTYPE_MOBILE):
                case static_cast<int32_t>(Literal::NUMBERTYPE_WORK):
                case static_cast<int32_t>(Literal::NUMBERTYPE_HOME):
                case static_cast<int32_t>(Literal::NUMBERTYPE_OTHER):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eNumberType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eNumberType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eNumberType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eNumberType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eNumberType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eNumberType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: The type defines the Structure that contains Call details information.
     */
    struct callStateInfo : CommonAPI::Struct<eCallState, std::string, int32_t, std::string, std::string, std::string, int32_t, bool, bool, bool, bool, std::string, bool, eCallDirection, eNumberType> {
    	
    	callStateInfo() {
    		std::get<7>(values_) = false;
    		std::get<8>(values_) = false;
    		std::get<9>(values_) = false;
    		std::get<10>(values_) = false;
    		std::get<12>(values_) = false;
    	}
    	callStateInfo(const eCallState &_cstate, const std::string &_number, const int32_t &_contactId, const std::string &_name, const std::string &_imageUrl, const std::string &_reqNumber, const int32_t &_callId, const bool &_callStateChanged, const bool &_inBand, const bool &_loc, const bool &_rhState, const std::string &_codec, const bool &_audio, const eCallDirection &_callDirection, const eNumberType &_numberType)
    	{
    		std::get<0>(values_) = _cstate;
    		std::get<1>(values_) = _number;
    		std::get<2>(values_) = _contactId;
    		std::get<3>(values_) = _name;
    		std::get<4>(values_) = _imageUrl;
    		std::get<5>(values_) = _reqNumber;
    		std::get<6>(values_) = _callId;
    		std::get<7>(values_) = _callStateChanged;
    		std::get<8>(values_) = _inBand;
    		std::get<9>(values_) = _loc;
    		std::get<10>(values_) = _rhState;
    		std::get<11>(values_) = _codec;
    		std::get<12>(values_) = _audio;
    		std::get<13>(values_) = _callDirection;
    		std::get<14>(values_) = _numberType;
    	}
    	inline const eCallState &getCstate() const { return std::get<0>(values_); }
    	inline void setCstate(const eCallState &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getNumber() const { return std::get<1>(values_); }
    	inline void setNumber(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const int32_t &getContactId() const { return std::get<2>(values_); }
    	inline void setContactId(const int32_t &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getName() const { return std::get<3>(values_); }
    	inline void setName(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline const std::string &getImageUrl() const { return std::get<4>(values_); }
    	inline void setImageUrl(const std::string &_value) { std::get<4>(values_) = _value; }
    	inline const std::string &getReqNumber() const { return std::get<5>(values_); }
    	inline void setReqNumber(const std::string &_value) { std::get<5>(values_) = _value; }
    	inline const int32_t &getCallId() const { return std::get<6>(values_); }
    	inline void setCallId(const int32_t &_value) { std::get<6>(values_) = _value; }
    	inline const bool &getCallStateChanged() const { return std::get<7>(values_); }
    	inline void setCallStateChanged(const bool _value) { std::get<7>(values_) = _value; }
    	inline const bool &getInBand() const { return std::get<8>(values_); }
    	inline void setInBand(const bool _value) { std::get<8>(values_) = _value; }
    	inline const bool &getLoc() const { return std::get<9>(values_); }
    	inline void setLoc(const bool _value) { std::get<9>(values_) = _value; }
    	inline const bool &getRhState() const { return std::get<10>(values_); }
    	inline void setRhState(const bool _value) { std::get<10>(values_) = _value; }
    	inline const std::string &getCodec() const { return std::get<11>(values_); }
    	inline void setCodec(const std::string &_value) { std::get<11>(values_) = _value; }
    	inline const bool &getAudio() const { return std::get<12>(values_); }
    	inline void setAudio(const bool _value) { std::get<12>(values_) = _value; }
    	inline const eCallDirection &getCallDirection() const { return std::get<13>(values_); }
    	inline void setCallDirection(const eCallDirection &_value) { std::get<13>(values_) = _value; }
    	inline const eNumberType &getNumberType() const { return std::get<14>(values_); }
    	inline void setNumberType(const eNumberType &_value) { std::get<14>(values_) = _value; }
    	inline bool operator==(const callStateInfo& _other) const {
                return (getCstate() == _other.getCstate() && getNumber() == _other.getNumber() && getContactId() == _other.getContactId() && getName() == _other.getName() && getImageUrl() == _other.getImageUrl() && getReqNumber() == _other.getReqNumber() && getCallId() == _other.getCallId() && getCallStateChanged() == _other.getCallStateChanged() && getInBand() == _other.getInBand() && getLoc() == _other.getLoc() && getRhState() == _other.getRhState() && getCodec() == _other.getCodec() && getAudio() == _other.getAudio() && getCallDirection() == _other.getCallDirection() && getNumberType() == _other.getNumberType());
        }
    	inline bool operator!=(const callStateInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: This structure extends the structure service,   				   so this structure
     *   contains service information along with priority value information.
     */
    struct servicedescription : CommonAPI::Struct<std::string, bool, std::string, int32_t, int32_t, int32_t> {
    	
    	servicedescription() {
    		std::get<1>(values_) = false;
    	}
    	servicedescription(const std::string &_serviceName, const bool &_connectionState, const std::string &_serviceState, const int32_t &_majorNum, const int32_t &_minorNum, const int32_t &_priority)
    	{
    		std::get<0>(values_) = _serviceName;
    		std::get<1>(values_) = _connectionState;
    		std::get<2>(values_) = _serviceState;
    		std::get<3>(values_) = _majorNum;
    		std::get<4>(values_) = _minorNum;
    		std::get<5>(values_) = _priority;
    	}
    	inline const std::string &getServiceName() const { return std::get<0>(values_); }
    	inline void setServiceName(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const bool &getConnectionState() const { return std::get<1>(values_); }
    	inline void setConnectionState(const bool _value) { std::get<1>(values_) = _value; }
    	inline const std::string &getServiceState() const { return std::get<2>(values_); }
    	inline void setServiceState(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline const int32_t &getMajorNum() const { return std::get<3>(values_); }
    	inline void setMajorNum(const int32_t &_value) { std::get<3>(values_) = _value; }
    	inline const int32_t &getMinorNum() const { return std::get<4>(values_); }
    	inline void setMinorNum(const int32_t &_value) { std::get<4>(values_) = _value; }
    	inline const int32_t &getPriority() const { return std::get<5>(values_); }
    	inline void setPriority(const int32_t &_value) { std::get<5>(values_) = _value; }
    	inline bool operator==(const servicedescription& _other) const {
                return (getServiceName() == _other.getServiceName() && getConnectionState() == _other.getConnectionState() && getServiceState() == _other.getServiceState() && getMajorNum() == _other.getMajorNum() && getMinorNum() == _other.getMinorNum() && getPriority() == _other.getPriority());
        }
    	inline bool operator!=(const servicedescription &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: The type defines the structure that contains paired device details information.
     */
    struct bondedDev : CommonAPI::Struct<std::string, std::string, bool, std::string, int32_t, std::string, std::string, std::string, std::string, bool, std::string, std::string, std::string, std::vector<servicedescription>> {
    	
    	bondedDev() {
    		std::get<2>(values_) = false;
    		std::get<9>(values_) = false;
    	}
    	bondedDev(const std::string &_deviceName, const std::string &_deviceAddr, const bool &_deviceInRange, const std::string &_date, const int32_t &_cod, const std::string &_vendorId, const std::string &_vendorIdSource, const std::string &_productId, const std::string &_versionnum, const bool &_complete, const std::string &_deviceVendor, const std::string &_deviceModel, const std::string &_deviceRevision, const std::vector<servicedescription> &_list)
    	{
    		std::get<0>(values_) = _deviceName;
    		std::get<1>(values_) = _deviceAddr;
    		std::get<2>(values_) = _deviceInRange;
    		std::get<3>(values_) = _date;
    		std::get<4>(values_) = _cod;
    		std::get<5>(values_) = _vendorId;
    		std::get<6>(values_) = _vendorIdSource;
    		std::get<7>(values_) = _productId;
    		std::get<8>(values_) = _versionnum;
    		std::get<9>(values_) = _complete;
    		std::get<10>(values_) = _deviceVendor;
    		std::get<11>(values_) = _deviceModel;
    		std::get<12>(values_) = _deviceRevision;
    		std::get<13>(values_) = _list;
    	}
    	inline const std::string &getDeviceName() const { return std::get<0>(values_); }
    	inline void setDeviceName(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getDeviceAddr() const { return std::get<1>(values_); }
    	inline void setDeviceAddr(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const bool &getDeviceInRange() const { return std::get<2>(values_); }
    	inline void setDeviceInRange(const bool _value) { std::get<2>(values_) = _value; }
    	inline const std::string &getDate() const { return std::get<3>(values_); }
    	inline void setDate(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline const int32_t &getCod() const { return std::get<4>(values_); }
    	inline void setCod(const int32_t &_value) { std::get<4>(values_) = _value; }
    	inline const std::string &getVendorId() const { return std::get<5>(values_); }
    	inline void setVendorId(const std::string &_value) { std::get<5>(values_) = _value; }
    	inline const std::string &getVendorIdSource() const { return std::get<6>(values_); }
    	inline void setVendorIdSource(const std::string &_value) { std::get<6>(values_) = _value; }
    	inline const std::string &getProductId() const { return std::get<7>(values_); }
    	inline void setProductId(const std::string &_value) { std::get<7>(values_) = _value; }
    	inline const std::string &getVersionnum() const { return std::get<8>(values_); }
    	inline void setVersionnum(const std::string &_value) { std::get<8>(values_) = _value; }
    	inline const bool &getComplete() const { return std::get<9>(values_); }
    	inline void setComplete(const bool _value) { std::get<9>(values_) = _value; }
    	inline const std::string &getDeviceVendor() const { return std::get<10>(values_); }
    	inline void setDeviceVendor(const std::string &_value) { std::get<10>(values_) = _value; }
    	inline const std::string &getDeviceModel() const { return std::get<11>(values_); }
    	inline void setDeviceModel(const std::string &_value) { std::get<11>(values_) = _value; }
    	inline const std::string &getDeviceRevision() const { return std::get<12>(values_); }
    	inline void setDeviceRevision(const std::string &_value) { std::get<12>(values_) = _value; }
    	inline const std::vector<servicedescription> &getList() const { return std::get<13>(values_); }
    	inline void setList(const std::vector<servicedescription> &_value) { std::get<13>(values_) = _value; }
    	inline bool operator==(const bondedDev& _other) const {
                return (getDeviceName() == _other.getDeviceName() && getDeviceAddr() == _other.getDeviceAddr() && getDeviceInRange() == _other.getDeviceInRange() && getDate() == _other.getDate() && getCod() == _other.getCod() && getVendorId() == _other.getVendorId() && getVendorIdSource() == _other.getVendorIdSource() && getProductId() == _other.getProductId() && getVersionnum() == _other.getVersionnum() && getComplete() == _other.getComplete() && getDeviceVendor() == _other.getDeviceVendor() && getDeviceModel() == _other.getDeviceModel() && getDeviceRevision() == _other.getDeviceRevision() && getList() == _other.getList());
        }
    	inline bool operator!=(const bondedDev &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct transferDelay : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            YES = 0,
            NO = 1,
            NotAvailable = 2
        };
        
        transferDelay() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::YES)) {}
        transferDelay(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::YES):
                case static_cast<int32_t>(Literal::NO):
                case static_cast<int32_t>(Literal::NotAvailable):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const transferDelay &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const transferDelay &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const transferDelay &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const transferDelay &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const transferDelay &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const transferDelay &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: The type defines the structure that contains information about last connected
     *   device.
     */
    struct lastConnectedDev : CommonAPI::Struct<std::string, std::string, std::string, bool> {
    	
    	lastConnectedDev() {
    		std::get<3>(values_) = false;
    	}
    	lastConnectedDev(const std::string &_service, const std::string &_address, const std::string &_name, const bool &_userDisc)
    	{
    		std::get<0>(values_) = _service;
    		std::get<1>(values_) = _address;
    		std::get<2>(values_) = _name;
    		std::get<3>(values_) = _userDisc;
    	}
    	inline const std::string &getService() const { return std::get<0>(values_); }
    	inline void setService(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getAddress() const { return std::get<1>(values_); }
    	inline void setAddress(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const std::string &getName() const { return std::get<2>(values_); }
    	inline void setName(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline const bool &getUserDisc() const { return std::get<3>(values_); }
    	inline void setUserDisc(const bool _value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const lastConnectedDev& _other) const {
                return (getService() == _other.getService() && getAddress() == _other.getAddress() && getName() == _other.getName() && getUserDisc() == _other.getUserDisc());
        }
    	inline bool operator!=(const lastConnectedDev &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct eOnOffState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ONOFF_STATE_UNINITIALIZED = 0,
            ONOFF_STATE_INITIALIZING = 1,
            ONOFF_STATE_ON = 2,
            ONOFF_STATE_TURNING_OFF = 3,
            ONOFF_STATE_OFF = 4,
            ONOFF_STATE_FAILED = 5
        };
        
        eOnOffState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ONOFF_STATE_UNINITIALIZED)) {}
        eOnOffState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ONOFF_STATE_UNINITIALIZED):
                case static_cast<int32_t>(Literal::ONOFF_STATE_INITIALIZING):
                case static_cast<int32_t>(Literal::ONOFF_STATE_ON):
                case static_cast<int32_t>(Literal::ONOFF_STATE_TURNING_OFF):
                case static_cast<int32_t>(Literal::ONOFF_STATE_OFF):
                case static_cast<int32_t>(Literal::ONOFF_STATE_FAILED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eOnOffState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eOnOffState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eOnOffState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eOnOffState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eOnOffState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eOnOffState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eReasonDeviceDeleted : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DEVICE_DELETED_REASON_MISSING_KEY = 0,
            DEVICE_DELETED_REASON_USER_REQUESTED = 1
        };
        
        eReasonDeviceDeleted() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DEVICE_DELETED_REASON_MISSING_KEY)) {}
        eReasonDeviceDeleted(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DEVICE_DELETED_REASON_MISSING_KEY):
                case static_cast<int32_t>(Literal::DEVICE_DELETED_REASON_USER_REQUESTED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eReasonDeviceDeleted &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eReasonDeviceDeleted &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eReasonDeviceDeleted &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eReasonDeviceDeleted &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eReasonDeviceDeleted &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eReasonDeviceDeleted &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eAutoConnState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            AUTOCONN_STATE_PAUSED = 0,
            AUTOCONN_STATE_WAITING = 1,
            AUTOCONN_STATE_CONNECTING = 2,
            AUTOCONN_STATE_RECONNECTING = 3,
            AUTOCONN_STATE_STOPPED = 4
        };
        
        eAutoConnState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::AUTOCONN_STATE_PAUSED)) {}
        eAutoConnState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::AUTOCONN_STATE_PAUSED):
                case static_cast<int32_t>(Literal::AUTOCONN_STATE_WAITING):
                case static_cast<int32_t>(Literal::AUTOCONN_STATE_CONNECTING):
                case static_cast<int32_t>(Literal::AUTOCONN_STATE_RECONNECTING):
                case static_cast<int32_t>(Literal::AUTOCONN_STATE_STOPPED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eAutoConnState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eAutoConnState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eAutoConnState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eAutoConnState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eAutoConnState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eAutoConnState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eHfpAudioCodec : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            HFP_AUDIOCODEC_NBS = 0,
            HFP_AUDIOCODEC_WBS = 1
        };
        
        eHfpAudioCodec() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::HFP_AUDIOCODEC_NBS)) {}
        eHfpAudioCodec(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::HFP_AUDIOCODEC_NBS):
                case static_cast<int32_t>(Literal::HFP_AUDIOCODEC_WBS):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eHfpAudioCodec &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eHfpAudioCodec &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eHfpAudioCodec &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eHfpAudioCodec &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eHfpAudioCodec &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eHfpAudioCodec &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eRequestingModule : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            MODULE_HMI_1 = 0,
            MODULE_HMI_2 = 1,
            MODULE_CARPLAY_1 = 2,
            MODULE_CARPLAY_2 = 3,
            MODULE_ANDROIDAUTO_1 = 4,
            MODULE_ANDROIDAUTO_2 = 5,
            MODULE_APPLINK_1 = 6,
            MODULE_APPLINK_2 = 7,
            MODULE_CARLIFE_1 = 8,
            MODULE_CARLIFE_2 = 9,
            MODULE_GENERIC_1 = 10,
            MODULE_GENERIC_2 = 11
        };
        
        eRequestingModule() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::MODULE_HMI_1)) {}
        eRequestingModule(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::MODULE_HMI_1):
                case static_cast<int32_t>(Literal::MODULE_HMI_2):
                case static_cast<int32_t>(Literal::MODULE_CARPLAY_1):
                case static_cast<int32_t>(Literal::MODULE_CARPLAY_2):
                case static_cast<int32_t>(Literal::MODULE_ANDROIDAUTO_1):
                case static_cast<int32_t>(Literal::MODULE_ANDROIDAUTO_2):
                case static_cast<int32_t>(Literal::MODULE_APPLINK_1):
                case static_cast<int32_t>(Literal::MODULE_APPLINK_2):
                case static_cast<int32_t>(Literal::MODULE_CARLIFE_1):
                case static_cast<int32_t>(Literal::MODULE_CARLIFE_2):
                case static_cast<int32_t>(Literal::MODULE_GENERIC_1):
                case static_cast<int32_t>(Literal::MODULE_GENERIC_2):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eRequestingModule &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eRequestingModule &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eRequestingModule &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eRequestingModule &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eRequestingModule &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eRequestingModule &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    typedef std::vector<btTypedefs::deviceSearchEntry> deviceSearchEntryList;
    typedef std::vector<btTypedefs::bondedDev> bondedDevList;
    typedef std::vector<btTypedefs::profile> profileList;
    typedef std::vector<btTypedefs::service> serviceList;
    typedef std::vector<btTypedefs::servicedescription> serviceDesList;
    typedef std::vector<btTypedefs::callStateInfo> callstateInfoList;
    typedef std::vector<int32_t> integerList;
    typedef std::vector<btTypedefs::lastConnectedDev> lastConnectedDevList;
    typedef std::vector<std::string> stringList;



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.connectivity.btTypedefs";
    return typeCollectionName;
}


}; // struct btTypedefs

} // namespace connectivity
} // namespace harman
} // namespace com

namespace CommonAPI {
}


namespace std {
    //Hash for eCallState
    template<>
    struct hash<::com::harman::connectivity::btTypedefs::eCallState> {
        inline size_t operator()(const ::com::harman::connectivity::btTypedefs::eCallState& eCallState) const {
            return static_cast<int32_t>(eCallState);
        }
    };
    //Hash for transferDelay
    template<>
    struct hash<::com::harman::connectivity::btTypedefs::transferDelay> {
        inline size_t operator()(const ::com::harman::connectivity::btTypedefs::transferDelay& transferDelay) const {
            return static_cast<int32_t>(transferDelay);
        }
    };
    //Hash for eOnOffState
    template<>
    struct hash<::com::harman::connectivity::btTypedefs::eOnOffState> {
        inline size_t operator()(const ::com::harman::connectivity::btTypedefs::eOnOffState& eOnOffState) const {
            return static_cast<int32_t>(eOnOffState);
        }
    };
    //Hash for eCallDirection
    template<>
    struct hash<::com::harman::connectivity::btTypedefs::eCallDirection> {
        inline size_t operator()(const ::com::harman::connectivity::btTypedefs::eCallDirection& eCallDirection) const {
            return static_cast<int32_t>(eCallDirection);
        }
    };
    //Hash for eReasonDeviceDeleted
    template<>
    struct hash<::com::harman::connectivity::btTypedefs::eReasonDeviceDeleted> {
        inline size_t operator()(const ::com::harman::connectivity::btTypedefs::eReasonDeviceDeleted& eReasonDeviceDeleted) const {
            return static_cast<int32_t>(eReasonDeviceDeleted);
        }
    };
    //Hash for eAutoConnState
    template<>
    struct hash<::com::harman::connectivity::btTypedefs::eAutoConnState> {
        inline size_t operator()(const ::com::harman::connectivity::btTypedefs::eAutoConnState& eAutoConnState) const {
            return static_cast<int32_t>(eAutoConnState);
        }
    };
    //Hash for eHfpAudioCodec
    template<>
    struct hash<::com::harman::connectivity::btTypedefs::eHfpAudioCodec> {
        inline size_t operator()(const ::com::harman::connectivity::btTypedefs::eHfpAudioCodec& eHfpAudioCodec) const {
            return static_cast<int32_t>(eHfpAudioCodec);
        }
    };
    //Hash for eRequestingModule
    template<>
    struct hash<::com::harman::connectivity::btTypedefs::eRequestingModule> {
        inline size_t operator()(const ::com::harman::connectivity::btTypedefs::eRequestingModule& eRequestingModule) const {
            return static_cast<int32_t>(eRequestingModule);
        }
    };
    //Hash for eNumberType
    template<>
    struct hash<::com::harman::connectivity::btTypedefs::eNumberType> {
        inline size_t operator()(const ::com::harman::connectivity::btTypedefs::eNumberType& eNumberType) const {
            return static_cast<int32_t>(eNumberType);
        }
    };
}



#endif // COM_HARMAN_CONNECTIVITY_bt_Typedefs_HPP_
