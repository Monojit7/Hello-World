/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: The interface towards the Controlling Instance (e.g. HMI). It handles the
 *   communication towards the HMI and other system components who need to interact
 *   with the audio management. There are two rules that have to be kept in mind
 *   when implementing against this interface:
 * author: Christian Linke
 */
#ifndef V3_ORG_GENIVI_AM_COMMANDINTERFACE_Command_Control_PROXY_BASE_HPP_
#define V3_ORG_GENIVI_AM_COMMANDINTERFACE_Command_Control_PROXY_BASE_HPP_

#include <v3/org/genivi/am/commandinterface/CommandControl.hpp>


#include <v3/org/genivi/am_t.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v3 {
namespace org {
namespace genivi {
namespace am {
namespace commandinterface {

class CommandControlProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::org::genivi::am_t::am_MainConnection_L> ListOfMainConnetionsAttribute;
    typedef CommonAPI::Event<
        ::v3::org::genivi::am_t::am_MainConnectionType_s
    > NewMainConnectionEvent;
    typedef CommonAPI::Event<
        ::v3::org::genivi::am_t::am_mainConnectionID_t
    > RemovedMainConnectionEvent;
    typedef CommonAPI::Event<
        ::v3::org::genivi::am_t::am_SinkType_s
    > NewSinkEvent;
    typedef CommonAPI::Event<
        ::v3::org::genivi::am_t::am_sinkID_t
    > RemovedSinkEvent;
    typedef CommonAPI::Event<
        ::v3::org::genivi::am_t::am_SourceType_s
    > NewSourceEvent;
    typedef CommonAPI::Event<
        ::v3::org::genivi::am_t::am_sourceID_t
    > RemovedSourceEvent;
    typedef CommonAPI::Event<
    > NumberOfSinkClassesChangedEvent;
    typedef CommonAPI::Event<
    > NumberOfSourceClassesChangedEvent;
    typedef CommonAPI::Event<
        ::v3::org::genivi::am_t::am_mainConnectionID_t, ::v3::org::genivi::am_t::am_ConnectionState_e
    > MainConnectionStateChangedEvent;
    typedef CommonAPI::Event<
        ::v3::org::genivi::am_t::am_sinkID_t, ::v3::org::genivi::am_t::am_MainSoundProperty_s
    > MainSinkSoundPropertyChangedEvent;
    typedef CommonAPI::Event<
        ::v3::org::genivi::am_t::am_sourceID_t, ::v3::org::genivi::am_t::am_MainSoundProperty_s
    > MainSourceSoundPropertyChangedEvent;
    typedef CommonAPI::Event<
        ::v3::org::genivi::am_t::am_sinkID_t, ::v3::org::genivi::am_t::am_Availability_s
    > SinkAvailabilityChangedEvent;
    typedef CommonAPI::Event<
        ::v3::org::genivi::am_t::am_sourceID_t, ::v3::org::genivi::am_t::am_Availability_s
    > SourceAvailabilityChangedEvent;
    typedef CommonAPI::Event<
        ::v3::org::genivi::am_t::am_sinkID_t, ::v3::org::genivi::am_t::am_mainVolume_t
    > VolumeChangedEvent;
    typedef CommonAPI::Event<
        ::v3::org::genivi::am_t::am_sinkID_t, ::v3::org::genivi::am_t::am_MuteState_e
    > SinkMuteStateChangedEvent;
    typedef CommonAPI::Event<
        ::v3::org::genivi::am_t::am_SystemProperty_s
    > SystemPropertyChangedEvent;
    typedef CommonAPI::Event<
        ::v3::org::genivi::am_t::am_mainConnectionID_t, ::v3::org::genivi::am_t::am_timeSync_t
    > TimingInformationChangedEvent;
    typedef CommonAPI::Event<
        ::v3::org::genivi::am_t::am_sinkID_t, ::v3::org::genivi::am_t::am_sinkClass_t, ::v3::org::genivi::am_t::am_MainSoundProperty_L
    > SinkUpdatedEvent;
    typedef CommonAPI::Event<
        ::v3::org::genivi::am_t::am_sourceID_t, ::v3::org::genivi::am_t::am_sourceClass_t, ::v3::org::genivi::am_t::am_MainSoundProperty_L
    > SourceUpdatedEvent;
    typedef CommonAPI::Event<
        ::v3::org::genivi::am_t::am_sinkID_t, ::v3::org::genivi::am_t::am_NotificationPayload_s
    > SinkNotificationEvent;
    typedef CommonAPI::Event<
        ::v3::org::genivi::am_t::am_sourceID_t, ::v3::org::genivi::am_t::am_NotificationPayload_s
    > SourceNotificationEvent;
    typedef CommonAPI::Event<
        ::v3::org::genivi::am_t::am_sinkID_t, ::v3::org::genivi::am_t::am_NotificationConfiguration_s
    > MainSinkNotificationConfigurationChangedEvent;
    typedef CommonAPI::Event<
        ::v3::org::genivi::am_t::am_sourceID_t, ::v3::org::genivi::am_t::am_NotificationConfiguration_s
    > MainSourceNotificationConfigurationChangedEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::org::genivi::am_t::am_mainConnectionID_t&, const ::v3::org::genivi::am_t::am_Error_e&)> ConnectAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::org::genivi::am_t::am_Error_e&)> DisconnectAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::org::genivi::am_t::am_Error_e&)> SetVolumeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::org::genivi::am_t::am_Error_e&)> VolumeStepAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::org::genivi::am_t::am_Error_e&)> SetSinkMuteStateAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::org::genivi::am_t::am_Error_e&)> SetMainSinkSoundPropertyAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::org::genivi::am_t::am_Error_e&)> SetMainSourceSoundPropertyAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::org::genivi::am_t::am_Error_e&)> SetSystemPropertyAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::org::genivi::am_t::am_MainConnection_L&, const ::v3::org::genivi::am_t::am_Error_e&)> GetListMainConnectionsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::org::genivi::am_t::am_SinkType_L&, const ::v3::org::genivi::am_t::am_Error_e&)> GetListMainSinksAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::org::genivi::am_t::am_SourceType_L&, const ::v3::org::genivi::am_t::am_Error_e&)> GetListMainSourcesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::org::genivi::am_t::am_MainSoundProperty_L&, const ::v3::org::genivi::am_t::am_Error_e&)> GetListMainSinkSoundPropertiesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::org::genivi::am_t::am_MainSoundProperty_L&, const ::v3::org::genivi::am_t::am_Error_e&)> GetListMainSourceSoundPropertiesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::org::genivi::am_t::am_SinkClass_L&, const ::v3::org::genivi::am_t::am_Error_e&)> GetListSinkClassesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::org::genivi::am_t::am_SourceClass_L&, const ::v3::org::genivi::am_t::am_Error_e&)> GetListSourceClassesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::org::genivi::am_t::am_SystemProperty_L&, const ::v3::org::genivi::am_t::am_Error_e&)> GetListSystemPropertiesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::org::genivi::am_t::am_timeSync_t&, const ::v3::org::genivi::am_t::am_Error_e&)> GetTimingInformationAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::org::genivi::am_t::am_NotificationConfiguration_L&, const ::v3::org::genivi::am_t::am_Error_e&)> GetListMainSinkNotificationConfigurationsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::org::genivi::am_t::am_NotificationConfiguration_L&, const ::v3::org::genivi::am_t::am_Error_e&)> GetListMainSourceNotificationConfigurationsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::org::genivi::am_t::am_Error_e&)> SetMainSinkNotificationConfigurationAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::org::genivi::am_t::am_Error_e&)> SetMainSourceNotificationConfigurationAsyncCallback;

    /**
     * description: This attribute reflects the current State of all existing main connections. 
     *   You can notify on this attribute in order to get always a consistent update of
     *   all main connections in case of a change.
     */
    virtual ListOfMainConnetionsAttribute& getListOfMainConnetionsAttribute() = 0;

    /**
     * description: Callback that is called when the number of connections change.
     */
    virtual NewMainConnectionEvent& getNewMainConnectionEvent() = 0;
    /**
     * description: Callback that is called when the number of connections change.
     */
    virtual RemovedMainConnectionEvent& getRemovedMainConnectionEvent() = 0;
    /**
     * description: Callback that is called when the number of sinks change.
     */
    virtual NewSinkEvent& getNewSinkEvent() = 0;
    /**
     * description: Callback that is called when the number of sinks change.
     */
    virtual RemovedSinkEvent& getRemovedSinkEvent() = 0;
    /**
     * description: Callback that is called when the number of sources change.
     */
    virtual NewSourceEvent& getNewSourceEvent() = 0;
    /**
     * description: Callback that is called when the number of sources change.
     */
    virtual RemovedSourceEvent& getRemovedSourceEvent() = 0;
    /**
     * description: This callback is called if the number of sink classes has changed.
     */
    virtual NumberOfSinkClassesChangedEvent& getNumberOfSinkClassesChangedEvent() = 0;
    /**
     * description: This callback is fired, if the number of source classes has changed.
     */
    virtual NumberOfSourceClassesChangedEvent& getNumberOfSourceClassesChangedEvent() = 0;
    /**
     * description: This callback is called when the connection state of a connection changed.
     */
    virtual MainConnectionStateChangedEvent& getMainConnectionStateChangedEvent() = 0;
    /**
     * description: This callback indicates that a sink sound property has changed.
     */
    virtual MainSinkSoundPropertyChangedEvent& getMainSinkSoundPropertyChangedEvent() = 0;
    /**
     * description: This callback indicates that a source sound property has changed.
     */
    virtual MainSourceSoundPropertyChangedEvent& getMainSourceSoundPropertyChangedEvent() = 0;
    /**
     * description: This callback is called when the availability of a sink has changed.
     */
    virtual SinkAvailabilityChangedEvent& getSinkAvailabilityChangedEvent() = 0;
    /**
     * description: This callback is called when the availability of source has changed.
     */
    virtual SourceAvailabilityChangedEvent& getSourceAvailabilityChangedEvent() = 0;
    /**
     * description: This callback indicates a volume change on the indicated sink.
     */
    virtual VolumeChangedEvent& getVolumeChangedEvent() = 0;
    /**
     * description: This callback indicates a mute state change on a sink.
     */
    virtual SinkMuteStateChangedEvent& getSinkMuteStateChangedEvent() = 0;
    /**
     * description: Is called if a system property changed.
     */
    virtual SystemPropertyChangedEvent& getSystemPropertyChangedEvent() = 0;
    /**
     * description: This callback is called, if the timing information for a main connection ID
     *   have changed.
     */
    virtual TimingInformationChangedEvent& getTimingInformationChangedEvent() = 0;
    /**
     * description: This callback is called when a sink is updated.
     */
    virtual SinkUpdatedEvent& getSinkUpdatedEvent() = 0;
    /**
     * description: This callback is called when a source is updated.
     */
    virtual SourceUpdatedEvent& getSourceUpdatedEvent() = 0;
    /**
     * description: This callback is called when a notified value of a sink changes.
     */
    virtual SinkNotificationEvent& getSinkNotificationEvent() = 0;
    /**
     * description: This callback is called when a notified value of a source changes.
     */
    virtual SourceNotificationEvent& getSourceNotificationEvent() = 0;
    /**
     * description: This callback is triggered when a main notification configuration is changed.
     */
    virtual MainSinkNotificationConfigurationChangedEvent& getMainSinkNotificationConfigurationChangedEvent() = 0;
    /**
     * description: This callback is triggered when a main notification configuration is changed.
     */
    virtual MainSourceNotificationConfigurationChangedEvent& getMainSourceNotificationConfigurationChangedEvent() = 0;

    /**
     * description: Connects a source to sink. (at)return E_OK on success, E_NOT_POSSIBLE on
     *   failure, E_ALREADY_EXISTS if the connection does already exists
     */
    virtual void connect(const ::v3::org::genivi::am_t::am_sourceID_t &_sourceID, const ::v3::org::genivi::am_t::am_sinkID_t &_sinkID, CommonAPI::CallStatus &_internalCallStatus, ::v3::org::genivi::am_t::am_mainConnectionID_t &_mainConnectionID, ::v3::org::genivi::am_t::am_Error_e &_amError, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> connectAsync(const ::v3::org::genivi::am_t::am_sourceID_t &_sourceID, const ::v3::org::genivi::am_t::am_sinkID_t &_sinkID, ConnectAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Disconnects a main connection. (at)return E_OK on successes, E_NON_EXISTENT if
     *   the connection does not exist, E_NOT_POSSIBLE on error.
     */
    virtual void disconnect(const ::v3::org::genivi::am_t::am_mainConnectionID_t &_mainConnectionID, CommonAPI::CallStatus &_internalCallStatus, ::v3::org::genivi::am_t::am_Error_e &_amError, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> disconnectAsync(const ::v3::org::genivi::am_t::am_mainConnectionID_t &_mainConnectionID, DisconnectAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Sets the volume for a sink. (at)return E_OK on success, E_UNKNOWN on error,
     *   E_OUT_OF_RANGE in case the value is out of range
     */
    virtual void setVolume(const ::v3::org::genivi::am_t::am_sinkID_t &_sinkID, const ::v3::org::genivi::am_t::am_mainVolume_t &_volume, CommonAPI::CallStatus &_internalCallStatus, ::v3::org::genivi::am_t::am_Error_e &_amError, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setVolumeAsync(const ::v3::org::genivi::am_t::am_sinkID_t &_sinkID, const ::v3::org::genivi::am_t::am_mainVolume_t &_volume, SetVolumeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This function is used to increment or decrement the current volume for a sink.
     *   (at)return E_OK on success, E_UNKNOWN on error and E_OUT_OF_RANGE if the value
     *   is not in the given volume range.
     */
    virtual void volumeStep(const ::v3::org::genivi::am_t::am_sinkID_t &_sinkID, const int16_t &_step, CommonAPI::CallStatus &_internalCallStatus, ::v3::org::genivi::am_t::am_Error_e &_amError, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> volumeStepAsync(const ::v3::org::genivi::am_t::am_sinkID_t &_sinkID, const int16_t &_step, VolumeStepAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Sets the mute state of a sink. (at)return E_OK on success, E_UNKNOWN on error.
     *   If the mute state is already the desired one, the Daemon will return E_OK
     */
    virtual void setSinkMuteState(const ::v3::org::genivi::am_t::am_sinkID_t &_sinkID, const ::v3::org::genivi::am_t::am_MuteState_e &_muteState, CommonAPI::CallStatus &_internalCallStatus, ::v3::org::genivi::am_t::am_Error_e &_amError, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setSinkMuteStateAsync(const ::v3::org::genivi::am_t::am_sinkID_t &_sinkID, const ::v3::org::genivi::am_t::am_MuteState_e &_muteState, SetSinkMuteStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to set sound properties, e.g. equalizer values. Since the
     *   capabilities of the system can differ, the exact key value pairs can be
     *   extended in each product. (at)return E_OK on success, E_OUT_OF_RANGE if value
     *   exceeds range, E_UNKNOWN in case of an error
     */
    virtual void setMainSinkSoundProperty(const ::v3::org::genivi::am_t::am_sinkID_t &_sinkID, const ::v3::org::genivi::am_t::am_MainSoundProperty_s &_soundProperty, CommonAPI::CallStatus &_internalCallStatus, ::v3::org::genivi::am_t::am_Error_e &_amError, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setMainSinkSoundPropertyAsync(const ::v3::org::genivi::am_t::am_sinkID_t &_sinkID, const ::v3::org::genivi::am_t::am_MainSoundProperty_s &_soundProperty, SetMainSinkSoundPropertyAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to set sound properties, e.g. equalizer values. Since the
     *   capabilities of the system can differ, the exact key value pairs can be
     *   extended in each product. (at)return E_OK on success, E_OUT_OF_RANGE if value
     *   exceeds range, E_UNKNOWN in case of an error
     */
    virtual void setMainSourceSoundProperty(const ::v3::org::genivi::am_t::am_sourceID_t &_sourceID, const ::v3::org::genivi::am_t::am_MainSoundProperty_s &_soundProperty, CommonAPI::CallStatus &_internalCallStatus, ::v3::org::genivi::am_t::am_Error_e &_amError, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setMainSourceSoundPropertyAsync(const ::v3::org::genivi::am_t::am_sourceID_t &_sourceID, const ::v3::org::genivi::am_t::am_MainSoundProperty_s &_soundProperty, SetMainSourceSoundPropertyAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Sets a specific system property. (at)return E_OK on success, E_OUT_OF_RANGE if
     *   value exceeds range, E_UNKNOWN in case of an error
     */
    virtual void setSystemProperty(const ::v3::org::genivi::am_t::am_SystemProperty_s &_property, CommonAPI::CallStatus &_internalCallStatus, ::v3::org::genivi::am_t::am_Error_e &_amError, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setSystemPropertyAsync(const ::v3::org::genivi::am_t::am_SystemProperty_s &_property, SetSystemPropertyAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Returns the current list of main connections. (at)return E_OK on success,
     *   E_DATABASE_ERROR on error
     */
    virtual void getListMainConnections(CommonAPI::CallStatus &_internalCallStatus, ::v3::org::genivi::am_t::am_MainConnection_L &_listConnections, ::v3::org::genivi::am_t::am_Error_e &_amError, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getListMainConnectionsAsync(GetListMainConnectionsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Returns the current list of sinks. (at)return E_OK on success, E_DATABASE_ERROR
     *   on error
     */
    virtual void getListMainSinks(CommonAPI::CallStatus &_internalCallStatus, ::v3::org::genivi::am_t::am_SinkType_L &_listMainSinks, ::v3::org::genivi::am_t::am_Error_e &_amError, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getListMainSinksAsync(GetListMainSinksAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Returns the current list of sources. (at)return E_OK on success,
     *   E_DATABASE_ERROR on error
     */
    virtual void getListMainSources(CommonAPI::CallStatus &_internalCallStatus, ::v3::org::genivi::am_t::am_SourceType_L &_listMainSources, ::v3::org::genivi::am_t::am_Error_e &_amError, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getListMainSourcesAsync(GetListMainSourcesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This is used to retrieve all sink sound properties related to a sink. Returns a
     *   vector of the sound properties and values as pair. (at)return E_OK on success,
     *   E_DATABASE_ERROR on error
     */
    virtual void getListMainSinkSoundProperties(const ::v3::org::genivi::am_t::am_sinkID_t &_sinkID, CommonAPI::CallStatus &_internalCallStatus, ::v3::org::genivi::am_t::am_MainSoundProperty_L &_listSoundProperties, ::v3::org::genivi::am_t::am_Error_e &_amError, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getListMainSinkSoundPropertiesAsync(const ::v3::org::genivi::am_t::am_sinkID_t &_sinkID, GetListMainSinkSoundPropertiesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This is used to retrieve all source sound properties related to a source.
     *   Returns a vector of the sound properties and values as pair. (at)return E_OK
     *   on success, E_DATABASE_ERROR on error
     */
    virtual void getListMainSourceSoundProperties(const ::v3::org::genivi::am_t::am_sourceID_t &_sourceID, CommonAPI::CallStatus &_internalCallStatus, ::v3::org::genivi::am_t::am_MainSoundProperty_L &_listSoundProperties, ::v3::org::genivi::am_t::am_Error_e &_amError, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getListMainSourceSoundPropertiesAsync(const ::v3::org::genivi::am_t::am_sourceID_t &_sourceID, GetListMainSourceSoundPropertiesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This is used to retrieve sink class information of all sink classes. (at)return
     *   E_OK on success, E_DATABASE_ERROR on error
     */
    virtual void getListSinkClasses(CommonAPI::CallStatus &_internalCallStatus, ::v3::org::genivi::am_t::am_SinkClass_L &_listSinkClasses, ::v3::org::genivi::am_t::am_Error_e &_amError, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getListSinkClassesAsync(GetListSinkClassesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This is used to retrieve source class information of all source classes.
     *   (at)return E_OK on success, E_DATABASE_ERROR on error
     */
    virtual void getListSourceClasses(CommonAPI::CallStatus &_internalCallStatus, ::v3::org::genivi::am_t::am_SourceClass_L &_listSourceClasses, ::v3::org::genivi::am_t::am_Error_e &_amError, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getListSourceClassesAsync(GetListSourceClassesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Retrieves a complete list of all system properties. (at)return E_OK on success,
     *   E_DATABASE_ERROR on error
     */
    virtual void getListSystemProperties(CommonAPI::CallStatus &_internalCallStatus, ::v3::org::genivi::am_t::am_SystemProperty_L &_listSystemProperties, ::v3::org::genivi::am_t::am_Error_e &_amError, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getListSystemPropertiesAsync(GetListSystemPropertiesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Returns the delay in ms that the audio path for the given main connection.
     *   (at)return E_OK on success, E_NOT_POSSIBLE if timing information is not yet
     *   retrieved, E_DATABASE_ERROR on read error on the database
     */
    virtual void getTimingInformation(const ::v3::org::genivi::am_t::am_mainConnectionID_t &_mainConnectionID, CommonAPI::CallStatus &_internalCallStatus, ::v3::org::genivi::am_t::am_timeSync_t &_delay, ::v3::org::genivi::am_t::am_Error_e &_amError, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getTimingInformationAsync(const ::v3::org::genivi::am_t::am_mainConnectionID_t &_mainConnectionID, GetTimingInformationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Retrieves the list of main notifications for a sink. Does not return the
     *   possible ones.
     */
    virtual void getListMainSinkNotificationConfigurations(const ::v3::org::genivi::am_t::am_sinkID_t &_sinkID, CommonAPI::CallStatus &_internalCallStatus, ::v3::org::genivi::am_t::am_NotificationConfiguration_L &_listMainNotificationConfigurations, ::v3::org::genivi::am_t::am_Error_e &_amError, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getListMainSinkNotificationConfigurationsAsync(const ::v3::org::genivi::am_t::am_sinkID_t &_sinkID, GetListMainSinkNotificationConfigurationsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Retrieves the list of main notifications for a source. Does not return the
     *   possible ones.
     */
    virtual void getListMainSourceNotificationConfigurations(const ::v3::org::genivi::am_t::am_sourceID_t &_sourceID, CommonAPI::CallStatus &_internalCallStatus, ::v3::org::genivi::am_t::am_NotificationConfiguration_L &_listMainNotificationConfigurations, ::v3::org::genivi::am_t::am_Error_e &_amError, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getListMainSourceNotificationConfigurationsAsync(const ::v3::org::genivi::am_t::am_sourceID_t &_sourceID, GetListMainSourceNotificationConfigurationsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Sets a MainNotificationConfiuration. This can be used to turn on an off
     *   notifications an to change the mode of the configuration. (at)return E_OK on
     *   success, E_NON_EXISTENT if sink ID does not exists, E_DATABASE_ERROR on error
     */
    virtual void setMainSinkNotificationConfiguration(const ::v3::org::genivi::am_t::am_sinkID_t &_sinkID, const ::v3::org::genivi::am_t::am_NotificationConfiguration_s &_mainNotificationConfiguration, CommonAPI::CallStatus &_internalCallStatus, ::v3::org::genivi::am_t::am_Error_e &_amError, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setMainSinkNotificationConfigurationAsync(const ::v3::org::genivi::am_t::am_sinkID_t &_sinkID, const ::v3::org::genivi::am_t::am_NotificationConfiguration_s &_mainNotificationConfiguration, SetMainSinkNotificationConfigurationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Sets a MainNotificationConfiuration. This can be used to turn on an off
     *   notifications an to change the mode of the configuration. (at)return E_OK on
     *   success, E_NON_EXISTENT if source ID does not exists, E_DATABASE_ERROR on error
     */
    virtual void setMainSourceNotificationConfiguration(const ::v3::org::genivi::am_t::am_sourceID_t &_sourceID, const ::v3::org::genivi::am_t::am_NotificationConfiguration_s &_mainNotificationConfiguration, CommonAPI::CallStatus &_internalCallStatus, ::v3::org::genivi::am_t::am_Error_e &_amError, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setMainSourceNotificationConfigurationAsync(const ::v3::org::genivi::am_t::am_sourceID_t &_sourceID, const ::v3::org::genivi::am_t::am_NotificationConfiguration_s &_mainNotificationConfiguration, SetMainSourceNotificationConfigurationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace commandinterface
} // namespace am
} // namespace genivi
} // namespace org
} // namespace v3


// Compatibility
namespace v3_1 = v3;

#endif // V3_ORG_GENIVI_AM_COMMANDINTERFACE_Command_Control_PROXY_BASE_HPP_
