/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This class implements everything from Audiomanager -&gt; RoutingAdapter
 * author: lian zhang
 */
#ifndef V1_ORG_GENIVI_AM_ROUTINGINTERFACE_Routing_Control_PROXY_BASE_HPP_
#define V1_ORG_GENIVI_AM_ROUTINGINTERFACE_Routing_Control_PROXY_BASE_HPP_

#include <v1/org/genivi/am/routinginterface/RoutingControl.hpp>


#include <v3/org/genivi/am_t.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/SelectiveEvent.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace genivi {
namespace am {
namespace routinginterface {

class RoutingControlProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::SelectiveEvent<::v3::org::genivi::am_t::am_Handle_s, ::v3::org::genivi::am_t::am_Error_e> AckSetSourceStateSelectiveEvent;

    typedef std::function<void(const CommonAPI::CallStatus&)> AsyncSetSourceStateAsyncCallback;


    /**
     * description: Acknowledges for asyncSetSourceState.
     */
    virtual AckSetSourceStateSelectiveEvent& getAckSetSourceStateSelectiveEvent() = 0;

    /**
     * description: This function is used to set the source state of a particular source.
     *   (at)return E_OK on success, E_UNKNOWN on error
     */
    virtual void asyncSetSourceState(const ::v3::org::genivi::am_t::am_Handle_s &_handle, const ::v3::org::genivi::am_t::am_sourceID_t &_sourceID, const ::v3::org::genivi::am_t::am_SourceState_e &_state, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> asyncSetSourceStateAsync(const ::v3::org::genivi::am_t::am_Handle_s &_handle, const ::v3::org::genivi::am_t::am_sourceID_t &_sourceID, const ::v3::org::genivi::am_t::am_SourceState_e &_state, AsyncSetSourceStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace routinginterface
} // namespace am
} // namespace genivi
} // namespace org
} // namespace v1


// Compatibility
namespace v1_1 = v1;

#endif // V1_ORG_GENIVI_AM_ROUTINGINTERFACE_Routing_Control_PROXY_BASE_HPP_
