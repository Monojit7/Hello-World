/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_ORG_GENIVI_MEDIAMANAGER_Player_PROXY_HPP_
#define V1_ORG_GENIVI_MEDIAMANAGER_Player_PROXY_HPP_

#include <v1/org/genivi/mediamanager/PlayerProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace genivi {
namespace mediamanager {

template <typename ... _AttributeExtensions>
class PlayerProxy
    : virtual public Player, 
      virtual public PlayerProxyBase,
      virtual public _AttributeExtensions... {
public:
    PlayerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~PlayerProxy();

    typedef Player InterfaceType;


    /**
     * description: Mute or unmute audio. When muted, the player backend will                      
     *   not produce any audio output.
     */
    /**
     * Returns the wrapper class that provides access to the attribute mute.
     */
    virtual MuteAttribute& getMuteAttribute() {
        return delegate_->getMuteAttribute();
    }
    /**
     * description: Shuffle or unshuffle the current play queue. Shuffling,                   
     *   un-shuffling and then re-shuffling will yield two different                   
     *   shufflings (which are not guaranteed to be different)
     */
    /**
     * Returns the wrapper class that provides access to the attribute shuffle.
     */
    virtual ShuffleAttribute& getShuffleAttribute() {
        return delegate_->getShuffleAttribute();
    }
    /**
     * description: Toggle repeat for the current playlist. If enabled,                      
     *   playback will continue with the first item of the current                     
     *    play queue when the last item has finished playing
     */
    /**
     * Returns the wrapper class that provides access to the attribute repeat.
     */
    virtual RepeatAttribute& getRepeatAttribute() {
        return delegate_->getRepeatAttribute();
    }
    /**
     * description: set time , if time is equle to what set , it will scan meida files
     */
    /**
     * Returns the wrapper class that provides access to the attribute scan.
     */
    virtual ScanAttribute& getScanAttribute() {
        return delegate_->getScanAttribute();
    }
    /**
     * description: Get or set the playback rate. The allowed range of values                      
     *   is -128 to +128
     */
    /**
     * Returns the wrapper class that provides access to the attribute rate.
     */
    virtual RateAttribute& getRateAttribute() {
        return delegate_->getRateAttribute();
    }
    /**
     * description: Get or set volume, 0 is muted, and 1.0 means maximum                      
     *   volume. Values outside this range will be capped
     */
    /**
     * Returns the wrapper class that provides access to the attribute volume.
     */
    virtual VolumeAttribute& getVolumeAttribute() {
        return delegate_->getVolumeAttribute();
    }
    /**
     * description: Indicates whether nowplaying list is available
     */
    /**
     * Returns the wrapper class that provides access to the attribute canGetPlayQueue.
     */
    virtual CanGetPlayQueueAttribute& getCanGetPlayQueueAttribute() {
        return delegate_->getCanGetPlayQueueAttribute();
    }
    /**
     * description: Indicates whether Next() is available
     */
    /**
     * Returns the wrapper class that provides access to the attribute canGoNext.
     */
    virtual CanGoNextAttribute& getCanGoNextAttribute() {
        return delegate_->getCanGoNextAttribute();
    }
    /**
     * description: Indicates whether Previous() is available
     */
    /**
     * Returns the wrapper class that provides access to the attribute canGoPrevious.
     */
    virtual CanGoPreviousAttribute& getCanGoPreviousAttribute() {
        return delegate_->getCanGoPreviousAttribute();
    }
    /**
     * description: Indicates whether Pause() is available
     */
    /**
     * Returns the wrapper class that provides access to the attribute canPause.
     */
    virtual CanPauseAttribute& getCanPauseAttribute() {
        return delegate_->getCanPauseAttribute();
    }
    /**
     * description: Indicates whether Play() is available
     */
    /**
     * Returns the wrapper class that provides access to the attribute canPlay.
     */
    virtual CanPlayAttribute& getCanPlayAttribute() {
        return delegate_->getCanPlayAttribute();
    }
    /**
     * description: Indicates whether Seek and SetPosition() are available
     */
    /**
     * Returns the wrapper class that provides access to the attribute canSeek.
     */
    virtual CanSeekAttribute& getCanSeekAttribute() {
        return delegate_->getCanSeekAttribute();
    }
    /**
     * description: Indicates the index in the play queue of the currently                      
     *   playing track, index is one-based.
     */
    /**
     * Returns the wrapper class that provides access to the attribute currentTrack.
     */
    virtual CurrentTrackAttribute& getCurrentTrackAttribute() {
        return delegate_->getCurrentTrackAttribute();
    }
    /**
     * description: Indicates the total track count in the play queue
     */
    /**
     * Returns the wrapper class that provides access to the attribute totalTracks.
     */
    virtual TotalTracksAttribute& getTotalTracksAttribute() {
        return delegate_->getTotalTracksAttribute();
    }
    /**
     * description: Indicates current playback status
     */
    /**
     * Returns the wrapper class that provides access to the attribute playbackStatus.
     */
    virtual PlaybackStatusAttribute& getPlaybackStatusAttribute() {
        return delegate_->getPlaybackStatusAttribute();
    }
    /**
     * description: Indicates current position in the currently playing                       track
     */
    /**
     * Returns the wrapper class that provides access to the attribute position.
     */
    virtual PositionAttribute& getPositionAttribute() {
        return delegate_->getPositionAttribute();
    }
    /**
     * description: Indicates duration of the current track
     */
    /**
     * Returns the wrapper class that provides access to the attribute duration.
     */
    virtual DurationAttribute& getDurationAttribute() {
        return delegate_->getDurationAttribute();
    }
    /**
     * description: Indicates playback video only,true: start video play; false: stop
     */
    /**
     * Returns the wrapper class that provides access to the attribute videoPlayStatus.
     */
    virtual VideoPlayStatusAttribute& getVideoPlayStatusAttribute() {
        return delegate_->getVideoPlayStatusAttribute();
    }
    /**
     * description: Indicates whether the end of now playing is reached when repeat is off.        
     *                  true: end of now playing is reached.                      
     *   false: end of now playing is not reached.
     */
    /**
     * Returns the wrapper class that provides access to the attribute sessionEnd.
     */
    virtual SessionEndAttribute& getSessionEndAttribute() {
        return delegate_->getSessionEndAttribute();
    }
    /**
     * description: Indicate the audio language codes for the current video track.
     */
    /**
     * Returns the wrapper class that provides access to the attribute currAudioLanguage.
     */
    virtual CurrAudioLanguageAttribute& getCurrAudioLanguageAttribute() {
        return delegate_->getCurrAudioLanguageAttribute();
    }
    /**
     * description: Indicate the total audio language count of the current video track
     */
    /**
     * Returns the wrapper class that provides access to the attribute totalAudioLanguage.
     */
    virtual TotalAudioLanguageAttribute& getTotalAudioLanguageAttribute() {
        return delegate_->getTotalAudioLanguageAttribute();
    }
    /**
     * description: Get or set audio channels for the current track
     */
    /**
     * Returns the wrapper class that provides access to the attribute audioChannel.
     */
    virtual AudioChannelAttribute& getAudioChannelAttribute() {
        return delegate_->getAudioChannelAttribute();
    }
    /**
     * description: Enable or disable subtitle
     */
    /**
     * Returns the wrapper class that provides access to the attribute subtitle.
     */
    virtual SubtitleAttribute& getSubtitleAttribute() {
        return delegate_->getSubtitleAttribute();
    }
    /**
     * description: Get or set the display aspect mode of video playback
     */
    /**
     * Returns the wrapper class that provides access to the attribute aspectMode.
     */
    virtual AspectModeAttribute& getAspectModeAttribute() {
        return delegate_->getAspectModeAttribute();
    }
    /**
     * description: Enable or disable restricted mode
     */
    /**
     * Returns the wrapper class that provides access to the attribute restrictedMode.
     */
    virtual RestrictedModeAttribute& getRestrictedModeAttribute() {
        return delegate_->getRestrictedModeAttribute();
    }
    /**
     * description: change the currently player type
     */
    /**
     * Returns the wrapper class that provides access to the attribute playerType.
     */
    virtual PlayerTypeAttribute& getPlayerTypeAttribute() {
        return delegate_->getPlayerTypeAttribute();
    }
    /**
     * description: The metadata of the current element.        If there is a current track, this
     *   must have following entries to display:        mandatory:         -
     *   DisplayName(String): Title of the current playing track.        -
     *   Artists(Stirng): Artist of the current playing track.        - Album(String):
     *   Album of the current playing track.        - Genre(String): Genre of the
     *   current playing track.        - Duration(Int64): Duration of the current
     *   playing track.        - TypeEx(String): they type of current track, coule be
     *   one of:                          'music', 'music.audioPodcast',
     *   'music.audioBook'        addtional:         - AlbumArt(String): AlbumArt
     *   picture's absolute path of the current playing track.        -
     *   Composer(String): Composer ot the current playing track.        -
     *   TrackNumber(Int32): Track number of the current playing track.
     */
    /**
     * Returns the wrapper class that provides access to the attribute metadata.
     */
    virtual MetadataAttribute& getMetadataAttribute() {
        return delegate_->getMetadataAttribute();
    }
    /**
     * description: currently playing/Actived MediumId
     */
    /**
     * Returns the wrapper class that provides access to the attribute CurrentMediumId.
     */
    virtual CurrentMediumIdAttribute& getCurrentMediumIdAttribute() {
        return delegate_->getCurrentMediumIdAttribute();
    }

    /**
     * description: playqueue size/content/order have been changed,      				  clients need call
     *   getCurrentPlayQueue(Ex) to update the contents
     */
    /**
     * Returns the wrapper class that provides access to the broadcast playQueueChanged.
     */
    virtual PlayQueueChangedEvent& getPlayQueueChangedEvent() {
        return delegate_->getPlayQueueChangedEvent();
    }
    /**
     * description: Emit an event to show the play error.                     mediumId: the unique
     *   device id.                     e: error code of playback.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast playError.
     */
    virtual PlayErrorEvent& getPlayErrorEvent() {
        return delegate_->getPlayErrorEvent();
    }
    /**
     * description: Emit an event to notify HMI special device playstatus change,             HMI
     *   control devices switching.          mediumId: the unique device id.         
     *   playStatus: play statue for device          uri: can be used by openUri to
     *   start auto playback.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast devicePlayStatusChange.
     */
    virtual DevicePlayStatusChangeEvent& getDevicePlayStatusChangeEvent() {
        return delegate_->getDevicePlayStatusChangeEvent();
    }

    /**
     * description: Skip to the next track in the play queue. If there is no                       
     *   next track, playback is stopped. If playback is paused or                     
     *     stopped, this function will set the next plack to be                       
     *   played once playback is activated
     * Calls next with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void next(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls next with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> nextAsync(NextAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Skip to the next chapter if current playback audio is podcast                  
     *        or audiobook.
     * Calls nextChapter with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void nextChapter(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls nextChapter with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> nextChapterAsync(NextChapterAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: USB device Next folder selection                        1. On next folder
     *   selection, the folder which comes next in alphabetical                        
     *     order shall be selected for play. System shall play first track of          
     *                   next folder on next folder selection.                       
     *   2. If the current song is in pause state and user presses next folder         
     *                    button, then system shall come out of pause state and play
     *   the next                          folder.                        3. Next
     *   folder operation should not be performed by the system when no                
     *             folder/tracks are present in the USB device.                       
     *   4. The system shall support next folder selection in Random and Repeat modes.
     * Calls nextFolder with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void nextFolder(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls nextFolder with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> nextFolderAsync(NextFolderAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Open the supplied Uri for playback in the playback engine.          returns:
     *   INVALID_URI When an invalid URI is supplied                               
     *   (decided by playback engine)                    NO_ERROR    On success
     * param: uri URI of media to play, uri format is decided by backend
     * Calls openUri with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void openUri(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls openUri with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> openUriAsync(const std::string &_uri, OpenUriAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Enqueue the supplied Uri for playback in the playback engine.          returns:
     *   INVALID_URI When an invalid URI is supplied                               
     *   (decided by playback engine)                   NO_ERROR    On success
     * param: uri URI of media to enqueue, uri format is decided by backend
     * Calls enqueueUri with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void enqueueUri(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls enqueueUri with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> enqueueUriAsync(const std::string &_uri, EnqueueUriAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Dequeue the item with the supplied index in the playback                      
     *   engine.
     * param: pos index of media to dequeue
     * Calls dequeueIndex with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void dequeueIndex(const uint64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls dequeueIndex with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> dequeueIndexAsync(const uint64_t &_pos, DequeueIndexAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Retrieve the current play queue. The format of the result                      
     *   object is described in MediaTypes.fidl          returns: Current play queue
     * Calls getCurrentPlayQueue with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getCurrentPlayQueue(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_playQueue, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getCurrentPlayQueue with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getCurrentPlayQueueAsync(GetCurrentPlayQueueAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Retrieve the current play queue with offset and count.     				  The format of
     *   the result object is described in MediaTypes.fidl          returns: Current
     *   play queue
     * Calls getCurrentPlayQueueEx with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getCurrentPlayQueueEx(const uint64_t &_offset, const uint64_t &_count, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_playQueue, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getCurrentPlayQueueEx with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getCurrentPlayQueueExAsync(const uint64_t &_offset, const uint64_t &_count, GetCurrentPlayQueueExAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Dequeue all elements, emptying the play queue
     * Calls dequeueAll with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void dequeueAll(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls dequeueAll with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> dequeueAllAsync(DequeueAllAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Use the supplied playlist as the current play queue. If                      
     *   the play queue is invalid, the old play queue is                      
     *   untouched.          returns: BAD_PLAYLIST If playlist can not be loaded       
     *               NO_ERROR     On success
     * Calls openPlaylist with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void openPlaylist(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls openPlaylist with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> openPlaylistAsync(const std::string &_uri, OpenPlaylistAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Pause playback in the playback engine.                        If already
     *   paused, this has no effect                        Note: If CanPause is false,
     *   this has no effect
     * Calls pause with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void pause(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls pause with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> pauseAsync(PauseAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Start or resume playback in the playback engine.                        If
     *   playback is already commencing, this has not effect.                        If
     *   paused, playback resumes from the current position.                        If
     *   there is no track to play, calling this has no effect                       
     *   Note: If CanPlay is false, this has no effect
     * Calls play with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void play(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls play with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> playAsync(PlayAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Stop playback in the playback engine.                        If playback is
     *   already stopped, this has not effect.
     * Calls stop with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void stop(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls stop with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> stopAsync(StopAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Starts playback (see Play) if paused                       Pauses playback (see
     *   Pause) is playing
     * see: Play
     * see: Pause
     * Calls playPause with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void playPause(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls playPause with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> playPauseAsync(PlayPauseAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Loads previous track in play queue or start at the      				  beginning of
     *   current track, time can be configured.                       If there is no
     *   previous track, playback is stopped                       If playback is
     *   stopped or paused, it remains this way,                       but the next
     *   track to be played will the set                       by this function        
     *                 Note: If CanGoPrevious is false, this has no effect
     * Calls previous with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void previous(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls previous with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> previousAsync(PreviousAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Skip to the next chapter if current playback audio is podcast                  
     *        or audiobook.
     * Calls previousChapter with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void previousChapter(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls previousChapter with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> previousChapterAsync(PreviousChapterAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: USB device Previous folder selection                        1. On previous
     *   folder selection, the folder which comes previous in alphabetical             
     *                order shall be selected for play. System shall play first track
     *   of previous                           folder on previous folder selection.    
     *                      2. If the current song is in pause state and user presses
     *   previous folder                           button, then system shall come out
     *   of pause state and play the previous folder.                        3.
     *   previous folder operation should not be performed by the system when no       
     *                      folder/tracks are present in the USB device.               
     *           4. The system shall support previous folder selection in Random and
     *   Repeat modes.
     * Calls previousFolder with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void previousFolder(const ::v1::org::genivi::mediamanager::PlayerTypes::StartIndexOption &_startIndexOpt, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls previousFolder with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> previousFolderAsync(const ::v1::org::genivi::mediamanager::PlayerTypes::StartIndexOption &_startIndexOpt, PreviousFolderAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Seek relatively in the current track                       If a negative seek
     *   leads to a play position less than 0,                       the play position
     *   will be set to 0.                       If a positive seek leads outside the
     *   length of the current                       track, this is treated like a call
     *   to Next()                       Note: If CanSeek is false, this has no effect
     * param: pos Relative seek amount in microseconds
     * see: Next
     * Calls seek with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void seek(const int64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls seek with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> seekAsync(const int64_t &_pos, SeekAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Jump to the specified position in the current                        If the
     *   position is not within range of the current track,                        do
     *   nothing          Note: If CanSeek is false, this has no effect
     * param: pos Absolute position in microseconds
     * Calls setPosition with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setPosition(const uint64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setPosition with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setPositionAsync(const uint64_t &_pos, SetPositionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: list all audio languages for current track
     * param: list The string list of all audio languages
     * Calls listAudioLanguages with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void listAudioLanguages(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::StringList &_list, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls listAudioLanguages with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> listAudioLanguagesAsync(ListAudioLanguagesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: select a audio languages for current track
     * param: lang audio languages code, eg. en/zh/jp
     * Calls selectAudioLanguage with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void selectAudioLanguage(const std::string &_lang, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls selectAudioLanguage with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> selectAudioLanguageAsync(const std::string &_lang, SelectAudioLanguageAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: list all (internal or external) subtitles in specified path
     * param: path The folder path name to list                      "." stand for current
     *   directory                      ".."  stand for the parent directory.          
     *          ResultMap usage:                 ----------------                 For
     *   Folders and Subtitles:                   - DisplayName(String): The name of
     *   Folder/Subtitle                   - Type(String): The type will be "folder" or
     *   "subtitle"                  For Folders only:                   -
     *   Path(String): The path name to list                  For Subtitles only:      
     *               - ID(Int64): The indentifier of Subtitle.                   -
     *   Language(String): The language code of current subtitle.                   -
     *   Active(Boolean): The subtitle is selected will be true, otherwise false.
     * Calls listSubtitles with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void listSubtitles(const std::string &_path, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_list, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls listSubtitles with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> listSubtitlesAsync(const std::string &_path, ListSubtitlesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: select a subtitle for current playing video track
     * param: id The id of selected subtitle, the id from the ResultMap of listSubtitles
     * Calls selectSubtitle with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void selectSubtitle(const int64_t &_id, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls selectSubtitle with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> selectSubtitleAsync(const int64_t &_id, SelectSubtitleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Adjust the current subtitle timeline for syncing with audio track playback
     * param: ms Adjustment in microseconds
     * Calls syncSubtitle with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void syncSubtitle(const int32_t &_ms, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls syncSubtitle with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> syncSubtitleAsync(const int32_t &_ms, SyncSubtitleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Set the display window coordinates of video playback
     * param: fullscreen ture is enable fullscreen, false is disable fullscreen and manually
     *   assigned by rectangle                 rect rectangle coordinates
     * Calls setDisplayWindow with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setDisplayWindow(const bool &_fullscreen, const ::v1::org::genivi::mediamanager::PlayerTypes::tRectangle &_rect, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setDisplayWindow with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setDisplayWindowAsync(const bool &_fullscreen, const ::v1::org::genivi::mediamanager::PlayerTypes::tRectangle &_rect, SetDisplayWindowAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: promote the track
     * param: uri is the track uri, empty uri can be used for current playing track.
     * Calls promote with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void promote(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls promote with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> promoteAsync(const std::string &_uri, PromoteAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: demote the track
     * param: uri is the track uri, empty uri can be used for current playing track.
     * Calls demote with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void demote(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls demote with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> demoteAsync(const std::string &_uri, DemoteAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: add iTunes station to a WishList
     * param: uri is the track uri, empty uri can be used for current playing track.
     * Calls addToWishList with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void addToWishList(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls addToWishList with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> addToWishListAsync(const std::string &_uri, AddToWishListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: create and now playing list by Ids
     * param: mediumId - the unique device id: 0 means current player                 titleId
     *   - title of the media/audiobook/podcast                 albumId - id of the
     *   album                 artistId - id of the artist                 genreId - id
     *   of the genre                 playlistId - id of the playlist                
     *   audiobookId - id of the audiobook                 podcastId - id of the
     *   podcast          For the Ids, set the value to 0 for default
     * Calls playByIds with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void playByIds(const uint32_t &_mediumId, const int32_t &_titleId, const int32_t &_albumId, const int32_t &_artistId, const int32_t &_genreId, const int32_t &_playlistId, const int32_t &_audiobookId, const int32_t &_podcastId, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls playByIds with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> playByIdsAsync(const uint32_t &_mediumId, const int32_t &_titleId, const int32_t &_albumId, const int32_t &_artistId, const int32_t &_genreId, const int32_t &_playlistId, const int32_t &_audiobookId, const int32_t &_podcastId, PlayByIdsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Method to send the button events received from HMI
     * Calls sendIAP2KeyEvent with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void sendIAP2KeyEvent(const ::v1::org::genivi::mediamanager::PlayerTypes::IAP2ButtonType &_buttonType, const bool &_pressed, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls sendIAP2KeyEvent with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> sendIAP2KeyEventAsync(const ::v1::org::genivi::mediamanager::PlayerTypes::IAP2ButtonType &_buttonType, const bool &_pressed, SendIAP2KeyEventAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<PlayerProxyBase> delegate_;
};

typedef PlayerProxy<> PlayerProxyDefault;

namespace PlayerExtensions {
    /**
     * description: Mute or unmute audio. When muted, the player backend will                      
     *   not produce any audio output.
     */
    template <template <typename > class _ExtensionType>
    class MuteAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::MuteAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::MuteAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        MuteAttributeExtension() {}
    #endif
    
        MuteAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getMuteAttribute()) {
        }
    
        inline extension_type& getMuteAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Shuffle or unshuffle the current play queue. Shuffling,                   
     *   un-shuffling and then re-shuffling will yield two different                   
     *   shufflings (which are not guaranteed to be different)
     */
    template <template <typename > class _ExtensionType>
    class ShuffleAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::ShuffleAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::ShuffleAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ShuffleAttributeExtension() {}
    #endif
    
        ShuffleAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getShuffleAttribute()) {
        }
    
        inline extension_type& getShuffleAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Toggle repeat for the current playlist. If enabled,                      
     *   playback will continue with the first item of the current                     
     *    play queue when the last item has finished playing
     */
    template <template <typename > class _ExtensionType>
    class RepeatAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::RepeatAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::RepeatAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        RepeatAttributeExtension() {}
    #endif
    
        RepeatAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getRepeatAttribute()) {
        }
    
        inline extension_type& getRepeatAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: set time , if time is equle to what set , it will scan meida files
     */
    template <template <typename > class _ExtensionType>
    class ScanAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::ScanAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::ScanAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ScanAttributeExtension() {}
    #endif
    
        ScanAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getScanAttribute()) {
        }
    
        inline extension_type& getScanAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Get or set the playback rate. The allowed range of values                      
     *   is -128 to +128
     */
    template <template <typename > class _ExtensionType>
    class RateAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::RateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::RateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        RateAttributeExtension() {}
    #endif
    
        RateAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getRateAttribute()) {
        }
    
        inline extension_type& getRateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Get or set volume, 0 is muted, and 1.0 means maximum                      
     *   volume. Values outside this range will be capped
     */
    template <template <typename > class _ExtensionType>
    class VolumeAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::VolumeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::VolumeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VolumeAttributeExtension() {}
    #endif
    
        VolumeAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getVolumeAttribute()) {
        }
    
        inline extension_type& getVolumeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates whether nowplaying list is available
     */
    template <template <typename > class _ExtensionType>
    class CanGetPlayQueueAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::CanGetPlayQueueAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::CanGetPlayQueueAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CanGetPlayQueueAttributeExtension() {}
    #endif
    
        CanGetPlayQueueAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getCanGetPlayQueueAttribute()) {
        }
    
        inline extension_type& getCanGetPlayQueueAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates whether Next() is available
     */
    template <template <typename > class _ExtensionType>
    class CanGoNextAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::CanGoNextAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::CanGoNextAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CanGoNextAttributeExtension() {}
    #endif
    
        CanGoNextAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getCanGoNextAttribute()) {
        }
    
        inline extension_type& getCanGoNextAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates whether Previous() is available
     */
    template <template <typename > class _ExtensionType>
    class CanGoPreviousAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::CanGoPreviousAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::CanGoPreviousAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CanGoPreviousAttributeExtension() {}
    #endif
    
        CanGoPreviousAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getCanGoPreviousAttribute()) {
        }
    
        inline extension_type& getCanGoPreviousAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates whether Pause() is available
     */
    template <template <typename > class _ExtensionType>
    class CanPauseAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::CanPauseAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::CanPauseAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CanPauseAttributeExtension() {}
    #endif
    
        CanPauseAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getCanPauseAttribute()) {
        }
    
        inline extension_type& getCanPauseAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates whether Play() is available
     */
    template <template <typename > class _ExtensionType>
    class CanPlayAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::CanPlayAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::CanPlayAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CanPlayAttributeExtension() {}
    #endif
    
        CanPlayAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getCanPlayAttribute()) {
        }
    
        inline extension_type& getCanPlayAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates whether Seek and SetPosition() are available
     */
    template <template <typename > class _ExtensionType>
    class CanSeekAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::CanSeekAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::CanSeekAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CanSeekAttributeExtension() {}
    #endif
    
        CanSeekAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getCanSeekAttribute()) {
        }
    
        inline extension_type& getCanSeekAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates the index in the play queue of the currently                      
     *   playing track, index is one-based.
     */
    template <template <typename > class _ExtensionType>
    class CurrentTrackAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::CurrentTrackAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::CurrentTrackAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CurrentTrackAttributeExtension() {}
    #endif
    
        CurrentTrackAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getCurrentTrackAttribute()) {
        }
    
        inline extension_type& getCurrentTrackAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates the total track count in the play queue
     */
    template <template <typename > class _ExtensionType>
    class TotalTracksAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::TotalTracksAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::TotalTracksAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TotalTracksAttributeExtension() {}
    #endif
    
        TotalTracksAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getTotalTracksAttribute()) {
        }
    
        inline extension_type& getTotalTracksAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates current playback status
     */
    template <template <typename > class _ExtensionType>
    class PlaybackStatusAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::PlaybackStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::PlaybackStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PlaybackStatusAttributeExtension() {}
    #endif
    
        PlaybackStatusAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getPlaybackStatusAttribute()) {
        }
    
        inline extension_type& getPlaybackStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates current position in the currently playing                       track
     */
    template <template <typename > class _ExtensionType>
    class PositionAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::PositionAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::PositionAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PositionAttributeExtension() {}
    #endif
    
        PositionAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getPositionAttribute()) {
        }
    
        inline extension_type& getPositionAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates duration of the current track
     */
    template <template <typename > class _ExtensionType>
    class DurationAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::DurationAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::DurationAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DurationAttributeExtension() {}
    #endif
    
        DurationAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getDurationAttribute()) {
        }
    
        inline extension_type& getDurationAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates playback video only,true: start video play; false: stop
     */
    template <template <typename > class _ExtensionType>
    class VideoPlayStatusAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::VideoPlayStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::VideoPlayStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VideoPlayStatusAttributeExtension() {}
    #endif
    
        VideoPlayStatusAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getVideoPlayStatusAttribute()) {
        }
    
        inline extension_type& getVideoPlayStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates whether the end of now playing is reached when repeat is off.        
     *                  true: end of now playing is reached.                      
     *   false: end of now playing is not reached.
     */
    template <template <typename > class _ExtensionType>
    class SessionEndAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::SessionEndAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::SessionEndAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SessionEndAttributeExtension() {}
    #endif
    
        SessionEndAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getSessionEndAttribute()) {
        }
    
        inline extension_type& getSessionEndAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicate the audio language codes for the current video track.
     */
    template <template <typename > class _ExtensionType>
    class CurrAudioLanguageAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::CurrAudioLanguageAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::CurrAudioLanguageAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CurrAudioLanguageAttributeExtension() {}
    #endif
    
        CurrAudioLanguageAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getCurrAudioLanguageAttribute()) {
        }
    
        inline extension_type& getCurrAudioLanguageAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicate the total audio language count of the current video track
     */
    template <template <typename > class _ExtensionType>
    class TotalAudioLanguageAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::TotalAudioLanguageAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::TotalAudioLanguageAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TotalAudioLanguageAttributeExtension() {}
    #endif
    
        TotalAudioLanguageAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getTotalAudioLanguageAttribute()) {
        }
    
        inline extension_type& getTotalAudioLanguageAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Get or set audio channels for the current track
     */
    template <template <typename > class _ExtensionType>
    class AudioChannelAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::AudioChannelAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::AudioChannelAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        AudioChannelAttributeExtension() {}
    #endif
    
        AudioChannelAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getAudioChannelAttribute()) {
        }
    
        inline extension_type& getAudioChannelAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Enable or disable subtitle
     */
    template <template <typename > class _ExtensionType>
    class SubtitleAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::SubtitleAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::SubtitleAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SubtitleAttributeExtension() {}
    #endif
    
        SubtitleAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getSubtitleAttribute()) {
        }
    
        inline extension_type& getSubtitleAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Get or set the display aspect mode of video playback
     */
    template <template <typename > class _ExtensionType>
    class AspectModeAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::AspectModeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::AspectModeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        AspectModeAttributeExtension() {}
    #endif
    
        AspectModeAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getAspectModeAttribute()) {
        }
    
        inline extension_type& getAspectModeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Enable or disable restricted mode
     */
    template <template <typename > class _ExtensionType>
    class RestrictedModeAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::RestrictedModeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::RestrictedModeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        RestrictedModeAttributeExtension() {}
    #endif
    
        RestrictedModeAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getRestrictedModeAttribute()) {
        }
    
        inline extension_type& getRestrictedModeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: change the currently player type
     */
    template <template <typename > class _ExtensionType>
    class PlayerTypeAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::PlayerTypeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::PlayerTypeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PlayerTypeAttributeExtension() {}
    #endif
    
        PlayerTypeAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getPlayerTypeAttribute()) {
        }
    
        inline extension_type& getPlayerTypeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: The metadata of the current element.        If there is a current track, this
     *   must have following entries to display:        mandatory:         -
     *   DisplayName(String): Title of the current playing track.        -
     *   Artists(Stirng): Artist of the current playing track.        - Album(String):
     *   Album of the current playing track.        - Genre(String): Genre of the
     *   current playing track.        - Duration(Int64): Duration of the current
     *   playing track.        - TypeEx(String): they type of current track, coule be
     *   one of:                          'music', 'music.audioPodcast',
     *   'music.audioBook'        addtional:         - AlbumArt(String): AlbumArt
     *   picture's absolute path of the current playing track.        -
     *   Composer(String): Composer ot the current playing track.        -
     *   TrackNumber(Int32): Track number of the current playing track.
     */
    template <template <typename > class _ExtensionType>
    class MetadataAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::MetadataAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::MetadataAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        MetadataAttributeExtension() {}
    #endif
    
        MetadataAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getMetadataAttribute()) {
        }
    
        inline extension_type& getMetadataAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: currently playing/Actived MediumId
     */
    template <template <typename > class _ExtensionType>
    class CurrentMediumIdAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::CurrentMediumIdAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::CurrentMediumIdAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CurrentMediumIdAttributeExtension() {}
    #endif
    
        CurrentMediumIdAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getCurrentMediumIdAttribute()) {
        }
    
        inline extension_type& getCurrentMediumIdAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace PlayerExtensions

//
// PlayerProxy Implementation
//
template <typename ... _AttributeExtensions>
PlayerProxy<_AttributeExtensions...>::PlayerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<PlayerProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<PlayerProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
PlayerProxy<_AttributeExtensions...>::~PlayerProxy() {
}

/**
 * description: Skip to the next track in the play queue. If there is no                       
 *   next track, playback is stopped. If playback is paused or                     
 *     stopped, this function will set the next plack to be                       
 *   played once playback is activated
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::next(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->next(_internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::nextAsync(NextAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->nextAsync(_callback, _info);
}
/**
 * description: Skip to the next chapter if current playback audio is podcast                  
 *        or audiobook.
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::nextChapter(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->nextChapter(_internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::nextChapterAsync(NextChapterAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->nextChapterAsync(_callback, _info);
}
/**
 * description: USB device Next folder selection                        1. On next folder
 *   selection, the folder which comes next in alphabetical                        
 *     order shall be selected for play. System shall play first track of          
 *                   next folder on next folder selection.                       
 *   2. If the current song is in pause state and user presses next folder         
 *                    button, then system shall come out of pause state and play
 *   the next                          folder.                        3. Next
 *   folder operation should not be performed by the system when no                
 *             folder/tracks are present in the USB device.                       
 *   4. The system shall support next folder selection in Random and Repeat modes.
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::nextFolder(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->nextFolder(_internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::nextFolderAsync(NextFolderAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->nextFolderAsync(_callback, _info);
}
/**
 * description: Open the supplied Uri for playback in the playback engine.          returns:
 *   INVALID_URI When an invalid URI is supplied                               
 *   (decided by playback engine)                    NO_ERROR    On success
 * param: uri URI of media to play, uri format is decided by backend
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::openUri(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->openUri(_uri, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::openUriAsync(const std::string &_uri, OpenUriAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->openUriAsync(_uri, _callback, _info);
}
/**
 * description: Enqueue the supplied Uri for playback in the playback engine.          returns:
 *   INVALID_URI When an invalid URI is supplied                               
 *   (decided by playback engine)                   NO_ERROR    On success
 * param: uri URI of media to enqueue, uri format is decided by backend
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::enqueueUri(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->enqueueUri(_uri, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::enqueueUriAsync(const std::string &_uri, EnqueueUriAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->enqueueUriAsync(_uri, _callback, _info);
}
/**
 * description: Dequeue the item with the supplied index in the playback                      
 *   engine.
 * param: pos index of media to dequeue
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::dequeueIndex(const uint64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->dequeueIndex(_pos, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::dequeueIndexAsync(const uint64_t &_pos, DequeueIndexAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->dequeueIndexAsync(_pos, _callback, _info);
}
/**
 * description: Retrieve the current play queue. The format of the result                      
 *   object is described in MediaTypes.fidl          returns: Current play queue
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::getCurrentPlayQueue(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_playQueue, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->getCurrentPlayQueue(_internalCallStatus, _playQueue, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::getCurrentPlayQueueAsync(GetCurrentPlayQueueAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getCurrentPlayQueueAsync(_callback, _info);
}
/**
 * description: Retrieve the current play queue with offset and count.     				  The format of
 *   the result object is described in MediaTypes.fidl          returns: Current
 *   play queue
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::getCurrentPlayQueueEx(const uint64_t &_offset, const uint64_t &_count, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_playQueue, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->getCurrentPlayQueueEx(_offset, _count, _internalCallStatus, _playQueue, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::getCurrentPlayQueueExAsync(const uint64_t &_offset, const uint64_t &_count, GetCurrentPlayQueueExAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getCurrentPlayQueueExAsync(_offset, _count, _callback, _info);
}
/**
 * description: Dequeue all elements, emptying the play queue
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::dequeueAll(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->dequeueAll(_internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::dequeueAllAsync(DequeueAllAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->dequeueAllAsync(_callback, _info);
}
/**
 * description: Use the supplied playlist as the current play queue. If                      
 *   the play queue is invalid, the old play queue is                      
 *   untouched.          returns: BAD_PLAYLIST If playlist can not be loaded       
 *               NO_ERROR     On success
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::openPlaylist(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->openPlaylist(_uri, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::openPlaylistAsync(const std::string &_uri, OpenPlaylistAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->openPlaylistAsync(_uri, _callback, _info);
}
/**
 * description: Pause playback in the playback engine.                        If already
 *   paused, this has no effect                        Note: If CanPause is false,
 *   this has no effect
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::pause(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->pause(_internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::pauseAsync(PauseAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->pauseAsync(_callback, _info);
}
/**
 * description: Start or resume playback in the playback engine.                        If
 *   playback is already commencing, this has not effect.                        If
 *   paused, playback resumes from the current position.                        If
 *   there is no track to play, calling this has no effect                       
 *   Note: If CanPlay is false, this has no effect
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::play(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->play(_internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::playAsync(PlayAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->playAsync(_callback, _info);
}
/**
 * description: Stop playback in the playback engine.                        If playback is
 *   already stopped, this has not effect.
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::stop(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->stop(_internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::stopAsync(StopAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->stopAsync(_callback, _info);
}
/**
 * description: Starts playback (see Play) if paused                       Pauses playback (see
 *   Pause) is playing
 * see: Play
 * see: Pause
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::playPause(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->playPause(_internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::playPauseAsync(PlayPauseAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->playPauseAsync(_callback, _info);
}
/**
 * description: Loads previous track in play queue or start at the      				  beginning of
 *   current track, time can be configured.                       If there is no
 *   previous track, playback is stopped                       If playback is
 *   stopped or paused, it remains this way,                       but the next
 *   track to be played will the set                       by this function        
 *                 Note: If CanGoPrevious is false, this has no effect
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::previous(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->previous(_internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::previousAsync(PreviousAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->previousAsync(_callback, _info);
}
/**
 * description: Skip to the next chapter if current playback audio is podcast                  
 *        or audiobook.
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::previousChapter(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->previousChapter(_internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::previousChapterAsync(PreviousChapterAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->previousChapterAsync(_callback, _info);
}
/**
 * description: USB device Previous folder selection                        1. On previous
 *   folder selection, the folder which comes previous in alphabetical             
 *                order shall be selected for play. System shall play first track
 *   of previous                           folder on previous folder selection.    
 *                      2. If the current song is in pause state and user presses
 *   previous folder                           button, then system shall come out
 *   of pause state and play the previous folder.                        3.
 *   previous folder operation should not be performed by the system when no       
 *                      folder/tracks are present in the USB device.               
 *           4. The system shall support previous folder selection in Random and
 *   Repeat modes.
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::previousFolder(const ::v1::org::genivi::mediamanager::PlayerTypes::StartIndexOption &_startIndexOpt, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    if (!_startIndexOpt.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->previousFolder(_startIndexOpt, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::previousFolderAsync(const ::v1::org::genivi::mediamanager::PlayerTypes::StartIndexOption &_startIndexOpt, PreviousFolderAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_startIndexOpt.validate()) {
        ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError e = ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError::NO_ERROR;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, e);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->previousFolderAsync(_startIndexOpt, _callback, _info);
}
/**
 * description: Seek relatively in the current track                       If a negative seek
 *   leads to a play position less than 0,                       the play position
 *   will be set to 0.                       If a positive seek leads outside the
 *   length of the current                       track, this is treated like a call
 *   to Next()                       Note: If CanSeek is false, this has no effect
 * param: pos Relative seek amount in microseconds
 * see: Next
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::seek(const int64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->seek(_pos, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::seekAsync(const int64_t &_pos, SeekAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->seekAsync(_pos, _callback, _info);
}
/**
 * description: Jump to the specified position in the current                        If the
 *   position is not within range of the current track,                        do
 *   nothing          Note: If CanSeek is false, this has no effect
 * param: pos Absolute position in microseconds
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::setPosition(const uint64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->setPosition(_pos, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::setPositionAsync(const uint64_t &_pos, SetPositionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setPositionAsync(_pos, _callback, _info);
}
/**
 * description: list all audio languages for current track
 * param: list The string list of all audio languages
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::listAudioLanguages(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::StringList &_list, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->listAudioLanguages(_internalCallStatus, _list, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::listAudioLanguagesAsync(ListAudioLanguagesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->listAudioLanguagesAsync(_callback, _info);
}
/**
 * description: select a audio languages for current track
 * param: lang audio languages code, eg. en/zh/jp
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::selectAudioLanguage(const std::string &_lang, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->selectAudioLanguage(_lang, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::selectAudioLanguageAsync(const std::string &_lang, SelectAudioLanguageAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->selectAudioLanguageAsync(_lang, _callback, _info);
}
/**
 * description: list all (internal or external) subtitles in specified path
 * param: path The folder path name to list                      "." stand for current
 *   directory                      ".."  stand for the parent directory.          
 *          ResultMap usage:                 ----------------                 For
 *   Folders and Subtitles:                   - DisplayName(String): The name of
 *   Folder/Subtitle                   - Type(String): The type will be "folder" or
 *   "subtitle"                  For Folders only:                   -
 *   Path(String): The path name to list                  For Subtitles only:      
 *               - ID(Int64): The indentifier of Subtitle.                   -
 *   Language(String): The language code of current subtitle.                   -
 *   Active(Boolean): The subtitle is selected will be true, otherwise false.
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::listSubtitles(const std::string &_path, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_list, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->listSubtitles(_path, _internalCallStatus, _list, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::listSubtitlesAsync(const std::string &_path, ListSubtitlesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->listSubtitlesAsync(_path, _callback, _info);
}
/**
 * description: select a subtitle for current playing video track
 * param: id The id of selected subtitle, the id from the ResultMap of listSubtitles
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::selectSubtitle(const int64_t &_id, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->selectSubtitle(_id, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::selectSubtitleAsync(const int64_t &_id, SelectSubtitleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->selectSubtitleAsync(_id, _callback, _info);
}
/**
 * description: Adjust the current subtitle timeline for syncing with audio track playback
 * param: ms Adjustment in microseconds
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::syncSubtitle(const int32_t &_ms, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->syncSubtitle(_ms, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::syncSubtitleAsync(const int32_t &_ms, SyncSubtitleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->syncSubtitleAsync(_ms, _callback, _info);
}
/**
 * description: Set the display window coordinates of video playback
 * param: fullscreen ture is enable fullscreen, false is disable fullscreen and manually
 *   assigned by rectangle                 rect rectangle coordinates
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::setDisplayWindow(const bool &_fullscreen, const ::v1::org::genivi::mediamanager::PlayerTypes::tRectangle &_rect, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->setDisplayWindow(_fullscreen, _rect, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::setDisplayWindowAsync(const bool &_fullscreen, const ::v1::org::genivi::mediamanager::PlayerTypes::tRectangle &_rect, SetDisplayWindowAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setDisplayWindowAsync(_fullscreen, _rect, _callback, _info);
}
/**
 * description: promote the track
 * param: uri is the track uri, empty uri can be used for current playing track.
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::promote(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->promote(_uri, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::promoteAsync(const std::string &_uri, PromoteAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->promoteAsync(_uri, _callback, _info);
}
/**
 * description: demote the track
 * param: uri is the track uri, empty uri can be used for current playing track.
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::demote(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->demote(_uri, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::demoteAsync(const std::string &_uri, DemoteAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->demoteAsync(_uri, _callback, _info);
}
/**
 * description: add iTunes station to a WishList
 * param: uri is the track uri, empty uri can be used for current playing track.
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::addToWishList(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->addToWishList(_uri, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::addToWishListAsync(const std::string &_uri, AddToWishListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->addToWishListAsync(_uri, _callback, _info);
}
/**
 * description: create and now playing list by Ids
 * param: mediumId - the unique device id: 0 means current player                 titleId
 *   - title of the media/audiobook/podcast                 albumId - id of the
 *   album                 artistId - id of the artist                 genreId - id
 *   of the genre                 playlistId - id of the playlist                
 *   audiobookId - id of the audiobook                 podcastId - id of the
 *   podcast          For the Ids, set the value to 0 for default
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::playByIds(const uint32_t &_mediumId, const int32_t &_titleId, const int32_t &_albumId, const int32_t &_artistId, const int32_t &_genreId, const int32_t &_playlistId, const int32_t &_audiobookId, const int32_t &_podcastId, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->playByIds(_mediumId, _titleId, _albumId, _artistId, _genreId, _playlistId, _audiobookId, _podcastId, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::playByIdsAsync(const uint32_t &_mediumId, const int32_t &_titleId, const int32_t &_albumId, const int32_t &_artistId, const int32_t &_genreId, const int32_t &_playlistId, const int32_t &_audiobookId, const int32_t &_podcastId, PlayByIdsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->playByIdsAsync(_mediumId, _titleId, _albumId, _artistId, _genreId, _playlistId, _audiobookId, _podcastId, _callback, _info);
}
/**
 * description: Method to send the button events received from HMI
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::sendIAP2KeyEvent(const ::v1::org::genivi::mediamanager::PlayerTypes::IAP2ButtonType &_buttonType, const bool &_pressed, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_buttonType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->sendIAP2KeyEvent(_buttonType, _pressed, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::sendIAP2KeyEventAsync(const ::v1::org::genivi::mediamanager::PlayerTypes::IAP2ButtonType &_buttonType, const bool &_pressed, SendIAP2KeyEventAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_buttonType.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->sendIAP2KeyEventAsync(_buttonType, _pressed, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &PlayerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool PlayerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool PlayerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& PlayerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& PlayerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace mediamanager
} // namespace genivi
} // namespace org
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v1::org::genivi::mediamanager::PlayerProxy,
    _AttributeExtension> {
    typedef typename ::v1::org::genivi::mediamanager::PlayerProxy<
            ::v1::org::genivi::mediamanager::PlayerExtensions::MuteAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::ShuffleAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::RepeatAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::ScanAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::RateAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::VolumeAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::CanGetPlayQueueAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::CanGoNextAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::CanGoPreviousAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::CanPauseAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::CanPlayAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::CanSeekAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::CurrentTrackAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::TotalTracksAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::PlaybackStatusAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::PositionAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::DurationAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::VideoPlayStatusAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::SessionEndAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::CurrAudioLanguageAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::TotalAudioLanguageAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::AudioChannelAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::SubtitleAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::AspectModeAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::RestrictedModeAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::PlayerTypeAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::MetadataAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::CurrentMediumIdAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_4 = v1;

#endif // V1_ORG_GENIVI_MEDIAMANAGER_Player_PROXY_HPP_
