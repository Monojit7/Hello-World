/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Source_Info_PROXY_HPP_
#define V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Source_Info_PROXY_HPP_

#include <v1/com/harman/audio/audioPresCtrl/audioSourceInfoProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace audio {
namespace audioPresCtrl {

template <typename ... _AttributeExtensions>
class audioSourceInfoProxy
    : virtual public audioSourceInfo, 
      virtual public audioSourceInfoProxyBase,
      virtual public _AttributeExtensions... {
public:
    audioSourceInfoProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~audioSourceInfoProxy();

    typedef audioSourceInfo InterfaceType;




    /**
     * description: This method should be invoked by the MediaPres for Media devices to register   
     *     device information which could be needed by the HMIs     For ex: register
     *   information on media device when they are inserted.  	Please refer
     *   sSourceInfo.eSourceAvailablity to learn about availibility states     Please
     *   refer the sequence diagram to determine when this method should be called    
     *   NOTE: This need not be invoked on device removal
     * Calls RegisterSourceInfo with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void RegisterSourceInfo(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceInfo &_info, CommonAPI::CallStatus &_internalCallStatus);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<audioSourceInfoProxyBase> delegate_;
};

typedef audioSourceInfoProxy<> audioSourceInfoProxyDefault;


//
// audioSourceInfoProxy Implementation
//
template <typename ... _AttributeExtensions>
audioSourceInfoProxy<_AttributeExtensions...>::audioSourceInfoProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<audioSourceInfoProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<audioSourceInfoProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
audioSourceInfoProxy<_AttributeExtensions...>::~audioSourceInfoProxy() {
}

/**
 * description: This method should be invoked by the MediaPres for Media devices to register   
 *     device information which could be needed by the HMIs     For ex: register
 *   information on media device when they are inserted.  	Please refer
 *   sSourceInfo.eSourceAvailablity to learn about availibility states     Please
 *   refer the sequence diagram to determine when this method should be called    
 *   NOTE: This need not be invoked on device removal
 */
template <typename ... _AttributeExtensions>
void audioSourceInfoProxy<_AttributeExtensions...>::RegisterSourceInfo(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceInfo &_info, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->RegisterSourceInfo(_info, _internalCallStatus);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &audioSourceInfoProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool audioSourceInfoProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool audioSourceInfoProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& audioSourceInfoProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& audioSourceInfoProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace audioPresCtrl
} // namespace audio
} // namespace harman
} // namespace com
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Source_Info_PROXY_HPP_
