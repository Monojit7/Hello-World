/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: Device Manager interfaces provide device detection control 	and get device
 *   informations.
 * author: ydou
 */
#ifndef V1_COM_HARMAN_MEDIA_Device_Manager_PROXY_BASE_HPP_
#define V1_COM_HARMAN_MEDIA_Device_Manager_PROXY_BASE_HPP_

#include <v1/com/harman/media/DeviceManager.hpp>


#include <v1/com/harman/media/BaseType.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace media {

class DeviceManagerProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        uint32_t, ::v1::com::harman::media::BaseType::tRemotePlayerCapability
    > OnRemotePlayerChangedEvent;
    typedef CommonAPI::Event<
        ::v1::com::harman::media::BaseType::tMediumInfo
    > OnMediumChangedEvent;
    typedef CommonAPI::Event<
        uint32_t, uint32_t
    > OnBluetoothProfilesStatusEvent;
    typedef CommonAPI::Event<
        uint32_t, double
    > SyncProgressEvent;
    typedef CommonAPI::Event<
        uint32_t, ::v1::com::harman::media::BaseType::tBaseError
    > DeviceErrorEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::media::BaseType::tBaseError&)> StartDeviceDetectionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::media::BaseType::tBaseError&, const ::v1::com::harman::media::BaseType::tMediumInfoList&)> GetDevicesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::media::BaseType::tBaseError&)> AllocateDeviceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::media::BaseType::tBaseError&)> FreeDeviceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::media::BaseType::tBaseError&)> EjectAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::media::BaseType::tItemsInfo&, const ::v1::com::harman::media::BaseType::tBaseError&)> GetDeviceItemsInfoAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::media::BaseType::tFirmwareInfo&, const ::v1::com::harman::media::BaseType::tBaseError&)> GetDeviceFirmwareInfoAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::media::BaseType::tHardwareInfo&, const ::v1::com::harman::media::BaseType::tBaseError&)> GetDeviceHarwareInfoAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::media::BaseType::tRemotePlayerCapability&, const ::v1::com::harman::media::BaseType::tBaseError&)> GetRemotePlayerCapabilityAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::media::BaseType::tBaseError&)> RequestSwitchModeAsyncCallback;


    /**
     * description: emit the event when remote  player changed
     */
    virtual OnRemotePlayerChangedEvent& getOnRemotePlayerChangedEvent() = 0;
    /**
     * description: Emit an event to Top when insert or remove a device.
     * author: ydou
     */
    virtual OnMediumChangedEvent& getOnMediumChangedEvent() = 0;
    /**
     * description: Emit an event to report bluetooth profiles status           mediumId : unique
     *   medium id across ignition cycle.          profilesStatus:  bluetooth profiles
     *   status
     * author: XiaZhu
     */
    virtual OnBluetoothProfilesStatusEvent& getOnBluetoothProfilesStatusEvent() = 0;
    /**
     * description: Emit an event to show the sync progress of a device.         	mediumId: the
     *   unique device id.         	progress: the sync progress.
     */
    virtual SyncProgressEvent& getSyncProgressEvent() = 0;
    /**
     * description: Emit an event to show the device error.         	mediumId: the unique device
     *   id.         	e: error code.
     */
    virtual DeviceErrorEvent& getDeviceErrorEvent() = 0;

    /**
     * description: Trigger the Device Manager to init & work for device detection.
     * author: ydou
     */
    virtual void startDeviceDetection(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startDeviceDetectionAsync(StartDeviceDetectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Get the current connecting devices to Top with the detail information.
     * author: ydou
     */
    virtual void getDevices(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_error, ::v1::com::harman::media::BaseType::tMediumInfoList &_mediumList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getDevicesAsync(GetDevicesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: allocate a shadow device 					   onMediumChanged broadcast will be emitted if
     *   allocate success. 			mediumId: device id which connectted to the target.
     *   			type: must be 'MT_SHADOW' for allocating a shadow device. 			name: the name
     *   for the allocated device.
     */
    virtual void allocateDevice(const uint32_t &_mediumId, const ::v1::com::harman::media::BaseType::tMediumType &_type, const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> allocateDeviceAsync(const uint32_t &_mediumId, const ::v1::com::harman::media::BaseType::tMediumType &_type, const std::string &_name, AllocateDeviceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: free a shadow device which allocated with allocateDevice interface.
     *   			onMediumChanged broadcast will be emitted if free success.  			mediumId:
     *   device id which connectted to the target. 			handleId: shadow device handle.
     */
    virtual void freeDevice(const uint32_t &_mediumId, const uint32_t &_handleId, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> freeDeviceAsync(const uint32_t &_mediumId, const uint32_t &_handleId, FreeDeviceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: eject the connected devices.            mediumId: device id which connectted to
     *   the target.           e: error code.
     */
    virtual void eject(const uint32_t &_mediumId, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> ejectAsync(const uint32_t &_mediumId, EjectAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: get device items information.  			mediumId: device id which connectted to the
     *   target. 			itemsInfo: imtes information will be returned. 			e: error code.
     */
    virtual void getDeviceItemsInfo(const uint32_t &_meidumId, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tItemsInfo &_itemsInfo, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getDeviceItemsInfoAsync(const uint32_t &_meidumId, GetDeviceItemsInfoAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: get device firmware information.  			mediumId: device id which connectted to
     *   the target. 			fmInfo: firmware information will be returned. 			e: error code.
     */
    virtual void getDeviceFirmwareInfo(const uint32_t &_meidumId, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tFirmwareInfo &_fmInfo, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getDeviceFirmwareInfoAsync(const uint32_t &_meidumId, GetDeviceFirmwareInfoAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: get device hardware information.  			mediumId: device id which connectted to
     *   the target. 			hwInfo: hardware information will be returned. 			e: error code.
     */
    virtual void getDeviceHarwareInfo(const uint32_t &_meidumId, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tHardwareInfo &_hwInfo, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getDeviceHarwareInfoAsync(const uint32_t &_meidumId, GetDeviceHarwareInfoAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: get the remote player capability for BT device.  			mediumId: device id which
     *   connectted to the target. 			caps: remote player capabilities. 			e: error
     *   code.
     */
    virtual void getRemotePlayerCapability(const uint32_t &_mediumId, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tRemotePlayerCapability &_caps, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getRemotePlayerCapabilityAsync(const uint32_t &_mediumId, GetRemotePlayerCapabilityAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: switch mode for android device.           mediumId: device id which connectted
     *   to the target.          tMediumType: medium type which swith to.          e:
     *   error code.
     */
    virtual void requestSwitchMode(const uint32_t &_mediumId, const ::v1::com::harman::media::BaseType::tMediumType &_mediumType, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestSwitchModeAsync(const uint32_t &_mediumId, const ::v1::com::harman::media::BaseType::tMediumType &_mediumType, RequestSwitchModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace media
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_1 = v1;

#endif // V1_COM_HARMAN_MEDIA_Device_Manager_PROXY_BASE_HPP_
