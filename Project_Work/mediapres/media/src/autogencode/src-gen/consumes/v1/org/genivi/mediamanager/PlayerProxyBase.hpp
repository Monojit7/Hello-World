/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_ORG_GENIVI_MEDIAMANAGER_Player_PROXY_BASE_HPP_
#define V1_ORG_GENIVI_MEDIAMANAGER_Player_PROXY_BASE_HPP_

#include <v1/org/genivi/mediamanager/Player.hpp>


#include <v1/org/genivi/mediamanager/MediaTypes.hpp>
#include <v1/org/genivi/mediamanager/PlayerTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace genivi {
namespace mediamanager {

class PlayerProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableAttribute<::v1::org::genivi::mediamanager::PlayerTypes::MuteStatus> MuteAttribute;
    typedef CommonAPI::ObservableAttribute<::v1::org::genivi::mediamanager::PlayerTypes::ShuffleStatus> ShuffleAttribute;
    typedef CommonAPI::ObservableAttribute<::v1::org::genivi::mediamanager::PlayerTypes::RepeatStatus> RepeatAttribute;
    typedef CommonAPI::ObservableAttribute<::v1::org::genivi::mediamanager::PlayerTypes::ScanStatus> ScanAttribute;
    typedef CommonAPI::ObservableAttribute<double> RateAttribute;
    typedef CommonAPI::ObservableAttribute<double> VolumeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> CanGetPlayQueueAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> CanGoNextAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> CanGoPreviousAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> CanPauseAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> CanPlayAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> CanSeekAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<uint64_t> CurrentTrackAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<uint64_t> TotalTracksAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::org::genivi::mediamanager::PlayerTypes::PlaybackStatus> PlaybackStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<uint64_t> PositionAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<uint64_t> DurationAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> VideoPlayStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> SessionEndAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<std::string> CurrAudioLanguageAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<uint32_t> TotalAudioLanguageAttribute;
    typedef CommonAPI::ObservableAttribute<::v1::org::genivi::mediamanager::PlayerTypes::AudioChannelStatus> AudioChannelAttribute;
    typedef CommonAPI::ObservableAttribute<::v1::org::genivi::mediamanager::PlayerTypes::SubtitleStatus> SubtitleAttribute;
    typedef CommonAPI::ObservableAttribute<::v1::org::genivi::mediamanager::PlayerTypes::AspectModeStatus> AspectModeAttribute;
    typedef CommonAPI::ObservableAttribute<::v1::org::genivi::mediamanager::PlayerTypes::RestrictedModeStatus> RestrictedModeAttribute;
    typedef CommonAPI::ObservableAttribute<::v1::org::genivi::mediamanager::PlayerTypes::PlayerType> PlayerTypeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::org::genivi::mediamanager::MediaTypes::ResultMap> MetadataAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<uint32_t> CurrentMediumIdAttribute;
    typedef CommonAPI::Event<
    > PlayQueueChangedEvent;
    typedef CommonAPI::Event<
        uint32_t, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError
    > PlayErrorEvent;
    typedef CommonAPI::Event<
        uint32_t, ::v1::org::genivi::mediamanager::PlayerTypes::PlaybackStatus, std::string
    > DevicePlayStatusChangeEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> NextAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> NextChapterAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> NextFolderAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> OpenUriAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> EnqueueUriAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> DequeueIndexAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> GetCurrentPlayQueueAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> GetCurrentPlayQueueExAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> DequeueAllAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> OpenPlaylistAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> PauseAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> PlayAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> StopAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> PlayPauseAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> PreviousAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> PreviousChapterAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> PreviousFolderAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> SeekAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> SetPositionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::MediaTypes::StringList&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> ListAudioLanguagesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> SelectAudioLanguageAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> ListSubtitlesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> SelectSubtitleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> SyncSubtitleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> SetDisplayWindowAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> PromoteAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> DemoteAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> AddToWishListAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> PlayByIdsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SendIAP2KeyEventAsyncCallback;

    /**
     * description: Mute or unmute audio. When muted, the player backend will                      
     *   not produce any audio output.
     */
    virtual MuteAttribute& getMuteAttribute() = 0;
    /**
     * description: Shuffle or unshuffle the current play queue. Shuffling,                   
     *   un-shuffling and then re-shuffling will yield two different                   
     *   shufflings (which are not guaranteed to be different)
     */
    virtual ShuffleAttribute& getShuffleAttribute() = 0;
    /**
     * description: Toggle repeat for the current playlist. If enabled,                      
     *   playback will continue with the first item of the current                     
     *    play queue when the last item has finished playing
     */
    virtual RepeatAttribute& getRepeatAttribute() = 0;
    /**
     * description: set time , if time is equle to what set , it will scan meida files
     */
    virtual ScanAttribute& getScanAttribute() = 0;
    /**
     * description: Get or set the playback rate. The allowed range of values                      
     *   is -128 to +128
     */
    virtual RateAttribute& getRateAttribute() = 0;
    /**
     * description: Get or set volume, 0 is muted, and 1.0 means maximum                      
     *   volume. Values outside this range will be capped
     */
    virtual VolumeAttribute& getVolumeAttribute() = 0;
    /**
     * description: Indicates whether nowplaying list is available
     */
    virtual CanGetPlayQueueAttribute& getCanGetPlayQueueAttribute() = 0;
    /**
     * description: Indicates whether Next() is available
     */
    virtual CanGoNextAttribute& getCanGoNextAttribute() = 0;
    /**
     * description: Indicates whether Previous() is available
     */
    virtual CanGoPreviousAttribute& getCanGoPreviousAttribute() = 0;
    /**
     * description: Indicates whether Pause() is available
     */
    virtual CanPauseAttribute& getCanPauseAttribute() = 0;
    /**
     * description: Indicates whether Play() is available
     */
    virtual CanPlayAttribute& getCanPlayAttribute() = 0;
    /**
     * description: Indicates whether Seek and SetPosition() are available
     */
    virtual CanSeekAttribute& getCanSeekAttribute() = 0;
    /**
     * description: Indicates the index in the play queue of the currently                      
     *   playing track, index is one-based.
     */
    virtual CurrentTrackAttribute& getCurrentTrackAttribute() = 0;
    /**
     * description: Indicates the total track count in the play queue
     */
    virtual TotalTracksAttribute& getTotalTracksAttribute() = 0;
    /**
     * description: Indicates current playback status
     */
    virtual PlaybackStatusAttribute& getPlaybackStatusAttribute() = 0;
    /**
     * description: Indicates current position in the currently playing                       track
     */
    virtual PositionAttribute& getPositionAttribute() = 0;
    /**
     * description: Indicates duration of the current track
     */
    virtual DurationAttribute& getDurationAttribute() = 0;
    /**
     * description: Indicates playback video only,true: start video play; false: stop
     */
    virtual VideoPlayStatusAttribute& getVideoPlayStatusAttribute() = 0;
    /**
     * description: Indicates whether the end of now playing is reached when repeat is off.        
     *                  true: end of now playing is reached.                      
     *   false: end of now playing is not reached.
     */
    virtual SessionEndAttribute& getSessionEndAttribute() = 0;
    /**
     * description: Indicate the audio language codes for the current video track.
     */
    virtual CurrAudioLanguageAttribute& getCurrAudioLanguageAttribute() = 0;
    /**
     * description: Indicate the total audio language count of the current video track
     */
    virtual TotalAudioLanguageAttribute& getTotalAudioLanguageAttribute() = 0;
    /**
     * description: Get or set audio channels for the current track
     */
    virtual AudioChannelAttribute& getAudioChannelAttribute() = 0;
    /**
     * description: Enable or disable subtitle
     */
    virtual SubtitleAttribute& getSubtitleAttribute() = 0;
    /**
     * description: Get or set the display aspect mode of video playback
     */
    virtual AspectModeAttribute& getAspectModeAttribute() = 0;
    /**
     * description: Enable or disable restricted mode
     */
    virtual RestrictedModeAttribute& getRestrictedModeAttribute() = 0;
    /**
     * description: change the currently player type
     */
    virtual PlayerTypeAttribute& getPlayerTypeAttribute() = 0;
    /**
     * description: The metadata of the current element.        If there is a current track, this
     *   must have following entries to display:        mandatory:         -
     *   DisplayName(String): Title of the current playing track.        -
     *   Artists(Stirng): Artist of the current playing track.        - Album(String):
     *   Album of the current playing track.        - Genre(String): Genre of the
     *   current playing track.        - Duration(Int64): Duration of the current
     *   playing track.        - TypeEx(String): they type of current track, coule be
     *   one of:                          'music', 'music.audioPodcast',
     *   'music.audioBook'        addtional:         - AlbumArt(String): AlbumArt
     *   picture's absolute path of the current playing track.        -
     *   Composer(String): Composer ot the current playing track.        -
     *   TrackNumber(Int32): Track number of the current playing track.
     */
    virtual MetadataAttribute& getMetadataAttribute() = 0;
    /**
     * description: currently playing/Actived MediumId
     */
    virtual CurrentMediumIdAttribute& getCurrentMediumIdAttribute() = 0;

    /**
     * description: playqueue size/content/order have been changed,      				  clients need call
     *   getCurrentPlayQueue(Ex) to update the contents
     */
    virtual PlayQueueChangedEvent& getPlayQueueChangedEvent() = 0;
    /**
     * description: Emit an event to show the play error.                     mediumId: the unique
     *   device id.                     e: error code of playback.
     */
    virtual PlayErrorEvent& getPlayErrorEvent() = 0;
    /**
     * description: Emit an event to notify HMI special device playstatus change,             HMI
     *   control devices switching.          mediumId: the unique device id.         
     *   playStatus: play statue for device          uri: can be used by openUri to
     *   start auto playback.
     */
    virtual DevicePlayStatusChangeEvent& getDevicePlayStatusChangeEvent() = 0;

    /**
     * description: Skip to the next track in the play queue. If there is no                       
     *   next track, playback is stopped. If playback is paused or                     
     *     stopped, this function will set the next plack to be                       
     *   played once playback is activated
     */
    virtual void next(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> nextAsync(NextAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Skip to the next chapter if current playback audio is podcast                  
     *        or audiobook.
     */
    virtual void nextChapter(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> nextChapterAsync(NextChapterAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: USB device Next folder selection                        1. On next folder
     *   selection, the folder which comes next in alphabetical                        
     *     order shall be selected for play. System shall play first track of          
     *                   next folder on next folder selection.                       
     *   2. If the current song is in pause state and user presses next folder         
     *                    button, then system shall come out of pause state and play
     *   the next                          folder.                        3. Next
     *   folder operation should not be performed by the system when no                
     *             folder/tracks are present in the USB device.                       
     *   4. The system shall support next folder selection in Random and Repeat modes.
     */
    virtual void nextFolder(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> nextFolderAsync(NextFolderAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Open the supplied Uri for playback in the playback engine.          returns:
     *   INVALID_URI When an invalid URI is supplied                               
     *   (decided by playback engine)                    NO_ERROR    On success
     * param: uri URI of media to play, uri format is decided by backend
     */
    virtual void openUri(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> openUriAsync(const std::string &_uri, OpenUriAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Enqueue the supplied Uri for playback in the playback engine.          returns:
     *   INVALID_URI When an invalid URI is supplied                               
     *   (decided by playback engine)                   NO_ERROR    On success
     * param: uri URI of media to enqueue, uri format is decided by backend
     */
    virtual void enqueueUri(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> enqueueUriAsync(const std::string &_uri, EnqueueUriAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Dequeue the item with the supplied index in the playback                      
     *   engine.
     * param: pos index of media to dequeue
     */
    virtual void dequeueIndex(const uint64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> dequeueIndexAsync(const uint64_t &_pos, DequeueIndexAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Retrieve the current play queue. The format of the result                      
     *   object is described in MediaTypes.fidl          returns: Current play queue
     */
    virtual void getCurrentPlayQueue(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_playQueue, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getCurrentPlayQueueAsync(GetCurrentPlayQueueAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Retrieve the current play queue with offset and count.     				  The format of
     *   the result object is described in MediaTypes.fidl          returns: Current
     *   play queue
     */
    virtual void getCurrentPlayQueueEx(const uint64_t &_offset, const uint64_t &_count, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_playQueue, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getCurrentPlayQueueExAsync(const uint64_t &_offset, const uint64_t &_count, GetCurrentPlayQueueExAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Dequeue all elements, emptying the play queue
     */
    virtual void dequeueAll(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> dequeueAllAsync(DequeueAllAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Use the supplied playlist as the current play queue. If                      
     *   the play queue is invalid, the old play queue is                      
     *   untouched.          returns: BAD_PLAYLIST If playlist can not be loaded       
     *               NO_ERROR     On success
     */
    virtual void openPlaylist(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> openPlaylistAsync(const std::string &_uri, OpenPlaylistAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Pause playback in the playback engine.                        If already
     *   paused, this has no effect                        Note: If CanPause is false,
     *   this has no effect
     */
    virtual void pause(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> pauseAsync(PauseAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Start or resume playback in the playback engine.                        If
     *   playback is already commencing, this has not effect.                        If
     *   paused, playback resumes from the current position.                        If
     *   there is no track to play, calling this has no effect                       
     *   Note: If CanPlay is false, this has no effect
     */
    virtual void play(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> playAsync(PlayAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Stop playback in the playback engine.                        If playback is
     *   already stopped, this has not effect.
     */
    virtual void stop(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> stopAsync(StopAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Starts playback (see Play) if paused                       Pauses playback (see
     *   Pause) is playing
     * see: Play
     * see: Pause
     */
    virtual void playPause(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> playPauseAsync(PlayPauseAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Loads previous track in play queue or start at the      				  beginning of
     *   current track, time can be configured.                       If there is no
     *   previous track, playback is stopped                       If playback is
     *   stopped or paused, it remains this way,                       but the next
     *   track to be played will the set                       by this function        
     *                 Note: If CanGoPrevious is false, this has no effect
     */
    virtual void previous(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> previousAsync(PreviousAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Skip to the next chapter if current playback audio is podcast                  
     *        or audiobook.
     */
    virtual void previousChapter(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> previousChapterAsync(PreviousChapterAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: USB device Previous folder selection                        1. On previous
     *   folder selection, the folder which comes previous in alphabetical             
     *                order shall be selected for play. System shall play first track
     *   of previous                           folder on previous folder selection.    
     *                      2. If the current song is in pause state and user presses
     *   previous folder                           button, then system shall come out
     *   of pause state and play the previous folder.                        3.
     *   previous folder operation should not be performed by the system when no       
     *                      folder/tracks are present in the USB device.               
     *           4. The system shall support previous folder selection in Random and
     *   Repeat modes.
     */
    virtual void previousFolder(const ::v1::org::genivi::mediamanager::PlayerTypes::StartIndexOption &_startIndexOpt, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> previousFolderAsync(const ::v1::org::genivi::mediamanager::PlayerTypes::StartIndexOption &_startIndexOpt, PreviousFolderAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Seek relatively in the current track                       If a negative seek
     *   leads to a play position less than 0,                       the play position
     *   will be set to 0.                       If a positive seek leads outside the
     *   length of the current                       track, this is treated like a call
     *   to Next()                       Note: If CanSeek is false, this has no effect
     * param: pos Relative seek amount in microseconds
     * see: Next
     */
    virtual void seek(const int64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> seekAsync(const int64_t &_pos, SeekAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Jump to the specified position in the current                        If the
     *   position is not within range of the current track,                        do
     *   nothing          Note: If CanSeek is false, this has no effect
     * param: pos Absolute position in microseconds
     */
    virtual void setPosition(const uint64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setPositionAsync(const uint64_t &_pos, SetPositionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: list all audio languages for current track
     * param: list The string list of all audio languages
     */
    virtual void listAudioLanguages(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::StringList &_list, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> listAudioLanguagesAsync(ListAudioLanguagesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: select a audio languages for current track
     * param: lang audio languages code, eg. en/zh/jp
     */
    virtual void selectAudioLanguage(const std::string &_lang, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> selectAudioLanguageAsync(const std::string &_lang, SelectAudioLanguageAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: list all (internal or external) subtitles in specified path
     * param: path The folder path name to list                      "." stand for current
     *   directory                      ".."  stand for the parent directory.          
     *          ResultMap usage:                 ----------------                 For
     *   Folders and Subtitles:                   - DisplayName(String): The name of
     *   Folder/Subtitle                   - Type(String): The type will be "folder" or
     *   "subtitle"                  For Folders only:                   -
     *   Path(String): The path name to list                  For Subtitles only:      
     *               - ID(Int64): The indentifier of Subtitle.                   -
     *   Language(String): The language code of current subtitle.                   -
     *   Active(Boolean): The subtitle is selected will be true, otherwise false.
     */
    virtual void listSubtitles(const std::string &_path, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_list, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> listSubtitlesAsync(const std::string &_path, ListSubtitlesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: select a subtitle for current playing video track
     * param: id The id of selected subtitle, the id from the ResultMap of listSubtitles
     */
    virtual void selectSubtitle(const int64_t &_id, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> selectSubtitleAsync(const int64_t &_id, SelectSubtitleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Adjust the current subtitle timeline for syncing with audio track playback
     * param: ms Adjustment in microseconds
     */
    virtual void syncSubtitle(const int32_t &_ms, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> syncSubtitleAsync(const int32_t &_ms, SyncSubtitleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Set the display window coordinates of video playback
     * param: fullscreen ture is enable fullscreen, false is disable fullscreen and manually
     *   assigned by rectangle                 rect rectangle coordinates
     */
    virtual void setDisplayWindow(const bool &_fullscreen, const ::v1::org::genivi::mediamanager::PlayerTypes::tRectangle &_rect, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setDisplayWindowAsync(const bool &_fullscreen, const ::v1::org::genivi::mediamanager::PlayerTypes::tRectangle &_rect, SetDisplayWindowAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: promote the track
     * param: uri is the track uri, empty uri can be used for current playing track.
     */
    virtual void promote(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> promoteAsync(const std::string &_uri, PromoteAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: demote the track
     * param: uri is the track uri, empty uri can be used for current playing track.
     */
    virtual void demote(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> demoteAsync(const std::string &_uri, DemoteAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: add iTunes station to a WishList
     * param: uri is the track uri, empty uri can be used for current playing track.
     */
    virtual void addToWishList(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> addToWishListAsync(const std::string &_uri, AddToWishListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: create and now playing list by Ids
     * param: mediumId - the unique device id: 0 means current player                 titleId
     *   - title of the media/audiobook/podcast                 albumId - id of the
     *   album                 artistId - id of the artist                 genreId - id
     *   of the genre                 playlistId - id of the playlist                
     *   audiobookId - id of the audiobook                 podcastId - id of the
     *   podcast          For the Ids, set the value to 0 for default
     */
    virtual void playByIds(const uint32_t &_mediumId, const int32_t &_titleId, const int32_t &_albumId, const int32_t &_artistId, const int32_t &_genreId, const int32_t &_playlistId, const int32_t &_audiobookId, const int32_t &_podcastId, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> playByIdsAsync(const uint32_t &_mediumId, const int32_t &_titleId, const int32_t &_albumId, const int32_t &_artistId, const int32_t &_genreId, const int32_t &_playlistId, const int32_t &_audiobookId, const int32_t &_podcastId, PlayByIdsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Method to send the button events received from HMI
     */
    virtual void sendIAP2KeyEvent(const ::v1::org::genivi::mediamanager::PlayerTypes::IAP2ButtonType &_buttonType, const bool &_pressed, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> sendIAP2KeyEventAsync(const ::v1::org::genivi::mediamanager::PlayerTypes::IAP2ButtonType &_buttonType, const bool &_pressed, SendIAP2KeyEventAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace mediamanager
} // namespace genivi
} // namespace org
} // namespace v1


// Compatibility
namespace v1_4 = v1;

#endif // V1_ORG_GENIVI_MEDIAMANAGER_Player_PROXY_BASE_HPP_
