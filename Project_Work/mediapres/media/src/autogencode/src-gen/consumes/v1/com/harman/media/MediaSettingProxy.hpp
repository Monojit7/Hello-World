/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_HARMAN_MEDIA_Media_Setting_PROXY_HPP_
#define V1_COM_HARMAN_MEDIA_Media_Setting_PROXY_HPP_

#include <v1/com/harman/media/MediaSettingProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace media {

template <typename ... _AttributeExtensions>
class MediaSettingProxy
    : virtual public MediaSetting, 
      virtual public MediaSettingProxyBase,
      virtual public _AttributeExtensions... {
public:
    MediaSettingProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~MediaSettingProxy();

    typedef MediaSetting InterfaceType;


    /**
     * description: locale name. A locale name is typically of the form language[_territory], 					
     *    where language is an ISO 639 language code,  					  territory is an ISO 3166
     *   country code
     */
    /**
     * Returns the wrapper class that provides access to the attribute localeName.
     */
    virtual LocaleNameAttribute& getLocaleNameAttribute() {
        return delegate_->getLocaleNameAttribute();
    }
    /**
     * description: set/get video playback speed, default speed is 1.0
     */
    /**
     * Returns the wrapper class that provides access to the attribute videoPlaybackSpeed.
     */
    virtual VideoPlaybackSpeedAttribute& getVideoPlaybackSpeedAttribute() {
        return delegate_->getVideoPlaybackSpeedAttribute();
    }

    /**
     * description: Emit an event to notify HMI audiobook/podcast playback speed change 		type: the
     *   audio object type. 		speed: playback speed.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast playbackSpeedChange.
     */
    virtual PlaybackSpeedChangeEvent& getPlaybackSpeedChangeEvent() {
        return delegate_->getPlaybackSpeedChangeEvent();
    }

    /**
     * description: reset all the setting to the default.  			e: error code.
     * Calls resetToFactory with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void resetToFactory(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls resetToFactory with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> resetToFactoryAsync(ResetToFactoryAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: set the default playback speed for one audio type. 			type: the audio object
     *   type. 			speed: playback speed. 			e: error code.
     * Calls setPlaybackSpeed with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setPlaybackSpeed(const ::v1::com::harman::media::BaseType::tAudioObjectType &_type, const double &_speed, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setPlaybackSpeed with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setPlaybackSpeedAsync(const ::v1::com::harman::media::BaseType::tAudioObjectType &_type, const double &_speed, SetPlaybackSpeedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: get the default playback speed for one audio type. 			type: the audio object
     *   type. 			speed: playback speed. 			e: error code.
     * Calls getPlaybackSpeed with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getPlaybackSpeed(const ::v1::com::harman::media::BaseType::tAudioObjectType &_type, CommonAPI::CallStatus &_internalCallStatus, double &_speed, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getPlaybackSpeed with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getPlaybackSpeedAsync(const ::v1::com::harman::media::BaseType::tAudioObjectType &_type, GetPlaybackSpeedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<MediaSettingProxyBase> delegate_;
};

typedef MediaSettingProxy<> MediaSettingProxyDefault;

namespace MediaSettingExtensions {
    /**
     * description: locale name. A locale name is typically of the form language[_territory], 					
     *    where language is an ISO 639 language code,  					  territory is an ISO 3166
     *   country code
     */
    template <template <typename > class _ExtensionType>
    class LocaleNameAttributeExtension {
     public:
        typedef _ExtensionType<MediaSettingProxyBase::LocaleNameAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<MediaSettingProxyBase::LocaleNameAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        LocaleNameAttributeExtension() {}
    #endif
    
        LocaleNameAttributeExtension(MediaSettingProxyBase& proxy): attributeExtension_(proxy.getLocaleNameAttribute()) {
        }
    
        inline extension_type& getLocaleNameAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: set/get video playback speed, default speed is 1.0
     */
    template <template <typename > class _ExtensionType>
    class VideoPlaybackSpeedAttributeExtension {
     public:
        typedef _ExtensionType<MediaSettingProxyBase::VideoPlaybackSpeedAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<MediaSettingProxyBase::VideoPlaybackSpeedAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VideoPlaybackSpeedAttributeExtension() {}
    #endif
    
        VideoPlaybackSpeedAttributeExtension(MediaSettingProxyBase& proxy): attributeExtension_(proxy.getVideoPlaybackSpeedAttribute()) {
        }
    
        inline extension_type& getVideoPlaybackSpeedAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace MediaSettingExtensions

//
// MediaSettingProxy Implementation
//
template <typename ... _AttributeExtensions>
MediaSettingProxy<_AttributeExtensions...>::MediaSettingProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<MediaSettingProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<MediaSettingProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
MediaSettingProxy<_AttributeExtensions...>::~MediaSettingProxy() {
}

/**
 * description: reset all the setting to the default.  			e: error code.
 */
template <typename ... _AttributeExtensions>
void MediaSettingProxy<_AttributeExtensions...>::resetToFactory(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->resetToFactory(_internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaSettingProxy<_AttributeExtensions...>::resetToFactoryAsync(ResetToFactoryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->resetToFactoryAsync(_callback, _info);
}
/**
 * description: set the default playback speed for one audio type. 			type: the audio object
 *   type. 			speed: playback speed. 			e: error code.
 */
template <typename ... _AttributeExtensions>
void MediaSettingProxy<_AttributeExtensions...>::setPlaybackSpeed(const ::v1::com::harman::media::BaseType::tAudioObjectType &_type, const double &_speed, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info) {
    if (!_type.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->setPlaybackSpeed(_type, _speed, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaSettingProxy<_AttributeExtensions...>::setPlaybackSpeedAsync(const ::v1::com::harman::media::BaseType::tAudioObjectType &_type, const double &_speed, SetPlaybackSpeedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_type.validate()) {
        ::v1::com::harman::media::BaseType::tBaseError e = ::v1::com::harman::media::BaseType::tBaseError::S_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, e);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->setPlaybackSpeedAsync(_type, _speed, _callback, _info);
}
/**
 * description: get the default playback speed for one audio type. 			type: the audio object
 *   type. 			speed: playback speed. 			e: error code.
 */
template <typename ... _AttributeExtensions>
void MediaSettingProxy<_AttributeExtensions...>::getPlaybackSpeed(const ::v1::com::harman::media::BaseType::tAudioObjectType &_type, CommonAPI::CallStatus &_internalCallStatus, double &_speed, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info) {
    if (!_type.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->getPlaybackSpeed(_type, _internalCallStatus, _speed, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaSettingProxy<_AttributeExtensions...>::getPlaybackSpeedAsync(const ::v1::com::harman::media::BaseType::tAudioObjectType &_type, GetPlaybackSpeedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_type.validate()) {
        double speed = 0.0;
        ::v1::com::harman::media::BaseType::tBaseError e = ::v1::com::harman::media::BaseType::tBaseError::S_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, speed, e);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->getPlaybackSpeedAsync(_type, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &MediaSettingProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool MediaSettingProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool MediaSettingProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& MediaSettingProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& MediaSettingProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace media
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v1::com::harman::media::MediaSettingProxy,
    _AttributeExtension> {
    typedef typename ::v1::com::harman::media::MediaSettingProxy<
            ::v1::com::harman::media::MediaSettingExtensions::LocaleNameAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::media::MediaSettingExtensions::VideoPlaybackSpeedAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_MEDIA_Media_Setting_PROXY_HPP_
