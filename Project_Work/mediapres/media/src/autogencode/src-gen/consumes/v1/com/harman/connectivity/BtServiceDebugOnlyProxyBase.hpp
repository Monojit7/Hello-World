/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This class implements Bluetooth debugging related operations     WARNING -
 *   proper care is to be taken  from the consumer of this interface mainly because
 *   of  security concerns attached. 	Proper handling/restrictions is to be done so
 *   that the proxy uses the interface only to debug .  	And the interface
 *   consumption should not be entertained or well controlled in SOP deliveries.
 * author: Poornima Hiremath
 */
#ifndef V1_COM_HARMAN_CONNECTIVITY_Bt_Service_Debug_Only_PROXY_BASE_HPP_
#define V1_COM_HARMAN_CONNECTIVITY_Bt_Service_Debug_Only_PROXY_BASE_HPP_

#include <v1/com/harman/connectivity/BtServiceDebugOnly.hpp>


#include <com/harman/connectivity/btTypedefs.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace connectivity {

class BtServiceDebugOnlyProxyBase
    : virtual public CommonAPI::Proxy {
public:

    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&)> GetLinkKeyAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> SetHCIDebugModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> SetSSPDebugModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> HfpAudioLoopBackTestAsyncCallback;



    /**
     * description: The method used to retrieve the Link Key of a paired device . 	WARNING - 
     *   proper care is to be taken from the caller as this method has security
     *   concerns attached. 	Proper handling is to be done so that the method is called
     *   only to debug and SHOULD NOT be called in SOP deliveries.
     * author: Poornima Hiremath
     */
    virtual void getLinkKey(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_linkKey, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getLinkKeyAsync(const std::string &_inAddress, GetLinkKeyAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method used to enable or disable HCI Debug mode.
     * author: Poornima Hiremath
     */
    virtual void setHCIDebugMode(const bool &_debugMode, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setHCIDebugModeAsync(const bool &_debugMode, SetHCIDebugModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used to enable or disable Secure Simple Pairing debug mode.
     *   	WARNING -  proper care is to be taken from the caller as this method has
     *   security concerns attached. 	Proper handling is to be done so that the method
     *   is called only to debug and SHOULD NOT be called in SOP deliveries.
     * author: Poornima Hiremath
     */
    virtual void setSSPDebugMode(const bool &_debugMode, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setSSPDebugModeAsync(const bool &_debugMode, SetSSPDebugModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used to enable HFP audio loop back testing. 	WARNING -  proper
     *   care is to be taken from the caller as this method has security concerns
     *   attached. 	Proper handling is to be done so that the method is called only to
     *   debug and SHOULD NOT be called in SOP deliveries.
     * author: Poornima Hiremath
     */
    virtual void hfpAudioLoopBackTest(const bool &_loopback_mode, const ::com::harman::connectivity::btTypedefs::eHfpAudioCodec &_loopback_AudioCodec, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> hfpAudioLoopBackTestAsync(const bool &_loopback_mode, const ::com::harman::connectivity::btTypedefs::eHfpAudioCodec &_loopback_AudioCodec, HfpAudioLoopBackTestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace connectivity
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_1 = v1;

#endif // V1_COM_HARMAN_CONNECTIVITY_Bt_Service_Debug_Only_PROXY_BASE_HPP_
