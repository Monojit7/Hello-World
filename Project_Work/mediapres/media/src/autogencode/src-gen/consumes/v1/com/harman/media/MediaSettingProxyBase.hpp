/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_HARMAN_MEDIA_Media_Setting_PROXY_BASE_HPP_
#define V1_COM_HARMAN_MEDIA_Media_Setting_PROXY_BASE_HPP_

#include <v1/com/harman/media/MediaSetting.hpp>


#include <v1/com/harman/media/BaseType.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace media {

class MediaSettingProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableAttribute<std::string> LocaleNameAttribute;
    typedef CommonAPI::ObservableAttribute<double> VideoPlaybackSpeedAttribute;
    typedef CommonAPI::Event<
        ::v1::com::harman::media::BaseType::tAudioObjectType, double
    > PlaybackSpeedChangeEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::media::BaseType::tBaseError&)> ResetToFactoryAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::media::BaseType::tBaseError&)> SetPlaybackSpeedAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const double&, const ::v1::com::harman::media::BaseType::tBaseError&)> GetPlaybackSpeedAsyncCallback;

    /**
     * description: locale name. A locale name is typically of the form language[_territory], 					
     *    where language is an ISO 639 language code,  					  territory is an ISO 3166
     *   country code
     */
    virtual LocaleNameAttribute& getLocaleNameAttribute() = 0;
    /**
     * description: set/get video playback speed, default speed is 1.0
     */
    virtual VideoPlaybackSpeedAttribute& getVideoPlaybackSpeedAttribute() = 0;

    /**
     * description: Emit an event to notify HMI audiobook/podcast playback speed change 		type: the
     *   audio object type. 		speed: playback speed.
     */
    virtual PlaybackSpeedChangeEvent& getPlaybackSpeedChangeEvent() = 0;

    /**
     * description: reset all the setting to the default.  			e: error code.
     */
    virtual void resetToFactory(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> resetToFactoryAsync(ResetToFactoryAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: set the default playback speed for one audio type. 			type: the audio object
     *   type. 			speed: playback speed. 			e: error code.
     */
    virtual void setPlaybackSpeed(const ::v1::com::harman::media::BaseType::tAudioObjectType &_type, const double &_speed, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setPlaybackSpeedAsync(const ::v1::com::harman::media::BaseType::tAudioObjectType &_type, const double &_speed, SetPlaybackSpeedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: get the default playback speed for one audio type. 			type: the audio object
     *   type. 			speed: playback speed. 			e: error code.
     */
    virtual void getPlaybackSpeed(const ::v1::com::harman::media::BaseType::tAudioObjectType &_type, CommonAPI::CallStatus &_internalCallStatus, double &_speed, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getPlaybackSpeedAsync(const ::v1::com::harman::media::BaseType::tAudioObjectType &_type, GetPlaybackSpeedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace media
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_MEDIA_Media_Setting_PROXY_BASE_HPP_
