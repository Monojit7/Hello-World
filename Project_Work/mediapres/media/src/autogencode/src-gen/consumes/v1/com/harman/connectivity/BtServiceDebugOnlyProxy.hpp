/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This class implements Bluetooth debugging related operations     WARNING -
 *   proper care is to be taken  from the consumer of this interface mainly because
 *   of  security concerns attached. 	Proper handling/restrictions is to be done so
 *   that the proxy uses the interface only to debug .  	And the interface
 *   consumption should not be entertained or well controlled in SOP deliveries.
 * author: Poornima Hiremath
 */
#ifndef V1_COM_HARMAN_CONNECTIVITY_Bt_Service_Debug_Only_PROXY_HPP_
#define V1_COM_HARMAN_CONNECTIVITY_Bt_Service_Debug_Only_PROXY_HPP_

#include <v1/com/harman/connectivity/BtServiceDebugOnlyProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace connectivity {

template <typename ... _AttributeExtensions>
class BtServiceDebugOnlyProxy
    : virtual public BtServiceDebugOnly, 
      virtual public BtServiceDebugOnlyProxyBase,
      virtual public _AttributeExtensions... {
public:
    BtServiceDebugOnlyProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~BtServiceDebugOnlyProxy();

    typedef BtServiceDebugOnly InterfaceType;




    /**
     * description: The method used to retrieve the Link Key of a paired device . 	WARNING - 
     *   proper care is to be taken from the caller as this method has security
     *   concerns attached. 	Proper handling is to be done so that the method is called
     *   only to debug and SHOULD NOT be called in SOP deliveries.
     * author: Poornima Hiremath
     * Calls getLinkKey with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getLinkKey(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_linkKey, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getLinkKey with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getLinkKeyAsync(const std::string &_inAddress, GetLinkKeyAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: The method used to enable or disable HCI Debug mode.
     * author: Poornima Hiremath
     * Calls setHCIDebugMode with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setHCIDebugMode(const bool &_debugMode, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setHCIDebugMode with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setHCIDebugModeAsync(const bool &_debugMode, SetHCIDebugModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: The method is used to enable or disable Secure Simple Pairing debug mode.
     *   	WARNING -  proper care is to be taken from the caller as this method has
     *   security concerns attached. 	Proper handling is to be done so that the method
     *   is called only to debug and SHOULD NOT be called in SOP deliveries.
     * author: Poornima Hiremath
     * Calls setSSPDebugMode with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setSSPDebugMode(const bool &_debugMode, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setSSPDebugMode with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setSSPDebugModeAsync(const bool &_debugMode, SetSSPDebugModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: The method is used to enable HFP audio loop back testing. 	WARNING -  proper
     *   care is to be taken from the caller as this method has security concerns
     *   attached. 	Proper handling is to be done so that the method is called only to
     *   debug and SHOULD NOT be called in SOP deliveries.
     * author: Poornima Hiremath
     * Calls hfpAudioLoopBackTest with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void hfpAudioLoopBackTest(const bool &_loopback_mode, const ::com::harman::connectivity::btTypedefs::eHfpAudioCodec &_loopback_AudioCodec, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls hfpAudioLoopBackTest with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> hfpAudioLoopBackTestAsync(const bool &_loopback_mode, const ::com::harman::connectivity::btTypedefs::eHfpAudioCodec &_loopback_AudioCodec, HfpAudioLoopBackTestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<BtServiceDebugOnlyProxyBase> delegate_;
};

typedef BtServiceDebugOnlyProxy<> BtServiceDebugOnlyProxyDefault;


//
// BtServiceDebugOnlyProxy Implementation
//
template <typename ... _AttributeExtensions>
BtServiceDebugOnlyProxy<_AttributeExtensions...>::BtServiceDebugOnlyProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<BtServiceDebugOnlyProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<BtServiceDebugOnlyProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
BtServiceDebugOnlyProxy<_AttributeExtensions...>::~BtServiceDebugOnlyProxy() {
}

/**
 * description: The method used to retrieve the Link Key of a paired device . 	WARNING - 
 *   proper care is to be taken from the caller as this method has security
 *   concerns attached. 	Proper handling is to be done so that the method is called
 *   only to debug and SHOULD NOT be called in SOP deliveries.
 * author: Poornima Hiremath
 */
template <typename ... _AttributeExtensions>
void BtServiceDebugOnlyProxy<_AttributeExtensions...>::getLinkKey(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_linkKey, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
    delegate_->getLinkKey(_inAddress, _internalCallStatus, _outAddress, _linkKey, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BtServiceDebugOnlyProxy<_AttributeExtensions...>::getLinkKeyAsync(const std::string &_inAddress, GetLinkKeyAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getLinkKeyAsync(_inAddress, _callback, _info);
}
/**
 * description: The method used to enable or disable HCI Debug mode.
 * author: Poornima Hiremath
 */
template <typename ... _AttributeExtensions>
void BtServiceDebugOnlyProxy<_AttributeExtensions...>::setHCIDebugMode(const bool &_debugMode, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
    delegate_->setHCIDebugMode(_debugMode, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BtServiceDebugOnlyProxy<_AttributeExtensions...>::setHCIDebugModeAsync(const bool &_debugMode, SetHCIDebugModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setHCIDebugModeAsync(_debugMode, _callback, _info);
}
/**
 * description: The method is used to enable or disable Secure Simple Pairing debug mode.
 *   	WARNING -  proper care is to be taken from the caller as this method has
 *   security concerns attached. 	Proper handling is to be done so that the method
 *   is called only to debug and SHOULD NOT be called in SOP deliveries.
 * author: Poornima Hiremath
 */
template <typename ... _AttributeExtensions>
void BtServiceDebugOnlyProxy<_AttributeExtensions...>::setSSPDebugMode(const bool &_debugMode, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
    delegate_->setSSPDebugMode(_debugMode, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BtServiceDebugOnlyProxy<_AttributeExtensions...>::setSSPDebugModeAsync(const bool &_debugMode, SetSSPDebugModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setSSPDebugModeAsync(_debugMode, _callback, _info);
}
/**
 * description: The method is used to enable HFP audio loop back testing. 	WARNING -  proper
 *   care is to be taken from the caller as this method has security concerns
 *   attached. 	Proper handling is to be done so that the method is called only to
 *   debug and SHOULD NOT be called in SOP deliveries.
 * author: Poornima Hiremath
 */
template <typename ... _AttributeExtensions>
void BtServiceDebugOnlyProxy<_AttributeExtensions...>::hfpAudioLoopBackTest(const bool &_loopback_mode, const ::com::harman::connectivity::btTypedefs::eHfpAudioCodec &_loopback_AudioCodec, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
    if (!_loopback_AudioCodec.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->hfpAudioLoopBackTest(_loopback_mode, _loopback_AudioCodec, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BtServiceDebugOnlyProxy<_AttributeExtensions...>::hfpAudioLoopBackTestAsync(const bool &_loopback_mode, const ::com::harman::connectivity::btTypedefs::eHfpAudioCodec &_loopback_AudioCodec, HfpAudioLoopBackTestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_loopback_AudioCodec.validate()) {
        int32_t errorCode = 0;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, errorCode);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->hfpAudioLoopBackTestAsync(_loopback_mode, _loopback_AudioCodec, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &BtServiceDebugOnlyProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool BtServiceDebugOnlyProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool BtServiceDebugOnlyProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& BtServiceDebugOnlyProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& BtServiceDebugOnlyProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace connectivity
} // namespace harman
} // namespace com
} // namespace v1



// Compatibility
namespace v1_1 = v1;

#endif // V1_COM_HARMAN_CONNECTIVITY_Bt_Service_Debug_Only_PROXY_HPP_
