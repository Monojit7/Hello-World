/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V2_COM_HARMAN_BTPRES_Connection_Manager_PROXY_BASE_HPP_
#define V2_COM_HARMAN_BTPRES_Connection_Manager_PROXY_BASE_HPP_

#include <v2/com/harman/btpres/ConnectionManager.hpp>


#include <v4/com/harman/btpres/BTPresTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Variant.hpp>
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v2 {
namespace com {
namespace harman {
namespace btpres {

class ConnectionManagerProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<::v4::com::harman::btpres::BTPresTypes::eBluetoothStatus> BtStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<std::string> LocalDevAddrAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<std::string> LocalDevNameAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<std::string> PassKeyPinAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> DeviceSearchStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> DiscoverableStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<uint16_t> DiscoveryTimeoutAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v4::com::harman::btpres::BTPresTypes::tDeviceSearchEntryList> DevSearchResultsAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v4::com::harman::btpres::BTPresTypes::bondedDevList> DevListAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v4::com::harman::btpres::BTPresTypes::bondedDevList> ConnectedDevListAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v4::com::harman::btpres::BTPresTypes::networkIfStatus> NetIfStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v4::com::harman::btpres::BTPresTypes::unstableDeviceInfoList> UnstableDevsAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<std::string> PrimaryDeviceAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v4::com::harman::btpres::BTPresTypes::dontDisturbDeviceInfo> DnDStatusAttribute;
    typedef CommonAPI::ObservableAttribute<bool> EmargencyAssistanceAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v4::com::harman::btpres::BTPresTypes::extendedDnd> DndInfoAttribute;
    typedef CommonAPI::Event<
        std::string, std::string, ::v4::com::harman::btpres::BTPresTypes::eBondingType, std::string
    > BondingRequestEvent;
    typedef CommonAPI::Event<
        std::string, std::string, ::v4::com::harman::btpres::BTPresTypes::eSupportedProfile
    > ServiceConnectionRequestEvent;
    typedef CommonAPI::Event<
        std::string, std::string, ::v4::com::harman::btpres::BTPresTypes::eSupportedProfile, ::v4::com::harman::btpres::BTPresTypes::eConnectionStatus, ::v4::com::harman::btpres::BTPresTypes::eServiceConnectDisconnectReason
    > ServiceConnectionStatusEvent;
    typedef CommonAPI::Event<
        std::string, std::string, ::v4::com::harman::btpres::BTPresTypes::eDeviceDeletedReason
    > DeviceDeletedEvent;
    typedef CommonAPI::Event<
        ::v4::com::harman::btpres::BTPresTypes::deviceInfo
    > ReconnectionFailedEvent;
    typedef CommonAPI::Event<
        std::string, std::string, ::v4::com::harman::btpres::BTPresTypes::ePairingStatus
    > BondingStatusEvent;
    typedef CommonAPI::Event<
        ::v4::com::harman::btpres::BTPresTypes::uToneID, bool
    > TonePlayStateEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> StartDeviceSearchAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> StopDeviceSearchAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> BondingReplyAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> DeleteDeviceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> DeleteAllDevicesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> StartServiceConnectionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> AllowServiceConnectionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> StartServiceDisconnectionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> ServiceConnectionReplyAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> StartReconnectAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&, const ::v4::com::harman::btpres::BTPresTypes::deviceInfo&)> GetOldestConnectedDevAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> RenameBondedDeviceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> RenameLocalDeviceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> SetBluetoothStatusAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> SetDiscoverableModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> SetPinAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> SetPrimaryDeviceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&, const std::string&, const ::v4::com::harman::btpres::BTPresTypes::eSettingsProperty&, const ::v4::com::harman::btpres::BTPresTypes::settingsValues&)> PhoneSettingsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> DontDisturbAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> DontDisturbExtendedAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> SetFavoriteDeviceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> PlayAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> StopAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&, const ::v4::com::harman::btpres::BTPresTypes::deviceDetails&)> GetBondedDeviceDetailsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::eErrorType&)> FactoryResetAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::com::harman::btpres::BTPresTypes::radioStrengthInfoList&)> GetRadioStrengthAsyncCallback;

    /**
     * description: It will reflect the current bluetooth status to registered clients
     */
    virtual BtStateAttribute& getBtStateAttribute() = 0;
    /**
     * description: It will reflect local device address to registered clients
     */
    virtual LocalDevAddrAttribute& getLocalDevAddrAttribute() = 0;
    /**
     * description: It will reflect local device name to registered clients
     */
    virtual LocalDevNameAttribute& getLocalDevNameAttribute() = 0;
    /**
     * description: It will broadcast stored pass key to registered clients
     */
    virtual PassKeyPinAttribute& getPassKeyPinAttribute() = 0;
    /**
     * description: It will broadcast device search status to registered client
     */
    virtual DeviceSearchStatusAttribute& getDeviceSearchStatusAttribute() = 0;
    /**
     * description: It will broadcast discoverability status to registered clients
     */
    virtual DiscoverableStatusAttribute& getDiscoverableStatusAttribute() = 0;
    /**
     * description: It will broadcast discoverability timeout to registered clients
     */
    virtual DiscoveryTimeoutAttribute& getDiscoveryTimeoutAttribute() = 0;
    /**
     * description: It will broadcast device search results to registered clients
     */
    virtual DevSearchResultsAttribute& getDevSearchResultsAttribute() = 0;
    /**
     * description: It will broadcast bonded device list to registered clients
     */
    virtual DevListAttribute& getDevListAttribute() = 0;
    /**
     * description: It will broadcast connected device list to registered clients.     This is a
     *   subset of bonded device list
     */
    virtual ConnectedDevListAttribute& getConnectedDevListAttribute() = 0;
    /**
     * description: It will broadcast network status to registered clients
     */
    virtual NetIfStatusAttribute& getNetIfStatusAttribute() = 0;
    /**
     * description: It will broadcast unstable device info to registered clients
     */
    virtual UnstableDevsAttribute& getUnstableDevsAttribute() = 0;
    /**
     * description: It will broadcast primary device address
     */
    virtual PrimaryDeviceAttribute& getPrimaryDeviceAttribute() = 0;
    /**
     * description: It will broadcast dont disturb status of the device           This will be
     *   deprecated once all clients move to extendedDnd attribute
     */
    virtual DnDStatusAttribute& getDnDStatusAttribute() = 0;
    /**
     * description: This attribute will be used to enable emergencyAssistance Mode in BtPres.    
     *   If BT is OFF and emargencyAssistance set to true , BT will be automatically
     *   turned ON.     Autoconnect will not be triggered     If this is set to true
     *   all ongoing call will be cancelled. Only newly initiated call from the HU will
     *   be allowed
     */
    virtual EmargencyAssistanceAttribute& getEmargencyAssistanceAttribute() = 0;
    /**
     * description: This attribute will be used to get different type of DND         It can be used
     *   for HU specific DND/ Phone Specific DND / Disabling audio handling of BTPRES
     */
    virtual DndInfoAttribute& getDndInfoAttribute() = 0;

    /**
     * description: It will broadcast standard bonding Request to registered clients
     * param: outAddress (string)     : Bt address of phone
     * param: deviceName (string)     : Device name
     * param: type (eBondingType)     : Bonding type
     * param: pin (string) : pass key pin
     */
    virtual BondingRequestEvent& getBondingRequestEvent() = 0;
    /**
     * description: It will broadcast service connection request to registered clients
     * param: outAddress (string)         : Bt address of phone
     * param: name (string)               : Device name
     * param: service (eSupportedProfile) : supported profile list
     */
    virtual ServiceConnectionRequestEvent& getServiceConnectionRequestEvent() = 0;
    /**
     * description: It will broadcast service connection status signal to registered clients
     * param: outAddress (string)         : Bt address of phone
     * param: name (string)               : Device name
     * param: service (eSupportedProfile) : supported profile list
     * param: status (eConnectionStatus)  : Connected or disconnected status
     * param: reason (eServiceConnectDisconnectReason) : reason for connection or
     *   disconnection
     */
    virtual ServiceConnectionStatusEvent& getServiceConnectionStatusEvent() = 0;
    /**
     * description: This signal is sent when device has been deleted from Head Unit to registered
     *   clients
     * param: outAddress (string)     : Bt address of phone
     * param: deviceName (string )    : device name
     * param: deviceDeleted (eDeviceDeletedReason): Reason for device deletion i.e. deletion
     *   due to missing key OR deletion due to USER action.
     */
    virtual DeviceDeletedEvent& getDeviceDeletedEvent() = 0;
    /**
     * description: This signal is sent when device has been deleted from Head Unit to registered
     *   clients
     * param: device : detail of the device for which reconnection failed
     */
    virtual ReconnectionFailedEvent& getReconnectionFailedEvent() = 0;
    /**
     * description: This signal is used to update the pairing status to registered clients
     * param: outAddress (string)         : Bt address of phone
     * param: deviceName (string)         : device name
     * param: pairStatus (ePairingStatus) : Pairing status i.e. successful Or failure
     */
    virtual BondingStatusEvent& getBondingStatusEvent() = 0;
    /**
     * description: This signal is used to update the play state of Alert or Ringtone
     * param: uToneID (union)         : Alert OR Ringtone ID which
     * param: playState (boolean)     : True for playing state and false for idle state
     */
    virtual TonePlayStateEvent& getTonePlayStateEvent() = 0;

    /**
     * description: Used to start device search on head unit
     * param: maxDevice (UInt32)       : max limit for found devices
     * param: timeout (UInt32)         : time limit for device search operation         
     *   returns: errorCode (eErrorType) : error code
     */
    virtual void startDeviceSearch(const uint32_t &_maxDevice, const uint32_t &_timeout, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startDeviceSearchAsync(const uint32_t &_maxDevice, const uint32_t &_timeout, StartDeviceSearchAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Used to stop device search on head unit
     * param: none          returns: error code (eErrorType) : error code
     */
    virtual void stopDeviceSearch(CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> stopDeviceSearchAsync(StopDeviceSearchAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Used to send secure Bonding reply
     * param: inAddress (string)       : phone BT address
     * param: accept (boolean)         : accepting authentication request
     * param: trusted (boolean)        : making device trusted means service won't send
     *   connection request for each connect attempt
     * param: type (eBondingType)      : Bonding type, standard or secure bonding         
     *   returns: errorCode (eErrorType) : error code
     */
    virtual void bondingReply(const std::string &_inAddress, const bool &_accept, const bool &_trusted, const ::v4::com::harman::btpres::BTPresTypes::eBondingType &_type, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> bondingReplyAsync(const std::string &_inAddress, const bool &_accept, const bool &_trusted, const ::v4::com::harman::btpres::BTPresTypes::eBondingType &_type, BondingReplyAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Used to delete device from paired device list
     * param: inAddress (string)      : phone BT address          returns: errorCode
     *   (eErrorType): error code
     */
    virtual void deleteDevice(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> deleteDeviceAsync(const std::string &_inAddress, DeleteDeviceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Used to delete all device in paired device list
     * param: none          returns: errorCode (eErrorType) : error code
     */
    virtual void deleteAllDevices(CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> deleteAllDevicesAsync(DeleteAllDevicesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Used to initate profile connection with device         version 1.0
     * param: inAddress (string)       : phone BT address
     * param: service (eSupportedProfile) : profile name
     * param: instanceName (string)    : containing the phone instance
     * param: replaceAddr (string)     : containing the replacement address for which the
     *   connection will be replaced          returns: errorCode (eErrorType) : error
     *   code
     */
    virtual void startServiceConnection(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const std::string &_instanceName, const std::string &_replaceAddr, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startServiceConnectionAsync(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const std::string &_instanceName, const std::string &_replaceAddr, StartServiceConnectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Used to initate multiple profile connection with device         version 2.0
     * param: inAddress (string)                       : phone BT address
     * param: ProfileList (arSupportedProfile)         : profile name list
     * param: replaceAddr (string)                     : containing the replacement address
     *   for which the connection will be replaced          returns: errorCode
     *   (eErrorType) : error code
     */
    virtual void startServiceConnection(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::arSupportedProfile &_ProfileList, const std::string &_replaceAddr, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startServiceConnectionAsync(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::arSupportedProfile &_ProfileList, const std::string &_replaceAddr, StartServiceConnectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Used to allows the existance of the service connection to this device and
     *   service.
     * param: inAddress (string)           : phone BT address
     * param: service (eSupportedProfile)  : profile name
     * param: allow (Boolean)              : containing the value true for allow, or false
     *   for reject          returns: errorCode (eErrorType)      : error code
     */
    virtual void allowServiceConnection(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const bool &_allow, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> allowServiceConnectionAsync(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const bool &_allow, AllowServiceConnectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Used to initate the disconnection with connected service i.e. HFP and A2DP
     * param: inAddress (string)                  : phone BT address
     * param: service (eSupportedProfile)         : profile name          returns: errorCode
     *   error code (eErrorType)  : error code
     */
    virtual void startServiceDisconnection(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startServiceDisconnectionAsync(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, StartServiceDisconnectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Used to initate the disconnection with connected service i.e. HFP and A2DP
     * param: inAddress (string)                  : phone BT address
     * param: ProfileList (arSupportedProfile)         : profile name list          returns:
     *   errorCode error code (eErrorType)  : error code
     */
    virtual void startServiceDisconnection(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::arSupportedProfile &_ProfileList, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startServiceDisconnectionAsync(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::arSupportedProfile &_ProfileList, StartServiceDisconnectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method should be called by clients in order to reply to the incoming
     *   service                         connection request from a remote device as
     *   indicated by the signal 'serviceConnectionRequest'.                        
     *   The reply can be to accept or reject incoming service connection request.
     * param: inAddress (string)              : phone BT address
     * param: service (eSupportedProfile)     : profile name
     * param: accept (boolean)                : containing the value true for allow, or false
     *   for reject
     * param: instanceName (string)           : containing the instance name of the device   
     *         returns: errorCode (eErrorType)         : error code
     */
    virtual void serviceConnectionReply(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const bool &_accept, const std::string &_instanceName, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> serviceConnectionReplyAsync(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const bool &_accept, const std::string &_instanceName, ServiceConnectionReplyAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Used to initiate the reconnection to previously connected device
     * param: None          returns: errorCode error code (eErrorType) : error code
     */
    virtual void startReconnect(CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startReconnectAsync(StartReconnectAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method should be called to get oldest connected device
     * param: None          returns: oldestDevInfo (oldestDevInfo)     : Oldest device name
     *   and address         returns: errorCode error code (eErrorType) : error code
     */
    virtual void getOldestConnectedDev(CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, ::v4::com::harman::btpres::BTPresTypes::deviceInfo &_oldestDevInfo, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getOldestConnectedDevAsync(GetOldestConnectedDevAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method used to change name of bonded device.
     * param: inAddress  (string)     : contains the BD address.
     * param: name (string)           : Device name          returns: errorCode(eErrorType) 
     *   : error code
     */
    virtual void renameBondedDevice(const std::string &_inAddress, const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> renameBondedDeviceAsync(const std::string &_inAddress, const std::string &_name, RenameBondedDeviceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method used to change local name of head unit.
     * param: name (string)           : Device name          returns: errorCode(eErrorType) 
     *   : error code
     */
    virtual void renameLocalDevice(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> renameLocalDeviceAsync(const std::string &_name, RenameLocalDeviceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Used to set bluetooth on or off
     * param: status (boolean)       : set true or false          returns: error
     *   code(eErrorType) : error code
     */
    virtual void setBluetoothStatus(const bool &_status, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setBluetoothStatusAsync(const bool &_status, SetBluetoothStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Used to enable or disable discoverable mode
     * param: enabled (boolean)       : set true or false          returns: errorCode
     *   (eErrorType) : error code
     */
    virtual void setDiscoverableMode(const bool &_enabled, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setDiscoverableModeAsync(const bool &_enabled, SetDiscoverableModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method used to pin information for head unit.
     * param: passkey (string)          : set the default pin for legacy devices         
     *   returns:  error code (eErrorType) : error code
     */
    virtual void setPin(const std::string &_passkey, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setPinAsync(const std::string &_passkey, SetPinAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: It will set a device as primary
     * param: inAddress  (string)     : contains the BD address.          returns:  error
     *   code (eErrorType) : error code
     */
    virtual void setPrimaryDevice(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setPrimaryDeviceAsync(const std::string &_inAddress, SetPrimaryDeviceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This API is used for set and get phone specific properties like PhoneBook    
     *   Auto Download is enabled or disables, set specific ringtone, call volume etc.
     *   These property values     will to set for all the paired phones.
     * param: inAddress  (string)     : contains the BD address.
     * param: type (eSettingsOperation) : Operations like GET or SET
     * param: setProperty (eSettingsProperty) : Property like PhoneBook AutoDowload, sorting
     *   order etc
     * param: setValue (settingsValues) : value of the selected property          returns: 
     *   error code (eErrorType) : error code         returns: outAddress  (string)    
     *   : contains the BD address.         returns: getProperty (eSettingsProperty) :
     *   Property like PhoneBook AutoDowload, sorting order etc         returns:
     *   getValue (settingsValues) : value of the selected property
     */
    virtual void PhoneSettings(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::eSettingsOperation &_type, const ::v4::com::harman::btpres::BTPresTypes::eSettingsProperty &_setProperty, const ::v4::com::harman::btpres::BTPresTypes::settingsValues &_setValue, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, std::string &_outAddress, ::v4::com::harman::btpres::BTPresTypes::eSettingsProperty &_getProperty, ::v4::com::harman::btpres::BTPresTypes::settingsValues &_getValue, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> PhoneSettingsAsync(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::eSettingsOperation &_type, const ::v4::com::harman::btpres::BTPresTypes::eSettingsProperty &_setProperty, const ::v4::com::harman::btpres::BTPresTypes::settingsValues &_setValue, PhoneSettingsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This API is used to enable or disable Do Not Disturb for a specific device.    
     *   When this is enabled incoming call to that device will be rejected and also
     *   SMS notification     alerts will be disabled.
     * param: device  (dontDisturbDeviceInfo) : contains the BD address and DnD status to be
     *   set.          returns:  error code (eErrorType)       : error code            
     *        This API will be deprecated once all client move to DontDisturbExtended
     *   API
     */
    virtual void DontDisturb(const ::v4::com::harman::btpres::BTPresTypes::dontDisturbDeviceInfo &_device, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> DontDisturbAsync(const ::v4::com::harman::btpres::BTPresTypes::dontDisturbDeviceInfo &_device, DontDisturbAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This API is used to enable or disable Do Not Disturb.      This method should
     *   be called with eDndType , which contains different type of dnd .      when
     *   clients wants to enable phone specific dnd then dnd type should be DND_PHONE  
     *      Whne clents wants to enable dnd for somplete HU then dnd type should be
     *   DND_HU      Whne clents wants to disable audio handling for the BTPRES then
     *   dnd type should be DND_DISABLE_AUDIO.
     * param: device  (extendedDnd) : different type of DND mode       returns:  error code
     *   (eErrorType)       : error code
     */
    virtual void DontDisturbExtended(const ::v4::com::harman::btpres::BTPresTypes::extendedDnd &_dndMode, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> DontDisturbExtendedAsync(const ::v4::com::harman::btpres::BTPresTypes::extendedDnd &_dndMode, DontDisturbExtendedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This will update the position of the device in devList(Bonded Device List)
     *   attribute.For example     device with index 1 will be at top of the devList.
     * param: address  (string)   : Address of the device
     * param: index  (UInt16)     : New index(position) for the device          returns: 
     *   error code (eErrorType) : error code
     */
    virtual void SetFavoriteDevice(const std::string &_address, const uint16_t &_index, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetFavoriteDeviceAsync(const std::string &_address, const uint16_t &_index, SetFavoriteDeviceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This will be used to play the HU ringtone
     * param: toneID    : Tone ID which HMI want to play          returns:  error code
     *   (eErrorType) : error code
     */
    virtual void play(const ::v4::com::harman::btpres::BTPresTypes::uToneID &_toneID, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> playAsync(const ::v4::com::harman::btpres::BTPresTypes::uToneID &_toneID, PlayAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This will be used to stop the HU ringtone playback started by previous method
     * param: toneID    : Tone ID which is currently playing          returns:  error code
     *   (eErrorType) : error code
     */
    virtual void stop(const ::v4::com::harman::btpres::BTPresTypes::uToneID &_ringID, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> stopAsync(const ::v4::com::harman::btpres::BTPresTypes::uToneID &_ringID, StopAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This can be used by the clients to get bonded device details like manufacturer,
     *   model,                       software version, profileinfo etc.
     * param: address  (string)   : Address of the device          returns:  error code
     *   (eErrorType) : error code         returns:  device (deviceDetails) : This
     *   contains details like BD Address, Name,                   manufacturer, model,
     *   software version, profileinfo etc.
     */
    virtual void getBondedDeviceDetails(const std::string &_address, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, ::v4::com::harman::btpres::BTPresTypes::deviceDetails &_device, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getBondedDeviceDetailsAsync(const std::string &_address, GetBondedDeviceDetailsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This will be used to reset profile / profiles to default value.
     * param: type (factroyResetType)	: Type of reset can be user or system level            
     *                                 USER: Should set current user settings to
     *   default value                                           SYSTEM: Should set all
     *   profiles settings to default value          returns:  error code (eErrorType)
     *   : error code
     */
    virtual void factoryReset(const ::v4::com::harman::btpres::BTPresTypes::factroyResetType &_type, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> factoryResetAsync(const ::v4::com::harman::btpres::BTPresTypes::factroyResetType &_type, FactoryResetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This will be used to get the radio strength of Bluetooth device connected to HU.
     */
    virtual void getRadioStrength(CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::radioStrengthInfoList &_radioStrengthList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getRadioStrengthAsync(GetRadioStrengthAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace btpres
} // namespace harman
} // namespace com
} // namespace v2


// Compatibility
namespace v2_0 = v2;

#endif // V2_COM_HARMAN_BTPRES_Connection_Manager_PROXY_BASE_HPP_
