/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_ORG_HARMAN_FORD_bodycontroldata_types_HPP_
#define V0_ORG_HARMAN_FORD_bodycontroldata_types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

struct bodycontroldata_types {
    
    struct VehYaw_W_Actl_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Faulty = 65535,
            En_NoDataExists = 65534
        };
        
        VehYaw_W_Actl_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Faulty)) {}
        VehYaw_W_Actl_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Faulty):
                case static_cast<int32_t>(Literal::En_NoDataExists):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VehYaw_W_Actl_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VehYaw_W_Actl_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VehYaw_W_Actl_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VehYaw_W_Actl_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VehYaw_W_Actl_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VehYaw_W_Actl_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VehYaw_W_Actl_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        VehYaw_W_Actl_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        VehYaw_W_Actl_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VehYaw_W_Actl_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VehYaw_W_Actl_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VehYaw_W_Actl_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VehYaw_W_Actl_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VehYaw_W_Actl_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VehYaw_W_Actl_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct GWM_Send_Signals_7_HS3_sig_5_struct : CommonAPI::Struct<VehYaw_W_Actl_enum, VehYaw_W_Actl_UB_enum> {
    	
    	GWM_Send_Signals_7_HS3_sig_5_struct() {
    	}
    	GWM_Send_Signals_7_HS3_sig_5_struct(const VehYaw_W_Actl_enum &_vehYaw_W_Actl_enum, const VehYaw_W_Actl_UB_enum &_vehYaw_W_Actl_UB_enum)
    	{
    		std::get<0>(values_) = _vehYaw_W_Actl_enum;
    		std::get<1>(values_) = _vehYaw_W_Actl_UB_enum;
    	}
    	inline const VehYaw_W_Actl_enum &getVehYaw_W_Actl_enum() const { return std::get<0>(values_); }
    	inline void setVehYaw_W_Actl_enum(const VehYaw_W_Actl_enum &_value) { std::get<0>(values_) = _value; }
    	inline const VehYaw_W_Actl_UB_enum &getVehYaw_W_Actl_UB_enum() const { return std::get<1>(values_); }
    	inline void setVehYaw_W_Actl_UB_enum(const VehYaw_W_Actl_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const GWM_Send_Signals_7_HS3_sig_5_struct& _other) const {
                return (getVehYaw_W_Actl_enum() == _other.getVehYaw_W_Actl_enum() && getVehYaw_W_Actl_UB_enum() == _other.getVehYaw_W_Actl_UB_enum());
        }
    	inline bool operator!=(const GWM_Send_Signals_7_HS3_sig_5_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct EngExhMdeQuiet_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Faulty = 3,
            En_QuietExhaust = 2,
            En_LoudExhaust = 1,
            En_Null = 0
        };
        
        EngExhMdeQuiet_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Faulty)) {}
        EngExhMdeQuiet_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Faulty):
                case static_cast<int32_t>(Literal::En_QuietExhaust):
                case static_cast<int32_t>(Literal::En_LoudExhaust):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EngExhMdeQuiet_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EngExhMdeQuiet_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EngExhMdeQuiet_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EngExhMdeQuiet_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EngExhMdeQuiet_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EngExhMdeQuiet_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct StabCtlBrkActv_B_Actl_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Yes = 1,
            En_No = 0
        };
        
        StabCtlBrkActv_B_Actl_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Yes)) {}
        StabCtlBrkActv_B_Actl_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Yes):
                case static_cast<int32_t>(Literal::En_No):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const StabCtlBrkActv_B_Actl_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const StabCtlBrkActv_B_Actl_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const StabCtlBrkActv_B_Actl_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const StabCtlBrkActv_B_Actl_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const StabCtlBrkActv_B_Actl_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const StabCtlBrkActv_B_Actl_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct BrkTot_Tq_RqArb_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 8191,
            En_Unknown = 8190
        };
        
        BrkTot_Tq_RqArb_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        BrkTot_Tq_RqArb_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_Unknown):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const BrkTot_Tq_RqArb_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const BrkTot_Tq_RqArb_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const BrkTot_Tq_RqArb_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const BrkTot_Tq_RqArb_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const BrkTot_Tq_RqArb_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const BrkTot_Tq_RqArb_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct BrkTot_Tq_RqArb_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        BrkTot_Tq_RqArb_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        BrkTot_Tq_RqArb_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const BrkTot_Tq_RqArb_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const BrkTot_Tq_RqArb_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const BrkTot_Tq_RqArb_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const BrkTot_Tq_RqArb_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const BrkTot_Tq_RqArb_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const BrkTot_Tq_RqArb_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct GWM_Send_Signals_4_sig_0_struct : CommonAPI::Struct<BrkTot_Tq_RqArb_enum, BrkTot_Tq_RqArb_UB_enum> {
    	
    	GWM_Send_Signals_4_sig_0_struct() {
    	}
    	GWM_Send_Signals_4_sig_0_struct(const BrkTot_Tq_RqArb_enum &_brkTot_Tq_RqArb_enum, const BrkTot_Tq_RqArb_UB_enum &_brkTot_Tq_RqArb_UB_enum)
    	{
    		std::get<0>(values_) = _brkTot_Tq_RqArb_enum;
    		std::get<1>(values_) = _brkTot_Tq_RqArb_UB_enum;
    	}
    	inline const BrkTot_Tq_RqArb_enum &getBrkTot_Tq_RqArb_enum() const { return std::get<0>(values_); }
    	inline void setBrkTot_Tq_RqArb_enum(const BrkTot_Tq_RqArb_enum &_value) { std::get<0>(values_) = _value; }
    	inline const BrkTot_Tq_RqArb_UB_enum &getBrkTot_Tq_RqArb_UB_enum() const { return std::get<1>(values_); }
    	inline void setBrkTot_Tq_RqArb_UB_enum(const BrkTot_Tq_RqArb_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const GWM_Send_Signals_4_sig_0_struct& _other) const {
                return (getBrkTot_Tq_RqArb_enum() == _other.getBrkTot_Tq_RqArb_enum() && getBrkTot_Tq_RqArb_UB_enum() == _other.getBrkTot_Tq_RqArb_UB_enum());
        }
    	inline bool operator!=(const GWM_Send_Signals_4_sig_0_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct Veh_Lock_Status_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_UNLOCK_DRV = 3,
            En_UNLOCK_ALL = 2,
            En_LOCK_ALL = 1,
            En_LOCK_DBL = 0
        };
        
        Veh_Lock_Status_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_UNLOCK_DRV)) {}
        Veh_Lock_Status_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_UNLOCK_DRV):
                case static_cast<int32_t>(Literal::En_UNLOCK_ALL):
                case static_cast<int32_t>(Literal::En_LOCK_ALL):
                case static_cast<int32_t>(Literal::En_LOCK_DBL):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Veh_Lock_Status_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Veh_Lock_Status_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Veh_Lock_Status_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Veh_Lock_Status_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Veh_Lock_Status_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Veh_Lock_Status_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct GearLvrPos_D_Actl_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 15,
            En_Unknown_Position = 14,
            En_Undefined_Treat_as_Fault1 = 13,
            En_Undefined_Treat_as_Fault = 12,
            En_sixth = 11,
            En_fifth = 10,
            En_fourth = 9,
            En_third = 8,
            En_second = 7,
            En_first = 6,
            En_Low = 5,
            En_Sport_DriveSport = 4,
            En_Drive = 3,
            En_Neutral = 2,
            En_Reverse = 1,
            En_Park = 0
        };
        
        GearLvrPos_D_Actl_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        GearLvrPos_D_Actl_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_Unknown_Position):
                case static_cast<int32_t>(Literal::En_Undefined_Treat_as_Fault1):
                case static_cast<int32_t>(Literal::En_Undefined_Treat_as_Fault):
                case static_cast<int32_t>(Literal::En_sixth):
                case static_cast<int32_t>(Literal::En_fifth):
                case static_cast<int32_t>(Literal::En_fourth):
                case static_cast<int32_t>(Literal::En_third):
                case static_cast<int32_t>(Literal::En_second):
                case static_cast<int32_t>(Literal::En_first):
                case static_cast<int32_t>(Literal::En_Low):
                case static_cast<int32_t>(Literal::En_Sport_DriveSport):
                case static_cast<int32_t>(Literal::En_Drive):
                case static_cast<int32_t>(Literal::En_Neutral):
                case static_cast<int32_t>(Literal::En_Reverse):
                case static_cast<int32_t>(Literal::En_Park):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const GearLvrPos_D_Actl_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const GearLvrPos_D_Actl_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const GearLvrPos_D_Actl_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const GearLvrPos_D_Actl_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const GearLvrPos_D_Actl_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const GearLvrPos_D_Actl_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct GearLvrPos_D_Actl_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        GearLvrPos_D_Actl_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        GearLvrPos_D_Actl_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const GearLvrPos_D_Actl_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const GearLvrPos_D_Actl_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const GearLvrPos_D_Actl_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const GearLvrPos_D_Actl_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const GearLvrPos_D_Actl_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const GearLvrPos_D_Actl_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Body_Info_1_HS3_sig_0_struct : CommonAPI::Struct<GearLvrPos_D_Actl_enum, GearLvrPos_D_Actl_UB_enum, uint8_t> {
    	
    	Body_Info_1_HS3_sig_0_struct() {
    	}
    	Body_Info_1_HS3_sig_0_struct(const GearLvrPos_D_Actl_enum &_gearLvrPos_D_Actl_enum, const GearLvrPos_D_Actl_UB_enum &_gearLvrPos_D_Actl_UB_enum, const uint8_t &_status)
    	{
    		std::get<0>(values_) = _gearLvrPos_D_Actl_enum;
    		std::get<1>(values_) = _gearLvrPos_D_Actl_UB_enum;
    		std::get<2>(values_) = _status;
    	}
    	inline const GearLvrPos_D_Actl_enum &getGearLvrPos_D_Actl_enum() const { return std::get<0>(values_); }
    	inline void setGearLvrPos_D_Actl_enum(const GearLvrPos_D_Actl_enum &_value) { std::get<0>(values_) = _value; }
    	inline const GearLvrPos_D_Actl_UB_enum &getGearLvrPos_D_Actl_UB_enum() const { return std::get<1>(values_); }
    	inline void setGearLvrPos_D_Actl_UB_enum(const GearLvrPos_D_Actl_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline const uint8_t &getStatus() const { return std::get<2>(values_); }
    	inline void setStatus(const uint8_t &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const Body_Info_1_HS3_sig_0_struct& _other) const {
                return (getGearLvrPos_D_Actl_enum() == _other.getGearLvrPos_D_Actl_enum() && getGearLvrPos_D_Actl_UB_enum() == _other.getGearLvrPos_D_Actl_UB_enum() && getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const Body_Info_1_HS3_sig_0_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct FactoryReset_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_ResetFactoryDefaults = 1,
            En_Inactive = 0
        };
        
        FactoryReset_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_ResetFactoryDefaults)) {}
        FactoryReset_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_ResetFactoryDefaults):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const FactoryReset_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FactoryReset_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FactoryReset_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FactoryReset_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FactoryReset_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const FactoryReset_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct TCU_ESN_D_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_TCU_ESN_Request = 2,
            En_NoRequest = 1,
            En_Inactive = 0
        };
        
        TCU_ESN_D_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_TCU_ESN_Request)) {}
        TCU_ESN_D_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_TCU_ESN_Request):
                case static_cast<int32_t>(Literal::En_NoRequest):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TCU_ESN_D_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TCU_ESN_D_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TCU_ESN_D_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TCU_ESN_D_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TCU_ESN_D_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TCU_ESN_D_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DriverWindowPosition_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fully_open_position = 5,
            En_Between_60___open_and_fully_open = 4,
            En_Between_10___open_and_60___open = 3,
            En_Between_fully_closed_and_10___op = 2,
            En_Fully_closed_position = 1,
            En_Undefined_window_position = 0
        };
        
        DriverWindowPosition_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fully_open_position)) {}
        DriverWindowPosition_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fully_open_position):
                case static_cast<int32_t>(Literal::En_Between_60___open_and_fully_open):
                case static_cast<int32_t>(Literal::En_Between_10___open_and_60___open):
                case static_cast<int32_t>(Literal::En_Between_fully_closed_and_10___op):
                case static_cast<int32_t>(Literal::En_Fully_closed_position):
                case static_cast<int32_t>(Literal::En_Undefined_window_position):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DriverWindowPosition_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DriverWindowPosition_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DriverWindowPosition_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DriverWindowPosition_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DriverWindowPosition_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DriverWindowPosition_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DriverWindowPosition_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        DriverWindowPosition_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        DriverWindowPosition_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DriverWindowPosition_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DriverWindowPosition_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DriverWindowPosition_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DriverWindowPosition_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DriverWindowPosition_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DriverWindowPosition_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct GWM_Send_Signals_2_sig_0_struct : CommonAPI::Struct<DriverWindowPosition_enum, DriverWindowPosition_UB_enum> {
    	
    	GWM_Send_Signals_2_sig_0_struct() {
    	}
    	GWM_Send_Signals_2_sig_0_struct(const DriverWindowPosition_enum &_driverWindowPosition_enum, const DriverWindowPosition_UB_enum &_driverWindowPosition_UB_enum)
    	{
    		std::get<0>(values_) = _driverWindowPosition_enum;
    		std::get<1>(values_) = _driverWindowPosition_UB_enum;
    	}
    	inline const DriverWindowPosition_enum &getDriverWindowPosition_enum() const { return std::get<0>(values_); }
    	inline void setDriverWindowPosition_enum(const DriverWindowPosition_enum &_value) { std::get<0>(values_) = _value; }
    	inline const DriverWindowPosition_UB_enum &getDriverWindowPosition_UB_enum() const { return std::get<1>(values_); }
    	inline void setDriverWindowPosition_UB_enum(const DriverWindowPosition_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const GWM_Send_Signals_2_sig_0_struct& _other) const {
                return (getDriverWindowPosition_enum() == _other.getDriverWindowPosition_enum() && getDriverWindowPosition_UB_enum() == _other.getDriverWindowPosition_UB_enum());
        }
    	inline bool operator!=(const GWM_Send_Signals_2_sig_0_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct PassWindowPosition_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fully_open_position = 5,
            En_Between_60___open_and_fully_open = 4,
            En_Between_10___open_and_60___open = 3,
            En_Between_fully_closed_and_10___op = 2,
            En_Fully_closed_position = 1,
            En_Undefined_window_position = 0
        };
        
        PassWindowPosition_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fully_open_position)) {}
        PassWindowPosition_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fully_open_position):
                case static_cast<int32_t>(Literal::En_Between_60___open_and_fully_open):
                case static_cast<int32_t>(Literal::En_Between_10___open_and_60___open):
                case static_cast<int32_t>(Literal::En_Between_fully_closed_and_10___op):
                case static_cast<int32_t>(Literal::En_Fully_closed_position):
                case static_cast<int32_t>(Literal::En_Undefined_window_position):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PassWindowPosition_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PassWindowPosition_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PassWindowPosition_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PassWindowPosition_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PassWindowPosition_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PassWindowPosition_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PassWindowPosition_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        PassWindowPosition_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        PassWindowPosition_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PassWindowPosition_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PassWindowPosition_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PassWindowPosition_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PassWindowPosition_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PassWindowPosition_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PassWindowPosition_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct GWM_Send_Signals_2_sig_1_struct : CommonAPI::Struct<PassWindowPosition_enum, PassWindowPosition_UB_enum> {
    	
    	GWM_Send_Signals_2_sig_1_struct() {
    	}
    	GWM_Send_Signals_2_sig_1_struct(const PassWindowPosition_enum &_passWindowPosition_enum, const PassWindowPosition_UB_enum &_passWindowPosition_UB_enum)
    	{
    		std::get<0>(values_) = _passWindowPosition_enum;
    		std::get<1>(values_) = _passWindowPosition_UB_enum;
    	}
    	inline const PassWindowPosition_enum &getPassWindowPosition_enum() const { return std::get<0>(values_); }
    	inline void setPassWindowPosition_enum(const PassWindowPosition_enum &_value) { std::get<0>(values_) = _value; }
    	inline const PassWindowPosition_UB_enum &getPassWindowPosition_UB_enum() const { return std::get<1>(values_); }
    	inline void setPassWindowPosition_UB_enum(const PassWindowPosition_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const GWM_Send_Signals_2_sig_1_struct& _other) const {
                return (getPassWindowPosition_enum() == _other.getPassWindowPosition_enum() && getPassWindowPosition_UB_enum() == _other.getPassWindowPosition_UB_enum());
        }
    	inline bool operator!=(const GWM_Send_Signals_2_sig_1_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct RearDriverWindowPos_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fully_open_position = 5,
            En_Between_60___open_and_fully_open = 4,
            En_Between_10___open_and_60___open = 3,
            En_Between_fully_closed_and_10___op = 2,
            En_Fully_closed_position = 1,
            En_Undefined_window_position = 0
        };
        
        RearDriverWindowPos_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fully_open_position)) {}
        RearDriverWindowPos_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fully_open_position):
                case static_cast<int32_t>(Literal::En_Between_60___open_and_fully_open):
                case static_cast<int32_t>(Literal::En_Between_10___open_and_60___open):
                case static_cast<int32_t>(Literal::En_Between_fully_closed_and_10___op):
                case static_cast<int32_t>(Literal::En_Fully_closed_position):
                case static_cast<int32_t>(Literal::En_Undefined_window_position):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RearDriverWindowPos_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RearDriverWindowPos_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RearDriverWindowPos_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RearDriverWindowPos_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RearDriverWindowPos_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RearDriverWindowPos_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct RearDriverWindowPos_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        RearDriverWindowPos_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        RearDriverWindowPos_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RearDriverWindowPos_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RearDriverWindowPos_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RearDriverWindowPos_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RearDriverWindowPos_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RearDriverWindowPos_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RearDriverWindowPos_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct GWM_Send_Signals_2_sig_2_struct : CommonAPI::Struct<RearDriverWindowPos_enum, RearDriverWindowPos_UB_enum> {
    	
    	GWM_Send_Signals_2_sig_2_struct() {
    	}
    	GWM_Send_Signals_2_sig_2_struct(const RearDriverWindowPos_enum &_rearDriverWindowPos_enum, const RearDriverWindowPos_UB_enum &_rearDriverWindowPos_UB_enum)
    	{
    		std::get<0>(values_) = _rearDriverWindowPos_enum;
    		std::get<1>(values_) = _rearDriverWindowPos_UB_enum;
    	}
    	inline const RearDriverWindowPos_enum &getRearDriverWindowPos_enum() const { return std::get<0>(values_); }
    	inline void setRearDriverWindowPos_enum(const RearDriverWindowPos_enum &_value) { std::get<0>(values_) = _value; }
    	inline const RearDriverWindowPos_UB_enum &getRearDriverWindowPos_UB_enum() const { return std::get<1>(values_); }
    	inline void setRearDriverWindowPos_UB_enum(const RearDriverWindowPos_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const GWM_Send_Signals_2_sig_2_struct& _other) const {
                return (getRearDriverWindowPos_enum() == _other.getRearDriverWindowPos_enum() && getRearDriverWindowPos_UB_enum() == _other.getRearDriverWindowPos_UB_enum());
        }
    	inline bool operator!=(const GWM_Send_Signals_2_sig_2_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct RearPassWindowPos_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fully_open_position = 5,
            En_Between_60___open_and_fully_open = 4,
            En_Between_10___open_and_60___open = 3,
            En_Between_fully_closed_and_10___op = 2,
            En_Fully_closed_position = 1,
            En_Undefined_window_position = 0
        };
        
        RearPassWindowPos_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fully_open_position)) {}
        RearPassWindowPos_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fully_open_position):
                case static_cast<int32_t>(Literal::En_Between_60___open_and_fully_open):
                case static_cast<int32_t>(Literal::En_Between_10___open_and_60___open):
                case static_cast<int32_t>(Literal::En_Between_fully_closed_and_10___op):
                case static_cast<int32_t>(Literal::En_Fully_closed_position):
                case static_cast<int32_t>(Literal::En_Undefined_window_position):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RearPassWindowPos_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RearPassWindowPos_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RearPassWindowPos_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RearPassWindowPos_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RearPassWindowPos_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RearPassWindowPos_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct RearPassWindowPos_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        RearPassWindowPos_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        RearPassWindowPos_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RearPassWindowPos_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RearPassWindowPos_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RearPassWindowPos_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RearPassWindowPos_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RearPassWindowPos_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RearPassWindowPos_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct GWM_Send_Signals_2_sig_3_struct : CommonAPI::Struct<RearPassWindowPos_enum, RearPassWindowPos_UB_enum> {
    	
    	GWM_Send_Signals_2_sig_3_struct() {
    	}
    	GWM_Send_Signals_2_sig_3_struct(const RearPassWindowPos_enum &_rearPassWindowPos_enum, const RearPassWindowPos_UB_enum &_rearPassWindowPos_UB_enum)
    	{
    		std::get<0>(values_) = _rearPassWindowPos_enum;
    		std::get<1>(values_) = _rearPassWindowPos_UB_enum;
    	}
    	inline const RearPassWindowPos_enum &getRearPassWindowPos_enum() const { return std::get<0>(values_); }
    	inline void setRearPassWindowPos_enum(const RearPassWindowPos_enum &_value) { std::get<0>(values_) = _value; }
    	inline const RearPassWindowPos_UB_enum &getRearPassWindowPos_UB_enum() const { return std::get<1>(values_); }
    	inline void setRearPassWindowPos_UB_enum(const RearPassWindowPos_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const GWM_Send_Signals_2_sig_3_struct& _other) const {
                return (getRearPassWindowPos_enum() == _other.getRearPassWindowPos_enum() && getRearPassWindowPos_UB_enum() == _other.getRearPassWindowPos_UB_enum());
        }
    	inline bool operator!=(const GWM_Send_Signals_2_sig_3_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct TCU_Sftwr_Update_D_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_SoftwareUpdateComplete = 3,
            En_SoftwareUpdating = 2,
            En_NoUpdate = 1,
            En_Invalid = 0
        };
        
        TCU_Sftwr_Update_D_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_SoftwareUpdateComplete)) {}
        TCU_Sftwr_Update_D_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_SoftwareUpdateComplete):
                case static_cast<int32_t>(Literal::En_SoftwareUpdating):
                case static_cast<int32_t>(Literal::En_NoUpdate):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TCU_Sftwr_Update_D_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TCU_Sftwr_Update_D_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TCU_Sftwr_Update_D_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TCU_Sftwr_Update_D_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TCU_Sftwr_Update_D_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TCU_Sftwr_Update_D_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Parklamp_Status_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_On = 1,
            En_Off = 0,
            En_Invalid = 3,
            En_Unknown = 2
        };
        
        Parklamp_Status_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_On)) {}
        Parklamp_Status_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Unknown):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Parklamp_Status_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Parklamp_Status_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Parklamp_Status_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Parklamp_Status_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Parklamp_Status_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Parklamp_Status_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Day_Night_Status_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed = 3,
            En_Night = 2,
            En_Day = 1,
            En_Null = 0
        };
        
        Day_Night_Status_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed)) {}
        Day_Night_Status_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed):
                case static_cast<int32_t>(Literal::En_Night):
                case static_cast<int32_t>(Literal::En_Day):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Day_Night_Status_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Day_Night_Status_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Day_Night_Status_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Day_Night_Status_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Day_Night_Status_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Day_Night_Status_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Backlit_LED_Status_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused3 = 15,
            En_Unused2 = 14,
            En_Unused1 = 13,
            En_Night_12 = 12,
            En_Night_11 = 11,
            En_Night_10 = 10,
            En_Night_9 = 9,
            En_Night_8 = 8,
            En_Night_7 = 7,
            En_Night_6 = 6,
            En_Night_5 = 5,
            En_Night_4 = 4,
            En_Night_3 = 3,
            En_Night_2 = 2,
            En_Night_1 = 1,
            En_Off = 0
        };
        
        Backlit_LED_Status_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused3)) {}
        Backlit_LED_Status_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused3):
                case static_cast<int32_t>(Literal::En_Unused2):
                case static_cast<int32_t>(Literal::En_Unused1):
                case static_cast<int32_t>(Literal::En_Night_12):
                case static_cast<int32_t>(Literal::En_Night_11):
                case static_cast<int32_t>(Literal::En_Night_10):
                case static_cast<int32_t>(Literal::En_Night_9):
                case static_cast<int32_t>(Literal::En_Night_8):
                case static_cast<int32_t>(Literal::En_Night_7):
                case static_cast<int32_t>(Literal::En_Night_6):
                case static_cast<int32_t>(Literal::En_Night_5):
                case static_cast<int32_t>(Literal::En_Night_4):
                case static_cast<int32_t>(Literal::En_Night_3):
                case static_cast<int32_t>(Literal::En_Night_2):
                case static_cast<int32_t>(Literal::En_Night_1):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Backlit_LED_Status_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Backlit_LED_Status_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Backlit_LED_Status_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Backlit_LED_Status_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Backlit_LED_Status_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Backlit_LED_Status_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Dimming_Lvl_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 255,
            En_Unknown = 254,
            En_Day_6 = 18,
            En_Day_5 = 17,
            En_Day_4 = 16,
            En_Day_3 = 15,
            En_Day_2 = 14,
            En_Day_1 = 13,
            En_Night_12 = 12,
            En_Night_11 = 11,
            En_Night_10 = 10,
            En_Night_9 = 9,
            En_Night_8 = 8,
            En_Night_7 = 7,
            En_Night_6 = 6,
            En_Night_5 = 5,
            En_Night_4 = 4,
            En_Night_3 = 3,
            En_Night_2 = 2,
            En_Night_1 = 1,
            En_Off = 0
        };
        
        Dimming_Lvl_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        Dimming_Lvl_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Unknown):
                case static_cast<int32_t>(Literal::En_Day_6):
                case static_cast<int32_t>(Literal::En_Day_5):
                case static_cast<int32_t>(Literal::En_Day_4):
                case static_cast<int32_t>(Literal::En_Day_3):
                case static_cast<int32_t>(Literal::En_Day_2):
                case static_cast<int32_t>(Literal::En_Day_1):
                case static_cast<int32_t>(Literal::En_Night_12):
                case static_cast<int32_t>(Literal::En_Night_11):
                case static_cast<int32_t>(Literal::En_Night_10):
                case static_cast<int32_t>(Literal::En_Night_9):
                case static_cast<int32_t>(Literal::En_Night_8):
                case static_cast<int32_t>(Literal::En_Night_7):
                case static_cast<int32_t>(Literal::En_Night_6):
                case static_cast<int32_t>(Literal::En_Night_5):
                case static_cast<int32_t>(Literal::En_Night_4):
                case static_cast<int32_t>(Literal::En_Night_3):
                case static_cast<int32_t>(Literal::En_Night_2):
                case static_cast<int32_t>(Literal::En_Night_1):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Dimming_Lvl_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Dimming_Lvl_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Dimming_Lvl_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Dimming_Lvl_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Dimming_Lvl_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Dimming_Lvl_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Dimming_Lvl_struct : CommonAPI::Struct<Dimming_Lvl_enum, uint8_t> {
    	
    	Dimming_Lvl_struct() {
    	}
    	Dimming_Lvl_struct(const Dimming_Lvl_enum &_dimming_Lvl_enum, const uint8_t &_status)
    	{
    		std::get<0>(values_) = _dimming_Lvl_enum;
    		std::get<1>(values_) = _status;
    	}
    	inline const Dimming_Lvl_enum &getDimming_Lvl_enum() const { return std::get<0>(values_); }
    	inline void setDimming_Lvl_enum(const Dimming_Lvl_enum &_value) { std::get<0>(values_) = _value; }
    	inline const uint8_t &getStatus() const { return std::get<1>(values_); }
    	inline void setStatus(const uint8_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const Dimming_Lvl_struct& _other) const {
                return (getDimming_Lvl_enum() == _other.getDimming_Lvl_enum() && getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const Dimming_Lvl_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct Litval_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 255,
            En_Unknown = 254,
            En_Day = 5,
            En_Twilight_4 = 4,
            En_Twilight_3 = 3,
            En_Twilight_2 = 2,
            En_Twilight_1 = 1,
            En_Night = 0
        };
        
        Litval_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        Litval_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Unknown):
                case static_cast<int32_t>(Literal::En_Day):
                case static_cast<int32_t>(Literal::En_Twilight_4):
                case static_cast<int32_t>(Literal::En_Twilight_3):
                case static_cast<int32_t>(Literal::En_Twilight_2):
                case static_cast<int32_t>(Literal::En_Twilight_1):
                case static_cast<int32_t>(Literal::En_Night):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Litval_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Litval_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Litval_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Litval_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Litval_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Litval_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Litval_struct : CommonAPI::Struct<Litval_enum, uint8_t> {
    	
    	Litval_struct() {
    	}
    	Litval_struct(const Litval_enum &_litval_enum, const uint8_t &_status)
    	{
    		std::get<0>(values_) = _litval_enum;
    		std::get<1>(values_) = _status;
    	}
    	inline const Litval_enum &getLitval_enum() const { return std::get<0>(values_); }
    	inline void setLitval_enum(const Litval_enum &_value) { std::get<0>(values_) = _value; }
    	inline const uint8_t &getStatus() const { return std::get<1>(values_); }
    	inline void setStatus(const uint8_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const Litval_struct& _other) const {
                return (getLitval_enum() == _other.getLitval_enum() && getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const Litval_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct TCMode_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Active = 1,
            En_Inactive = 0
        };
        
        TCMode_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Active)) {}
        TCMode_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TCMode_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TCMode_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TCMode_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TCMode_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TCMode_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TCMode_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DistanceBarSetting_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_On = 1,
            En_Off = 0
        };
        
        DistanceBarSetting_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_On)) {}
        DistanceBarSetting_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DistanceBarSetting_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DistanceBarSetting_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DistanceBarSetting_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DistanceBarSetting_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DistanceBarSetting_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DistanceBarSetting_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PwPck_D_Stat_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        PwPck_D_Stat_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        PwPck_D_Stat_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PwPck_D_Stat_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PwPck_D_Stat_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PwPck_D_Stat_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PwPck_D_Stat_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PwPck_D_Stat_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PwPck_D_Stat_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Vehicle_Status_Msg_sig_0_struct : CommonAPI::Struct<uint8_t, PwPck_D_Stat_UB_enum> {
    	
    	Vehicle_Status_Msg_sig_0_struct() {
    	}
    	Vehicle_Status_Msg_sig_0_struct(const uint8_t &_PwPck_D_Stat, const PwPck_D_Stat_UB_enum &_pwPck_D_Stat_UB_enum)
    	{
    		std::get<0>(values_) = _PwPck_D_Stat;
    		std::get<1>(values_) = _pwPck_D_Stat_UB_enum;
    	}
    	inline const uint8_t &getPwPck_D_Stat() const { return std::get<0>(values_); }
    	inline void setPwPck_D_Stat(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	inline const PwPck_D_Stat_UB_enum &getPwPck_D_Stat_UB_enum() const { return std::get<1>(values_); }
    	inline void setPwPck_D_Stat_UB_enum(const PwPck_D_Stat_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const Vehicle_Status_Msg_sig_0_struct& _other) const {
                return (getPwPck_D_Stat() == _other.getPwPck_D_Stat() && getPwPck_D_Stat_UB_enum() == _other.getPwPck_D_Stat_UB_enum());
        }
    	inline bool operator!=(const Vehicle_Status_Msg_sig_0_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct Outside_Air_Temp_Stat_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        Outside_Air_Temp_Stat_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        Outside_Air_Temp_Stat_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Outside_Air_Temp_Stat_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Outside_Air_Temp_Stat_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Outside_Air_Temp_Stat_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Outside_Air_Temp_Stat_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Outside_Air_Temp_Stat_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Outside_Air_Temp_Stat_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct BodyInformation_3_sig_1_struct : CommonAPI::Struct<uint8_t, Outside_Air_Temp_Stat_UB_enum, uint8_t> {
    	
    	BodyInformation_3_sig_1_struct() {
    	}
    	BodyInformation_3_sig_1_struct(const uint8_t &_Outside_Air_Temp_Stat, const Outside_Air_Temp_Stat_UB_enum &_outside_Air_Temp_Stat_UB_enum, const uint8_t &_status)
    	{
    		std::get<0>(values_) = _Outside_Air_Temp_Stat;
    		std::get<1>(values_) = _outside_Air_Temp_Stat_UB_enum;
    		std::get<2>(values_) = _status;
    	}
    	inline const uint8_t &getOutside_Air_Temp_Stat() const { return std::get<0>(values_); }
    	inline void setOutside_Air_Temp_Stat(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	inline const Outside_Air_Temp_Stat_UB_enum &getOutside_Air_Temp_Stat_UB_enum() const { return std::get<1>(values_); }
    	inline void setOutside_Air_Temp_Stat_UB_enum(const Outside_Air_Temp_Stat_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline const uint8_t &getStatus() const { return std::get<2>(values_); }
    	inline void setStatus(const uint8_t &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const BodyInformation_3_sig_1_struct& _other) const {
                return (getOutside_Air_Temp_Stat() == _other.getOutside_Air_Temp_Stat() && getOutside_Air_Temp_Stat_UB_enum() == _other.getOutside_Air_Temp_Stat_UB_enum() && getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const BodyInformation_3_sig_1_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct RstrnImpactEvntStatus_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 7,
            En_Not_Used_4 = 6,
            En_Threshold_2_Exceeded = 5,
            En_Not_Used_3 = 4,
            En_Threshold_1_Exceeded = 3,
            En_Not_Used_2 = 2,
            En_Not_Used_1 = 1,
            En_Normal = 0
        };
        
        RstrnImpactEvntStatus_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        RstrnImpactEvntStatus_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Not_Used_4):
                case static_cast<int32_t>(Literal::En_Threshold_2_Exceeded):
                case static_cast<int32_t>(Literal::En_Not_Used_3):
                case static_cast<int32_t>(Literal::En_Threshold_1_Exceeded):
                case static_cast<int32_t>(Literal::En_Not_Used_2):
                case static_cast<int32_t>(Literal::En_Not_Used_1):
                case static_cast<int32_t>(Literal::En_Normal):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RstrnImpactEvntStatus_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RstrnImpactEvntStatus_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RstrnImpactEvntStatus_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RstrnImpactEvntStatus_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RstrnImpactEvntStatus_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RstrnImpactEvntStatus_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VehVActlEng_D_Qf_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_OK = 3,
            En_Not_Within_Specifications = 2,
            En_No_Data_Exists = 1,
            En_Faulty = 0
        };
        
        VehVActlEng_D_Qf_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_OK)) {}
        VehVActlEng_D_Qf_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_OK):
                case static_cast<int32_t>(Literal::En_Not_Within_Specifications):
                case static_cast<int32_t>(Literal::En_No_Data_Exists):
                case static_cast<int32_t>(Literal::En_Faulty):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VehVActlEng_D_Qf_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VehVActlEng_D_Qf_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VehVActlEng_D_Qf_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VehVActlEng_D_Qf_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VehVActlEng_D_Qf_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VehVActlEng_D_Qf_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Veh_V_ActlEng_struct : CommonAPI::Struct<uint16_t, uint8_t> {
    	
    	Veh_V_ActlEng_struct() {
    	}
    	Veh_V_ActlEng_struct(const uint16_t &_Veh_V_ActlEng, const uint8_t &_status)
    	{
    		std::get<0>(values_) = _Veh_V_ActlEng;
    		std::get<1>(values_) = _status;
    	}
    	inline const uint16_t &getVeh_V_ActlEng() const { return std::get<0>(values_); }
    	inline void setVeh_V_ActlEng(const uint16_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint8_t &getStatus() const { return std::get<1>(values_); }
    	inline void setStatus(const uint8_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const Veh_V_ActlEng_struct& _other) const {
                return (getVeh_V_ActlEng() == _other.getVeh_V_ActlEng() && getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const Veh_V_ActlEng_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct HMI_HMIMode_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Load_Shed_Active = 5,
            En_Invalid = 0,
            En_OffMode = 1,
            En_On = 2,
            En_Phone = 3,
            En_Climate = 4
        };
        
        HMI_HMIMode_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Load_Shed_Active)) {}
        HMI_HMIMode_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Load_Shed_Active):
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_OffMode):
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Phone):
                case static_cast<int32_t>(Literal::En_Climate):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const HMI_HMIMode_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HMI_HMIMode_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HMI_HMIMode_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HMI_HMIMode_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HMI_HMIMode_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const HMI_HMIMode_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct TCU_Init_Actvtn_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_InitialActivateDeny = 2,
            En_InitialActivateAccept = 1,
            En_Invalid = 0
        };
        
        TCU_Init_Actvtn_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_InitialActivateDeny)) {}
        TCU_Init_Actvtn_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_InitialActivateDeny):
                case static_cast<int32_t>(Literal::En_InitialActivateAccept):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TCU_Init_Actvtn_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TCU_Init_Actvtn_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TCU_Init_Actvtn_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TCU_Init_Actvtn_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TCU_Init_Actvtn_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TCU_Init_Actvtn_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct TCU_Final_Actvtn_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_FinalActivateDeny = 2,
            En_FinalActivateAccept = 1,
            En_Invalid = 0
        };
        
        TCU_Final_Actvtn_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_FinalActivateDeny)) {}
        TCU_Final_Actvtn_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_FinalActivateDeny):
                case static_cast<int32_t>(Literal::En_FinalActivateAccept):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TCU_Final_Actvtn_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TCU_Final_Actvtn_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TCU_Final_Actvtn_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TCU_Final_Actvtn_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TCU_Final_Actvtn_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TCU_Final_Actvtn_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct OtaTrg_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed_1 = 3,
            En_Accepted = 2,
            En_NotAccepted = 1,
            En_Null = 0
        };
        
        OtaTrg_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed_1)) {}
        OtaTrg_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed_1):
                case static_cast<int32_t>(Literal::En_Accepted):
                case static_cast<int32_t>(Literal::En_NotAccepted):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const OtaTrg_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const OtaTrg_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const OtaTrg_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const OtaTrg_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const OtaTrg_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const OtaTrg_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.harman.ford.bodycontroldata_types";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct bodycontroldata_types

} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for VehYaw_W_Actl_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::VehYaw_W_Actl_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::VehYaw_W_Actl_enum& vehYaw_W_Actl_enum) const {
            return static_cast<int32_t>(vehYaw_W_Actl_enum);
        }
    };
    //Hash for VehYaw_W_Actl_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::VehYaw_W_Actl_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::VehYaw_W_Actl_UB_enum& vehYaw_W_Actl_UB_enum) const {
            return static_cast<int32_t>(vehYaw_W_Actl_UB_enum);
        }
    };
    //Hash for EngExhMdeQuiet_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::EngExhMdeQuiet_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::EngExhMdeQuiet_D_Stat_enum& engExhMdeQuiet_D_Stat_enum) const {
            return static_cast<int32_t>(engExhMdeQuiet_D_Stat_enum);
        }
    };
    //Hash for StabCtlBrkActv_B_Actl_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::StabCtlBrkActv_B_Actl_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::StabCtlBrkActv_B_Actl_enum& stabCtlBrkActv_B_Actl_enum) const {
            return static_cast<int32_t>(stabCtlBrkActv_B_Actl_enum);
        }
    };
    //Hash for BrkTot_Tq_RqArb_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::BrkTot_Tq_RqArb_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::BrkTot_Tq_RqArb_enum& brkTot_Tq_RqArb_enum) const {
            return static_cast<int32_t>(brkTot_Tq_RqArb_enum);
        }
    };
    //Hash for BrkTot_Tq_RqArb_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::BrkTot_Tq_RqArb_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::BrkTot_Tq_RqArb_UB_enum& brkTot_Tq_RqArb_UB_enum) const {
            return static_cast<int32_t>(brkTot_Tq_RqArb_UB_enum);
        }
    };
    //Hash for Veh_Lock_Status_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::Veh_Lock_Status_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::Veh_Lock_Status_enum& veh_Lock_Status_enum) const {
            return static_cast<int32_t>(veh_Lock_Status_enum);
        }
    };
    //Hash for GearLvrPos_D_Actl_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::GearLvrPos_D_Actl_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::GearLvrPos_D_Actl_enum& gearLvrPos_D_Actl_enum) const {
            return static_cast<int32_t>(gearLvrPos_D_Actl_enum);
        }
    };
    //Hash for GearLvrPos_D_Actl_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::GearLvrPos_D_Actl_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::GearLvrPos_D_Actl_UB_enum& gearLvrPos_D_Actl_UB_enum) const {
            return static_cast<int32_t>(gearLvrPos_D_Actl_UB_enum);
        }
    };
    //Hash for FactoryReset_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::FactoryReset_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::FactoryReset_Rq_enum& factoryReset_Rq_enum) const {
            return static_cast<int32_t>(factoryReset_Rq_enum);
        }
    };
    //Hash for TCU_ESN_D_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::TCU_ESN_D_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::TCU_ESN_D_Rq_enum& tCU_ESN_D_Rq_enum) const {
            return static_cast<int32_t>(tCU_ESN_D_Rq_enum);
        }
    };
    //Hash for DriverWindowPosition_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::DriverWindowPosition_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::DriverWindowPosition_enum& driverWindowPosition_enum) const {
            return static_cast<int32_t>(driverWindowPosition_enum);
        }
    };
    //Hash for DriverWindowPosition_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::DriverWindowPosition_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::DriverWindowPosition_UB_enum& driverWindowPosition_UB_enum) const {
            return static_cast<int32_t>(driverWindowPosition_UB_enum);
        }
    };
    //Hash for PassWindowPosition_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::PassWindowPosition_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::PassWindowPosition_enum& passWindowPosition_enum) const {
            return static_cast<int32_t>(passWindowPosition_enum);
        }
    };
    //Hash for PassWindowPosition_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::PassWindowPosition_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::PassWindowPosition_UB_enum& passWindowPosition_UB_enum) const {
            return static_cast<int32_t>(passWindowPosition_UB_enum);
        }
    };
    //Hash for RearDriverWindowPos_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::RearDriverWindowPos_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::RearDriverWindowPos_enum& rearDriverWindowPos_enum) const {
            return static_cast<int32_t>(rearDriverWindowPos_enum);
        }
    };
    //Hash for RearDriverWindowPos_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::RearDriverWindowPos_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::RearDriverWindowPos_UB_enum& rearDriverWindowPos_UB_enum) const {
            return static_cast<int32_t>(rearDriverWindowPos_UB_enum);
        }
    };
    //Hash for RearPassWindowPos_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::RearPassWindowPos_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::RearPassWindowPos_enum& rearPassWindowPos_enum) const {
            return static_cast<int32_t>(rearPassWindowPos_enum);
        }
    };
    //Hash for RearPassWindowPos_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::RearPassWindowPos_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::RearPassWindowPos_UB_enum& rearPassWindowPos_UB_enum) const {
            return static_cast<int32_t>(rearPassWindowPos_UB_enum);
        }
    };
    //Hash for TCU_Sftwr_Update_D_St_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::TCU_Sftwr_Update_D_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::TCU_Sftwr_Update_D_St_enum& tCU_Sftwr_Update_D_St_enum) const {
            return static_cast<int32_t>(tCU_Sftwr_Update_D_St_enum);
        }
    };
    //Hash for Parklamp_Status_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::Parklamp_Status_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::Parklamp_Status_enum& parklamp_Status_enum) const {
            return static_cast<int32_t>(parklamp_Status_enum);
        }
    };
    //Hash for Day_Night_Status_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::Day_Night_Status_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::Day_Night_Status_enum& day_Night_Status_enum) const {
            return static_cast<int32_t>(day_Night_Status_enum);
        }
    };
    //Hash for Backlit_LED_Status_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::Backlit_LED_Status_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::Backlit_LED_Status_enum& backlit_LED_Status_enum) const {
            return static_cast<int32_t>(backlit_LED_Status_enum);
        }
    };
    //Hash for Dimming_Lvl_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::Dimming_Lvl_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::Dimming_Lvl_enum& dimming_Lvl_enum) const {
            return static_cast<int32_t>(dimming_Lvl_enum);
        }
    };
    //Hash for Litval_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::Litval_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::Litval_enum& litval_enum) const {
            return static_cast<int32_t>(litval_enum);
        }
    };
    //Hash for TCMode_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::TCMode_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::TCMode_enum& tCMode_enum) const {
            return static_cast<int32_t>(tCMode_enum);
        }
    };
    //Hash for DistanceBarSetting_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::DistanceBarSetting_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::DistanceBarSetting_enum& distanceBarSetting_enum) const {
            return static_cast<int32_t>(distanceBarSetting_enum);
        }
    };
    //Hash for PwPck_D_Stat_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::PwPck_D_Stat_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::PwPck_D_Stat_UB_enum& pwPck_D_Stat_UB_enum) const {
            return static_cast<int32_t>(pwPck_D_Stat_UB_enum);
        }
    };
    //Hash for Outside_Air_Temp_Stat_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::Outside_Air_Temp_Stat_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::Outside_Air_Temp_Stat_UB_enum& outside_Air_Temp_Stat_UB_enum) const {
            return static_cast<int32_t>(outside_Air_Temp_Stat_UB_enum);
        }
    };
    //Hash for RstrnImpactEvntStatus_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::RstrnImpactEvntStatus_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::RstrnImpactEvntStatus_enum& rstrnImpactEvntStatus_enum) const {
            return static_cast<int32_t>(rstrnImpactEvntStatus_enum);
        }
    };
    //Hash for VehVActlEng_D_Qf_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::VehVActlEng_D_Qf_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::VehVActlEng_D_Qf_enum& vehVActlEng_D_Qf_enum) const {
            return static_cast<int32_t>(vehVActlEng_D_Qf_enum);
        }
    };
    //Hash for HMI_HMIMode_St_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::HMI_HMIMode_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::HMI_HMIMode_St_enum& hMI_HMIMode_St_enum) const {
            return static_cast<int32_t>(hMI_HMIMode_St_enum);
        }
    };
    //Hash for TCU_Init_Actvtn_St_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::TCU_Init_Actvtn_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::TCU_Init_Actvtn_St_enum& tCU_Init_Actvtn_St_enum) const {
            return static_cast<int32_t>(tCU_Init_Actvtn_St_enum);
        }
    };
    //Hash for TCU_Final_Actvtn_St_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::TCU_Final_Actvtn_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::TCU_Final_Actvtn_St_enum& tCU_Final_Actvtn_St_enum) const {
            return static_cast<int32_t>(tCU_Final_Actvtn_St_enum);
        }
    };
    //Hash for OtaTrg_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::bodycontroldata_types::OtaTrg_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bodycontroldata_types::OtaTrg_D_Stat_enum& otaTrg_D_Stat_enum) const {
            return static_cast<int32_t>(otaTrg_D_Stat_enum);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_bodycontroldata_types_HPP_
