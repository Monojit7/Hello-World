/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_ORG_HARMAN_FORD_mediaplayback_types_HPP_
#define V0_ORG_HARMAN_FORD_mediaplayback_types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

struct mediaplayback_types {
    
    struct ACU_CurrTUBand_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Reserved1 = 14,
            En_Am3 = 13,
            En_Reserved2 = 15,
            En_DAB3 = 12,
            En_SAT3 = 11,
            En_SAT2 = 10,
            En_SAT1 = 9,
            En_DAB2 = 8,
            En_DAB1 = 7,
            En_Fm3 = 6,
            En_AmAst = 5,
            En_Am = 4,
            En_FmAst = 3,
            En_Fm2 = 2,
            En_Fm1 = 1,
            En_Invalid = 0
        };
        
        ACU_CurrTUBand_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Reserved1)) {}
        ACU_CurrTUBand_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Reserved1):
                case static_cast<int32_t>(Literal::En_Am3):
                case static_cast<int32_t>(Literal::En_Reserved2):
                case static_cast<int32_t>(Literal::En_DAB3):
                case static_cast<int32_t>(Literal::En_SAT3):
                case static_cast<int32_t>(Literal::En_SAT2):
                case static_cast<int32_t>(Literal::En_SAT1):
                case static_cast<int32_t>(Literal::En_DAB2):
                case static_cast<int32_t>(Literal::En_DAB1):
                case static_cast<int32_t>(Literal::En_Fm3):
                case static_cast<int32_t>(Literal::En_AmAst):
                case static_cast<int32_t>(Literal::En_Am):
                case static_cast<int32_t>(Literal::En_FmAst):
                case static_cast<int32_t>(Literal::En_Fm2):
                case static_cast<int32_t>(Literal::En_Fm1):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_CurrTUBand_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_CurrTUBand_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_CurrTUBand_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_CurrTUBand_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_CurrTUBand_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_CurrTUBand_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ACU_RadioSeekMode2_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_ContAutoDown = 16,
            En_ContAutoUp = 15,
            En_PISeek = 14,
            En_TpSeek = 13,
            En_Autostore = 12,
            En_PtySeekDown = 11,
            En_PtySeekUp = 10,
            En_ScanDown = 9,
            En_ScanUp = 8,
            En_ContManualDown = 7,
            En_ContManualUp = 6,
            En_ManSingleStepDown = 5,
            En_ManSingleStepUp = 4,
            En_AutoDown = 3,
            En_AutoUp = 2,
            En_SeekOff = 1,
            En_Invalid = 0
        };
        
        ACU_RadioSeekMode2_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_ContAutoDown)) {}
        ACU_RadioSeekMode2_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_ContAutoDown):
                case static_cast<int32_t>(Literal::En_ContAutoUp):
                case static_cast<int32_t>(Literal::En_PISeek):
                case static_cast<int32_t>(Literal::En_TpSeek):
                case static_cast<int32_t>(Literal::En_Autostore):
                case static_cast<int32_t>(Literal::En_PtySeekDown):
                case static_cast<int32_t>(Literal::En_PtySeekUp):
                case static_cast<int32_t>(Literal::En_ScanDown):
                case static_cast<int32_t>(Literal::En_ScanUp):
                case static_cast<int32_t>(Literal::En_ContManualDown):
                case static_cast<int32_t>(Literal::En_ContManualUp):
                case static_cast<int32_t>(Literal::En_ManSingleStepDown):
                case static_cast<int32_t>(Literal::En_ManSingleStepUp):
                case static_cast<int32_t>(Literal::En_AutoDown):
                case static_cast<int32_t>(Literal::En_AutoUp):
                case static_cast<int32_t>(Literal::En_SeekOff):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_RadioSeekMode2_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_RadioSeekMode2_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_RadioSeekMode2_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_RadioSeekMode2_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_RadioSeekMode2_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_RadioSeekMode2_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ACU_CompLogic_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 0,
            En_Off = 1,
            En_On = 2
        };
        
        ACU_CompLogic_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        ACU_CompLogic_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_On):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_CompLogic_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_CompLogic_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_CompLogic_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_CompLogic_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_CompLogic_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_CompLogic_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ACU_ActServiceLink_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_reserved = 3,
            En_FM2DAB = 2,
            En_DAB2FM = 1,
            En_Invalid = 0
        };
        
        ACU_ActServiceLink_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_reserved)) {}
        ACU_ActServiceLink_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_reserved):
                case static_cast<int32_t>(Literal::En_FM2DAB):
                case static_cast<int32_t>(Literal::En_DAB2FM):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_ActServiceLink_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_ActServiceLink_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_ActServiceLink_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_ActServiceLink_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_ActServiceLink_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_ActServiceLink_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ACU_CurrTUDRService2_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_last_reserved = 7,
            En_reserved = 5,
            En_DabNotAvailable = 4,
            En_ServiceAvailable = 3,
            En_ServiceNotAvailable = 2,
            En_SyncEnsemble = 1,
            En_Invalid = 0
        };
        
        ACU_CurrTUDRService2_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_last_reserved)) {}
        ACU_CurrTUDRService2_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_last_reserved):
                case static_cast<int32_t>(Literal::En_reserved):
                case static_cast<int32_t>(Literal::En_DabNotAvailable):
                case static_cast<int32_t>(Literal::En_ServiceAvailable):
                case static_cast<int32_t>(Literal::En_ServiceNotAvailable):
                case static_cast<int32_t>(Literal::En_SyncEnsemble):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_CurrTUDRService2_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_CurrTUDRService2_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_CurrTUDRService2_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_CurrTUDRService2_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_CurrTUDRService2_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_CurrTUDRService2_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CD_FunctionStatus_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_RemoveDisc = 7,
            En_Invalid = 0,
            En_Reading = 1,
            En_Loading = 2,
            En_Loaded = 3,
            En_Insert = 4,
            En_PreparingToEject = 5,
            En_Ejecting = 6
        };
        
        CD_FunctionStatus_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_RemoveDisc)) {}
        CD_FunctionStatus_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_RemoveDisc):
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Reading):
                case static_cast<int32_t>(Literal::En_Loading):
                case static_cast<int32_t>(Literal::En_Loaded):
                case static_cast<int32_t>(Literal::En_Insert):
                case static_cast<int32_t>(Literal::En_PreparingToEject):
                case static_cast<int32_t>(Literal::En_Ejecting):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CD_FunctionStatus_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CD_FunctionStatus_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CD_FunctionStatus_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CD_FunctionStatus_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CD_FunctionStatus_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CD_FunctionStatus_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CD_HardwareError_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_FocusError = 7,
            En_OverTemperature = 6,
            En_Reserved3 = 5,
            En_Reserved2 = 4,
            En_Reserved1 = 3,
            En_Reserved = 2,
            En_NoError = 1,
            En_Invalid = 0
        };
        
        CD_HardwareError_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_FocusError)) {}
        CD_HardwareError_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_FocusError):
                case static_cast<int32_t>(Literal::En_OverTemperature):
                case static_cast<int32_t>(Literal::En_Reserved3):
                case static_cast<int32_t>(Literal::En_Reserved2):
                case static_cast<int32_t>(Literal::En_Reserved1):
                case static_cast<int32_t>(Literal::En_Reserved):
                case static_cast<int32_t>(Literal::En_NoError):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CD_HardwareError_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CD_HardwareError_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CD_HardwareError_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CD_HardwareError_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CD_HardwareError_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CD_HardwareError_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CDError_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 0,
            En_NoError = 1,
            En_NoDiscs = 2,
            En_UnableToReadDisc = 3
        };
        
        CDError_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        CDError_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_NoError):
                case static_cast<int32_t>(Literal::En_NoDiscs):
                case static_cast<int32_t>(Literal::En_UnableToReadDisc):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CDError_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CDError_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CDError_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CDError_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CDError_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CDError_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct CD_Send_Signals_struct : CommonAPI::Struct<CD_FunctionStatus_St_enum, CD_HardwareError_St_enum, CDError_St_enum> {
    	
    	CD_Send_Signals_struct() {
    	}
    	CD_Send_Signals_struct(const CD_FunctionStatus_St_enum &_cD_FunctionStatus_St_enum, const CD_HardwareError_St_enum &_cD_HardwareError_St_enum, const CDError_St_enum &_cDError_St_enum)
    	{
    		std::get<0>(values_) = _cD_FunctionStatus_St_enum;
    		std::get<1>(values_) = _cD_HardwareError_St_enum;
    		std::get<2>(values_) = _cDError_St_enum;
    	}
    	inline const CD_FunctionStatus_St_enum &getCD_FunctionStatus_St_enum() const { return std::get<0>(values_); }
    	inline void setCD_FunctionStatus_St_enum(const CD_FunctionStatus_St_enum &_value) { std::get<0>(values_) = _value; }
    	inline const CD_HardwareError_St_enum &getCD_HardwareError_St_enum() const { return std::get<1>(values_); }
    	inline void setCD_HardwareError_St_enum(const CD_HardwareError_St_enum &_value) { std::get<1>(values_) = _value; }
    	inline const CDError_St_enum &getCDError_St_enum() const { return std::get<2>(values_); }
    	inline void setCDError_St_enum(const CDError_St_enum &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const CD_Send_Signals_struct& _other) const {
                return (getCD_FunctionStatus_St_enum() == _other.getCD_FunctionStatus_St_enum() && getCD_HardwareError_St_enum() == _other.getCD_HardwareError_St_enum() && getCDError_St_enum() == _other.getCDError_St_enum());
        }
    	inline bool operator!=(const CD_Send_Signals_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct CD_ARAudioSource_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_iPod = 15,
            En_USB = 14,
            En_BTAudio = 13,
            En_AmfmRadio = 0,
            En_FrontDisc = 1,
            En_SDARS_DAB = 2,
            En_InDashCdChanger = 3,
            En_VoiceRecogniser = 4,
            En_TelematicUnit = 5,
            En_BluetoothPhone = 6,
            En_RearDisc = 7,
            En_APIM = 8,
            En_FrontAuxInput = 9,
            En_Navigation = 10,
            En_RearAux = 11,
            En_NotReq = 12
        };
        
        CD_ARAudioSource_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_iPod)) {}
        CD_ARAudioSource_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_iPod):
                case static_cast<int32_t>(Literal::En_USB):
                case static_cast<int32_t>(Literal::En_BTAudio):
                case static_cast<int32_t>(Literal::En_AmfmRadio):
                case static_cast<int32_t>(Literal::En_FrontDisc):
                case static_cast<int32_t>(Literal::En_SDARS_DAB):
                case static_cast<int32_t>(Literal::En_InDashCdChanger):
                case static_cast<int32_t>(Literal::En_VoiceRecogniser):
                case static_cast<int32_t>(Literal::En_TelematicUnit):
                case static_cast<int32_t>(Literal::En_BluetoothPhone):
                case static_cast<int32_t>(Literal::En_RearDisc):
                case static_cast<int32_t>(Literal::En_APIM):
                case static_cast<int32_t>(Literal::En_FrontAuxInput):
                case static_cast<int32_t>(Literal::En_Navigation):
                case static_cast<int32_t>(Literal::En_RearAux):
                case static_cast<int32_t>(Literal::En_NotReq):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CD_ARAudioSource_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CD_ARAudioSource_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CD_ARAudioSource_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CD_ARAudioSource_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CD_ARAudioSource_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CD_ARAudioSource_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CD_AROperationType_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Inactive = 0,
            En_Requestaudioresource = 1,
            En_Releaseaudioresource = 2,
            En_Releaseallaudioresouces = 3,
            En_Getresourceupdate = 4,
            En_Getallresourceupdates = 5
        };
        
        CD_AROperationType_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Inactive)) {}
        CD_AROperationType_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_Requestaudioresource):
                case static_cast<int32_t>(Literal::En_Releaseaudioresource):
                case static_cast<int32_t>(Literal::En_Releaseallaudioresouces):
                case static_cast<int32_t>(Literal::En_Getresourceupdate):
                case static_cast<int32_t>(Literal::En_Getallresourceupdates):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CD_AROperationType_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CD_AROperationType_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CD_AROperationType_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CD_AROperationType_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CD_AROperationType_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CD_AROperationType_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CD_ARReqstrSystem_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_FrontRequester = 0,
            En_RearRequester = 1
        };
        
        CD_ARReqstrSystem_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_FrontRequester)) {}
        CD_ARReqstrSystem_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_FrontRequester):
                case static_cast<int32_t>(Literal::En_RearRequester):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CD_ARReqstrSystem_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CD_ARReqstrSystem_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CD_ARReqstrSystem_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CD_ARReqstrSystem_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CD_ARReqstrSystem_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CD_ARReqstrSystem_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CD_ARReqstrPriority_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_EmergencyServ = 0,
            En_TelService = 1,
            En_AutoAnswer = 2,
            En_Ta = 3,
            En_PttMutevoice = 4,
            En_NavUserVoiceCmd = 5,
            En_NavSysVoiceCmd = 6,
            En_Radio = 7,
            En_Disc = 8,
            En_Alarm = 9,
            En_Ptynews = 10,
            En_Aux_ExtSource = 11,
            En_BT_BTNavAndTelMute = 12,
            En_ManualAudioMute = 13,
            En_NotReq = 14
        };
        
        CD_ARReqstrPriority_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_EmergencyServ)) {}
        CD_ARReqstrPriority_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_EmergencyServ):
                case static_cast<int32_t>(Literal::En_TelService):
                case static_cast<int32_t>(Literal::En_AutoAnswer):
                case static_cast<int32_t>(Literal::En_Ta):
                case static_cast<int32_t>(Literal::En_PttMutevoice):
                case static_cast<int32_t>(Literal::En_NavUserVoiceCmd):
                case static_cast<int32_t>(Literal::En_NavSysVoiceCmd):
                case static_cast<int32_t>(Literal::En_Radio):
                case static_cast<int32_t>(Literal::En_Disc):
                case static_cast<int32_t>(Literal::En_Alarm):
                case static_cast<int32_t>(Literal::En_Ptynews):
                case static_cast<int32_t>(Literal::En_Aux_ExtSource):
                case static_cast<int32_t>(Literal::En_BT_BTNavAndTelMute):
                case static_cast<int32_t>(Literal::En_ManualAudioMute):
                case static_cast<int32_t>(Literal::En_NotReq):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CD_ARReqstrPriority_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CD_ARReqstrPriority_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CD_ARReqstrPriority_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CD_ARReqstrPriority_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CD_ARReqstrPriority_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CD_ARReqstrPriority_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct CD_Request_Signals_struct : CommonAPI::Struct<CD_ARAudioSource_Rq_enum, CD_AROperationType_Rq_enum, CD_ARReqstrSystem_Rq_enum, CD_ARReqstrPriority_Rq_enum> {
    	
    	CD_Request_Signals_struct() {
    	}
    	CD_Request_Signals_struct(const CD_ARAudioSource_Rq_enum &_cD_ARAudioSource_Rq_enum, const CD_AROperationType_Rq_enum &_cD_AROperationType_Rq_enum, const CD_ARReqstrSystem_Rq_enum &_cD_ARReqstrSystem_Rq_enum, const CD_ARReqstrPriority_Rq_enum &_cD_ARReqstrPriority_Rq_enum)
    	{
    		std::get<0>(values_) = _cD_ARAudioSource_Rq_enum;
    		std::get<1>(values_) = _cD_AROperationType_Rq_enum;
    		std::get<2>(values_) = _cD_ARReqstrSystem_Rq_enum;
    		std::get<3>(values_) = _cD_ARReqstrPriority_Rq_enum;
    	}
    	inline const CD_ARAudioSource_Rq_enum &getCD_ARAudioSource_Rq_enum() const { return std::get<0>(values_); }
    	inline void setCD_ARAudioSource_Rq_enum(const CD_ARAudioSource_Rq_enum &_value) { std::get<0>(values_) = _value; }
    	inline const CD_AROperationType_Rq_enum &getCD_AROperationType_Rq_enum() const { return std::get<1>(values_); }
    	inline void setCD_AROperationType_Rq_enum(const CD_AROperationType_Rq_enum &_value) { std::get<1>(values_) = _value; }
    	inline const CD_ARReqstrSystem_Rq_enum &getCD_ARReqstrSystem_Rq_enum() const { return std::get<2>(values_); }
    	inline void setCD_ARReqstrSystem_Rq_enum(const CD_ARReqstrSystem_Rq_enum &_value) { std::get<2>(values_) = _value; }
    	inline const CD_ARReqstrPriority_Rq_enum &getCD_ARReqstrPriority_Rq_enum() const { return std::get<3>(values_); }
    	inline void setCD_ARReqstrPriority_Rq_enum(const CD_ARReqstrPriority_Rq_enum &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const CD_Request_Signals_struct& _other) const {
                return (getCD_ARAudioSource_Rq_enum() == _other.getCD_ARAudioSource_Rq_enum() && getCD_AROperationType_Rq_enum() == _other.getCD_AROperationType_Rq_enum() && getCD_ARReqstrSystem_Rq_enum() == _other.getCD_ARReqstrSystem_Rq_enum() && getCD_ARReqstrPriority_Rq_enum() == _other.getCD_ARReqstrPriority_Rq_enum());
        }
    	inline bool operator!=(const CD_Request_Signals_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct Dsp_GetCDTOCDData_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Inactive = 0,
            En_Off = 2,
            En_TOC = 1
        };
        
        Dsp_GetCDTOCDData_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Inactive)) {}
        Dsp_GetCDTOCDData_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_TOC):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Dsp_GetCDTOCDData_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Dsp_GetCDTOCDData_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Dsp_GetCDTOCDData_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Dsp_GetCDTOCDData_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Dsp_GetCDTOCDData_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Dsp_GetCDTOCDData_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Dsp_AudioSourceSel_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_SDCard = 5,
            En_Reserved = 4,
            En_USB = 3,
            En_BTAudio = 2,
            En_CD = 1,
            En_Inactive = 0
        };
        
        Dsp_AudioSourceSel_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_SDCard)) {}
        Dsp_AudioSourceSel_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_SDCard):
                case static_cast<int32_t>(Literal::En_Reserved):
                case static_cast<int32_t>(Literal::En_USB):
                case static_cast<int32_t>(Literal::En_BTAudio):
                case static_cast<int32_t>(Literal::En_CD):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Dsp_AudioSourceSel_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Dsp_AudioSourceSel_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Dsp_AudioSourceSel_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Dsp_AudioSourceSel_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Dsp_AudioSourceSel_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Dsp_AudioSourceSel_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Dsp_CutItem_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Inactive = 3,
            En_ThreeQuarterFromTheBeginningOneQ = 2,
            En_End = 1,
            En_Beginning = 0
        };
        
        Dsp_CutItem_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Inactive)) {}
        Dsp_CutItem_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_ThreeQuarterFromTheBeginningOneQ):
                case static_cast<int32_t>(Literal::En_End):
                case static_cast<int32_t>(Literal::En_Beginning):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Dsp_CutItem_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Dsp_CutItem_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Dsp_CutItem_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Dsp_CutItem_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Dsp_CutItem_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Dsp_CutItem_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Dsp_AudioSourceSel3_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_USB = 3,
            En_BTAudio = 2,
            En_CD = 1,
            En_Inactive = 0
        };
        
        Dsp_AudioSourceSel3_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_USB)) {}
        Dsp_AudioSourceSel3_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_USB):
                case static_cast<int32_t>(Literal::En_BTAudio):
                case static_cast<int32_t>(Literal::En_CD):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Dsp_AudioSourceSel3_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Dsp_AudioSourceSel3_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Dsp_AudioSourceSel3_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Dsp_AudioSourceSel3_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Dsp_AudioSourceSel3_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Dsp_AudioSourceSel3_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct NAV_LoadEjectDisc_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Inactive = 0,
            En_Disc1 = 1,
            En_Disc2 = 2,
            En_Disc3 = 3,
            En_Disc4 = 4,
            En_Disc5 = 5,
            En_Disc6 = 6,
            En_All = 7
        };
        
        NAV_LoadEjectDisc_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Inactive)) {}
        NAV_LoadEjectDisc_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_Disc1):
                case static_cast<int32_t>(Literal::En_Disc2):
                case static_cast<int32_t>(Literal::En_Disc3):
                case static_cast<int32_t>(Literal::En_Disc4):
                case static_cast<int32_t>(Literal::En_Disc5):
                case static_cast<int32_t>(Literal::En_Disc6):
                case static_cast<int32_t>(Literal::En_All):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const NAV_LoadEjectDisc_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const NAV_LoadEjectDisc_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const NAV_LoadEjectDisc_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const NAV_LoadEjectDisc_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const NAV_LoadEjectDisc_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const NAV_LoadEjectDisc_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct NAV_LoadEjectMode_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Inactive = 0,
            En_Load = 1,
            En_Eject = 2,
            En_EndloadMode = 3
        };
        
        NAV_LoadEjectMode_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Inactive)) {}
        NAV_LoadEjectMode_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_Load):
                case static_cast<int32_t>(Literal::En_Eject):
                case static_cast<int32_t>(Literal::En_EndloadMode):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const NAV_LoadEjectMode_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const NAV_LoadEjectMode_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const NAV_LoadEjectMode_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const NAV_LoadEjectMode_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const NAV_LoadEjectMode_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const NAV_LoadEjectMode_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct NAV_SetOperationMode_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_FastRewind20 = 7,
            En_FastRewind10 = 6,
            En_FastForward20 = 5,
            En_FastForward10 = 4,
            En_Pause = 3,
            En_Play = 2,
            En_Stop = 1,
            En_Inactive = 0
        };
        
        NAV_SetOperationMode_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_FastRewind20)) {}
        NAV_SetOperationMode_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_FastRewind20):
                case static_cast<int32_t>(Literal::En_FastRewind10):
                case static_cast<int32_t>(Literal::En_FastForward20):
                case static_cast<int32_t>(Literal::En_FastForward10):
                case static_cast<int32_t>(Literal::En_Pause):
                case static_cast<int32_t>(Literal::En_Play):
                case static_cast<int32_t>(Literal::En_Stop):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const NAV_SetOperationMode_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const NAV_SetOperationMode_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const NAV_SetOperationMode_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const NAV_SetOperationMode_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const NAV_SetOperationMode_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const NAV_SetOperationMode_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct NAV_CDSetShuffle_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Inactive = 0,
            En_On = 1,
            En_Off = 2,
            En_OnFolder = 3
        };
        
        NAV_CDSetShuffle_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Inactive)) {}
        NAV_CDSetShuffle_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_OnFolder):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const NAV_CDSetShuffle_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const NAV_CDSetShuffle_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const NAV_CDSetShuffle_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const NAV_CDSetShuffle_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const NAV_CDSetShuffle_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const NAV_CDSetShuffle_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct NAV_CDSetRepeat_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Inactive = 0,
            En_RepeatOnTrack = 1,
            En_Off = 2,
            En_OnFolder = 3
        };
        
        NAV_CDSetRepeat_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Inactive)) {}
        NAV_CDSetRepeat_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_RepeatOnTrack):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_OnFolder):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const NAV_CDSetRepeat_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const NAV_CDSetRepeat_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const NAV_CDSetRepeat_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const NAV_CDSetRepeat_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const NAV_CDSetRepeat_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const NAV_CDSetRepeat_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct NAV_CDSetIntroScan_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Inactive = 0,
            En_On = 1,
            En_Off = 2,
            En_OnFolder = 3
        };
        
        NAV_CDSetIntroScan_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Inactive)) {}
        NAV_CDSetIntroScan_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_OnFolder):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const NAV_CDSetIntroScan_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const NAV_CDSetIntroScan_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const NAV_CDSetIntroScan_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const NAV_CDSetIntroScan_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const NAV_CDSetIntroScan_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const NAV_CDSetIntroScan_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct ACU_Send_Signals_6_struct : CommonAPI::Struct<uint16_t, uint16_t, uint16_t> {
    	
    	ACU_Send_Signals_6_struct() {
    	}
    	ACU_Send_Signals_6_struct(const uint16_t &_ACU_TotalPlayTime_St, const uint16_t &_ACU_TrackPlaytime_St, const uint16_t &_ACU_NumberofTracks_St)
    	{
    		std::get<0>(values_) = _ACU_TotalPlayTime_St;
    		std::get<1>(values_) = _ACU_TrackPlaytime_St;
    		std::get<2>(values_) = _ACU_NumberofTracks_St;
    	}
    	inline const uint16_t &getACU_TotalPlayTime_St() const { return std::get<0>(values_); }
    	inline void setACU_TotalPlayTime_St(const uint16_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint16_t &getACU_TrackPlaytime_St() const { return std::get<1>(values_); }
    	inline void setACU_TrackPlaytime_St(const uint16_t &_value) { std::get<1>(values_) = _value; }
    	inline const uint16_t &getACU_NumberofTracks_St() const { return std::get<2>(values_); }
    	inline void setACU_NumberofTracks_St(const uint16_t &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const ACU_Send_Signals_6_struct& _other) const {
                return (getACU_TotalPlayTime_St() == _other.getACU_TotalPlayTime_St() && getACU_TrackPlaytime_St() == _other.getACU_TrackPlaytime_St() && getACU_NumberofTracks_St() == _other.getACU_NumberofTracks_St());
        }
    	inline bool operator!=(const ACU_Send_Signals_6_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct ACU_CDShuffle_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 0,
            En_On = 1,
            En_Off = 2,
            En_OnFolder = 3
        };
        
        ACU_CDShuffle_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        ACU_CDShuffle_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_OnFolder):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_CDShuffle_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_CDShuffle_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_CDShuffle_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_CDShuffle_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_CDShuffle_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_CDShuffle_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ACU_CDRepeat_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 0,
            En_RepeatOnTrack = 1,
            En_Off = 2,
            En_OnFolder = 3
        };
        
        ACU_CDRepeat_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        ACU_CDRepeat_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_RepeatOnTrack):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_OnFolder):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_CDRepeat_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_CDRepeat_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_CDRepeat_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_CDRepeat_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_CDRepeat_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_CDRepeat_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ACU_OperationMode_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 0,
            En_Stop = 1,
            En_Play = 2,
            En_Pause = 3,
            En_FastForward3x = 4,
            En_FastForward10x = 5,
            En_FastRewind3x = 6,
            En_FastRewind10x = 7
        };
        
        ACU_OperationMode_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        ACU_OperationMode_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Stop):
                case static_cast<int32_t>(Literal::En_Play):
                case static_cast<int32_t>(Literal::En_Pause):
                case static_cast<int32_t>(Literal::En_FastForward3x):
                case static_cast<int32_t>(Literal::En_FastForward10x):
                case static_cast<int32_t>(Literal::En_FastRewind3x):
                case static_cast<int32_t>(Literal::En_FastRewind10x):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_OperationMode_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_OperationMode_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_OperationMode_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_OperationMode_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_OperationMode_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_OperationMode_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ACU_Compression_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 0,
            En_Off = 1,
            En_On = 2
        };
        
        ACU_Compression_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        ACU_Compression_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_On):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_Compression_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_Compression_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_Compression_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_Compression_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_Compression_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_Compression_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ACU_CDIntroScan_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 0,
            En_On = 1,
            En_Off = 2,
            En_OnFolder = 3
        };
        
        ACU_CDIntroScan_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        ACU_CDIntroScan_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_OnFolder):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_CDIntroScan_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_CDIntroScan_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_CDIntroScan_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_CDIntroScan_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_CDIntroScan_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_CDIntroScan_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ACU_DiscCoding_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Cdda_CDTextAvailable = 6,
            En_MP3_DVD = 5,
            En_DVD = 4,
            En_NonAudioCD = 3,
            En_Mp3 = 2,
            En_Cdda__NoCDTextAvailable = 1,
            En_Invalid = 0
        };
        
        ACU_DiscCoding_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Cdda_CDTextAvailable)) {}
        ACU_DiscCoding_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Cdda_CDTextAvailable):
                case static_cast<int32_t>(Literal::En_MP3_DVD):
                case static_cast<int32_t>(Literal::En_DVD):
                case static_cast<int32_t>(Literal::En_NonAudioCD):
                case static_cast<int32_t>(Literal::En_Mp3):
                case static_cast<int32_t>(Literal::En_Cdda__NoCDTextAvailable):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_DiscCoding_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_DiscCoding_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_DiscCoding_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_DiscCoding_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_DiscCoding_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_DiscCoding_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct ACU_Send_Signals_5_struct : CommonAPI::Struct<ACU_CDShuffle_St_enum, ACU_CDRepeat_St_enum, ACU_OperationMode_St_enum, uint8_t, ACU_Compression_St_enum, ACU_CDIntroScan_St_enum, ACU_DiscCoding_St_enum> {
    	
    	ACU_Send_Signals_5_struct() {
    	}
    	ACU_Send_Signals_5_struct(const ACU_CDShuffle_St_enum &_aCU_CDShuffle_St_enum, const ACU_CDRepeat_St_enum &_aCU_CDRepeat_St_enum, const ACU_OperationMode_St_enum &_aCU_OperationMode_St_enum, const uint8_t &_ACU_MagazineSlots_St, const ACU_Compression_St_enum &_aCU_Compression_St_enum, const ACU_CDIntroScan_St_enum &_aCU_CDIntroScan_St_enum, const ACU_DiscCoding_St_enum &_aCU_DiscCoding_St_enum)
    	{
    		std::get<0>(values_) = _aCU_CDShuffle_St_enum;
    		std::get<1>(values_) = _aCU_CDRepeat_St_enum;
    		std::get<2>(values_) = _aCU_OperationMode_St_enum;
    		std::get<3>(values_) = _ACU_MagazineSlots_St;
    		std::get<4>(values_) = _aCU_Compression_St_enum;
    		std::get<5>(values_) = _aCU_CDIntroScan_St_enum;
    		std::get<6>(values_) = _aCU_DiscCoding_St_enum;
    	}
    	inline const ACU_CDShuffle_St_enum &getACU_CDShuffle_St_enum() const { return std::get<0>(values_); }
    	inline void setACU_CDShuffle_St_enum(const ACU_CDShuffle_St_enum &_value) { std::get<0>(values_) = _value; }
    	inline const ACU_CDRepeat_St_enum &getACU_CDRepeat_St_enum() const { return std::get<1>(values_); }
    	inline void setACU_CDRepeat_St_enum(const ACU_CDRepeat_St_enum &_value) { std::get<1>(values_) = _value; }
    	inline const ACU_OperationMode_St_enum &getACU_OperationMode_St_enum() const { return std::get<2>(values_); }
    	inline void setACU_OperationMode_St_enum(const ACU_OperationMode_St_enum &_value) { std::get<2>(values_) = _value; }
    	inline const uint8_t &getACU_MagazineSlots_St() const { return std::get<3>(values_); }
    	inline void setACU_MagazineSlots_St(const uint8_t &_value) { std::get<3>(values_) = _value; }
    	inline const ACU_Compression_St_enum &getACU_Compression_St_enum() const { return std::get<4>(values_); }
    	inline void setACU_Compression_St_enum(const ACU_Compression_St_enum &_value) { std::get<4>(values_) = _value; }
    	inline const ACU_CDIntroScan_St_enum &getACU_CDIntroScan_St_enum() const { return std::get<5>(values_); }
    	inline void setACU_CDIntroScan_St_enum(const ACU_CDIntroScan_St_enum &_value) { std::get<5>(values_) = _value; }
    	inline const ACU_DiscCoding_St_enum &getACU_DiscCoding_St_enum() const { return std::get<6>(values_); }
    	inline void setACU_DiscCoding_St_enum(const ACU_DiscCoding_St_enum &_value) { std::get<6>(values_) = _value; }
    	inline bool operator==(const ACU_Send_Signals_5_struct& _other) const {
                return (getACU_CDShuffle_St_enum() == _other.getACU_CDShuffle_St_enum() && getACU_CDRepeat_St_enum() == _other.getACU_CDRepeat_St_enum() && getACU_OperationMode_St_enum() == _other.getACU_OperationMode_St_enum() && getACU_MagazineSlots_St() == _other.getACU_MagazineSlots_St() && getACU_Compression_St_enum() == _other.getACU_Compression_St_enum() && getACU_CDIntroScan_St_enum() == _other.getACU_CDIntroScan_St_enum() && getACU_DiscCoding_St_enum() == _other.getACU_DiscCoding_St_enum());
        }
    	inline bool operator!=(const ACU_Send_Signals_5_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct ACU_SendSignals_9_struct : CommonAPI::Struct<uint32_t> {
    	
    	ACU_SendSignals_9_struct() {
    	}
    	ACU_SendSignals_9_struct(const uint32_t &_ACU_ActiveTrackNum1_St)
    	{
    		std::get<0>(values_) = _ACU_ActiveTrackNum1_St;
    	}
    	inline const uint32_t &getACU_ActiveTrackNum1_St() const { return std::get<0>(values_); }
    	inline void setACU_ActiveTrackNum1_St(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const ACU_SendSignals_9_struct& _other) const {
                return (getACU_ActiveTrackNum1_St() == _other.getACU_ActiveTrackNum1_St());
        }
    	inline bool operator!=(const ACU_SendSignals_9_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct Dsp_FolderContent_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Inactive = 2,
            En_RequestContentFromParentFolderOf = 1,
            En_RequestContentFromParameterFolde = 0
        };
        
        Dsp_FolderContent_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Inactive)) {}
        Dsp_FolderContent_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_RequestContentFromParentFolderOf):
                case static_cast<int32_t>(Literal::En_RequestContentFromParameterFolde):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Dsp_FolderContent_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Dsp_FolderContent_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Dsp_FolderContent_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Dsp_FolderContent_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Dsp_FolderContent_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Dsp_FolderContent_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Dsp_CutItem2_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Inactive = 3,
            En_ThreeQuarterFromTheBeginningOneQ = 2,
            En_End = 1,
            En_Beginning = 0
        };
        
        Dsp_CutItem2_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Inactive)) {}
        Dsp_CutItem2_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_ThreeQuarterFromTheBeginningOneQ):
                case static_cast<int32_t>(Literal::En_End):
                case static_cast<int32_t>(Literal::En_Beginning):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Dsp_CutItem2_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Dsp_CutItem2_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Dsp_CutItem2_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Dsp_CutItem2_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Dsp_CutItem2_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Dsp_CutItem2_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Dsp_AudioSourceSel2_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Reserved = 4,
            En_USB = 3,
            En_BTAudio = 2,
            En_CD = 1,
            En_Inactive = 0
        };
        
        Dsp_AudioSourceSel2_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Reserved)) {}
        Dsp_AudioSourceSel2_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Reserved):
                case static_cast<int32_t>(Literal::En_USB):
                case static_cast<int32_t>(Literal::En_BTAudio):
                case static_cast<int32_t>(Literal::En_CD):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Dsp_AudioSourceSel2_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Dsp_AudioSourceSel2_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Dsp_AudioSourceSel2_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Dsp_AudioSourceSel2_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Dsp_AudioSourceSel2_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Dsp_AudioSourceSel2_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct HMI_SetCompression_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Inactive = 0,
            En_On = 1,
            En_Off = 2
        };
        
        HMI_SetCompression_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Inactive)) {}
        HMI_SetCompression_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const HMI_SetCompression_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HMI_SetCompression_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HMI_SetCompression_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HMI_SetCompression_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HMI_SetCompression_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const HMI_SetCompression_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct HMI_SkipTrack_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Decrement = 2,
            En_Increment = 1,
            En_Inactive = 0
        };
        
        HMI_SkipTrack_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Decrement)) {}
        HMI_SkipTrack_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Decrement):
                case static_cast<int32_t>(Literal::En_Increment):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const HMI_SkipTrack_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HMI_SkipTrack_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HMI_SkipTrack_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HMI_SkipTrack_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HMI_SkipTrack_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const HMI_SkipTrack_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.harman.ford.mediaplayback_types";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct mediaplayback_types

} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for ACU_CurrTUBand_St_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::ACU_CurrTUBand_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::ACU_CurrTUBand_St_enum& aCU_CurrTUBand_St_enum) const {
            return static_cast<int32_t>(aCU_CurrTUBand_St_enum);
        }
    };
    //Hash for ACU_RadioSeekMode2_St_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::ACU_RadioSeekMode2_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::ACU_RadioSeekMode2_St_enum& aCU_RadioSeekMode2_St_enum) const {
            return static_cast<int32_t>(aCU_RadioSeekMode2_St_enum);
        }
    };
    //Hash for ACU_CompLogic_St_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::ACU_CompLogic_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::ACU_CompLogic_St_enum& aCU_CompLogic_St_enum) const {
            return static_cast<int32_t>(aCU_CompLogic_St_enum);
        }
    };
    //Hash for ACU_ActServiceLink_St_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::ACU_ActServiceLink_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::ACU_ActServiceLink_St_enum& aCU_ActServiceLink_St_enum) const {
            return static_cast<int32_t>(aCU_ActServiceLink_St_enum);
        }
    };
    //Hash for ACU_CurrTUDRService2_St_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::ACU_CurrTUDRService2_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::ACU_CurrTUDRService2_St_enum& aCU_CurrTUDRService2_St_enum) const {
            return static_cast<int32_t>(aCU_CurrTUDRService2_St_enum);
        }
    };
    //Hash for CD_FunctionStatus_St_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::CD_FunctionStatus_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::CD_FunctionStatus_St_enum& cD_FunctionStatus_St_enum) const {
            return static_cast<int32_t>(cD_FunctionStatus_St_enum);
        }
    };
    //Hash for CD_HardwareError_St_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::CD_HardwareError_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::CD_HardwareError_St_enum& cD_HardwareError_St_enum) const {
            return static_cast<int32_t>(cD_HardwareError_St_enum);
        }
    };
    //Hash for CDError_St_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::CDError_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::CDError_St_enum& cDError_St_enum) const {
            return static_cast<int32_t>(cDError_St_enum);
        }
    };
    //Hash for CD_ARAudioSource_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::CD_ARAudioSource_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::CD_ARAudioSource_Rq_enum& cD_ARAudioSource_Rq_enum) const {
            return static_cast<int32_t>(cD_ARAudioSource_Rq_enum);
        }
    };
    //Hash for CD_AROperationType_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::CD_AROperationType_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::CD_AROperationType_Rq_enum& cD_AROperationType_Rq_enum) const {
            return static_cast<int32_t>(cD_AROperationType_Rq_enum);
        }
    };
    //Hash for CD_ARReqstrSystem_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::CD_ARReqstrSystem_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::CD_ARReqstrSystem_Rq_enum& cD_ARReqstrSystem_Rq_enum) const {
            return static_cast<int32_t>(cD_ARReqstrSystem_Rq_enum);
        }
    };
    //Hash for CD_ARReqstrPriority_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::CD_ARReqstrPriority_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::CD_ARReqstrPriority_Rq_enum& cD_ARReqstrPriority_Rq_enum) const {
            return static_cast<int32_t>(cD_ARReqstrPriority_Rq_enum);
        }
    };
    //Hash for Dsp_GetCDTOCDData_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::Dsp_GetCDTOCDData_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::Dsp_GetCDTOCDData_Rq_enum& dsp_GetCDTOCDData_Rq_enum) const {
            return static_cast<int32_t>(dsp_GetCDTOCDData_Rq_enum);
        }
    };
    //Hash for Dsp_AudioSourceSel_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::Dsp_AudioSourceSel_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::Dsp_AudioSourceSel_Rq_enum& dsp_AudioSourceSel_Rq_enum) const {
            return static_cast<int32_t>(dsp_AudioSourceSel_Rq_enum);
        }
    };
    //Hash for Dsp_CutItem_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::Dsp_CutItem_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::Dsp_CutItem_Rq_enum& dsp_CutItem_Rq_enum) const {
            return static_cast<int32_t>(dsp_CutItem_Rq_enum);
        }
    };
    //Hash for Dsp_AudioSourceSel3_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::Dsp_AudioSourceSel3_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::Dsp_AudioSourceSel3_Rq_enum& dsp_AudioSourceSel3_Rq_enum) const {
            return static_cast<int32_t>(dsp_AudioSourceSel3_Rq_enum);
        }
    };
    //Hash for NAV_LoadEjectDisc_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::NAV_LoadEjectDisc_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::NAV_LoadEjectDisc_Rq_enum& nAV_LoadEjectDisc_Rq_enum) const {
            return static_cast<int32_t>(nAV_LoadEjectDisc_Rq_enum);
        }
    };
    //Hash for NAV_LoadEjectMode_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::NAV_LoadEjectMode_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::NAV_LoadEjectMode_Rq_enum& nAV_LoadEjectMode_Rq_enum) const {
            return static_cast<int32_t>(nAV_LoadEjectMode_Rq_enum);
        }
    };
    //Hash for NAV_SetOperationMode_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::NAV_SetOperationMode_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::NAV_SetOperationMode_Rq_enum& nAV_SetOperationMode_Rq_enum) const {
            return static_cast<int32_t>(nAV_SetOperationMode_Rq_enum);
        }
    };
    //Hash for NAV_CDSetShuffle_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::NAV_CDSetShuffle_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::NAV_CDSetShuffle_Rq_enum& nAV_CDSetShuffle_Rq_enum) const {
            return static_cast<int32_t>(nAV_CDSetShuffle_Rq_enum);
        }
    };
    //Hash for NAV_CDSetRepeat_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::NAV_CDSetRepeat_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::NAV_CDSetRepeat_Rq_enum& nAV_CDSetRepeat_Rq_enum) const {
            return static_cast<int32_t>(nAV_CDSetRepeat_Rq_enum);
        }
    };
    //Hash for NAV_CDSetIntroScan_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::NAV_CDSetIntroScan_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::NAV_CDSetIntroScan_Rq_enum& nAV_CDSetIntroScan_Rq_enum) const {
            return static_cast<int32_t>(nAV_CDSetIntroScan_Rq_enum);
        }
    };
    //Hash for ACU_CDShuffle_St_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::ACU_CDShuffle_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::ACU_CDShuffle_St_enum& aCU_CDShuffle_St_enum) const {
            return static_cast<int32_t>(aCU_CDShuffle_St_enum);
        }
    };
    //Hash for ACU_CDRepeat_St_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::ACU_CDRepeat_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::ACU_CDRepeat_St_enum& aCU_CDRepeat_St_enum) const {
            return static_cast<int32_t>(aCU_CDRepeat_St_enum);
        }
    };
    //Hash for ACU_OperationMode_St_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::ACU_OperationMode_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::ACU_OperationMode_St_enum& aCU_OperationMode_St_enum) const {
            return static_cast<int32_t>(aCU_OperationMode_St_enum);
        }
    };
    //Hash for ACU_Compression_St_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::ACU_Compression_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::ACU_Compression_St_enum& aCU_Compression_St_enum) const {
            return static_cast<int32_t>(aCU_Compression_St_enum);
        }
    };
    //Hash for ACU_CDIntroScan_St_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::ACU_CDIntroScan_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::ACU_CDIntroScan_St_enum& aCU_CDIntroScan_St_enum) const {
            return static_cast<int32_t>(aCU_CDIntroScan_St_enum);
        }
    };
    //Hash for ACU_DiscCoding_St_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::ACU_DiscCoding_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::ACU_DiscCoding_St_enum& aCU_DiscCoding_St_enum) const {
            return static_cast<int32_t>(aCU_DiscCoding_St_enum);
        }
    };
    //Hash for Dsp_FolderContent_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::Dsp_FolderContent_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::Dsp_FolderContent_Rq_enum& dsp_FolderContent_Rq_enum) const {
            return static_cast<int32_t>(dsp_FolderContent_Rq_enum);
        }
    };
    //Hash for Dsp_CutItem2_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::Dsp_CutItem2_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::Dsp_CutItem2_Rq_enum& dsp_CutItem2_Rq_enum) const {
            return static_cast<int32_t>(dsp_CutItem2_Rq_enum);
        }
    };
    //Hash for Dsp_AudioSourceSel2_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::Dsp_AudioSourceSel2_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::Dsp_AudioSourceSel2_Rq_enum& dsp_AudioSourceSel2_Rq_enum) const {
            return static_cast<int32_t>(dsp_AudioSourceSel2_Rq_enum);
        }
    };
    //Hash for HMI_SetCompression_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::HMI_SetCompression_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::HMI_SetCompression_Rq_enum& hMI_SetCompression_Rq_enum) const {
            return static_cast<int32_t>(hMI_SetCompression_Rq_enum);
        }
    };
    //Hash for HMI_SkipTrack_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::HMI_SkipTrack_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::HMI_SkipTrack_Rq_enum& hMI_SkipTrack_Rq_enum) const {
            return static_cast<int32_t>(hMI_SkipTrack_Rq_enum);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_mediaplayback_types_HPP_
