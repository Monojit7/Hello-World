/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_ORG_HARMAN_FORD_mediaplayback_PROXY_HPP_
#define V0_ORG_HARMAN_FORD_mediaplayback_PROXY_HPP_

#include <v0/org/harman/ford/mediaplaybackProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

template <typename ... _AttributeExtensions>
class mediaplaybackProxy
    : virtual public mediaplayback, 
      virtual public mediaplaybackProxyBase,
      virtual public _AttributeExtensions... {
public:
    mediaplaybackProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~mediaplaybackProxy();

    typedef mediaplayback InterfaceType;


    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute APIM_ActiveTrackNum_St.
     */
    virtual APIM_ActiveTrackNum_StAttribute& getAPIM_ActiveTrackNum_StAttribute() {
        return delegate_->getAPIM_ActiveTrackNum_StAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute APIM_NumberofTracks_St.
     */
    virtual APIM_NumberofTracks_StAttribute& getAPIM_NumberofTracks_StAttribute() {
        return delegate_->getAPIM_NumberofTracks_StAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute aCU_CurrTUBand_St_enum.
     */
    virtual ACU_CurrTUBand_St_enumAttribute& getACU_CurrTUBand_St_enumAttribute() {
        return delegate_->getACU_CurrTUBand_St_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute aCU_RadioSeekMode2_St_enum.
     */
    virtual ACU_RadioSeekMode2_St_enumAttribute& getACU_RadioSeekMode2_St_enumAttribute() {
        return delegate_->getACU_RadioSeekMode2_St_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute ACU_CurrentFreq_St.
     */
    virtual ACU_CurrentFreq_StAttribute& getACU_CurrentFreq_StAttribute() {
        return delegate_->getACU_CurrentFreq_StAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute aCU_CompLogic_St_enum.
     */
    virtual ACU_CompLogic_St_enumAttribute& getACU_CompLogic_St_enumAttribute() {
        return delegate_->getACU_CompLogic_St_enumAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute CD_Send_Signals.
     */
    virtual CD_Send_SignalsAttribute& getCD_Send_SignalsAttribute() {
        return delegate_->getCD_Send_SignalsAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute CD_Request_Signals.
     */
    virtual CD_Request_SignalsAttribute& getCD_Request_SignalsAttribute() {
        return delegate_->getCD_Request_SignalsAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute dsp_CutItem_Rq_enum.
     */
    virtual Dsp_CutItem_Rq_enumAttribute& getDsp_CutItem_Rq_enumAttribute() {
        return delegate_->getDsp_CutItem_Rq_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute Dsp_ItemNameLength_Rq.
     */
    virtual Dsp_ItemNameLength_RqAttribute& getDsp_ItemNameLength_RqAttribute() {
        return delegate_->getDsp_ItemNameLength_RqAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute Dsp_FolderNumber_Rq.
     */
    virtual Dsp_FolderNumber_RqAttribute& getDsp_FolderNumber_RqAttribute() {
        return delegate_->getDsp_FolderNumber_RqAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute Dsp_SourceSetTrack_Rq.
     */
    virtual Dsp_SourceSetTrack_RqAttribute& getDsp_SourceSetTrack_RqAttribute() {
        return delegate_->getDsp_SourceSetTrack_RqAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute Dsp_FolderNumber3_Rq.
     */
    virtual Dsp_FolderNumber3_RqAttribute& getDsp_FolderNumber3_RqAttribute() {
        return delegate_->getDsp_FolderNumber3_RqAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute Dsp_ItemIndex_Rq.
     */
    virtual Dsp_ItemIndex_RqAttribute& getDsp_ItemIndex_RqAttribute() {
        return delegate_->getDsp_ItemIndex_RqAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute Dsp_PlayFrstTrInFldr_Rq.
     */
    virtual Dsp_PlayFrstTrInFldr_RqAttribute& getDsp_PlayFrstTrInFldr_RqAttribute() {
        return delegate_->getDsp_PlayFrstTrInFldr_RqAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute nAV_LoadEjectDisc_Rq_enum.
     */
    virtual NAV_LoadEjectDisc_Rq_enumAttribute& getNAV_LoadEjectDisc_Rq_enumAttribute() {
        return delegate_->getNAV_LoadEjectDisc_Rq_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute nAV_SetOperationMode_Rq_enum.
     */
    virtual NAV_SetOperationMode_Rq_enumAttribute& getNAV_SetOperationMode_Rq_enumAttribute() {
        return delegate_->getNAV_SetOperationMode_Rq_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute nAV_CDSetIntroScan_Rq_enum.
     */
    virtual NAV_CDSetIntroScan_Rq_enumAttribute& getNAV_CDSetIntroScan_Rq_enumAttribute() {
        return delegate_->getNAV_CDSetIntroScan_Rq_enumAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute ACU_Send_Signals_6.
     */
    virtual ACU_Send_Signals_6Attribute& getACU_Send_Signals_6Attribute() {
        return delegate_->getACU_Send_Signals_6Attribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute ACU_Send_Signals_5.
     */
    virtual ACU_Send_Signals_5Attribute& getACU_Send_Signals_5Attribute() {
        return delegate_->getACU_Send_Signals_5Attribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute ACU_SendSignals_9.
     */
    virtual ACU_SendSignals_9Attribute& getACU_SendSignals_9Attribute() {
        return delegate_->getACU_SendSignals_9Attribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute Dsp_ItemNameLength2_Rq.
     */
    virtual Dsp_ItemNameLength2_RqAttribute& getDsp_ItemNameLength2_RqAttribute() {
        return delegate_->getDsp_ItemNameLength2_RqAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute dsp_FolderContent_Rq_enum.
     */
    virtual Dsp_FolderContent_Rq_enumAttribute& getDsp_FolderContent_Rq_enumAttribute() {
        return delegate_->getDsp_FolderContent_Rq_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute dsp_CutItem2_Rq_enum.
     */
    virtual Dsp_CutItem2_Rq_enumAttribute& getDsp_CutItem2_Rq_enumAttribute() {
        return delegate_->getDsp_CutItem2_Rq_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute Dsp_NbrOfItems2_Rq.
     */
    virtual Dsp_NbrOfItems2_RqAttribute& getDsp_NbrOfItems2_RqAttribute() {
        return delegate_->getDsp_NbrOfItems2_RqAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute Dsp_FolderNumber2_Rq.
     */
    virtual Dsp_FolderNumber2_RqAttribute& getDsp_FolderNumber2_RqAttribute() {
        return delegate_->getDsp_FolderNumber2_RqAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute Dsp_StartItemIndexRq.
     */
    virtual Dsp_StartItemIndexRqAttribute& getDsp_StartItemIndexRqAttribute() {
        return delegate_->getDsp_StartItemIndexRqAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute hMI_SetCompression_Rq_enum.
     */
    virtual HMI_SetCompression_Rq_enumAttribute& getHMI_SetCompression_Rq_enumAttribute() {
        return delegate_->getHMI_SetCompression_Rq_enumAttribute();
    }


    /**
     * description: No Information Available
     * Calls ACU_CurrPreset2_St_method with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void ACU_CurrPreset2_St_method(const uint8_t &_ACU_CurrPreset2_St, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: No Information Available
     * Calls ACU_CurrentPSName_St_method with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void ACU_CurrentPSName_St_method(const uint64_t &_ACU_CurrentPSName_St, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: No Information Available
     * Calls ACU_CurrTUDABBlock_St_method with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void ACU_CurrTUDABBlock_St_method(const uint16_t &_ACU_CurrTUDABBlock_St, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: No Information Available
     * Calls ACU_ActServiceLink_St_method with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void ACU_ActServiceLink_St_method(const ::v0::org::harman::ford::mediaplayback_types::ACU_ActServiceLink_St_enum &_aCU_ActServiceLink_St_enum, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: No Information Available
     * Calls ACU_CurrTUDRService2_St_method with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void ACU_CurrTUDRService2_St_method(const ::v0::org::harman::ford::mediaplayback_types::ACU_CurrTUDRService2_St_enum &_aCU_CurrTUDRService2_St_enum, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: No Information Available
     * Calls Dsp_GetCDTOCDData_Rq_method with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void Dsp_GetCDTOCDData_Rq_method(const ::v0::org::harman::ford::mediaplayback_types::Dsp_GetCDTOCDData_Rq_enum &_dsp_GetCDTOCDData_Rq_enum, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: No Information Available
     * Calls Dsp_AudioSourceSel_Rq_method with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void Dsp_AudioSourceSel_Rq_method(const ::v0::org::harman::ford::mediaplayback_types::Dsp_AudioSourceSel_Rq_enum &_dsp_AudioSourceSel_Rq_enum, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: No Information Available
     * Calls Dsp_AudioSourceSel3_Rq_method with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void Dsp_AudioSourceSel3_Rq_method(const ::v0::org::harman::ford::mediaplayback_types::Dsp_AudioSourceSel3_Rq_enum &_dsp_AudioSourceSel3_Rq_enum, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: No Information Available
     * Calls NAV_LoadEjectMode_Rq_method with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void NAV_LoadEjectMode_Rq_method(const ::v0::org::harman::ford::mediaplayback_types::NAV_LoadEjectMode_Rq_enum &_nAV_LoadEjectMode_Rq_enum, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: No Information Available
     * Calls NAV_CDSetShuffle_Rq_method with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void NAV_CDSetShuffle_Rq_method(const ::v0::org::harman::ford::mediaplayback_types::NAV_CDSetShuffle_Rq_enum &_nAV_CDSetShuffle_Rq_enum, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: No Information Available
     * Calls NAV_CDSetRepeat_Rq_method with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void NAV_CDSetRepeat_Rq_method(const ::v0::org::harman::ford::mediaplayback_types::NAV_CDSetRepeat_Rq_enum &_nAV_CDSetRepeat_Rq_enum, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: No Information Available
     * Calls DISP_SetVolume_Rq_method with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void DISP_SetVolume_Rq_method(const uint8_t &_DISP_SetVolume_Rq, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: No Information Available
     * Calls Dsp_AudioSourceSel2_Rq_method with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void Dsp_AudioSourceSel2_Rq_method(const ::v0::org::harman::ford::mediaplayback_types::Dsp_AudioSourceSel2_Rq_enum &_dsp_AudioSourceSel2_Rq_enum, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: No Information Available
     * Calls HMI_SkipTrack_Rq_method with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void HMI_SkipTrack_Rq_method(const ::v0::org::harman::ford::mediaplayback_types::HMI_SkipTrack_Rq_enum &_hMI_SkipTrack_Rq_enum, CommonAPI::CallStatus &_internalCallStatus);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<mediaplaybackProxyBase> delegate_;
};

typedef mediaplaybackProxy<> mediaplaybackProxyDefault;

namespace mediaplaybackExtensions {
    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class APIM_ActiveTrackNum_StAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::APIM_ActiveTrackNum_StAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::APIM_ActiveTrackNum_StAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        APIM_ActiveTrackNum_StAttributeExtension() {}
    #endif
    
        APIM_ActiveTrackNum_StAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getAPIM_ActiveTrackNum_StAttribute()) {
        }
    
        inline extension_type& getAPIM_ActiveTrackNum_StAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class APIM_NumberofTracks_StAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::APIM_NumberofTracks_StAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::APIM_NumberofTracks_StAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        APIM_NumberofTracks_StAttributeExtension() {}
    #endif
    
        APIM_NumberofTracks_StAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getAPIM_NumberofTracks_StAttribute()) {
        }
    
        inline extension_type& getAPIM_NumberofTracks_StAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class ACU_CurrTUBand_St_enumAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::ACU_CurrTUBand_St_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::ACU_CurrTUBand_St_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ACU_CurrTUBand_St_enumAttributeExtension() {}
    #endif
    
        ACU_CurrTUBand_St_enumAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getACU_CurrTUBand_St_enumAttribute()) {
        }
    
        inline extension_type& getACU_CurrTUBand_St_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class ACU_RadioSeekMode2_St_enumAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::ACU_RadioSeekMode2_St_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::ACU_RadioSeekMode2_St_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ACU_RadioSeekMode2_St_enumAttributeExtension() {}
    #endif
    
        ACU_RadioSeekMode2_St_enumAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getACU_RadioSeekMode2_St_enumAttribute()) {
        }
    
        inline extension_type& getACU_RadioSeekMode2_St_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class ACU_CurrentFreq_StAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::ACU_CurrentFreq_StAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::ACU_CurrentFreq_StAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ACU_CurrentFreq_StAttributeExtension() {}
    #endif
    
        ACU_CurrentFreq_StAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getACU_CurrentFreq_StAttribute()) {
        }
    
        inline extension_type& getACU_CurrentFreq_StAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class ACU_CompLogic_St_enumAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::ACU_CompLogic_St_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::ACU_CompLogic_St_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ACU_CompLogic_St_enumAttributeExtension() {}
    #endif
    
        ACU_CompLogic_St_enumAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getACU_CompLogic_St_enumAttribute()) {
        }
    
        inline extension_type& getACU_CompLogic_St_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class CD_Send_SignalsAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::CD_Send_SignalsAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::CD_Send_SignalsAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CD_Send_SignalsAttributeExtension() {}
    #endif
    
        CD_Send_SignalsAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getCD_Send_SignalsAttribute()) {
        }
    
        inline extension_type& getCD_Send_SignalsAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class CD_Request_SignalsAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::CD_Request_SignalsAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::CD_Request_SignalsAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CD_Request_SignalsAttributeExtension() {}
    #endif
    
        CD_Request_SignalsAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getCD_Request_SignalsAttribute()) {
        }
    
        inline extension_type& getCD_Request_SignalsAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class Dsp_CutItem_Rq_enumAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::Dsp_CutItem_Rq_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::Dsp_CutItem_Rq_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Dsp_CutItem_Rq_enumAttributeExtension() {}
    #endif
    
        Dsp_CutItem_Rq_enumAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getDsp_CutItem_Rq_enumAttribute()) {
        }
    
        inline extension_type& getDsp_CutItem_Rq_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class Dsp_ItemNameLength_RqAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::Dsp_ItemNameLength_RqAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::Dsp_ItemNameLength_RqAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Dsp_ItemNameLength_RqAttributeExtension() {}
    #endif
    
        Dsp_ItemNameLength_RqAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getDsp_ItemNameLength_RqAttribute()) {
        }
    
        inline extension_type& getDsp_ItemNameLength_RqAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class Dsp_FolderNumber_RqAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::Dsp_FolderNumber_RqAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::Dsp_FolderNumber_RqAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Dsp_FolderNumber_RqAttributeExtension() {}
    #endif
    
        Dsp_FolderNumber_RqAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getDsp_FolderNumber_RqAttribute()) {
        }
    
        inline extension_type& getDsp_FolderNumber_RqAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class Dsp_SourceSetTrack_RqAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::Dsp_SourceSetTrack_RqAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::Dsp_SourceSetTrack_RqAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Dsp_SourceSetTrack_RqAttributeExtension() {}
    #endif
    
        Dsp_SourceSetTrack_RqAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getDsp_SourceSetTrack_RqAttribute()) {
        }
    
        inline extension_type& getDsp_SourceSetTrack_RqAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class Dsp_FolderNumber3_RqAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::Dsp_FolderNumber3_RqAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::Dsp_FolderNumber3_RqAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Dsp_FolderNumber3_RqAttributeExtension() {}
    #endif
    
        Dsp_FolderNumber3_RqAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getDsp_FolderNumber3_RqAttribute()) {
        }
    
        inline extension_type& getDsp_FolderNumber3_RqAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class Dsp_ItemIndex_RqAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::Dsp_ItemIndex_RqAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::Dsp_ItemIndex_RqAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Dsp_ItemIndex_RqAttributeExtension() {}
    #endif
    
        Dsp_ItemIndex_RqAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getDsp_ItemIndex_RqAttribute()) {
        }
    
        inline extension_type& getDsp_ItemIndex_RqAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class Dsp_PlayFrstTrInFldr_RqAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::Dsp_PlayFrstTrInFldr_RqAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::Dsp_PlayFrstTrInFldr_RqAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Dsp_PlayFrstTrInFldr_RqAttributeExtension() {}
    #endif
    
        Dsp_PlayFrstTrInFldr_RqAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getDsp_PlayFrstTrInFldr_RqAttribute()) {
        }
    
        inline extension_type& getDsp_PlayFrstTrInFldr_RqAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class NAV_LoadEjectDisc_Rq_enumAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::NAV_LoadEjectDisc_Rq_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::NAV_LoadEjectDisc_Rq_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        NAV_LoadEjectDisc_Rq_enumAttributeExtension() {}
    #endif
    
        NAV_LoadEjectDisc_Rq_enumAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getNAV_LoadEjectDisc_Rq_enumAttribute()) {
        }
    
        inline extension_type& getNAV_LoadEjectDisc_Rq_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class NAV_SetOperationMode_Rq_enumAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::NAV_SetOperationMode_Rq_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::NAV_SetOperationMode_Rq_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        NAV_SetOperationMode_Rq_enumAttributeExtension() {}
    #endif
    
        NAV_SetOperationMode_Rq_enumAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getNAV_SetOperationMode_Rq_enumAttribute()) {
        }
    
        inline extension_type& getNAV_SetOperationMode_Rq_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class NAV_CDSetIntroScan_Rq_enumAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::NAV_CDSetIntroScan_Rq_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::NAV_CDSetIntroScan_Rq_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        NAV_CDSetIntroScan_Rq_enumAttributeExtension() {}
    #endif
    
        NAV_CDSetIntroScan_Rq_enumAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getNAV_CDSetIntroScan_Rq_enumAttribute()) {
        }
    
        inline extension_type& getNAV_CDSetIntroScan_Rq_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class ACU_Send_Signals_6AttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::ACU_Send_Signals_6Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::ACU_Send_Signals_6Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ACU_Send_Signals_6AttributeExtension() {}
    #endif
    
        ACU_Send_Signals_6AttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getACU_Send_Signals_6Attribute()) {
        }
    
        inline extension_type& getACU_Send_Signals_6AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class ACU_Send_Signals_5AttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::ACU_Send_Signals_5Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::ACU_Send_Signals_5Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ACU_Send_Signals_5AttributeExtension() {}
    #endif
    
        ACU_Send_Signals_5AttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getACU_Send_Signals_5Attribute()) {
        }
    
        inline extension_type& getACU_Send_Signals_5AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class ACU_SendSignals_9AttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::ACU_SendSignals_9Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::ACU_SendSignals_9Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ACU_SendSignals_9AttributeExtension() {}
    #endif
    
        ACU_SendSignals_9AttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getACU_SendSignals_9Attribute()) {
        }
    
        inline extension_type& getACU_SendSignals_9AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class Dsp_ItemNameLength2_RqAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::Dsp_ItemNameLength2_RqAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::Dsp_ItemNameLength2_RqAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Dsp_ItemNameLength2_RqAttributeExtension() {}
    #endif
    
        Dsp_ItemNameLength2_RqAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getDsp_ItemNameLength2_RqAttribute()) {
        }
    
        inline extension_type& getDsp_ItemNameLength2_RqAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class Dsp_FolderContent_Rq_enumAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::Dsp_FolderContent_Rq_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::Dsp_FolderContent_Rq_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Dsp_FolderContent_Rq_enumAttributeExtension() {}
    #endif
    
        Dsp_FolderContent_Rq_enumAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getDsp_FolderContent_Rq_enumAttribute()) {
        }
    
        inline extension_type& getDsp_FolderContent_Rq_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class Dsp_CutItem2_Rq_enumAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::Dsp_CutItem2_Rq_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::Dsp_CutItem2_Rq_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Dsp_CutItem2_Rq_enumAttributeExtension() {}
    #endif
    
        Dsp_CutItem2_Rq_enumAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getDsp_CutItem2_Rq_enumAttribute()) {
        }
    
        inline extension_type& getDsp_CutItem2_Rq_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class Dsp_NbrOfItems2_RqAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::Dsp_NbrOfItems2_RqAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::Dsp_NbrOfItems2_RqAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Dsp_NbrOfItems2_RqAttributeExtension() {}
    #endif
    
        Dsp_NbrOfItems2_RqAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getDsp_NbrOfItems2_RqAttribute()) {
        }
    
        inline extension_type& getDsp_NbrOfItems2_RqAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class Dsp_FolderNumber2_RqAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::Dsp_FolderNumber2_RqAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::Dsp_FolderNumber2_RqAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Dsp_FolderNumber2_RqAttributeExtension() {}
    #endif
    
        Dsp_FolderNumber2_RqAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getDsp_FolderNumber2_RqAttribute()) {
        }
    
        inline extension_type& getDsp_FolderNumber2_RqAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class Dsp_StartItemIndexRqAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::Dsp_StartItemIndexRqAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::Dsp_StartItemIndexRqAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Dsp_StartItemIndexRqAttributeExtension() {}
    #endif
    
        Dsp_StartItemIndexRqAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getDsp_StartItemIndexRqAttribute()) {
        }
    
        inline extension_type& getDsp_StartItemIndexRqAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class HMI_SetCompression_Rq_enumAttributeExtension {
     public:
        typedef _ExtensionType<mediaplaybackProxyBase::HMI_SetCompression_Rq_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaplaybackProxyBase::HMI_SetCompression_Rq_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        HMI_SetCompression_Rq_enumAttributeExtension() {}
    #endif
    
        HMI_SetCompression_Rq_enumAttributeExtension(mediaplaybackProxyBase& proxy): attributeExtension_(proxy.getHMI_SetCompression_Rq_enumAttribute()) {
        }
    
        inline extension_type& getHMI_SetCompression_Rq_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace mediaplaybackExtensions

//
// mediaplaybackProxy Implementation
//
template <typename ... _AttributeExtensions>
mediaplaybackProxy<_AttributeExtensions...>::mediaplaybackProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<mediaplaybackProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<mediaplaybackProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
mediaplaybackProxy<_AttributeExtensions...>::~mediaplaybackProxy() {
}

/**
 * description: No Information Available
 */
template <typename ... _AttributeExtensions>
void mediaplaybackProxy<_AttributeExtensions...>::ACU_CurrPreset2_St_method(const uint8_t &_ACU_CurrPreset2_St, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->ACU_CurrPreset2_St_method(_ACU_CurrPreset2_St, _internalCallStatus);
}
/**
 * description: No Information Available
 */
template <typename ... _AttributeExtensions>
void mediaplaybackProxy<_AttributeExtensions...>::ACU_CurrentPSName_St_method(const uint64_t &_ACU_CurrentPSName_St, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->ACU_CurrentPSName_St_method(_ACU_CurrentPSName_St, _internalCallStatus);
}
/**
 * description: No Information Available
 */
template <typename ... _AttributeExtensions>
void mediaplaybackProxy<_AttributeExtensions...>::ACU_CurrTUDABBlock_St_method(const uint16_t &_ACU_CurrTUDABBlock_St, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->ACU_CurrTUDABBlock_St_method(_ACU_CurrTUDABBlock_St, _internalCallStatus);
}
/**
 * description: No Information Available
 */
template <typename ... _AttributeExtensions>
void mediaplaybackProxy<_AttributeExtensions...>::ACU_ActServiceLink_St_method(const ::v0::org::harman::ford::mediaplayback_types::ACU_ActServiceLink_St_enum &_aCU_ActServiceLink_St_enum, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_aCU_ActServiceLink_St_enum.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->ACU_ActServiceLink_St_method(_aCU_ActServiceLink_St_enum, _internalCallStatus);
}
/**
 * description: No Information Available
 */
template <typename ... _AttributeExtensions>
void mediaplaybackProxy<_AttributeExtensions...>::ACU_CurrTUDRService2_St_method(const ::v0::org::harman::ford::mediaplayback_types::ACU_CurrTUDRService2_St_enum &_aCU_CurrTUDRService2_St_enum, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_aCU_CurrTUDRService2_St_enum.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->ACU_CurrTUDRService2_St_method(_aCU_CurrTUDRService2_St_enum, _internalCallStatus);
}
/**
 * description: No Information Available
 */
template <typename ... _AttributeExtensions>
void mediaplaybackProxy<_AttributeExtensions...>::Dsp_GetCDTOCDData_Rq_method(const ::v0::org::harman::ford::mediaplayback_types::Dsp_GetCDTOCDData_Rq_enum &_dsp_GetCDTOCDData_Rq_enum, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_dsp_GetCDTOCDData_Rq_enum.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->Dsp_GetCDTOCDData_Rq_method(_dsp_GetCDTOCDData_Rq_enum, _internalCallStatus);
}
/**
 * description: No Information Available
 */
template <typename ... _AttributeExtensions>
void mediaplaybackProxy<_AttributeExtensions...>::Dsp_AudioSourceSel_Rq_method(const ::v0::org::harman::ford::mediaplayback_types::Dsp_AudioSourceSel_Rq_enum &_dsp_AudioSourceSel_Rq_enum, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_dsp_AudioSourceSel_Rq_enum.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->Dsp_AudioSourceSel_Rq_method(_dsp_AudioSourceSel_Rq_enum, _internalCallStatus);
}
/**
 * description: No Information Available
 */
template <typename ... _AttributeExtensions>
void mediaplaybackProxy<_AttributeExtensions...>::Dsp_AudioSourceSel3_Rq_method(const ::v0::org::harman::ford::mediaplayback_types::Dsp_AudioSourceSel3_Rq_enum &_dsp_AudioSourceSel3_Rq_enum, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_dsp_AudioSourceSel3_Rq_enum.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->Dsp_AudioSourceSel3_Rq_method(_dsp_AudioSourceSel3_Rq_enum, _internalCallStatus);
}
/**
 * description: No Information Available
 */
template <typename ... _AttributeExtensions>
void mediaplaybackProxy<_AttributeExtensions...>::NAV_LoadEjectMode_Rq_method(const ::v0::org::harman::ford::mediaplayback_types::NAV_LoadEjectMode_Rq_enum &_nAV_LoadEjectMode_Rq_enum, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_nAV_LoadEjectMode_Rq_enum.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->NAV_LoadEjectMode_Rq_method(_nAV_LoadEjectMode_Rq_enum, _internalCallStatus);
}
/**
 * description: No Information Available
 */
template <typename ... _AttributeExtensions>
void mediaplaybackProxy<_AttributeExtensions...>::NAV_CDSetShuffle_Rq_method(const ::v0::org::harman::ford::mediaplayback_types::NAV_CDSetShuffle_Rq_enum &_nAV_CDSetShuffle_Rq_enum, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_nAV_CDSetShuffle_Rq_enum.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->NAV_CDSetShuffle_Rq_method(_nAV_CDSetShuffle_Rq_enum, _internalCallStatus);
}
/**
 * description: No Information Available
 */
template <typename ... _AttributeExtensions>
void mediaplaybackProxy<_AttributeExtensions...>::NAV_CDSetRepeat_Rq_method(const ::v0::org::harman::ford::mediaplayback_types::NAV_CDSetRepeat_Rq_enum &_nAV_CDSetRepeat_Rq_enum, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_nAV_CDSetRepeat_Rq_enum.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->NAV_CDSetRepeat_Rq_method(_nAV_CDSetRepeat_Rq_enum, _internalCallStatus);
}
/**
 * description: No Information Available
 */
template <typename ... _AttributeExtensions>
void mediaplaybackProxy<_AttributeExtensions...>::DISP_SetVolume_Rq_method(const uint8_t &_DISP_SetVolume_Rq, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->DISP_SetVolume_Rq_method(_DISP_SetVolume_Rq, _internalCallStatus);
}
/**
 * description: No Information Available
 */
template <typename ... _AttributeExtensions>
void mediaplaybackProxy<_AttributeExtensions...>::Dsp_AudioSourceSel2_Rq_method(const ::v0::org::harman::ford::mediaplayback_types::Dsp_AudioSourceSel2_Rq_enum &_dsp_AudioSourceSel2_Rq_enum, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_dsp_AudioSourceSel2_Rq_enum.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->Dsp_AudioSourceSel2_Rq_method(_dsp_AudioSourceSel2_Rq_enum, _internalCallStatus);
}
/**
 * description: No Information Available
 */
template <typename ... _AttributeExtensions>
void mediaplaybackProxy<_AttributeExtensions...>::HMI_SkipTrack_Rq_method(const ::v0::org::harman::ford::mediaplayback_types::HMI_SkipTrack_Rq_enum &_hMI_SkipTrack_Rq_enum, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_hMI_SkipTrack_Rq_enum.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->HMI_SkipTrack_Rq_method(_hMI_SkipTrack_Rq_enum, _internalCallStatus);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &mediaplaybackProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool mediaplaybackProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool mediaplaybackProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& mediaplaybackProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& mediaplaybackProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::org::harman::ford::mediaplaybackProxy,
    _AttributeExtension> {
    typedef typename ::v0::org::harman::ford::mediaplaybackProxy<
            ::v0::org::harman::ford::mediaplaybackExtensions::APIM_ActiveTrackNum_StAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::APIM_NumberofTracks_StAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::ACU_CurrTUBand_St_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::ACU_RadioSeekMode2_St_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::ACU_CurrentFreq_StAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::ACU_CompLogic_St_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::CD_Send_SignalsAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::CD_Request_SignalsAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::Dsp_CutItem_Rq_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::Dsp_ItemNameLength_RqAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::Dsp_FolderNumber_RqAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::Dsp_SourceSetTrack_RqAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::Dsp_FolderNumber3_RqAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::Dsp_ItemIndex_RqAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::Dsp_PlayFrstTrInFldr_RqAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::NAV_LoadEjectDisc_Rq_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::NAV_SetOperationMode_Rq_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::NAV_CDSetIntroScan_Rq_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::ACU_Send_Signals_6AttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::ACU_Send_Signals_5AttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::ACU_SendSignals_9AttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::Dsp_ItemNameLength2_RqAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::Dsp_FolderContent_Rq_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::Dsp_CutItem2_Rq_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::Dsp_NbrOfItems2_RqAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::Dsp_FolderNumber2_RqAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::Dsp_StartItemIndexRqAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::mediaplaybackExtensions::HMI_SetCompression_Rq_enumAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_mediaplayback_PROXY_HPP_
