/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/com/harman/media/MediaSettingDBusProxy.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace media {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createMediaSettingDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<MediaSettingDBusProxy>(_address, _connection);
}

INITIALIZER(registerMediaSettingDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		MediaSetting::getInterface(),
		&createMediaSettingDBusProxy);
}

MediaSettingDBusProxy::MediaSettingDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		localeName_(*this, "onLocaleNameAttributeChanged", "setLocaleNameAttribute", "s", "getLocaleNameAttribute", static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
		videoPlaybackSpeed_(*this, "onVideoPlaybackSpeedAttributeChanged", "setVideoPlaybackSpeedAttribute", "d", "getVideoPlaybackSpeedAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr))
,		playbackSpeedChange_(*this, "playbackSpeedChange", "id", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
{
}

      MediaSettingDBusProxy::LocaleNameAttribute& MediaSettingDBusProxy::getLocaleNameAttribute() {
          return localeName_;
      }
      MediaSettingDBusProxy::VideoPlaybackSpeedAttribute& MediaSettingDBusProxy::getVideoPlaybackSpeedAttribute() {
          return videoPlaybackSpeed_;
      }

MediaSettingDBusProxy::PlaybackSpeedChangeEvent& MediaSettingDBusProxy::getPlaybackSpeedChangeEvent() {
    return playbackSpeedChange_;
}
    
    /**
     * description: reset all the setting to the default.  			e: error code.
     */
    void MediaSettingDBusProxy::resetToFactory(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "resetToFactory",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_e);
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> MediaSettingDBusProxy::resetToFactoryAsync(ResetToFactoryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "resetToFactory",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _e.getValue());
        },
        std::make_tuple(deploy_e));
    }
    /**
     * description: set the default playback speed for one audio type. 			type: the audio object
     *   type. 			speed: playback speed. 			e: error code.
     */
    void MediaSettingDBusProxy::setPlaybackSpeed(const ::v1::com::harman::media::BaseType::tAudioObjectType &_type, const double &_speed, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tAudioObjectType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_speed(_speed, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tAudioObjectType, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setPlaybackSpeed",
        "id",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_type, deploy_speed,
_internalCallStatus,
deploy_e);
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> MediaSettingDBusProxy::setPlaybackSpeedAsync(const ::v1::com::harman::media::BaseType::tAudioObjectType &_type, const double &_speed, SetPlaybackSpeedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tAudioObjectType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_speed(_speed, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tAudioObjectType, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setPlaybackSpeed",
        "id",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_type, deploy_speed,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _e.getValue());
        },
        std::make_tuple(deploy_e));
    }
    /**
     * description: get the default playback speed for one audio type. 			type: the audio object
     *   type. 			speed: playback speed. 			e: error code.
     */
    void MediaSettingDBusProxy::getPlaybackSpeed(const ::v1::com::harman::media::BaseType::tAudioObjectType &_type, CommonAPI::CallStatus &_internalCallStatus, double &_speed, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tAudioObjectType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_speed(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tAudioObjectType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<double,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getPlaybackSpeed",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_type,
_internalCallStatus,
deploy_speed, deploy_e);
_speed = deploy_speed.getValue();
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> MediaSettingDBusProxy::getPlaybackSpeedAsync(const ::v1::com::harman::media::BaseType::tAudioObjectType &_type, GetPlaybackSpeedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tAudioObjectType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_speed(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tAudioObjectType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<double,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getPlaybackSpeed",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_type,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> _speed, CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _speed.getValue(), _e.getValue());
        },
        std::make_tuple(deploy_speed, deploy_e));
    }


void MediaSettingDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace media
      } // namespace harman
      } // namespace com
      } // namespace v1
