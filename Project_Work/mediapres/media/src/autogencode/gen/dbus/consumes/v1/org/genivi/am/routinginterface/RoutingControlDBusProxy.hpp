/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This class implements everything from Audiomanager -&gt; RoutingAdapter
 * author: lian zhang
 */
#ifndef V1_ORG_GENIVI_AM_ROUTINGINTERFACE_Routing_Control_DBUS_PROXY_HPP_
#define V1_ORG_GENIVI_AM_ROUTINGINTERFACE_Routing_Control_DBUS_PROXY_HPP_

#include <v1/org/genivi/am/routinginterface/RoutingControlProxyBase.hpp>
#include "v1/org/genivi/am/routinginterface/RoutingControlDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>
#include <CommonAPI/Types.hpp>
#include <CommonAPI/DBus/DBusSelectiveEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace org {
namespace genivi {
namespace am {
namespace routinginterface {

class RoutingControlDBusProxy
    : virtual public RoutingControlProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    RoutingControlDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~RoutingControlDBusProxy() { }


    virtual AckSetSourceStateSelectiveEvent& getAckSetSourceStateSelectiveEvent();

    /**
     * description: This function is used to set the source state of a particular source.
     *   (at)return E_OK on success, E_UNKNOWN on error
     */
    virtual void asyncSetSourceState(const ::v3::org::genivi::am_t::am_Handle_s &_handle, const ::v3::org::genivi::am_t::am_sourceID_t &_sourceID, const ::v3::org::genivi::am_t::am_SourceState_e &_state, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> asyncSetSourceStateAsync(const ::v3::org::genivi::am_t::am_Handle_s &_handle, const ::v3::org::genivi::am_t::am_sourceID_t &_sourceID, const ::v3::org::genivi::am_t::am_SourceState_e &_state, AsyncSetSourceStateAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusSelectiveEvent<AckSetSourceStateSelectiveEvent, CommonAPI::Deployable<::v3::org::genivi::am_t::am_Handle_s, ::v3::org::genivi::am_t_::am_Handle_sDeployment_t>, CommonAPI::Deployable<::v3::org::genivi::am_t::am_Error_e, CommonAPI::EmptyDeployment>> ackSetSourceStateSelective_;

};

} // namespace routinginterface
} // namespace am
} // namespace genivi
} // namespace org
} // namespace v1

#endif // V1_ORG_GENIVI_AM_ROUTINGINTERFACE_Routing_Control_DBUS_PROXY_HPP_

