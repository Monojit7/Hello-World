/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Source_Info_DBUS_PROXY_HPP_
#define V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Source_Info_DBUS_PROXY_HPP_

#include <v1/com/harman/audio/audioPresCtrl/audioSourceInfoProxyBase.hpp>
#include "v1/com/harman/audio/audioPresCtrl/audioSourceInfoDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace com {
namespace harman {
namespace audio {
namespace audioPresCtrl {

class audioSourceInfoDBusProxy
    : virtual public audioSourceInfoProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    audioSourceInfoDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~audioSourceInfoDBusProxy() { }



    /**
     * description: This method should be invoked by the MediaPres for Media devices to register   
     *     device information which could be needed by the HMIs     For ex: register
     *   information on media device when they are inserted.  	Please refer
     *   sSourceInfo.eSourceAvailablity to learn about availibility states     Please
     *   refer the sequence diagram to determine when this method should be called    
     *   NOTE: This need not be invoked on device removal
     */
    virtual void RegisterSourceInfo(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceInfo &_info, CommonAPI::CallStatus &_internalCallStatus);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   


};

} // namespace audioPresCtrl
} // namespace audio
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Source_Info_DBUS_PROXY_HPP_

