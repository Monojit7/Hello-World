/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_ORG_GENIVI_MEDIAMANAGER_Player_DBUS_PROXY_HPP_
#define V1_ORG_GENIVI_MEDIAMANAGER_Player_DBUS_PROXY_HPP_

#include <v1/org/genivi/mediamanager/PlayerProxyBase.hpp>
#include "v1/org/genivi/mediamanager/PlayerDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace org {
namespace genivi {
namespace mediamanager {

class PlayerDBusProxy
    : virtual public PlayerProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    PlayerDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~PlayerDBusProxy() { }

    virtual MuteAttribute& getMuteAttribute();
    virtual ShuffleAttribute& getShuffleAttribute();
    virtual RepeatAttribute& getRepeatAttribute();
    virtual ScanAttribute& getScanAttribute();
    virtual RateAttribute& getRateAttribute();
    virtual VolumeAttribute& getVolumeAttribute();
    virtual CanGetPlayQueueAttribute& getCanGetPlayQueueAttribute();
    virtual CanGoNextAttribute& getCanGoNextAttribute();
    virtual CanGoPreviousAttribute& getCanGoPreviousAttribute();
    virtual CanPauseAttribute& getCanPauseAttribute();
    virtual CanPlayAttribute& getCanPlayAttribute();
    virtual CanSeekAttribute& getCanSeekAttribute();
    virtual CurrentTrackAttribute& getCurrentTrackAttribute();
    virtual TotalTracksAttribute& getTotalTracksAttribute();
    virtual PlaybackStatusAttribute& getPlaybackStatusAttribute();
    virtual PositionAttribute& getPositionAttribute();
    virtual DurationAttribute& getDurationAttribute();
    virtual VideoPlayStatusAttribute& getVideoPlayStatusAttribute();
    virtual SessionEndAttribute& getSessionEndAttribute();
    virtual CurrAudioLanguageAttribute& getCurrAudioLanguageAttribute();
    virtual TotalAudioLanguageAttribute& getTotalAudioLanguageAttribute();
    virtual AudioChannelAttribute& getAudioChannelAttribute();
    virtual SubtitleAttribute& getSubtitleAttribute();
    virtual AspectModeAttribute& getAspectModeAttribute();
    virtual RestrictedModeAttribute& getRestrictedModeAttribute();
    virtual PlayerTypeAttribute& getPlayerTypeAttribute();
    virtual MetadataAttribute& getMetadataAttribute();
    virtual CurrentMediumIdAttribute& getCurrentMediumIdAttribute();

    virtual PlayQueueChangedEvent& getPlayQueueChangedEvent();
    virtual PlayErrorEvent& getPlayErrorEvent();
    virtual DevicePlayStatusChangeEvent& getDevicePlayStatusChangeEvent();

    /**
     * description: Skip to the next track in the play queue. If there is no                       
     *   next track, playback is stopped. If playback is paused or                     
     *     stopped, this function will set the next plack to be                       
     *   played once playback is activated
     */
    virtual void next(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> nextAsync(NextAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Skip to the next chapter if current playback audio is podcast                  
     *        or audiobook.
     */
    virtual void nextChapter(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> nextChapterAsync(NextChapterAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: USB device Next folder selection                        1. On next folder
     *   selection, the folder which comes next in alphabetical                        
     *     order shall be selected for play. System shall play first track of          
     *                   next folder on next folder selection.                       
     *   2. If the current song is in pause state and user presses next folder         
     *                    button, then system shall come out of pause state and play
     *   the next                          folder.                        3. Next
     *   folder operation should not be performed by the system when no                
     *             folder/tracks are present in the USB device.                       
     *   4. The system shall support next folder selection in Random and Repeat modes.
     */
    virtual void nextFolder(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> nextFolderAsync(NextFolderAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Open the supplied Uri for playback in the playback engine.          returns:
     *   INVALID_URI When an invalid URI is supplied                               
     *   (decided by playback engine)                    NO_ERROR    On success
     * param: uri URI of media to play, uri format is decided by backend
     */
    virtual void openUri(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> openUriAsync(const std::string &_uri, OpenUriAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Enqueue the supplied Uri for playback in the playback engine.          returns:
     *   INVALID_URI When an invalid URI is supplied                               
     *   (decided by playback engine)                   NO_ERROR    On success
     * param: uri URI of media to enqueue, uri format is decided by backend
     */
    virtual void enqueueUri(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> enqueueUriAsync(const std::string &_uri, EnqueueUriAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Dequeue the item with the supplied index in the playback                      
     *   engine.
     * param: pos index of media to dequeue
     */
    virtual void dequeueIndex(const uint64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> dequeueIndexAsync(const uint64_t &_pos, DequeueIndexAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Retrieve the current play queue. The format of the result                      
     *   object is described in MediaTypes.fidl          returns: Current play queue
     */
    virtual void getCurrentPlayQueue(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_playQueue, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCurrentPlayQueueAsync(GetCurrentPlayQueueAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Retrieve the current play queue with offset and count.     				  The format of
     *   the result object is described in MediaTypes.fidl          returns: Current
     *   play queue
     */
    virtual void getCurrentPlayQueueEx(const uint64_t &_offset, const uint64_t &_count, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_playQueue, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCurrentPlayQueueExAsync(const uint64_t &_offset, const uint64_t &_count, GetCurrentPlayQueueExAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Dequeue all elements, emptying the play queue
     */
    virtual void dequeueAll(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> dequeueAllAsync(DequeueAllAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Use the supplied playlist as the current play queue. If                      
     *   the play queue is invalid, the old play queue is                      
     *   untouched.          returns: BAD_PLAYLIST If playlist can not be loaded       
     *               NO_ERROR     On success
     */
    virtual void openPlaylist(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> openPlaylistAsync(const std::string &_uri, OpenPlaylistAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Pause playback in the playback engine.                        If already
     *   paused, this has no effect                        Note: If CanPause is false,
     *   this has no effect
     */
    virtual void pause(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> pauseAsync(PauseAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Start or resume playback in the playback engine.                        If
     *   playback is already commencing, this has not effect.                        If
     *   paused, playback resumes from the current position.                        If
     *   there is no track to play, calling this has no effect                       
     *   Note: If CanPlay is false, this has no effect
     */
    virtual void play(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> playAsync(PlayAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Stop playback in the playback engine.                        If playback is
     *   already stopped, this has not effect.
     */
    virtual void stop(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> stopAsync(StopAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Starts playback (see Play) if paused                       Pauses playback (see
     *   Pause) is playing
     * see: Play
     * see: Pause
     */
    virtual void playPause(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> playPauseAsync(PlayPauseAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Loads previous track in play queue or start at the      				  beginning of
     *   current track, time can be configured.                       If there is no
     *   previous track, playback is stopped                       If playback is
     *   stopped or paused, it remains this way,                       but the next
     *   track to be played will the set                       by this function        
     *                 Note: If CanGoPrevious is false, this has no effect
     */
    virtual void previous(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> previousAsync(PreviousAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Skip to the next chapter if current playback audio is podcast                  
     *        or audiobook.
     */
    virtual void previousChapter(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> previousChapterAsync(PreviousChapterAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: USB device Previous folder selection                        1. On previous
     *   folder selection, the folder which comes previous in alphabetical             
     *                order shall be selected for play. System shall play first track
     *   of previous                           folder on previous folder selection.    
     *                      2. If the current song is in pause state and user presses
     *   previous folder                           button, then system shall come out
     *   of pause state and play the previous folder.                        3.
     *   previous folder operation should not be performed by the system when no       
     *                      folder/tracks are present in the USB device.               
     *           4. The system shall support previous folder selection in Random and
     *   Repeat modes.
     */
    virtual void previousFolder(const ::v1::org::genivi::mediamanager::PlayerTypes::StartIndexOption &_startIndexOpt, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> previousFolderAsync(const ::v1::org::genivi::mediamanager::PlayerTypes::StartIndexOption &_startIndexOpt, PreviousFolderAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Seek relatively in the current track                       If a negative seek
     *   leads to a play position less than 0,                       the play position
     *   will be set to 0.                       If a positive seek leads outside the
     *   length of the current                       track, this is treated like a call
     *   to Next()                       Note: If CanSeek is false, this has no effect
     * param: pos Relative seek amount in microseconds
     * see: Next
     */
    virtual void seek(const int64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> seekAsync(const int64_t &_pos, SeekAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Jump to the specified position in the current                        If the
     *   position is not within range of the current track,                        do
     *   nothing          Note: If CanSeek is false, this has no effect
     * param: pos Absolute position in microseconds
     */
    virtual void setPosition(const uint64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setPositionAsync(const uint64_t &_pos, SetPositionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: list all audio languages for current track
     * param: list The string list of all audio languages
     */
    virtual void listAudioLanguages(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::StringList &_list, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> listAudioLanguagesAsync(ListAudioLanguagesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: select a audio languages for current track
     * param: lang audio languages code, eg. en/zh/jp
     */
    virtual void selectAudioLanguage(const std::string &_lang, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> selectAudioLanguageAsync(const std::string &_lang, SelectAudioLanguageAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: list all (internal or external) subtitles in specified path
     * param: path The folder path name to list                      "." stand for current
     *   directory                      ".."  stand for the parent directory.          
     *          ResultMap usage:                 ----------------                 For
     *   Folders and Subtitles:                   - DisplayName(String): The name of
     *   Folder/Subtitle                   - Type(String): The type will be "folder" or
     *   "subtitle"                  For Folders only:                   -
     *   Path(String): The path name to list                  For Subtitles only:      
     *               - ID(Int64): The indentifier of Subtitle.                   -
     *   Language(String): The language code of current subtitle.                   -
     *   Active(Boolean): The subtitle is selected will be true, otherwise false.
     */
    virtual void listSubtitles(const std::string &_path, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_list, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> listSubtitlesAsync(const std::string &_path, ListSubtitlesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: select a subtitle for current playing video track
     * param: id The id of selected subtitle, the id from the ResultMap of listSubtitles
     */
    virtual void selectSubtitle(const int64_t &_id, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> selectSubtitleAsync(const int64_t &_id, SelectSubtitleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Adjust the current subtitle timeline for syncing with audio track playback
     * param: ms Adjustment in microseconds
     */
    virtual void syncSubtitle(const int32_t &_ms, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> syncSubtitleAsync(const int32_t &_ms, SyncSubtitleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Set the display window coordinates of video playback
     * param: fullscreen ture is enable fullscreen, false is disable fullscreen and manually
     *   assigned by rectangle                 rect rectangle coordinates
     */
    virtual void setDisplayWindow(const bool &_fullscreen, const ::v1::org::genivi::mediamanager::PlayerTypes::tRectangle &_rect, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setDisplayWindowAsync(const bool &_fullscreen, const ::v1::org::genivi::mediamanager::PlayerTypes::tRectangle &_rect, SetDisplayWindowAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: promote the track
     * param: uri is the track uri, empty uri can be used for current playing track.
     */
    virtual void promote(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> promoteAsync(const std::string &_uri, PromoteAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: demote the track
     * param: uri is the track uri, empty uri can be used for current playing track.
     */
    virtual void demote(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> demoteAsync(const std::string &_uri, DemoteAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: add iTunes station to a WishList
     * param: uri is the track uri, empty uri can be used for current playing track.
     */
    virtual void addToWishList(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> addToWishListAsync(const std::string &_uri, AddToWishListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: create and now playing list by Ids
     * param: mediumId - the unique device id: 0 means current player                 titleId
     *   - title of the media/audiobook/podcast                 albumId - id of the
     *   album                 artistId - id of the artist                 genreId - id
     *   of the genre                 playlistId - id of the playlist                
     *   audiobookId - id of the audiobook                 podcastId - id of the
     *   podcast          For the Ids, set the value to 0 for default
     */
    virtual void playByIds(const uint32_t &_mediumId, const int32_t &_titleId, const int32_t &_albumId, const int32_t &_artistId, const int32_t &_genreId, const int32_t &_playlistId, const int32_t &_audiobookId, const int32_t &_podcastId, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> playByIdsAsync(const uint32_t &_mediumId, const int32_t &_titleId, const int32_t &_albumId, const int32_t &_artistId, const int32_t &_genreId, const int32_t &_playlistId, const int32_t &_audiobookId, const int32_t &_podcastId, PlayByIdsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Method to send the button events received from HMI
     */
    virtual void sendIAP2KeyEvent(const ::v1::org::genivi::mediamanager::PlayerTypes::IAP2ButtonType &_buttonType, const bool &_pressed, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> sendIAP2KeyEventAsync(const ::v1::org::genivi::mediamanager::PlayerTypes::IAP2ButtonType &_buttonType, const bool &_pressed, SendIAP2KeyEventAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    class DBusmute_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<MuteAttribute>> {
    public:
    template <typename... _A>
    	DBusmute_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<MuteAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v1::org::genivi::mediamanager::PlayerTypes::MuteStatus& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v1::org::genivi::mediamanager::PlayerTypes::MuteStatus& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<MuteAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::org::genivi::mediamanager::PlayerTypes::MuteStatus& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v1::org::genivi::mediamanager::PlayerTypes::MuteStatus)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v1::org::genivi::mediamanager::PlayerTypes::MuteStatus _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<MuteAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusmute_Attribute mute_;
    class DBusshuffle_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ShuffleAttribute>> {
    public:
    template <typename... _A>
    	DBusshuffle_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ShuffleAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v1::org::genivi::mediamanager::PlayerTypes::ShuffleStatus& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v1::org::genivi::mediamanager::PlayerTypes::ShuffleStatus& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ShuffleAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::org::genivi::mediamanager::PlayerTypes::ShuffleStatus& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v1::org::genivi::mediamanager::PlayerTypes::ShuffleStatus)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v1::org::genivi::mediamanager::PlayerTypes::ShuffleStatus _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ShuffleAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusshuffle_Attribute shuffle_;
    class DBusrepeat_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RepeatAttribute>> {
    public:
    template <typename... _A>
    	DBusrepeat_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RepeatAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v1::org::genivi::mediamanager::PlayerTypes::RepeatStatus& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v1::org::genivi::mediamanager::PlayerTypes::RepeatStatus& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RepeatAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::org::genivi::mediamanager::PlayerTypes::RepeatStatus& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v1::org::genivi::mediamanager::PlayerTypes::RepeatStatus)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v1::org::genivi::mediamanager::PlayerTypes::RepeatStatus _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RepeatAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusrepeat_Attribute repeat_;
    class DBusscan_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ScanAttribute>> {
    public:
    template <typename... _A>
    	DBusscan_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ScanAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v1::org::genivi::mediamanager::PlayerTypes::ScanStatus& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v1::org::genivi::mediamanager::PlayerTypes::ScanStatus& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ScanAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::org::genivi::mediamanager::PlayerTypes::ScanStatus& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v1::org::genivi::mediamanager::PlayerTypes::ScanStatus)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v1::org::genivi::mediamanager::PlayerTypes::ScanStatus _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ScanAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusscan_Attribute scan_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RateAttribute>> rate_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<VolumeAttribute>> volume_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CanGetPlayQueueAttribute>> canGetPlayQueue_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CanGoNextAttribute>> canGoNext_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CanGoPreviousAttribute>> canGoPrevious_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CanPauseAttribute>> canPause_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CanPlayAttribute>> canPlay_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CanSeekAttribute>> canSeek_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CurrentTrackAttribute>> currentTrack_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<TotalTracksAttribute>> totalTracks_;
    class DBusplaybackStatus_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PlaybackStatusAttribute>> {
    public:
    template <typename... _A>
    	DBusplaybackStatus_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PlaybackStatusAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusplaybackStatus_Attribute playbackStatus_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PositionAttribute>> position_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<DurationAttribute>> duration_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VideoPlayStatusAttribute>> videoPlayStatus_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<SessionEndAttribute>> sessionEnd_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CurrAudioLanguageAttribute, CommonAPI::DBus::StringDeployment>> currAudioLanguage_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<TotalAudioLanguageAttribute>> totalAudioLanguage_;
    class DBusaudioChannel_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AudioChannelAttribute>> {
    public:
    template <typename... _A>
    	DBusaudioChannel_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AudioChannelAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v1::org::genivi::mediamanager::PlayerTypes::AudioChannelStatus& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v1::org::genivi::mediamanager::PlayerTypes::AudioChannelStatus& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AudioChannelAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::org::genivi::mediamanager::PlayerTypes::AudioChannelStatus& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v1::org::genivi::mediamanager::PlayerTypes::AudioChannelStatus)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v1::org::genivi::mediamanager::PlayerTypes::AudioChannelStatus _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AudioChannelAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusaudioChannel_Attribute audioChannel_;
    class DBussubtitle_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<SubtitleAttribute>> {
    public:
    template <typename... _A>
    	DBussubtitle_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<SubtitleAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v1::org::genivi::mediamanager::PlayerTypes::SubtitleStatus& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v1::org::genivi::mediamanager::PlayerTypes::SubtitleStatus& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<SubtitleAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::org::genivi::mediamanager::PlayerTypes::SubtitleStatus& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v1::org::genivi::mediamanager::PlayerTypes::SubtitleStatus)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v1::org::genivi::mediamanager::PlayerTypes::SubtitleStatus _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<SubtitleAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBussubtitle_Attribute subtitle_;
    class DBusaspectMode_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AspectModeAttribute>> {
    public:
    template <typename... _A>
    	DBusaspectMode_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AspectModeAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v1::org::genivi::mediamanager::PlayerTypes::AspectModeStatus& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v1::org::genivi::mediamanager::PlayerTypes::AspectModeStatus& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AspectModeAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::org::genivi::mediamanager::PlayerTypes::AspectModeStatus& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v1::org::genivi::mediamanager::PlayerTypes::AspectModeStatus)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v1::org::genivi::mediamanager::PlayerTypes::AspectModeStatus _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AspectModeAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusaspectMode_Attribute aspectMode_;
    class DBusrestrictedMode_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RestrictedModeAttribute>> {
    public:
    template <typename... _A>
    	DBusrestrictedMode_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RestrictedModeAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v1::org::genivi::mediamanager::PlayerTypes::RestrictedModeStatus& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v1::org::genivi::mediamanager::PlayerTypes::RestrictedModeStatus& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RestrictedModeAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::org::genivi::mediamanager::PlayerTypes::RestrictedModeStatus& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v1::org::genivi::mediamanager::PlayerTypes::RestrictedModeStatus)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v1::org::genivi::mediamanager::PlayerTypes::RestrictedModeStatus _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RestrictedModeAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusrestrictedMode_Attribute restrictedMode_;
    class DBusplayerType_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PlayerTypeAttribute>> {
    public:
    template <typename... _A>
    	DBusplayerType_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PlayerTypeAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerType& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v1::org::genivi::mediamanager::PlayerTypes::PlayerType& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PlayerTypeAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerType& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerType)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v1::org::genivi::mediamanager::PlayerTypes::PlayerType _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PlayerTypeAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusplayerType_Attribute playerType_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<MetadataAttribute, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapDeployment_t>> metadata_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CurrentMediumIdAttribute>> currentMediumId_;

    CommonAPI::DBus::DBusEvent<PlayQueueChangedEvent> playQueueChanged_;
    CommonAPI::DBus::DBusEvent<PlayErrorEvent, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v1::org::genivi::mediamanager::PlayerTypes::PlayerError, CommonAPI::EmptyDeployment>> playError_;
    CommonAPI::DBus::DBusEvent<DevicePlayStatusChangeEvent, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v1::org::genivi::mediamanager::PlayerTypes::PlaybackStatus, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> devicePlayStatusChange_;

};

} // namespace mediamanager
} // namespace genivi
} // namespace org
} // namespace v1

#endif // V1_ORG_GENIVI_MEDIAMANAGER_Player_DBUS_PROXY_HPP_

