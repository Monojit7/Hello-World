/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v2/com/harman/btpres/ConnectionManagerDBusProxy.hpp>

namespace v2 {
namespace com {
namespace harman {
namespace btpres {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createConnectionManagerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<ConnectionManagerDBusProxy>(_address, _connection);
}

INITIALIZER(registerConnectionManagerDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		ConnectionManager::getInterface(),
		&createConnectionManagerDBusProxy);
}

ConnectionManagerDBusProxy::ConnectionManagerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		btState_(*this, "onBtStateAttributeChanged", "i", "getBtStateAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		localDevAddr_(*this, "onLocalDevAddrAttributeChanged", "s", "getLocalDevAddrAttribute", static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
		localDevName_(*this, "onLocalDevNameAttributeChanged", "s", "getLocalDevNameAttribute", static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
		passKeyPin_(*this, "onPassKeyPinAttributeChanged", "s", "getPassKeyPinAttribute", static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
		deviceSearchStatus_(*this, "onDeviceSearchStatusAttributeChanged", "b", "getDeviceSearchStatusAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		discoverableStatus_(*this, "onDiscoverableStatusAttributeChanged", "b", "getDiscoverableStatusAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		discoveryTimeout_(*this, "onDiscoveryTimeoutAttributeChanged", "q", "getDiscoveryTimeoutAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		devSearchResults_(*this, "onDevSearchResultsAttributeChanged", "a(ssibb)", "getDevSearchResultsAttribute", static_cast<::v4::com::harman::btpres::BTPresTypes_::tDeviceSearchEntryListDeployment_t*>(nullptr)),
		devList_(*this, "onDevListAttributeChanged", "a(ssqia(a{ii}qq))", "getDevListAttribute", static_cast<::v4::com::harman::btpres::BTPresTypes_::bondedDevListDeployment_t*>(nullptr)),
		connectedDevList_(*this, "onConnectedDevListAttributeChanged", "a(ssqia(a{ii}qq))", "getConnectedDevListAttribute", static_cast<::v4::com::harman::btpres::BTPresTypes_::bondedDevListDeployment_t*>(nullptr)),
		netIfStatus_(*this, "onNetIfStatusAttributeChanged", "(sb)", "getNetIfStatusAttribute", static_cast<::v4::com::harman::btpres::BTPresTypes_::networkIfStatusDeployment_t*>(nullptr)),
		unstableDevs_(*this, "onUnstableDevsAttributeChanged", "a(ss)", "getUnstableDevsAttribute", static_cast<::v4::com::harman::btpres::BTPresTypes_::unstableDeviceInfoListDeployment_t*>(nullptr)),
		primaryDevice_(*this, "onPrimaryDeviceAttributeChanged", "s", "getPrimaryDeviceAttribute", static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
		dnDStatus_(*this, "onDnDStatusAttributeChanged", "(sb)", "getDnDStatusAttribute", static_cast<::v4::com::harman::btpres::BTPresTypes_::dontDisturbDeviceInfoDeployment_t*>(nullptr)),
		emargencyAssistance_(*this, "onEmargencyAssistanceAttributeChanged", "setEmargencyAssistanceAttribute", "b", "getEmargencyAssistanceAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		dndInfo_(*this, "onDndInfoAttributeChanged", "(sbi)", "getDndInfoAttribute", static_cast<::v4::com::harman::btpres::BTPresTypes_::extendedDndDeployment_t*>(nullptr))
,		bondingRequest_(*this, "bondingRequest", "ssis", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		serviceConnectionRequest_(*this, "serviceConnectionRequest", "ssi", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		serviceConnectionStatus_(*this, "serviceConnectionStatus", "ssiii", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		deviceDeleted_(*this, "deviceDeleted", "ssi", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		reconnectionFailed_(*this, "reconnectionFailed", "(ss)", std::make_tuple(static_cast<::v4::com::harman::btpres::BTPresTypes_::deviceInfoDeployment_t*>(nullptr))),
		bondingStatus_(*this, "bondingStatus", "ssi", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		tonePlayState_(*this, "tonePlayState", "(yv)b", std::make_tuple(static_cast<::v4::com::harman::btpres::BTPresTypes_::uToneIDDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
{
}

      ConnectionManagerDBusProxy::BtStateAttribute& ConnectionManagerDBusProxy::getBtStateAttribute() {
          return btState_;
      }
      ConnectionManagerDBusProxy::LocalDevAddrAttribute& ConnectionManagerDBusProxy::getLocalDevAddrAttribute() {
          return localDevAddr_;
      }
      ConnectionManagerDBusProxy::LocalDevNameAttribute& ConnectionManagerDBusProxy::getLocalDevNameAttribute() {
          return localDevName_;
      }
      ConnectionManagerDBusProxy::PassKeyPinAttribute& ConnectionManagerDBusProxy::getPassKeyPinAttribute() {
          return passKeyPin_;
      }
      ConnectionManagerDBusProxy::DeviceSearchStatusAttribute& ConnectionManagerDBusProxy::getDeviceSearchStatusAttribute() {
          return deviceSearchStatus_;
      }
      ConnectionManagerDBusProxy::DiscoverableStatusAttribute& ConnectionManagerDBusProxy::getDiscoverableStatusAttribute() {
          return discoverableStatus_;
      }
      ConnectionManagerDBusProxy::DiscoveryTimeoutAttribute& ConnectionManagerDBusProxy::getDiscoveryTimeoutAttribute() {
          return discoveryTimeout_;
      }
      ConnectionManagerDBusProxy::DevSearchResultsAttribute& ConnectionManagerDBusProxy::getDevSearchResultsAttribute() {
          return devSearchResults_;
      }
      ConnectionManagerDBusProxy::DevListAttribute& ConnectionManagerDBusProxy::getDevListAttribute() {
          return devList_;
      }
      ConnectionManagerDBusProxy::ConnectedDevListAttribute& ConnectionManagerDBusProxy::getConnectedDevListAttribute() {
          return connectedDevList_;
      }
      ConnectionManagerDBusProxy::NetIfStatusAttribute& ConnectionManagerDBusProxy::getNetIfStatusAttribute() {
          return netIfStatus_;
      }
      ConnectionManagerDBusProxy::UnstableDevsAttribute& ConnectionManagerDBusProxy::getUnstableDevsAttribute() {
          return unstableDevs_;
      }
      ConnectionManagerDBusProxy::PrimaryDeviceAttribute& ConnectionManagerDBusProxy::getPrimaryDeviceAttribute() {
          return primaryDevice_;
      }
      ConnectionManagerDBusProxy::DnDStatusAttribute& ConnectionManagerDBusProxy::getDnDStatusAttribute() {
          return dnDStatus_;
      }
      ConnectionManagerDBusProxy::EmargencyAssistanceAttribute& ConnectionManagerDBusProxy::getEmargencyAssistanceAttribute() {
          return emargencyAssistance_;
      }
      ConnectionManagerDBusProxy::DndInfoAttribute& ConnectionManagerDBusProxy::getDndInfoAttribute() {
          return dndInfo_;
      }

ConnectionManagerDBusProxy::BondingRequestEvent& ConnectionManagerDBusProxy::getBondingRequestEvent() {
    return bondingRequest_;
}
ConnectionManagerDBusProxy::ServiceConnectionRequestEvent& ConnectionManagerDBusProxy::getServiceConnectionRequestEvent() {
    return serviceConnectionRequest_;
}
ConnectionManagerDBusProxy::ServiceConnectionStatusEvent& ConnectionManagerDBusProxy::getServiceConnectionStatusEvent() {
    return serviceConnectionStatus_;
}
ConnectionManagerDBusProxy::DeviceDeletedEvent& ConnectionManagerDBusProxy::getDeviceDeletedEvent() {
    return deviceDeleted_;
}
ConnectionManagerDBusProxy::ReconnectionFailedEvent& ConnectionManagerDBusProxy::getReconnectionFailedEvent() {
    return reconnectionFailed_;
}
ConnectionManagerDBusProxy::BondingStatusEvent& ConnectionManagerDBusProxy::getBondingStatusEvent() {
    return bondingStatus_;
}
ConnectionManagerDBusProxy::TonePlayStateEvent& ConnectionManagerDBusProxy::getTonePlayStateEvent() {
    return tonePlayState_;
}
    
    /**
     * description: Used to start device search on head unit
     * param: maxDevice (UInt32)       : max limit for found devices
     * param: timeout (UInt32)         : time limit for device search operation         
     *   returns: errorCode (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::startDeviceSearch(const uint32_t &_maxDevice, const uint32_t &_timeout, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_maxDevice(_maxDevice, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_timeout(_timeout, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "startDeviceSearch",
        "uu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_maxDevice, deploy_timeout,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::startDeviceSearchAsync(const uint32_t &_maxDevice, const uint32_t &_timeout, StartDeviceSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_maxDevice(_maxDevice, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_timeout(_timeout, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "startDeviceSearch",
        "uu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_maxDevice, deploy_timeout,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to stop device search on head unit
     * param: none          returns: error code (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::stopDeviceSearch(CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "stopDeviceSearch",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::stopDeviceSearchAsync(StopDeviceSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "stopDeviceSearch",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to send secure Bonding reply
     * param: inAddress (string)       : phone BT address
     * param: accept (boolean)         : accepting authentication request
     * param: trusted (boolean)        : making device trusted means service won't send
     *   connection request for each connect attempt
     * param: type (eBondingType)      : Bonding type, standard or secure bonding         
     *   returns: errorCode (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::bondingReply(const std::string &_inAddress, const bool &_accept, const bool &_trusted, const ::v4::com::harman::btpres::BTPresTypes::eBondingType &_type, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_accept(_accept, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_trusted(_trusted, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eBondingType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eBondingType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "bondingReply",
        "sbbi",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_accept, deploy_trusted, deploy_type,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::bondingReplyAsync(const std::string &_inAddress, const bool &_accept, const bool &_trusted, const ::v4::com::harman::btpres::BTPresTypes::eBondingType &_type, BondingReplyAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_accept(_accept, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_trusted(_trusted, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eBondingType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eBondingType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "bondingReply",
        "sbbi",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_accept, deploy_trusted, deploy_type,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to delete device from paired device list
     * param: inAddress (string)      : phone BT address          returns: errorCode
     *   (eErrorType): error code
     */
    void ConnectionManagerDBusProxy::deleteDevice(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "deleteDevice",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::deleteDeviceAsync(const std::string &_inAddress, DeleteDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "deleteDevice",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to delete all device in paired device list
     * param: none          returns: errorCode (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::deleteAllDevices(CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "deleteAllDevices",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::deleteAllDevicesAsync(DeleteAllDevicesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "deleteAllDevices",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to initate profile connection with device         version 1.0
     * param: inAddress (string)       : phone BT address
     * param: service (eSupportedProfile) : profile name
     * param: instanceName (string)    : containing the phone instance
     * param: replaceAddr (string)     : containing the replacement address for which the
     *   connection will be replaced          returns: errorCode (eErrorType) : error
     *   code
     */
    void ConnectionManagerDBusProxy::startServiceConnection(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const std::string &_instanceName, const std::string &_replaceAddr, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment> deploy_service(_service, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_instanceName(_instanceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_replaceAddr(_replaceAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "startServiceConnection",
        "siss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_service, deploy_instanceName, deploy_replaceAddr,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::startServiceConnectionAsync(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const std::string &_instanceName, const std::string &_replaceAddr, StartServiceConnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment> deploy_service(_service, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_instanceName(_instanceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_replaceAddr(_replaceAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "startServiceConnection",
        "siss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_service, deploy_instanceName, deploy_replaceAddr,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to initate multiple profile connection with device         version 2.0
     * param: inAddress (string)                       : phone BT address
     * param: ProfileList (arSupportedProfile)         : profile name list
     * param: replaceAddr (string)                     : containing the replacement address
     *   for which the connection will be replaced          returns: errorCode
     *   (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::startServiceConnection(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::arSupportedProfile &_ProfileList, const std::string &_replaceAddr, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::arSupportedProfile, ::v4::com::harman::btpres::BTPresTypes_::arSupportedProfileDeployment_t> deploy_ProfileList(_ProfileList, static_cast<::v4::com::harman::btpres::BTPresTypes_::arSupportedProfileDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_replaceAddr(_replaceAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::arSupportedProfile, ::v4::com::harman::btpres::BTPresTypes_::arSupportedProfileDeployment_t >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "startServiceConnection",
        "sais",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_ProfileList, deploy_replaceAddr,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::startServiceConnectionAsync(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::arSupportedProfile &_ProfileList, const std::string &_replaceAddr, StartServiceConnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::arSupportedProfile, ::v4::com::harman::btpres::BTPresTypes_::arSupportedProfileDeployment_t> deploy_ProfileList(_ProfileList, static_cast<::v4::com::harman::btpres::BTPresTypes_::arSupportedProfileDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_replaceAddr(_replaceAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::arSupportedProfile, ::v4::com::harman::btpres::BTPresTypes_::arSupportedProfileDeployment_t >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "startServiceConnection",
        "sais",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_ProfileList, deploy_replaceAddr,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to allows the existance of the service connection to this device and
     *   service.
     * param: inAddress (string)           : phone BT address
     * param: service (eSupportedProfile)  : profile name
     * param: allow (Boolean)              : containing the value true for allow, or false
     *   for reject          returns: errorCode (eErrorType)      : error code
     */
    void ConnectionManagerDBusProxy::allowServiceConnection(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const bool &_allow, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment> deploy_service(_service, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_allow(_allow, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "allowServiceConnection",
        "sib",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_service, deploy_allow,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::allowServiceConnectionAsync(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const bool &_allow, AllowServiceConnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment> deploy_service(_service, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_allow(_allow, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "allowServiceConnection",
        "sib",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_service, deploy_allow,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to initate the disconnection with connected service i.e. HFP and A2DP
     * param: inAddress (string)                  : phone BT address
     * param: service (eSupportedProfile)         : profile name          returns: errorCode
     *   error code (eErrorType)  : error code
     */
    void ConnectionManagerDBusProxy::startServiceDisconnection(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment> deploy_service(_service, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "startServiceDisconnection",
        "si",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_service,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::startServiceDisconnectionAsync(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, StartServiceDisconnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment> deploy_service(_service, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "startServiceDisconnection",
        "si",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_service,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to initate the disconnection with connected service i.e. HFP and A2DP
     * param: inAddress (string)                  : phone BT address
     * param: ProfileList (arSupportedProfile)         : profile name list          returns:
     *   errorCode error code (eErrorType)  : error code
     */
    void ConnectionManagerDBusProxy::startServiceDisconnection(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::arSupportedProfile &_ProfileList, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::arSupportedProfile, ::v4::com::harman::btpres::BTPresTypes_::arSupportedProfileDeployment_t> deploy_ProfileList(_ProfileList, static_cast<::v4::com::harman::btpres::BTPresTypes_::arSupportedProfileDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::arSupportedProfile, ::v4::com::harman::btpres::BTPresTypes_::arSupportedProfileDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "startServiceDisconnection",
        "sai",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_ProfileList,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::startServiceDisconnectionAsync(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::arSupportedProfile &_ProfileList, StartServiceDisconnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::arSupportedProfile, ::v4::com::harman::btpres::BTPresTypes_::arSupportedProfileDeployment_t> deploy_ProfileList(_ProfileList, static_cast<::v4::com::harman::btpres::BTPresTypes_::arSupportedProfileDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::arSupportedProfile, ::v4::com::harman::btpres::BTPresTypes_::arSupportedProfileDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "startServiceDisconnection",
        "sai",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_ProfileList,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: This method should be called by clients in order to reply to the incoming
     *   service                         connection request from a remote device as
     *   indicated by the signal 'serviceConnectionRequest'.                        
     *   The reply can be to accept or reject incoming service connection request.
     * param: inAddress (string)              : phone BT address
     * param: service (eSupportedProfile)     : profile name
     * param: accept (boolean)                : containing the value true for allow, or false
     *   for reject
     * param: instanceName (string)           : containing the instance name of the device   
     *         returns: errorCode (eErrorType)         : error code
     */
    void ConnectionManagerDBusProxy::serviceConnectionReply(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const bool &_accept, const std::string &_instanceName, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment> deploy_service(_service, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_accept(_accept, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_instanceName(_instanceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "serviceConnectionReply",
        "sibs",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_service, deploy_accept, deploy_instanceName,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::serviceConnectionReplyAsync(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const bool &_accept, const std::string &_instanceName, ServiceConnectionReplyAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment> deploy_service(_service, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_accept(_accept, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_instanceName(_instanceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "serviceConnectionReply",
        "sibs",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_service, deploy_accept, deploy_instanceName,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to initiate the reconnection to previously connected device
     * param: None          returns: errorCode error code (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::startReconnect(CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "startReconnect",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::startReconnectAsync(StartReconnectAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "startReconnect",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: This method should be called to get oldest connected device
     * param: None          returns: oldestDevInfo (oldestDevInfo)     : Oldest device name
     *   and address         returns: errorCode error code (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::getOldestConnectedDev(CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, ::v4::com::harman::btpres::BTPresTypes::deviceInfo &_oldestDevInfo, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::deviceInfo, ::v4::com::harman::btpres::BTPresTypes_::deviceInfoDeployment_t> deploy_oldestDevInfo(static_cast<::v4::com::harman::btpres::BTPresTypes_::deviceInfoDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::deviceInfo,::v4::com::harman::btpres::BTPresTypes_::deviceInfoDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getOldestConnectedDev",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_errorCode, deploy_oldestDevInfo);
_errorCode = deploy_errorCode.getValue();
_oldestDevInfo = deploy_oldestDevInfo.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::getOldestConnectedDevAsync(GetOldestConnectedDevAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::deviceInfo, ::v4::com::harman::btpres::BTPresTypes_::deviceInfoDeployment_t> deploy_oldestDevInfo(static_cast<::v4::com::harman::btpres::BTPresTypes_::deviceInfoDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::deviceInfo,::v4::com::harman::btpres::BTPresTypes_::deviceInfoDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getOldestConnectedDev",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::deviceInfo, ::v4::com::harman::btpres::BTPresTypes_::deviceInfoDeployment_t> _oldestDevInfo) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _oldestDevInfo.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_oldestDevInfo));
    }
    /**
     * description: This method used to change name of bonded device.
     * param: inAddress  (string)     : contains the BD address.
     * param: name (string)           : Device name          returns: errorCode(eErrorType) 
     *   : error code
     */
    void ConnectionManagerDBusProxy::renameBondedDevice(const std::string &_inAddress, const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_name(_name, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "renameBondedDevice",
        "ss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_name,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::renameBondedDeviceAsync(const std::string &_inAddress, const std::string &_name, RenameBondedDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_name(_name, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "renameBondedDevice",
        "ss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_name,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: This method used to change local name of head unit.
     * param: name (string)           : Device name          returns: errorCode(eErrorType) 
     *   : error code
     */
    void ConnectionManagerDBusProxy::renameLocalDevice(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_name(_name, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "renameLocalDevice",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_name,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::renameLocalDeviceAsync(const std::string &_name, RenameLocalDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_name(_name, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "renameLocalDevice",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_name,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to set bluetooth on or off
     * param: status (boolean)       : set true or false          returns: error
     *   code(eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::setBluetoothStatus(const bool &_status, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_status(_status, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setBluetoothStatus",
        "b",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_status,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::setBluetoothStatusAsync(const bool &_status, SetBluetoothStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_status(_status, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setBluetoothStatus",
        "b",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_status,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to enable or disable discoverable mode
     * param: enabled (boolean)       : set true or false          returns: errorCode
     *   (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::setDiscoverableMode(const bool &_enabled, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_enabled(_enabled, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setDiscoverableMode",
        "b",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_enabled,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::setDiscoverableModeAsync(const bool &_enabled, SetDiscoverableModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_enabled(_enabled, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setDiscoverableMode",
        "b",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_enabled,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: This method used to pin information for head unit.
     * param: passkey (string)          : set the default pin for legacy devices         
     *   returns:  error code (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::setPin(const std::string &_passkey, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_passkey(_passkey, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setPin",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_passkey,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::setPinAsync(const std::string &_passkey, SetPinAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_passkey(_passkey, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setPin",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_passkey,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: It will set a device as primary
     * param: inAddress  (string)     : contains the BD address.          returns:  error
     *   code (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::setPrimaryDevice(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setPrimaryDevice",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::setPrimaryDeviceAsync(const std::string &_inAddress, SetPrimaryDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setPrimaryDevice",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: This API is used for set and get phone specific properties like PhoneBook    
     *   Auto Download is enabled or disables, set specific ringtone, call volume etc.
     *   These property values     will to set for all the paired phones.
     * param: inAddress  (string)     : contains the BD address.
     * param: type (eSettingsOperation) : Operations like GET or SET
     * param: setProperty (eSettingsProperty) : Property like PhoneBook AutoDowload, sorting
     *   order etc
     * param: setValue (settingsValues) : value of the selected property          returns: 
     *   error code (eErrorType) : error code         returns: outAddress  (string)    
     *   : contains the BD address.         returns: getProperty (eSettingsProperty) :
     *   Property like PhoneBook AutoDowload, sorting order etc         returns:
     *   getValue (settingsValues) : value of the selected property
     */
    void ConnectionManagerDBusProxy::PhoneSettings(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::eSettingsOperation &_type, const ::v4::com::harman::btpres::BTPresTypes::eSettingsProperty &_setProperty, const ::v4::com::harman::btpres::BTPresTypes::settingsValues &_setValue, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, std::string &_outAddress, ::v4::com::harman::btpres::BTPresTypes::eSettingsProperty &_getProperty, ::v4::com::harman::btpres::BTPresTypes::settingsValues &_getValue, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSettingsOperation, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSettingsProperty, CommonAPI::EmptyDeployment> deploy_setProperty(_setProperty, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::settingsValues, ::v4::com::harman::btpres::BTPresTypes_::settingsValuesDeployment_t> deploy_setValue(_setValue, static_cast<::v4::com::harman::btpres::BTPresTypes_::settingsValuesDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSettingsProperty, CommonAPI::EmptyDeployment> deploy_getProperty(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::settingsValues, ::v4::com::harman::btpres::BTPresTypes_::settingsValuesDeployment_t> deploy_getValue(static_cast<::v4::com::harman::btpres::BTPresTypes_::settingsValuesDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSettingsOperation, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSettingsProperty, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::settingsValues, ::v4::com::harman::btpres::BTPresTypes_::settingsValuesDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSettingsProperty,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::settingsValues,::v4::com::harman::btpres::BTPresTypes_::settingsValuesDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "PhoneSettings",
        "sii(yv)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_type, deploy_setProperty, deploy_setValue,
_internalCallStatus,
deploy_errorCode, deploy_outAddress, deploy_getProperty, deploy_getValue);
_errorCode = deploy_errorCode.getValue();
_outAddress = deploy_outAddress.getValue();
_getProperty = deploy_getProperty.getValue();
_getValue = deploy_getValue.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::PhoneSettingsAsync(const std::string &_inAddress, const ::v4::com::harman::btpres::BTPresTypes::eSettingsOperation &_type, const ::v4::com::harman::btpres::BTPresTypes::eSettingsProperty &_setProperty, const ::v4::com::harman::btpres::BTPresTypes::settingsValues &_setValue, PhoneSettingsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSettingsOperation, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSettingsProperty, CommonAPI::EmptyDeployment> deploy_setProperty(_setProperty, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::settingsValues, ::v4::com::harman::btpres::BTPresTypes_::settingsValuesDeployment_t> deploy_setValue(_setValue, static_cast<::v4::com::harman::btpres::BTPresTypes_::settingsValuesDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSettingsProperty, CommonAPI::EmptyDeployment> deploy_getProperty(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::settingsValues, ::v4::com::harman::btpres::BTPresTypes_::settingsValuesDeployment_t> deploy_getValue(static_cast<::v4::com::harman::btpres::BTPresTypes_::settingsValuesDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSettingsOperation, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSettingsProperty, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::settingsValues, ::v4::com::harman::btpres::BTPresTypes_::settingsValuesDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSettingsProperty,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::settingsValues,::v4::com::harman::btpres::BTPresTypes_::settingsValuesDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "PhoneSettings",
        "sii(yv)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_type, deploy_setProperty, deploy_setValue,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eSettingsProperty, CommonAPI::EmptyDeployment> _getProperty, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::settingsValues, ::v4::com::harman::btpres::BTPresTypes_::settingsValuesDeployment_t> _getValue) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _outAddress.getValue(), _getProperty.getValue(), _getValue.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_outAddress, deploy_getProperty, deploy_getValue));
    }
    /**
     * description: This API is used to enable or disable Do Not Disturb for a specific device.    
     *   When this is enabled incoming call to that device will be rejected and also
     *   SMS notification     alerts will be disabled.
     * param: device  (dontDisturbDeviceInfo) : contains the BD address and DnD status to be
     *   set.          returns:  error code (eErrorType)       : error code            
     *        This API will be deprecated once all client move to DontDisturbExtended
     *   API
     */
    void ConnectionManagerDBusProxy::DontDisturb(const ::v4::com::harman::btpres::BTPresTypes::dontDisturbDeviceInfo &_device, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::dontDisturbDeviceInfo, ::v4::com::harman::btpres::BTPresTypes_::dontDisturbDeviceInfoDeployment_t> deploy_device(_device, static_cast<::v4::com::harman::btpres::BTPresTypes_::dontDisturbDeviceInfoDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::dontDisturbDeviceInfo, ::v4::com::harman::btpres::BTPresTypes_::dontDisturbDeviceInfoDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "DontDisturb",
        "(sb)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_device,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::DontDisturbAsync(const ::v4::com::harman::btpres::BTPresTypes::dontDisturbDeviceInfo &_device, DontDisturbAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::dontDisturbDeviceInfo, ::v4::com::harman::btpres::BTPresTypes_::dontDisturbDeviceInfoDeployment_t> deploy_device(_device, static_cast<::v4::com::harman::btpres::BTPresTypes_::dontDisturbDeviceInfoDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::dontDisturbDeviceInfo, ::v4::com::harman::btpres::BTPresTypes_::dontDisturbDeviceInfoDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "DontDisturb",
        "(sb)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_device,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: This API is used to enable or disable Do Not Disturb.      This method should
     *   be called with eDndType , which contains different type of dnd .      when
     *   clients wants to enable phone specific dnd then dnd type should be DND_PHONE  
     *      Whne clents wants to enable dnd for somplete HU then dnd type should be
     *   DND_HU      Whne clents wants to disable audio handling for the BTPRES then
     *   dnd type should be DND_DISABLE_AUDIO.
     * param: device  (extendedDnd) : different type of DND mode       returns:  error code
     *   (eErrorType)       : error code
     */
    void ConnectionManagerDBusProxy::DontDisturbExtended(const ::v4::com::harman::btpres::BTPresTypes::extendedDnd &_dndMode, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::extendedDnd, ::v4::com::harman::btpres::BTPresTypes_::extendedDndDeployment_t> deploy_dndMode(_dndMode, static_cast<::v4::com::harman::btpres::BTPresTypes_::extendedDndDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::extendedDnd, ::v4::com::harman::btpres::BTPresTypes_::extendedDndDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "DontDisturbExtended",
        "(sbi)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_dndMode,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::DontDisturbExtendedAsync(const ::v4::com::harman::btpres::BTPresTypes::extendedDnd &_dndMode, DontDisturbExtendedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::extendedDnd, ::v4::com::harman::btpres::BTPresTypes_::extendedDndDeployment_t> deploy_dndMode(_dndMode, static_cast<::v4::com::harman::btpres::BTPresTypes_::extendedDndDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::extendedDnd, ::v4::com::harman::btpres::BTPresTypes_::extendedDndDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "DontDisturbExtended",
        "(sbi)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_dndMode,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: This will update the position of the device in devList(Bonded Device List)
     *   attribute.For example     device with index 1 will be at top of the devList.
     * param: address  (string)   : Address of the device
     * param: index  (UInt16)     : New index(position) for the device          returns: 
     *   error code (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::SetFavoriteDevice(const std::string &_address, const uint16_t &_index, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_address(_address, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_index(_index, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "SetFavoriteDevice",
        "sq",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_address, deploy_index,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::SetFavoriteDeviceAsync(const std::string &_address, const uint16_t &_index, SetFavoriteDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_address(_address, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_index(_index, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "SetFavoriteDevice",
        "sq",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_address, deploy_index,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: This will be used to play the HU ringtone
     * param: toneID    : Tone ID which HMI want to play          returns:  error code
     *   (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::play(const ::v4::com::harman::btpres::BTPresTypes::uToneID &_toneID, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::uToneID, ::v4::com::harman::btpres::BTPresTypes_::uToneIDDeployment_t> deploy_toneID(_toneID, static_cast<::v4::com::harman::btpres::BTPresTypes_::uToneIDDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::uToneID, ::v4::com::harman::btpres::BTPresTypes_::uToneIDDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "play",
        "(yv)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_toneID,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::playAsync(const ::v4::com::harman::btpres::BTPresTypes::uToneID &_toneID, PlayAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::uToneID, ::v4::com::harman::btpres::BTPresTypes_::uToneIDDeployment_t> deploy_toneID(_toneID, static_cast<::v4::com::harman::btpres::BTPresTypes_::uToneIDDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::uToneID, ::v4::com::harman::btpres::BTPresTypes_::uToneIDDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "play",
        "(yv)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_toneID,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: This will be used to stop the HU ringtone playback started by previous method
     * param: toneID    : Tone ID which is currently playing          returns:  error code
     *   (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::stop(const ::v4::com::harman::btpres::BTPresTypes::uToneID &_ringID, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::uToneID, ::v4::com::harman::btpres::BTPresTypes_::uToneIDDeployment_t> deploy_ringID(_ringID, static_cast<::v4::com::harman::btpres::BTPresTypes_::uToneIDDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::uToneID, ::v4::com::harman::btpres::BTPresTypes_::uToneIDDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "stop",
        "(yv)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_ringID,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::stopAsync(const ::v4::com::harman::btpres::BTPresTypes::uToneID &_ringID, StopAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::uToneID, ::v4::com::harman::btpres::BTPresTypes_::uToneIDDeployment_t> deploy_ringID(_ringID, static_cast<::v4::com::harman::btpres::BTPresTypes_::uToneIDDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::uToneID, ::v4::com::harman::btpres::BTPresTypes_::uToneIDDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "stop",
        "(yv)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_ringID,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: This can be used by the clients to get bonded device details like manufacturer,
     *   model,                       software version, profileinfo etc.
     * param: address  (string)   : Address of the device          returns:  error code
     *   (eErrorType) : error code         returns:  device (deviceDetails) : This
     *   contains details like BD Address, Name,                   manufacturer, model,
     *   software version, profileinfo etc.
     */
    void ConnectionManagerDBusProxy::getBondedDeviceDetails(const std::string &_address, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, ::v4::com::harman::btpres::BTPresTypes::deviceDetails &_device, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_address(_address, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::deviceDetails, ::v4::com::harman::btpres::BTPresTypes_::deviceDetailsDeployment_t> deploy_device(static_cast<::v4::com::harman::btpres::BTPresTypes_::deviceDetailsDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::deviceDetails,::v4::com::harman::btpres::BTPresTypes_::deviceDetailsDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getBondedDeviceDetails",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_address,
_internalCallStatus,
deploy_errorCode, deploy_device);
_errorCode = deploy_errorCode.getValue();
_device = deploy_device.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::getBondedDeviceDetailsAsync(const std::string &_address, GetBondedDeviceDetailsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_address(_address, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::deviceDetails, ::v4::com::harman::btpres::BTPresTypes_::deviceDetailsDeployment_t> deploy_device(static_cast<::v4::com::harman::btpres::BTPresTypes_::deviceDetailsDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::deviceDetails,::v4::com::harman::btpres::BTPresTypes_::deviceDetailsDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getBondedDeviceDetails",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_address,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::deviceDetails, ::v4::com::harman::btpres::BTPresTypes_::deviceDetailsDeployment_t> _device) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _device.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_device));
    }
    /**
     * description: This will be used to reset profile / profiles to default value.
     * param: type (factroyResetType)	: Type of reset can be user or system level            
     *                                 USER: Should set current user settings to
     *   default value                                           SYSTEM: Should set all
     *   profiles settings to default value          returns:  error code (eErrorType)
     *   : error code
     */
    void ConnectionManagerDBusProxy::factoryReset(const ::v4::com::harman::btpres::BTPresTypes::factroyResetType &_type, CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::factroyResetType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::factroyResetType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "factoryReset",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_type,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::factoryResetAsync(const ::v4::com::harman::btpres::BTPresTypes::factroyResetType &_type, FactoryResetAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::factroyResetType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::factroyResetType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "factoryReset",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_type,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: This will be used to get the radio strength of Bluetooth device connected to HU.
     */
    void ConnectionManagerDBusProxy::getRadioStrength(CommonAPI::CallStatus &_internalCallStatus, ::v4::com::harman::btpres::BTPresTypes::radioStrengthInfoList &_radioStrengthList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::radioStrengthInfoList, ::v4::com::harman::btpres::BTPresTypes_::radioStrengthInfoListDeployment_t> deploy_radioStrengthList(static_cast<::v4::com::harman::btpres::BTPresTypes_::radioStrengthInfoListDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::radioStrengthInfoList,::v4::com::harman::btpres::BTPresTypes_::radioStrengthInfoListDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getRadioStrength",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_radioStrengthList);
_radioStrengthList = deploy_radioStrengthList.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::getRadioStrengthAsync(GetRadioStrengthAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::radioStrengthInfoList, ::v4::com::harman::btpres::BTPresTypes_::radioStrengthInfoListDeployment_t> deploy_radioStrengthList(static_cast<::v4::com::harman::btpres::BTPresTypes_::radioStrengthInfoListDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::radioStrengthInfoList,::v4::com::harman::btpres::BTPresTypes_::radioStrengthInfoListDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getRadioStrength",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::com::harman::btpres::BTPresTypes::radioStrengthInfoList, ::v4::com::harman::btpres::BTPresTypes_::radioStrengthInfoListDeployment_t> _radioStrengthList) {
        	if (_callback)
        		_callback(_internalCallStatus, _radioStrengthList.getValue());
        },
        std::make_tuple(deploy_radioStrengthList));
    }


void ConnectionManagerDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 2;
          ownVersionMinor = 0;
      }

      } // namespace btpres
      } // namespace harman
      } // namespace com
      } // namespace v2
