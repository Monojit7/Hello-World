/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v3/org/genivi/am/routinginterface/RoutingControlObserver.hpp>
#include <v3/org/genivi/am/routinginterface/RoutingControlObserverDBusStubAdapter.hpp>

namespace v3 {
namespace org {
namespace genivi {
namespace am {
namespace routinginterface {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createRoutingControlObserverDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<RoutingControlObserverDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerRoutingControlObserverDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	RoutingControlObserver::getInterface(), &createRoutingControlObserverDBusStubAdapter);
}

RoutingControlObserverDBusStubAdapterInternal::~RoutingControlObserverDBusStubAdapterInternal() {
    deactivateManagedInstances();
    RoutingControlObserverDBusStubAdapterHelper::deinit();
}

void RoutingControlObserverDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* RoutingControlObserverDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"getRoutingReadyAttribute\">\n"
            "<arg name=\"value\" type=\"i\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onRoutingReadyAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * description: Registers a domain. (at)return E_OK on success, E_ALREADY_EXISTENT if already
         *   registered E_UNKNOWN on error
         */
        "<method name=\"registerDomain\">\n"
            "<arg name=\"_domainData\" type=\"(qsssbbi)\" direction=\"in\" />\n"
            "<arg name=\"_returnBusname\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_returnInterface\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_domainID\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"_amError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Deregisters a domain. All sources, sinks, gateways and crossfaders from that
         *   domain will be removed as well. (at)return E_OK on success, E_NON_EXISTENT if
         *   not found E_UNKNOWN on error
         */
        "<method name=\"deregisterDomain\">\n"
            "<arg name=\"_domainID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_amError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This function returns the ID to the given domain name. If already a domain is
         *   registered with this name, it will return the corresponding ID, if not it will
         *   reserve an ID but not register the domain. The other parameters of the domain
         *   will be overwritten when the domain is registered. (at)return E_OK on success,
         *   E_UNKNOWN on error     please use pulseAudio as the name to peek domainID. now
         *   all the sources and sinks are defined in domain pulseAudio.
         */
        "<method name=\"peekDomain\">\n"
            "<arg name=\"_name\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_domainID\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"_amError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Registers a sink. If the sink is part of a gateway, the list connection formats
         *   are copied to the gateway information (at)return E_OK on success,
         *   E_ALREADY_EXISTENT if already registered E_UNKNOWN on error
         */
        "<method name=\"registerSink\">\n"
            "<arg name=\"_sinkData\" type=\"(qsqqnb(iq)ina(qn)aqa(in)a(qin)a(qin))\" direction=\"in\" />\n"
            "<arg name=\"_sinkID\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"_amError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Deregisters a sink. (at)return E_OK on success, E_NON_EXISTENT if not found
         *   E_UNKNOWN on error
         */
        "<method name=\"deregisterSink\">\n"
            "<arg name=\"_sinkID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_amError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This function returns the ID to the given sink name. If already a sink is
         *   registered with this name, it will return the corresponding ID, if not it will
         *   reserve an ID but not register the sink. The other parameters of the sink will
         *   be overwritten when the sink is registered. (at)return E_OK on success,
         *   E_UNKNOWN on error
         */
        "<method name=\"peekSink\">\n"
            "<arg name=\"_name\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_sinkID\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"_amError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This function peeks a sink class ID. It is used by the RoutingPlugins to
         *   determine the sink class IDs of a sink class. (at)return E_OK on success,
         *   E_DATABASE_ERROR on error
         */
        "<method name=\"peekSinkClassID\">\n"
            "<arg name=\"_name\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_sinkClassID\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"_amError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Updates data of a sink. (at)return E_OK on success, E_NON_EXISTENT if the sink
         *   ID is not valid.
         */
        "<method name=\"updateSink\">\n"
            "<arg name=\"_sinkID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_sinkClassID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_listSoundProperties\" type=\"a(qn)\" direction=\"in\" />\n"
            "<arg name=\"_listConnectionFormats\" type=\"aq\" direction=\"in\" />\n"
            "<arg name=\"_listMainSoundProperties\" type=\"a(in)\" direction=\"in\" />\n"
            "<arg name=\"_amError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Registers a source.  If the source is part of a gateway, the list connection
         *   formats are copied to the gateway information (at)return E_OK on success,
         *   E_UNKNOWN on error, E_ALREADY_EXIST if either name or source ID already exists
         */
        "<method name=\"registerSource\">\n"
            "<arg name=\"_sourceData\" type=\"(qqsqinb(iq)ia(qn)aqa(in)a(qin)a(qin))\" direction=\"in\" />\n"
            "<arg name=\"_sourceID\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"_amError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Deregisters a source. (at)return E_OK on success, E_NON_EXISTENT if not found
         *   E_UNKNOWN on error
         */
        "<method name=\"deregisterSource\">\n"
            "<arg name=\"_sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_amError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This function returns the ID to the given source name. If already a source is
         *   registered with this name, it will return the corresponding ID, if not it will
         *   reserve an ID but not register the source. The other parameters of the source
         *   will be overwritten when the source is registered. (at)return E_OK on success,
         *   E_UNKNOWN on error
         */
        "<method name=\"peekSource\">\n"
            "<arg name=\"_name\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_sourceID\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"_amError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Peeks a source class ID. It is used by the RoutingPlugins to determine the
         *   source class IDs of a source class. (at)return E_OK on success,
         *   E_DATABASE_ERROR on error
         */
        "<method name=\"peekSourceClassID\">\n"
            "<arg name=\"_name\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_sourceClassID\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"_amError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Updates data of a source. (at)return E_OK on success, E_NON_EXISTENT if the
         *   source ID in the struct is not valid.  Please note that only the following
         *   data out of am_Source_s have effect when they are changed: sourceClassID,
         *   listSoundProperties, listConnectionFormats, listMainSoundProperties
         */
        "<method name=\"updateSource\">\n"
            "<arg name=\"_sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_sourceClassID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_listSoundProperties\" type=\"a(qn)\" direction=\"in\" />\n"
            "<arg name=\"_listConnectionFormats\" type=\"aq\" direction=\"in\" />\n"
            "<arg name=\"_listMainSoundProperties\" type=\"a(in)\" direction=\"in\" />\n"
            "<arg name=\"_amError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Is called when a low level interrupt changes it status.
         */
        "<method name=\"hookInterruptStatusChange\">\n"
            "<arg name=\"_sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_interruptState\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: This hook is called when all elements from a domain are registered. Is used by
         *   the Controller to know when all expected domains are finally registered.
         */
        "<method name=\"hookDomainRegistrationComplete\">\n"
            "<arg name=\"_domainID\" type=\"q\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: Is called when a sink changes its availability.
         */
        "<method name=\"hookSinkAvailablityStatusChange\">\n"
            "<arg name=\"_sinkID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_availability\" type=\"(iq)\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: Is called when a source changes its availability.
         */
        "<method name=\"hookSourceAvailablityStatusChange\">\n"
            "<arg name=\"_sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_availability\" type=\"(iq)\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: Is called when a domain changes its status. This used for early domains only.
         */
        "<method name=\"hookDomainStateChange\">\n"
            "<arg name=\"_domainID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_domainState\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: This function is used to send out all data that has been changed in an early
         *   state.
         */
        "<method name=\"sendChangedData\">\n"
            "<arg name=\"_earlyData\" type=\"a(i(yv)(yv))\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"writeToDevice\">\n"
            "<arg name=\"_devAddr\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_dataSize\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_data\" type=\"ay\" direction=\"in\" />\n"
            "<arg name=\"_eqToolError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"readFromDevice\">\n"
            "<arg name=\"_devAddr\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_dataSize\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_data\" type=\"ay\" direction=\"out\" />\n"
            "<arg name=\"_eqToolError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"setFilter\">\n"
            "<arg name=\"_paramData\" type=\"ay\" direction=\"in\" />\n"
            "<arg name=\"_paramSize\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_data\" type=\"ay\" direction=\"in\" />\n"
            "<arg name=\"_dataSize\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_eqToolError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"getFilter\">\n"
            "<arg name=\"_paramData\" type=\"ay\" direction=\"in\" />\n"
            "<arg name=\"_paramSize\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_data\" type=\"ay\" direction=\"out\" />\n"
            "<arg name=\"_eqToolError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"setLimiter\">\n"
            "<arg name=\"_paramData\" type=\"ay\" direction=\"in\" />\n"
            "<arg name=\"_paramSize\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_data\" type=\"ay\" direction=\"in\" />\n"
            "<arg name=\"_dataSize\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_eqToolError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"getLimiter\">\n"
            "<arg name=\"_paramData\" type=\"ay\" direction=\"in\" />\n"
            "<arg name=\"_paramSize\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_data\" type=\"ay\" direction=\"out\" />\n"
            "<arg name=\"_eqToolError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"setVolume\">\n"
            "<arg name=\"_sinkID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_volume\" type=\"y\" direction=\"in\" />\n"
            "<arg name=\"_eqToolError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"getVolume\">\n"
            "<arg name=\"_volume\" type=\"y\" direction=\"out\" />\n"
            "<arg name=\"_eqToolError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"setChannelMute\">\n"
            "<arg name=\"_channelIndex\" type=\"y\" direction=\"in\" />\n"
            "<arg name=\"_muteState\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_eqToolError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"setChannelPhase\">\n"
            "<arg name=\"_channelIndex\" type=\"y\" direction=\"in\" />\n"
            "<arg name=\"_phase\" type=\"b\" direction=\"in\" />\n"
            "<arg name=\"_eqToolError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"setBMT\">\n"
            "<arg name=\"_bass\" type=\"y\" direction=\"in\" />\n"
            "<arg name=\"_mid\" type=\"y\" direction=\"in\" />\n"
            "<arg name=\"_treble\" type=\"y\" direction=\"in\" />\n"
            "<arg name=\"_eqToolError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"getBMT\">\n"
            "<arg name=\"_bass\" type=\"y\" direction=\"out\" />\n"
            "<arg name=\"_mid\" type=\"y\" direction=\"out\" />\n"
            "<arg name=\"_treble\" type=\"y\" direction=\"out\" />\n"
            "<arg name=\"_eqToolError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This function send parameters of limiter. If there is no error it will return
         *   0. If not it will return -1.
         */
        "<method name=\"sendLimiter\">\n"
            "<arg name=\"_limiter\" type=\"(ya(ydydddd))\" direction=\"in\" />\n"
            "<arg name=\"_hqError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This function send parameters of EQ filter. If there is no error it will return
         *   0. If not it will return -1.
         */
        "<method name=\"sendEQFilter\">\n"
            "<arg name=\"_bsFilter\" type=\"(yyyya(yqndyy))\" direction=\"in\" />\n"
            "<arg name=\"_qhError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This function send parameters of delay time. If there is no error it will
         *   return 0. If not it will return -1.
         */
        "<method name=\"sendDelayTime\">\n"
            "<arg name=\"_delayTime\" type=\"(ya(yd))\" direction=\"in\" />\n"
            "<arg name=\"_qhError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This function send parameters of ClariFi. If there is no error it will return
         *   0. If not it will return -1.
         */
        "<method name=\"sendClariFi\">\n"
            "<arg name=\"_bs\" type=\"(yydddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd)\" direction=\"in\" />\n"
            "<arg name=\"_qhError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This function send parameters of loudness. If there is no error it will return
         *   0. If not it will return -1.
         */
        "<method name=\"sendLoudness\">\n"
            "<arg name=\"_bs\" type=\"(yyqqddyyya(nnnn))\" direction=\"in\" />\n"
            "<arg name=\"_qhError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This function send parameters of channel gain. If there is no error it will
         *   return 0. If not it will return -1.
         */
        "<method name=\"sendChannelGain\">\n"
            "<arg name=\"_bs\" type=\"(yya(ydy))\" direction=\"in\" />\n"
            "<arg name=\"_qhError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This function send parameters of maximum volume of source. If there is no error
         *   it will return 0. If not it will return -1.
         */
        "<method name=\"sendVolumeMax\">\n"
            "<arg name=\"_sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_volume\" type=\"n\" direction=\"in\" />\n"
            "<arg name=\"_qhError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This function send parameters of minimum volume of source. If there is no error
         *   it will return 0. If not it will return -1.
         */
        "<method name=\"sendVolumeMin\">\n"
            "<arg name=\"_sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_volume\" type=\"n\" direction=\"in\" />\n"
            "<arg name=\"_qhError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This function send parameters of absolute volume of source. If there is no
         *   error it will return 0. If not it will return -1.
         */
        "<method name=\"sendVolumeAbs\">\n"
            "<arg name=\"_sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_volume\" type=\"n\" direction=\"in\" />\n"
            "<arg name=\"_qhError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This function send parameters of ratio volume of source. If there is no error
         *   it will return 0. If not it will return -1.
         */
        "<method name=\"sendVolumeRatio\">\n"
            "<arg name=\"_sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_volume\" type=\"n\" direction=\"in\" />\n"
            "<arg name=\"_qhError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This function save tuning data into configuration file. If there is no error it
         *   will return 0. If not it will return -1.
         */
        "<method name=\"saveDataToFile\">\n"
            "<arg name=\"_qhError\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
        CommonAPI::Version
        > RoutingControlObserverDBusStubAdapterInternal::getRoutingControlObserverInterfaceVersionStubDispatcher(&RoutingControlObserverStub::getInterfaceVersion, "uu");

/**
 * description: This attribute signals the current routing state to the clients. A client
 *   should notify himself to this attribute in order to know the current state and
 *   act accordingly.
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
        ::v3::org::genivi::am_t::am_RoutingReady_e
        > RoutingControlObserverDBusStubAdapterInternal::getRoutingReadyAttributeStubDispatcher(
            &::v3::org::genivi::am::routinginterface::RoutingControlObserverStub::getRoutingReadyAttribute
            , "i"
            );



/**
 * description: Registers a domain. (at)return E_OK on success, E_ALREADY_EXISTENT if already
 *   registered E_UNKNOWN on error
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::am_Domain_s, std::string, std::string>,
    std::tuple<::v3::org::genivi::am_t::am_domainID_t, ::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<::v3::org::genivi::am_t_::am_Domain_sDeployment_t, CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::registerDomainStubDispatcher(
    &RoutingControlObserverStub::registerDomain, "qi",
					std::make_tuple(static_cast<::v3::org::genivi::am_t_::am_Domain_sDeployment_t*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Deregisters a domain. All sources, sinks, gateways and crossfaders from that
 *   domain will be removed as well. (at)return E_OK on success, E_NON_EXISTENT if
 *   not found E_UNKNOWN on error
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::am_domainID_t>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::deregisterDomainStubDispatcher(
    &RoutingControlObserverStub::deregisterDomain, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This function returns the ID to the given domain name. If already a domain is
 *   registered with this name, it will return the corresponding ID, if not it will
 *   reserve an ID but not register the domain. The other parameters of the domain
 *   will be overwritten when the domain is registered. (at)return E_OK on success,
 *   E_UNKNOWN on error     please use pulseAudio as the name to peek domainID. now
 *   all the sources and sinks are defined in domain pulseAudio.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<std::string>,
    std::tuple<::v3::org::genivi::am_t::am_domainID_t, ::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::peekDomainStubDispatcher(
    &RoutingControlObserverStub::peekDomain, "qi",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Registers a sink. If the sink is part of a gateway, the list connection formats
 *   are copied to the gateway information (at)return E_OK on success,
 *   E_ALREADY_EXISTENT if already registered E_UNKNOWN on error
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::am_Sink_s>,
    std::tuple<::v3::org::genivi::am_t::am_sinkID_t, ::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<::v3::org::genivi::am_t_::am_Sink_sDeployment_t>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::registerSinkStubDispatcher(
    &RoutingControlObserverStub::registerSink, "qi",
					std::make_tuple(static_cast<::v3::org::genivi::am_t_::am_Sink_sDeployment_t*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Deregisters a sink. (at)return E_OK on success, E_NON_EXISTENT if not found
 *   E_UNKNOWN on error
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::am_sinkID_t>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::deregisterSinkStubDispatcher(
    &RoutingControlObserverStub::deregisterSink, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This function returns the ID to the given sink name. If already a sink is
 *   registered with this name, it will return the corresponding ID, if not it will
 *   reserve an ID but not register the sink. The other parameters of the sink will
 *   be overwritten when the sink is registered. (at)return E_OK on success,
 *   E_UNKNOWN on error
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<std::string>,
    std::tuple<::v3::org::genivi::am_t::am_sinkID_t, ::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::peekSinkStubDispatcher(
    &RoutingControlObserverStub::peekSink, "qi",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This function peeks a sink class ID. It is used by the RoutingPlugins to
 *   determine the sink class IDs of a sink class. (at)return E_OK on success,
 *   E_DATABASE_ERROR on error
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<std::string>,
    std::tuple<::v3::org::genivi::am_t::am_sinkClass_t, ::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::peekSinkClassIDStubDispatcher(
    &RoutingControlObserverStub::peekSinkClassID, "qi",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Updates data of a sink. (at)return E_OK on success, E_NON_EXISTENT if the sink
 *   ID is not valid.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::am_sinkID_t, ::v3::org::genivi::am_t::am_sinkClass_t, ::v3::org::genivi::am_t::am_SoundProperty_L, ::v3::org::genivi::am_t::am_ConnectionFormat_L, ::v3::org::genivi::am_t::am_MainSoundProperty_L>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, ::v3::org::genivi::am_t_::am_SoundProperty_LDeployment_t, ::v3::org::genivi::am_t_::am_ConnectionFormat_LDeployment_t, ::v3::org::genivi::am_t_::am_MainSoundProperty_LDeployment_t>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::updateSinkStubDispatcher(
    &RoutingControlObserverStub::updateSink, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<::v3::org::genivi::am_t_::am_SoundProperty_LDeployment_t*>(nullptr), static_cast<::v3::org::genivi::am_t_::am_ConnectionFormat_LDeployment_t*>(nullptr), static_cast<::v3::org::genivi::am_t_::am_MainSoundProperty_LDeployment_t*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Registers a source.  If the source is part of a gateway, the list connection
 *   formats are copied to the gateway information (at)return E_OK on success,
 *   E_UNKNOWN on error, E_ALREADY_EXIST if either name or source ID already exists
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::am_Source_s>,
    std::tuple<::v3::org::genivi::am_t::am_sourceID_t, ::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<::v3::org::genivi::am_t_::am_Source_sDeployment_t>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::registerSourceStubDispatcher(
    &RoutingControlObserverStub::registerSource, "qi",
					std::make_tuple(static_cast<::v3::org::genivi::am_t_::am_Source_sDeployment_t*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Deregisters a source. (at)return E_OK on success, E_NON_EXISTENT if not found
 *   E_UNKNOWN on error
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::am_sourceID_t>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::deregisterSourceStubDispatcher(
    &RoutingControlObserverStub::deregisterSource, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This function returns the ID to the given source name. If already a source is
 *   registered with this name, it will return the corresponding ID, if not it will
 *   reserve an ID but not register the source. The other parameters of the source
 *   will be overwritten when the source is registered. (at)return E_OK on success,
 *   E_UNKNOWN on error
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<std::string>,
    std::tuple<::v3::org::genivi::am_t::am_sourceID_t, ::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::peekSourceStubDispatcher(
    &RoutingControlObserverStub::peekSource, "qi",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Peeks a source class ID. It is used by the RoutingPlugins to determine the
 *   source class IDs of a source class. (at)return E_OK on success,
 *   E_DATABASE_ERROR on error
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<std::string>,
    std::tuple<::v3::org::genivi::am_t::am_sourceClass_t, ::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::peekSourceClassIDStubDispatcher(
    &RoutingControlObserverStub::peekSourceClassID, "qi",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Updates data of a source. (at)return E_OK on success, E_NON_EXISTENT if the
 *   source ID in the struct is not valid.  Please note that only the following
 *   data out of am_Source_s have effect when they are changed: sourceClassID,
 *   listSoundProperties, listConnectionFormats, listMainSoundProperties
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::am_sourceID_t, ::v3::org::genivi::am_t::am_sourceClass_t, ::v3::org::genivi::am_t::am_SoundProperty_L, ::v3::org::genivi::am_t::am_ConnectionFormat_L, ::v3::org::genivi::am_t::am_MainSoundProperty_L>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, ::v3::org::genivi::am_t_::am_SoundProperty_LDeployment_t, ::v3::org::genivi::am_t_::am_ConnectionFormat_LDeployment_t, ::v3::org::genivi::am_t_::am_MainSoundProperty_LDeployment_t>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::updateSourceStubDispatcher(
    &RoutingControlObserverStub::updateSource, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<::v3::org::genivi::am_t_::am_SoundProperty_LDeployment_t*>(nullptr), static_cast<::v3::org::genivi::am_t_::am_ConnectionFormat_LDeployment_t*>(nullptr), static_cast<::v3::org::genivi::am_t_::am_MainSoundProperty_LDeployment_t*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Is called when a low level interrupt changes it status.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::am_sourceID_t, ::v3::org::genivi::am_t::am_InterruptState_e>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > RoutingControlObserverDBusStubAdapterInternal::hookInterruptStatusChangeStubDispatcher(
    &RoutingControlObserverStub::hookInterruptStatusChange, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: This hook is called when all elements from a domain are registered. Is used by
 *   the Controller to know when all expected domains are finally registered.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::am_domainID_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > RoutingControlObserverDBusStubAdapterInternal::hookDomainRegistrationCompleteStubDispatcher(
    &RoutingControlObserverStub::hookDomainRegistrationComplete, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: Is called when a sink changes its availability.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::am_sinkID_t, ::v3::org::genivi::am_t::am_Availability_s>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, ::v3::org::genivi::am_t_::am_Availability_sDeployment_t>,
    std::tuple<>
    
    > RoutingControlObserverDBusStubAdapterInternal::hookSinkAvailablityStatusChangeStubDispatcher(
    &RoutingControlObserverStub::hookSinkAvailablityStatusChange, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<::v3::org::genivi::am_t_::am_Availability_sDeployment_t*>(nullptr)),
                	std::make_tuple());

/**
 * description: Is called when a source changes its availability.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::am_sourceID_t, ::v3::org::genivi::am_t::am_Availability_s>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, ::v3::org::genivi::am_t_::am_Availability_sDeployment_t>,
    std::tuple<>
    
    > RoutingControlObserverDBusStubAdapterInternal::hookSourceAvailablityStatusChangeStubDispatcher(
    &RoutingControlObserverStub::hookSourceAvailablityStatusChange, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<::v3::org::genivi::am_t_::am_Availability_sDeployment_t*>(nullptr)),
                	std::make_tuple());

/**
 * description: Is called when a domain changes its status. This used for early domains only.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::am_domainID_t, ::v3::org::genivi::am_t::am_DomainState_e>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > RoutingControlObserverDBusStubAdapterInternal::hookDomainStateChangeStubDispatcher(
    &RoutingControlObserverStub::hookDomainStateChange, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: This function is used to send out all data that has been changed in an early
 *   state.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::am_EarlyData_L>,
    std::tuple<>,
    std::tuple<::v3::org::genivi::am_t_::am_EarlyData_LDeployment_t>,
    std::tuple<>
    
    > RoutingControlObserverDBusStubAdapterInternal::sendChangedDataStubDispatcher(
    &RoutingControlObserverStub::sendChangedData, "",
					std::make_tuple(static_cast<::v3::org::genivi::am_t_::am_EarlyData_LDeployment_t*>(nullptr)),
                	std::make_tuple());

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<uint32_t, uint32_t, CommonAPI::ByteBuffer>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::writeToDeviceStubDispatcher(
    &RoutingControlObserverStub::writeToDevice, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<uint32_t, uint32_t>,
    std::tuple<CommonAPI::ByteBuffer, ::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::readFromDeviceStubDispatcher(
    &RoutingControlObserverStub::readFromDevice, "ayi",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<CommonAPI::ByteBuffer, uint32_t, CommonAPI::ByteBuffer, uint32_t>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::setFilterStubDispatcher(
    &RoutingControlObserverStub::setFilter, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<CommonAPI::ByteBuffer, uint32_t>,
    std::tuple<CommonAPI::ByteBuffer, ::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::getFilterStubDispatcher(
    &RoutingControlObserverStub::getFilter, "ayi",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<CommonAPI::ByteBuffer, uint32_t, CommonAPI::ByteBuffer, uint32_t>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::setLimiterStubDispatcher(
    &RoutingControlObserverStub::setLimiter, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<CommonAPI::ByteBuffer, uint32_t>,
    std::tuple<CommonAPI::ByteBuffer, ::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::getLimiterStubDispatcher(
    &RoutingControlObserverStub::getLimiter, "ayi",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<uint16_t, uint8_t>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::setVolumeStubDispatcher(
    &RoutingControlObserverStub::setVolume, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<>,
    std::tuple<uint8_t, ::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::getVolumeStubDispatcher(
    &RoutingControlObserverStub::getVolume, "yi",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<uint8_t, ::v3::org::genivi::am_t::am_MuteState_e>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::setChannelMuteStubDispatcher(
    &RoutingControlObserverStub::setChannelMute, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<uint8_t, bool>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::setChannelPhaseStubDispatcher(
    &RoutingControlObserverStub::setChannelPhase, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<int8_t, int8_t, int8_t>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::setBMTStubDispatcher(
    &RoutingControlObserverStub::setBMT, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<>,
    std::tuple<int8_t, int8_t, int8_t, ::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::getBMTStubDispatcher(
    &RoutingControlObserverStub::getBMT, "yyyi",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This function send parameters of limiter. If there is no error it will return
 *   0. If not it will return -1.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::hq_limiterStruct_param>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<::v3::org::genivi::am_t_::hq_limiterStruct_paramDeployment_t>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::sendLimiterStubDispatcher(
    &RoutingControlObserverStub::sendLimiter, "i",
					std::make_tuple(static_cast<::v3::org::genivi::am_t_::hq_limiterStruct_paramDeployment_t*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This function send parameters of EQ filter. If there is no error it will return
 *   0. If not it will return -1.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::hq_eqFilterStruct_param>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<::v3::org::genivi::am_t_::hq_eqFilterStruct_paramDeployment_t>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::sendEQFilterStubDispatcher(
    &RoutingControlObserverStub::sendEQFilter, "i",
					std::make_tuple(static_cast<::v3::org::genivi::am_t_::hq_eqFilterStruct_paramDeployment_t*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This function send parameters of delay time. If there is no error it will
 *   return 0. If not it will return -1.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::hq_delayTimeStruct_param>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<::v3::org::genivi::am_t_::hq_delayTimeStruct_paramDeployment_t>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::sendDelayTimeStubDispatcher(
    &RoutingControlObserverStub::sendDelayTime, "i",
					std::make_tuple(static_cast<::v3::org::genivi::am_t_::hq_delayTimeStruct_paramDeployment_t*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This function send parameters of ClariFi. If there is no error it will return
 *   0. If not it will return -1.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::hq_ClariFiStruct_param>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<::v3::org::genivi::am_t_::hq_ClariFiStruct_paramDeployment_t>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::sendClariFiStubDispatcher(
    &RoutingControlObserverStub::sendClariFi, "i",
					std::make_tuple(static_cast<::v3::org::genivi::am_t_::hq_ClariFiStruct_paramDeployment_t*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This function send parameters of loudness. If there is no error it will return
 *   0. If not it will return -1.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::hq_londnessStruct_param>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<::v3::org::genivi::am_t_::hq_londnessStruct_paramDeployment_t>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::sendLoudnessStubDispatcher(
    &RoutingControlObserverStub::sendLoudness, "i",
					std::make_tuple(static_cast<::v3::org::genivi::am_t_::hq_londnessStruct_paramDeployment_t*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This function send parameters of channel gain. If there is no error it will
 *   return 0. If not it will return -1.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::hq_channelGainStruct_param>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<::v3::org::genivi::am_t_::hq_channelGainStruct_paramDeployment_t>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::sendChannelGainStubDispatcher(
    &RoutingControlObserverStub::sendChannelGain, "i",
					std::make_tuple(static_cast<::v3::org::genivi::am_t_::hq_channelGainStruct_paramDeployment_t*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This function send parameters of maximum volume of source. If there is no error
 *   it will return 0. If not it will return -1.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::hq_sourceID_t, ::v3::org::genivi::am_t::hq_volume_t>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::sendVolumeMaxStubDispatcher(
    &RoutingControlObserverStub::sendVolumeMax, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This function send parameters of minimum volume of source. If there is no error
 *   it will return 0. If not it will return -1.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::hq_sourceID_t, ::v3::org::genivi::am_t::hq_volume_t>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::sendVolumeMinStubDispatcher(
    &RoutingControlObserverStub::sendVolumeMin, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This function send parameters of absolute volume of source. If there is no
 *   error it will return 0. If not it will return -1.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::hq_sourceID_t, ::v3::org::genivi::am_t::hq_volume_t>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::sendVolumeAbsStubDispatcher(
    &RoutingControlObserverStub::sendVolumeAbs, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This function send parameters of ratio volume of source. If there is no error
 *   it will return 0. If not it will return -1.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<::v3::org::genivi::am_t::hq_sourceID_t, ::v3::org::genivi::am_t::hq_volume_t>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::sendVolumeRatioStubDispatcher(
    &RoutingControlObserverStub::sendVolumeRatio, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This function save tuning data into configuration file. If there is no error it
 *   will return 0. If not it will return -1.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v3::org::genivi::am::routinginterface::RoutingControlObserverStub,
    std::tuple<>,
    std::tuple<::v3::org::genivi::am_t::am_Error_e>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingControlObserverDBusStubAdapterInternal::saveDataToFileStubDispatcher(
    &RoutingControlObserverStub::saveDataToFile, "i",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));


/**
 * description: This attribute signals the current routing state to the clients. A client
 *   should notify himself to this attribute in order to know the current state and
 *   act accordingly.
 */
void RoutingControlObserverDBusStubAdapterInternal::fireRoutingReadyAttributeChanged(const ::v3::org::genivi::am_t::am_RoutingReady_e& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v3::org::genivi::am_t::am_RoutingReady_e
    >>
        ::sendSignal(
            *this,
            "onRoutingReadyAttributeChanged",
            "i",
            value
    
    );
}



const RoutingControlObserverDBusStubAdapterHelper::StubDispatcherTable& RoutingControlObserverDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& RoutingControlObserverDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

RoutingControlObserverDBusStubAdapterInternal::RoutingControlObserverDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      RoutingControlObserverDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<RoutingControlObserverStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: This attribute signals the current routing state to the clients. A client
             *   should notify himself to this attribute in order to know the current state and
             *   act accordingly.
             */
            { { "getRoutingReadyAttribute", "" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::getRoutingReadyAttributeStubDispatcher }
            ,
            /**
             * description: Registers a domain. (at)return E_OK on success, E_ALREADY_EXISTENT if already
             *   registered E_UNKNOWN on error
             */
            { { "registerDomain", "(qsssbbi)ss" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::registerDomainStubDispatcher },
            /**
             * description: Deregisters a domain. All sources, sinks, gateways and crossfaders from that
             *   domain will be removed as well. (at)return E_OK on success, E_NON_EXISTENT if
             *   not found E_UNKNOWN on error
             */
            { { "deregisterDomain", "q" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::deregisterDomainStubDispatcher },
            /**
             * description: This function returns the ID to the given domain name. If already a domain is
             *   registered with this name, it will return the corresponding ID, if not it will
             *   reserve an ID but not register the domain. The other parameters of the domain
             *   will be overwritten when the domain is registered. (at)return E_OK on success,
             *   E_UNKNOWN on error     please use pulseAudio as the name to peek domainID. now
             *   all the sources and sinks are defined in domain pulseAudio.
             */
            { { "peekDomain", "s" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::peekDomainStubDispatcher },
            /**
             * description: Registers a sink. If the sink is part of a gateway, the list connection formats
             *   are copied to the gateway information (at)return E_OK on success,
             *   E_ALREADY_EXISTENT if already registered E_UNKNOWN on error
             */
            { { "registerSink", "(qsqqnb(iq)ina(qn)aqa(in)a(qin)a(qin))" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::registerSinkStubDispatcher },
            /**
             * description: Deregisters a sink. (at)return E_OK on success, E_NON_EXISTENT if not found
             *   E_UNKNOWN on error
             */
            { { "deregisterSink", "q" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::deregisterSinkStubDispatcher },
            /**
             * description: This function returns the ID to the given sink name. If already a sink is
             *   registered with this name, it will return the corresponding ID, if not it will
             *   reserve an ID but not register the sink. The other parameters of the sink will
             *   be overwritten when the sink is registered. (at)return E_OK on success,
             *   E_UNKNOWN on error
             */
            { { "peekSink", "s" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::peekSinkStubDispatcher },
            /**
             * description: This function peeks a sink class ID. It is used by the RoutingPlugins to
             *   determine the sink class IDs of a sink class. (at)return E_OK on success,
             *   E_DATABASE_ERROR on error
             */
            { { "peekSinkClassID", "s" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::peekSinkClassIDStubDispatcher },
            /**
             * description: Updates data of a sink. (at)return E_OK on success, E_NON_EXISTENT if the sink
             *   ID is not valid.
             */
            { { "updateSink", "qqa(qn)aqa(in)" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::updateSinkStubDispatcher },
            /**
             * description: Registers a source.  If the source is part of a gateway, the list connection
             *   formats are copied to the gateway information (at)return E_OK on success,
             *   E_UNKNOWN on error, E_ALREADY_EXIST if either name or source ID already exists
             */
            { { "registerSource", "(qqsqinb(iq)ia(qn)aqa(in)a(qin)a(qin))" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::registerSourceStubDispatcher },
            /**
             * description: Deregisters a source. (at)return E_OK on success, E_NON_EXISTENT if not found
             *   E_UNKNOWN on error
             */
            { { "deregisterSource", "q" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::deregisterSourceStubDispatcher },
            /**
             * description: This function returns the ID to the given source name. If already a source is
             *   registered with this name, it will return the corresponding ID, if not it will
             *   reserve an ID but not register the source. The other parameters of the source
             *   will be overwritten when the source is registered. (at)return E_OK on success,
             *   E_UNKNOWN on error
             */
            { { "peekSource", "s" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::peekSourceStubDispatcher },
            /**
             * description: Peeks a source class ID. It is used by the RoutingPlugins to determine the
             *   source class IDs of a source class. (at)return E_OK on success,
             *   E_DATABASE_ERROR on error
             */
            { { "peekSourceClassID", "s" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::peekSourceClassIDStubDispatcher },
            /**
             * description: Updates data of a source. (at)return E_OK on success, E_NON_EXISTENT if the
             *   source ID in the struct is not valid.  Please note that only the following
             *   data out of am_Source_s have effect when they are changed: sourceClassID,
             *   listSoundProperties, listConnectionFormats, listMainSoundProperties
             */
            { { "updateSource", "qqa(qn)aqa(in)" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::updateSourceStubDispatcher },
            /**
             * description: Is called when a low level interrupt changes it status.
             */
            { { "hookInterruptStatusChange", "qi" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::hookInterruptStatusChangeStubDispatcher },
            /**
             * description: This hook is called when all elements from a domain are registered. Is used by
             *   the Controller to know when all expected domains are finally registered.
             */
            { { "hookDomainRegistrationComplete", "q" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::hookDomainRegistrationCompleteStubDispatcher },
            /**
             * description: Is called when a sink changes its availability.
             */
            { { "hookSinkAvailablityStatusChange", "q(iq)" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::hookSinkAvailablityStatusChangeStubDispatcher },
            /**
             * description: Is called when a source changes its availability.
             */
            { { "hookSourceAvailablityStatusChange", "q(iq)" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::hookSourceAvailablityStatusChangeStubDispatcher },
            /**
             * description: Is called when a domain changes its status. This used for early domains only.
             */
            { { "hookDomainStateChange", "qi" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::hookDomainStateChangeStubDispatcher },
            /**
             * description: This function is used to send out all data that has been changed in an early
             *   state.
             */
            { { "sendChangedData", "a(i(yv)(yv))" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::sendChangedDataStubDispatcher },
            { { "writeToDevice", "uuay" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::writeToDeviceStubDispatcher },
            { { "readFromDevice", "uu" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::readFromDeviceStubDispatcher },
            { { "setFilter", "ayuayu" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::setFilterStubDispatcher },
            { { "getFilter", "ayu" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::getFilterStubDispatcher },
            { { "setLimiter", "ayuayu" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::setLimiterStubDispatcher },
            { { "getLimiter", "ayu" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::getLimiterStubDispatcher },
            { { "setVolume", "qy" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::setVolumeStubDispatcher },
            { { "getVolume", "" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::getVolumeStubDispatcher },
            { { "setChannelMute", "yi" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::setChannelMuteStubDispatcher },
            { { "setChannelPhase", "yb" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::setChannelPhaseStubDispatcher },
            { { "setBMT", "yyy" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::setBMTStubDispatcher },
            { { "getBMT", "" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::getBMTStubDispatcher },
            /**
             * description: This function send parameters of limiter. If there is no error it will return
             *   0. If not it will return -1.
             */
            { { "sendLimiter", "(ya(ydydddd))" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::sendLimiterStubDispatcher },
            /**
             * description: This function send parameters of EQ filter. If there is no error it will return
             *   0. If not it will return -1.
             */
            { { "sendEQFilter", "(yyyya(yqndyy))" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::sendEQFilterStubDispatcher },
            /**
             * description: This function send parameters of delay time. If there is no error it will
             *   return 0. If not it will return -1.
             */
            { { "sendDelayTime", "(ya(yd))" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::sendDelayTimeStubDispatcher },
            /**
             * description: This function send parameters of ClariFi. If there is no error it will return
             *   0. If not it will return -1.
             */
            { { "sendClariFi", "(yydddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd)" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::sendClariFiStubDispatcher },
            /**
             * description: This function send parameters of loudness. If there is no error it will return
             *   0. If not it will return -1.
             */
            { { "sendLoudness", "(yyqqddyyya(nnnn))" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::sendLoudnessStubDispatcher },
            /**
             * description: This function send parameters of channel gain. If there is no error it will
             *   return 0. If not it will return -1.
             */
            { { "sendChannelGain", "(yya(ydy))" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::sendChannelGainStubDispatcher },
            /**
             * description: This function send parameters of maximum volume of source. If there is no error
             *   it will return 0. If not it will return -1.
             */
            { { "sendVolumeMax", "qn" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::sendVolumeMaxStubDispatcher },
            /**
             * description: This function send parameters of minimum volume of source. If there is no error
             *   it will return 0. If not it will return -1.
             */
            { { "sendVolumeMin", "qn" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::sendVolumeMinStubDispatcher },
            /**
             * description: This function send parameters of absolute volume of source. If there is no
             *   error it will return 0. If not it will return -1.
             */
            { { "sendVolumeAbs", "qn" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::sendVolumeAbsStubDispatcher },
            /**
             * description: This function send parameters of ratio volume of source. If there is no error
             *   it will return 0. If not it will return -1.
             */
            { { "sendVolumeRatio", "qn" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::sendVolumeRatioStubDispatcher },
            /**
             * description: This function save tuning data into configuration file. If there is no error it
             *   will return 0. If not it will return -1.
             */
            { { "saveDataToFile", "" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::saveDataToFileStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &org::genivi::am::routinginterface::RoutingControlObserverDBusStubAdapterInternal::getRoutingControlObserverInterfaceVersionStubDispatcher });
}

bool RoutingControlObserverDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace routinginterface
} // namespace am
} // namespace genivi
} // namespace org
} // namespace v3
