/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_HARMAN_MMPRES_Media_Manager_DBUS_STUB_ADAPTER_HPP_
#define V1_COM_HARMAN_MMPRES_Media_Manager_DBUS_STUB_ADAPTER_HPP_

#include <v1/com/harman/mmpres/MediaManagerStub.hpp>
#include "v1/com/harman/mmpres/MediaManagerDBusDeployment.hpp"        
#include <v3/com/harman/mmpres/MMPresTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

typedef CommonAPI::DBus::DBusStubAdapterHelper<MediaManagerStub> MediaManagerDBusStubAdapterHelper;

class MediaManagerDBusStubAdapterInternal
    : public virtual MediaManagerStubAdapter,
      public MediaManagerDBusStubAdapterHelper
{
public:
    MediaManagerDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~MediaManagerDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return MediaManager::getInterface();
    }


    /**
     * description: Emitted if there is a state change for any slot.  	 		               returns:	 
     *   slot:	Slot data
     */
    void fireSlotUpdateEvent(const ::v3::com::harman::mmpres::MMPresTypes::tSlot& slot);


    const MediaManagerDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaManagerStub,
        CommonAPI::Version
        > getMediaManagerInterfaceVersionStubDispatcher;



/**
 * description: Gets details for all the configured slots in the pres ctrl. Whichever slots are
 *   configured in the Presentation Controller config will be returned here, with
 *   the  					  current status.  	 		               returns:	  tSlotList:	Slot data
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaManagerStub,
    std::tuple<>,
    std::tuple<::v3::com::harman::mmpres::MMPresTypes::tSlotList>,
    std::tuple<>,
    std::tuple<::v3::com::harman::mmpres::MMPresTypes_::tSlotListDeployment_t>
    
    > getSlotsStubDispatcher;
/**
 * description: Gets additional details of the device in a particular slot 	 		              
 *   returns:	  tAdditionalDeviceInfo:	Additional Hw and firware info
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaManagerStub,
    std::tuple<uint8_t>,
    std::tuple<::v3::com::harman::mmpres::MMPresTypes::tAdditionalDeviceInfo>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<::v3::com::harman::mmpres::MMPresTypes_::tAdditionalDeviceInfoDeployment_t>
    
    > getAdditionalDeviceInfoStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    MediaManagerDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class MediaManagerDBusStubAdapter
    : public MediaManagerDBusStubAdapterInternal,
      public std::enable_shared_from_this<MediaManagerDBusStubAdapter> {
public:
    MediaManagerDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          MediaManagerDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_MMPRES_Media_Manager_DBUS_STUB_ADAPTER_HPP_
