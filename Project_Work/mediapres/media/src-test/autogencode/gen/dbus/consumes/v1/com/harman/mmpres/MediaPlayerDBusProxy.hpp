/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_HARMAN_MMPRES_Media_Player_DBUS_PROXY_HPP_
#define V1_COM_HARMAN_MMPRES_Media_Player_DBUS_PROXY_HPP_

#include <v1/com/harman/mmpres/MediaPlayerProxyBase.hpp>
#include "v1/com/harman/mmpres/MediaPlayerDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

class MediaPlayerDBusProxy
    : virtual public MediaPlayerProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    MediaPlayerDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~MediaPlayerDBusProxy() { }

    virtual CurrentPlayTimeAttribute& getCurrentPlayTimeAttribute();
    virtual TotalPlayDurationAttribute& getTotalPlayDurationAttribute();
    virtual TrackStateAttribute& getTrackStateAttribute();
    virtual NowPlayingDataAttribute& getNowPlayingDataAttribute();
    virtual PlayStateAttribute& getPlayStateAttribute();
    virtual SpeedAttribute& getSpeedAttribute();
    virtual RepeatModeAttribute& getRepeatModeAttribute();
    virtual ShuffleModeAttribute& getShuffleModeAttribute();
    virtual PlaybackSpeedAttribute& getPlaybackSpeedAttribute();
    virtual PlaysessionStateAttribute& getPlaysessionStateAttribute();
    virtual ActiveDeviceBTLinkLossAttribute& getActiveDeviceBTLinkLossAttribute();
    virtual NowPlayingArtworkStatusAttribute& getNowPlayingArtworkStatusAttribute();
    virtual PlaybackPreviewAttribute& getPlaybackPreviewAttribute();
    virtual VideoPlayStatusAttribute& getVideoPlayStatusAttribute();
    virtual RemotePlayerCapabilityAttribute& getRemotePlayerCapabilityAttribute();
    virtual MediaErrorAttribute& getMediaErrorAttribute();
    virtual SyncStatusAttribute& getSyncStatusAttribute();
    virtual TrackListSupportAttribute& getTrackListSupportAttribute();
    virtual MRemoteCDDiscStatusAttribute& getMRemoteCDDiscStatusAttribute();
    virtual MRemoteCDErrorStatusAttribute& getMRemoteCDErrorStatusAttribute();
    virtual MCDEOLStatusAttribute& getMCDEOLStatusAttribute();


    /**
     * description: Method to initiate the playback of all items of a specific object type in the
     *   device
     */
    virtual void playAll(const uint8_t &_slotId, const ::v3::com::harman::mmpres::MMPresTypes::eMetadataType &_objectType, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> playAllAsync(const uint8_t &_slotId, const ::v3::com::harman::mmpres::MMPresTypes::eMetadataType &_objectType, PlayAllAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void next(const uint64_t &_step, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> nextAsync(const uint64_t &_step, NextAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void previous(const uint64_t &_step, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> previousAsync(const uint64_t &_step, PreviousAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void pause(CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> pauseAsync(PauseAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void resume(CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> resumeAsync(ResumeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void seekToTime(const uint64_t &_timePosition, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> seekToTimeAsync(const uint64_t &_timePosition, SeekToTimeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void fastForward(CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> fastForwardAsync(FastForwardAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void fastReverse(CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> fastReverseAsync(FastReverseAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setRepeat(const ::v3::com::harman::mmpres::MMPresTypes::eRepeatMode &_mode, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setRepeatAsync(const ::v3::com::harman::mmpres::MMPresTypes::eRepeatMode &_mode, SetRepeatAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setShuffle(const ::v3::com::harman::mmpres::MMPresTypes::eShuffleMode &_mode, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setShuffleAsync(const ::v3::com::harman::mmpres::MMPresTypes::eShuffleMode &_mode, SetShuffleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getNowPlayingAlbumArtInformation(CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::tAlbumArtInformation &_albumArtInfo, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getNowPlayingAlbumArtInformationAsync(GetNowPlayingAlbumArtInformationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getNowPlayingAlbumArtPath(const uint8_t &_imageNumber, CommonAPI::CallStatus &_internalCallStatus, std::string &_path, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getNowPlayingAlbumArtPathAsync(const uint8_t &_imageNumber, GetNowPlayingAlbumArtPathAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getNowPlayingAlbumArtData(const uint8_t &_imageNumber, CommonAPI::CallStatus &_internalCallStatus, std::vector<uint8_t> &_albumArtData, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getNowPlayingAlbumArtDataAsync(const uint8_t &_imageNumber, GetNowPlayingAlbumArtDataAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getAlbumArtInformationForTrack(const uint64_t &_trackId, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::tAlbumArtInformation &_albumArtInfo, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getAlbumArtInformationForTrackAsync(const uint64_t &_trackId, GetAlbumArtInformationForTrackAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getAlbumArtPathForTrack(const uint64_t &_trackId, const uint8_t &_imageNumber, CommonAPI::CallStatus &_internalCallStatus, std::string &_path, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getAlbumArtPathForTrackAsync(const uint64_t &_trackId, const uint8_t &_imageNumber, GetAlbumArtPathForTrackAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getAlbumArtDataForTrack(const uint64_t &_trackId, const uint8_t &_imageNumber, CommonAPI::CallStatus &_internalCallStatus, std::vector<uint8_t> &_albumArtData, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getAlbumArtDataForTrackAsync(const uint64_t &_trackId, const uint8_t &_imageNumber, GetAlbumArtDataForTrackAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setSpeed(const uint8_t &_slotId, const ::v3::com::harman::mmpres::MMPresTypes::eMetadataType &_type, const ::v3::com::harman::mmpres::MMPresTypes::ePlaybackSpeed &_speed, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setSpeedAsync(const uint8_t &_slotId, const ::v3::com::harman::mmpres::MMPresTypes::eMetadataType &_type, const ::v3::com::harman::mmpres::MMPresTypes::ePlaybackSpeed &_speed, SetSpeedAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getSpeed(const uint8_t &_slotId, const ::v3::com::harman::mmpres::MMPresTypes::eMetadataType &_type, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::ePlaybackSpeed &_speed, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSpeedAsync(const uint8_t &_slotId, const ::v3::com::harman::mmpres::MMPresTypes::eMetadataType &_type, GetSpeedAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Promote the track
     * param: fileId is the fileID of the iTunes Station to be promoted. 0 can be used for
     *   current station
     */
    virtual void promote(const uint64_t &_fileId, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> promoteAsync(const uint64_t &_fileId, PromoteAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: demote the track
     * param: fileId is the fileID of the iTunes Station to be demoted. 0 can be used for
     *   current station
     */
    virtual void demote(const uint64_t &_fileId, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> demoteAsync(const uint64_t &_fileId, DemoteAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: add iTunes station to a WishList
     * param: fileId is the fileID of the iTunes Station to be added to the wishlist. 0 can
     *   be used for current station
     */
    virtual void addToWishList(const uint64_t &_fileId, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> addToWishListAsync(const uint64_t &_fileId, AddToWishListAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CurrentPlayTimeAttribute>> currentPlayTime_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<TotalPlayDurationAttribute>> totalPlayDuration_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<TrackStateAttribute, ::v3::com::harman::mmpres::MMPresTypes_::tTrackStateDeployment_t>> trackState_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<NowPlayingDataAttribute, ::v3::com::harman::mmpres::MMPresTypes_::tNowPlayingInfoDeployment_t>> nowPlayingData_;
    class DBusplayState_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PlayStateAttribute>> {
    public:
    template <typename... _A>
    	DBusplayState_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PlayStateAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusplayState_Attribute playState_;
    class DBusspeed_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<SpeedAttribute>> {
    public:
    template <typename... _A>
    	DBusspeed_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<SpeedAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusspeed_Attribute speed_;
    class DBusrepeatMode_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<RepeatModeAttribute>> {
    public:
    template <typename... _A>
    	DBusrepeatMode_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<RepeatModeAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusrepeatMode_Attribute repeatMode_;
    class DBusshuffleMode_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<ShuffleModeAttribute>> {
    public:
    template <typename... _A>
    	DBusshuffleMode_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<ShuffleModeAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusshuffleMode_Attribute shuffleMode_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PlaybackSpeedAttribute, ::v3::com::harman::mmpres::MMPresTypes_::tPlaybackSpeedDeployment_t>> playbackSpeed_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PlaysessionStateAttribute, ::v3::com::harman::mmpres::MMPresTypes_::PlaySessionStateMapDeployment_t>> playsessionState_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<ActiveDeviceBTLinkLossAttribute>> activeDeviceBTLinkLoss_;
    class DBusnowPlayingArtworkStatus_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<NowPlayingArtworkStatusAttribute>> {
    public:
    template <typename... _A>
    	DBusnowPlayingArtworkStatus_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<NowPlayingArtworkStatusAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusnowPlayingArtworkStatus_Attribute nowPlayingArtworkStatus_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PlaybackPreviewAttribute, ::v3::com::harman::mmpres::MMPresTypes_::MetadataItemListDeployment_t>> playbackPreview_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VideoPlayStatusAttribute>> videoPlayStatus_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<RemotePlayerCapabilityAttribute, ::v3::com::harman::mmpres::MMPresTypes_::tRemotePlayerCapabilityDeployment_t>> remotePlayerCapability_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<MediaErrorAttribute, ::v3::com::harman::mmpres::MMPresTypes_::MediaErrorMapDeployment_t>> mediaError_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<SyncStatusAttribute, ::v3::com::harman::mmpres::MMPresTypes_::SyncMapDeployment_t>> syncStatus_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<TrackListSupportAttribute, ::v3::com::harman::mmpres::MMPresTypes_::tTrackListSupportDeployment_t>> trackListSupport_;
    class DBusmRemoteCDDiscStatus_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<MRemoteCDDiscStatusAttribute>> {
    public:
    template <typename... _A>
    	DBusmRemoteCDDiscStatus_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<MRemoteCDDiscStatusAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusmRemoteCDDiscStatus_Attribute mRemoteCDDiscStatus_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<MRemoteCDErrorStatusAttribute, ::v3::com::harman::mmpres::MMPresTypes_::RemoteCDErrorStatusDeployment_t>> mRemoteCDErrorStatus_;
    class DBusmCDEOLStatus_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<MCDEOLStatusAttribute>> {
    public:
    template <typename... _A>
    	DBusmCDEOLStatus_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<MCDEOLStatusAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusmCDEOLStatus_Attribute mCDEOLStatus_;


};

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_MMPRES_Media_Player_DBUS_PROXY_HPP_

