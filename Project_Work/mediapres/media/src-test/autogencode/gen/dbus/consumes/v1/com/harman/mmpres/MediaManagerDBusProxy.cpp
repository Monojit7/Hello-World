/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/com/harman/mmpres/MediaManagerDBusProxy.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createMediaManagerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<MediaManagerDBusProxy>(_address, _connection);
}

INITIALIZER(registerMediaManagerDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		MediaManager::getInterface(),
		&createMediaManagerDBusProxy);
}

MediaManagerDBusProxy::MediaManagerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		slotUpdate_(*this, "slotUpdate", "(yii(tiuuusa{it}(iyy)))", std::make_tuple(static_cast<::v3::com::harman::mmpres::MMPresTypes_::tSlotDeployment_t*>(nullptr)))
{
}


MediaManagerDBusProxy::SlotUpdateEvent& MediaManagerDBusProxy::getSlotUpdateEvent() {
    return slotUpdate_;
}
    
    /**
     * description: Gets details for all the configured slots in the pres ctrl. Whichever slots are
     *   configured in the Presentation Controller config will be returned here, with
     *   the 
    					  current status. 
    	 		     
             returns:	  tSlotList:	Slot data
     */
    void MediaManagerDBusProxy::getSlots(CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::tSlotList &_list, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::tSlotList, ::v3::com::harman::mmpres::MMPresTypes_::tSlotListDeployment_t> deploy_list(static_cast<::v3::com::harman::mmpres::MMPresTypes_::tSlotListDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::tSlotList,::v3::com::harman::mmpres::MMPresTypes_::tSlotListDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getSlots",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_list);
_list = deploy_list.getValue();
}
    std::future<CommonAPI::CallStatus> MediaManagerDBusProxy::getSlotsAsync(GetSlotsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::tSlotList, ::v3::com::harman::mmpres::MMPresTypes_::tSlotListDeployment_t> deploy_list(static_cast<::v3::com::harman::mmpres::MMPresTypes_::tSlotListDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::tSlotList,::v3::com::harman::mmpres::MMPresTypes_::tSlotListDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getSlots",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::tSlotList, ::v3::com::harman::mmpres::MMPresTypes_::tSlotListDeployment_t> _list) {
        	if (_callback)
        		_callback(_internalCallStatus, _list.getValue());
        },
        std::make_tuple(deploy_list));
    }
    /**
     * description: Gets additional details of the device in a particular slot
    	 		     
            
     *   returns:	  tAdditionalDeviceInfo:	Additional Hw and firware info
     */
    void MediaManagerDBusProxy::getAdditionalDeviceInfo(const uint8_t &_slotId, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::tAdditionalDeviceInfo &_additionalInfo, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_slotId(_slotId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::tAdditionalDeviceInfo, ::v3::com::harman::mmpres::MMPresTypes_::tAdditionalDeviceInfoDeployment_t> deploy_additionalInfo(static_cast<::v3::com::harman::mmpres::MMPresTypes_::tAdditionalDeviceInfoDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::tAdditionalDeviceInfo,::v3::com::harman::mmpres::MMPresTypes_::tAdditionalDeviceInfoDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getAdditionalDeviceInfo",
        "y",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_slotId,
_internalCallStatus,
deploy_additionalInfo);
_additionalInfo = deploy_additionalInfo.getValue();
}
    std::future<CommonAPI::CallStatus> MediaManagerDBusProxy::getAdditionalDeviceInfoAsync(const uint8_t &_slotId, GetAdditionalDeviceInfoAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_slotId(_slotId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::tAdditionalDeviceInfo, ::v3::com::harman::mmpres::MMPresTypes_::tAdditionalDeviceInfoDeployment_t> deploy_additionalInfo(static_cast<::v3::com::harman::mmpres::MMPresTypes_::tAdditionalDeviceInfoDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::tAdditionalDeviceInfo,::v3::com::harman::mmpres::MMPresTypes_::tAdditionalDeviceInfoDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getAdditionalDeviceInfo",
        "y",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_slotId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::tAdditionalDeviceInfo, ::v3::com::harman::mmpres::MMPresTypes_::tAdditionalDeviceInfoDeployment_t> _additionalInfo) {
        	if (_callback)
        		_callback(_internalCallStatus, _additionalInfo.getValue());
        },
        std::make_tuple(deploy_additionalInfo));
    }


void MediaManagerDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace mmpres
      } // namespace harman
      } // namespace com
      } // namespace v1
