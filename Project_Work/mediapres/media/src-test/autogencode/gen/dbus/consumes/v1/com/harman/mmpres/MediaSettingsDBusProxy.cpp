/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/com/harman/mmpres/MediaSettingsDBusProxy.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createMediaSettingsDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<MediaSettingsDBusProxy>(_address, _connection);
}

INITIALIZER(registerMediaSettingsDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		MediaSettings::getInterface(),
		&createMediaSettingsDBusProxy);
}

MediaSettingsDBusProxy::MediaSettingsDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		subtitleStatus_(*this, "onSubtitleStatusAttributeChanged", "i", "getSubtitleStatusAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		isFullScreen_(*this, "onIsFullScreenAttributeChanged", "b", "getIsFullScreenAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		audioChannel_(*this, "onAudioChannelAttributeChanged", "i", "getAudioChannelAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		appleAuthenticationChipstatus_(*this, "onAppleAuthenticationChipstatusAttributeChanged", "b", "getAppleAuthenticationChipstatusAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr))
{
}

      MediaSettingsDBusProxy::SubtitleStatusAttribute& MediaSettingsDBusProxy::getSubtitleStatusAttribute() {
          return subtitleStatus_;
      }
      MediaSettingsDBusProxy::IsFullScreenAttribute& MediaSettingsDBusProxy::getIsFullScreenAttribute() {
          return isFullScreen_;
      }
      MediaSettingsDBusProxy::AudioChannelAttribute& MediaSettingsDBusProxy::getAudioChannelAttribute() {
          return audioChannel_;
      }
      MediaSettingsDBusProxy::AppleAuthenticationChipstatusAttribute& MediaSettingsDBusProxy::getAppleAuthenticationChipstatusAttribute() {
          return appleAuthenticationChipstatus_;
      }

    
    /**
     * description: reset all the Media related settings to the default. 
    		e: error code.
     */
    void MediaSettingsDBusProxy::masterMediaReset(CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eCallResult, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "masterMediaReset",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_e);
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> MediaSettingsDBusProxy::masterMediaResetAsync(MasterMediaResetAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eCallResult, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "masterMediaReset",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eCallResult, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _e.getValue());
        },
        std::make_tuple(deploy_e));
    }
    /**
     * description: removes the database file of specified device on device ejection.
     * param: slotId: the specified slot id
            returns:	  eCallResult:	Result of the API
     *   call
     */
    void MediaSettingsDBusProxy::resetMediaIndex(const uint8_t &_slotId, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_slotId(_slotId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eCallResult, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "resetMediaIndex",
        "y",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_slotId,
_internalCallStatus,
deploy_e);
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> MediaSettingsDBusProxy::resetMediaIndexAsync(const uint8_t &_slotId, ResetMediaIndexAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_slotId(_slotId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eCallResult, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "resetMediaIndex",
        "y",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_slotId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eCallResult, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _e.getValue());
        },
        std::make_tuple(deploy_e));
    }
    /**
     * description: Updates the index of a device
     * param: slotId: the specified slot id
            returns:	  e:	Result of the API call
     */
    void MediaSettingsDBusProxy::updateIndex(const uint8_t &_slotId, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eMediaError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_slotId(_slotId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eMediaError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eMediaError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "updateIndex",
        "y",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_slotId,
_internalCallStatus,
deploy_e);
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> MediaSettingsDBusProxy::updateIndexAsync(const uint8_t &_slotId, UpdateIndexAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_slotId(_slotId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eMediaError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eMediaError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "updateIndex",
        "y",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_slotId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eMediaError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _e.getValue());
        },
        std::make_tuple(deploy_e));
    }
    /**
     * description: Set Audio channel for playback
     * param: audioChannel - of type eAudioChannelStatus
     */
    void MediaSettingsDBusProxy::setAudioChannel(const ::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus &_audioChannel, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus, CommonAPI::EmptyDeployment> deploy_audioChannel(_audioChannel, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setAudioChannel",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_audioChannel,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> MediaSettingsDBusProxy::setAudioChannelAsync(const ::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus &_audioChannel, SetAudioChannelAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus, CommonAPI::EmptyDeployment> deploy_audioChannel(_audioChannel, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setAudioChannel",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_audioChannel,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eCallResult, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: Set Subtitle ON or OFF
     * param: dispSubtitle - eSubtitleStatus:ON is to enable Subtitle, eSubtitleStatus:OFF is
     *   to disable subtitle
     */
    void MediaSettingsDBusProxy::setSubtitle(const ::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus &_dispSubtitle, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus, CommonAPI::EmptyDeployment> deploy_dispSubtitle(_dispSubtitle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setSubtitle",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_dispSubtitle,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> MediaSettingsDBusProxy::setSubtitleAsync(const ::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus &_dispSubtitle, SetSubtitleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus, CommonAPI::EmptyDeployment> deploy_dispSubtitle(_dispSubtitle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setSubtitle",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_dispSubtitle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eCallResult, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: Set the display window coordinates of video playback
     * param: isFullscreen True is to enable fullscreen, false is to disable fullscreen and
     *   manually assign by screeenDimension
                    screeenDimension  Screen
     *   coordinates
     */
    void MediaSettingsDBusProxy::setDisplayWindow(const bool &_isFullscreen, const ::v3::com::harman::mmpres::MMPresTypes::tScreen &_screeenDimension, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eMediaError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_isFullscreen(_isFullscreen, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::tScreen, ::v3::com::harman::mmpres::MMPresTypes_::tScreenDeployment_t> deploy_screeenDimension(_screeenDimension, static_cast<::v3::com::harman::mmpres::MMPresTypes_::tScreenDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eMediaError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::tScreen, ::v3::com::harman::mmpres::MMPresTypes_::tScreenDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eMediaError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setDisplayWindow",
        "b(uuuu)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_isFullscreen, deploy_screeenDimension,
_internalCallStatus,
deploy_e);
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> MediaSettingsDBusProxy::setDisplayWindowAsync(const bool &_isFullscreen, const ::v3::com::harman::mmpres::MMPresTypes::tScreen &_screeenDimension, SetDisplayWindowAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_isFullscreen(_isFullscreen, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::tScreen, ::v3::com::harman::mmpres::MMPresTypes_::tScreenDeployment_t> deploy_screeenDimension(_screeenDimension, static_cast<::v3::com::harman::mmpres::MMPresTypes_::tScreenDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eMediaError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::tScreen, ::v3::com::harman::mmpres::MMPresTypes_::tScreenDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eMediaError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setDisplayWindow",
        "b(uuuu)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_isFullscreen, deploy_screeenDimension,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v3::com::harman::mmpres::MMPresTypes::eMediaError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _e.getValue());
        },
        std::make_tuple(deploy_e));
    }


void MediaSettingsDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace mmpres
      } // namespace harman
      } // namespace com
      } // namespace v1
