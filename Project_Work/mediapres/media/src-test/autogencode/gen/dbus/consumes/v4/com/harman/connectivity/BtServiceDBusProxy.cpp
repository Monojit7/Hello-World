/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This class implements all Bluetooth and Telephony Operations
 * author: Poornima Hiremath
 */
#include <v4/com/harman/connectivity/BtServiceDBusProxy.hpp>

namespace v4 {
namespace com {
namespace harman {
namespace connectivity {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createBtServiceDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<BtServiceDBusProxy>(_address, _connection);
}

INITIALIZER(registerBtServiceDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		BtService::getInterface(),
		&createBtServiceDBusProxy);
}

BtServiceDBusProxy::BtServiceDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		bluetoothStatus_(*this, "bluetoothStatus", "b", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		onOffState_(*this, "onOffState", "i", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		localDevAddr_(*this, "localDevAddr", "s", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		passkey_(*this, "passkey", "s", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		signalQuality_(*this, "signalQuality", "si", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		vrMode_(*this, "vrMode", "sbb", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		networkOperator_(*this, "networkOperator", "ssssss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		supportedFeatures_(*this, "supportedFeatures", "sas", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<::com::harman::connectivity::btTypedefs_::stringListDeployment_t*>(nullptr))),
		deviceSearchList_(*this, "deviceSearchList", "a(ssi)", std::make_tuple(static_cast<::com::harman::connectivity::btTypedefs_::deviceSearchEntryListDeployment_t*>(nullptr))),
		standardBondingRequest_(*this, "standardBondingRequest", "ssis", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		standardBondingRejected_(*this, "standardBondingRejected", "ss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		secureSimpleBondingRequest_(*this, "secureSimpleBondingRequest", "sss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		serviceConnectionRequest_(*this, "serviceConnectionRequest", "sss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		serviceConnected_(*this, "serviceConnected", "sssb", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		serviceDisconnected_(*this, "serviceDisconnected", "ssss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		deviceDisconnected_(*this, "deviceDisconnected", "sss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		serviceConnectionError_(*this, "serviceConnectionError", "sss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		bondedDeviceProfileListChanged_(*this, "bondedDeviceProfileListChanged", "sa(sii)", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<::com::harman::connectivity::btTypedefs_::profileListDeployment_t*>(nullptr))),
		bondedDeviceServiceListChanged_(*this, "bondedDeviceServiceListChanged", "ssa(sbsii)b", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<::com::harman::connectivity::btTypedefs_::serviceListDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		deviceDeleted_(*this, "deviceDeleted", "ssi", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		networkIfUp_(*this, "networkIfUp", "sss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		networkIfDown_(*this, "networkIfDown", "s", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		bondingStatus_(*this, "bondingStatus", "sss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		incomingCallInfo_(*this, "incomingCallInfo", "ssib", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		handsFreeMode_(*this, "handsFreeMode", "sbsb", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		audioStatus_(*this, "audioStatus", "sbsb", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		batteryCharge_(*this, "batteryCharge", "si", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		networkOperatorChanged_(*this, "networkOperatorChanged", "ssssss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		networkRegistrationState_(*this, "networkRegistrationState", "ss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		callStatus_(*this, "callStatus", "sa(isisssibbbbsbii)", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<::com::harman::connectivity::btTypedefs_::callstateInfoListDeployment_t*>(nullptr))),
		callListUpdate_(*this, "callListUpdate", "ssss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		reconnectTimeoutExpired_(*this, "reconnectTimeoutExpired", "", std::make_tuple()),
		deviceSearchComplete_(*this, "deviceSearchComplete", "", std::make_tuple()),
		siriStatus_(*this, "siriStatus", "sbb", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		subscriberNumber_(*this, "subscriberNumber", "ss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		serviceConnecting_(*this, "serviceConnecting", "sssb", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		autoConnectState_(*this, "autoConnectState", "iiiiii", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		stackResetInProgress_(*this, "stackResetInProgress", "", std::make_tuple()),
		stackResetDone_(*this, "stackResetDone", "", std::make_tuple()),
		deviceNameChanged_(*this, "deviceNameChanged", "ss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		deviceIDInfo_(*this, "deviceIDInfo", "sssss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)))
{
}


BtServiceDBusProxy::BluetoothStatusEvent& BtServiceDBusProxy::getBluetoothStatusEvent() {
    return bluetoothStatus_;
}
BtServiceDBusProxy::OnOffStateEvent& BtServiceDBusProxy::getOnOffStateEvent() {
    return onOffState_;
}
BtServiceDBusProxy::LocalDevAddrEvent& BtServiceDBusProxy::getLocalDevAddrEvent() {
    return localDevAddr_;
}
BtServiceDBusProxy::PasskeyEvent& BtServiceDBusProxy::getPasskeyEvent() {
    return passkey_;
}
BtServiceDBusProxy::SignalQualityEvent& BtServiceDBusProxy::getSignalQualityEvent() {
    return signalQuality_;
}
BtServiceDBusProxy::VrModeEvent& BtServiceDBusProxy::getVrModeEvent() {
    return vrMode_;
}
BtServiceDBusProxy::NetworkOperatorEvent& BtServiceDBusProxy::getNetworkOperatorEvent() {
    return networkOperator_;
}
BtServiceDBusProxy::SupportedFeaturesEvent& BtServiceDBusProxy::getSupportedFeaturesEvent() {
    return supportedFeatures_;
}
BtServiceDBusProxy::DeviceSearchListEvent& BtServiceDBusProxy::getDeviceSearchListEvent() {
    return deviceSearchList_;
}
BtServiceDBusProxy::StandardBondingRequestEvent& BtServiceDBusProxy::getStandardBondingRequestEvent() {
    return standardBondingRequest_;
}
BtServiceDBusProxy::StandardBondingRejectedEvent& BtServiceDBusProxy::getStandardBondingRejectedEvent() {
    return standardBondingRejected_;
}
BtServiceDBusProxy::SecureSimpleBondingRequestEvent& BtServiceDBusProxy::getSecureSimpleBondingRequestEvent() {
    return secureSimpleBondingRequest_;
}
BtServiceDBusProxy::ServiceConnectionRequestEvent& BtServiceDBusProxy::getServiceConnectionRequestEvent() {
    return serviceConnectionRequest_;
}
BtServiceDBusProxy::ServiceConnectedEvent& BtServiceDBusProxy::getServiceConnectedEvent() {
    return serviceConnected_;
}
BtServiceDBusProxy::ServiceDisconnectedEvent& BtServiceDBusProxy::getServiceDisconnectedEvent() {
    return serviceDisconnected_;
}
BtServiceDBusProxy::DeviceDisconnectedEvent& BtServiceDBusProxy::getDeviceDisconnectedEvent() {
    return deviceDisconnected_;
}
BtServiceDBusProxy::ServiceConnectionErrorEvent& BtServiceDBusProxy::getServiceConnectionErrorEvent() {
    return serviceConnectionError_;
}
BtServiceDBusProxy::BondedDeviceProfileListChangedEvent& BtServiceDBusProxy::getBondedDeviceProfileListChangedEvent() {
    return bondedDeviceProfileListChanged_;
}
BtServiceDBusProxy::BondedDeviceServiceListChangedEvent& BtServiceDBusProxy::getBondedDeviceServiceListChangedEvent() {
    return bondedDeviceServiceListChanged_;
}
BtServiceDBusProxy::DeviceDeletedEvent& BtServiceDBusProxy::getDeviceDeletedEvent() {
    return deviceDeleted_;
}
BtServiceDBusProxy::NetworkIfUpEvent& BtServiceDBusProxy::getNetworkIfUpEvent() {
    return networkIfUp_;
}
BtServiceDBusProxy::NetworkIfDownEvent& BtServiceDBusProxy::getNetworkIfDownEvent() {
    return networkIfDown_;
}
BtServiceDBusProxy::BondingStatusEvent& BtServiceDBusProxy::getBondingStatusEvent() {
    return bondingStatus_;
}
BtServiceDBusProxy::IncomingCallInfoEvent& BtServiceDBusProxy::getIncomingCallInfoEvent() {
    return incomingCallInfo_;
}
BtServiceDBusProxy::HandsFreeModeEvent& BtServiceDBusProxy::getHandsFreeModeEvent() {
    return handsFreeMode_;
}
BtServiceDBusProxy::AudioStatusEvent& BtServiceDBusProxy::getAudioStatusEvent() {
    return audioStatus_;
}
BtServiceDBusProxy::BatteryChargeEvent& BtServiceDBusProxy::getBatteryChargeEvent() {
    return batteryCharge_;
}
BtServiceDBusProxy::NetworkOperatorChangedEvent& BtServiceDBusProxy::getNetworkOperatorChangedEvent() {
    return networkOperatorChanged_;
}
BtServiceDBusProxy::NetworkRegistrationStateEvent& BtServiceDBusProxy::getNetworkRegistrationStateEvent() {
    return networkRegistrationState_;
}
BtServiceDBusProxy::CallStatusEvent& BtServiceDBusProxy::getCallStatusEvent() {
    return callStatus_;
}
BtServiceDBusProxy::CallListUpdateEvent& BtServiceDBusProxy::getCallListUpdateEvent() {
    return callListUpdate_;
}
BtServiceDBusProxy::ReconnectTimeoutExpiredEvent& BtServiceDBusProxy::getReconnectTimeoutExpiredEvent() {
    return reconnectTimeoutExpired_;
}
BtServiceDBusProxy::DeviceSearchCompleteEvent& BtServiceDBusProxy::getDeviceSearchCompleteEvent() {
    return deviceSearchComplete_;
}
BtServiceDBusProxy::SiriStatusEvent& BtServiceDBusProxy::getSiriStatusEvent() {
    return siriStatus_;
}
BtServiceDBusProxy::SubscriberNumberEvent& BtServiceDBusProxy::getSubscriberNumberEvent() {
    return subscriberNumber_;
}
BtServiceDBusProxy::ServiceConnectingEvent& BtServiceDBusProxy::getServiceConnectingEvent() {
    return serviceConnecting_;
}
BtServiceDBusProxy::AutoConnectStateEvent& BtServiceDBusProxy::getAutoConnectStateEvent() {
    return autoConnectState_;
}
BtServiceDBusProxy::StackResetInProgressEvent& BtServiceDBusProxy::getStackResetInProgressEvent() {
    return stackResetInProgress_;
}
BtServiceDBusProxy::StackResetDoneEvent& BtServiceDBusProxy::getStackResetDoneEvent() {
    return stackResetDone_;
}
BtServiceDBusProxy::DeviceNameChangedEvent& BtServiceDBusProxy::getDeviceNameChangedEvent() {
    return deviceNameChanged_;
}
BtServiceDBusProxy::DeviceIDInfoEvent& BtServiceDBusProxy::getDeviceIDInfoEvent() {
    return deviceIDInfo_;
}
    
    /**
     * description: The method is used by to Set the current ignition state.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::setIgnitionState(const bool &_ignitionState, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_ignitionState(_ignitionState, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setIgnitionState",
        "b",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_ignitionState,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::setIgnitionStateAsync(const bool &_ignitionState, SetIgnitionStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_ignitionState(_ignitionState, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setIgnitionState",
        "b",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_ignitionState,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: The method is used by to Get value of the Bluetooth ON or OFF.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::getPropBluetoothStatus(CommonAPI::CallStatus &_internalCallStatus, bool &_Status, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_Status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getPropBluetoothStatus",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_Status, deploy_errorCode);
_Status = deploy_Status.getValue();
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::getPropBluetoothStatusAsync(GetPropBluetoothStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_Status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getPropBluetoothStatus",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> _Status, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _Status.getValue(), _errorCode.getValue());
        },
        std::make_tuple(deploy_Status, deploy_errorCode));
    }
    /**
     * description: The method is used by to Get Bluetooth Signal quality.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::getSignalQuality(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_signalQual, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_signalQual(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getSignalQuality",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_outAddress, deploy_signalQual, deploy_errorCode);
_outAddress = deploy_outAddress.getValue();
_signalQual = deploy_signalQual.getValue();
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::getSignalQualityAsync(const std::string &_inAddress, GetSignalQualityAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_signalQual(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getSignalQuality",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _signalQual, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _signalQual.getValue(), _errorCode.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_signalQual, deploy_errorCode));
    }
    /**
     * description: The method is used by to Get remote device battery change status.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::getBatteryCharge(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_batteryCharge, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_batteryCharge(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getBatteryCharge",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_outAddress, deploy_batteryCharge, deploy_errorCode);
_outAddress = deploy_outAddress.getValue();
_batteryCharge = deploy_batteryCharge.getValue();
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::getBatteryChargeAsync(const std::string &_inAddress, GetBatteryChargeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_batteryCharge(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getBatteryCharge",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _batteryCharge, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _batteryCharge.getValue(), _errorCode.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_batteryCharge, deploy_errorCode));
    }
    /**
     * description: The method is used by to Get value of the Local Bluetooth Device address
     *   property.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::getPropLocalDeviceAddress(CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getPropLocalDeviceAddress",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_outAddress, deploy_errorCode);
_outAddress = deploy_outAddress.getValue();
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::getPropLocalDeviceAddressAsync(GetPropLocalDeviceAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getPropLocalDeviceAddress",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _errorCode.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_errorCode));
    }
    /**
     * description: The method is used by to Get the local device name.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::getPropLocalDeviceName(CommonAPI::CallStatus &_internalCallStatus, std::string &_name, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_name(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getPropLocalDeviceName",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_name, deploy_errorCode);
_name = deploy_name.getValue();
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::getPropLocalDeviceNameAsync(GetPropLocalDeviceNameAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_name(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getPropLocalDeviceName",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _name, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _name.getValue(), _errorCode.getValue());
        },
        std::make_tuple(deploy_name, deploy_errorCode));
    }
    /**
     * description: The method is used by to Get the HFP connection status.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::getHfpConnectionStatus(CommonAPI::CallStatus &_internalCallStatus, bool &_Status, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_Status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getHfpConnectionStatus",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_Status, deploy_errorCode);
_Status = deploy_Status.getValue();
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::getHfpConnectionStatusAsync(GetHfpConnectionStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_Status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getHfpConnectionStatus",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> _Status, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _Status.getValue(), _errorCode.getValue());
        },
        std::make_tuple(deploy_Status, deploy_errorCode));
    }
    /**
     * description: The method is used by to get the bonded device list.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::getPropBondedDeviceList(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::bondedDevList &_list, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::bondedDevList, ::com::harman::connectivity::btTypedefs_::bondedDevListDeployment_t> deploy_list(static_cast<::com::harman::connectivity::btTypedefs_::bondedDevListDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::bondedDevList,::com::harman::connectivity::btTypedefs_::bondedDevListDeployment_t>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getPropBondedDeviceList",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_list, deploy_errorCode);
_list = deploy_list.getValue();
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::getPropBondedDeviceListAsync(GetPropBondedDeviceListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::bondedDevList, ::com::harman::connectivity::btTypedefs_::bondedDevListDeployment_t> deploy_list(static_cast<::com::harman::connectivity::btTypedefs_::bondedDevListDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::bondedDevList,::com::harman::connectivity::btTypedefs_::bondedDevListDeployment_t>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getPropBondedDeviceList",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::bondedDevList, ::com::harman::connectivity::btTypedefs_::bondedDevListDeployment_t> _list, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _list.getValue(), _errorCode.getValue());
        },
        std::make_tuple(deploy_list, deploy_errorCode));
    }
    /**
     * description: The method is used by to get supported feature list.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::getSupportedFeatures(const std::string &_inAddrress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, ::com::harman::connectivity::btTypedefs::stringList &_featureList, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddrress(_inAddrress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList, ::com::harman::connectivity::btTypedefs_::stringListDeployment_t> deploy_featureList(static_cast<::com::harman::connectivity::btTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList,::com::harman::connectivity::btTypedefs_::stringListDeployment_t>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getSupportedFeatures",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddrress,
_internalCallStatus,
deploy_outAddress, deploy_featureList, deploy_errorCode);
_outAddress = deploy_outAddress.getValue();
_featureList = deploy_featureList.getValue();
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::getSupportedFeaturesAsync(const std::string &_inAddrress, GetSupportedFeaturesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddrress(_inAddrress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList, ::com::harman::connectivity::btTypedefs_::stringListDeployment_t> deploy_featureList(static_cast<::com::harman::connectivity::btTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList,::com::harman::connectivity::btTypedefs_::stringListDeployment_t>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getSupportedFeatures",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddrress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList, ::com::harman::connectivity::btTypedefs_::stringListDeployment_t> _featureList, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _featureList.getValue(), _errorCode.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_featureList, deploy_errorCode));
    }
    /**
     * description: The method is used by to get the network availability.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::getNetworkAvailability(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, bool &_netwrkStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_netwrkStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getNetworkAvailability",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_outAddress, deploy_netwrkStatus, deploy_errorCode);
_outAddress = deploy_outAddress.getValue();
_netwrkStatus = deploy_netwrkStatus.getValue();
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::getNetworkAvailabilityAsync(const std::string &_inAddress, GetNetworkAvailabilityAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_netwrkStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getNetworkAvailability",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> _netwrkStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _netwrkStatus.getValue(), _errorCode.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_netwrkStatus, deploy_errorCode));
    }
    /**
     * description: The method is used by to get the network registration state.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::getNetworkRegistrationState(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_regState, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_regState(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getNetworkRegistrationState",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_outAddress, deploy_regState, deploy_errorCode);
_outAddress = deploy_outAddress.getValue();
_regState = deploy_regState.getValue();
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::getNetworkRegistrationStateAsync(const std::string &_inAddress, GetNetworkRegistrationStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_regState(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getNetworkRegistrationState",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _regState, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _regState.getValue(), _errorCode.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_regState, deploy_errorCode));
    }
    /**
     * description: The method is used by to get the subscriber number.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::getSubscriberNumber(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_subscrbNum, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_subscrbNum(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getSubscriberNumber",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_outAddress, deploy_subscrbNum, deploy_errorCode);
_outAddress = deploy_outAddress.getValue();
_subscrbNum = deploy_subscrbNum.getValue();
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::getSubscriberNumberAsync(const std::string &_inAddress, GetSubscriberNumberAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_subscrbNum(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getSubscriberNumber",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _subscrbNum, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _subscrbNum.getValue(), _errorCode.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_subscrbNum, deploy_errorCode));
    }
    /**
     * description: The method is used by to get the list of last connected devices.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::getlastConnectedDevice(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::lastConnectedDevList &_list, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::lastConnectedDevList, ::com::harman::connectivity::btTypedefs_::lastConnectedDevListDeployment_t> deploy_list(static_cast<::com::harman::connectivity::btTypedefs_::lastConnectedDevListDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::lastConnectedDevList,::com::harman::connectivity::btTypedefs_::lastConnectedDevListDeployment_t>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getlastConnectedDevice",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_list, deploy_errorCode, deploy_errorDesc);
_list = deploy_list.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::getlastConnectedDeviceAsync(GetlastConnectedDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::lastConnectedDevList, ::com::harman::connectivity::btTypedefs_::lastConnectedDevListDeployment_t> deploy_list(static_cast<::com::harman::connectivity::btTypedefs_::lastConnectedDevListDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::lastConnectedDevList,::com::harman::connectivity::btTypedefs_::lastConnectedDevListDeployment_t>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getlastConnectedDevice",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::lastConnectedDevList, ::com::harman::connectivity::btTypedefs_::lastConnectedDevListDeployment_t> _list, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _list.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_list, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: The method is used by to get call state event data.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::getCallStateEventData(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, ::com::harman::connectivity::btTypedefs::callstateInfoList &_list, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::callstateInfoList, ::com::harman::connectivity::btTypedefs_::callstateInfoListDeployment_t> deploy_list(static_cast<::com::harman::connectivity::btTypedefs_::callstateInfoListDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::callstateInfoList,::com::harman::connectivity::btTypedefs_::callstateInfoListDeployment_t>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getCallStateEventData",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_outAddress, deploy_list, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_list = deploy_list.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::getCallStateEventDataAsync(const std::string &_inAddress, GetCallStateEventDataAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::callstateInfoList, ::com::harman::connectivity::btTypedefs_::callstateInfoListDeployment_t> deploy_list(static_cast<::com::harman::connectivity::btTypedefs_::callstateInfoListDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::callstateInfoList,::com::harman::connectivity::btTypedefs_::callstateInfoListDeployment_t>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getCallStateEventData",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::callstateInfoList, ::com::harman::connectivity::btTypedefs_::callstateInfoListDeployment_t> _list, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _list.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_list, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: The method is used by to get call state event data.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::sppInterfaces(CommonAPI::CallStatus &_internalCallStatus, std::vector<std::string> &_devA, std::vector<std::string> &_devB, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_devA(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_devB(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<std::string>,CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>,
            CommonAPI::Deployable<std::vector<std::string>,CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>
            >
        	>::callMethodWithReply(
        *this,
        "sppInterfaces",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_devA, deploy_devB);
_devA = deploy_devA.getValue();
_devB = deploy_devB.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::sppInterfacesAsync(SppInterfacesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_devA(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_devB(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<std::string>,CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>,
            CommonAPI::Deployable<std::vector<std::string>,CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>
            >
        	>::callMethodAsync(
        *this,
        "sppInterfaces",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> _devA, CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> _devB) {
        	if (_callback)
        		_callback(_internalCallStatus, _devA.getValue(), _devB.getValue());
        },
        std::make_tuple(deploy_devA, deploy_devB));
    }
    /**
     * description: Prepares the HU to enter bonding mode, this implies that BT core will wait for
     *   any ongoing disconnections to complete then abort any pending connection
     *   request.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::enterBondingMode(const uint32_t &_timeout, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_timeout(_timeout, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "enterBondingMode",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_timeout,
_internalCallStatus,
deploy_errorCode, deploy_errorDesc);
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::enterBondingModeAsync(const uint32_t &_timeout, EnterBondingModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_timeout(_timeout, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "enterBondingMode",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_timeout,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: Exits the bonding mode, this implies that BT core will make the HU
     *   UnDiscoverable and also wait for any ongoing connections/disconnections to
     *   complete.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::exitBondingMode(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "exitBondingMode",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_errorCode, deploy_errorDesc);
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::exitBondingModeAsync(ExitBondingModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "exitBondingMode",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: Changes the priority of a service for a device. It will modify the current
     *   priority of a device for a given service.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::changePriority(const std::string &_inAddress, const std::string &_service, const int32_t &_priority, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_service(_service, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_priority(_priority, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "changePriority",
        "ssi",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_service, deploy_priority,
_internalCallStatus,
deploy_outAddress, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::changePriorityAsync(const std::string &_inAddress, const std::string &_service, const int32_t &_priority, ChangePriorityAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_service(_service, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_priority(_priority, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "changePriority",
        "ssi",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_service, deploy_priority,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: Starts the procedure of discovering devices in range and finding their
     *   capabilities.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::startDeviceSearch(const uint32_t &_maxDevice, const uint32_t &_timeout, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_maxDevice(_maxDevice, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_timeout(_timeout, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "startDeviceSearch",
        "uu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_maxDevice, deploy_timeout,
_internalCallStatus,
deploy_errorCode, deploy_errorDesc);
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::startDeviceSearchAsync(const uint32_t &_maxDevice, const uint32_t &_timeout, StartDeviceSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_maxDevice(_maxDevice, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_timeout(_timeout, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "startDeviceSearch",
        "uu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_maxDevice, deploy_timeout,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: Stops the procedure of discovering devices in range.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::stopDeviceSearch(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "stopDeviceSearch",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_errorCode, deploy_errorDesc);
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::stopDeviceSearchAsync(StopDeviceSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "stopDeviceSearch",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: This method should be called by HMI in response to receiving the signal
     *   "secureSimpleBondingRequest" from Bluetooth Service.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::secureSimpleBondingReply(const std::string &_inAddress, const bool &_accept, const bool &_trusted, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_accept(_accept, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_trusted(_trusted, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "secureSimpleBondingReply",
        "sbb",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_accept, deploy_trusted,
_internalCallStatus,
deploy_outAddress, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::secureSimpleBondingReplyAsync(const std::string &_inAddress, const bool &_accept, const bool &_trusted, SecureSimpleBondingReplyAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_accept(_accept, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_trusted(_trusted, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "secureSimpleBondingReply",
        "sbb",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_accept, deploy_trusted,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: This method will result in disconnection of all service level connections
     *   including ACL connection, 
       	deletion of link keys and eventually un-bonding
     *   of the requested device from the head unit.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::deleteDevice(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "deleteDevice",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_errorCode, deploy_errorDesc);
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::deleteDeviceAsync(const std::string &_inAddress, DeleteDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "deleteDevice",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: This method will result in calling internally deleteDevice of all connected
     *   devices.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::deleteAllDevices(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "deleteAllDevices",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_errorCode, deploy_errorDesc);
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::deleteAllDevicesAsync(DeleteAllDevicesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "deleteAllDevices",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: Starts the procedure connection for the given service to the given phone.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::startServiceConnection(const std::string &_inAddress, const std::string &_service, const std::string &_instanceName, const std::string &_replaceAddr, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_devName, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_service(_service, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_instanceName(_instanceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_replaceAddr(_replaceAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_devName(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "startServiceConnection",
        "ssss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_service, deploy_instanceName, deploy_replaceAddr,
_internalCallStatus,
deploy_outAddress, deploy_devName, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_devName = deploy_devName.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::startServiceConnectionAsync(const std::string &_inAddress, const std::string &_service, const std::string &_instanceName, const std::string &_replaceAddr, StartServiceConnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_service(_service, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_instanceName(_instanceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_replaceAddr(_replaceAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_devName(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "startServiceConnection",
        "ssss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_service, deploy_instanceName, deploy_replaceAddr,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _devName, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _devName.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_devName, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: Allows the existance of the service connection to this device and service..
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::allowServiceConnection(const std::string &_inAddress, const ::com::harman::connectivity::btTypedefs::eRequestingModule &_module, const std::string &_service, const bool &_allow, const bool &_reconnect, const bool &_deviceInvert, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::eRequestingModule, CommonAPI::EmptyDeployment> deploy_module(_module, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_service(_service, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_allow(_allow, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_reconnect(_reconnect, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_deviceInvert(_deviceInvert, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::eRequestingModule, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "allowServiceConnection",
        "sisbbb",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_module, deploy_service, deploy_allow, deploy_reconnect, deploy_deviceInvert,
_internalCallStatus,
deploy_outAddress, deploy_errorCode);
_outAddress = deploy_outAddress.getValue();
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::allowServiceConnectionAsync(const std::string &_inAddress, const ::com::harman::connectivity::btTypedefs::eRequestingModule &_module, const std::string &_service, const bool &_allow, const bool &_reconnect, const bool &_deviceInvert, AllowServiceConnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::eRequestingModule, CommonAPI::EmptyDeployment> deploy_module(_module, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_service(_service, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_allow(_allow, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_reconnect(_reconnect, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_deviceInvert(_deviceInvert, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::eRequestingModule, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "allowServiceConnection",
        "sisbbb",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_module, deploy_service, deploy_allow, deploy_reconnect, deploy_deviceInvert,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _errorCode.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_errorCode));
    }
    /**
     * description: This method can be invoked by clients to disconnect a previously connected
     *   service from a previously bonded device.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::startServiceDisconnection(const std::string &_inAddress, const std::string &_service, const bool &_internalReq, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_service(_service, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_internalReq(_internalReq, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "startServiceDisconnection",
        "ssb",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_service, deploy_internalReq,
_internalCallStatus,
deploy_outAddress, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::startServiceDisconnectionAsync(const std::string &_inAddress, const std::string &_service, const bool &_internalReq, StartServiceDisconnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_service(_service, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_internalReq(_internalReq, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "startServiceDisconnection",
        "ssb",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_service, deploy_internalReq,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: This method should be called by clients in order to reply to the incoming
     *   service connection request from 
       	a remote device as indicated by the
     *   signal 'serviceConnectionRequest'. 
       	The reply can be to accept or reject
     *   incoming service connection request.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::serviceConnectionReply(const std::string &_inAddress, const std::string &_service, const bool &_accept, const std::string &_instanceName, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_devName, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_service(_service, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_accept(_accept, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_instanceName(_instanceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_devName(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "serviceConnectionReply",
        "ssbs",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_service, deploy_accept, deploy_instanceName,
_internalCallStatus,
deploy_outAddress, deploy_devName, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_devName = deploy_devName.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::serviceConnectionReplyAsync(const std::string &_inAddress, const std::string &_service, const bool &_accept, const std::string &_instanceName, ServiceConnectionReplyAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_service(_service, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_accept(_accept, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_instanceName(_instanceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_devName(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "serviceConnectionReply",
        "ssbs",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_service, deploy_accept, deploy_instanceName,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _devName, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _devName.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_devName, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: This method would return the list of service of a device.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::getBondedDeviceServiceList(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getBondedDeviceServiceList",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_outAddress, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::getBondedDeviceServiceListAsync(const std::string &_inAddress, GetBondedDeviceServiceListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getBondedDeviceServiceList",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: The method Requests diagnostic radio status information.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::getRadioStatus(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::stringList &_addrList, ::com::harman::connectivity::btTypedefs::stringList &_connRoleList, ::com::harman::connectivity::btTypedefs::integerList &_linkQualitylist, ::com::harman::connectivity::btTypedefs::integerList &_rssiList, ::com::harman::connectivity::btTypedefs::integerList &_txPowerList, ::com::harman::connectivity::btTypedefs::stringList &_modeTypeList, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList, ::com::harman::connectivity::btTypedefs_::stringListDeployment_t> deploy_addrList(static_cast<::com::harman::connectivity::btTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList, ::com::harman::connectivity::btTypedefs_::stringListDeployment_t> deploy_connRoleList(static_cast<::com::harman::connectivity::btTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::integerList, ::com::harman::connectivity::btTypedefs_::integerListDeployment_t> deploy_linkQualitylist(static_cast<::com::harman::connectivity::btTypedefs_::integerListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::integerList, ::com::harman::connectivity::btTypedefs_::integerListDeployment_t> deploy_rssiList(static_cast<::com::harman::connectivity::btTypedefs_::integerListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::integerList, ::com::harman::connectivity::btTypedefs_::integerListDeployment_t> deploy_txPowerList(static_cast<::com::harman::connectivity::btTypedefs_::integerListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList, ::com::harman::connectivity::btTypedefs_::stringListDeployment_t> deploy_modeTypeList(static_cast<::com::harman::connectivity::btTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList,::com::harman::connectivity::btTypedefs_::stringListDeployment_t>,
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList,::com::harman::connectivity::btTypedefs_::stringListDeployment_t>,
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::integerList,::com::harman::connectivity::btTypedefs_::integerListDeployment_t>,
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::integerList,::com::harman::connectivity::btTypedefs_::integerListDeployment_t>,
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::integerList,::com::harman::connectivity::btTypedefs_::integerListDeployment_t>,
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList,::com::harman::connectivity::btTypedefs_::stringListDeployment_t>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getRadioStatus",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_addrList, deploy_connRoleList, deploy_linkQualitylist, deploy_rssiList, deploy_txPowerList, deploy_modeTypeList, deploy_errorCode, deploy_errorDesc);
_addrList = deploy_addrList.getValue();
_connRoleList = deploy_connRoleList.getValue();
_linkQualitylist = deploy_linkQualitylist.getValue();
_rssiList = deploy_rssiList.getValue();
_txPowerList = deploy_txPowerList.getValue();
_modeTypeList = deploy_modeTypeList.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::getRadioStatusAsync(GetRadioStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList, ::com::harman::connectivity::btTypedefs_::stringListDeployment_t> deploy_addrList(static_cast<::com::harman::connectivity::btTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList, ::com::harman::connectivity::btTypedefs_::stringListDeployment_t> deploy_connRoleList(static_cast<::com::harman::connectivity::btTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::integerList, ::com::harman::connectivity::btTypedefs_::integerListDeployment_t> deploy_linkQualitylist(static_cast<::com::harman::connectivity::btTypedefs_::integerListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::integerList, ::com::harman::connectivity::btTypedefs_::integerListDeployment_t> deploy_rssiList(static_cast<::com::harman::connectivity::btTypedefs_::integerListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::integerList, ::com::harman::connectivity::btTypedefs_::integerListDeployment_t> deploy_txPowerList(static_cast<::com::harman::connectivity::btTypedefs_::integerListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList, ::com::harman::connectivity::btTypedefs_::stringListDeployment_t> deploy_modeTypeList(static_cast<::com::harman::connectivity::btTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList,::com::harman::connectivity::btTypedefs_::stringListDeployment_t>,
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList,::com::harman::connectivity::btTypedefs_::stringListDeployment_t>,
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::integerList,::com::harman::connectivity::btTypedefs_::integerListDeployment_t>,
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::integerList,::com::harman::connectivity::btTypedefs_::integerListDeployment_t>,
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::integerList,::com::harman::connectivity::btTypedefs_::integerListDeployment_t>,
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList,::com::harman::connectivity::btTypedefs_::stringListDeployment_t>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getRadioStatus",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList, ::com::harman::connectivity::btTypedefs_::stringListDeployment_t> _addrList, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList, ::com::harman::connectivity::btTypedefs_::stringListDeployment_t> _connRoleList, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::integerList, ::com::harman::connectivity::btTypedefs_::integerListDeployment_t> _linkQualitylist, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::integerList, ::com::harman::connectivity::btTypedefs_::integerListDeployment_t> _rssiList, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::integerList, ::com::harman::connectivity::btTypedefs_::integerListDeployment_t> _txPowerList, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList, ::com::harman::connectivity::btTypedefs_::stringListDeployment_t> _modeTypeList, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _addrList.getValue(), _connRoleList.getValue(), _linkQualitylist.getValue(), _rssiList.getValue(), _txPowerList.getValue(), _modeTypeList.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_addrList, deploy_connRoleList, deploy_linkQualitylist, deploy_rssiList, deploy_txPowerList, deploy_modeTypeList, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: This method will rename a device identified with the address passed in the
     *   parameter. 
       	The device must have been bonded previously; if not error code
     *   response will be sent.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::renameBondedDevice(const std::string &_inAddress, const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_name(_name, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "renameBondedDevice",
        "ss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_name,
_internalCallStatus,
deploy_outAddress, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::renameBondedDeviceAsync(const std::string &_inAddress, const std::string &_name, RenameBondedDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_name(_name, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "renameBondedDevice",
        "ss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_name,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: This method will rename a device identified with the name passed in the
     *   parameter.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::renameLocalDevice(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_name(_name, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "renameLocalDevice",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_name,
_internalCallStatus,
deploy_errorCode, deploy_errorDesc);
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::renameLocalDeviceAsync(const std::string &_name, RenameLocalDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_name(_name, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "renameLocalDevice",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_name,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: The method will start the auto connection procedure.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::startAutoConnect(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "startAutoConnect",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_errorCode, deploy_errorDesc);
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::startAutoConnectAsync(StartAutoConnectAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "startAutoConnect",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: The method will pause the auto connection procedure.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::pauseAutoConnect(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "pauseAutoConnect",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_errorCode, deploy_errorDesc);
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::pauseAutoConnectAsync(PauseAutoConnectAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "pauseAutoConnect",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: The method will stop the auto connection procedure.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::stopAutoConnect(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "stopAutoConnect",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_errorCode, deploy_errorDesc);
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::stopAutoConnectAsync(StopAutoConnectAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "stopAutoConnect",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: The method Adds the service/services to the auto connect service list.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::setAutoConnectServices(const std::string &_serviceName, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_serviceName(_serviceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setAutoConnectServices",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_serviceName,
_internalCallStatus,
deploy_errorCode, deploy_errorDesc);
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::setAutoConnectServicesAsync(const std::string &_serviceName, SetAutoConnectServicesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_serviceName(_serviceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setAutoConnectServices",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_serviceName,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: The method will provide the network operator information.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::getNetworkOperatorInfo(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_code, std::string &_longName, std::string &_shortName, std::string &_mode, std::string &_accTech, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_code(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_longName(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_shortName(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_mode(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_accTech(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getNetworkOperatorInfo",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_outAddress, deploy_code, deploy_longName, deploy_shortName, deploy_mode, deploy_accTech, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_code = deploy_code.getValue();
_longName = deploy_longName.getValue();
_shortName = deploy_shortName.getValue();
_mode = deploy_mode.getValue();
_accTech = deploy_accTech.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::getNetworkOperatorInfoAsync(const std::string &_inAddress, GetNetworkOperatorInfoAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_code(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_longName(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_shortName(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_mode(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_accTech(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getNetworkOperatorInfo",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _code, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _longName, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _shortName, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _mode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _accTech, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _code.getValue(), _longName.getValue(), _shortName.getValue(), _mode.getValue(), _accTech.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_code, deploy_longName, deploy_shortName, deploy_mode, deploy_accTech, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: The method Provide list of bonded device
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::getBondedDeviceList(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::bondedDevList &_list, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::bondedDevList, ::com::harman::connectivity::btTypedefs_::bondedDevListDeployment_t> deploy_list(static_cast<::com::harman::connectivity::btTypedefs_::bondedDevListDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::bondedDevList,::com::harman::connectivity::btTypedefs_::bondedDevListDeployment_t>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getBondedDeviceList",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_list, deploy_errorCode, deploy_errorDesc);
_list = deploy_list.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::getBondedDeviceListAsync(GetBondedDeviceListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::bondedDevList, ::com::harman::connectivity::btTypedefs_::bondedDevListDeployment_t> deploy_list(static_cast<::com::harman::connectivity::btTypedefs_::bondedDevListDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::bondedDevList,::com::harman::connectivity::btTypedefs_::bondedDevListDeployment_t>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getBondedDeviceList",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::bondedDevList, ::com::harman::connectivity::btTypedefs_::bondedDevListDeployment_t> _list, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _list.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_list, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: The method Sets Bluetooth ON.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::setBluetoothOn(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setBluetoothOn",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_errorCode, deploy_errorDesc);
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::setBluetoothOnAsync(SetBluetoothOnAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setBluetoothOn",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: The method Sets Bluetooth OFF.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::setBluetoothOff(const bool &_doNotStore, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_doNotStore(_doNotStore, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setBluetoothOff",
        "b",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_doNotStore,
_internalCallStatus,
deploy_errorCode, deploy_errorDesc);
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::setBluetoothOffAsync(const bool &_doNotStore, SetBluetoothOffAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_doNotStore(_doNotStore, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setBluetoothOff",
        "b",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_doNotStore,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: The method used to get the service list information from the remote device.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::serviceListQuery(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, ::com::harman::connectivity::btTypedefs::serviceList &_list, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::serviceList, ::com::harman::connectivity::btTypedefs_::serviceListDeployment_t> deploy_list(static_cast<::com::harman::connectivity::btTypedefs_::serviceListDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::serviceList,::com::harman::connectivity::btTypedefs_::serviceListDeployment_t>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "serviceListQuery",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_outAddress, deploy_list, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_list = deploy_list.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::serviceListQueryAsync(const std::string &_inAddress, ServiceListQueryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::serviceList, ::com::harman::connectivity::btTypedefs_::serviceListDeployment_t> deploy_list(static_cast<::com::harman::connectivity::btTypedefs_::serviceListDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::serviceList,::com::harman::connectivity::btTypedefs_::serviceListDeployment_t>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "serviceListQuery",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::serviceList, ::com::harman::connectivity::btTypedefs_::serviceListDeployment_t> _list, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _list.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_list, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: The method is used for setting the passkey which is used during pairing
     *   procedure.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::setPin(const std::string &_passkey, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_passkey(_passkey, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setPin",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_passkey,
_internalCallStatus,
deploy_errorCode, deploy_errorDesc);
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::setPinAsync(const std::string &_passkey, SetPinAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_passkey(_passkey, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setPin",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_passkey,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: The method is used for dialing an outgoing phone call. On successful dial, a
     *   unique Call Id is returned identifying the current call..
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::dial(const std::string &_inAddress, const std::string &_num, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_callId, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_num(_num, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_callId(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "dial",
        "ss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_num,
_internalCallStatus,
deploy_outAddress, deploy_reason, deploy_callId, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_reason = deploy_reason.getValue();
_callId = deploy_callId.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::dialAsync(const std::string &_inAddress, const std::string &_num, DialAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_num(_num, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_callId(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "dial",
        "ss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_num,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _reason, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _callId, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _reason.getValue(), _callId.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_reason, deploy_callId, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: The method is used for redialing a dialed number.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::reDial(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_callId, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_callId(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "reDial",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_outAddress, deploy_reason, deploy_callId, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_reason = deploy_reason.getValue();
_callId = deploy_callId.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::reDialAsync(const std::string &_inAddress, ReDialAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_callId(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "reDial",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _reason, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _callId, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _reason.getValue(), _callId.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_reason, deploy_callId, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: The function is used for sending a DTMF tone. To enable the sending of these
     *   tones a call has to be established first.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::sendDtmfTone(const std::string &_inAddress, const std::string &_dtmfTone, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_dtmfTone(_dtmfTone, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "sendDtmfTone",
        "ss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_dtmfTone,
_internalCallStatus,
deploy_outAddress, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::sendDtmfToneAsync(const std::string &_inAddress, const std::string &_dtmfTone, SendDtmfToneAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_dtmfTone(_dtmfTone, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "sendDtmfTone",
        "ss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_dtmfTone,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: This method is used by HMI for accepting an incoming call. If an active call is
     *   going on and incoming call is accepted, 
       	the active call is put on hold
     *   and the accepted call is made active call.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::acceptIncomingCall(const std::string &_inAddress, const bool &_transfer, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_transfer(_transfer, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "acceptIncomingCall",
        "sb",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_transfer,
_internalCallStatus,
deploy_outAddress, deploy_reason, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_reason = deploy_reason.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::acceptIncomingCallAsync(const std::string &_inAddress, const bool &_transfer, AcceptIncomingCallAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_transfer(_transfer, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "acceptIncomingCall",
        "sb",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_transfer,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _reason, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _reason.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_reason, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: This method is used by HMI to end a call with specified call Id.This call can
     *   be an active call or a held call.
       	If an active single party call is ended
     *   and if another call is on hold at this point,the held call shall be made
     *   active on hanging up the active call.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::endCall(const std::string &_inAddress, const int32_t &_callId, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_callId(_callId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "endCall",
        "si",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_callId,
_internalCallStatus,
deploy_outAddress, deploy_reason, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_reason = deploy_reason.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::endCallAsync(const std::string &_inAddress, const int32_t &_callId, EndCallAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_callId(_callId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "endCall",
        "si",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_callId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _reason, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _reason.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_reason, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: This method is used by HMI to end an active single party call or an active conf
     *   call. 
       	If another call is on hold at this point, that call shall be made
     *   active on hanging up the active call.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::endActiveCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "endActiveCall",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_outAddress, deploy_reason, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_reason = deploy_reason.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::endActiveCallAsync(const std::string &_inAddress, EndActiveCallAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "endActiveCall",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _reason, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _reason.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_reason, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: This method is used by HMI to end all calls. This method ends the active
     *   call/active conference call and the held call.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::endAllCalls(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "endAllCalls",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_outAddress, deploy_reason, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_reason = deploy_reason.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::endAllCallsAsync(const std::string &_inAddress, EndAllCallsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "endAllCalls",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _reason, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _reason.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_reason, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: This method is used for rejecting an incoming call.  The �endCall� API can be
     *   used to reject an incoming call.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::rejectIncomingCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "rejectIncomingCall",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_outAddress, deploy_reason, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_reason = deploy_reason.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::rejectIncomingCallAsync(const std::string &_inAddress, RejectIncomingCallAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "rejectIncomingCall",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _reason, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _reason.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_reason, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: This method is used to put the active call into hold state.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::holdActiveCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "holdActiveCall",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_outAddress, deploy_reason, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_reason = deploy_reason.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::holdActiveCallAsync(const std::string &_inAddress, HoldActiveCallAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "holdActiveCall",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _reason, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _reason.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_reason, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: This method is used by HMI to put a held call/conference call to active state.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::resumeHeldCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "resumeHeldCall",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_outAddress, deploy_reason, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_reason = deploy_reason.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::resumeHeldCallAsync(const std::string &_inAddress, ResumeHeldCallAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "resumeHeldCall",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _reason, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _reason.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_reason, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: This method is used by HMI to initiate a conference call.
    
    		1.	To establish a
     *   conference call at least 2 calls must be available. i.e. one active call and a
     *   held call.
    		2.	In case the active call is a conference call, this system call
     *   adds an additional member to this conference. 
    		3.	The call which is added to
     *   the conference call can be a waiting call or a held call.
    		4.	If a call is
     *   put on hold and an active call is going on, when a conference call is
     *   established, the held call is added to conference call.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::conferenceCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "conferenceCall",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_outAddress, deploy_reason, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_reason = deploy_reason.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::conferenceCallAsync(const std::string &_inAddress, ConferenceCallAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "conferenceCall",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _reason, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _reason.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_reason, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: This method is used by HMI to select a particular call.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::selectCall(const std::string &_inAddress, const int32_t &_callId, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_callId(_callId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "selectCall",
        "si",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_callId,
_internalCallStatus,
deploy_outAddress, deploy_reason, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_reason = deploy_reason.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::selectCallAsync(const std::string &_inAddress, const int32_t &_callId, SelectCallAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_callId(_callId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "selectCall",
        "si",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_callId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _reason, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _reason.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_reason, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: This method is used to toggle between hands-free and private mode. 
       	This
     *   function puts the ongoing hands-free call to private mode, meaning the phone
     *   audio is not played out on the head unit speakers and the head unit microphone
     *   does not capture the voice. 
       	The HMI should call this API when the user
     *   wants to use his phone instead of the hands free during the ongoing call. 
      
     *   	By default the hands-free mode is set to OFF.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::setHfMode(const std::string &_inAddress, const bool &_hfMode, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_hfMode(_hfMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setHfMode",
        "sb",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_hfMode,
_internalCallStatus,
deploy_outAddress, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::setHfModeAsync(const std::string &_inAddress, const bool &_hfMode, SetHfModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_hfMode(_hfMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setHfMode",
        "sb",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_hfMode,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: The method is used to Set the debug mode.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::setVRMode(const std::string &_inAddress, const bool &_mode, CommonAPI::CallStatus &_internalCallStatus, std::string &_OutAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_mode(_mode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_OutAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setVRMode",
        "sb",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_mode,
_internalCallStatus,
deploy_OutAddress, deploy_errorCode, deploy_errorDesc);
_OutAddress = deploy_OutAddress.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::setVRModeAsync(const std::string &_inAddress, const bool &_mode, SetVRModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_mode(_mode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_OutAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setVRMode",
        "sb",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_mode,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _OutAddress, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _OutAddress.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_OutAddress, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: The method is used to Set the debug mode.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::setEyesFree(const std::string &_inAddress, const bool &_toSet, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_toSet(_toSet, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setEyesFree",
        "sb",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_toSet,
_internalCallStatus,
deploy_outAddress, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::setEyesFreeAsync(const std::string &_inAddress, const bool &_toSet, SetEyesFreeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_toSet(_toSet, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setEyesFree",
        "sb",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_toSet,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: clearTransferTimeout:
       	errorCode: This is OUT parameter, will contain either
     *   success or error value. 0 in case of SUCCESS.
       	errorDesc: This is OUT
     *   parameter, Contains the error description.   
       	The method is used to Clear
     *   the transfer timeout.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::clearTransferTimeout(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "clearTransferTimeout",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_errorCode, deploy_errorDesc);
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::clearTransferTimeoutAsync(ClearTransferTimeoutAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "clearTransferTimeout",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: This method is used for, swapping the held and the active calls i.e. setting a
     *   held call/ conference call to active state 
       	and the active call or
     *   conference call to hold state.
       	When an active call/conference call is
     *   going on, when user uses swap calls, the active call/ conference call is put
     *   to hold state and if a held call exists, 
       	that call will be placed to
     *   active call state.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::swapCalls(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "swapCalls",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_outAddress, deploy_reason, deploy_errorCode, deploy_errorDesc);
_outAddress = deploy_outAddress.getValue();
_reason = deploy_reason.getValue();
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::swapCallsAsync(const std::string &_inAddress, SwapCallsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_reason(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "swapCalls",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _reason, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _reason.getValue(), _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_reason, deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: The method will start the auto re-connection procedure which will continue
     *   till
        reconnect_timeout is reached or will continue forever if
     *   reconnect_timeout is 0, unless
    	method stopAutoReconnect is called.
    	The
     *   reconnect_timeout parameter can be modified with the configuration file.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::startAutoReconnect(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "startAutoReconnect",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_errorCode, deploy_errorDesc);
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::startAutoReconnectAsync(StartAutoReconnectAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "startAutoReconnect",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: The method will stop the auto re-connection procedure.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::stopAutoReconnect(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "stopAutoReconnect",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_errorCode, deploy_errorDesc);
_errorCode = deploy_errorCode.getValue();
_errorDesc = deploy_errorDesc.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::stopAutoReconnectAsync(StopAutoReconnectAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_errorDesc(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "stopAutoReconnect",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _errorDesc) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _errorDesc.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_errorDesc));
    }
    /**
     * description: The method is used by to get value of onOffState.
        This method can be
     *   queried to know the value of onOffState in case signal - onOffState is missed
     *   out by Proxy.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::getPropOnOffStatus(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::eOnOffState &_OnOffState, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::eOnOffState, CommonAPI::EmptyDeployment> deploy_OnOffState(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::eOnOffState,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getPropOnOffStatus",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_OnOffState);
_OnOffState = deploy_OnOffState.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::getPropOnOffStatusAsync(GetPropOnOffStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::eOnOffState, CommonAPI::EmptyDeployment> deploy_OnOffState(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::eOnOffState,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getPropOnOffStatus",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::eOnOffState, CommonAPI::EmptyDeployment> _OnOffState) {
        	if (_callback)
        		_callback(_internalCallStatus, _OnOffState.getValue());
        },
        std::make_tuple(deploy_OnOffState));
    }
    /**
     * description: The method used to get the service list information of a paired device.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::getServiceList(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_deviceName, bool &_deviceInRange, std::string &_date, int32_t &_cod, std::string &_vendorId, std::string &_vendorIdSource, std::string &_productId, std::string &_versionnum, bool &_complete, std::string &_deviceVendor, std::string &_deviceModel, std::string &_deviceRevision, ::com::harman::connectivity::btTypedefs::serviceList &_list, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceName(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_deviceInRange(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_date(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_cod(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_vendorId(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_vendorIdSource(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_productId(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_versionnum(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_complete(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceVendor(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceModel(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceRevision(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::serviceList, ::com::harman::connectivity::btTypedefs_::serviceListDeployment_t> deploy_list(static_cast<::com::harman::connectivity::btTypedefs_::serviceListDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::serviceList,::com::harman::connectivity::btTypedefs_::serviceListDeployment_t>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getServiceList",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_outAddress, deploy_deviceName, deploy_deviceInRange, deploy_date, deploy_cod, deploy_vendorId, deploy_vendorIdSource, deploy_productId, deploy_versionnum, deploy_complete, deploy_deviceVendor, deploy_deviceModel, deploy_deviceRevision, deploy_list, deploy_errorCode);
_outAddress = deploy_outAddress.getValue();
_deviceName = deploy_deviceName.getValue();
_deviceInRange = deploy_deviceInRange.getValue();
_date = deploy_date.getValue();
_cod = deploy_cod.getValue();
_vendorId = deploy_vendorId.getValue();
_vendorIdSource = deploy_vendorIdSource.getValue();
_productId = deploy_productId.getValue();
_versionnum = deploy_versionnum.getValue();
_complete = deploy_complete.getValue();
_deviceVendor = deploy_deviceVendor.getValue();
_deviceModel = deploy_deviceModel.getValue();
_deviceRevision = deploy_deviceRevision.getValue();
_list = deploy_list.getValue();
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::getServiceListAsync(const std::string &_inAddress, GetServiceListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceName(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_deviceInRange(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_date(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_cod(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_vendorId(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_vendorIdSource(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_productId(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_versionnum(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_complete(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceVendor(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceModel(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceRevision(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::serviceList, ::com::harman::connectivity::btTypedefs_::serviceListDeployment_t> deploy_list(static_cast<::com::harman::connectivity::btTypedefs_::serviceListDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::serviceList,::com::harman::connectivity::btTypedefs_::serviceListDeployment_t>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getServiceList",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _deviceName, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> _deviceInRange, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _date, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _cod, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _vendorId, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _vendorIdSource, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _productId, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _versionnum, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> _complete, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _deviceVendor, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _deviceModel, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _deviceRevision, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::serviceList, ::com::harman::connectivity::btTypedefs_::serviceListDeployment_t> _list, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _deviceName.getValue(), _deviceInRange.getValue(), _date.getValue(), _cod.getValue(), _vendorId.getValue(), _vendorIdSource.getValue(), _productId.getValue(), _versionnum.getValue(), _complete.getValue(), _deviceVendor.getValue(), _deviceModel.getValue(), _deviceRevision.getValue(), _list.getValue(), _errorCode.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_deviceName, deploy_deviceInRange, deploy_date, deploy_cod, deploy_vendorId, deploy_vendorIdSource, deploy_productId, deploy_versionnum, deploy_complete, deploy_deviceVendor, deploy_deviceModel, deploy_deviceRevision, deploy_list, deploy_errorCode));
    }
    /**
     * description: The method used to reply for bonding request from a device supporting legacy
     *   pairing.
                            If legacy pairing is disabled in the
     *   BTService configuration, then errorCode BTSERVICECORE_ERR_FAILURE is sent.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::standardBondingReply(const std::string &_inAddress, const bool &_accept, const bool &_trusted, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_accept(_accept, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_trusted(_trusted, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "standardBondingReply",
        "sbb",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_accept, deploy_trusted,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::standardBondingReplyAsync(const std::string &_inAddress, const bool &_accept, const bool &_trusted, StandardBondingReplyAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_accept(_accept, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_trusted(_trusted, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "standardBondingReply",
        "sbb",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_accept, deploy_trusted,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: The method is used to Add SPP Service.
     * author: Viraj Barwatkar
     */
    void BtServiceDBusProxy::addSPPService(const std::string &_serviceName, const std::string &_UUIDReg, const std::string &_UUIDConn, const bool &_devBRole, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_serviceName(_serviceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_UUIDReg(_UUIDReg, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_UUIDConn(_UUIDConn, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_devBRole(_devBRole, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "addSPPService",
        "sssb",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_serviceName, deploy_UUIDReg, deploy_UUIDConn, deploy_devBRole,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::addSPPServiceAsync(const std::string &_serviceName, const std::string &_UUIDReg, const std::string &_UUIDConn, const bool &_devBRole, AddSPPServiceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_serviceName(_serviceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_UUIDReg(_UUIDReg, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_UUIDConn(_UUIDConn, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_devBRole(_devBRole, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "addSPPService",
        "sssb",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_serviceName, deploy_UUIDReg, deploy_UUIDConn, deploy_devBRole,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: The method is used to Remove SPP Service.
     * author: Viraj Barwatkar
     */
    void BtServiceDBusProxy::removeSPPService(const std::string &_serviceName, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_serviceName(_serviceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "removeSPPService",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_serviceName,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::removeSPPServiceAsync(const std::string &_serviceName, RemoveSPPServiceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_serviceName(_serviceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "removeSPPService",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_serviceName,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: The method is used to set current driver profile.
     * author: Viraj Barwatkar
     */
    void BtServiceDBusProxy::setDriveProfile(const int32_t &_profileID, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_profileID(_profileID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setDriveProfile",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_profileID,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::setDriveProfileAsync(const int32_t &_profileID, SetDriveProfileAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_profileID(_profileID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setDriveProfile",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_profileID,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: The method is used to delete a driver profile.
     * author: Viraj Barwatkar
     */
    void BtServiceDBusProxy::deleteDriveProfile(const int32_t &_profileID, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_profileID(_profileID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "deleteDriveProfile",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_profileID,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::deleteDriveProfileAsync(const int32_t &_profileID, DeleteDriveProfileAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_profileID(_profileID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "deleteDriveProfile",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_profileID,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: The method is used to query Device ID Profile info of remote device.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::getDeviceIDProfileInfo(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_vendorId, std::string &_vendorIdSource, std::string &_productId, std::string &_versionnum, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_vendorId(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_vendorIdSource(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_productId(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_versionnum(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getDeviceIDProfileInfo",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_outAddress, deploy_vendorId, deploy_vendorIdSource, deploy_productId, deploy_versionnum, deploy_errorCode);
_outAddress = deploy_outAddress.getValue();
_vendorId = deploy_vendorId.getValue();
_vendorIdSource = deploy_vendorIdSource.getValue();
_productId = deploy_productId.getValue();
_versionnum = deploy_versionnum.getValue();
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::getDeviceIDProfileInfoAsync(const std::string &_inAddress, GetDeviceIDProfileInfoAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_outAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_vendorId(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_vendorIdSource(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_productId(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_versionnum(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getDeviceIDProfileInfo",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _outAddress, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _vendorId, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _vendorIdSource, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _productId, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _versionnum, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _outAddress.getValue(), _vendorId.getValue(), _vendorIdSource.getValue(), _productId.getValue(), _versionnum.getValue(), _errorCode.getValue());
        },
        std::make_tuple(deploy_outAddress, deploy_vendorId, deploy_vendorIdSource, deploy_productId, deploy_versionnum, deploy_errorCode));
    }
    /**
     * description: The method is used to consider handling done upon receiving master reset
     *   condition.
                           Though no IN params - the project specific
     *   handling for master/factory reset will 
    		       be based on config flag.
     * author: Poornima Hiremath
     */
    void BtServiceDBusProxy::masterReset(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "masterReset",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtServiceDBusProxy::masterResetAsync(MasterResetAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "masterReset",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }


void BtServiceDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 4;
          ownVersionMinor = 1;
      }

      } // namespace connectivity
      } // namespace harman
      } // namespace com
      } // namespace v4
