/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This class implements all Bluetooth and Telephony Operations
 * author: Poornima Hiremath
 */
#ifndef V4_COM_HARMAN_CONNECTIVITY_Bt_Service_DBUS_PROXY_HPP_
#define V4_COM_HARMAN_CONNECTIVITY_Bt_Service_DBUS_PROXY_HPP_

#include <v4/com/harman/connectivity/BtServiceProxyBase.hpp>
#include "v4/com/harman/connectivity/BtServiceDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v4 {
namespace com {
namespace harman {
namespace connectivity {

class BtServiceDBusProxy
    : virtual public BtServiceProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    BtServiceDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~BtServiceDBusProxy() { }


    virtual BluetoothStatusEvent& getBluetoothStatusEvent();
    virtual OnOffStateEvent& getOnOffStateEvent();
    virtual LocalDevAddrEvent& getLocalDevAddrEvent();
    virtual PasskeyEvent& getPasskeyEvent();
    virtual SignalQualityEvent& getSignalQualityEvent();
    virtual VrModeEvent& getVrModeEvent();
    virtual NetworkOperatorEvent& getNetworkOperatorEvent();
    virtual SupportedFeaturesEvent& getSupportedFeaturesEvent();
    virtual DeviceSearchListEvent& getDeviceSearchListEvent();
    virtual StandardBondingRequestEvent& getStandardBondingRequestEvent();
    virtual StandardBondingRejectedEvent& getStandardBondingRejectedEvent();
    virtual SecureSimpleBondingRequestEvent& getSecureSimpleBondingRequestEvent();
    virtual ServiceConnectionRequestEvent& getServiceConnectionRequestEvent();
    virtual ServiceConnectedEvent& getServiceConnectedEvent();
    virtual ServiceDisconnectedEvent& getServiceDisconnectedEvent();
    virtual DeviceDisconnectedEvent& getDeviceDisconnectedEvent();
    virtual ServiceConnectionErrorEvent& getServiceConnectionErrorEvent();
    virtual BondedDeviceProfileListChangedEvent& getBondedDeviceProfileListChangedEvent();
    virtual BondedDeviceServiceListChangedEvent& getBondedDeviceServiceListChangedEvent();
    virtual DeviceDeletedEvent& getDeviceDeletedEvent();
    virtual NetworkIfUpEvent& getNetworkIfUpEvent();
    virtual NetworkIfDownEvent& getNetworkIfDownEvent();
    virtual BondingStatusEvent& getBondingStatusEvent();
    virtual IncomingCallInfoEvent& getIncomingCallInfoEvent();
    virtual HandsFreeModeEvent& getHandsFreeModeEvent();
    virtual AudioStatusEvent& getAudioStatusEvent();
    virtual BatteryChargeEvent& getBatteryChargeEvent();
    virtual NetworkOperatorChangedEvent& getNetworkOperatorChangedEvent();
    virtual NetworkRegistrationStateEvent& getNetworkRegistrationStateEvent();
    virtual CallStatusEvent& getCallStatusEvent();
    virtual CallListUpdateEvent& getCallListUpdateEvent();
    virtual ReconnectTimeoutExpiredEvent& getReconnectTimeoutExpiredEvent();
    virtual DeviceSearchCompleteEvent& getDeviceSearchCompleteEvent();
    virtual SiriStatusEvent& getSiriStatusEvent();
    virtual SubscriberNumberEvent& getSubscriberNumberEvent();
    virtual ServiceConnectingEvent& getServiceConnectingEvent();
    virtual AutoConnectStateEvent& getAutoConnectStateEvent();
    virtual StackResetInProgressEvent& getStackResetInProgressEvent();
    virtual StackResetDoneEvent& getStackResetDoneEvent();
    virtual DeviceNameChangedEvent& getDeviceNameChangedEvent();
    virtual DeviceIDInfoEvent& getDeviceIDInfoEvent();

    /**
     * description: The method is used by to Set the current ignition state.
     * author: Poornima Hiremath
     */
    virtual void setIgnitionState(const bool &_ignitionState, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setIgnitionStateAsync(const bool &_ignitionState, SetIgnitionStateAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used by to Get value of the Bluetooth ON or OFF.
     * author: Poornima Hiremath
     */
    virtual void getPropBluetoothStatus(CommonAPI::CallStatus &_internalCallStatus, bool &_Status, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getPropBluetoothStatusAsync(GetPropBluetoothStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used by to Get Bluetooth Signal quality.
     * author: Poornima Hiremath
     */
    virtual void getSignalQuality(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_signalQual, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSignalQualityAsync(const std::string &_inAddress, GetSignalQualityAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used by to Get remote device battery change status.
     * author: Poornima Hiremath
     */
    virtual void getBatteryCharge(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_batteryCharge, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getBatteryChargeAsync(const std::string &_inAddress, GetBatteryChargeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used by to Get value of the Local Bluetooth Device address
     *   property.
     * author: Poornima Hiremath
     */
    virtual void getPropLocalDeviceAddress(CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getPropLocalDeviceAddressAsync(GetPropLocalDeviceAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used by to Get the local device name.
     * author: Poornima Hiremath
     */
    virtual void getPropLocalDeviceName(CommonAPI::CallStatus &_internalCallStatus, std::string &_name, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getPropLocalDeviceNameAsync(GetPropLocalDeviceNameAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used by to Get the HFP connection status.
     * author: Poornima Hiremath
     */
    virtual void getHfpConnectionStatus(CommonAPI::CallStatus &_internalCallStatus, bool &_Status, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getHfpConnectionStatusAsync(GetHfpConnectionStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used by to get the bonded device list.
     * author: Poornima Hiremath
     */
    virtual void getPropBondedDeviceList(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::bondedDevList &_list, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getPropBondedDeviceListAsync(GetPropBondedDeviceListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used by to get supported feature list.
     * author: Poornima Hiremath
     */
    virtual void getSupportedFeatures(const std::string &_inAddrress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, ::com::harman::connectivity::btTypedefs::stringList &_featureList, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedFeaturesAsync(const std::string &_inAddrress, GetSupportedFeaturesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used by to get the network availability.
     * author: Poornima Hiremath
     */
    virtual void getNetworkAvailability(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, bool &_netwrkStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getNetworkAvailabilityAsync(const std::string &_inAddress, GetNetworkAvailabilityAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used by to get the network registration state.
     * author: Poornima Hiremath
     */
    virtual void getNetworkRegistrationState(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_regState, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getNetworkRegistrationStateAsync(const std::string &_inAddress, GetNetworkRegistrationStateAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used by to get the subscriber number.
     * author: Poornima Hiremath
     */
    virtual void getSubscriberNumber(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_subscrbNum, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSubscriberNumberAsync(const std::string &_inAddress, GetSubscriberNumberAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used by to get the list of last connected devices.
     * author: Poornima Hiremath
     */
    virtual void getlastConnectedDevice(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::lastConnectedDevList &_list, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getlastConnectedDeviceAsync(GetlastConnectedDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used by to get call state event data.
     * author: Poornima Hiremath
     */
    virtual void getCallStateEventData(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, ::com::harman::connectivity::btTypedefs::callstateInfoList &_list, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCallStateEventDataAsync(const std::string &_inAddress, GetCallStateEventDataAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used by to get call state event data.
     * author: Poornima Hiremath
     */
    virtual void sppInterfaces(CommonAPI::CallStatus &_internalCallStatus, std::vector<std::string> &_devA, std::vector<std::string> &_devB, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> sppInterfacesAsync(SppInterfacesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Prepares the HU to enter bonding mode, this implies that BT core will wait for
     *   any ongoing disconnections to complete then abort any pending connection
     *   request.
     * author: Poornima Hiremath
     */
    virtual void enterBondingMode(const uint32_t &_timeout, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> enterBondingModeAsync(const uint32_t &_timeout, EnterBondingModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Exits the bonding mode, this implies that BT core will make the HU
     *   UnDiscoverable and also wait for any ongoing connections/disconnections to
     *   complete.
     * author: Poornima Hiremath
     */
    virtual void exitBondingMode(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> exitBondingModeAsync(ExitBondingModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Changes the priority of a service for a device. It will modify the current
     *   priority of a device for a given service.
     * author: Poornima Hiremath
     */
    virtual void changePriority(const std::string &_inAddress, const std::string &_service, const int32_t &_priority, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> changePriorityAsync(const std::string &_inAddress, const std::string &_service, const int32_t &_priority, ChangePriorityAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Starts the procedure of discovering devices in range and finding their
     *   capabilities.
     * author: Poornima Hiremath
     */
    virtual void startDeviceSearch(const uint32_t &_maxDevice, const uint32_t &_timeout, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> startDeviceSearchAsync(const uint32_t &_maxDevice, const uint32_t &_timeout, StartDeviceSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Stops the procedure of discovering devices in range.
     * author: Poornima Hiremath
     */
    virtual void stopDeviceSearch(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> stopDeviceSearchAsync(StopDeviceSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method should be called by HMI in response to receiving the signal
     *   "secureSimpleBondingRequest" from Bluetooth Service.
     * author: Poornima Hiremath
     */
    virtual void secureSimpleBondingReply(const std::string &_inAddress, const bool &_accept, const bool &_trusted, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> secureSimpleBondingReplyAsync(const std::string &_inAddress, const bool &_accept, const bool &_trusted, SecureSimpleBondingReplyAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method will result in disconnection of all service level connections
     *   including ACL connection, 
       	deletion of link keys and eventually un-bonding
     *   of the requested device from the head unit.
     * author: Poornima Hiremath
     */
    virtual void deleteDevice(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> deleteDeviceAsync(const std::string &_inAddress, DeleteDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method will result in calling internally deleteDevice of all connected
     *   devices.
     * author: Poornima Hiremath
     */
    virtual void deleteAllDevices(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> deleteAllDevicesAsync(DeleteAllDevicesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Starts the procedure connection for the given service to the given phone.
     * author: Poornima Hiremath
     */
    virtual void startServiceConnection(const std::string &_inAddress, const std::string &_service, const std::string &_instanceName, const std::string &_replaceAddr, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_devName, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> startServiceConnectionAsync(const std::string &_inAddress, const std::string &_service, const std::string &_instanceName, const std::string &_replaceAddr, StartServiceConnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Allows the existance of the service connection to this device and service..
     * author: Poornima Hiremath
     */
    virtual void allowServiceConnection(const std::string &_inAddress, const ::com::harman::connectivity::btTypedefs::eRequestingModule &_module, const std::string &_service, const bool &_allow, const bool &_reconnect, const bool &_deviceInvert, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> allowServiceConnectionAsync(const std::string &_inAddress, const ::com::harman::connectivity::btTypedefs::eRequestingModule &_module, const std::string &_service, const bool &_allow, const bool &_reconnect, const bool &_deviceInvert, AllowServiceConnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method can be invoked by clients to disconnect a previously connected
     *   service from a previously bonded device.
     * author: Poornima Hiremath
     */
    virtual void startServiceDisconnection(const std::string &_inAddress, const std::string &_service, const bool &_internalReq, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> startServiceDisconnectionAsync(const std::string &_inAddress, const std::string &_service, const bool &_internalReq, StartServiceDisconnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method should be called by clients in order to reply to the incoming
     *   service connection request from 
       	a remote device as indicated by the
     *   signal 'serviceConnectionRequest'. 
       	The reply can be to accept or reject
     *   incoming service connection request.
     * author: Poornima Hiremath
     */
    virtual void serviceConnectionReply(const std::string &_inAddress, const std::string &_service, const bool &_accept, const std::string &_instanceName, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_devName, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> serviceConnectionReplyAsync(const std::string &_inAddress, const std::string &_service, const bool &_accept, const std::string &_instanceName, ServiceConnectionReplyAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method would return the list of service of a device.
     * author: Poornima Hiremath
     */
    virtual void getBondedDeviceServiceList(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getBondedDeviceServiceListAsync(const std::string &_inAddress, GetBondedDeviceServiceListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method Requests diagnostic radio status information.
     * author: Poornima Hiremath
     */
    virtual void getRadioStatus(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::stringList &_addrList, ::com::harman::connectivity::btTypedefs::stringList &_connRoleList, ::com::harman::connectivity::btTypedefs::integerList &_linkQualitylist, ::com::harman::connectivity::btTypedefs::integerList &_rssiList, ::com::harman::connectivity::btTypedefs::integerList &_txPowerList, ::com::harman::connectivity::btTypedefs::stringList &_modeTypeList, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getRadioStatusAsync(GetRadioStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method will rename a device identified with the address passed in the
     *   parameter. 
       	The device must have been bonded previously; if not error code
     *   response will be sent.
     * author: Poornima Hiremath
     */
    virtual void renameBondedDevice(const std::string &_inAddress, const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> renameBondedDeviceAsync(const std::string &_inAddress, const std::string &_name, RenameBondedDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method will rename a device identified with the name passed in the
     *   parameter.
     * author: Poornima Hiremath
     */
    virtual void renameLocalDevice(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> renameLocalDeviceAsync(const std::string &_name, RenameLocalDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method will start the auto connection procedure.
     * author: Poornima Hiremath
     */
    virtual void startAutoConnect(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> startAutoConnectAsync(StartAutoConnectAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method will pause the auto connection procedure.
     * author: Poornima Hiremath
     */
    virtual void pauseAutoConnect(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> pauseAutoConnectAsync(PauseAutoConnectAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method will stop the auto connection procedure.
     * author: Poornima Hiremath
     */
    virtual void stopAutoConnect(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> stopAutoConnectAsync(StopAutoConnectAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method Adds the service/services to the auto connect service list.
     * author: Poornima Hiremath
     */
    virtual void setAutoConnectServices(const std::string &_serviceName, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setAutoConnectServicesAsync(const std::string &_serviceName, SetAutoConnectServicesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method will provide the network operator information.
     * author: Poornima Hiremath
     */
    virtual void getNetworkOperatorInfo(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_code, std::string &_longName, std::string &_shortName, std::string &_mode, std::string &_accTech, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getNetworkOperatorInfoAsync(const std::string &_inAddress, GetNetworkOperatorInfoAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method Provide list of bonded device
     * author: Poornima Hiremath
     */
    virtual void getBondedDeviceList(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::bondedDevList &_list, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getBondedDeviceListAsync(GetBondedDeviceListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method Sets Bluetooth ON.
     * author: Poornima Hiremath
     */
    virtual void setBluetoothOn(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setBluetoothOnAsync(SetBluetoothOnAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method Sets Bluetooth OFF.
     * author: Poornima Hiremath
     */
    virtual void setBluetoothOff(const bool &_doNotStore, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setBluetoothOffAsync(const bool &_doNotStore, SetBluetoothOffAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method used to get the service list information from the remote device.
     * author: Poornima Hiremath
     */
    virtual void serviceListQuery(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, ::com::harman::connectivity::btTypedefs::serviceList &_list, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> serviceListQueryAsync(const std::string &_inAddress, ServiceListQueryAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used for setting the passkey which is used during pairing
     *   procedure.
     * author: Poornima Hiremath
     */
    virtual void setPin(const std::string &_passkey, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setPinAsync(const std::string &_passkey, SetPinAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used for dialing an outgoing phone call. On successful dial, a
     *   unique Call Id is returned identifying the current call..
     * author: Poornima Hiremath
     */
    virtual void dial(const std::string &_inAddress, const std::string &_num, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_callId, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> dialAsync(const std::string &_inAddress, const std::string &_num, DialAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used for redialing a dialed number.
     * author: Poornima Hiremath
     */
    virtual void reDial(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_callId, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> reDialAsync(const std::string &_inAddress, ReDialAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The function is used for sending a DTMF tone. To enable the sending of these
     *   tones a call has to be established first.
     * author: Poornima Hiremath
     */
    virtual void sendDtmfTone(const std::string &_inAddress, const std::string &_dtmfTone, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> sendDtmfToneAsync(const std::string &_inAddress, const std::string &_dtmfTone, SendDtmfToneAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used by HMI for accepting an incoming call. If an active call is
     *   going on and incoming call is accepted, 
       	the active call is put on hold
     *   and the accepted call is made active call.
     * author: Poornima Hiremath
     */
    virtual void acceptIncomingCall(const std::string &_inAddress, const bool &_transfer, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> acceptIncomingCallAsync(const std::string &_inAddress, const bool &_transfer, AcceptIncomingCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used by HMI to end a call with specified call Id.This call can
     *   be an active call or a held call.
       	If an active single party call is ended
     *   and if another call is on hold at this point,the held call shall be made
     *   active on hanging up the active call.
     * author: Poornima Hiremath
     */
    virtual void endCall(const std::string &_inAddress, const int32_t &_callId, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> endCallAsync(const std::string &_inAddress, const int32_t &_callId, EndCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used by HMI to end an active single party call or an active conf
     *   call. 
       	If another call is on hold at this point, that call shall be made
     *   active on hanging up the active call.
     * author: Poornima Hiremath
     */
    virtual void endActiveCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> endActiveCallAsync(const std::string &_inAddress, EndActiveCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used by HMI to end all calls. This method ends the active
     *   call/active conference call and the held call.
     * author: Poornima Hiremath
     */
    virtual void endAllCalls(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> endAllCallsAsync(const std::string &_inAddress, EndAllCallsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used for rejecting an incoming call.  The �endCall� API can be
     *   used to reject an incoming call.
     * author: Poornima Hiremath
     */
    virtual void rejectIncomingCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> rejectIncomingCallAsync(const std::string &_inAddress, RejectIncomingCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used to put the active call into hold state.
     * author: Poornima Hiremath
     */
    virtual void holdActiveCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> holdActiveCallAsync(const std::string &_inAddress, HoldActiveCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used by HMI to put a held call/conference call to active state.
     * author: Poornima Hiremath
     */
    virtual void resumeHeldCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> resumeHeldCallAsync(const std::string &_inAddress, ResumeHeldCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used by HMI to initiate a conference call.
    
    		1.	To establish a
     *   conference call at least 2 calls must be available. i.e. one active call and a
     *   held call.
    		2.	In case the active call is a conference call, this system call
     *   adds an additional member to this conference. 
    		3.	The call which is added to
     *   the conference call can be a waiting call or a held call.
    		4.	If a call is
     *   put on hold and an active call is going on, when a conference call is
     *   established, the held call is added to conference call.
     * author: Poornima Hiremath
     */
    virtual void conferenceCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> conferenceCallAsync(const std::string &_inAddress, ConferenceCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used by HMI to select a particular call.
     * author: Poornima Hiremath
     */
    virtual void selectCall(const std::string &_inAddress, const int32_t &_callId, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> selectCallAsync(const std::string &_inAddress, const int32_t &_callId, SelectCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used to toggle between hands-free and private mode. 
       	This
     *   function puts the ongoing hands-free call to private mode, meaning the phone
     *   audio is not played out on the head unit speakers and the head unit microphone
     *   does not capture the voice. 
       	The HMI should call this API when the user
     *   wants to use his phone instead of the hands free during the ongoing call. 
      
     *   	By default the hands-free mode is set to OFF.
     * author: Poornima Hiremath
     */
    virtual void setHfMode(const std::string &_inAddress, const bool &_hfMode, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setHfModeAsync(const std::string &_inAddress, const bool &_hfMode, SetHfModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used to Set the debug mode.
     * author: Poornima Hiremath
     */
    virtual void setVRMode(const std::string &_inAddress, const bool &_mode, CommonAPI::CallStatus &_internalCallStatus, std::string &_OutAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setVRModeAsync(const std::string &_inAddress, const bool &_mode, SetVRModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used to Set the debug mode.
     * author: Poornima Hiremath
     */
    virtual void setEyesFree(const std::string &_inAddress, const bool &_toSet, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setEyesFreeAsync(const std::string &_inAddress, const bool &_toSet, SetEyesFreeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: clearTransferTimeout:
       	errorCode: This is OUT parameter, will contain either
     *   success or error value. 0 in case of SUCCESS.
       	errorDesc: This is OUT
     *   parameter, Contains the error description.   
       	The method is used to Clear
     *   the transfer timeout.
     * author: Poornima Hiremath
     */
    virtual void clearTransferTimeout(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> clearTransferTimeoutAsync(ClearTransferTimeoutAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used for, swapping the held and the active calls i.e. setting a
     *   held call/ conference call to active state 
       	and the active call or
     *   conference call to hold state.
       	When an active call/conference call is
     *   going on, when user uses swap calls, the active call/ conference call is put
     *   to hold state and if a held call exists, 
       	that call will be placed to
     *   active call state.
     * author: Poornima Hiremath
     */
    virtual void swapCalls(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> swapCallsAsync(const std::string &_inAddress, SwapCallsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method will start the auto re-connection procedure which will continue
     *   till
        reconnect_timeout is reached or will continue forever if
     *   reconnect_timeout is 0, unless
    	method stopAutoReconnect is called.
    	The
     *   reconnect_timeout parameter can be modified with the configuration file.
     * author: Poornima Hiremath
     */
    virtual void startAutoReconnect(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> startAutoReconnectAsync(StartAutoReconnectAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method will stop the auto re-connection procedure.
     * author: Poornima Hiremath
     */
    virtual void stopAutoReconnect(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> stopAutoReconnectAsync(StopAutoReconnectAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used by to get value of onOffState.
        This method can be
     *   queried to know the value of onOffState in case signal - onOffState is missed
     *   out by Proxy.
     * author: Poornima Hiremath
     */
    virtual void getPropOnOffStatus(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::eOnOffState &_OnOffState, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getPropOnOffStatusAsync(GetPropOnOffStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method used to get the service list information of a paired device.
     * author: Poornima Hiremath
     */
    virtual void getServiceList(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_deviceName, bool &_deviceInRange, std::string &_date, int32_t &_cod, std::string &_vendorId, std::string &_vendorIdSource, std::string &_productId, std::string &_versionnum, bool &_complete, std::string &_deviceVendor, std::string &_deviceModel, std::string &_deviceRevision, ::com::harman::connectivity::btTypedefs::serviceList &_list, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getServiceListAsync(const std::string &_inAddress, GetServiceListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method used to reply for bonding request from a device supporting legacy
     *   pairing.
                            If legacy pairing is disabled in the
     *   BTService configuration, then errorCode BTSERVICECORE_ERR_FAILURE is sent.
     * author: Poornima Hiremath
     */
    virtual void standardBondingReply(const std::string &_inAddress, const bool &_accept, const bool &_trusted, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> standardBondingReplyAsync(const std::string &_inAddress, const bool &_accept, const bool &_trusted, StandardBondingReplyAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used to Add SPP Service.
     * author: Viraj Barwatkar
     */
    virtual void addSPPService(const std::string &_serviceName, const std::string &_UUIDReg, const std::string &_UUIDConn, const bool &_devBRole, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> addSPPServiceAsync(const std::string &_serviceName, const std::string &_UUIDReg, const std::string &_UUIDConn, const bool &_devBRole, AddSPPServiceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used to Remove SPP Service.
     * author: Viraj Barwatkar
     */
    virtual void removeSPPService(const std::string &_serviceName, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> removeSPPServiceAsync(const std::string &_serviceName, RemoveSPPServiceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used to set current driver profile.
     * author: Viraj Barwatkar
     */
    virtual void setDriveProfile(const int32_t &_profileID, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setDriveProfileAsync(const int32_t &_profileID, SetDriveProfileAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used to delete a driver profile.
     * author: Viraj Barwatkar
     */
    virtual void deleteDriveProfile(const int32_t &_profileID, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> deleteDriveProfileAsync(const int32_t &_profileID, DeleteDriveProfileAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used to query Device ID Profile info of remote device.
     * author: Poornima Hiremath
     */
    virtual void getDeviceIDProfileInfo(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_vendorId, std::string &_vendorIdSource, std::string &_productId, std::string &_versionnum, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getDeviceIDProfileInfoAsync(const std::string &_inAddress, GetDeviceIDProfileInfoAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used to consider handling done upon receiving master reset
     *   condition.
                           Though no IN params - the project specific
     *   handling for master/factory reset will 
    		       be based on config flag.
     * author: Poornima Hiremath
     */
    virtual void masterReset(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> masterResetAsync(MasterResetAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<BluetoothStatusEvent, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> bluetoothStatus_;
    CommonAPI::DBus::DBusEvent<OnOffStateEvent, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::eOnOffState, CommonAPI::EmptyDeployment>> onOffState_;
    CommonAPI::DBus::DBusEvent<LocalDevAddrEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> localDevAddr_;
    CommonAPI::DBus::DBusEvent<PasskeyEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> passkey_;
    CommonAPI::DBus::DBusEvent<SignalQualityEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>> signalQuality_;
    CommonAPI::DBus::DBusEvent<VrModeEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> vrMode_;
    CommonAPI::DBus::DBusEvent<NetworkOperatorEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> networkOperator_;
    CommonAPI::DBus::DBusEvent<SupportedFeaturesEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList, ::com::harman::connectivity::btTypedefs_::stringListDeployment_t>> supportedFeatures_;
    CommonAPI::DBus::DBusEvent<DeviceSearchListEvent, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::deviceSearchEntryList, ::com::harman::connectivity::btTypedefs_::deviceSearchEntryListDeployment_t>> deviceSearchList_;
    CommonAPI::DBus::DBusEvent<StandardBondingRequestEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> standardBondingRequest_;
    CommonAPI::DBus::DBusEvent<StandardBondingRejectedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> standardBondingRejected_;
    CommonAPI::DBus::DBusEvent<SecureSimpleBondingRequestEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> secureSimpleBondingRequest_;
    CommonAPI::DBus::DBusEvent<ServiceConnectionRequestEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> serviceConnectionRequest_;
    CommonAPI::DBus::DBusEvent<ServiceConnectedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> serviceConnected_;
    CommonAPI::DBus::DBusEvent<ServiceDisconnectedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> serviceDisconnected_;
    CommonAPI::DBus::DBusEvent<DeviceDisconnectedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> deviceDisconnected_;
    CommonAPI::DBus::DBusEvent<ServiceConnectionErrorEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> serviceConnectionError_;
    CommonAPI::DBus::DBusEvent<BondedDeviceProfileListChangedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::profileList, ::com::harman::connectivity::btTypedefs_::profileListDeployment_t>> bondedDeviceProfileListChanged_;
    CommonAPI::DBus::DBusEvent<BondedDeviceServiceListChangedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::serviceList, ::com::harman::connectivity::btTypedefs_::serviceListDeployment_t>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> bondedDeviceServiceListChanged_;
    CommonAPI::DBus::DBusEvent<DeviceDeletedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::eReasonDeviceDeleted, CommonAPI::EmptyDeployment>> deviceDeleted_;
    CommonAPI::DBus::DBusEvent<NetworkIfUpEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> networkIfUp_;
    CommonAPI::DBus::DBusEvent<NetworkIfDownEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> networkIfDown_;
    CommonAPI::DBus::DBusEvent<BondingStatusEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> bondingStatus_;
    CommonAPI::DBus::DBusEvent<IncomingCallInfoEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> incomingCallInfo_;
    CommonAPI::DBus::DBusEvent<HandsFreeModeEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> handsFreeMode_;
    CommonAPI::DBus::DBusEvent<AudioStatusEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> audioStatus_;
    CommonAPI::DBus::DBusEvent<BatteryChargeEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>> batteryCharge_;
    CommonAPI::DBus::DBusEvent<NetworkOperatorChangedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> networkOperatorChanged_;
    CommonAPI::DBus::DBusEvent<NetworkRegistrationStateEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> networkRegistrationState_;
    CommonAPI::DBus::DBusEvent<CallStatusEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::callstateInfoList, ::com::harman::connectivity::btTypedefs_::callstateInfoListDeployment_t>> callStatus_;
    CommonAPI::DBus::DBusEvent<CallListUpdateEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> callListUpdate_;
    CommonAPI::DBus::DBusEvent<ReconnectTimeoutExpiredEvent> reconnectTimeoutExpired_;
    CommonAPI::DBus::DBusEvent<DeviceSearchCompleteEvent> deviceSearchComplete_;
    CommonAPI::DBus::DBusEvent<SiriStatusEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> siriStatus_;
    CommonAPI::DBus::DBusEvent<SubscriberNumberEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> subscriberNumber_;
    CommonAPI::DBus::DBusEvent<ServiceConnectingEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> serviceConnecting_;
    CommonAPI::DBus::DBusEvent<AutoConnectStateEvent, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::eAutoConnState, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>> autoConnectState_;
    CommonAPI::DBus::DBusEvent<StackResetInProgressEvent> stackResetInProgress_;
    CommonAPI::DBus::DBusEvent<StackResetDoneEvent> stackResetDone_;
    CommonAPI::DBus::DBusEvent<DeviceNameChangedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> deviceNameChanged_;
    CommonAPI::DBus::DBusEvent<DeviceIDInfoEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> deviceIDInfo_;

};

} // namespace connectivity
} // namespace harman
} // namespace com
} // namespace v4

#endif // V4_COM_HARMAN_CONNECTIVITY_Bt_Service_DBUS_PROXY_HPP_

