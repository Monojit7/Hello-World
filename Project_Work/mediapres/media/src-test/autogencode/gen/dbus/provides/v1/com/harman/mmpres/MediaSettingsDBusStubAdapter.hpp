/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_HARMAN_MMPRES_Media_Settings_DBUS_STUB_ADAPTER_HPP_
#define V1_COM_HARMAN_MMPRES_Media_Settings_DBUS_STUB_ADAPTER_HPP_

#include <v1/com/harman/mmpres/MediaSettingsStub.hpp>
#include "v1/com/harman/mmpres/MediaSettingsDBusDeployment.hpp"        
#include <v2/com/harman/mmpres/MMPresTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

typedef CommonAPI::DBus::DBusStubAdapterHelper<MediaSettingsStub> MediaSettingsDBusStubAdapterHelper;

class MediaSettingsDBusStubAdapterInternal
    : public virtual MediaSettingsStubAdapter,
      public MediaSettingsDBusStubAdapterHelper
{
public:
    MediaSettingsDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~MediaSettingsDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return MediaSettings::getInterface();
    }

    void fireSubtitleStatusAttributeChanged(const ::v2::com::harman::mmpres::MMPresTypes::eSubtitleStatus& value);
    void fireIsFullScreenAttributeChanged(const bool& value);
    /**
     * description: Indicates the audio channels for the current track
     */
    void fireAudioChannelAttributeChanged(const ::v2::com::harman::mmpres::MMPresTypes::eAudioChannelStatus& value);
    /**
     * description: this will provide information as to whether the Apple authentication ship is
     *   operational or not
     */
    void fireAppleAuthenticationChipstatusAttributeChanged(const bool& value);



    const MediaSettingsDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaSettingsStub,
        CommonAPI::Version
        > getMediaSettingsInterfaceVersionStubDispatcher;

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaSettingsStub,
        ::v2::com::harman::mmpres::MMPresTypes::eSubtitleStatus                
        > getSubtitleStatusAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaSettingsStub,
        bool                
        > getIsFullScreenAttributeStubDispatcher;
/**
 * description: Indicates the audio channels for the current track
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaSettingsStub,
        ::v2::com::harman::mmpres::MMPresTypes::eAudioChannelStatus                
        > getAudioChannelAttributeStubDispatcher;
/**
 * description: this will provide information as to whether the Apple authentication ship is
 *   operational or not
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaSettingsStub,
        bool                
        > getAppleAuthenticationChipstatusAttributeStubDispatcher;


/**
 * description: reset all the Media related settings to the default. 
		e: error code.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaSettingsStub,
    std::tuple<>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > masterMediaResetStubDispatcher;
/**
 * description: removes the database file of specified device on device ejection.
 * param: slotId: the specified slot id
        returns:	  eCallResult:	Result of the API
 *   call
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaSettingsStub,
    std::tuple<uint8_t>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > resetMediaIndexStubDispatcher;
/**
 * description: Updates the index of a device
 * param: slotId: the specified slot id
        returns:	  e:	Result of the API call
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaSettingsStub,
    std::tuple<uint8_t>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::eMediaError>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > updateIndexStubDispatcher;
/**
 * description: Set Audio channel for playback
 * param: audioChannel - of type eAudioChannelStatus
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaSettingsStub,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::eAudioChannelStatus>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > setAudioChannelStubDispatcher;
/**
 * description: Set Subtitle ON or OFF
 * param: dispSubtitle - eSubtitleStatus:ON is to enable Subtitle, eSubtitleStatus:OFF is
 *   to disable subtitle
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaSettingsStub,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::eSubtitleStatus>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > setSubtitleStubDispatcher;
/**
 * description: Set the display window coordinates of video playback
 * param: isFullscreen True is to enable fullscreen, false is to disable fullscreen and
 *   manually assign by screeenDimension
                screeenDimension  Screen
 *   coordinates
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaSettingsStub,
    std::tuple<bool, ::v2::com::harman::mmpres::MMPresTypes::tScreen>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::eMediaError>,
    std::tuple<CommonAPI::EmptyDeployment, ::v2::com::harman::mmpres::MMPresTypes_::tScreenDeployment_t>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > setDisplayWindowStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    MediaSettingsDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class MediaSettingsDBusStubAdapter
    : public MediaSettingsDBusStubAdapterInternal,
      public std::enable_shared_from_this<MediaSettingsDBusStubAdapter> {
public:
    MediaSettingsDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          MediaSettingsDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_MMPRES_Media_Settings_DBUS_STUB_ADAPTER_HPP_
