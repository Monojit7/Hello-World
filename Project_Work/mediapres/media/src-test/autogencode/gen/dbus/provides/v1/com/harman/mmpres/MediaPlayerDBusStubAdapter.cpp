/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/com/harman/mmpres/MediaPlayer.hpp>
#include <v1/com/harman/mmpres/MediaPlayerDBusStubAdapter.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createMediaPlayerDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<MediaPlayerDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerMediaPlayerDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	MediaPlayer::getInterface(), &createMediaPlayerDBusStubAdapter);
}

MediaPlayerDBusStubAdapterInternal::~MediaPlayerDBusStubAdapterInternal() {
    deactivateManagedInstances();
    MediaPlayerDBusStubAdapterHelper::deinit();
}

void MediaPlayerDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* MediaPlayerDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"getCurrentPlayTimeAttribute\">\n"
            "<arg name=\"value\" type=\"t\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onCurrentPlayTimeAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"t\" />\n"
        "</signal>\n"
        "<method name=\"getTotalPlayDurationAttribute\">\n"
            "<arg name=\"value\" type=\"t\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onTotalPlayDurationAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"t\" />\n"
        "</signal>\n"
        "<method name=\"getTrackStateAttribute\">\n"
            "<arg name=\"value\" type=\"(tt)\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onTrackStateAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"(tt)\" />\n"
        "</signal>\n"
        "<method name=\"getNowPlayingDataAttribute\">\n"
            "<arg name=\"value\" type=\"(sssssssssstbtttbi)\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onNowPlayingDataAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"(sssssssssstbtttbi)\" />\n"
        "</signal>\n"
        "<method name=\"getPlayStateAttribute\">\n"
            "<arg name=\"value\" type=\"i\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onPlayStateAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
        "</signal>\n"
        "<method name=\"getSpeedAttribute\">\n"
            "<arg name=\"value\" type=\"i\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onSpeedAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
        "</signal>\n"
        "<method name=\"getRepeatModeAttribute\">\n"
            "<arg name=\"value\" type=\"i\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onRepeatModeAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
        "</signal>\n"
        "<method name=\"getShuffleModeAttribute\">\n"
            "<arg name=\"value\" type=\"i\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onShuffleModeAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
        "</signal>\n"
        "<method name=\"getNowPlayingArtworkStatusAttribute\">\n"
            "<arg name=\"value\" type=\"i\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onNowPlayingArtworkStatusAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
        "</signal>\n"
        "<method name=\"getPlaybackPreviewAttribute\">\n"
            "<arg name=\"value\" type=\"a(tsbbiia{it}a{is}i)\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onPlaybackPreviewAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"a(tsbbiia{it}a{is}i)\" />\n"
        "</signal>\n"
        "<method name=\"getVideoPlayStatusAttribute\">\n"
            "<arg name=\"value\" type=\"b\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onVideoPlayStatusAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"b\" />\n"
        "</signal>\n"
        "<method name=\"getRemotePlayerCapabilityAttribute\">\n"
            "<arg name=\"value\" type=\"(yu)\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onRemotePlayerCapabilityAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"(yu)\" />\n"
        "</signal>\n"
        "<method name=\"getMediaErrorAttribute\">\n"
            "<arg name=\"value\" type=\"a{yi}\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onMediaErrorAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"a{yi}\" />\n"
        "</signal>\n"
        "<method name=\"getSyncStatusAttribute\">\n"
            "<arg name=\"value\" type=\"a{yi}\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onSyncStatusAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"a{yi}\" />\n"
        "</signal>\n"
        "<method name=\"getMRemoteCDDiscStatusAttribute\">\n"
            "<arg name=\"value\" type=\"i\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onMRemoteCDDiscStatusAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
        "</signal>\n"
        "<method name=\"getMRemoteCDErrorStatusAttribute\">\n"
            "<arg name=\"value\" type=\"(ii)\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onMRemoteCDErrorStatusAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"(ii)\" />\n"
        "</signal>\n"
        /**
         * description: Method to initiate the playback of all items of a specific object type in the
         *   device
         */
        "<method name=\"playAll\">\n"
            "<arg name=\"_slotId\" type=\"y\" direction=\"in\" />\n"
            "<arg name=\"_objectType\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_result\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"next\">\n"
            "<arg name=\"_step\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_result\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"previous\">\n"
            "<arg name=\"_step\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_result\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"pause\">\n"
            "<arg name=\"_result\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"resume\">\n"
            "<arg name=\"_result\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"seekToTime\">\n"
            "<arg name=\"_timePosition\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_result\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"fastForward\">\n"
            "<arg name=\"_result\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"fastReverse\">\n"
            "<arg name=\"_result\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"setRepeat\">\n"
            "<arg name=\"_mode\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_result\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"setShuffle\">\n"
            "<arg name=\"_mode\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_result\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"getNowPlayingAlbumArtInformation\">\n"
            "<arg name=\"_albumArtInfo\" type=\"(ya(yit(ttts)))\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"getNowPlayingAlbumArtPath\">\n"
            "<arg name=\"_imageNumber\" type=\"y\" direction=\"in\" />\n"
            "<arg name=\"_path\" type=\"s\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"getNowPlayingAlbumArtData\">\n"
            "<arg name=\"_imageNumber\" type=\"y\" direction=\"in\" />\n"
            "<arg name=\"_albumArtData\" type=\"ay\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"getAlbumArtInformationForTrack\">\n"
            "<arg name=\"_trackId\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_albumArtInfo\" type=\"(ya(yit(ttts)))\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"getAlbumArtPathForTrack\">\n"
            "<arg name=\"_trackId\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_imageNumber\" type=\"y\" direction=\"in\" />\n"
            "<arg name=\"_path\" type=\"s\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"getAlbumArtDataForTrack\">\n"
            "<arg name=\"_trackId\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_imageNumber\" type=\"y\" direction=\"in\" />\n"
            "<arg name=\"_albumArtData\" type=\"ay\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"setSpeed\">\n"
            "<arg name=\"_slotId\" type=\"y\" direction=\"in\" />\n"
            "<arg name=\"_type\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_speed\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_result\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"getSpeed\">\n"
            "<arg name=\"_slotId\" type=\"y\" direction=\"in\" />\n"
            "<arg name=\"_type\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_speed\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        CommonAPI::Version
        > MediaPlayerDBusStubAdapterInternal::getMediaPlayerInterfaceVersionStubDispatcher(&MediaPlayerStub::getInterfaceVersion, "uu");

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        uint64_t
        > MediaPlayerDBusStubAdapterInternal::getCurrentPlayTimeAttributeStubDispatcher(
            &::v1::com::harman::mmpres::MediaPlayerStub::getCurrentPlayTimeAttribute
            , "t"
            );
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        uint64_t
        > MediaPlayerDBusStubAdapterInternal::getTotalPlayDurationAttributeStubDispatcher(
            &::v1::com::harman::mmpres::MediaPlayerStub::getTotalPlayDurationAttribute
            , "t"
            );
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        ::v2::com::harman::mmpres::MMPresTypes::tTrackState,
        ::v2::com::harman::mmpres::MMPresTypes_::tTrackStateDeployment_t
        > MediaPlayerDBusStubAdapterInternal::getTrackStateAttributeStubDispatcher(
            &::v1::com::harman::mmpres::MediaPlayerStub::getTrackStateAttribute
            , "(tt)"
            );
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        ::v2::com::harman::mmpres::MMPresTypes::tNowPlayingInfo,
        ::v2::com::harman::mmpres::MMPresTypes_::tNowPlayingInfoDeployment_t
        > MediaPlayerDBusStubAdapterInternal::getNowPlayingDataAttributeStubDispatcher(
            &::v1::com::harman::mmpres::MediaPlayerStub::getNowPlayingDataAttribute
            , "(sssssssssstbtttbi)"
            );
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        ::v2::com::harman::mmpres::MMPresTypes::ePlayState
        > MediaPlayerDBusStubAdapterInternal::getPlayStateAttributeStubDispatcher(
            &::v1::com::harman::mmpres::MediaPlayerStub::getPlayStateAttribute
            , "i"
            );
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        ::v2::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed
        > MediaPlayerDBusStubAdapterInternal::getSpeedAttributeStubDispatcher(
            &::v1::com::harman::mmpres::MediaPlayerStub::getSpeedAttribute
            , "i"
            );
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        ::v2::com::harman::mmpres::MMPresTypes::eRepeatMode
        > MediaPlayerDBusStubAdapterInternal::getRepeatModeAttributeStubDispatcher(
            &::v1::com::harman::mmpres::MediaPlayerStub::getRepeatModeAttribute
            , "i"
            );
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        ::v2::com::harman::mmpres::MMPresTypes::eShuffleMode
        > MediaPlayerDBusStubAdapterInternal::getShuffleModeAttributeStubDispatcher(
            &::v1::com::harman::mmpres::MediaPlayerStub::getShuffleModeAttribute
            , "i"
            );
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        ::v2::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus
        > MediaPlayerDBusStubAdapterInternal::getNowPlayingArtworkStatusAttributeStubDispatcher(
            &::v1::com::harman::mmpres::MediaPlayerStub::getNowPlayingArtworkStatusAttribute
            , "i"
            );
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        ::v2::com::harman::mmpres::MMPresTypes::MetadataItemList,
        ::v2::com::harman::mmpres::MMPresTypes_::MetadataItemListDeployment_t
        > MediaPlayerDBusStubAdapterInternal::getPlaybackPreviewAttributeStubDispatcher(
            &::v1::com::harman::mmpres::MediaPlayerStub::getPlaybackPreviewAttribute
            , "a(tsbbiia{it}a{is}i)"
            );
/**
 * description: Indicates playback video only,true: start video play; false: stop
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        bool
        > MediaPlayerDBusStubAdapterInternal::getVideoPlayStatusAttributeStubDispatcher(
            &::v1::com::harman::mmpres::MediaPlayerStub::getVideoPlayStatusAttribute
            , "b"
            );
/**
 * description: Indicates current BT Player capability
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        ::v2::com::harman::mmpres::MMPresTypes::tRemotePlayerCapability,
        ::v2::com::harman::mmpres::MMPresTypes_::tRemotePlayerCapabilityDeployment_t
        > MediaPlayerDBusStubAdapterInternal::getRemotePlayerCapabilityAttributeStubDispatcher(
            &::v1::com::harman::mmpres::MediaPlayerStub::getRemotePlayerCapabilityAttribute
            , "(yu)"
            );
/**
 * description: Indicates the error encountered by Media
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        ::v2::com::harman::mmpres::MMPresTypes::MediaErrorMap,
        ::v2::com::harman::mmpres::MMPresTypes_::MediaErrorMapDeployment_t
        > MediaPlayerDBusStubAdapterInternal::getMediaErrorAttributeStubDispatcher(
            &::v1::com::harman::mmpres::MediaPlayerStub::getMediaErrorAttribute
            , "a{yi}"
            );
/**
 * description: Provides the sync level information for the device
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        ::v2::com::harman::mmpres::MMPresTypes::SyncMap,
        ::v2::com::harman::mmpres::MMPresTypes_::SyncMapDeployment_t
        > MediaPlayerDBusStubAdapterInternal::getSyncStatusAttributeStubDispatcher(
            &::v1::com::harman::mmpres::MediaPlayerStub::getSyncStatusAttribute
            , "a{yi}"
            );
/**
 * description: Provides RemoteCD disc status
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        ::v2::com::harman::mmpres::MMPresTypes::eRemoteCDDiscStatus
        > MediaPlayerDBusStubAdapterInternal::getMRemoteCDDiscStatusAttributeStubDispatcher(
            &::v1::com::harman::mmpres::MediaPlayerStub::getMRemoteCDDiscStatusAttribute
            , "i"
            );
/**
 * description: Provides RemoteCD disc status
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        ::v2::com::harman::mmpres::MMPresTypes::RemoteCDErrorStatus,
        ::v2::com::harman::mmpres::MMPresTypes_::RemoteCDErrorStatusDeployment_t
        > MediaPlayerDBusStubAdapterInternal::getMRemoteCDErrorStatusAttributeStubDispatcher(
            &::v1::com::harman::mmpres::MediaPlayerStub::getMRemoteCDErrorStatusAttribute
            , "(ii)"
            );



/**
 * description: Method to initiate the playback of all items of a specific object type in the
 *   device
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<uint8_t, ::v2::com::harman::mmpres::MMPresTypes::eMetadataType>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MediaPlayerDBusStubAdapterInternal::playAllStubDispatcher(
    &MediaPlayerStub::playAll, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<uint64_t>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MediaPlayerDBusStubAdapterInternal::nextStubDispatcher(
    &MediaPlayerStub::next, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<uint64_t>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MediaPlayerDBusStubAdapterInternal::previousStubDispatcher(
    &MediaPlayerStub::previous, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MediaPlayerDBusStubAdapterInternal::pauseStubDispatcher(
    &MediaPlayerStub::pause, "i",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MediaPlayerDBusStubAdapterInternal::resumeStubDispatcher(
    &MediaPlayerStub::resume, "i",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<uint64_t>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MediaPlayerDBusStubAdapterInternal::seekToTimeStubDispatcher(
    &MediaPlayerStub::seekToTime, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MediaPlayerDBusStubAdapterInternal::fastForwardStubDispatcher(
    &MediaPlayerStub::fastForward, "i",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MediaPlayerDBusStubAdapterInternal::fastReverseStubDispatcher(
    &MediaPlayerStub::fastReverse, "i",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::eRepeatMode>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MediaPlayerDBusStubAdapterInternal::setRepeatStubDispatcher(
    &MediaPlayerStub::setRepeat, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::eShuffleMode>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MediaPlayerDBusStubAdapterInternal::setShuffleStubDispatcher(
    &MediaPlayerStub::setShuffle, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::tAlbumArtInformation>,
    std::tuple<>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes_::tAlbumArtInformationDeployment_t>
    
    > MediaPlayerDBusStubAdapterInternal::getNowPlayingAlbumArtInformationStubDispatcher(
    &MediaPlayerStub::getNowPlayingAlbumArtInformation, "(ya(yit(ttts)))",
					std::make_tuple(),
                	std::make_tuple(static_cast<::v2::com::harman::mmpres::MMPresTypes_::tAlbumArtInformationDeployment_t*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<uint8_t>,
    std::tuple<std::string>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::StringDeployment>
    
    > MediaPlayerDBusStubAdapterInternal::getNowPlayingAlbumArtPathStubDispatcher(
    &MediaPlayerStub::getNowPlayingAlbumArtPath, "s",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<uint8_t>,
    std::tuple<std::vector<uint8_t>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > MediaPlayerDBusStubAdapterInternal::getNowPlayingAlbumArtDataStubDispatcher(
    &MediaPlayerStub::getNowPlayingAlbumArtData, "ay",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<uint64_t>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::tAlbumArtInformation>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes_::tAlbumArtInformationDeployment_t>
    
    > MediaPlayerDBusStubAdapterInternal::getAlbumArtInformationForTrackStubDispatcher(
    &MediaPlayerStub::getAlbumArtInformationForTrack, "(ya(yit(ttts)))",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<::v2::com::harman::mmpres::MMPresTypes_::tAlbumArtInformationDeployment_t*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<uint64_t, uint8_t>,
    std::tuple<std::string>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::StringDeployment>
    
    > MediaPlayerDBusStubAdapterInternal::getAlbumArtPathForTrackStubDispatcher(
    &MediaPlayerStub::getAlbumArtPathForTrack, "s",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<uint64_t, uint8_t>,
    std::tuple<std::vector<uint8_t>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > MediaPlayerDBusStubAdapterInternal::getAlbumArtDataForTrackStubDispatcher(
    &MediaPlayerStub::getAlbumArtDataForTrack, "ay",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<uint8_t, ::v2::com::harman::mmpres::MMPresTypes::eMetadataType, ::v2::com::harman::mmpres::MMPresTypes::ePlaybackSpeed>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MediaPlayerDBusStubAdapterInternal::setSpeedStubDispatcher(
    &MediaPlayerStub::setSpeed, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<uint8_t, ::v2::com::harman::mmpres::MMPresTypes::eMetadataType>,
    std::tuple<::v2::com::harman::mmpres::MMPresTypes::ePlaybackSpeed>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MediaPlayerDBusStubAdapterInternal::getSpeedStubDispatcher(
    &MediaPlayerStub::getSpeed, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));


void MediaPlayerDBusStubAdapterInternal::fireCurrentPlayTimeAttributeChanged(const uint64_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    uint64_t
    >>
        ::sendSignal(
            *this,
            "onCurrentPlayTimeAttributeChanged",
            "t",
            value
    
    );
}
void MediaPlayerDBusStubAdapterInternal::fireTotalPlayDurationAttributeChanged(const uint64_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    uint64_t
    >>
        ::sendSignal(
            *this,
            "onTotalPlayDurationAttributeChanged",
            "t",
            value
    
    );
}
void MediaPlayerDBusStubAdapterInternal::fireTrackStateAttributeChanged(const ::v2::com::harman::mmpres::MMPresTypes::tTrackState& value) {
    CommonAPI::Deployable<::v2::com::harman::mmpres::MMPresTypes::tTrackState, ::v2::com::harman::mmpres::MMPresTypes_::tTrackStateDeployment_t> deployedValue(value, static_cast<::v2::com::harman::mmpres::MMPresTypes_::tTrackStateDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v2::com::harman::mmpres::MMPresTypes::tTrackState,
        ::v2::com::harman::mmpres::MMPresTypes_::tTrackStateDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onTrackStateAttributeChanged",
            "(tt)",
            deployedValue
    
    );
}
void MediaPlayerDBusStubAdapterInternal::fireNowPlayingDataAttributeChanged(const ::v2::com::harman::mmpres::MMPresTypes::tNowPlayingInfo& value) {
    CommonAPI::Deployable<::v2::com::harman::mmpres::MMPresTypes::tNowPlayingInfo, ::v2::com::harman::mmpres::MMPresTypes_::tNowPlayingInfoDeployment_t> deployedValue(value, static_cast<::v2::com::harman::mmpres::MMPresTypes_::tNowPlayingInfoDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v2::com::harman::mmpres::MMPresTypes::tNowPlayingInfo,
        ::v2::com::harman::mmpres::MMPresTypes_::tNowPlayingInfoDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onNowPlayingDataAttributeChanged",
            "(sssssssssstbtttbi)",
            deployedValue
    
    );
}
void MediaPlayerDBusStubAdapterInternal::firePlayStateAttributeChanged(const ::v2::com::harman::mmpres::MMPresTypes::ePlayState& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v2::com::harman::mmpres::MMPresTypes::ePlayState
    >>
        ::sendSignal(
            *this,
            "onPlayStateAttributeChanged",
            "i",
            value
    
    );
}
void MediaPlayerDBusStubAdapterInternal::fireSpeedAttributeChanged(const ::v2::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v2::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed
    >>
        ::sendSignal(
            *this,
            "onSpeedAttributeChanged",
            "i",
            value
    
    );
}
void MediaPlayerDBusStubAdapterInternal::fireRepeatModeAttributeChanged(const ::v2::com::harman::mmpres::MMPresTypes::eRepeatMode& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v2::com::harman::mmpres::MMPresTypes::eRepeatMode
    >>
        ::sendSignal(
            *this,
            "onRepeatModeAttributeChanged",
            "i",
            value
    
    );
}
void MediaPlayerDBusStubAdapterInternal::fireShuffleModeAttributeChanged(const ::v2::com::harman::mmpres::MMPresTypes::eShuffleMode& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v2::com::harman::mmpres::MMPresTypes::eShuffleMode
    >>
        ::sendSignal(
            *this,
            "onShuffleModeAttributeChanged",
            "i",
            value
    
    );
}
void MediaPlayerDBusStubAdapterInternal::fireNowPlayingArtworkStatusAttributeChanged(const ::v2::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v2::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus
    >>
        ::sendSignal(
            *this,
            "onNowPlayingArtworkStatusAttributeChanged",
            "i",
            value
    
    );
}
void MediaPlayerDBusStubAdapterInternal::firePlaybackPreviewAttributeChanged(const ::v2::com::harman::mmpres::MMPresTypes::MetadataItemList& value) {
    CommonAPI::Deployable<::v2::com::harman::mmpres::MMPresTypes::MetadataItemList, ::v2::com::harman::mmpres::MMPresTypes_::MetadataItemListDeployment_t> deployedValue(value, static_cast<::v2::com::harman::mmpres::MMPresTypes_::MetadataItemListDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v2::com::harman::mmpres::MMPresTypes::MetadataItemList,
        ::v2::com::harman::mmpres::MMPresTypes_::MetadataItemListDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onPlaybackPreviewAttributeChanged",
            "a(tsbbiia{it}a{is}i)",
            deployedValue
    
    );
}
/**
 * description: Indicates playback video only,true: start video play; false: stop
 */
void MediaPlayerDBusStubAdapterInternal::fireVideoPlayStatusAttributeChanged(const bool& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    bool
    >>
        ::sendSignal(
            *this,
            "onVideoPlayStatusAttributeChanged",
            "b",
            value
    
    );
}
/**
 * description: Indicates current BT Player capability
 */
void MediaPlayerDBusStubAdapterInternal::fireRemotePlayerCapabilityAttributeChanged(const ::v2::com::harman::mmpres::MMPresTypes::tRemotePlayerCapability& value) {
    CommonAPI::Deployable<::v2::com::harman::mmpres::MMPresTypes::tRemotePlayerCapability, ::v2::com::harman::mmpres::MMPresTypes_::tRemotePlayerCapabilityDeployment_t> deployedValue(value, static_cast<::v2::com::harman::mmpres::MMPresTypes_::tRemotePlayerCapabilityDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v2::com::harman::mmpres::MMPresTypes::tRemotePlayerCapability,
        ::v2::com::harman::mmpres::MMPresTypes_::tRemotePlayerCapabilityDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onRemotePlayerCapabilityAttributeChanged",
            "(yu)",
            deployedValue
    
    );
}
/**
 * description: Indicates the error encountered by Media
 */
void MediaPlayerDBusStubAdapterInternal::fireMediaErrorAttributeChanged(const ::v2::com::harman::mmpres::MMPresTypes::MediaErrorMap& value) {
    CommonAPI::Deployable<::v2::com::harman::mmpres::MMPresTypes::MediaErrorMap, ::v2::com::harman::mmpres::MMPresTypes_::MediaErrorMapDeployment_t> deployedValue(value, static_cast<::v2::com::harman::mmpres::MMPresTypes_::MediaErrorMapDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v2::com::harman::mmpres::MMPresTypes::MediaErrorMap,
        ::v2::com::harman::mmpres::MMPresTypes_::MediaErrorMapDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onMediaErrorAttributeChanged",
            "a{yi}",
            deployedValue
    
    );
}
/**
 * description: Provides the sync level information for the device
 */
void MediaPlayerDBusStubAdapterInternal::fireSyncStatusAttributeChanged(const ::v2::com::harman::mmpres::MMPresTypes::SyncMap& value) {
    CommonAPI::Deployable<::v2::com::harman::mmpres::MMPresTypes::SyncMap, ::v2::com::harman::mmpres::MMPresTypes_::SyncMapDeployment_t> deployedValue(value, static_cast<::v2::com::harman::mmpres::MMPresTypes_::SyncMapDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v2::com::harman::mmpres::MMPresTypes::SyncMap,
        ::v2::com::harman::mmpres::MMPresTypes_::SyncMapDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onSyncStatusAttributeChanged",
            "a{yi}",
            deployedValue
    
    );
}
/**
 * description: Provides RemoteCD disc status
 */
void MediaPlayerDBusStubAdapterInternal::fireMRemoteCDDiscStatusAttributeChanged(const ::v2::com::harman::mmpres::MMPresTypes::eRemoteCDDiscStatus& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v2::com::harman::mmpres::MMPresTypes::eRemoteCDDiscStatus
    >>
        ::sendSignal(
            *this,
            "onMRemoteCDDiscStatusAttributeChanged",
            "i",
            value
    
    );
}
/**
 * description: Provides RemoteCD disc status
 */
void MediaPlayerDBusStubAdapterInternal::fireMRemoteCDErrorStatusAttributeChanged(const ::v2::com::harman::mmpres::MMPresTypes::RemoteCDErrorStatus& value) {
    CommonAPI::Deployable<::v2::com::harman::mmpres::MMPresTypes::RemoteCDErrorStatus, ::v2::com::harman::mmpres::MMPresTypes_::RemoteCDErrorStatusDeployment_t> deployedValue(value, static_cast<::v2::com::harman::mmpres::MMPresTypes_::RemoteCDErrorStatusDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v2::com::harman::mmpres::MMPresTypes::RemoteCDErrorStatus,
        ::v2::com::harman::mmpres::MMPresTypes_::RemoteCDErrorStatusDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onMRemoteCDErrorStatusAttributeChanged",
            "(ii)",
            deployedValue
    
    );
}



const MediaPlayerDBusStubAdapterHelper::StubDispatcherTable& MediaPlayerDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& MediaPlayerDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

MediaPlayerDBusStubAdapterInternal::MediaPlayerDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      MediaPlayerDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<MediaPlayerStub>(_stub), false),
      stubDispatcherTable_({
            { { "getCurrentPlayTimeAttribute", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getCurrentPlayTimeAttributeStubDispatcher },
            { { "getTotalPlayDurationAttribute", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getTotalPlayDurationAttributeStubDispatcher },
            { { "getTrackStateAttribute", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getTrackStateAttributeStubDispatcher },
            { { "getNowPlayingDataAttribute", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getNowPlayingDataAttributeStubDispatcher },
            { { "getPlayStateAttribute", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getPlayStateAttributeStubDispatcher },
            { { "getSpeedAttribute", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getSpeedAttributeStubDispatcher },
            { { "getRepeatModeAttribute", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getRepeatModeAttributeStubDispatcher },
            { { "getShuffleModeAttribute", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getShuffleModeAttributeStubDispatcher },
            { { "getNowPlayingArtworkStatusAttribute", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getNowPlayingArtworkStatusAttributeStubDispatcher },
            { { "getPlaybackPreviewAttribute", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getPlaybackPreviewAttributeStubDispatcher },
            /**
             * description: Indicates playback video only,true: start video play; false: stop
             */
            { { "getVideoPlayStatusAttribute", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getVideoPlayStatusAttributeStubDispatcher },
            /**
             * description: Indicates current BT Player capability
             */
            { { "getRemotePlayerCapabilityAttribute", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getRemotePlayerCapabilityAttributeStubDispatcher },
            /**
             * description: Indicates the error encountered by Media
             */
            { { "getMediaErrorAttribute", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getMediaErrorAttributeStubDispatcher },
            /**
             * description: Provides the sync level information for the device
             */
            { { "getSyncStatusAttribute", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getSyncStatusAttributeStubDispatcher },
            /**
             * description: Provides RemoteCD disc status
             */
            { { "getMRemoteCDDiscStatusAttribute", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getMRemoteCDDiscStatusAttributeStubDispatcher },
            /**
             * description: Provides RemoteCD disc status
             */
            { { "getMRemoteCDErrorStatusAttribute", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getMRemoteCDErrorStatusAttributeStubDispatcher }
            ,
            /**
             * description: Method to initiate the playback of all items of a specific object type in the
             *   device
             */
            { { "playAll", "yi" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::playAllStubDispatcher },
            { { "next", "t" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::nextStubDispatcher },
            { { "previous", "t" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::previousStubDispatcher },
            { { "pause", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::pauseStubDispatcher },
            { { "resume", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::resumeStubDispatcher },
            { { "seekToTime", "t" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::seekToTimeStubDispatcher },
            { { "fastForward", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::fastForwardStubDispatcher },
            { { "fastReverse", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::fastReverseStubDispatcher },
            { { "setRepeat", "i" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::setRepeatStubDispatcher },
            { { "setShuffle", "i" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::setShuffleStubDispatcher },
            { { "getNowPlayingAlbumArtInformation", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getNowPlayingAlbumArtInformationStubDispatcher },
            { { "getNowPlayingAlbumArtPath", "y" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getNowPlayingAlbumArtPathStubDispatcher },
            { { "getNowPlayingAlbumArtData", "y" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getNowPlayingAlbumArtDataStubDispatcher },
            { { "getAlbumArtInformationForTrack", "t" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getAlbumArtInformationForTrackStubDispatcher },
            { { "getAlbumArtPathForTrack", "ty" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getAlbumArtPathForTrackStubDispatcher },
            { { "getAlbumArtDataForTrack", "ty" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getAlbumArtDataForTrackStubDispatcher },
            { { "setSpeed", "yii" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::setSpeedStubDispatcher },
            { { "getSpeed", "yi" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getSpeedStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &com::harman::mmpres::MediaPlayerDBusStubAdapterInternal::getMediaPlayerInterfaceVersionStubDispatcher });
}

bool MediaPlayerDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1
