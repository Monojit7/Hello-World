/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_HARMAN_MMPRES_Media_Player_PROXY_BASE_HPP_
#define V1_COM_HARMAN_MMPRES_Media_Player_PROXY_BASE_HPP_

#include <v1/com/harman/mmpres/MediaPlayer.hpp>


#include <v3/com/harman/mmpres/MMPresTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

class MediaPlayerProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<uint64_t> CurrentPlayTimeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<uint64_t> TotalPlayDurationAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::mmpres::MMPresTypes::tTrackState> TrackStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::mmpres::MMPresTypes::tNowPlayingInfo> NowPlayingDataAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::mmpres::MMPresTypes::ePlayState> PlayStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed> SpeedAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::mmpres::MMPresTypes::eRepeatMode> RepeatModeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::mmpres::MMPresTypes::eShuffleMode> ShuffleModeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::mmpres::MMPresTypes::tPlaybackSpeed> PlaybackSpeedAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::mmpres::MMPresTypes::PlaySessionStateMap> PlaysessionStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> ActiveDeviceBTLinkLossAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus> NowPlayingArtworkStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::mmpres::MMPresTypes::MetadataItemList> PlaybackPreviewAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> VideoPlayStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::mmpres::MMPresTypes::tRemotePlayerCapability> RemotePlayerCapabilityAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::mmpres::MMPresTypes::MediaErrorMap> MediaErrorAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::mmpres::MMPresTypes::SyncMap> SyncStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::mmpres::MMPresTypes::tTrackListSupport> TrackListSupportAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::mmpres::MMPresTypes::eRemoteCDDiscStatus> MRemoteCDDiscStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::mmpres::MMPresTypes::RemoteCDErrorStatus> MRemoteCDErrorStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::mmpres::MMPresTypes::eCDEOLStatus> MCDEOLStatusAttribute;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::eCallResult&)> PlayAllAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::eCallResult&)> NextAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::eCallResult&)> PreviousAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::eCallResult&)> PauseAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::eCallResult&)> ResumeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::eCallResult&)> SeekToTimeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::eCallResult&)> FastForwardAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::eCallResult&)> FastReverseAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::eCallResult&)> SetRepeatAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::eCallResult&)> SetShuffleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::tAlbumArtInformation&)> GetNowPlayingAlbumArtInformationAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&)> GetNowPlayingAlbumArtPathAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<uint8_t>&)> GetNowPlayingAlbumArtDataAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::tAlbumArtInformation&)> GetAlbumArtInformationForTrackAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&)> GetAlbumArtPathForTrackAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<uint8_t>&)> GetAlbumArtDataForTrackAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::eCallResult&)> SetSpeedAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::ePlaybackSpeed&)> GetSpeedAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::eCallResult&)> PromoteAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::eCallResult&)> DemoteAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::eCallResult&)> AddToWishListAsyncCallback;

    virtual CurrentPlayTimeAttribute& getCurrentPlayTimeAttribute() = 0;
    virtual TotalPlayDurationAttribute& getTotalPlayDurationAttribute() = 0;
    virtual TrackStateAttribute& getTrackStateAttribute() = 0;
    virtual NowPlayingDataAttribute& getNowPlayingDataAttribute() = 0;
    virtual PlayStateAttribute& getPlayStateAttribute() = 0;
    virtual SpeedAttribute& getSpeedAttribute() = 0;
    virtual RepeatModeAttribute& getRepeatModeAttribute() = 0;
    virtual ShuffleModeAttribute& getShuffleModeAttribute() = 0;
    virtual PlaybackSpeedAttribute& getPlaybackSpeedAttribute() = 0;
    /**
     * description: Indicates the status of the Playsession for the device
     */
    virtual PlaysessionStateAttribute& getPlaysessionStateAttribute() = 0;
    /**
     * description: Indicates the connection status of the active BT device if it has been
     *   disconnected due to Link loss
     */
    virtual ActiveDeviceBTLinkLossAttribute& getActiveDeviceBTLinkLossAttribute() = 0;
    virtual NowPlayingArtworkStatusAttribute& getNowPlayingArtworkStatusAttribute() = 0;
    virtual PlaybackPreviewAttribute& getPlaybackPreviewAttribute() = 0;
    /**
     * description: Indicates playback video only,true: start video play; false: stop
     */
    virtual VideoPlayStatusAttribute& getVideoPlayStatusAttribute() = 0;
    /**
     * description: Indicates current BT Player capability
     */
    virtual RemotePlayerCapabilityAttribute& getRemotePlayerCapabilityAttribute() = 0;
    /**
     * description: Indicates the error encountered by Media
     */
    virtual MediaErrorAttribute& getMediaErrorAttribute() = 0;
    /**
     * description: Provides the sync level information for the device
     */
    virtual SyncStatusAttribute& getSyncStatusAttribute() = 0;
    /**
     * description: Provides whether the device supports NowPlayingSupport browse information for
     *   the device
     */
    virtual TrackListSupportAttribute& getTrackListSupportAttribute() = 0;
    /**
     * description: Provides RemoteCD disc status
     */
    virtual MRemoteCDDiscStatusAttribute& getMRemoteCDDiscStatusAttribute() = 0;
    /**
     * description: Provides RemoteCD disc status
     */
    virtual MRemoteCDErrorStatusAttribute& getMRemoteCDErrorStatusAttribute() = 0;
    /**
     * description: Provides  RemoteCD EOL Status
     */
    virtual MCDEOLStatusAttribute& getMCDEOLStatusAttribute() = 0;


    /**
     * description: Method to initiate the playback of all items of a specific object type in the
     *   device
     */
    virtual void playAll(const uint8_t &_slotId, const ::v3::com::harman::mmpres::MMPresTypes::eMetadataType &_objectType, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> playAllAsync(const uint8_t &_slotId, const ::v3::com::harman::mmpres::MMPresTypes::eMetadataType &_objectType, PlayAllAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void next(const uint64_t &_step, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> nextAsync(const uint64_t &_step, NextAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void previous(const uint64_t &_step, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> previousAsync(const uint64_t &_step, PreviousAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void pause(CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> pauseAsync(PauseAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void resume(CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> resumeAsync(ResumeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void seekToTime(const uint64_t &_timePosition, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> seekToTimeAsync(const uint64_t &_timePosition, SeekToTimeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void fastForward(CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> fastForwardAsync(FastForwardAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void fastReverse(CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> fastReverseAsync(FastReverseAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void setRepeat(const ::v3::com::harman::mmpres::MMPresTypes::eRepeatMode &_mode, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setRepeatAsync(const ::v3::com::harman::mmpres::MMPresTypes::eRepeatMode &_mode, SetRepeatAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void setShuffle(const ::v3::com::harman::mmpres::MMPresTypes::eShuffleMode &_mode, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setShuffleAsync(const ::v3::com::harman::mmpres::MMPresTypes::eShuffleMode &_mode, SetShuffleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getNowPlayingAlbumArtInformation(CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::tAlbumArtInformation &_albumArtInfo, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getNowPlayingAlbumArtInformationAsync(GetNowPlayingAlbumArtInformationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getNowPlayingAlbumArtPath(const uint8_t &_imageNumber, CommonAPI::CallStatus &_internalCallStatus, std::string &_path, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getNowPlayingAlbumArtPathAsync(const uint8_t &_imageNumber, GetNowPlayingAlbumArtPathAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getNowPlayingAlbumArtData(const uint8_t &_imageNumber, CommonAPI::CallStatus &_internalCallStatus, std::vector<uint8_t> &_albumArtData, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getNowPlayingAlbumArtDataAsync(const uint8_t &_imageNumber, GetNowPlayingAlbumArtDataAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getAlbumArtInformationForTrack(const uint64_t &_trackId, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::tAlbumArtInformation &_albumArtInfo, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getAlbumArtInformationForTrackAsync(const uint64_t &_trackId, GetAlbumArtInformationForTrackAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getAlbumArtPathForTrack(const uint64_t &_trackId, const uint8_t &_imageNumber, CommonAPI::CallStatus &_internalCallStatus, std::string &_path, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getAlbumArtPathForTrackAsync(const uint64_t &_trackId, const uint8_t &_imageNumber, GetAlbumArtPathForTrackAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getAlbumArtDataForTrack(const uint64_t &_trackId, const uint8_t &_imageNumber, CommonAPI::CallStatus &_internalCallStatus, std::vector<uint8_t> &_albumArtData, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getAlbumArtDataForTrackAsync(const uint64_t &_trackId, const uint8_t &_imageNumber, GetAlbumArtDataForTrackAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void setSpeed(const uint8_t &_slotId, const ::v3::com::harman::mmpres::MMPresTypes::eMetadataType &_type, const ::v3::com::harman::mmpres::MMPresTypes::ePlaybackSpeed &_speed, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setSpeedAsync(const uint8_t &_slotId, const ::v3::com::harman::mmpres::MMPresTypes::eMetadataType &_type, const ::v3::com::harman::mmpres::MMPresTypes::ePlaybackSpeed &_speed, SetSpeedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getSpeed(const uint8_t &_slotId, const ::v3::com::harman::mmpres::MMPresTypes::eMetadataType &_type, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::ePlaybackSpeed &_speed, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSpeedAsync(const uint8_t &_slotId, const ::v3::com::harman::mmpres::MMPresTypes::eMetadataType &_type, GetSpeedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Promote the track
     * param: fileId is the fileID of the iTunes Station to be promoted. 0 can be used for
     *   current station
     */
    virtual void promote(const uint64_t &_fileId, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> promoteAsync(const uint64_t &_fileId, PromoteAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: demote the track
     * param: fileId is the fileID of the iTunes Station to be demoted. 0 can be used for
     *   current station
     */
    virtual void demote(const uint64_t &_fileId, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> demoteAsync(const uint64_t &_fileId, DemoteAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: add iTunes station to a WishList
     * param: fileId is the fileID of the iTunes Station to be added to the wishlist. 0 can
     *   be used for current station
     */
    virtual void addToWishList(const uint64_t &_fileId, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> addToWishListAsync(const uint64_t &_fileId, AddToWishListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_1 = v1;

#endif // V1_COM_HARMAN_MMPRES_Media_Player_PROXY_BASE_HPP_
