/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_HARMAN_MMPRES_Media_Manager_PROXY_BASE_HPP_
#define V1_COM_HARMAN_MMPRES_Media_Manager_PROXY_BASE_HPP_

#include <v1/com/harman/mmpres/MediaManager.hpp>


#include <v3/com/harman/mmpres/MMPresTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

class MediaManagerProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::v3::com::harman::mmpres::MMPresTypes::tSlot
    > SlotUpdateEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::tSlotList&)> GetSlotsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::tAdditionalDeviceInfo&)> GetAdditionalDeviceInfoAsyncCallback;


    /**
     * description: Emitted if there is a state change for any slot. 
    	 		     
             returns:	 
     *   slot:	Slot data
     */
    virtual SlotUpdateEvent& getSlotUpdateEvent() = 0;

    /**
     * description: Gets details for all the configured slots in the pres ctrl. Whichever slots are
     *   configured in the Presentation Controller config will be returned here, with
     *   the 
    					  current status. 
    	 		     
             returns:	  tSlotList:	Slot data
     */
    virtual void getSlots(CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::tSlotList &_list, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSlotsAsync(GetSlotsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Gets additional details of the device in a particular slot
    	 		     
            
     *   returns:	  tAdditionalDeviceInfo:	Additional Hw and firware info
     */
    virtual void getAdditionalDeviceInfo(const uint8_t &_slotId, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::tAdditionalDeviceInfo &_additionalInfo, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getAdditionalDeviceInfoAsync(const uint8_t &_slotId, GetAdditionalDeviceInfoAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_MMPRES_Media_Manager_PROXY_BASE_HPP_
