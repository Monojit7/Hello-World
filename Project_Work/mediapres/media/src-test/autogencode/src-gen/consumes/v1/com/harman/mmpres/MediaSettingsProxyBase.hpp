/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core .
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_HARMAN_MMPRES_Media_Settings_PROXY_BASE_HPP_
#define V1_COM_HARMAN_MMPRES_Media_Settings_PROXY_BASE_HPP_

#include <v1/com/harman/mmpres/MediaSettings.hpp>


#include <v3/com/harman/mmpres/MMPresTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

class MediaSettingsProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus> SubtitleStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> IsFullScreenAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus> AudioChannelAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> AppleAuthenticationChipstatusAttribute;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::eCallResult&)> MasterMediaResetAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::eCallResult&)> ResetMediaIndexAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::eMediaError&)> UpdateIndexAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::eCallResult&)> SetAudioChannelAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::eCallResult&)> SetSubtitleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::mmpres::MMPresTypes::eMediaError&)> SetDisplayWindowAsyncCallback;

    virtual SubtitleStatusAttribute& getSubtitleStatusAttribute() = 0;
    virtual IsFullScreenAttribute& getIsFullScreenAttribute() = 0;
    /**
     * description: Indicates the audio channels for the current track
     */
    virtual AudioChannelAttribute& getAudioChannelAttribute() = 0;
    /**
     * description: this will provide information as to whether the Apple authentication ship is
     *   operational or not
     */
    virtual AppleAuthenticationChipstatusAttribute& getAppleAuthenticationChipstatusAttribute() = 0;


    /**
     * description: reset all the Media related settings to the default. 
    		e: error code.
     */
    virtual void masterMediaReset(CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> masterMediaResetAsync(MasterMediaResetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: removes the database file of specified device on device ejection.
     * param: slotId: the specified slot id
            returns:	  eCallResult:	Result of the API
     *   call
     */
    virtual void resetMediaIndex(const uint8_t &_slotId, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> resetMediaIndexAsync(const uint8_t &_slotId, ResetMediaIndexAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Updates the index of a device
     * param: slotId: the specified slot id
            returns:	  e:	Result of the API call
     */
    virtual void updateIndex(const uint8_t &_slotId, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eMediaError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> updateIndexAsync(const uint8_t &_slotId, UpdateIndexAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Set Audio channel for playback
     * param: audioChannel - of type eAudioChannelStatus
     */
    virtual void setAudioChannel(const ::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus &_audioChannel, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setAudioChannelAsync(const ::v3::com::harman::mmpres::MMPresTypes::eAudioChannelStatus &_audioChannel, SetAudioChannelAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Set Subtitle ON or OFF
     * param: dispSubtitle - eSubtitleStatus:ON is to enable Subtitle, eSubtitleStatus:OFF is
     *   to disable subtitle
     */
    virtual void setSubtitle(const ::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus &_dispSubtitle, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setSubtitleAsync(const ::v3::com::harman::mmpres::MMPresTypes::eSubtitleStatus &_dispSubtitle, SetSubtitleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Set the display window coordinates of video playback
     * param: isFullscreen True is to enable fullscreen, false is to disable fullscreen and
     *   manually assign by screeenDimension
                    screeenDimension  Screen
     *   coordinates
     */
    virtual void setDisplayWindow(const bool &_isFullscreen, const ::v3::com::harman::mmpres::MMPresTypes::tScreen &_screeenDimension, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::mmpres::MMPresTypes::eMediaError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setDisplayWindowAsync(const bool &_isFullscreen, const ::v3::com::harman::mmpres::MMPresTypes::tScreen &_screeenDimension, SetDisplayWindowAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_MMPRES_Media_Settings_PROXY_BASE_HPP_
