/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Wed Jul 05 14:50:50 IST 2017
*/
#ifndef V1_COM_HARMAN_PRES_keypres_PROXY_HPP_
#define V1_COM_HARMAN_PRES_keypres_PROXY_HPP_

#include <v1/com/harman/pres/keypresProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace pres {

template <typename ... _AttributeExtensions>
class keypresProxy
    : virtual public keypres, 
      virtual public keypresProxyBase,
      virtual public _AttributeExtensions... {
public:
    keypresProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~keypresProxy();

    typedef keypres InterfaceType;



    /**
     * description: brodcast publishing a keystate
     */
    /**
     * Returns the wrapper class that provides access to the broadcast keyEvent.
     */
    virtual KeyEventSelectiveEvent& getKeyEventSelectiveEvent() {
        return delegate_->getKeyEventSelectiveEvent();
    }

    /**
     * description: method to subscribe to keys and some states of the same 		Client can provide a
     *   list of tKeyStates which contains ids and corresponding states 		To subsribe
     *   to all states , pass an empty array to tKeyStates::keyStates 		Subscibing to
     *   only interested states is strongly recommended 		Note: In case client wants
     *   states of all available buttons , pass an empty array of tKeyStates
     * Calls subscribeKeys with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void subscribeKeys(const std::vector<::v1::com::harman::pres::keyprestypes::tKeyStates> &_keys, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: method to subscribe to keys and some states of the same with a priority
     *   		Client can provide a list of tKeyStates which contains ids and corresponding
     *   states 		To subsribe to all states , pass an empty array to
     *   tKeyStates::keyStates 		Subscibing to only interested states is strongly
     *   recommended 		Project team should first decide on a priority matrix and enable
     *   the same in cfg  		Note: In case client wants states of all available buttons
     *   , pass an empty array of tKeyStates
     * Calls subscribeKeys with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void subscribeKeys(const std::vector<::v1::com::harman::pres::keyprestypes::tKeyPriority> &_keys, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: method to unsubscribe to some or all keys 		To unsubscribe few keys , mention
     *   the key ids 		To unsubscribe to all keys , pass on an empty list, Pres will
     *   remove the client id for  		previously subscribed keys by the client
     * Calls unSubscribeKeys with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void unSubscribeKeys(const std::vector<uint16_t> &_keyIds, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: method to get/release exclusive focus to the keys 		keyIds - array of key ids
     *   		focus - exclusive client if true 				key events (subscribed states) will be
     *   published only to the requesting client  				broadcast to self and other
     *   clients already registered if false 		NOTE : If a client is not previously
     *   registered as a subscriber to a keyid and yet a keyid is passed here , 		then
     *   request for the particular keyid will be ignored , other key requests will be
     *   honored
     * Calls setExclusiveFocus with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setExclusiveFocus(const std::vector<uint16_t> &_keyIds, const bool &_focus, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: method to get/release exclusive focus to the keys along with states 		This
     *   interface doesnt require a client to first register to a key unlike the above
     *   API 		keyStates - array of key states 		focus - exclusive client if true
     *   				key events (subscribed states) will be published only to the requesting
     *   client  				broadcast to self and other clients already registered if false
     * Calls setExclusiveFocus with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setExclusiveFocus(const std::vector<::v1::com::harman::pres::keyprestypes::tKeyStates> &_keyStates, const bool &_focus, CommonAPI::CallStatus &_internalCallStatus);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<keypresProxyBase> delegate_;
};

typedef keypresProxy<> keypresProxyDefault;


//
// keypresProxy Implementation
//
template <typename ... _AttributeExtensions>
keypresProxy<_AttributeExtensions...>::keypresProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<keypresProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<keypresProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
keypresProxy<_AttributeExtensions...>::~keypresProxy() {
}

/**
 * description: method to subscribe to keys and some states of the same 		Client can provide a
 *   list of tKeyStates which contains ids and corresponding states 		To subsribe
 *   to all states , pass an empty array to tKeyStates::keyStates 		Subscibing to
 *   only interested states is strongly recommended 		Note: In case client wants
 *   states of all available buttons , pass an empty array of tKeyStates
 */
template <typename ... _AttributeExtensions>
void keypresProxy<_AttributeExtensions...>::subscribeKeys(const std::vector<::v1::com::harman::pres::keyprestypes::tKeyStates> &_keys, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->subscribeKeys(_keys, _internalCallStatus);
}
/**
 * description: method to subscribe to keys and some states of the same with a priority
 *   		Client can provide a list of tKeyStates which contains ids and corresponding
 *   states 		To subsribe to all states , pass an empty array to
 *   tKeyStates::keyStates 		Subscibing to only interested states is strongly
 *   recommended 		Project team should first decide on a priority matrix and enable
 *   the same in cfg  		Note: In case client wants states of all available buttons
 *   , pass an empty array of tKeyStates
 */
template <typename ... _AttributeExtensions>
void keypresProxy<_AttributeExtensions...>::subscribeKeys(const std::vector<::v1::com::harman::pres::keyprestypes::tKeyPriority> &_keys, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->subscribeKeys(_keys, _internalCallStatus);
}
/**
 * description: method to unsubscribe to some or all keys 		To unsubscribe few keys , mention
 *   the key ids 		To unsubscribe to all keys , pass on an empty list, Pres will
 *   remove the client id for  		previously subscribed keys by the client
 */
template <typename ... _AttributeExtensions>
void keypresProxy<_AttributeExtensions...>::unSubscribeKeys(const std::vector<uint16_t> &_keyIds, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->unSubscribeKeys(_keyIds, _internalCallStatus);
}
/**
 * description: method to get/release exclusive focus to the keys 		keyIds - array of key ids
 *   		focus - exclusive client if true 				key events (subscribed states) will be
 *   published only to the requesting client  				broadcast to self and other
 *   clients already registered if false 		NOTE : If a client is not previously
 *   registered as a subscriber to a keyid and yet a keyid is passed here , 		then
 *   request for the particular keyid will be ignored , other key requests will be
 *   honored
 */
template <typename ... _AttributeExtensions>
void keypresProxy<_AttributeExtensions...>::setExclusiveFocus(const std::vector<uint16_t> &_keyIds, const bool &_focus, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->setExclusiveFocus(_keyIds, _focus, _internalCallStatus);
}
/**
 * description: method to get/release exclusive focus to the keys along with states 		This
 *   interface doesnt require a client to first register to a key unlike the above
 *   API 		keyStates - array of key states 		focus - exclusive client if true
 *   				key events (subscribed states) will be published only to the requesting
 *   client  				broadcast to self and other clients already registered if false
 */
template <typename ... _AttributeExtensions>
void keypresProxy<_AttributeExtensions...>::setExclusiveFocus(const std::vector<::v1::com::harman::pres::keyprestypes::tKeyStates> &_keyStates, const bool &_focus, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->setExclusiveFocus(_keyStates, _focus, _internalCallStatus);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &keypresProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool keypresProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool keypresProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& keypresProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& keypresProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace pres
} // namespace harman
} // namespace com
} // namespace v1



// Compatibility
namespace v1_1 = v1;

#endif // V1_COM_HARMAN_PRES_keypres_PROXY_HPP_
