/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Wed Jul 05 14:50:50 IST 2017
*/
#include <v1/com/harman/pres/keypresDBusProxy.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace pres {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createkeypresDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<keypresDBusProxy>(_address, _connection);
}

INITIALIZER(registerkeypresDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		keypres::getInterface(),
		&createkeypresDBusProxy);
}

keypresDBusProxy::keypresDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		keyEventSelective_(*this, "keyEvent", "(uv)", std::make_tuple(static_cast<::v1::com::harman::pres::keyprestypes_::tKeyDeployment_t*>(nullptr)))
{
}


keypresDBusProxy::KeyEventSelectiveEvent& keypresDBusProxy::getKeyEventSelectiveEvent() {
    return keyEventSelective_;
}
    
    /**
     * description: method to subscribe to keys and some states of the same 		Client can provide a
     *   list of tKeyStates which contains ids and corresponding states 		To subsribe
     *   to all states , pass an empty array to tKeyStates::keyStates 		Subscibing to
     *   only interested states is strongly recommended 		Note: In case client wants
     *   states of all available buttons , pass an empty array of tKeyStates
     */
    void keypresDBusProxy::subscribeKeys(const std::vector<::v1::com::harman::pres::keyprestypes::tKeyStates> &_keys, CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::Deployable<std::vector<::v1::com::harman::pres::keyprestypes::tKeyStates>, CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::keyprestypes_::tKeyStatesDeployment_t>> deploy_keys(_keys, static_cast<CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::keyprestypes_::tKeyStatesDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v1::com::harman::pres::keyprestypes::tKeyStates>, CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::keyprestypes_::tKeyStatesDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethod(
        *this,
        "subscribeKeys",
        "a(qas)",
deploy_keys,
_internalCallStatus);
}
    /**
     * description: method to subscribe to keys and some states of the same with a priority
     *   		Client can provide a list of tKeyStates which contains ids and corresponding
     *   states 		To subsribe to all states , pass an empty array to
     *   tKeyStates::keyStates 		Subscibing to only interested states is strongly
     *   recommended 		Project team should first decide on a priority matrix and enable
     *   the same in cfg  		Note: In case client wants states of all available buttons
     *   , pass an empty array of tKeyStates
     */
    void keypresDBusProxy::subscribeKeys(const std::vector<::v1::com::harman::pres::keyprestypes::tKeyPriority> &_keys, CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::Deployable<std::vector<::v1::com::harman::pres::keyprestypes::tKeyPriority>, CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::keyprestypes_::tKeyPriorityDeployment_t>> deploy_keys(_keys, static_cast<CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::keyprestypes_::tKeyPriorityDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v1::com::harman::pres::keyprestypes::tKeyPriority>, CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::keyprestypes_::tKeyPriorityDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethod(
        *this,
        "subscribeKeys",
        "a((qas)q)",
deploy_keys,
_internalCallStatus);
}
    /**
     * description: method to unsubscribe to some or all keys 		To unsubscribe few keys , mention
     *   the key ids 		To unsubscribe to all keys , pass on an empty list, Pres will
     *   remove the client id for  		previously subscribed keys by the client
     */
    void keypresDBusProxy::unSubscribeKeys(const std::vector<uint16_t> &_keyIds, CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::Deployable<std::vector<uint16_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_keyIds(_keyIds, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<uint16_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethod(
        *this,
        "unSubscribeKeys",
        "aq",
deploy_keyIds,
_internalCallStatus);
}
    /**
     * description: method to get/release exclusive focus to the keys 		keyIds - array of key ids
     *   		focus - exclusive client if true 				key events (subscribed states) will be
     *   published only to the requesting client  				broadcast to self and other
     *   clients already registered if false 		NOTE : If a client is not previously
     *   registered as a subscriber to a keyid and yet a keyid is passed here , 		then
     *   request for the particular keyid will be ignored , other key requests will be
     *   honored
     */
    void keypresDBusProxy::setExclusiveFocus(const std::vector<uint16_t> &_keyIds, const bool &_focus, CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::Deployable<std::vector<uint16_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_keyIds(_keyIds, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_focus(_focus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<uint16_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethod(
        *this,
        "setExclusiveFocus",
        "aqb",
deploy_keyIds, deploy_focus,
_internalCallStatus);
}
    /**
     * description: method to get/release exclusive focus to the keys along with states 		This
     *   interface doesnt require a client to first register to a key unlike the above
     *   API 		keyStates - array of key states 		focus - exclusive client if true
     *   				key events (subscribed states) will be published only to the requesting
     *   client  				broadcast to self and other clients already registered if false
     */
    void keypresDBusProxy::setExclusiveFocus(const std::vector<::v1::com::harman::pres::keyprestypes::tKeyStates> &_keyStates, const bool &_focus, CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::Deployable<std::vector<::v1::com::harman::pres::keyprestypes::tKeyStates>, CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::keyprestypes_::tKeyStatesDeployment_t>> deploy_keyStates(_keyStates, static_cast<CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::keyprestypes_::tKeyStatesDeployment_t>*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_focus(_focus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v1::com::harman::pres::keyprestypes::tKeyStates>, CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::keyprestypes_::tKeyStatesDeployment_t> >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethod(
        *this,
        "setExclusiveFocus",
        "a(qas)b",
deploy_keyStates, deploy_focus,
_internalCallStatus);
}


void keypresDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 1;
      }

      } // namespace pres
      } // namespace harman
      } // namespace com
      } // namespace v1
