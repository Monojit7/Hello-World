package com.harman.btpres

import com.harman.btpres.BTPresTypes.* from "BluetoothTypes.fidl"


interface ConnectionManager {
    version {major 1 minor 0}

    <** @description: It will reflect the current bluetooth status to registered clients **>
    attribute eBluetoothStatus btState readonly
  
    <** @description: It will reflect local device address to registered clients **>
    attribute String localDevAddr readonly

    <** @description: It will reflect local device name to registered clients **>
    attribute String localDevName readonly

    <** @description: It will broadcast stored pass key to registered clients **>
    attribute String passKeyPin readonly

    <** @description: It will broadcast device search status to registered client**>
    attribute Boolean deviceSearchStatus readonly

    <** @description: It will broadcast discoverability status to registered clients **>
    attribute Boolean discoverableStatus readonly

    <** @description: It will broadcast discoverability timeout to registered clients **>
    attribute UInt16 discoveryTimeout readonly

    <** @description: It will broadcast device search results to registered clients **>
    attribute tDeviceSearchEntryList devSearchResults readonly

    <** @description: It will broadcast bonded device list to registered clients **>
    attribute bondedDevList devList readonly

    <** @description: It will broadcast network status to registered clients **>
    attribute networkIfStatus netIfStatus readonly

    <** @description: It will braodcast unstable device info to registered clients **>
    attribute unstableDeviceInfoList unstableDevs readonly

    <** @description: It will braodcast primary device address **>
    attribute String primaryDevice readonly

    <** @description: It will broadcast standard bonding Request to registered clients 
        @param: outAddress (string)     : Bt address of phone
        @param: deviceName (string)     : Device name
        @param: type (eBondingType)     : Bonding type
        @param: pin (string) : pass key pin
    **>
    broadcast bondingRequest {
        out {
            String outAddress
            String deviceName
            eBondingType type
            String pin
        }
    }

    <** @description: It will broadcast service connection request to registered clients 
        @param: outAddress (string)         : Bt address of phone
        @param: name (string)               : Device name
        @param: service (eSupportedProfile) : supported profile list
    **>
    broadcast serviceConnectionRequest {
        out {
            String outAddress
            String name
            eSupportedProfile service
        }
    } 
  
    <** @description: It will broadcast service connection status signal to registered clients 
        @param: outAddress (string)         : Bt address of phone
        @param: name (string)               : Device name
        @param: service (eSupportedProfile) : supported profile list
        @param: status (eConnectionStatus)  : Connected or disconnected status
        @param: reason (eServiceConnectDisconnectReason) : reason for connection or disconnection
    **>
    broadcast serviceConnectionStatus {
        out {
            String outAddress
            String name
            eSupportedProfile service
            eConnectionStatus status
            eServiceConnectDisconnectReason reason
        }
    } 

    <** @description :This signal is sent when device has been deleted from Head Unit to registered clients 
        @param: outAddress (string)     : Bt address of phone
        @param: deviceName (string )    : device name
    **>
    broadcast deviceDeleted{
        out{
            String outAddress
            String deviceName
        }
    } 

    <** @description :This signal is used to update the pairing status to registered clients
        @param: outAddress (string)         : Bt address of phone
        @param: deviceName (string)         : device name
        @param: pairStatus (ePairingStatus) : Pairing status i.e. successful Or failure
    **>
    broadcast bondingStatus{
        out {
            String outAddress
            String deviceName
            ePairingStatus pairStatus
        }
    }

    <** @description: Used to start device search on head unit
        @param: maxDevice (UInt32)       : max limit for found devices
        @param: timeout (UInt32)         : time limit for device search operation

        returns: errorCode (eErrorType) : error code
    **>	
    method startDeviceSearch {
        in {
            UInt32 maxDevice
            UInt32 timeout
        }
        out {
            eErrorType errorCode
        }
    }
   
    <** @description : Used to stop device search on head unit
        @param: none

        returns: error code (eErrorType) : error code
    **>
    method stopDeviceSearch  {
        out {
            eErrorType errorCode
        }
    }

    <** @description : Used to send secure Bonding reply
        @param: inAddress (string)       : phone BT address
        @param: accept (boolean)         : accepting authentication request
        @param: trusted (boolean)        : making device trusted means service won't send connection request for each connect attempt
        @param: type (eBondingType)      : Bonding type, standard or secure bonding

        returns: errorCode (eErrorType) : error code
    **>
    method bondingReply {
        in {
            String inAddress
            Boolean accept
            Boolean trusted
            eBondingType type
        }
        out {
            eErrorType errorCode
        }
    }

    <** @description : Used to delete device from paired device list	
        @param: inAddress (string)      : phone BT address

        returns: errorCode (eErrorType): error code
    **>
    method  deleteDevice {
        in {
            String inAddress
        }
        out {
            eErrorType errorCode
        }
    }

    <** @description : Used to delete all device in paired device list
        @param: none

        returns: errorCode (eErrorType) : error code
    **>
    method deleteAllDevices {
        out {
            eErrorType errorCode
        }
    }

    <** @description : Used to initate profile connection with device
        @param: inAddress (string)       : phone BT address
        @param: service (eSupportedProfile) : profile name
        @param: instanceName (string)    : containing the phone instance
        @param: replaceAddr (string)     : containing the replacement address for which the connection will be replaced

        returns: errorCode (eErrorType) : error code
    **>
    method startServiceConnection {
        in {
            String inAddress
            eSupportedProfile service
            String instanceName
            String replaceAddr 
        }
        out {
            eErrorType errorCode
        }
    }

    <** @description : Used to allows the existance of the service connection to this device and service.
        @param: inAddress (string)           : phone BT address
        @param: service (eSupportedProfile)  : profile name
        @param: allow (Boolean)              : containing the value true for allow, or false for reject

        returns: errorCode (eErrorType)      : error code
    **>
    method allowServiceConnection {
        in {
            String inAddress
            eSupportedProfile service
            Boolean allow
        }
        out {
            eErrorType errorCode
        }
    }

    <** @description : Used to initate the disconnection with connected service i.e. HFP and A2DP
        @param: inAddress (string)                  : phone BT address
        @param: service (eSupportedProfile)         : profile name

        returns: errorCode error code (eErrorType)  : error code
    **>
    method startServiceDisconnection {
        in {
            String inAddress
            eSupportedProfile service
        }
        out {
            eErrorType errorCode
        }
    }

    <** @description : This method should be called by clients in order to reply to the incoming service 
                       connection request from a remote device as indicated by the signal 'serviceConnectionRequest'. 
                       The reply can be to accept or reject incoming service connection request.
        @param: inAddress (string)              : phone BT address
        @param: service (eSupportedProfile)     : profile name
        @param: accept (boolean)                : containing the value true for allow, or false for reject
        @param: instanceName (string)           : containing the instance name of the device

        returns: errorCode (eErrorType)         : error code
    **>
    method serviceConnectionReply {
        in {
            String inAddress
            eSupportedProfile service
            Boolean accept
            String instanceName
        }
        out {
            eErrorType errorCode
        }
    }

    <** @description : Used to initiate the reconnection to previously connected device
        @param: None

        returns: errorCode error code (eErrorType) : error code
    **>
    method startReconnect {
        out {
            eErrorType errorCode
        }
    }

    <** @description : This method should be called to get oldest connected device
        @param: None

        returns: oldestDevInfo (oldestDevInfo)     : Oldest device name and address
        returns: errorCode error code (eErrorType) : error code
    **>
    method getOldestConnectedDev {
        out {
            deviceInfo oldestDevInfo
            eErrorType errorCode
        }
    }

    <** @description : This method used to change name of bonded device.
        @param: inAddress  (string)     : contains the BD address.
        @param: name (string)           : Device name

        returns: errorCode(eErrorType)  : error code
    **>	
    method renameBondedDevice {
        in {
            String inAddress
            String name
        }
        out {
            eErrorType errorCode
        }
    }

    <** @description : This method used to change local name of head unit.	
        @param: name (string)           : Device name

        returns: errorCode(eErrorType)  : error code
    **>
    method renameLocalDevice  {
        in {
            String name
        }
        out {
            eErrorType errorCode
        }
    }

    <** @description : Used to set bluetooth on or off
        @param:  status (boolean)       : set true or false

        returns: error code(eErrorType) : error code
    **>	
    method setBluetoothStatus {
        in {
            Boolean status
        }
        out {
            eErrorType errorCode
        }
    }

    <** @description: Used to enable or disable discoverable mode
        @param: enabled (boolean)       : set true or false

        returns: errorCode (eErrorType) : error code
    **>
    method setDiscoverableMode {
        in {
            Boolean enabled
        }
        out {
            eErrorType errorCode
        }
    }

    <** @description : This method used to pin information for head unit.
        @param: passkey (string)          : set the default pin for legacy devices

        returns:  error code (eErrorType) : error code
    **>	
    method  setPin {
        in {
            String passkey
        }
        out {
            eErrorType errorCode
        }
    }

    <** @description: It will set a device as primary
        @param: inAddress  (string)     : contains the BD address.

        returns:  error code (eErrorType) : error code
    **>
    method  setPrimaryDevice {
        in {
            String inAddress
        }
        out {
            eErrorType errorCode
        }
    }
}
