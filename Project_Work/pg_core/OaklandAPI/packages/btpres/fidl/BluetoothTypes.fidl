package com.harman.btpres

typeCollection BTPresTypes
{
    version {major 1 minor 0}

    <** @description : shows current bluetooth status **>
    enumeration eBluetoothStatus {
        BTSTATE_OFF
        BTSTATE_ON
    }

    <** @description : shows features supported by the phone **>
    enumeration eSupportedFeature {
        PHONE_FEATURE_NONE
        PHONE_FEATURE_REJECT
        PHONE_FEATURE_REPLACE
        PHONE_FEATURE_SWAP
        PHONE_FEATURE_HANGUP_ENH
        PHONE_FEATURE_SELECT
        PHONE_FEATURE_CONFERENCE
        PHONE_FEATURE_CALLTRANSFER
        PHONE_FEATURE_CALLSTATUS_ENH
        PHONE_FEATURE_RESP_AND_HOLD
        PHONE_FEATURE_INBAND
        PHONE_FEATURE_VR
        PHONE_FEATURE_AUDIO_ENH
        PHONE_FEATURE_SIRI
        PHONE_FEATURE_GOOGLE_NOW
    }
   
    <** @description : Enumeration for various services supported by head-unit **>
    enumeration eSupportedProfile {
        PROFILE_HFPGW
        PROFILE_A2DP
        PROFILE_AVRCP
        PROFILE_SPP
        PROFILE_PAN
        PROFILE_PBAP
        PROFILE_MAP
        PROFILE_UNKNOWN
    }

    <** @description: Enumeration for class of device **>
    enumeration eCOD {
        CLASS_COMPUTER
        CLASS_PHONE
        CLASS_AUDIO_VIDEO
        CLASS_WEARABLE
        CLASS_OTHERS
    }

    <** @description: Enumeration for bonding type **>
    enumeration eBondingType {
        BONDING_STANDARD
        BONDING_SECURE
    }

    <** @description: Enumeration for pairing status **>
    enumeration ePairingStatus {
        PAIRING_SUCCESS
        PAIRING_FAILURE
        PAIRING_DISCOVERABLE
        PAIRING_NOT_DISCOVERABLE
    }

    <** @description: Enumeration for connection status **>
    enumeration eConnectionStatus {
        SERVICE_CONNECTED
        SERVICE_CONNECTING
        SERVICE_DISCONNECTING
        SERVICE_DISCONNECTED
        SERVICE_CONNECTERROR
        SERVICE_NOT_SUPPORTED
    }

    <** @description : Enumeration for service connection disconnection reasons **>
    enumeration eServiceConnectDisconnectReason   {
        SERVICE_CONNECTED_HEADUNIT_INITIATED
        SERVICE_CONNECTED_PHONE_INITIATED
        SERVICE_CONNECTED_AUTO_CONNECTION
        SERVICE_DISCONNECTED_HEADUNIT_INITIATED
        SERVICE_DISCONNECTED_PHONE_INITIATED
        SERVICE_DISCONNECTED_LINK_LOSS
        SERVICE_CONNECT_ERROR_PAGE_TIMEOUT
        SERVICE_CONNECT_ERROR_USER_REJECTED
        SERVICE_DISCONNECTED_DEVICE_DISCONNECTED
   }

    <** @description : transfer delay **>
    enumeration eTransferDelay {
        TRANSFER_DELAY_YES
        TRANSFER_DELAY_NO
    }

    <** @description : Call handling codec **>
    enumeration eCodecType {
        CODEC_NARROW_BAND
        CODEC_WIDE_BAND
    }

    <** @description : Call direction **>
    enumeration eDirection {
        DIRECTION_UNKNOWN
        DIRECTION_INCOMING
        DIRECTION_OUTGOING
    }

    <** @description : Battery Charge Level **>
    enumeration eBatteryChargeLevel {
        BATTERY_CHARGE_0_PERCENT
        BATTERY_CHARGE_20_PERCENT
        BATTERY_CHARGE_40_PERCENT
        BATTERY_CHARGE_60_PERCENT
        BATTERY_CHARGE_80_PERCENT
        BATTERY_CHARGE_100_PERCENT
    }
   
    <** @description : Signal quality RSSI value **>
    enumeration eRssiLevel {
        RSSI_LEVEL_10_PERCENT
        RSSI_LEVEL_20_PERCENT
        RSSI_LEVEL_30_PERCENT
        RSSI_LEVEL_40_PERCENT
        RSSI_LEVEL_50_PERCENT
        RSSI_LEVEL_60_PERCENT
        RSSI_LEVEL_70_PERCENT
        RSSI_LEVEL_80_PERCENT
        RSSI_LEVEL_90_PERCENT
        RSSI_LEVEL_100_PERCENT
    }

    <** @description : Possible networkRegistrationState values **>
    enumeration eNetworkRegState {
        PHONE_REGSTATE_UNKNOWN
        PHONE_REGSTATE_NOT_REGISTERED
        PHONE_REGSTATE_HOME
        PHONE_REGSTATE_SEARCHING
        PHONE_REGSTATE_DENIED
        PHONE_REGSTATE_ROAMING
        PHONE_REGSTATE_OPERATOR_DENIED
    }

    <** @description : Possible netowrk operator mode value **>
    enumeration eOperatorMode {
        OPERATOR_MODE_UNKNOWN
        OPERATOR_MODE_AUTO
        OPERATOR_MODE_MANUAL
    }

    <** @description : Possible callstate values **>
    enumeration eCallState {
        CALL_STATE_IDLE
        CALL_STATE_ACTIVE
        CALL_STATE_ON_HOLD
        CALL_STATE_TERMINATED
        CALL_STATE_DIALING
        CALL_STATE_RINGING
        CALL_STATE_ALERTING
        CALL_STATE_WAITING
    }

    <** @description: Possible SCO audio status values **>
    enumeration eAudioStatus {
        SCO_DISCONNECTED
        SCO_CONNECTED
        SCO_ERROR
    }

   <** @description : Different error types **>
   enumeration eErrorType {
      ERROR_TYPE_SUCCESS
      ERROR_TYPE_DEFAULT
      ERROR_TYPE_PENDING
      ERROR_TYPE_API_NOT_SUPPORTED
      ERROR_TYPE_BAD_PARAMETER
      ERROR_TYPE_DEVICE_REMOVED
      ERROR_TYPE_SYNC_NOT_COMPLETED
      ERROR_TYPE_FAILURE
      ERROR_EXCEEDED_MAX_ENTRY_LIMIT
      ERROR_EXCEEDED_MAX_CHARACTER_LIMIT
   }
   
   <** @description : This enum indicates criteria for using a string filter. **>
   enumeration eFilterType {
   FILTER_TYPE_BEGINS_WITH=0
   FILTER_TYPE_ENDS_WITH
   FILTER_TYPE_CONTAINS
   FILTER_TYPE_EXACT_MATCH
   FILTER_UNREAD_SMS
   }
   
   <** @description : This enum indicates result reqest for the API invoked **>
   enumeration eResultType{
   DEFAULT_BROWSING_ITEM
   CONTACT_FORMATTTED_NAME 
   CONTACT_GIVEN_NAME      
   CONTACT_FAMILY_NAME     
   CONTACT_NUMBER          	   	         
   CONTACT_IMAGE           
   CONTACT_ADDRESS  
   CALLSTACK_DATE_TIME
   CALLSTACK_STORAGE_TYPE	   	        
   SMS_FROM                
   SMS_TO                  
   SMS_NAME                
   SMS_READSTATUS          
   SMS_SHORT_BODY          
   }
   	
   <** @description : This enum indicates the database type
    DB_TYPE_ACTIVITY_LIST is merged list of CALLSTACK AND SMS
    **>
   
   enumeration eDatabaseType {
   DB_TYPE_PHONEBOOK                = 1
   DB_TYPE_FAVOURITE                = 2
   DB_TYPE_COMBINED_CALLSTACK       = 4
   DB_TYPE_MISSED_CALLSTACK         = 8
   DB_TYPE_DIALLED_CALLSTACK        = 16
   DB_TYPE_RECEIVED_CALLSTACK       = 32
   DB_TYPE_SMS                      = 64
   DB_TYPE_SMS_TEMPLATE             = 128
   DB_TYPE_ACTIVITY_LIST            = 256
   }
   
   <** @description : This enum indicates the database type **>
   enumeration eDbOperationId {
   INSERT_INTO_DB_BY_CONTACT_ID
   INSERT_NEW
   DELETE_FROM_DB
   DELETE_ALL_FROM_DB
   MANUAL_SYNC
   }
   
   <** @description : This enum indicates the PIM sync status **>
   enumeration eSyncState {
   SYNC_STATUS_DEFAULT
   SYNC_STATUS_START
   SYNC_STATUS_INPROGRESS
   SYNC_STATUS_COMPLETED
   SYNC_STATUS_DELTA_SYNC
   SYNC_STATUS_ABORTED
   SYNC_STATUS_ERROR
   SYNC_STATUS_ACCESS_DENIED	
   }
   
   <** @description : This enum indicates the formatted name order **>         
   enumeration eContactNameOredr{
   CONTACT_NAME_ORDER_FIRSTNAME_LASTNAME
   CONTACT_NAME_ORDER_LASTNAME_FIRSTNAME
   CONTACT_NAME_ORDER_FIRSTNAME_EXTENDED_LASTNAME
   CONTACT_NAME_ORDER_LASTNAME_EXTENDED_FIRSTNAME
   }
   
   <** @description : This enum indicates the phone number category **> 
   enumeration eTelType{
   CONTACT_TEL_TYPE_CELL = 1
   CONTACT_TEL_TYPE_HOME = 2
   CONTACT_TEL_TYPE_WORK = 4
   CONTACT_TEL_TYPE_OTHER = 8
   }

	<** @description : This enum indicates the contact field **> 
   enumeration eContactNameField{
   CONTACT_FIELD_FORMATTED_NAME = 1
   CONTACT_FIELD_GIVEN_NAME     = 2
   CONTACT_FIELD_FAMILY_NAME    = 4
   CONTACT_FIELD_NUMBER_SEARCH	 = 8
   }
  	
  	<** @description : This enum indicates the Address Types **>
   enumeration eAddrtype {
   HOME_ADDRESS   = 1
   WORK_ADDRESS   = 2
   OTHER_ADDRESS  = 4
   }
   	
   <** @description : This enum indicates the Email Types **>
   enumeration eEmailtype {
   HOME_EMAIL    = 1
   WORK_EMAIL    = 2
   MOBILE_EMAIL  = 4
   OTHER_EMAIL   = 8
   }
   	
   <** @description : This enum indicates the extra feature **>
   enumeration eExtraFeature {
   NOTES   = 1
   IMAGE   = 2
   LABEL   = 4
   ORG     = 8
   COMPANY = 16
   DATE_TIME = 32
   SMS_BODY = 64
   SMS_STATUS = 128
   }
   	   	   	
   
   <** @description : This enum indicates the contact field **> 
   enumeration eFoldertype {
   MSG_FOLDER_INBOX
   MSG_FOLDER_OUTBOX
   MSG_FOLDER_SENT
   MSG_FOLDER_DELETED
   MSG_FOLDER_DRAFT
   }


	<** @description : This enum indicates the various message notification **> 
   enumeration eMsgNotification {
		MSG_NOTIFICATION_DELIVERY_SUCCESS
		MSG_NOTIFICATION_DELIVERY_FAILURE
		MSG_NOTIFICATION_SENDING_SUCCESS
		MSG_NOTIFICATION_SENDING_FAILURE
		MSG_NOTIFICATION_MEMORY_FULL
		MSG_NOTIFICATION_MEMORY_AVAILABLE
		MSG_NOTIFICATION_DELETED
		MSG_NOTIFICATION_SHIFTED
		MSG_NOTIFICATION_LOST_NOTIFICATIONS
		MSG_NOTIFICATION_NEW_SMS_RECEIVED
   	}
	
   <** @description : Structure for phonebook entry
       @param: NAME: formattedName of a contact
       @param: NAME: Mapped Phone number
       @param: EMAIL: Email 
       @param: EXTENDED FEATURE: extended features
   **>
   enumeration phonebookResult {
      NAME
      NUMBER
      EMAIL
      ADDRESS
      EXTENDED FEATURE
   }
	
   <** @description : Structure for Different type of contact Adddress
   **>	
   struct ContactAddress{
      String Contacts_Adr_Lan
      String Contacts_Adr_Lon
      String Contacts_Adr_PostOfficeBox
      String Contacts_Adr_PostalCode
      String Contacts_Adr_StreetAddress
      String Contacts_Adr_Locality
      String Contacts_Adr_Region
      String Contacts_Adr_CountryName
   }
	
	
   <** @description : Structure for phonebook entry
       @param: contactID: Contact ID of a phone
       @param: FavIndex: This will be only present in case of Fav list 
       @param: NameList: Mapped name list
       @param: PhoneNumberList: Mapped PhoneNumber List
       @param: AddressList: Address list 
       @param: EmailList: list of emails 
       @param: ExtendeFeatureList: Extended feature list
   **>
   struct phonebookEntry {
      UInt16 Index
      UInt16 FavIndex
      Int64  msg_id
      eDatabaseType databaseType
      contactNameMap NameList
      phoneNumberMap PhoneNumberList
      contactAddressMap AddressList
      contactEmailMap EmailList
      contactExtendeFeatureMap ExtendeFeatureList
   }
		
   <** @description : Structure for callstack entry 
   	 @param: NameList: mapped Name List
       @param: databaseType: Missed call or Receive or dialled call
       @param: number: Number
       @param: timeStamp: timeStamp of a call 
       @param: URL: Image Path
       @param: mappedcontactID: ContactID of this contact 
   **>
   struct callstackEntry {
      contactNameMap NameList
		eDatabaseType databaseType
		String number
		String timeStamp
		String URL
		eTelType NumberType
		UInt32 mappedcontactID
	}

    <** @description: Network interface status **>
    struct networkIfStatus {
        String ipAddr
        Boolean status
    }

    <** @description: Network Operator information **>
    struct networkOperatorInfo {
        eNetworkRegState networkRegistrationState
        Boolean          networkAvailability
        String           deviceAddress
        String           subscriberNumber
        String           operatorName
        eOperatorMode    operatorMode
    }

    <** @description: Nework Signal and Charge level information **>
    struct signalChargeInfo {
        String              deviceAddress
        eRssiLevel          signalQuality
        eBatteryChargeLevel batteryCharge
    }

    <** @description: HFP supported features **>
    struct hfpSupportedFeatures {
        String           deviceAddress
        supportedFeatureMap hfpFeatures
    }

    <** @description: Handsfree Mode status **>
    struct hfModeStatus {
        String deviceAddress
        eAudioStatus status
    }

    <** @description: VR Mode status **>
    struct vrModeStatus {
        String deviceAddress
        Boolean status
    }

    <** @description: SCO status **>
    struct audioStatus {
        String deviceAddress
        eAudioStatus status

    }

    <** @description :Call details information **>
    struct callStateInfo {
        Int8      callId
        eCallState cstate
        String     number
        String     deviceAddress
        String     name
        String     imageUrl
        eTelType   numType
        UInt32     mappedContactId
        eDirection direction
    }

    <** @description :Call duration information **>
    struct callDuration {
        Int8 callId
        UInt32 duration
        String deviceAddress
    }

    <** @description :Device search entry **>
    struct tDeviceSearchEntry {
        String  deviceName
        String  deviceAddr
        eCOD  deviceClass
        Boolean connected
        Boolean paired

    }

    <** @description: Gives information about bonded devices
        @param: 
              : devicename (string)             : Device name of connected phone
              : btAddress  (string)             : BtAddress for connected device
              : deviceClass (eCOD)               : Device class
              : serviceList (connectionStateMap): Maintain list of connected profile information i.e. serviceName, connection state
    **>    
    struct bondedDev {
        String  devName
        String  btAddress
        eCOD  deviceClass
        connectionStateMap serviceList
    }

    <** @description: Device information **>
    struct deviceInfo {
        String name
        String address
    }

    <** @description : Structure for SMS entry 
        @param: smsBody: Body of SMS
        @param: smsFrom: Number from which SMS came
        @param: smsTo: Number to which sms is sent
        @param: timeStamp: Timestamp of SMS
        @param: smsName: Name of SMS
        @param: url: related url
        @param: msg_id: Message Id of that SMS
        @param: sms_read_status: SMS read status**>
    struct smsEntry {
        String smsBody
        String smsFrom
        String smsTo
        String timeStamp
        String smsName
        String url
        Int64  msg_id
        Boolean sms_read_status
    }

   <** @description : PimProperties of device
       @param: btAddress : bdAddress of device
       @param: dbSyncList: sync list which will contain syncstate for all db
   **>
   struct pimProperties{
      String btAddress
      dBSyncStateMap  dbSyncState   	
   }
   
   <** @description : Default PimProperties
       @param: contactID : ContactId of a contact
       @param: FavIndex: Fav Index of a contact
       @param: SMSIndex: SMS Index of 
       @param: SMSId: List of SMS Ids
       @param: dbSyncList: sync list which will contain syncstate for all db  
   **>    	
   struct browsingData{
      UInt16 contactID
      UInt16 FavIndex
      UInt8 SMSIndex
      Int64 SMSId
      ResultSpecificMap ResultData  	
   }
   
  <** @description : Indicates alphaJumpTable
       @param:  alpha: this is alpha table
       @param:  startId: StartId of the correponding Alpha
   **> 
   
   struct alphaJumpTable {
   String alpha
   UInt16 startId
    }   
    
   <** @description : Indicates different list for db operation
       @param: ContactIdList: List of contact IDs to be added or deleted
       @param: SMSTemplate:New SMS template 
       @param: contactInfo: New contact details
       @param: SMSTemplateIdList: List of templateId's to be added or deleted 
   **>    
   struct InsertItems{
      UInt16[] ContactIdList
      String SMSTemplate
      phonebookEntry contactInfo
      UInt8[] SMSTemplateIdList     	
   }
        
    <** @description: connectionstate for service **>
    map connectionStateMap {
       eSupportedProfile to eConnectionStatus 
    }

    <** @description: HFP supported feature map **>
    map supportedFeatureMap {
        eSupportedFeature to Boolean
    }

   <** @description : Structure for expected phonebook entry, Mapeed between phonebookresult to bitmasked valued of 
                        eTelType , eContactNameField , eAddrtype , email , Extende feature
   **>
   map phonebookResultMap {
      phonebookResult to UInt8
   }
	
   <** @description : Structure for phone Name MAP **>
   map contactNameMap {
   eContactNameField to String
   } 
	
   <** @description : Structure for phone number MAP **>
  	map phoneNumberMap {
	eTelType to arString
  	}
  	
   <** @description : Structure for contact Address MAP **>
   map contactAddressMap {
   eAddrtype to ContactAddress
  	}
  	
   <** @description : Structure for contact Email MAP **>
   map contactEmailMap {
   eEmailtype to arString
  	}
  	
  	<** @description : Structure for contact extended feature MAP **>
   map contactExtendeFeatureMap {
   eExtraFeature to String
  	}
  	  	  	  	  	  	
   <** @description : syncstate for a particular db**>
   map dBSyncStateMap {
   eDatabaseType to eSyncState
   }
  
   <** @description : Mapping between filter and string**>
   map filterMap {
   eFilterType to String
   }
  
   <** @description : Required field values, if default is set default data will be sent based on config**>
   map requiredFieldMap {
   eResultType to Boolean
   }
    
   <** @description : Mapping of requested fields and value**>
   map ResultSpecificMap {
   eResultType to String
  }
  

    array tDeviceSearchEntryList of tDeviceSearchEntry
    array bondedDevList of bondedDev
    array unstableDeviceInfoList of deviceInfo
    array integerList of Int32
    array stringList of String

    array tSupportedFeatureList of eSupportedFeature
    array networkOperatorInfoList of networkOperatorInfo
    array signalChargeInfoList of signalChargeInfo
    array hfpSupportedFeaturesList of hfpSupportedFeatures
    array hfModeStatusList of hfModeStatus
    array vrModeStatusList of vrModeStatus
    array callstateInfoList of callStateInfo
    array callDurationList of callDuration
    array audioStatusList of audioStatus

   array phonebook of phonebookEntry
   array arcallstack of callstackEntry
   array arString of String
   array arSMS of smsEntry
   array pimPropertiesList of pimProperties
   array arfieldList of browsingData
   array alphaJumpList of alphaJumpTable
}
