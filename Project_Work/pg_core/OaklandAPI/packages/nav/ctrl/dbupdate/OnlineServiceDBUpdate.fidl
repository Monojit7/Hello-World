package com.harman.redbend
import com.harman.redbend.* from "OnlineServiceDBUpdateTypes.fidl"

<**
@description: This interface is provided by an online service for DB-Updates. Any 
client who wants to download a patch must use this interface. The interface is session based
which allows to support multiple clients at once. In principle a client starts a session by
passing information about its database configuration to the online service. If the online
service can support the client, a unique session id will be generated. By identifying the 
session using this session id the client can fetch a list of available updates. Beneth
the possibility to active polling for updates, the online service can inform the client
about changes in its update repository - e.g. if a new patch gets availble. From the
list of updates the client receive, the client can trigger a download of a patch 
Please note: in each session only one download is supported in parallel. 
Downloadprogress is indicated by a corresponding broadcast. A client is allowed 
to cancel a running download at any time. A session must be deleted by client.

A client must create a new session whenever a database patch is applied - in this case
the database configuration has changed and a existing session might not be valid anylonger.
By creating a session, the client can inform the backend about the outcome of previous
sessions - imagine in a previous session a update was downloaded and applied. This is 
done by the ClientStatus which indicates the success or failure of a patch procedure.

Roles:
The interface is designed in the way, that any client is more or less the master who is 
triggering any jobs/requests. This means a request always starts on client side. Imagine
System startup/ shutdown situations - the initial createSession and getUpdatePatchList 
will send by client. Any broadcast from server side is only allowed for a already existing
session with an already requested e.g. startDownload. 


Product versioning and configuration:
As you can see in the createSession call there are no detailed information about the
product itself. The product (db version/ configuration) will be passed as a ByteBuffer which
means that a client do not have to care about versioning. Appropriate updates will be 
identified by online service based on the product (the online service knows how to 
interpret the ByteBuffer). Furthermore the client status indicates the outcome of
previous sessions (if a patch was successfully applied or not). 

User verification and authentification:
As you notice, there is no method fur authentification/verification purpose. This 
responsibility is completely hosted on online service side. By reading the product-info
and knowing about user credentials the online service must be able to verify a client. 


Please read the description of the different method calls carefully to understand the
complete intention of the dataflow. 

Version 1.0 was published at July'15 after review-session with S.Bran (Toyota)

 **>


interface OnlineServiceDBUpdate {
	version { major 1 minor 0 }
	
	
	<**
	@description: create a session to onlineservice for dbupdate patch download
	
	at the start of each db-update online request a session to the online client 
	must be established. A client will use this method to tell the online service
	the details of his configuration - this is done by the parameter clientInfo. 
	Furthermore the client will inform the online service about the results of 
	previous update procedures.
	As a result the online service will answer with a unique session id with must
	be used in all subsequent requests. In error cases, e.g. if the online connection
	is not available or if the product db is not supported, the online service
	will answer with an error. 
	
	A session is valid for a complete lifecycle and can be will be dissolved by deleteSession. 
	Please note: for online service, there is no way to discard a session. 
	
	Please note: as soon as an update was applied successfully, the given 
	session might be invalid because the DB-configuration has changed. In this
	situation a client must delete the given session and create a new one.
	
	TBC.: at which granularity do we want to report errors? 
	**>
	method createSession
	{
		in {
			<** @description: information about the client (db, updatelib version)**>
			OnlineServiceDBUpdateTypes.SClientInfo clientInfo 
			<** @description: status of client - e.g. previous patch result **>
			OnlineServiceDBUpdateTypes.SClientStatus clientStatus
		}
		out {
			<** @description: session handle for the client **>
			OnlineServiceDBUpdateTypes.Handle sessionHandle	
		} 
		error {
			<** @description: error code if session can not be initiated **>
			E_ServiceUnavailable	
		}
	}
	
	<** 
	@description: release and delete an existing session
	
	A session created by createDBUpdateOnlineSession will exist the complete lifecycle and
	can only be removed by deleteDBUpdateOnlineSession from client side. This means
	that the client is responsible to maintain a session and assure that the session
	gets deleted as soon as it is not any longer necessary.
	**>
	method deleteSession
	{
		in {
			<** @description: session handle for the client **>
			OnlineServiceDBUpdateTypes.Handle sessionHandle 
		}
	}
	
	<** 
	@description: get a complete list of available updates for the given session
	
	With configuration given via createSession the online service can identify all
	appropriate updates for the registered client. By calling this method, the client
	can fetch a textual representation of the available patched at once (we expect a
	small list of updates ~10-20 entries only). The data provided via 
	online service is a list of SUpdatePatchInfo. This struct contains an identifier,
	a textual representation and a generic metaInfo structure. While the identifier
	is used to reference the entry in the list, the textual representation is used
	to describe the patch in a human understandable way (e.g. to display as a 
	text in the HMI). Please note that the client does not need to interpret any
	version or product information. Therefore the online service must provide
	a sorted list. This sorting order should be used in case in which the update
	is realize fully automatically. Due to the fact that the client does not need
	any knowledge about the patch content, it will select the patches in order of list.
	
	Please note: if there is no patch available for the client, the online service
	must answer with an empty list instead of an error. The error condition must be
	set only in real error conditions (e.g. online connection lost)
	  
	For further details about the struct, please rfer to the OnlineServiceDBUpdateTypes.fidl file.
	
	**>
	method getUpdatePatchList
	{
		in {
			<** @description: session handle for the client **>
			OnlineServiceDBUpdateTypes.Handle sessionHandle 
		}
		out {
			<** @description: ordered list of update descriptions **>
			OnlineServiceDBUpdateTypes.TUpdatePatchInfoList availablePatchesOrdered 
		}
		error {
			<** @description: error condition **>
			E_ServiceUnavailable 
			<** @description: invalid sessionId used **>
			E_InvalidSession 
		}
	}
	
	
	<** 
	@description: initiate a download of a certain patch
	
	A client must get a list of available patches (see getUpdatePatchList) in order to 
	call this method. A patch is identified by TPatchId which is unique for a patch
	and a given session. By calling this method, a download is initiated. In error case,
	e.g. patch not available, ... an appropriate error code is returned.
	
	In successful case the downloadUpdatePatch will start a download. The progress of
	the download will then be indicated by downloadProgress and the completion of
	the download by downloadComplete. If an error occurs during download, the 
	downloadFailed broadcast will be send out. Furthermore the client can cancel a started
	download by cancelDownload
	**>
	method startDownload
	{
		in {
			<** @description: session handle for the client **>
			OnlineServiceDBUpdateTypes.Handle sessionHandle 
			<** @description: identification of a certain patch **>
			OnlineServiceDBUpdateTypes.TPatchId patchId 
		}
		error {
			<** @description: error condition **>
			E_ServiceUnavailable
			<** @description: invalid sessionId used **> 
			E_InvalidSession
			<** @description: invalid patchId used **> 
			E_InvalidPatch 
		}
		
	}
	<** 
	@description: client can cancel a certain download
	
	All initiated downloads can be cancelled at any time by the client. As a result
	of this method the broadcast downloadFailed will be send out. 
	**>  
	method cancelDownload
	{
		in {
			<** @description: session handle for the client **>
			OnlineServiceDBUpdateTypes.Handle sessionHandle 
		} 
		error {
			<** @description: error condition **>
			E_ServiceUnavailable 
			<** @description: invalid sessionId used **>
			E_InvalidSession 
		}
	}
	
	
	<** 
	@description: a broadcast which allows the online service to notify
	a client about changes in the patch-repository on server. This trigger can be
	used by registered clients to get the latest list of available patches by 
	calling getUpdatePatchList. Please note: the broadcast does not tell which
	kind of update (add/update/delete of an (existing) patch) nor does the 
	broadcast identify a certain patch.    
	**>
	
	broadcast updatesAvailable
	{
		out {
			<** @description: session handle for the client **>
			OnlineServiceDBUpdateTypes.Handle sessionHandle 
		}
	}
	
	<** 
	@description: notify a client about the download progress in percent
	
	A client might be interested in the progress of a download in order to
	indicate this information to another client (e.g. HMI) or in order to
	decide about further steps (e.g. delay a shutdown). This broadcast is
	emitted in cycle manner (e.g. every progress change). The parameter 
	progress_percent describes in percentage (range allowed from 0 to 100). 
	As soon as the download is complete (reaching progress_percent=100) 
	the online service must indicate this by braodcasting downloadComplete. 
	**>  
	broadcast downloadProgress
	{
		out {
			<** @description: session handle for the client **>
			OnlineServiceDBUpdateTypes.Handle sessionHandle
			<** @description: progress of the download, allowed range 0..100 **> 
			UInt8 progress_percent 
		}
	}
	
	<**
 	@description: indicate the completion of a download 
	 
	this broadcast is used to indicate the completion of a download-
	process. - the successful as well as the failure case.
	The pathToPatch points to the patch-file somewhere on HDD. 
	Please note: the ownership and responsibility of maintaining the
	file is now transfered from online service to the client which means  
	that as soon as the patch is not anylonger used, the client must
	remove the file from HDD.
	 
	**>
	broadcast downloadComplete
	{
		out
		{
			<** @description: session handle for the client **>
			OnlineServiceDBUpdateTypes.Handle sessionHandle 
			<** @description: path to the patchfile (ownership translated to client) **>
			String pathToPatch
		}
	}
	
		<**
 	@description: indicate the abort of  a download 
	 
	this broadcast is used to indicate that a download was stopped because
	of an external error condition or because of an explicit cancelDownload
	request from client. 
	 
	**>
	broadcast downloadFailed
	{
		out
		{
			<** @description: session handle for the client **>
			OnlineServiceDBUpdateTypes.Handle sessionHandle 
		}
	}
	
	
}
