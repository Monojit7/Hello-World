package org.harman.nav.ctrl.dbupdate
<**@description: revision history
 1.0 - 16-Feb-2016: add fud of database to version information.
 0.3 - 22-Oct-2015: extension of the dealerupdate call. Additional information is provided. Intention was to put package parsing to the PF side.
**>

typeCollection DBUpdateTypes {  
  version { major 1 minor 0 }
  

  <**
  @description: id of a patch
  **>
  typedef TId is UInt32
  
  <**
  @description: description of an OTA incremental update
  This struct is used to describe a certain patch. It contains
  a short title (e.g. Germany Q1.15) and an optional more detailed
  description. The id is used to reference a certain patch
  from the list of given patches. The struct furthermore
  contains optional fields for patch size and estimated time
  to download and apply.
  **>
  struct SDBOTAUpdate
  {
    <**@description: id to identify a patch (mandatory)**>
    TId      id                 
    <**@description: information about the patch, e.g. Germany Q1.15 (mandatory)**>
    String    title              
    <**@description: additional optional information about the patch content (optional) **>
    String    description        
    <**@description: size of the patch in bytes (optional) **>
    UInt32    size_byte          
    <**@description: expected time to download and to apply the patch (optional) **>
    UInt32    estimatedTime_sec  
  }
  
  <**@description: a list of available patches **>
  array TOTAUpdateList of SDBOTAUpdate    
  
  <**@description: enumeration identifies the differnt update types**>
  enumeration E_UpdateType
  {
    <**@description: update type unknown/default: should be used if there is only one update type supported**>
    E_UNKNOWN_DEFAULT
    <**@description: incremental update (OTA-update)**>
    E_INCREMENTAL_UPDATE
    <**@description: partial update (several update regions only)**>
    E_PARTIAL_UPDATE
    <**@description: full update (all regions and libs)**>
    E_FULL_UPDATE
    <**@description: none update (media has no update or primary check failed)**>
    E_NO_UPDATE
  }
  
  
  <**
  @description: struct describing a full/partial update
  this structure combines the different dealer update types
  in a single container: partial and full update.
  For the customer a mandatory title describes in short the
  content of the update. An optional description field allows
  to provide more detailed information. The type identifier
  is more or less for information only - it points out if
  this is a full update (all UR getting updated) or a partial
  one (e.g. only germany is getting updated).
  **>
  struct SDBDealerUpdate
  {
    <**@description: id for this update **>
    TId           id
    <**@description: information about update type**>                            
    E_UpdateType  type
    <**@description: version of update which is used by version check functionality**>
    SVersion _version
    <**@description: mandatory short description of the update, e.g. "Central-Europe Q15.1"**>
    String        title
    <**@description: optional detailed description of the update, e.g. list of URs, date, version**>
    String        description
    <**@description: full path to root folder of DB, does not contain ROOT.NDS because there can be another entry point**>
    String        path
  }
  
  <**
    @description: DB version information
    This struct is used to give information about the database that is currently
    used in HU. The details about representation of version are project specific.
   **>
  struct SVersion
  {
    <**@description: textual description of DB version, e.g. "ECE-101151"**>
    String     db_version        
    <**@description: optional textual description**>
    String     title             
    <**@description: textual description of ndsupdate lib version **>
    String     lib_version       
    <**@description: UTC of when the current database was first used. **>
    UInt32     fud_db
  }
  
  <**
  @description: enumration used to describe the different requests
  for updates. 
  **>
  enumeration E_RequestMode {
    <**@description: request all iu according to project/default behaviour **>
    E_REQUEST_DEFAULT_IU
    <**@description: request all iu which are available for current system **>
    E_REQUEST_ALL_IU
    <**@description: request all iu around the current car position **>
    E_REQUEST_CPP_IU
    <**@description: request all iu around the desctination **>
    E_REQUEST_DEST_IU
  }

}

