

<DSI>
   <Name>com_harman_redbend_OnlineServiceDBUpdateTypes</Name>
   <ID>1</ID>   
   <Extern>true</Extern>
   <Version>
      <Major>1</Major>
      <Minor>0</Minor>
   </Version>
   <Includes>
   </Includes>
   <Enums>
    <Enum>
      <Name>ClientStatus</Name>
      <Description>the status enumeration is send to the online service during
      	createDBUpdateOnlineSession. It is used to inform the online service about 
      	preceeding update scenarios. In general the ClientStatus Status_okay indicates
      	that in the previous lifecycle (acc-cycle) there was no update-procedure finished.
      	In contrast, Status_patch_successful indicates a patch was successfully applied while
      	Status_patch_failure informs the service about failure during patching and successful
      	rollback.
      	The status paramtere is always coupled with a patch-information. This patch-information
      	identifies the applied patch - exception in Status_okay, no patch information is given.</Description>
      <ID>2</ID>
      <Description></Description>
      <EnumIDs>
         <EnumID>
            <Name>ClientStatus_Status_okay</Name>
            <ID>3</ID>
            <Description></Description>
         </EnumID>
         <EnumID>
            <Name>ClientStatus_Status_patch_successful</Name>
            <ID>4</ID>
            <Description></Description>
         </EnumID>
         <EnumID>
            <Name>ClientStatus_Status_patch_failure</Name>
            <ID>5</ID>
            <Description></Description>
         </EnumID>
      </EnumIDs>
   </Enum>
   </Enums>
   <DataTypes>
       <DataType>
          <Name>SProductInfo</Name>
          <ID>6</ID>
          <Description>description of a DB as a product
          	  
          	  this structure is used to describe the database and its version
          	  and is provided by a client to an online service. The online 
          	  service uses the information to identify appropriate updates
          	  for the product. For the client, this information is transparent.
          	  The structure contains the following elements:
          	  metainfo: generic buffer which might contain metainfo. The content 
          	  of this buffer based on agreement between concrete service-client
          	  productinfo: is a generic, mandatory buffer of bytes which describes
          	  the database, its content and its version(s). The concrete content
          	  of the buffer depends on the agreements between online service
          	  and project.</Description>	  	
         <Kind>Structure</Kind>
         <Fields>
            <Field>
               <Name>metaInfo</Name>
   	        <Description>generic meta information</Description>
               <ID>7</ID>
   <Type>CHBBuffer</Type>
               <Description>generic meta information</Description>
            </Field>
            <Field>
               <Name>productInfo</Name>
   	        <Description>information about database, version and content of db</Description>
               <ID>8</ID>
   <Type>CHBBuffer</Type>
               <Description>information about database, version and content of db</Description>
            </Field>
         </Fields>
      </DataType>
       <DataType>
          <Name>Version</Name>
          <ID>9</ID>
          <Description>version description</Description>	  	
         <Kind>Structure</Kind>
         <Fields>
            <Field>
               <Name>versionMajor</Name>
   	        <Description>when the major changes, then backward compatibility with previous releases is not granted.</Description>
               <ID>10</ID>
   <Type>UInt16</Type>
               <Description>when the major changes, then backward compatibility with previous releases is not granted.</Description>
            </Field>
            <Field>
               <Name>versionMinor</Name>
   	        <Description>when the minor changes, then backward compatibility with previous releases is granted, but something changed in the implementation of the API (e.g. new methods may have been added).</Description>
               <ID>11</ID>
   <Type>UInt16</Type>
               <Description>when the minor changes, then backward compatibility with previous releases is granted, but something changed in the implementation of the API (e.g. new methods may have been added).</Description>
            </Field>
            <Field>
               <Name>versionMicro</Name>
   	        <Description>when the micro changes, then backward compatibility with previous releases is granted (bug fixes or documentation modifications).</Description>
               <ID>12</ID>
   <Type>UInt16</Type>
               <Description>when the micro changes, then backward compatibility with previous releases is granted (bug fixes or documentation modifications).</Description>
            </Field>
            <Field>
               <Name>date</Name>
   	        <Description>release date (e.g. 21-06-2011).</Description>
               <ID>13</ID>
   <Type>CHBString</Type>
               <Description>release date (e.g. 21-06-2011).</Description>
            </Field>
         </Fields>
      </DataType>
       <DataType>
          <Name>SClientInfo</Name>
          <ID>14</ID>
          <Description>information about the client which starts an online session
          	
          	The OnlineServiceDBUpdate interface is a session based interface. At the beginning
          	a client must request a session. This struct should allow an online service
          	to identify his associated client and to select appropriate updates. The
          	struct contains the following members:
          	updatelib: describes the version of the update lib that is used on client side
          	dbInfo</Description>	  	
         <Kind>Structure</Kind>
         <Fields>
            <Field>
               <Name>updateLib</Name>
   	        <Description>version of the updatelib used</Description>
               <ID>15</ID>
   <Type>Version</Type>
               <Description>version of the updatelib used</Description>
            </Field>
            <Field>
               <Name>dbInfo</Name>
   	        <Description>product information of the DB</Description>
               <ID>16</ID>
   <Type>SProductInfo</Type>
               <Description>product information of the DB</Description>
            </Field>
         </Fields>
      </DataType>
   <DataType>
      <Name>TPatchId</Name>
      <ID>17</ID>
      <Description>an identifier created by online service in order
      	to reference a certain patch for a certain client. A TPatchId of 0 indicates
      	an invalid patchId. Unfortunately the france-language does not yet
      	support constants.
      	See SUpdatePatchInfo for further details 
      	
      	Please note:
      	TPatchId Constant_Invalid_PatchId = 0</Description>	  	
      <Kind>Typedef</Kind>
      <Container></Container>
      <BaseType>UInt32</BaseType>
   </DataType>
       <DataType>
          <Name>SClientStatus</Name>
          <ID>18</ID>
          <Description>the client status is send to online service during the
          	createSession call. It give information about the current previous patching-operations
          	e.g. applying a certain patch. This information can be used by online service to
          	identify erroneous patch-files.
          	The ClientStatus parameter identifies the operation that was done in session
          	e.g. lifecycle (acc-cycle). If there was no patch applied, the status is Status_okay and
          	the TPatchId is pointing to an invalid patchId. If a patch was applied in previous session,
          	the status tells about the result of the patching process:
          	Status_patch_successful indicates a successful patch procedure
          	Status_patch_failure indicates a unsuccessful patch procedure and a rollback to previous DB
          	In both cases the TPatchId points to the patch that was applied in previous session (the
          	patchId was fetched by getUpdatePatchList as part of the SUpdatePatchInfo list).
          	
          	Please note: the status-parameter is always Status_okay only after the appliance of
          	a patch in previous session, the status-parameter migth be not Status_okay. In other words:
          	the success or failure of a patching process is notified only once!
          	)</Description>	  	
         <Kind>Structure</Kind>
         <Fields>
            <Field>
               <Name>status</Name>
   	        <Description>status of the client describing previous patching operations
   	        		Status_okay: no patch was applied in previous session, patchId is Constant_Invalid_PatchId = 0
   	        		Status_patch_successful: patch was successfully applied, patchId points to corresponding id
   	        		Status_patch_failure: patching failed, rollback was done, patchId points to corresponding id</Description>
               <ID>19</ID>
   <Type>ClientStatus</Type>
               <Description>status of the client describing previous patching operations
               		Status_okay: no patch was applied in previous session, patchId is Constant_Invalid_PatchId = 0
               		Status_patch_successful: patch was successfully applied, patchId points to corresponding id
               		Status_patch_failure: patching failed, rollback was done, patchId points to corresponding id</Description>
            </Field>
            <Field>
               <Name>patchId</Name>
   	        <Description>identification of patch which was fetched by using getUpdatePatchList request.
   	        		In case of Status_okay, the patchId is equal to Constant_Invalid_PatchId which indicates no
   	        		valid patch</Description>
               <ID>20</ID>
   <Type>TPatchId</Type>
               <Description>identification of patch which was fetched by using getUpdatePatchList request.
               		In case of Status_okay, the patchId is equal to Constant_Invalid_PatchId which indicates no
               		valid patch</Description>
            </Field>
         </Fields>
      </DataType>
       <DataType>
          <Name>SUpdatePatchInfo</Name>
          <ID>21</ID>
          <Description>textual description of a certain update  
          	  
          	  A client can use getUpdatePatchList to get all available 
          	  patches for his target-system. The online service provides
          	  a list of the struct SUpdatePatchInfo which is more or less
          	  a textual description of the patch. The struct contains three
          	  elements:
          	  id: the id is created by online service and is used by the service
          	  to identify a SUpdatePatchInfo.
          	  description: is a textual representation which is used to inform
          	  a user about the patch content/details (e.g. "Germany v13-1-2015 Q1")
          	  metainfo: generic buffer which might contain metainfo. The content 
          	  of this buffer based on agreement between concrete service-client</Description>	  	
         <Kind>Structure</Kind>
         <Fields>
            <Field>
               <Name>id</Name>
   	        <Description>id created by backend to identify this
   	        		SUpdateRegionInfo (e.g. out of a list of SUpdateRegionPatchInfo)</Description>
               <ID>22</ID>
   <Type>TPatchId</Type>
               <Description>id created by backend to identify this
               		SUpdateRegionInfo (e.g. out of a list of SUpdateRegionPatchInfo)</Description>
            </Field>
            <Field>
               <Name>description</Name>
   	        <Description>a textual description of the patch e.g. used to display in HMI</Description>
               <ID>23</ID>
   <Type>CHBString</Type>
               <Description>a textual description of the patch e.g. used to display in HMI</Description>
            </Field>
            <Field>
               <Name>metaInfo</Name>
   	        <Description>generic meta information</Description>
               <ID>24</ID>
   <Type>CHBBuffer</Type>
               <Description>generic meta information</Description>
            </Field>
         </Fields>
      </DataType>
   <DataType>
      <Name>TUpdatePatchInfoList</Name>
      <ID>25</ID>
      <Description>a list of SUpdatePatchInfo structures</Description>	  	
      <Kind>Typedef</Kind>
      <Container>THBVector</Container>
      <BaseType>SUpdatePatchInfo</BaseType>
   </DataType>
   <DataType>
      <Name>Handle</Name>
      <ID>26</ID>
      <Description>typedef for session handle</Description>	  	
      <Kind>Typedef</Kind>
      <Container></Container>
      <BaseType>UInt32</BaseType>
   </DataType>
	    
   </DataTypes>
</DSI>
