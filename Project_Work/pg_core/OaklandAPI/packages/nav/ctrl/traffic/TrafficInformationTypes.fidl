package org.harman.nav.ctrl.traffic

import org.harman.nav.ctrl.* from "../common/CommonTypes.fidl"

typeCollection TrafficInformationTypes {
    version { major 2 minor 1}

    <**
    @description: identifier of current source selection
    **>
    enumeration TrafficInformationError
    {
    	<** @description: The message for which the request was triggered is not available **>
        MESSAGE_NOT_AVAILABLE
        <** @description: Unspecified error **>
        FAILED
    }

    <**
    @description: identifier of current source selection
    **>
    enumeration SourceSelection
    {
        <** @description: TI is disabled **>
        Off
        <** @description: radio reception e.g. TMC **>
        RDS
        <** @description: digital radio reception e.g. TMC **>
        Digital
        <** @description: digital satellite reception e.g. TMC-SiriusXM **>
        Satellite
        <** @description: point-2-point online reception e.g. TPEG **>
        Online
    }
    <**
    @description: set the dynamic route option
    **>
    enumeration RouteDynamics
    {
        <** @description: no route dynamics **>
        Off
        <** @description: automatic rerouting in case of message-on-route **>
        Automatic
        <** @description: user will get informed and decides if a new route will be guided **>
        Manual
    }

    <**
    @description: a popup type which specifies the kind of pop-up indication
    **>
    enumeration PopupType
    {
        <** @description: a generic popup caused by a ti-message **>
        Misc
        <** @description: a ti emergency message is received **>
        Emergency
        <** @description: a dynamic detour/reroute suggestion (because of ti message) **>
        Reroute
    }
    
    <**
    @description: Enumeration of different cardinal directions
    **>
    enumeration Direction
    {
    	North
    	NorthWest
    	West
    	SouthWest
    	South
    	SouthEast
    	East
    	NorthEast
    }

    <**
    @description: unique identifier of a certain TI message
    **>
    typedef TMessageId is UInt64
    array TMessageIds of TMessageId

    <**
    @description: enum describes the refresh rate settings
    **>
    enumeration OnlineRefreshMode
    {
        <** @description: set to automodus, frequency specifies high (!=0) or low (0) frequency **>
        Auto
        <** @description: refresh frequency will be provided explicitly, the frequency 0 will be interpreted as "only on explicit request" **>
        Manual
    }

    <**
    @description: describes the refresh settings for online connection
    This struct is used the specify the frequency in which ti online data
    will be fetched from server. Currently there are two modes available.
    With auto modus the refresh rate is specified by server. The client can
    select between high and low frequency by setting the frequency to 0 - low
    and !=0 - high. In manual mode the frequency specifies an interval in seconds in
    which new online ti data is requested from server, if the value 0 is set, traffic
	data will only be refreshed on explicit request.
    **>
    struct SOnlineRefreshSetting
    {
        <** @description: refresh setting (auto, manual, ...) **>
        OnlineRefreshMode mode
        <** @description: frequency in seconds, in which the online data shall be queried
		                  In auto mode only values "!=0"=>"high" and "==0"=>"low" will be distinguished.
						  In manual mode, values "!=0"=>"frequency in seconds" and "==0"=>"only on explicit request" will be distinguished. **>
        UInt16 frequency
    }

    <**
    @description: configuration structure to set customer related settings for traffic messages
    **>
    struct SConfig
    {
        <** @description: selected TI source **>
        SourceSelection source
        <** @description: flag, which indicates whether online is allowed as source in roaming state **>
        Boolean roamingAllowed
        <** @description: refresh setting for online ti data**>
        SOnlineRefreshSetting refreshSetting
        <** @description: source selection if online cannot be used (e.g., no connection, no roaming desired) **>
        SourceSelection onlineFallbackSource
        <** @description: manual selection of TMC station (empty string indicates that the system shall automatically tune to a suitable station)**>
        String selectedTmcStation
        <** @description: only TI messages in this radius are shown **>
        UInt8 radiusFilter_km
        <** @description: dynamic route behaviour (off/auto/manual) **>
        RouteDynamics routesettings
    }

    <**
    @description: representation of a base TI message

    this struct will be used to represent the content of a
    TI messages as it is expected in the overview-list.
    A TI message is uniquely identified by it's id.
    According to spec, we suggest to use the SBaseMessage
    in the following way:
    -----------------------------------------------------------------------------------
    |RoadIcon | routeSegmentFrom - routeSegmentTo | eventIcon | distance | headingIcon |
    |         | / routeSegmentDesc                |           |          |             |
    -----------------------------------------------------------------------------------
    **>
    struct SBaseMessage
    {
        <** @description: unique identifier of the traffic message **>
        TMessageId               id
        <** @description: icon, which indicates the road on which the traffic event is located (e.g., road number sign) **>
        CommonTypes.SIcon        roadIcon
        <** @description: name of the route segment, at which the traffic event starts **>
        String                   routeSegmentFrom
        <** @description: name of the route segment, at which the traffic event ends **>
        String                   routeSegmentTo
        <** @description: description of the route segment, on which the traffic event is located **>
        String                   routeSegmentDesc
        <** @description: icon, which indicates the incident associated with the traffic event **>
        CommonTypes.SIcon        eventIcon
        <** @description: value, which indicates the cardinal direction, in which the event is located **>
        Direction                direction
        <** @description: distance (in decimeters) to the traffic event **>
        CommonTypes.TDistance_dm distance
        <** @description: flag, which indicates whether the traffic event is located on the guided route **>
        Boolean                  isOnroute
        <** @description: flag, which indicates whether the traffic event is actively detoured (see toggleDetourStatus) **>
        Boolean                  isDetoured
        <** @description: tbc **>
        Boolean                  hasRouteFromTo
    }
    <**
    @description: a list of basemessages - used e.g. for the sorted list of TI-messages
    **>
    array TBaseMessages of SBaseMessage

    <**
    @description: representation of a TI message

    this struct will be used in order to display the details of a certain
    TI message. It contains a nested SBaseMessage which is used
    to identify the basic credentials of the TI messages. Furthermore
    it provides a lenght of the incident, followed by a description.
    The description is given in the language selected via config or
    - if no appropriate translation is available - in the fallback
    language. Please note: the description is a list of strings
    in which each entry represents a description of one event/incident
    (imagine multi-events). In other words: an entry does not represent
    a textline in the HMI!
    **>
    struct SMessage
    {
        <** @description: index of the traffic message within the message list **>
        Int32                       indexInList
        <** @description: basic credentials of traffic message **>
        SBaseMessage                base
        <** @description: length on guided route, which is affected by the traffic message **>
        CommonTypes.TDistance_dm    length
        <** @description: delay caused on the guided route by this traffic message **>
        CommonTypes.TTime_sec       delay
        <** @description: location, at which the traffic event starts **>
        String                      fromLocation
        <** @description: location, at which the traffic event ends **>
        String                      toLocation
        <** @description: textual description of the traffic event (multi-events: each entry represents the description of one event/indcident) **>
        String []                   description
     }

    <**
    @description: list of ti messages
    **>
    array TMessages of SMessage
}