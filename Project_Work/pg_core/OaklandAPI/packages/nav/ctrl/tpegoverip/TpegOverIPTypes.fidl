package org.harman.nav.ctrl.tpegoverip

typeCollection TpegOverIPTypes {
   version { major 1  minor 1}

   <** @description: Session identifier, for which traffic data can be requested.
                     The session identifier of -1 indicates an error (e.g., too many sessions, no valid configuration, ...). **>
   typedef Handle is Int32

   <** @description: Enumeration of different error cases **>
   enumeration ErrorCode
   {
      <** @description: Error described by enum (meaning to be clarified: Server connection lost, invalid server response, ...) **>
      ERROR
   }

   <** @description: State of the internet connection of the service **>
   enumeration ServiceState
   {
      <** @description: no internet connection established **>
      Offline
      <** @description: internet connection established, connection is not in roaming mode **>
      Online
      <** @description: internet connection established, connection is in roaming mode **>
      Roaming
   }

   <** @description: Numerical description of the version of an application **>
   struct Version
   {
      <** @description : when the major changes, then backward compatibility with previous releases is not granted.**>
      UInt16 versionMajor
      <** @description : when the minor changes, then backward compatibility with previous releases is granted, but something changed in the implementation of the API (e.g. new methods may have been added).**>
      UInt16 versionMinor
      <** @description : when the micro changes, then backward compatibility with previous releases is granted (bug fixes or documentation modifications).**>
      UInt16 versionMicro
   }

   <** @description: Coordinates in WGS84 format **>
   struct Coordinate2D
   {
      Double latitude
      Double longitude
   }

   <** @description: Compression method, with which received TPEG data can/will be compressed **>
   enumeration CompressionType
   {
      <** @description: TPEG data will not be compressed **>
      COMPRESSION_TYPE_UNCOMPRESSED
      <** @description: TPEG data will be compressed using gzip **>
      COMPRESSION_TYPE_GZIP
   }

   <** @description: Encryption type, which can/will be used **>
   enumeration EncryptionType
   {
      <** @description: No encryption will be used **>
      ENCRYPTION_TYPE_UNENCRYPTED
   }

   <** @description: Type of data, which can/will be provided **>
   enumeration DataType
   {
      <** @description: Binary TPEG data **>
      DATA_TYPE_TPEG_BINARY
      <** @description: TPEG data is contained in an xml envelope **>
      DATA_TYPE_XML_ENVELOPE
   }
   
   <**
   @description: recommandation of refresh rates for this online client
   This struct specifies the valid range of request-intervals for an
   online service. All values are given as a multiple of seconds. 
   The recommandation is used to prevent excessive load conditions on 
   server side. While the highProfile_sec specifies the mandatory lower
   bound of time between two requests, the lowProfile_sec specifies the
   recommended upper bound of time between two requests.
   **>
   struct RefreshRecommendation
   {
      <** @description: valid minimum time between two requests **>
      UInt16 highProfile_sec
      <** @description: valid maximum time between two requests **>
      UInt16 lowProfile_sec
   }

   <** @description: Configuration of TPEG data offered by the server **>
   struct ServerConfig
   {
      <** @description: Type of used compression **>
      CompressionType compressionType
      <** @description: Type of used encryption **>
      EncryptionType encryptionType
      <** @description: Type of used data **>
      DataType dataType
      <** @description: refresh recommandation for a client **>
      RefreshRecommendation refresh
   }

   <** @description: List of possible server configurations **>
   array ServerConfigs of ServerConfig
   
   <** @description: Unique identification of a TMC location table **>
   struct STmcLocationTable
   {
      <** @description: unique identifier of TMC location table (LTN) **>
      UInt32 locationTableNumber
      <** @description: version identifier of the TMC location table (certification number) in format "1 or 2 digits, ., 1 or 2 digits" **>
      String versionId
      <** @description: country code in ISO-3166-1 alpha 3 code **>
      String countryCode
   }

   <** @description: List of TMC location tables **>
   array TTmcLocationTables of STmcLocationTable

   <** @description: Enumeration of application types supported by the TPEG group **>
   enumeration TPEGApplicationType
   {
      <** @description: Traffic event compact **>
      TEC
      <** @description: Traffic flow prediction **>
      TFP
      <** @description: Public transport information **>
      PTI
      <** @description: Parking information **>
      PKI
      <** @description: Speed limit information **>
      SPI
      <** @description: Weather **>
      WEA
   }

   <** @description: Types of location referencing **>
   enumeration LocationReferencingType
   {
      <** @description: Decoding according to AGORA-C standard **>
      DLR1
      <** @description: Decoding using TMC location tables **>
      TMC_LOC
      <** @description: Decoding using TMC location tables with precise location referencing **>
      TMC_LOC_PLR
      <** @description: Decoding according to OpenLR standard **>
      OPENLR
   }

   <** @description: Information about a location referencing method **>
   struct SLocationReferencingInfo
   {
      <** @description: Type of location referencing **>
      LocationReferencingType type
      <** @description: Maximum number of messages supported when using the set location referencing method **>
      UInt16 maxNbrMessages
   }

   <** @description: List of location referencing information **>
   array TLocationReferencingInfos of SLocationReferencingInfo
   
   <** @description: Information about a TPEG application **>
   struct SApplicationInfo
   {
      <** @description: Type of TPEG application **>
      TPEGApplicationType type
      <** @description: version of used TPEGApplication **>
      Version appVersion
      <** @description: List of supported location referencing methods and associated maximum number of messages **>
      TLocationReferencingInfos locationReferencingInfos
   }

   <** @description: List of decoding mechanisms **>
   array TApplicationInfos of SApplicationInfo
   
   <** @description: Configuration parameters for traffic over IP **>
   struct ClientConfig
   {
      <** @description: Database version encoded in a byte buffer (specifics are delegated to project-DB) **>
      ByteBuffer databaseVersion
      <** @description: List of TMC location tables, which will be used for decoding of traffic over IP **>
      TTmcLocationTables tmcTables
      <** @description: List of applications, which support traffic over IP **>
      TApplicationInfos applicationInfos
      <** @description: Server configuration, with which the server shall send TPEG over IP data. **>
      ServerConfig serverConfig
   }
}