//Copyright (C) 2015
//Company       Harman/Becker Automotive Systems GmbH
//              All Rights Reserved
//              Secrecy Level STRICTLY CONFIDENTIAL
//
//@author       thomas.feldbauer@harman.com
//


package org.harman.nav.ctrl.mapv

import org.harman.nav.ctrl.CommonTypes.* from "../common/CommonTypes.fidl"
import org.harman.nav.ctrl.mapv.MapViewControlTypes.* from "MapViewControlTypes.fidl"


<**
	@description : MapViewerController = This interface offers functions to control the MapViewer
**>

interface MapViewControl {

	version {
		major 1
		minor 2
	}

   attribute Status status readonly
   
	<**
		@description : GetVersion = This method returns the API version implemented by the server application
	**>
	method getVersion {
		out {
			Version ^version
		}
	}

	<**
		@description : createMapViewInstance = This method creates a new map instance
	**>
	method createMapViewInstance {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle
			
			Dimension mapViewSize

			<**
				@description : mapViewType = enum(INVALID,MAIN_MAP,SPLIT_SCREEN, ... )
			**>
			MapViewType mapViewType
		}
		out {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
	}

	<**
		@description : releaseMapViewInstance = This method releases (i.e. destroys) a given map instance. Only invisible map instances can be released
	**>
	method releaseMapViewInstance {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
	}

	<**
		@description : getMapViewType = This method returns the map type of a map instance as it was set using CreateMapViewInstance
	**>
	method getMapViewType {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {

			<**
				@description : mapViewType = enum(INVALID,MAIN_MAP,SPLIT_SCREEN, ... )
			**>
			MapViewType mapViewType
		}
	}

	<**
		@description : getSupportedMapViewTypes = This method retrieves the supported map view types
	**>
	method getSupportedMapViewTypes {
		out {
			MapViewType [] mapViewTypeList
		}
	}

	<**
		@description : setTargetPoint = This method sets the position of the point the camera is always aimed at
	**>
	method setTargetPoint {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
			
			Coordinate3D targetPoint
		}
	}

	<**
		@description : getTargetPoint = This method retrieves the target point position
	**>
	method getTargetPoint {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {
			Coordinate3D targetPoint
		}
	}

	<**
		@description : setFollowCarMode = This method sets the FollowCar mode
	**>
	method setFollowCarMode {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : followCarMode = flag. If true, the current car position is interpreted as position of the point the camera must look at
			**>
			Boolean followCarMode
		}
	}

	<**
		@description : getFollowCarMode = This method returns the current FollowCar-mode
	**>
	method getFollowCarMode {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {

			<**
				@description : followCarMode = flag. If true, the current car position is interpreted as position of the point the camera must look at
			**>
			Boolean followCarMode
		}
	}

	<**
		@description : setCameraPosition = This method sets the coordinates of the point at which the camera must be positioned
	**>
	method setCameraPosition {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
			
			Coordinate3D position
		}
	}

	<**
		@description : getCameraPosition = This method returns the coordinates of the point at which the camera is positioned
	**>
	method getCameraPosition {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {
			Coordinate3D position
		}
	}

	<**
		@description : setCameraHeadingAngle = This method sets the map view heading angle
	**>
	method setCameraHeadingAngle {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : heading = heading angle in degrees. Range [0:360]
			**>
			Int32 heading
		}
	}

	<**
		@description : setCameraHeadingToTarget = This method sets the camera heading in such a way, that the camera always looks at a given target
	**>
	method setCameraHeadingToTarget {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
			
			Coordinate2D target
		}
	}

	<**
		@description : setCameraHeadingTrackUp = This method sets the camera heading in such a way, that the camera always looks in the direction in which the car is moving
	**>
	method setCameraHeadingTrackUp {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
	}

	<**
		@description : getCameraHeading = This method returns the current camera heading
	**>
	method getCameraHeading {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {

			<**
				@description : headingType = enum(INVALID,CONSTANT_ANGLE,TRACK_UP,TOWARDS_TARGET, ... )
			**>
			UInt16 headingType

			<**
				@description : headingAngle = heading angle in degrees measured from the North axis clockwise. Range[0:360]
			**>
			Int32 headingAngle
			
			Coordinate2D target
		}
	}

	<**
		@description : setCameraTiltAngle = This method sets the camera tilt angle
	**>
	method setCameraTiltAngle {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : tilt = tilt angle in degrees. Range [-180:180]
			**>
			Int32 tilt
		}
	}

	<**
		@description : getCameraTiltAngle = This method returns the camera tilt angle
	**>
	method getCameraTiltAngle {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {

			<**
				@description : tilt = tilt angle in degrees. Range [-180:180]
			**>
			Int32 tilt
		}
	}

	<**
		@description : setCameraRollAngle = This method sets the camera roll angle
	**>
	method setCameraRollAngle {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : roll = roll angle in degrees. Range [-180:180]
			**>
			Int32 roll
		}
	}

	<**
		@description : getCameraRollAngle = This method returns the camera roll angle
	**>
	method getCameraRollAngle {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {

			<**
				@description : roll = roll angle in degrees. Range [-180:180]
			**>
			Int32 roll
		}
	}

	<**
		@description : setCameraDistanceFromTargetPoint = This method sets the mode and the camera distance from the target point
	**>
	method setCameraDistanceFromTargetPoint {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : distance = distance from the view point in meters
			**>
			UInt32 distance
		}
	}

	<**
		@description : getCameraDistanceFromTargetPoint = This method gets the mode and the camera distance from the target point
	**>
	method getCameraDistanceFromTargetPoint {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {

			<**
				@description : distance = distance from the view point in meters
			**>
			UInt32 distance
		}
	}

	<**
		@description : setMapViewScaleMode = This method sets the scaling mode.
	**>
	method setMapViewScaleMode {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : scaleMode = enum(AUTOMATIC,MANUAL,HYBRID)
			**>
			MapScaleMode scaleMode
		}
	}

	<**
		@description : getMapViewScaleMode = This method gets the scaling mode.
	**>
	method getMapViewScaleMode {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {

			<**
				@description : scaleMode = enum(AUTOMATIC,MANUAL,HYBRID)
			**>
			MapScaleMode scaleMode
		}
	}

	<**
		@description : getSupportedMapViewScaleModes = This method gets the supported scaling modes.
	**>
	method getSupportedMapViewScaleModes {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {
			MapScaleMode [] scaleModeList
		}
	}

	<**
		@description : addMapViewScaleChangedListener = This method adds a listener which is notified when map view scale changes.
	**>
	method addMapViewScaleChangedListener {
	}

	<**
		@description : removeMapViewScaleChangedListener = This method removes a listener which is notified when map view scale changes.
	**>
	method removeMapViewScaleChangedListener {
	}

	<**
		@description : setCameraHeight = This method sets the camera height
	**>
	method setCameraHeight {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : height = height from the ground in meters
			**>
			UInt32 height
		}
	}

	<**
		@description : getCameraHeight = This method gets the camera height
	**>
	method getCameraHeight {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {

			<**
				@description : height = height from the ground in meters
			**>
			UInt32 height
		}
	}

	<**
		@description : setMapViewPerspective = This method sets the map perspective
	**>
	method setMapViewPerspective {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : perspective = enum(INVALID,2D,3D, ... )
			**>
			MapPerspective perspective
		}
	}

	<**
		@description : getMapViewPerspective = This method returns the current map perspective
	**>
	method getMapViewPerspective {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {

			<**
				@description : perspective = enum(INVALID,2D,3D, ... )
			**>
			MapPerspective perspective
		}
	}

	<**
		@description : getSupportedMapViewPerspectives = This method retrieves the supported mapview perspectives
	**>
	method getSupportedMapViewPerspectives {
		out {
			MapPerspective[] perspectiveList
		}
	}

	<**
		@description : setMapViewObjectVisibility = This method specifies the type of objects to show on the map.
	**>
	method setMapViewObjectVisibility {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
			
			MapObjectVisibility objectVisibilityList
		}
	}

	<**
		@description : getMapViewObjectVisibility = This method gets the type of objects shown on the map.
	**>
	method getMapViewObjectVisibility {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {
			MapObjectVisibility objectVisibilityList
		}
	}

	<**
		@description : getSupportedMapViewObjectVisibilities = This method gets the supported object visibilities.
	**>
	method getSupportedMapViewObjectVisibilities {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {
			MapObject [] objectVisibilityList
		}
	}

	<**
		@description : getScaleList = This method returns a list of supported map scales
	**>
	method getScaleList {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {
			MapScale[] scaleList
		}
	}

	<**
		@description : setMapViewScale = This method sets the map scale by specifying a ScaleID
	**>
	method setMapViewScale {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : scaleID = scale identifier. Range[0:256]
			**>
			UInt16 scaleID
		}
	}

	<**
		@description : setMapViewScaleByDelta = This method sets the map scale by specifying a delta value with respect to the currently set ScaleID
	**>
	method setMapViewScaleByDelta {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : scaleDelta = This parameter can have either positive or negative values. '0' means no change. Positive values indicate larger scales
			**>
			Int16 scaleDelta
		}
	}

	<**
		@description : setMapViewScaleByMetersPerPixel = This method sets the map scale by specifying the number of meters that a pixel represents
	**>
	method setMapViewScaleByMetersPerPixel {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : metersPerPixel = meters per pixel
			**>
			Double metersPerPixel
		}
	}

	<**
		@description : getMapViewScale = This method returns the currently used map scale
	**>
	method getMapViewScale {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {

			<**
				@description : scaleID = scale identifier. Range[0:256]
			**>
			Int8 scaleID

			<**
				@description : isMinMax = enum(INVALID,MIN,MAX,MID, ... )
			**>
			MapScaleType isMinMax
		}
	}

	<**
		@description : setMapViewBoundingBox = This method sets the map bounding box
	**>
	method setMapViewBoundingBox {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
			
			ScreenRectangle boundingBox
		}
	}

	<**
		@description : getMapViewBoundingBox = This method returns the bounding box of a given map instance
	**>
	method getMapViewBoundingBox {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {
			ScreenRectangle boundingBox
		}
	}

	<**
		@description : setMapViewSaveArea = This methods defines the area that the HMI guarantees not to 
cover with other windows or user interface elements
	**>
	method setMapViewSaveArea {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
			
			ScreenRectangle saveArea
		}
	}

	<**
		@description : SetMapViewSaveArea = This methods defines the area that the HMI guarantees not to 
cover with other getMapViewSaveArea or user interface elements
	**>
	method getMapViewSaveArea {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {
			ScreenRectangle saveArea
		}
	}

	<**
		@description : setMapViewPan = This method pans a given map instance
	**>
	method setMapViewPan {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : any internal time of system-HMI-clock in ms. This timestamp should be used for smoothing the movement within controller
			**>
			Int32 systemMilisecondsTime			
			
			<**
				@description : panningAction = enum(PAN_START,PAN_TO,PAN_END). Whenever a finger is start to touch the screen: PAN_START, whenever a finger leaves the screen: PAN_END
			**>
			PanAction panningAction
			
			<**
				@description : array of currently touching finger. If this array is emtpy, all fingers have been removed from screen. A flic can start
			**>
			ScreenCoordinate [] pixelCoordinates
		}
	}

	<**
		@description : setMapViewRotation = This method rotates the map
	**>
	method setMapViewRotation {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : rotationAngle = rotation angle in degrees measured from the North axis clockwise. Range[0:360]
			**>
			Int32 rotationAngle

			<**
				@description : rotationAnglePerSecond = partial rotation for each second
			**>
			Int32 rotationAnglePerSecond
		}
	}

	<**
		@description : getMapViewRotation = This method is particularly interesting for debugging purposes
	**>
	method getMapViewRotation {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {

			<**
				@description : rotationAngle = rotation angle in degrees measured from the North axis clockwise. Range[0:360]
			**>
			Int32 rotationAngle

			<**
				@description : rotationAnglePerFrame = partial rotation for each map frame in degrees
			**>
			Int32 rotationAnglePerFrame
		}
	}

	<**
		@description : setMapViewVisibilityMode = This method sets the current visibility mode
	**>
	method setMapViewVisibilityMode {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : visibilityMode = enum(INVALID,VISIBLE,INVISIBLE,FROZEN, ... )
			**>
			Visibility visibilityMode
		}
	}

	<**
		@description : getMapViewVisibilityMode = This method returns the current visibility mode
	**>
	method getMapViewVisibilityMode {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {

			<**
				@description : visibilityMode = enum(INVALID,VISIBLE,INVISIBLE,FROZEN, ... )
			**>
			Visibility visibilityMode
		}
	}

	<**
		@description : getSupportedMapViewVisibilityModes = This method retrieves the supported mapview visibility modes
	**>
	method getSupportedMapViewVisibilityModes {
		out {
			Visibility [] visibilityModeList
		}
	}

	<**
		@description : setMapViewPerformanceLevel = This method sets the perfomance level of a given map instance
	**>
	method setMapViewPerformanceLevel {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : performanceLevel = enum(INVALID,LEVEL1,LEVEL2,LEVEL3,LEVEL4,LEVEL5, ... )
			**>
			Level performanceLevel
		}
	}

	<**
		@description : getMapViewPerformanceLevel = This method returns the perfomance level of a given map instance
	**>
	method getMapViewPerformanceLevel {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {

			<**
				@description : performanceLevel = enum(INVALID,LEVEL1,LEVEL2,LEVEL3,LEVEL4,LEVEL5, ... )
			**>
			Level performanceLevel
		}
	}

	<**
		@description : getSupportedMapViewPerformanceLevels = This method retrieves the supported perfomance levels
	**>
	method getSupportedMapViewPerformanceLevels {
		out {
			Level [] performanceLevelList
		}
	}

	<**
		@description : displayRoute = This method visualizes one of the calculated routes
	**>
	method displayRoute {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : routeHandle = Route handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle routeHandle

			<**
				@description : highlighted = flag. TRUE means highligted,FALSE means not highlighted
			**>
			Boolean highlighted
		}
	}

	<**
		@description : hideRoute = This method hides one of the visible routes
	**>
	method hideRoute {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : routeHandle = Route handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle routeHandle
		}
	}

	<**
		@description : getDisplayedRoutes = This method returns a list of displayed routes
	**>
	method getDisplayedRoutes {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {
			DisplayedRoute [] displayedRoutes
		}
	}





	<**
		@description : addKml = add Kml Content to MapViewer
	**>
	method addKml {
		in {
			
			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle
			
			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
			
			<**
				@description : defines if kml is of KmlType:(KML_URL/KML_CONTENT)
			**>
			KmlType kmlType
			
			<**
				@description : is either the kml-url or a kml-content
			**>
			String kml
			
			<**
				@description : show if TRUE then kmlContent is shown on MapViewer
			**>
			Boolean show
		}
		
		out {
			<**
				@description : kmlHandle = NAV2010-kmlHandle
			**>
			Handle kmlHandle
		}
	}

	<**
		@description : deleteKml = deletes (and hides) Kml Content to MapViewer
	**>
	method deleteKml {
		in {
			
			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle
			
			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
			
			<**
				@description : kmlHandle = NAV2010-kmlHandle
			**>
			Handle kmlHandle
		}
	}
   
	<**
		@description : setKmlVisibility = shows/hides a kmlFile (without deleting it actually)
	**>
	method setKmlVisibility {
		in {
			
			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle
			
			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
			
			<**
				@description : kmlHandle = NAV2010-kmlHandle
			**>
			Handle kmlHandle
			
			<**
				@description : show if TRUE then kmlContent is shown on MapViewer
			**>
			Boolean show
		}
	}
   

	<**
		@description : pushSettings = stores the current map-ctrl setting (scale, orientation, visible objects ...) to an internal stack
	**>
	method pushSettings {
		in {
			
			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle
			
			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
	}
   
	<**
		@description : popSettings = re-stores the current map-ctrl setting (scale, orientation, visible objects ...) from the stack (called after pushSetting)
	**>
	method popSettings {
		in {
			
			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle
			
			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
	}
   
	<**
		@description : resetSettings = resets the mapInstance to a dedicated state (same as startup)
	**>
	method resetSettings {
		in {
			
			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle
			
			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
	}
   








	<**
		@description : displayObjectList = This method visualizes a list of objects, created in another domain
	**>
	method displayObjectList {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : contains enum to other domain + session-id of other domain
			**>
			ObjectList objectList
		}
	}

	<**
		@description : hideObjectList = This method hides a list of objects, created in another domain
	**>
	method hideObjectList {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : contains enum to other domain + session-id of other domain
			**>
			ObjectList objectList
		}
	}

	<**
		@description : highlightObjectListItem = highlights exclusively a various number of items within an objectList. For unhighlight all, objectListItems is empty
	**>
	method highlightObjectListItem {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : contains enum to other domain, contains session-id of other domain
			**>
			ObjectListItem [] objectListItems
         	}
	}

	<**
		@description : centerOnObjectListItems = This method shows an overview map with the current route in the center
	**>
	method centerOnObjectListItems {
		in {
			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : objectListItems = list of ObjectListItmes to center on (if 1 element is in list, don't change scale)
			**>
			ObjectListItem [] objectListItems
		}
	}

	<**
		@description : getPoiCategoriesVisible = Get the set of POI categories displayed on the map.
	**>
	method getPoiCategoriesVisible {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {
			UInt32 [] poiCategoryIds
		}
	}

	<**
		@description : setPoiCategoriesVisible = Add POI categories to the set of POI categories displayed on the map.
                   Any specified category that until now was displayed with scale limits is now displayed without limits.
	**>
	method setPoiCategoriesVisible {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : poiCategoryIds = list of POI-categories
			**>
			UInt32 [] poiCategoryIds
		}
	}

	<**
		@description : setPoiCategoriesVisibleMode = gives the possibility to show or hide all POI categories regardsless of
                   of which one are enabled with setPoiCategoriesVisible/setPoiCategoriesNotVisible.
                   The selection which is done with setPoiCategoriesVisible/setPoiCategoriesNotVisible is not changed by this command.
	**>
	method setPoiCategoriesVisibleMode {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
            
			<**
				@description : poiCategoriesVisibleMode = {SELECTED(default) / ALL / NONE}
			**>
			PoiCategoriesVisibleMode poiCategoriesVisibleMode
		}
	}

	<**
		@description : setPoiCategoriesVisible = Add POI categories to the set of POI categories displayed on the map, where the POI's are only displayed in a specific range of scales.
                   Any specified category that until now was displayed without scale limits is now displayed with limits.
	**>
	method setPoiCategoriesVisibleWithinLimits {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
			UInt32 [] poiCategoryIds

			<**
				@description : minScaleID = minimun scale on which the POI categories are displayed
			**>
			Int8 minScaleID

			<**
				@description : maxScaleID = maximum scale on which the POI categories are displayed
			**>
			Int8 maxScaleID
		}
	}

	<**
		@description : setPoiCategoriesNotVisible = Remove POI categories from the set of POI categories displayed on the map.
	**>
	method setPoiCategoriesNotVisible {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : poiCategoryIds = list of POI-categories
			**>
			UInt32 [] poiCategoryIds
		}
	}

	<**
		@description : setTrafficIncidentsVisibility = Set the visibility of Traffic Incidents on the map.
	**>
	method setTrafficIncidentsVisibility {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : visible = If true, Traffic Incidents are shown on the map, else they are not shown.
			**>
			Boolean visible
		}
	}

	<**
		@description : setMapViewTheme = This method configures the theme of a given map view instance
	**>
	method setMapViewTheme {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : mapViewTheme = enum(DAY / NIGHT)
			**>
			MapTheme mapViewTheme
		}
	}

	<**
		@description : getMapViewTheme = This method returns the current theme of a given map view instance
	**>
	method getMapViewTheme {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {

			<**
				@description : mapViewTheme = enum(INVALID,THEME_1,THEME_2,THEME_3, ... )
			**>
			MapTheme mapViewTheme
		}
	}

	<**
		@description : getSupportedMapViewThemes = This method retrieves the supported mapview themes
	**>
	method getSupportedMapViewThemes {
		out {
			MapTheme [] mapViewThemeList
		}
	}

	<**
		@description : convertPixelCoordsToGeoCoords = This method converts pixel coordinates to geographical coordinates
	**>
	method convertPixelCoordsToGeoCoords {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
			
			Pixel [] pixelCoordinates
		}
		out {			
			Coordinate2D [] geoCoordinates
		}
	}

	<**
		@description : convertGeoCoordsToPixelCoords = This method converts geographical coordinates into pixel coordinates
	**>
	method convertGeoCoordsToPixelCoords {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
			

			Coordinate2D [] geoCoordinates
		}
		out {
			
			Pixel [] pixelCoordinates
		}
	}

	<**
		@description : displayCustomElements = This method visualizes a set of custom elements on the map
	**>
	method displayCustomElements {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
			CustomElement [] customElements
		}
		out {
			Handle[] customElemenHandles
		}
	}

	<**
		@description : hideCustomElements = This method hides a set of custom elements which were visualized by DisplayCustomElements
	**>
	method hideCustomElements {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
			
			Handle [] customElemenHandles
		}
	}

	<**
		@description : getDisplayedCustomElements = This method retrieves the visualized custom elements on the map
	**>
	method getDisplayedCustomElements {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {
			tCustomElementDict customElements
		}
	}

	<**
		@description : selectElementsOnMap = This method selects elements on the map view which are at the position specified by user input
	**>
	method selectElementsOnMap {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
			
			Pixel pixelCoordinate
			
			SelectableMapType [] selectableTypes

			<**
				@description : maxNumberOfSelectedElements = maximum number of selected elements to return. If 0, all possible elements which can be selected will be returned
			**>
			UInt16 maxNumberOfSelectedElements
		}
		out {
			SelectedMapElement [] selectedElements
		}
	}


	<**
		@description : mapViewGesture = This method is a compound gesture command
	**>
	method mapViewGesture {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : any internal time of system-HMI-clock in ms. This timestamp should be used for smoothing the movement within controller
			**>
			Int32 systemMilisecondsTime

			<**
				@description : while gesture is running, set to true
				if gesture ends (last finger lifted from touchscreen) set to false.
				in case of false, anchorScreen, scrollOffset, zoomFactor, rorationAngle and pitchAngle are ignored
			**>
			Boolean isFingerDown

			<**
				@description : anchorScreen = center "pixels" of gesture to have a rotation axis and scrolling-center
			**>
			ScreenCoordinate anchorScreen

			<**
				@description : scrollOffset = scrolling in pixels to a direction. 0/0 = default (no scroll)
			**>
			ScreenCoordinate scrollOffset

			<**
				@description : zoomFactor = changing scale. 1.0 = no change
			**>
			Double zoomFactor

			<**
				@description : rotationAngle = rotate in degree 0.0 = no change 90.0 = 90 degree
			**>
			Double rotationAngle

			<**
				@description : pitchAngle = pitch the view. 0.0 = no change, positive values goto birdview, negative-values goto 2D
			**>
			Double pitchAngle
		}
	}


	<**
		@description : mapShowRouteOverview = This method shows an overview map with the current route in the center
	**>
	method mapShowRouteOverview {
		in {
			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : Route-Id
			**>
			UInt32 routeId

			<**
				@description : orientation = orientation of mapViewer during route-overview
			**>
			MapViewOrientation orientation
		}
	}

	<**
		@description : mapSetStyle = Changes the StyleSet of the MapViewer. e.g. day/night switch
	**>
	method mapSetStyle {
		in {
			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : styleSet = StyleSet enum. {DAY, NIGHT}
			**>
			MapViewStyleSet styleSet
		}
	}
			
			
	<**
		@description : getMapModeList = This method returns a list of supported map modes
	**>

	method getMapModeList {
		in {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {
			<**
				@description : mapMode-List (string-based)
			**>
			String[] mapModeList
		}
	}

	<**
		@description : setMapMode = This method sets the map mode (String-datatype, could be hard-coded in HMI if controller is known)
	**>

	method setMapMode {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : mapMode
			**>
			String mapMode
		}
	}

	method getMapMode {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {
			<**
				@description : mapMode
			**>
			String mapMode
		}
	}

	method setAutozoomSetting {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : autozoomSetting (NEAR / NORMAL / FAR)
			**>
			AutozoomSetting autozoomSetting
		}
	}

	method getAutozoomSetting {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {
			<**
				@description : autozoomSetting (NEAR / NORMAL / FAR)
			**>
			AutozoomSetting autozoomSetting
		}
	}

	method setAutozoomEnabled {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : enabled
			**>
			Boolean enabled
		}
	}

	method getAutozoomEnabled {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
		}
		out {
			<**
				@description : enabled
			**>
			Boolean enabled
		}
	}


	<**
		@description : mapViewScaleChanged = This signal is emitted when the mapview scale changes
	**>
	broadcast mapViewScaleChanged {
		out {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : scaleID = scale identifier. Range[0:256]
			**>
			Int8 scaleID

			<**
				@description : isMinMax = enum(INVALID,MIN,MAX,MID, ... )
			**>
			MapScaleType isMinMax
		}
	}

	<**
		@description : mapViewVisibilityChanged = This signal is emitted when the MapView visibility changes
	**>
	broadcast mapViewVisibilityChanged {
		out {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle

			<**
				@description : visibilityMode = enum(INVALID,VISIBLE,INVISIBLE,FROZEN, ... )
			**>
			Visibility visibilityMode
		}
	}

	<**
		@description : displayedRoutes = This signal is emitted when the list of displayed routes change
	**>
	broadcast displayedRoutes {
		out {

			<**
				@description : mapViewInstanceHandle = Map instance handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle mapViewInstanceHandle
			DisplayedRoute [] displayedRoutes
		}
	}
}