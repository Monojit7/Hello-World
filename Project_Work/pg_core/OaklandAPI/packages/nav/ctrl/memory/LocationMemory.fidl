/* 
   Harman/Becker Automotive GmbH
*/

package org.harman.nav.ctrl.memory

import org.harman.nav.ctrl.common.list.* from "../common/list/ListTypes.fidl"
import org.harman.nav.ctrl.memory.* from "LocationMemoryTypes.fidl"



<**
@description : 
LocationMemory = This interface offers functions that implement a serveral views for the location-memory navigation system.
The interface consist of generic list interface apprach to handle long lists without the need to completely communicate the contents. 
Clients may gain individual views to the list, and may configure their view in terms of current position, size, sort order or filtered contents.
The limit to the number of lists that may is managed by a project configuration.
List elements can be addressed either by their position index, which depends on the sort order and current contents of a list - which may change over time.

The following methods are related to the generic list approach:
- getListSize 
- createView
- deleteView
- deleteView
- setViewSize
- setViewPosition
- setSortOrder
- getSortOrder
- removeAll
- removeItem
- addItem


//TODO:
The following open topic has to be clarified for Location Memory Interface on next iteration:
- no implementation to get details based on the result item list.
- refine the policy strategy options
- refine the EProvidedListTypes
- has the keys are volatile or persistent over lifecycles?
**>
interface LocationMemory /*extends ListViewSortOrder*/ {
	version { major 5 minor 0 }
	
	 <**
        @description : contains all available View Configuration to create view instances upon
     **>
	attribute LocationMemoryTypes.Configurations availableConfiguration readonly
	
    <**
        @description: The list ids which can be queried from this interface
    **>
    attribute ListTypes.ListId[] availableLists readonly
	
	 <**
        @description : get the current number of contained elements in the given list. This should be used create a view with
        a view size which has to be smaller or equal then size of the resulted list size.
        @see: createView
    **>
    method getListSize {
        in {
            ListTypes.ListId list
        }
        out {
            ListTypes.ListSize size
        }
        error ListTypes.ListError
    }
    
     <**
        @description : create a new view to the mother array. 
        This view will be maintained until the client uses destroyView, 
        unsubscribes or service/proxy exit. 
        After creating a view the client must receive an update.
        Only one created view is allowed to modify the list entries.
    **>
    method createView {
        in {

            <**
                @description : list to create the view upon.
            **>
            ListTypes.ListId list

            <**
                @description : individual size of the requested view. The max size could be smaller or equal than max list size
            **>
            ListTypes.ViewSize viewsize
            
            <**
                @description : element to position the view upon, according to view policy.
            **>
            ListTypes.ListKey position
        }
        out {

            <**
                @description : view identification used to distinguish several instances of a view for one client. It is never changed by the service nor the client.
            **>
            ListTypes.ViewId view
        }
        error ListTypes.ListError
    }
    
    <**
        @description : delete the given view instance
    **>
    method deleteView {
        in {
            <**
                @description : identifies the view to apply this operation upon.
            **>
            ListTypes.ViewId view
        }
        error ListTypes.ListError
    }
    
    <**
        @description : adjust the view size. It is allowed to set view size to a larger value
        than the actual size of the list, but less or equal than the maximum size of the list. 
        The implementation may limit the maximum view size for resource reasons. 
        After adjusting the window size the client must receive an update.
    **>
    method setViewSize {
        in {
            <**
                @description : identifies the view to apply this operation upon.
            **>
            ListTypes.ViewId view

            <**
                @description : new view size
            **>
            ListTypes.ViewSize new_size
        }
        error ListTypes.ListError
    }
    
     <**
        @description : set the absolute view position to element key. 
        The client should use an available snapshot of a view to maintain focused elements 
        within the view if possible, and change the view position only if an 
        element to be focused is outside of the given view. A snapshot is generated whenever
        querying the data contained in a view. Together with that data, the ViewSnapshotPosition is provided.
        The initial snapshot of the view is always [0, min(viewSize-1, listSize-1)].
        When creating a new view snapshot, the last call of setViewPosition or setViewAnchor (whichever was the last one)
        will be the relevant information to reposition the new view snapshot. If setViewPosition was the last call,
        the view is moved such that the provided key refers to the absolute position on the current snapshot of the view.
        (This becomes important if the current view snapshot is outdated because the list has been updated.)

        The following rules are applied to set the position of the new view snapshot [newFrom, newTo], given a snapshot [from, to]:
        Let elem(k) denote the element at key k in the old snapshot and new(e) denote the key the element e will have 
        (would have if deleted) in the new snapshot (see also examples (1)-(3) below).
        (1) If key is less than from, then newFrom will be set to new(elem(from)) - (from-key).
        (2) If key is contained in [from, to], then newKey will be set to new(elem(key)).
        (3) If key is greater than to, then newFrom will be set to new(elem(to)) + (key-to).
        If any of these calculated values are out of the range of the list [0, listSize-1], they will be truncated to fit into the list.
        (Note that the resulting newFrom is always equal to key if the data wasn't updated, 
        but it doesn't have to be equal to key if the data was updated.)
        After setting the view position the anchor offset will automatically be set to 0.
        There are two special key values to allow scrolling to the top/bottom of the list, independently from the above rules:
        The key value 0xFFFE always positions the view to the top of the list.
        The key value 0xFFFF always positions the view to the bottom of the list.

        As an example for the case in which the data was updated:
        old list {"a", "b", "c", "d", "e", "f"} with view snapshot ["c", "d"] with viewSize 2 and viewKey 2
        new list {"b", "d", "f", "h", "j", "l"}
        (1) setViewPosition(0) => [from, to] is [2, 3], elem(from) is "c", new(elem(from)) is 1
                               => ["b", "d"] with ViewSnapshotPosition {listSize=6, listKey=0, anchorOffset=0}.
        (2) setViewPosition(3) => [from, to] is [2, 3], elem(key) is "d", new(elem(key)) is 1
                               => ["d", "f"] with ViewSnapshotPosition {listSize=6, listKey=1, anchorOffset=0}.
        (3) setViewPosition(4) => [from, to] is [2, 3], elem(to) is "d", new(elem(d)) is 1
                               => ["f", "h"] with ViewSnapshotPosition {listSize=6, listKey=2, anchorOffset=0}.
    **>
    method setViewPosition fireAndForget {
        in {

            <**
                @description : identifies the view to apply this operation upon.
            **>
            ListTypes.ViewId view

            <**
                @description : element to position the view upon, according to view policy.
            **>
            ListTypes.ListKey key
        }
    }
    
       <** 
        @description : set a stable element inside the current view snapshot.
        The client should use an available snapshot of a view to maintain focused elements 
        within the view if possible, and change the view position only if an 
        element to be focused is outside of the given view. A snapshot is generated whenever
        querying the data contained in a view. Together with that data, the ViewSnapshotPosition is provided.
        The initial snapshot of the view is always [0, min(viewSize-1, listSize-1)] with anchor offset 0.
        When creating a new view snapshot, the last call of setViewPosition or setViewAnchor (whichever was the last one)
        will be the relevant information to reposition the new view snapshot. If setViewAnchor was the last call,
        the anchor element of the old view snapshot is used for repositioning.
        (This method only needs to be used if the current view snapshot is outdated because the list has been updated.)

        The following rules are applied to set the position of the new view snapshot [newFrom, newTo], given a snapshot [from, to]
        and anchor offset aOff:
        Let elem(k) denote the element at key k in the old snapshot and new(e) denote the key the element e will have 
        (would have if deleted) in the new snapshot (see also examples below).
        newFrom is set to new(elem(from+aOff)) - aOff.
        If any of these calculated values are out of the range of the list [0, listSize-1], they will be truncated to fit into the list.
        As a consequence, whenever possible, the anchor element of the old snapshot will be at the same offset within the new snapshot.

        As an example for the case in which the data was updated:
        old list {"a", "b", "c", "d", "e", "f"} with view snapshot ["c", "d"] with viewSize 2 and viewKey 2
        new list {"b", "d", "f", "h", "j", "l"}
        setViewAnchor(0) => elem(from+aOff) is "c", new(elem(from+aOff)) is 1 ("c" would be inserted at index 1)
                         => ["d", "f"] with ViewSnapshotPosition {listSize=6, listKey=1, anchorOffset=0}.
        setViewAnchor(1) => elem(from+aOff) is "d", new(elem(from+aOff)) is 1
                         => ["b", "d"] with ViewSnapshotPosition {listSize=6, listKey=0, anchorOffset=1}.
    **>
    method setViewAnchor fireAndForget {
        in {

            <**
                @description : identifies the view to apply this operation upon.
            **>
            ListTypes.ViewId view

            <**
                @description: relative anchor position in the view, referenced from ListKey
                Please note: only positive values and 0 are allowed
            **>
            ListTypes.AnchorOffset anchor 
        }
    }
    
     
    <**
        @description : configure the sort order of a view instance. Changing the sort order of a view may trigger a view update.
    **>
    method setSortOrder {
        in {

            <**
                @description : identifies the view to apply this operation upon.
            **>
            ListTypes.ViewId view

            <**
                @description : the sort order to use for this view instance.
            **>
            ListTypes.SortOption order
        }
        error ListTypes.ListError
    }

    <**
        @description : retrieve the sort order of a view instance
    **>
    method getSortOrder {
        in {

            <**
                @description : identifies the view to apply this operation upon.
            **>
            ListTypes.ViewId view
        }
        out {

            <**
                @description : the sort order currently used for this view instance.
            **>
            ListTypes.SortOption order
        }
        error ListTypes.ListError
    }
    
    <**
		@description : remove all items which are related to the given List id.
	**>	    
	method removeAll {
		in {
            <**
                @description : list to create the view upon.
            **>
            ListTypes.ListId list		
		}
		error ListTypes.ListError
	}

	
	<**
		@description : remove one Item which is based on the given itemKey and a given list id. 
					If the item is available in the given list it is removed from that list.  
					If it is only available in that list it is completely removed(set listId with  invalid value). 
	**>	  
	method removeItem {
		in {
			<**
				@description : Identifies the list the item is removed from. 
            **>
            ListTypes.ViewId view
            
            <**
                @description : item key which is used 
            **>
            ListTypes.ViewKey itemKey 

            <**
                @description : list the item is removed from
            **>
            ListTypes.ListId listId	            	            		
		}
		error ListTypes.ListError
	}
	
    <**
		@description : getResultList
	**>	
	method getResultList {
		in {
			<**
                @description : Identifies the view this result list is applied for.
            **>
            ListTypes.ViewId view        			            	            		
		}
		out	{
			<**
                @description : information how the item view snapshot is positioned within the list  
            **>
            ListTypes.ViewSnapshotPosition snapshotPos
			
			<**
				@description : result items based on the requested position and key what is
				related to the given view id.
			**>					
            LocationMemoryTypes.Item [] listItems			
		}		
		error ListTypes.ListError
	}
     

    <**
		@description : getActiveAutoNavItems  for the Fixed_Favorite list to check which items are at the current time in an auto-navigate timeslot (i.e. return list of keys).
    **>	
	method getActiveAutoNavItems {
		in {
			<**
                @description : Identifies the view this result list is applied for.
            **>
            ListTypes.ViewId view        			            	            		
		}
		out	{
			<**
				@description : list key of the first entry into the received result list.
			**>
			ListTypes.ListKey resultPosition

			<**
				@description : result items based on the requested position and key what is
				related to the given view id.
			**>					
            LocationMemoryTypes.Item [] listItems			
		}		
		error ListTypes.ListError
	}
     
    <**
		@description : add a exsisting Location Memory Item to another list.		
	**>	  		 
	 method addItem {
		in {       	                    			            	            	
			<**
                @description : source view id which is where this source item comes from.
            **>
            ListTypes.ViewId sourceViewId
            
            <**
                @description : source item key which has to be added
            **>
            ListTypes.ViewKey sourceItemKey
            
            <**
                @description : destination list where this item place to
            **>
            ListTypes.ListId destinationListId		
            
		}
		out {     	                    			            	            	
			<**
                @description : Item id 
			**>
			LocationMemoryTypes.TItemId itemId 
		}
		error ListTypes.ListError
	}
	
	<**
		@description : add a new Location Memory Item to a list.
			If a new item is created a name for the item is created.		
	**>	  		 
	method addItemLocation {
		in {       	                    			            	            	
			<**
                @description : list to add the item to.
            **>
            ListTypes.ListId listId
            
            <**
                @description : location to add
            **>
            LocationMemoryTypes.LocationItem location
		}
		out {   	                    			            	            	
			<**
                @description : Item id 
			**>
			LocationMemoryTypes.TItemId itemId 
		}
		error ListTypes.ListError
	}
	
	<**
		@description : set the name of an item.		
	**>	  		 
	method setItemName {
		in {       	                    
			<**
                @description : list to set the name for the item to.
            **>
            ListTypes.ListId listId			            	            	
            <**
                @description : Item id(uniq during LC)
            **>
            LocationMemoryTypes.TItemId itemId
            
            <**
                @description : new name to use
            **>
            LocationMemoryTypes.TItemName name           
        }
		error ListTypes.ListError
	}

	<**
		@description : return all data for a Location Memory Item.		
	**>	  		 
	method getItemDetails {
		in {       	                    			            	            	
            <**
                @description : view identification
            **>
            ListTypes.ViewId view		
            <**
                @description : item key to retrieve the details for
            **>
            ListTypes.ViewKey itemKey
        }
        out {          
            <**
                @description : location details 
            **>
            LocationMemoryTypes.LocationItem location
		}
		error ListTypes.ListError
	}
 	
	<**
		@description : return all data for a Location Memory items.		
	**>	  		 
	method getItemDetailsExt {
		in {       	                    			            	            	
            LocationMemoryTypes.UniqueItemIdList items
        }
        out {          
            <**
                @description : location details 
            **>
            LocationMemoryTypes.LocationList locations
		}
		error ListTypes.ListError
	}
 	
 	<**
		@description : return all items with matching timeslot (to current time)
			Empty list is returned if none match.	
	**>	
 	method getActiveItems {
 		in {
 		 	<**
                @description : view identification
            **>
            ListTypes.ViewId view	
 		}
 		out {
 			<**
                @description : items which are currently active
            **>
 			ListTypes.ViewKey [] itemKeys
 		}
 		error ListTypes.ListError
 	}
 	
 	<**
		@description : change the timeslot of an item
	**>	
 	method setTimeslot {
 		in {
 			<**
                @description : view identification
            **>
            ListTypes.ViewId view	
 			<**
                @description : Item to manipulate 
            **>
 			ListTypes.ViewKey itemKey 
 			<**
                @description : new timeslot to set 
            **>
 			LocationMemoryTypes.Timeslot timeslot
 		}
 		error ListTypes.ListError
 	}
 	
 	<**
		@description : The items of the given view is filtered by the string input.
		As this funcationality was not designed in ListViewBase, the first version implementation is to response the items.
		Future, the funcationality will be updated with the view data updated .. i.e. the view is updated and only 
			matching items remain in the view. If no match is found then the result will be an empty view.
			An empty searchString will restore the view.
	**>	
 	method filterView {
 		in {
 			<**
                @description : view identification
            **>
            ListTypes.ViewId view	
 			<**
                @description : pattern to match the items 
            **>
 			String pattern 
 			<**
                @description : Extension to match item internal data (currently not supported) 
            **>
 			Boolean deepMatch
 		}
        out {          
            <**
				@description : result items based on the search string
			**>					
            LocationMemoryTypes.Item [] listItems			
		}
 		error ListTypes.ListError
 	}
 	 
 	<**
		@description : create an ECO file with the list entries
			The file is saved as path/listname.eco
	**>	
 	method createSpeechFile {
 		in {
	 		<**
				@description : Identifies the list the file should be generated for. 
            **>
            ListTypes.ListId listId
            
 			<**
    	        @description : path where the file should be saved
        	**>
 			String path
 		}
 		error LocationMemoryTypes.LocationMemoryError
 	} 	
	
 	<**
		@description : change the item
	**>	
 	method setLocationItem {
 		in {
 			<**
                @description : view identification
            **>
            ListTypes.ViewId view	
 			<**
                @description : Item to manipulate 
            **>
 			ListTypes.ViewKey itemKey 
		     <**
                @description : location to add
            **>
            LocationMemoryTypes.LocationItem location
 		}
		out {
            <**
				@description : basic data of item (with proposed name)
			**>					
            LocationMemoryTypes.Item item
		}
 		error ListTypes.ListError
 	}
	
     <**
        @description : import the entire list from an external source 
    **>
    method importFullList {
        in {

            <**
                @description : where to initiate the import from
            **>
            LocationMemoryTypes.EExternalSources source

        }
        out {

            <**
                @description : successfull import.
            **>
            Boolean success

            <**
                @description : a message to help identify the particular error type which can be used for the HMI.
            **>
            String message

        }
        error ListTypes.ListError
    }
		

     <**
        @description : export the entire list to an external source 
    **>
    method exportFullList {
        in {

            <**
                @description : where to store the export
            **>
            LocationMemoryTypes.EExternalSources source

        }
        out {

            <**
                @description : successfull export.
            **>
            Boolean success

            <**
                @description : a message to help identify the particular error type which can be used for the HMI.
            **>
            String message

        }
        error ListTypes.ListError
    }
	
	<**
		@description : importa given list of tuples (name, location) into a destination list.
					   Typical use-case download of POIs from a server, or USB stick bulk import.
	**>
	method importLocationItemList {
		in  {
			<** @description : the destination list, see availableLists attribute, for example "FAVORITES" **>
			ListTypes.ListId 				destinationListId
			<** @description : list of of tuples (name, location) to be imported **>
			LocationMemoryTypes.NameLocationItem [] 	itemList
		}
        error ListTypes.ListError
	}
	
	
	
    <**
		@description: informs the client about changes of the list size. 
	**>
	broadcast listSize {
		out {			
		    <**
				@description: list id related to the list size update 
			**>	
			ListTypes.ListId id
			 
			<**
				@description: changed list size information 
			**>			
			ListTypes.ListSize size
		}
	}
		
   <** @description: indicate to the client that the underlying list of a certain view has changed
        Whenever elements get inserted/removed or the content of element gets changed, the size 
        or the sorting order of a list might change. This might influence the current view and
        especially the position of the anchor element in the list. To allow a client to react on such
        changes in an approapriate manner, the viewUpdate broadcast will provide all necessary information
        to its client. 
        It is up to the client to reposition the view to its needs based on the provided information, 
        using the methods setViewPosition or setViewAnchor.
    **>
    broadcast viewUpdate
    {
        out {
            <** @description: unique identifier of a view **>
            ListTypes.ViewId  view
            <** @description: current size of the underlying list **>
            ListTypes.ListSize size
            <** @description: at least one element of the currently active view snapshot has changed **>
            Boolean viewChanged
            <** @description: at least one element of the list has changed (this might lead to a different new view snapshot) **>
            Boolean listChanged
        }
    }
	
}

