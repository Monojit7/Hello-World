/* 
SPDX-License-Identifier: MPL-2.0
Copyright (C) 2014, PCA Peugeot Citroën, XS Embedded GmbH, TomTom International B.V., Continental Automotive GmbH, BMW Car IT GmbH,  Alpine Electronics R&D Europe GmbH, AISIN AW CO., LTD.,  Neusoft Technology Solutions GmbH, Jaguar Land Rover Limited, Visteon Corporation, Elektrobit Automotive GmbH
This Source Code Form is subject to the terms of the
Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with
this file, you can obtain one at http://mozilla.org/MPL/2.0/.
*/

package org.harman.nav.ctrl.di


import org.harman.nav.ctrl.CommonTypes.* from "../common/CommonTypes.fidl"
import org.harman.nav.ctrl.di.LocationInputTypes.* from "LocationInputTypes.fidl"

<**
	@description : LocationInput = This interface offers functions that implement the location-input functionality of a navigation system
**>

interface LocationInput {
	version {
		major 2
		minor 1
	}

	<**
		@description : getVersion = This method returns the API version implemented by the server application
	**>
	method getVersion {
		out {
			Version ^version
		}
	}

	<**
		@description : createLocationInput = This method creates a new location input and retrieves a handle
	**>
	method createLocationInput {
		out {

			<**
				@description : Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle locationInputHandle
		}
		error {
			NoMorelocationInputHandles
		}
	}

	<**
		@description : deleteLocationInput = This method deletes a location input and its associated resources
	**>
	method deleteLocationInput {
		in {

			<**
				@description : locationInputHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle locationInputHandle
		}
	}

	<**
		@description : getSupportedAddressAttributes = This method retrieves the supported address attributes
	**>
	method getSupportedAddressAttributes {
		out {
			AddressAttributeList addressAttributesList
		}
	}

	<**
		@description : setAddress = This method sets the address to start with for the LocationInput identified by the given handle
	**>
	method setAddress {
		in {

			<**
				@description : locationInputHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle locationInputHandle
			
			Address address
		}
      error {
         InvalidAddressError
      }
	}

	<**
		@description : setSelectionCriterion = This method sets the selection criterion for the current speller, search input and the corresponding result-lists for the current session
	**>
	method setSelectionCriterion {
		in {

			<**
				@description : locationInputHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle locationInputHandle

			<**
				@description : selectionCriterion = enum(INVALID,LATITUDE,LONGITUDE,ALTITUDE,FULL_ADDRESS,COUNTRY,COUNTRYCODE,STATE,CITY,ZIPCODE,STREET,ROAD_NUMBER,HOUSENUMBER,HOUSENAME,CROSSING,DISTRICT,PHONENUMBER,POINAME,TOWNCENTER, ... )
			**>
			AddressAttribute selectionCriterion
		}
      error {
         InvalidSelectionCriterion
      }
	}

	<**
		@description : spell = This method sends the next spell input for the current session
      TBD: expected broadcasts
	**>
	method spell {
		in {
			<**
				@description : locationInputHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle locationInputHandle

			<**
				@description : inputCharacter = last input character (UTF-8) (0x08(Backspace) for delete last character, 0x0D(Carriage Return) for delete entire input)
			**>
			String inputCharacter
			
			<**
				@description : maxWindowSize = maximum number of elements that should be returned as result
			**>
			UInt16 maxWindowSize
		}
      error {
         InvalidCharacterError
      }
	}
   
   // Note: Think of functionality of a history to allow a Undo-Functionality

	<**
		@description : search = This method sets the inputString for the current selection criterion
      TBD: expected broadcasts
	**>
	method search {
		in {
			<**
				@description : locationInputHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle locationInputHandle

			<**
				@description : inputString = contains the String, that is searched
			**>
			String inputString
			
			<**
				@description : maxWindowSize = maximum number of elements that should be returned as result
			**>
			UInt16 maxWindowSize
		}
      error {
         InvalidStringError  // no match
      }
	}

	<**
		@description : requestListUpdate = This method sends a request for more list elements for the current session
      If a session changes, e.g. new character is entered, a new list is generated. Offset is starting at 0 again.
	**>
	method requestListUpdate {
		in {

			<**
				@description : locationInputHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle locationInputHandle

			<**
				@description : offset = starting offset of the newly requested list elements
			**>
			UInt16 offset

			<**
				@description : maxWindowSize = maximum number of elements that should be returned as result
			**>
			UInt16 maxWindowSize
		}
      error {
         OffsetBeyondListSizeError
         WindowSizeTooLargeError       // memory/performance issues likely with large list size
      }
	}

	<**
		@description : selectEntry = This method triggers selection of a result list entry by index
	**>
	method selectEntry {
		in {
			<**
				@description : locationInputHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle locationInputHandle

			<**
				@description : index = absolute list index of the entry to be selected
			**>
			UInt16 index
		}
      error {
         InvalidIndex
         InvalidHandle
      }
	}

	<**
		@description : getEntry = This method synchronously gets the address for the given result list entry
	**>
	method getEntry {
		in {

			<**
				@description : locationInputHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle locationInputHandle

			<**
				@description : index = list index of the entry to be returned
			**>
			UInt16 index
		}
		out {
			Address address
		}
	}

	<**
		@description : validateAddress = This method validates an address from different sources than Navigation
      TBD: functionality to be clarified
	**>
	method validateAddress {
		in {
			<**
				@description : locationInputHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle locationInputHandle
			
			Address inputAddress
		}
	}

	<**
		@description : reverseGeocode = This method transforms a geocoordinate into an address
	**>
	method reverseGeocode {
		in {
			<**
				@description : locationInputHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle locationInputHandle
			
			Coordinate2D coordinate
		}
	}

	<**
		@description : currentSelectionCriterion = This signal notifies the SelectionCriterion for the current speller input or search.
	**>
	broadcast currentSelectionCriterion {
		out {

			<**
				@description : locationInputHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle locationInputHandle

			<**
				@description : selectionCriterion = enum(INVALID,LATITUDE,LONGITUDE,ALTITUDE,FULL_ADDRESS,COUNTRY,COUNTRYCODE,STATE,CITY,ZIPCODE,STREET,ROAD_NUMBER,HOUSENUMBER,HOUSENAME,CROSSING,DISTRICT,PHONENUMBER,POINAME,TOWNCENTER, ... )
			**>
			AddressAttribute selectionCriterion
		}
	}

	<**
		@description : searchStatus = This signal updates the search status of the specified session
	**>
	broadcast searchStatus {
		out {

			<**
				@description : locationInpuHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle searchStatus_locationInpuHandle

			<**
				@description : statusValue = enum(INVALID,NOT_STARTED,SEARCHING,FINISHED, ... )
			**>
			SearchStatus statusValue

		}
	}
	
	<**
		@description : spellResult = This signal notifies the result of the previous Spell method
	**>
	broadcast spellResult {
		out {

			<**
				@description : locationInputHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle locationInputHandle

			<**
				@description : uniqueString = unique string derived from spell input (i.e. including auto-completion if applicable)
			**>
			String uniqueString

			<**
				@description : validCharacters = set of (UTF-8 encoded) characters valid for next input (unified in a single string). A Backspace(0x08) is returned if the input character passed to the Spell method was invalid
			**>
			String validCharacters

			<**
				@description : fullMatch = flag indicating whether the value in UniqueCharacters is already a full match for an existing list entry
			**>
			Boolean fullMatch
		}
	}

	<**
		@description : searchResultList = This signal updates the address result list (e.g. after a Search/Spell/Scroll call)
	**>
	broadcast searchResultList {
		out {
			<**
				@description : locationInputHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle locationInputHandle

			<**
				@description : totalSize = total size of the result list
			**>
			UInt16 totalSize

			<**
				@description : windowOffset = window offset within the complete list
			**>
			UInt16 windowOffset

			<**
				@description : windowSize = size of the provided window
			**>
			UInt16 windowSize
			
			Address [] resultListWindow
		}
	}

	<**
		@description : searchResultListSizeChanged = This signal updates the size of the address result list
	**>
	broadcast searchResultListSizeChanged {
		out {
			<**
				@description : locationInputHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle locationInputHandle

			<**
				@description : totalSize = total size of the result list
			**>
			UInt16 totalSize
		}
	}

	<**
		@description : contentUpdated = This signal updates the input content data for the specified session
	**>
	broadcast contentUpdated {
		out {
			<**
				@description : locationInputHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle locationInputHandle

			<**
				@description : guidable = flag indicating whether the current address is guidable
			**>
			Boolean guidable
			
			AddressAttribute [] availableSelectionCriteria
			
			Address address
		}
	}

	<**
		@description : addressValidationResult = This signal notifies the validation result of a former ValidateAddress call
      TBD: functionality to be clarified
	**>
	broadcast addressValidationResult {
		out {
			<**
				@description : locationInputHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle locationInputHandle
			
			Address [] validatedAddressList
			
			ValidationStatus [] validationStatusList
		}
	}
   
}