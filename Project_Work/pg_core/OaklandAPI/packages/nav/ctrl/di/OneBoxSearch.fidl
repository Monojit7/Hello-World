package org.harman.nav.ctrl.di

import org.harman.nav.ctrl.di.LocationInputTypes.* from "LocationInputTypes.fidl"
import org.harman.nav.ctrl.di.OneBoxSearchTypes.* from "OneBoxSearchTypes.fidl"
import org.harman.nav.ctrl.CommonTypes.* from "../common/CommonTypes.fidl"
import org.harman.nav.ctrl.memory.LocationMemoryTypes.* from "../memory/LocationMemoryTypes.fidl"

interface OneBoxSearch {
	version {
        major 1
        minor 0
    }
    
	<**
		@description : getVersion = This method returns the API version implemented by the server application
	**>
	method getVersion {
		out {
			Version ^version
		}
	}
	
	<**
		@description : createOneBoxSearch = This method creates a new OneBoxSearch and retrieves a handle
	**>
	method createOneBoxSearch {

		out {

			<**
				@description : Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle oneBoxSearchHandle
		}
		error {
			NoMoreOneBoxHandles
		}
	}

	<**
		@description : deleteLocationInput = This method deletes a location input and its associated resources
	**>
	method deleteOneBoxSearch {
		in {

			<**
				@description : oneBoxSearchHandle = Search handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle oneBoxSearchHandle
		}
	}
	
	<**
		@description : setSearchCountry = This method sets the target country for the current search, If no country is set the current center position is used to determine the country  
	**>
	method setSearchCountry {
		in {
			<**
				@description : oneBoxSearchHandle = one box search unique handle
			**>
			Handle oneBoxSearchHandle

			<**
				@description : country = Deutschland, Frankreich, Utah, New Jersey, no country set allowed zB USA, European Union, Canada
			**>
			String country			
		}
		error {
			HandleNotAvailable
		}
	}
	
	<**
		@description : setSearchLanguage = for the phonetic search algorithms the language and script are important
	**>
	// maybe can be removed because this is a global setting in the HMI
	method setSearchLanguage {
		in {
			<**
				@description : oneBoxSearchHandle = one box search unique handle
			**>
			Handle ftsSearchHandle
			
			<**
				@description : language = ISO language used for the search eng deu fra ita
			**>
			String language

			<**
				@description : script = ISO script Latn1, Latn2, Cyrillic, etc
			**>			
			String script
		}
		error {
			HandleNotAvailable
		}
	}

	<**
		@description : setSearchParameters = SetSearchParameters = configure if we want to search for addresses and/or pois.
			configure if we want to search in the vicinity of the specified center.
        	configure if we want to search using fuzziness.
        	Default behaviour if no option is set we search everywhere
	**>
	method setSearchParameters {
		in {
			<**
				@description : oneBoxSearchHandle = one box search unique handle
			**>
			Handle oneBoxSearchHandle

			<**
				@description : searchOptions = bitmask, default value is 0xFFFF
					FTS_SEARCH_BITMASK_ADDRESSES = 0x1, enable search for addresses
               		FTS_SEARCH_BITMASK_POIS = 0x2, enable search for pois
               		FTS_SEARCH_BITMASK_VICINITY = 0x4 enable search arround position
               		FTS_SEARCH_BITMASK_FUZZINESS = 0x8 enable fuzziness
			**>
			UInt16 searchOptions			
		}
		error {
			HandleNotAvailable
		}		
	}

	<**
		@description : startOneBoxSearch = This method sends the search input for the search handle.
						The search will start with the location.						
	**> 
	method startOneBoxSearch {
		in {
			<**
				@description : oneBoxSearchHandle = one box search unique handle
			**>
			Handle oneBoxSearchHandle
			
			<**
				@description : inputString = contains the name of the poi, address, contact that is searched. It cannot be an empty string.
			**>
			String inputString
		}
		error {
			HandleNotAvailable
		}
	}
	
	<**
		@description : cancelFtsSearch = This method cancels the search for the current session
	**>
	method cancelOneBoxSearch {
		in {
			<**
				@description : oneBoxSearchHandle = one box search unique handle
			**>
			Handle oneBoxSearchHandle			
		}
		error {
			HandleNotAvailable
		}		
	}
	
	<**
		@description : requestListUpdate = This method sends a request for more list elements for the current session
	**>
	method requestResultList {
		in {
			<**
				@description : oneBoxSearchHandle = One box handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle oneBoxSearchHandle

			<**
				@description : offset = starting offset of the newly requested list elements
			**>
			UInt16 offset

			<**
				@description : maxWindowSize = maximum number of elements that should be returned as result
			**>
			UInt16 maxWindowSize
		}
		out {
			<** @description : enum(INVALID,NOT_STARTED,SEARCHING,FINISHED, ... ).**>
			UInt16 statusValue				
			<** @description : Number of items of the results list.**>
			UInt16 resultListSize				
			<** @description : array[locations].**>
			LocationList locations				
		}
	}
	
	<**
		@description : selectEntry = This method triggers selection of a result list entry by index
	**>
	method selectEntry {
		in {

			<**
				@description : oneBoxSearchHandle = One Box handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle oneBoxSearchHandle

			<**
				@description : index = absolute list index of the entry to be selected
			**>
			UInt16 index
		}
	}

	<**
		@description : getEntry = This method synchronously gets the address for the given result list entry
	**>
	method getEntry {
		in {

			<**
				@description : oneBoxSearchHandle = One Box input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle oneBoxSearchHandle

			<**
				@description : index = list index of the entry to be returned
			**>
			UInt16 index
		}
		out {
			<**
				@description : location = Location selected for the result list. For a phonebook contact with two addresses, two separate entries will be returned.
			**>
			Location   locItem
		}
	}

	<**
		@description : searchStatus = This signal updates the search status of the specified session
	**>	
	broadcast searchStatus {
		out {

			<**
				@description : oneBoxSearchHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle oneBoxSearchHandle

			<**
				@description : statusValue = enum(INVALID,NOT_STARTED,SEARCHING,FINISHED, ... )
			**>
			SearchStatus statusValue
		}
	}

	<**
		@description : searchResultList = This signal updates the address result list (e.g. after a Search/Spell/Scroll call)
	**>
	broadcast searchResultList {
		out {

			<**
				@description : oneBoxSearchHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle oneBoxSearchHandle

			<**
				@description : totalSize = total size of the result list
			**>
			UInt16 totalSize

			<**
				@description : windowOffset = window offset within the complete list
			**>
			UInt16 windowOffset

			<**
				@description : windowSize = size of the provided window
			**>
			UInt16 windowSize
		}
	}

	<**
		@description : searchResultListSizeChanged = This signal updates the size of the address result list
	**>
	broadcast searchResultListSizeChanged {
		out {

			<**
				@description : oneBoxSearchHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle locationInpuHandle

			<**
				@description : totalSize = total size of the result list
			**>
			UInt16 totalSize
		}
	}	
}