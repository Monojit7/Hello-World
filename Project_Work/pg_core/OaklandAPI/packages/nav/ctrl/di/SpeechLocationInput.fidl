/* 
SPDX-License-Identifier: MPL-2.0
Copyright (C) 2015, Harman-Becker Automotive Systems GmbH
This Source Code Form is subject to the terms of the
Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with
this file, you can obtain one at http://mozilla.org/MPL/2.0/.
*/

package org.harman.nav.ctrl.di

import org.harman.nav.ctrl.di.LocationInput.* from "LocationInput.fidl"
import org.harman.nav.ctrl.di.SpeechLocationInputTypes.* from "SpeechLocationInputTypes.fidl"
import org.harman.nav.ctrl.CommonTypes.* from "../common/CommonTypes.fidl"

<**
	@description : SpeechLocationInput = This interface offers functions that implement the speech location-input functionality of a navigation system
**>

interface SpeechLocationInput extends org.harman.nav.ctrl.di.LocationInput {

	version {
		major 0
		minor 2
	}
	
	<**
        @description : Get the available modes for speech input, i.e. language and mode (oneshot,fullword,spelling).
    **>
    method getSpeechModesList {
    	in {
			<**
				@description : locationInpuHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle locationInpuHandle    		
			<**
                @description : Language for which the speech input should be performed.
            **>
    		Locales			languageCode
    	}
    	out {
    		<**
                @description : List of available modes for speech input.
            **>
    		SpeechMode [] availableInputModes
    	}
	error {
		SpeechInputError
	}
    }
	
    <**
        @description : Retrieves a file containing all data for speech input. The user has to take care of the file housekeeping
    **>
    method getSpeechList {
    	in {
    		<**
				@description : locationInpuHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle locationInpuHandle
    		<**
                @description : Mode for speech input.
            **>
    		SpeechMode 	inputMode
    	}
    	out {
    		<**
                @description : Path to the file containing the list of entries.
            **>
    		String pathToListFile
    	}
	error {
		SpeechInputError
	}
    }

    <**
        @description : 	Retrieves the orthographies and phonemes to the index entries. The result is returned as an SDS file to give the system the possibility to display the name and prompt the phonemes. To safe space compressed SDS files do not include the orthographical name of an entry.

						Note that phonemes are only available for unrotated names. If the ID of a rotated name is given, the phoneme of the unrotated name is returned!
    **>
    method getSpeechOrtographies {
    	in {
    		<**
                @description : Every entry in the compressed SDS file has a unique id (entryId). With this entryId the engine can find the orthographical name and phoneme for an entry.
            **>
    		EntryId []		entryIdSet
    		<**
				@description : locationInpuHandle = Location input handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle locationInpuHandle
    		<**
                @description : SDS language code.
            **>
    		Locales		voiceLocale
    	}
    	out {
    		<**
                @description : Path to the file containing the list of entries.
            **>
    		String pathToListFile
    	}
	error {
		SpeechInputError
	}
    }

}
