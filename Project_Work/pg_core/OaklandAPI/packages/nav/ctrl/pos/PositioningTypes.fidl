package org.harman.nav.ctrl

import org.harman.nav.ctrl.CommonTypes.* from "../common/CommonTypes.fidl"
import org.harman.nav.ctrl.configuration.ConfigurationTypes.* from "../configuration/ConfigurationTypes.fidl"

typeCollection PositioningTypes {
    version { major 1 minor 2 }
    
    enumeration PositionStatus extends BasicEnum {
    	<** @description : TIMESTAMP type is CommonTypes.Timestamp. **>
        TIMESTAMP          = "0x0010"
        
        <** @description : GNSS_FIX_STATUS type is PositioninTypes.GnnsFixStatus. **>
        GNSS_FIX_STATUS    = "0x00e0"
        
        <** @description : DR_STATUS type is Boolean. **>
        DR_STATUS          = "0x00e1"
        
        <** @description : MM_STATUS type is Boolean. **>
        MM_STATUS          = "0x00e2"
        
        <** @description : SIMULATION_MODE type is Boolean. **>
        SIMULATION_MODE    = "0x00e3"        
    }
    
    enumeration PositionItemKey extends PositionStatus {
        <** @description : LATITUDE type is Double. **>
        LATITUDE                = "0x00a0"
        
        <** @description : LONGITUDE type is Double. **>
        LONGITUDE               = "0x00a1"
        
        <** @description : ALTITUDE type is Double. **>
        ALTITUDE                = "0x00a2"
        
        <** @description : HEADING type is Double. **>
        HEADING                 = "0x00a3"
        
        <** @description : SPEED type is Double. **>
        SPEED                   = "0x00a4"
        
        <** @description : CLIMB type is Double. **>
        CLIMB                   = "0x00a5"
        
        <** @description : NUM_SATELLITES_VISIBLE type is Int32. **>
        NUM_SATELLITES_VISIBLE  = "0x00e4"
        
        <** @description : NUM_SATELLITES_USED type is Int32. **>
        NUM_SATELLITES_USED     = "0x00e5"
    }
    
     enumeration GnnsFixStatus extends BasicEnum {
         NO_FIX              = "0x0100"
         TIME_FIX            = "0x0101"
         FIX_2D              = "0x0102"
         FIX_3D              = "0x0103"
    }

    enumeration MatchMode { 
        INVALID           = "0x00f0"
        ON_ROAD           = "0x00f1"
        OFF_ROAD          = "0x00f2"
        ON_FERRY          = "0x00f3"
        IN_TUNNEL         = "0x00f4"
        ON_CARPARK        = "0x00f5"
    }        

    union PositionItemValue {
        Timestamp timestamp
        Boolean status
        GnnsFixStatus fix
        Double doubleValue
        Int32 intValue
        UnitOfMeasurement measurement
    }    
        
    map PositionItemDict {
        PositionItemKey to PositionItemValue
    }
    
    enumeration AddressItemKey extends BasicEnum {
    	<** @description : TIMESTAMP type is CommonTypes.Timestamp. **>
        TIMESTAMP         = "0x0010"
        
        <** @description : COUNTRY type is String. **>
        COUNTRY           = "0x00a6"
        
        <** @description : COUNTRYCODE type is String. **>
        COUNTRYCODE       = "0x00b3"
        
        <** @description : STATE type is String. **>
        STATE             = "0x00a7"
        
        <** @description : CITY type is String. **>
        CITY              = "0x00a8"
        
        <** @description : STREET type is String. **>
        STREET            = "0x00aa"
        
        <** @description : ROAD_NUMBER type is String. **>
        ROAD_NUMBER       = "0x014e"
        
        <** @description : HOUSENUMBER type is String. **>
        HOUSENUMBER       = "0x00ab"
        
        <** @description : HOUSENAME type is String. **>
        HOUSENAME         = "0x00b4"
        
        <** @description : CROSSING type is String. **>
        CROSSING          = "0x00ac"
        
        <** @description : DISTRICT type is String. **>
        DISTRICT          = "0x00ad"
        
        <** @description : TIMEZONE_OFFSET type is Int16. **>
        TIMEZONE_OFFSET   = "0x0011"
        
        <** @description : DAYLIGHT_OFFSET type is Int16. **>
        DAYLIGHT_OFFSET   = "0x0012"
        
        <** @description : MATCH_TYPE type is PositioningTypes.MatchMode. **>
        MATCH_TYPE        = "0x00f0"
    }

    union AddressItemValue {
        String addressField
        Int16 offset
        Timestamp timestamp
        MatchMode matchMode
    }
    
    map AddressItemDict {
        AddressItemKey to AddressItemValue
    }
    
    union PositionStatusValue {
        Boolean statusValue
        GnnsFixStatus fixStatus
        Timestamp timestanp
    }
    
    map PositionStatusDict {
        PositionStatus to PositionStatusValue
    }
    
    enumeration GpsTimeQuality {
        GOOD = "0x0200"
        POOR = "0x0201"
    }

    struct GpsTime {
        Timestamp time
        GpsTimeQuality quality
    }
    
    enumeration RoadAttributeKey extends BasicEnum {
        <** @description : ROAD_CLASS type is PositioningTypes.ERoadClass. **>
        ROAD_CLASS        = "0x0160"
        
        <** @description : ROAD_TYPE type is PositioningTypes.ERoadType. **>
        ROAD_TYPE         = "0x0161"
        
        <** @description : CONTROLLED_ACCESS type is Boolean. **>
        CONTROLLED_ACCESS = "0x0162"
        
        <** @description : URBAN type is Boolean. **>
        URBAN             = "0x0163"
        
        <** @description : SPEED_LIMIT type is Float with speed in km per hour. **>
        SPEED_LIMIT       = "0x0164"
        
        <** @description : LEFT_HAND_TRAFFIC type is Boolean. **>
        LEFT_HAND_TRAFFIC = "0x0165"
        
        <** @description : INTERSECTION_TYPE type is PositioningTypes.EIntersection. **>
        INTERSECTION_TYPE = "0x0166"
        
        <** @description : EXIT_INFO type is PositioningTypes.ExitInfo. **>
        EXIT_INFO         = "0x0167"
    }

    array RoadAttributeKeys of RoadAttributeKey

    enumeration ERoadClass extends BasicEnum {
        ROADCLASS_GLOBAL   = "0x0140"
        ROADCLASS_MAIN     = "0x0141"
        ROADCLASS_REGIONAL = "0x0142"
        ROADCLASS_LOCAL    = "0x0143"
        ROADCLASS_PRIVATE  = "0x0144"
    }
    
    enumeration ERoadType {
        ROADTYPE_NONE       = "0x0150"
        ROADTYPE_RAMP       = "0x0151"
        ROADTYPE_ROUNDABOUT = "0x0152"
        ROADTYPE_PARALLEL   = "0x0153"
        ROADTYPE_SERVICE    = "0x0154"
        ROADTYPE_MAIN       = "0x0155"
        ROADTYPE_SQUARE     = "0x0156"
        ROADTYPE_PARKING    = "0x0157"
        ROADTYPE_PEDESTRIAN = "0x0158"
        ROADTYPE_CONTROLLED = "0x0159"
    }

    enumeration EIntersection {
        INTERSECT_NA          = "0x0130"
        INTERSECTION_JUNCTION = "0x0131"
    }
    

    struct ExitInfo {
        Boolean present
    }
    
    enumeration ESpeedLimitStatus {
        AVAILABLE       = "0x0140"
        NOT_AVAILABLE   = "0x0141"
        NO_LIMIT        = "0x0142"
    }

    struct SpeedLimit {
        ESpeedLimitStatus status
        UInt32 speedLimit
    }

    union RoadAttributeValue {
        Boolean boolValue
        Float floatValue
        EIntersection intersectionValue
        ERoadClass roadclassValue
        ERoadType roadValue
        ExitInfo exitInfoValue
        SpeedLimit speedLimitValue
    }

    map RoadAttributeDict {
        RoadAttributeKey to RoadAttributeValue
    }
}
