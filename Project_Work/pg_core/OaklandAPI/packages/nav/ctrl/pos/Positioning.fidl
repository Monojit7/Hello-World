package org.harman.nav.ctrl

import org.harman.nav.ctrl.CommonTypes.* from "../common/CommonTypes.fidl"
import org.harman.nav.ctrl.configuration.ConfigurationTypes.* from "../configuration/ConfigurationTypes.fidl"
import org.harman.nav.ctrl.PositioningTypes.* from "PositioningTypes.fidl"

interface Positioning {
    version { major 0 minor 2 }

    <** @description : Real-time GPS clock corrected by leap-seconds. **>
    attribute GpsTime gpsRTC readonly

    <**
        @description : getPosition = This method returns the current position
    **>
    method getPosition {
        in {
            PositionItemKey[] valuesToReturn
        }
        out {
            PositionItemDict position
        }
    }

    <**
        @description : getAddress = This method returns the current address
    **>
    method getAddress {
        in {
            AddressItemKey[] valuesToReturn
        }
        out {
            AddressItemDict address
        }
    }

    <**
        @description : getStatus = This method returns the current status
    **>
    method getStatus {
        in {
            PositionStatus [] valuesToReturn
        }
        out {
            PositionStatusDict posstatus
        }
    }

    <**
        @description : getCurrentRoadAttributes = This method returns the current road attributes.
    **>
    method getCurrentRoadAttributes {
        in {
            RoadAttributeKeys keys
        }
        out {
            RoadAttributeDict dict
        }
    }

    <**
        @description : positionUpdate = This signal is called to notify a client application of a position change. The update frequency is implementation specific. The maximal allowed frequency is 10Hz
    **>
    broadcast positionUpdate {
        out {
            PositionItemDict changedValues
        }
    }

    <**
        @description : addressUpdate = This signal is called to notify a client application that the current address changed
    **>
    broadcast addressUpdate {
        out {
            AddressItemDict changedValues
        }
    }

    <**
        @description : statusUpdate = This signal is emitted to notify a client application that the current status changed
    **>
    broadcast statusUpdate {
        out {
            PositionStatusDict changedValues
        }
    }

    <**
        @description : offroadPositionChanged = This signal is emitted when the heading and the distance to the closest point on the road network changes
    **>
    broadcast offRoadPositionChanged {
        out {

            <**
                @description : distance = distance in meters to the closest point on the road network
            **>
            UInt32 distance

            <**
                @description : direction = direction in degrees relatively to the closest point on the road network. Range [0:360]
            **>
            Int32 direction
        }
    }
    
    <**
        @description : currentRoadAttributesChanged = This signal is emitted when the current road attributes have changed.
    **>
    broadcast currentRoadAttributesChanged {
      out {
         RoadAttributeDict changedValues
    	}
    }
}