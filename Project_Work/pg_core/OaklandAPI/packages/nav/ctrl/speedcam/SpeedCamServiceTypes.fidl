package org.harman.nav.ctrl.speedcam

import org.harman.nav.ctrl.* from "../common/CommonTypes.fidl"

<**@description: type collection for the speedcam service used e.g. by HMI **>
typeCollection SpeedCamServiceTypes
{
    version { major 3 minor 0 } 
    
    typedef TId is UInt64
    typedef TSpeed_kmh is UInt16
    
    <**@description: Speed cam road orientation **>
    enumeration EDirection
    {
        <**@description: Speed cam is measuring in driving direction **>
        DRIVING_DIRECTION
        
        <**@description: Speed cam is measuring against driving direction **>
        AGAINST_DRIVING_DIRECTION
        
        <**@description: Speed cam is measuring in both directions **>
        BOTH_DIRECTIONS
    }
    
    <**@description: Speed cam data provider **>
    enumeration ESpeedCamProvider
    {
        <**@description: Data from the online service of AHA radio (Cyclopse) **>
        AHA_CYCLOPSE
        
        <**@description: Data from the Coyote app **>
        COYOTE
        
        <**@description: Data from onboard database  **>
        ONBOARD
        
        <**@description: Pending data reported by the Hmi **>
        CUSTOMER
    }
    
    <**@description: Speed cam type **>
    enumeration ESpeedCamType
    {
        <**@description: Type of speed cam not supported or unknown **>
        UNKNOWN_SPEEDCAM
        
        <**@description: A single speed cam installed at a fixed location **>
        FIXED_SPEEDCAM_POINT
        
        <**@description: A red light cam mounted to a fixed location **>
        FIXED_TRAFFIC_LIGHT_CAM_POINT
        
        <**@description: A combined red light cam + speed cam mounted to a fixed location **>
        FIXED_TRAFFIC_LIGHT_AND_SPEEDCAM_POINT
        
        <**@description: A mobile speed cam, temporarily operated at one location **>
        MOBILE_SPEEDCAM_POINT
        
        <**@description: A fixed risk zone (e.g. accident zone, black spot) **>
        FIXED_DANGER_ZONE
        
        <**@description: Zone, where average speed between begin and end location is evaluated **>
        FIXED_AVERAGE_SPEED_ZONE
        
        <**@description: Risk zone with frequent mobile speed cam operations within **>
        MOBILE_RISK_ZONE
    }

    <**@description: Speed cam report identifier. 
    This identifier is unique within the set of newly reported and not yet confirmed speed cameras. **>
    struct SReportId
    {
        <**@description: Inner report identifier. **>
        UInt64 id
    }

    <**@description: Forthcoming speedcam event.
    Beneath the unique identifier of the cam and the remanining distance 
    to it, this event also holds a wide range of attributes associated
    to the cam itself **>
    struct SSpeedCamEvent
    {
        <**@description: Distance indication to forthcoming speed cam**>
        CommonTypes.TDistance_dm distanceTo
        
        <**@description: True, if distance is related to the end of a speed cam zone,
        false in any other case **>
        Boolean isDistanceToZoneEnd
        
        <**@description: Unique identifier of the speed cam (used for feedback loop) **>
        SpeedCamServiceTypes.TId speedCam
        
        <**@description: The provider of the speed cam data **>
        ESpeedCamProvider camProvider
        
        <**@description: The type of the speed cam **>
        ESpeedCamType camType
        
        <** @description: Map icon of the speed cam **>
        CommonTypes.SIcon camIcon 
        
        <** @description: Speed limit of the speed cam in km/h **>
        TSpeed_kmh camSpeedlimit
        
        <**@description: True, if the cam speed limit is currently being 
        exceeded by own speed, false otherwise **>
        Boolean isSpeedlimitExceeded
    }

    <**@description: Speedcam feedback confirmation.
    This structure contains the required information for confirming a new speed cam.
    Beneath the direction indication, this involves an optional speedlimit information 
    (use 0 to let engine determine speed limit) and the type of cam **>
    struct SSpeedCamConfirmationData
    {   
        <** @description: The road orientation of the speed cam **>
        EDirection direction
        
        <** @description: The speed limit of the speed cam in km/h **>
        TSpeed_kmh speedlimit
        
        <** @description: The type of the speed cam **>
        ESpeedCamType camType
    }
}