package org.harman.nav.ctrl.speedcam

import org.harman.nav.ctrl.* from "../common/CommonTypes.fidl"

<**@description: type collection for the speedcam online service used by speed cam data providers **>
typeCollection SpeedCamOnlineServiceTypes
{
    version { major 1 minor 0 }

    <** @description: Data source for speed cam information **>
    enumeration EDataSource
    {
        <**@description: Data from the online service of AHA radio (Cyclopse) **>
        AHA

        <**@description: Data from the Coyote app **>
        Coyote

        <**@description: Data from onboard database  **>
        Onboard

        <**@description: Pending data reported by the Hmi **>
        Custom
    }

    <** @description: Feedback operation type **>
    enumeration EFeedback
    {
        <**@description: New speed cam is reported **>
        New

        <**@description: Existing  speed cam is confirmed **>
        Confirmation

        <**@description: Existing  speed cam is revoked **>
        Revocation
    }

    <** @description: Data update operation type **>
    enumeration EDataUpdate
    {
        <**@description: Data tile is to be updated **>
        Update

        <**@description: Data tile is to be removed **>
        Delete
    }

    <** @description: Used to identify a session **>
    typedef Handle is UInt16

    <** @description: All incoming data is stored as a bytebuffer.
    The concrete format of the data is agreed between service and client:
    AHA: KML-format as string, Coyote: Serialized HBTD as binary**>
    typedef RawData is ByteBuffer

    <** @description: Latitude in degree **>
    typedef Latitude is Double

    <** @description: Longitude in degree **>
    typedef Longitude is Double

    <** @description: Geographic heading in degree **>
    typedef Heading is UInt16

    <** @description: Generic id. concrete format of the data is
    agreed between service and client: AHA: string, Coyote: UInt32 **>
    typedef Id is ByteBuffer

    <**@description:  Tile id **>
    typedef TileId is Int32

    <** @description: Speed in km/h **>
    typedef Speed is UInt16

    <** @description: Country code (ISO 3166-1 alpha-3) **>
    typedef CountryIso is String

    <** @description: Update data structure contains
    update type (update/insert or delete) and generic
    raw-data bytebuffer **>
    struct SDataUpdate
    {
        <** @description: Data update operation type **>
        EDataUpdate type

        <** @description: Tile identifier (in case of delete) **>
        TileId tile

        <** @description: Tile raw data (in case of update) **>
        RawData data
    }

    <** @description: Detailed position of a speedcam **>
    struct SDirectedPosition
    {
        <** @description: Latitude in degree **>
        Latitude latitude

        <** @description: Longitude in degree **>
        Longitude longitude

        <** @description: Geographic heading in degree **>
        Heading heading
    }

    <** @description: Feedback data for speed cams.
    For new reported cams, the speed cam identifier is empty. **>
    struct SSpeedCamFeedback
    {
        <** @description: Type of feedback **>
        EFeedback type

        <** @description: Speed cam identifier **>
        Id id

        <** @description: Speed cam location **>
        SDirectedPosition pos

        <** @description: Speed cam speed limit **>
        Speed limit

        <** @description: Country code (ISO 3166-1 alpha-3) **>
        CountryIso country

        <** @description: Time stamp (seconds, Unix time) **>
        CommonTypes.Timestamp timeStamp
    }
}