package org.harman.nav.ctrl.speedcam

import org.harman.nav.ctrl.speedcam.* from "SpeedCamOnlineServiceTypes.fidl"

<** @description: Generic online interface for a speedcam service
This interface describes the connection to one or multiple 
online speedcam service clients. A client must establish a
session before feed in speedcam related data. As input
data the service expects a kind of bytebuffer - the real
content is specified by EDataSource and depends on the
format agreement between client and service.
The service furthermore provides a feedback interface
to report, confirm or revocate speedcam information. **>
interface SpeedCamOnlineService
{
    version { major 1 minor 0 }
    
    <** @description: Each client (online service) must
    establish a session to the speedcam service to send
    data. The session should be deleted if service gets
    unavailable. In this case all client related data
    gets removed from the service.
    As input parameter the service expects a source 
    enumartion which identifies the camera service.
    Furthermore it expects a boolean which tells the 
    service if feedback loop is supported or not (see
    broadcast feedback for further details)
    Please note: during shutdown all existing sessions will 
    get deleted automatically
    **> 
    method createSession
    {
        in {
            <** @description: Source identifier of provider **>
            SpeedCamOnlineServiceTypes.EDataSource source
            
            <** @description: True, if provider supports custom cam reports, 
            false otherwise **>
            Boolean isFeedbackSupported
        }
        out {
            <** @description: Handle to the new session **>
            SpeedCamOnlineServiceTypes.Handle session
        }
    }
    
    <** @description: Delete session and release
    data. This method should be called whenever an online
    client gets unavailable. The retrieved data of the
    corresponding client gets removed from service.
    Please note: During shutdown, all existing sessions
    will get removed automatically
    **>
    method deleteSession fireAndForget
    {
        in {
            <**@description: Handle to the session to close **>
            SpeedCamOnlineServiceTypes.Handle session
        }
    }
    <** @description: Push speedcam data
    The online client will use this method to push speedcam
    data to the service. As parameter a SDataUpdate strucuture
    is expected which contains a bytebuffer and the update
    type (update or delete). The format stored in the bytebuffer
    depends on the registered datasource (see createSession) 
    and the project-specific format agreements.
    The response of the method will indicate as soon as 
    the service is ready to accept more data.
    **> 
    method push
    {
        in {
            <**@description: Handle to the open client session **>
            SpeedCamOnlineServiceTypes.Handle session
            
            <**@description: Structure holding the raw data **>
            SpeedCamOnlineServiceTypes.SDataUpdate data 
        }
    }
    
    <**  @description: Provide feedback about existing or
    new speedcameras. The scs supports a feedback loop 
    which allows a customer to report new cameras or 
    confirm/ revoke existing cameras.
    The SSpeedCamFeedback structure describes the position
    as well as some characteristics of the reported cam.
    The service will trigger the feedback broadcast only if
    the supportFeedback flag was set during create session call.
    **>
    broadcast feedback {
        out {
            <**@description: Handle to the open client session **>
            SpeedCamOnlineServiceTypes.Handle session
            
            <**@description: Feedback about reported/confirmed/revoked cams **>
            SpeedCamOnlineServiceTypes.SSpeedCamFeedback speedcam
        }
    }
}