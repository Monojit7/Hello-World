package com.harman.audio.waveplayer
import com.harman.audio.waveplayer.wavePlayerType.* from "wavePlayerType.fidl"

interface wavePlayer
{
	version { major 0 minor 1}

	<**
    @description : This function is used to play, stop or abort a predefined beep type.
(at)return handle number on success, -1 on error.
    **>
	method play{
		in{
			String type
		}
		out{
			Int16 handle
		}
	}

	<**
    @description : This function is used to play, stop or abort a special wave file.
(at)return handle number on success, -1 on error.
    **>
	method playFile{
		in{
			String filePath
			beepGroup_e type
            <**
                @description : Number of repetitions for the wave playing. Range is 0~0xFFFF. 
				if repeat count is set to 0xFFFF it will play continuously otherwise only play the given times. 
            **>
			Int16  repeatCount
		}
		out{
			Int16 handle
		}
	}

	<**
    @description : This function is used to play a sine signal with sine generator with special parameters.
(at)return handle number on success, -1 on error.
    **>
	method playSine{
		in{
			beepGroup_e type
			sampleRateType_e sampleRate
			
            <**
                @description : Frequency of the generated sound. Only a range from  0~22050 according to the sample rate. 
            **>
			Int16 frequency
			
            <**
                @description : Time duration of the pause in ms between two pulses. Set on 0 it will result into a permanently played tone. 
            **>
			Int16 pauseTime
			
            <**
                @description : Time duration of the pulse in ms. Not support right now. 
            **>
			Int16 pulseTime
			
            <**
                @description : Number of repetitions for the wave playing. Range is 0~0xFFFF. 
				if repeat count is set to 0xFFFF it will play continuously otherwise only play the given times. 
            **>
			Int16 repeatCount
		}
		out{
			Int16 handle
		}
	}

		<**
    @description : This function is used to stop a playing beep with its handle. this API can stop the any playback created by play(), playFile(), playSine()
(at)return 0 on success, -1 on error.
    **>
	method stop{
		in{
			Int16  handle
		}
		out{
			Int16 result
		}
	}
	
	<**
    @description : This function a signal to indicate the wavePlayer current working state.
    **>
	broadcast playStateUpdate{
		out {
			Int16  handle
		    wavePlayerState_e status			
		}
	}
}