package com.harman.media

import com.harman.media.BaseType.* from "BaseType.fidl"

<** @description : Device Manager interfaces provide device detection control
	and get device informations.
       @author: ydou
   **>
interface DeviceManager {
	version { major 1 minor 0 }
	
	<** @description : Trigger the Device Manager to init & work for device detection.
        @author: ydou
    **>
	method startDeviceDetection {
	    error tBaseError		
	}
	
	<** @description : Get the current connecting devices to Top with the detail information.
        @author: ydou
    **>
	method getDevices {
		out { 
			tMediumInfoList mediumList
		}
		error tBaseError
	}
	
	<** @description : allocate a shadow device
					   onMediumChanged broadcast will be emitted if allocate success.
			mediumId: device id which connectted to the target.
			type: must be 'MT_SHADOW' for allocating a shadow device.
			name: the name for the allocated device.
    **>
	method allocateDevice {
		in {
			UInt32 			mediumId
			tMediumType		type
			String 			name
		}
		out {
			tBaseError 		e
		}
	}

	<** @description : free a shadow device which allocated with allocateDevice interface.
			onMediumChanged broadcast will be emitted if free success.

			mediumId: device id which connectted to the target.
			handleId: shadow device handle.
    **>
	method freeDevice {
		in {
			UInt32  mediumId
			UInt32  handleId
		}
		out {
			tBaseError e
		}
	}

	<** @description : get device items information.

			mediumId: device id which connectted to the target.
			itemsInfo: imtes information will be returned.
			e: error code.
    **>
	method getDeviceItemsInfo {
		in {
			UInt32 		meidumId
		}
		out {
			tItemsInfo		itemsInfo
			tBaseError		e
		}
	}
	
	<** @description : get device firmware information.

			mediumId: device id which connectted to the target.
			fmInfo: firmware information will be returned.
			e: error code.
    **>
	method getDeviceFirmwareInfo {
		in {
			UInt32 		meidumId
		}
		out {
			tFirmwareInfo	fmInfo
			tBaseError		e
		}
	}
	
	<** @description : get device hardware information.

			mediumId: device id which connectted to the target.
			hwInfo: hardware information will be returned.
			e: error code.
    **>
	method getDeviceHarwareInfo {
		in {
			UInt32 		meidumId
		}
		out {
			tHardwareInfo	hwInfo
			tBaseError		e
		}
	}

	<** @description : get the remote player capability for BT device.

			mediumId: device id which connectted to the target.
			caps: remote player capabilities.
			e: error code.
    **>	
	method getRemotePlayerCapability {
		in {
			UInt32		mediumId
		}
		out {
			tRemotePlayerCapability		caps
			tBaseError					e
		}
	}
	
	<** @description : Emit an event to Top when insert or remove a device.
        @author: ydou
    **>
	broadcast onMediumChanged {
		out { 
			tMediumInfo mediumChanged
		}
	}
	
	<** @description : Emit an event to show the sync progress of a device.
        	mediumId: the unique device id.
        	progress: the sync progress.
    **>
	broadcast syncProgress {
		out {
			UInt32 		mediumId
			Double 		progress
		}
	}
	
	<** @description : Emit an event to show the device error.
        	mediumId: the unique device id.
        	e: error code.
    **>
   	broadcast deviceError {
		out {
			UInt32 			mediumId
			tBaseError		e
		}
	}
	
}
