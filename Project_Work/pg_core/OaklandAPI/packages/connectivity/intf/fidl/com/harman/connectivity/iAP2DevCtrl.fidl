/*********************************************************************
 * Project        Harman Car Multimedia System
 * (c) copyright  2015
 * Company        HARMAN International
 *                All rights reserved
 * Secrecy Level  STRICTLY CONFIDENTIAL
 *********************************************************************/

/**
 * @file        iAP2Devctrl.fidl
 * @ingroup     platform_devctrl_iap2
 * @author      DVipin
 * @brief       Interface to communicate with iAP2 driver
 */

package com.harman.connectivity
interface iAP2DevCtrl{
    version { major 4 minor 1}
    
    //--------------------------------------------------------------------
    //                              Methods
    //--------------------------------------------------------------------
    
   /**
    * @brief       Method to send the Play request to phone
    */
   method iap2Play
   {
   
   }
 
   /**
    * @brief       Method to send the Pause request to phone
    */
   method iap2Pause
   {
   
   }
   
   /**
    * @brief       Method to send the Next request to phone
    */
   method iap2Next
   {
   
   }
   
   /**
    * @brief       Method to send the Previous request to phone
    */
   method iap2Previous
   {
   
   }
   
   /**
    * @brief       Method to send the Random request to phone
    */
   method iap2Random
   {
   
   }
   
    /**
    * @brief       Method to send the Repeat request to phone
    */
   method iap2Repeat
   {
   
   }
   
   /**
    * @brief       Method to send the fast-forward request to phone
    */
   method iap2FastForward
   {
   
   }
   
   /**
    * @brief       Method to send the reverse request to phone
    */
   method iap2FastRewind
   {
   
   }
   
   /**
    * @brief       Method to end the fast-forward or reverse request to phone
    */
   method iap2FastEnd
   {
   
   }
   
   /**
    * @brief       Method to send the Normal Speed request to phone
    */
   method iap2AudioBookSpeed
   {
   		in
   		{
   			enAudioBookSpeed audioBookSpeed
   		}
   }
   
   /**
    * @brief       Method to send play/pause request to phone
    */
   method iap2PlayPause
   {
   
   }
   
   /**
    * @brief       Method to send the Siri request to phone
    */
   method iap2Siri
   {
   
   }
   
   /**
    * @brief       Method to send the Mute request to phone
    */
   method iap2Mute
   {
   
   }
   
   /**
    * @brief       Method to send the Increase volume request to phone
    * @return :
    */
   method iap2IncreaseVolume
   {
   
   }
   
   /**
    * @brief       Method to send the Decrease volume request to phone
    */
   method iap2DecreaseVolume
   {
   
   }
   
   /**
    * @brief       Method to send vehicle status data
    * @details     The client object can call this method if it wants to report the vehicle status update    
    *              This method is applicable to Car HU. In case of CarPlay enabled HU, this is mandatory
    * @param[in]   vehicleStatus: Vehicle status info
    **/
   method iap2VehicleStatusUpdate
   {
        in
        {
            tVehicleStatusInfo vehicleStatus
        }
   }
   
   /**
    * @brief       Method to send location information
    * @details     The client object can call this method if it wants to report the location info update
    *              This method is applicable to Car HU. In case of CarPlay enabled HU, this is mandatory
    *              The following NMEA sentences are accpeted as part of the location information.    
    *              <ul>
    *                <li>NMEA GPGGA sentence: GPS System Fix Data</li>    
    *                <li>NMEA GPRMC sentence: Recommended Minimum Specific GPS Transit Data</li>
    *                <li>NMEA GPGSV sentence: GPS Satellites in View</li>
    *                <li>NMEA PASCD sentence: Vehicle Speed Data</li>
    *                <li>NMEA PAGCD sentence: Vehicle Gyro Data</li>
    *                <li>NMEA PAACD sentence: Vehicle Accelerometer Data</li>
    *                <li>NMEA GPHDT sentence: Vehicle Heading Data</li>
    *              </ul>
    * @param[in]   locationStatus: location info update
    **/
   method iap2LocationInfoUpdate
   {
        in
        {
            arString locationStatus
        }
   }

/**
    * @brief       Method to launch an app in iDevice 
      @param[in] :appBundleID : bundleID  mentioned in iap2.cfg of the app
      @param[in]:launchAlert : method of launch ie launching with user alert or not
    *@return :error_OK:if successfully send it to transport layer
    */
   method iap2RequestAppLaunch
   {
   		in
   		{
   	 		String appBundleID
   	 		enAppLaunchMethodType launchAlert
   	 	}
   }
   
   /**
    * @brief       Method to tell apple that accessory is ready for eap session. If the accessory declares support for sendEAPStatus , the APPLE
     *                devices will allow multiple iAP2 EA session per protocol(excluding EA native Transport)
      @param[in] :sessID : SessionID of the session
      @param[in]:isOpen : true if accessory is ready for the session
    *@return :error_OK if successfully send it to transport layer
   */
   method iap2SendEAPStatus 
   {
   		in
   		{
   			UInt16 sessID
   			Boolean isOpen
   		}
   	} 
   	
   /**
    * @brief       Method to send an EAP data over a particular session
      @param[in] :sessID: sessionID of the session given by phone
      @param[in]:data array of data
      @param[in]:len: length of data
    *@return :error_OK if successfully send it to transport layer
   */ 
   method iap2SendEAPData 
   {
   		in
   		{
   	 		UInt16 sessID
   	 		arUInt8 data
   	 		UInt32 len
   	 	}
   	}
   /**    
    * @brief       Method to resume playback from a particular medialibrary     
    * @param[in]   libraryUid: uid  of the medialibrary 
    **/
   method iap2MediaLibraryPlayResume
   {
        in
        {
            String libraryUid
        }
   }
   
   /**
    * @brief       Method to create a playlist for a list of songs and start playback     
    * @param[in]   trk_uids: array of track uids    
    * @param[in]   startIndex: index of the element from which playback should start
    * @param[in]   libraryUid: uid of the media library     
    **/
   method iap2MediaLibraryPlayItems
   {
        in
        {
            arUInt64 trk_uids
            UInt32 startIndex
            String libraryUid
        }
   }
   
   /**
    * @brief       Method to create a playlist for a list of songs and start playback     
    * @param[in]   libraryUid: uid of the media library     
    * @param[in]   collection_uid: ollection uid (eg uid of a particular album,genre)  
    * @param[in]   type: type of collection
    * @param[in]   startIndex: index from which the playback needs to be started
    **/
   method iap2MediaLibraryPlayCollection
   {
        in
        {
            String libraryUid
            UInt64 collectionUid
            enCollectionType type
            UInt32 startIndex
        }
   }
   
   /**
    * @brief    Method to play from the beginning of a media library
    *@brief    libuid : uid of the library  
    *@return :error_OK :if successfully send it to transport layer
    */
   method iap2MediaLibraryPlay
   {
   		in
   		{
   			String libraryUid
   		}
   }
   
   /**      
    * @brief       Method to pass the index and time psoition in playback engine       
    * @param[in]   Time position from which the song has to be started. 0 to start from beginning of the track.       
    * @param[in]   Index of the song in playback engine. If only time position needs to be changed, please pass -1. 
    **/
   method iap2SetNowPlayingInfo
   {
        in
        {
            UInt32 elapsedTime
            Int32 playBacKQueIndex
        }
   }
   
   /**
    * @brief       Method to be called in order to route audio from capture node to playback node in device mode. It is to be called when playstate is Playing
    * @param[in]   bool: to check whether api is success
    **/
   method iap2StartAudioPlayback
   {
        out
        {
            Boolean isSuccess
        }
   }
   
   /**
    * @brief       Method to be called in order stop routing audio from capture node to playback node in device mode. Ideally it is to be called when playstate is Stopped
    * @param[in]   bool: to check whether api is sucess
    **/
   method iap2StopAudioPlayback
   {
        out
        {
            Boolean isSuccess
        }
   }
   
   /**
    * @brief       To  set the sampling rate for device mode audio. Before calling this api,the playback should be stopped and then after calling this api playback should be started 
    * @param[in]   samplerate: sample rate recieved from iphone through deviceModeSamplingRateUpdate
    * @param[in]   bool: to check whether api is sucess
    **/
   method iap2SetSamplingRate
   {
        in
        {
            enUsbDevModeAudioSampleRateType samplingRate
        }
        out
        {
            Boolean isSuccess
        }
   }
   
   /**
    * @brief       To  set the Power source update. For the first time this will be read from iap2.cfg and for later updation use the below api
    * @param[in]   current: available current to pass . Following are the allowed values 0,1000,2100,2400         
    * @param[in]   selfCharge: if the device battery should be charged ,pass true else pass false          
    **/
   method iap2SetPowerSourceUpdate
   {
        in
        {
            UInt16 current
            Boolean selfCharge
        }
   }

   /**
    * @brief       To get the various media libraries present in IAP2 devices
    * @param[in]   libInfo: array of media library info
    **/
   method getMediaLibraryInfo
   {
        out
        {
            arMediaLibrary libInfo
        }
   }
   
   /**
    * @brief       To get the current device mode sampling rate
    * @param[in]   sampleRate : current sampling sampling rate
    **/
   method getDeviceModeSampleRate
   {
        out
        {
            enUsbDevModeAudioSampleRateType sampleRate
        }
   }
   
   /**
    * @brief       To get the current repeat status
    * @param[in]   repeatStatus: current repeat status
    **/
   method getRepeatStatus
   {
        out
        {
            enPlaybackRepeatModeType repeatStatus
        }
   }
   
   /**
    * @brief       To get the current playBackSpeed
    * @param[in]   playBackSpeed: current playback speed
    **/
   method getPlayBackSpeed
   {
        out
        {
            UInt16 playbackSpeed
        }
   }
   
   /**
    * @brief       To get the current shuffle status
    * @param[in]   shuffleMode: returns current shuffle status
    **/
   method getShuffleStatus
   {
        out
        {
            enPlaybackShuffleModeType shuffleMode
        }
   }
   
   /**
    * @brief       To get the current playback state
    * @param[in]   playState: returns playstate 
    **/
   method getPlayBackState
   {
        out
        {
            enPlaybackStatusType playState
        }
   }
   
   /**
    * @brief       To get the current playback status
    * @param[in]   playbackstatus:  playback status
    **/
   method getPlayBackStatus
   {
        out
        {
            tPlaybackStatusData playBackStatus
        }
   }
   
   /**
    * @brief       To get the current artworkPath
    * @param[in]   artworkFilePath:  artworkFile path
    **/
   method getArtworkPath
   {
        out
        {
            String artworkFilePath
        }
   }
   
   /** THIS API IS DEPRICATED!!!
    * @brief       To get the current downloaded vcard file path 
    * @param[in]   vCardPath:  vcard path
    **/
   method getvCardPath
   {
        out
        {
            String vCardPath
        }
   }
   
   /**
    * @brief       To get the current playback list
    * @param[in]   pbQueueListPath: vector of playback queue list
    **/
   method getPlaybackQueueList
   {
        out
        {
            arPbQueList pbQueueListPath
        }   
   }
   
   /**
    * @brief       To get the deviceName
    * @param[in]   deviceName: DeviceName
    **/
   method getDeviceName
   {
        out
        {
            String deviceName
        }
   }
   
   /**
    * @brief       To get the device language
    * @param[in]   devicelanguage: current device language
    **/
   method getDeviceLanguage
   {
        out
        {
            String devicelanguage
        }
   }
   
   /**
    * @brief       To get the device UUID
    * @param[in]   deviceUUID: device UUID
    **/
   method getDeviceUUID
   {
        out
        {
            String deviceUUID
        }
   }
   
   /**
    * @brief       To get the telephony info
    * @param[in]   telephony: telephony info
    **/
   method getTelephonyInfo
   {
        out
        {
            tTelephonyUpdate telephony
        }
   }
   
   /**
    * @brief       To get the call state status  
    * @param[in]   callState: structure holding callstate details
    **/
   method getCallStateStatus
   {
        out
        {
            tCallStateInfo callState
        }
   }
   
   /**
    * @brief       To get the power update status 
    * @param[in]   powerInfo: structure holding power update information
    **/
    method getPowerUpdateInfo
    {
        out
        {
            tPowerUpdateInfo powerInfo
        }
    }
	
   /**
    * @brief       To get the current Now playing Info
    * @param[in]   nowPlayingMetaData:   Now playing metadata info details
    **/
   method getNowPlayingInfo
   {
		out
		{
			tMediaMetaData nowPlayingMetaData
		}
   }
   /**
    * @brief       To get the wireless CarPlay support
    * @param[in]   nowPlayingMetaData:   Now playing metadata info details
    **/
   method getWirelessCarPlaySupport
   {
		out
		{
			enWirelessCarPlayUpdate wirelessCarPlaySupport
		}
   }
   
   /**
    * @brief       Method to start sending media library details from APPLE
    *
    */
   method startMgrMediaLibraryInfo
   {
   
   }
   
   /**
    * @brief       Method to stop sending media library details from APPLE
    *
    */
   method stopMgrMediaLibraryInfo
   {
   
   }
   
   /**
    * @brief    Method to sart sending a media library content details from APPLE
    * @brief    libuid : uid of the library 
    * 
    */
    method startMgrMediaLibraryUpdates
	{
		in
		{
			String libraryUid
		}
	}
    
	/**
    * @brief    Method to stop sending a media library content details from APPLE
     *@brief    libuid : uid of the library  
    *
    */
	method stopMgrMediaLibraryUpdates
	{
		in
		{
			String libraryUid
		}
	}
      
   //--------------------------------------------------------------------
   //                              Broadcasts
   //--------------------------------------------------------------------
   
   /**
    * @brief       Callback function to indicate Authentication Status    
    * @param[in]   isSuccess: Flag indicating authentication result    
    **/
   broadcast authenticationStatus
   {
        out
        {
            Boolean isSuccess
        }
   }
   
   /**
    * @brief       Callback function to indicate Identification Status    
    * @param[in]   isSuccess: Flag indicating identification result    
    **/
   broadcast identificationStatus
   {
        out
        {
            Boolean isSuccess
        }
   }
   
   /**
    * @brief       Callback function to indicate Power information update
    * @param[in]   powerUpdateInfo: Power info
    **/
   broadcast powerUpdate
   {
        out
        {
            tPowerUpdateInfo powerUpdateInfo
        }
   }
   
   /**
    * @brief       Callback function to indicate Apple device's command to start sending vehicle status
    * @param[in]   needRange:         Need to report remaining Range    
    * @param[in]   needOutsideTemp:   Need to report outside temperature    
    * @param[in]   needRangeWarn:     Need to report if low range warning is on
    **/
   broadcast startVehicleStatusUpdate
   {
        out
        {
            Boolean needRange
            Boolean needOutSideTemp
            Boolean needRangeWarn 
        }
   }
   
   /**
    * @brief       Callback function to indicate Apple device's command to stop sending vehicle status
    **/
   broadcast stopVehicleStatusUpdate
   {
   
   }
   
   /**
    * @brief       Callback function to indicate Apple device's command to start sending location information
    **/
   broadcast startLocationInfoUpdate
   {
        out
        {
            tLocationInfoRequest request        
        }
   }
   
   /**
    * @brief       Callback function to indicate Apple device's command to stop sending location information
    **/
   broadcast stopLocationInfoUpdate
   {
   
   }
   
   /**
    * @brief       Callback funcion to notify that the artwork is available
    * @param[in]   Path where artwork data is dumped in jpg format. The project is responsible for deleting the file 
    *              The path for dumping the artwork is configurable in iap2.cfg
    */
   broadcast artworkAvailable
   {
        out
        {
            String artworkFilePath
        }  
   }
   
   /**
    * @brief       Callback funcion to notify that the curent playbackQueList is available
    * @param[in]   pbQueList: vector comprising  uid of current playing list. The first song in playlist is the zeroth element of vector and so on
    **/
   broadcast playbackQueueListAvailable
   {
        out
        {
            arPbQueList  pbQueList
        } 
   }
   
   /**
    * @brief       Callback function to indicate Apple device's Nmae
    **/
   broadcast deviceNameUpdate
   {
        out
        {
            String name
        }
   }
   
   /**
    * @brief       Callback function to indicate language supported
    **/
   broadcast deviceLanguageUpdate
   {
        out
        {
            String lang
        }
   }
   
   /**
    * @brief       Callback function to indicate Apple device time update
    * @param[in]   secSinceEpoc: Time inerval in seconds since refernece data[Jan1 1970,GMT]
    * @param[in]   timeZoneOffsetMin: Difference in minutes between the device time zone and GMT
    * @param[in]   DSTOffsetMin: Daylight savings time offset in minutes
    **/
   broadcast deviceTimeUpdate
   {
        out
        {
            UInt64  secSinceEpoc
            Int16   timeZoneOffsetMin
            Int8    DSTOffsetMin
        }  
   }
   
      /**
    * @brief      Callback function to indicate device UUID. This UUID will be same over all the transports as long as one iAP accessory is connected
    *               The UUID will be changed no less than one minute after all iAP accessories disconenct
    *
    */
   broadcast  deviceUUIDUpdate
   {
   		out
   		{
   			String uuid
   		}
   }
   
   /**
    * @brief       CallBack function to indicate  telephony update is available from iPhone
    * @param[in]   telephony: structure holding telephony details
    **/
   broadcast telephonyUpdates
   {
        out
        {
            tTelephonyUpdate telephony
        }
   }
   
   /**
    * @brief       CallBack function to indicate  call state status is updated  from iPhone
    * @param[in]   callState: structure holding callstate details
    **/
   broadcast callStateStatusUpdates
   {
        out
        {
            tCallStateInfo callState
        }
   }
   
   /**THIS API IS DEPRICATED!!!
    * @brief       CallBack function to indicate  vCard is available
    * @param[in]   vcardPath: path where vcard file is presnet in .txt format. The project is responsible for deleting the file.
    *              The path for dumping the vcard is configurable in iap2.cfg
    **/
   broadcast vCardAvailable
   {
        out
        {
            String vCardPath
        }
   }
   
   /**
    * @brief       CallBack function that give media library information update
    * @param[in]   arMediaLibrary: vector of medialibraryinfo structure
    **/
   broadcast mediaLibInfoUpdate
   {
        out
        {
            arMediaLibrary libInfo
        }
   }
   
   /**
    * @brief       CallBack function to pass the artwork for each media item during media library synching.This method is less preferable as the time taken
    *              for syncing will be high which increases usb traffic at the beginning(.jpg format)     
    * @param[in]   artworkmediaSynPath: path where artwork is dumped: path is configurable via iap2.cfg
    **/
   broadcast mediaLibSyncArtworkAvailable
   {
        out
        {
            String  artworkmediaSynPath
        } 
   }
   
   /**
    * @brief       CallBack function to pass devicemode audio Sampling Rate update
    * @param[in]   deviceModeSamplingRate: sampling rate change
    **/
   broadcast deviceModeSamplingRateUpdate
   {
        out
        {
            enUsbDevModeAudioSampleRateType  deviceModeSamplingRate
        }
   }
   
   /**
    * @brief       Callback function to notify the possible errors occured in stack    
    * @param[in]   errorStatus: enum that denotes various errors that stack can come across
    **/
   broadcast errorStatusEvent
   {
        out
        {
            enErrorState errorStatus
        }
   }
   
   /**
    * @brief       Callback function to notify the current track position
    * @param[in]   trackTimeinMs: structure which denotes total duration and current position
    **/
   broadcast onUpdateTrackTimePosition
   {
        out
        {
            tTrackTimePosition trackTimeinMs
        }
   }
   
   /**
    * @brief       Callback function to notify the Repeat status
    * @param[in]   repeatStatus: repeat status
    **/
   broadcast onUpdateRepeatStatus
   {
        out
        {
            enPlaybackRepeatModeType repeatStatus
        }
   }
   
   /**
    * @brief       Callback function to notify the playBack speed
    * @param[in]   playbackSpeed: playback speed
    **/
   broadcast onUpdatePlayBackSpeed
   {
        out
        {
            UInt16 playbackSpeed
        }
   }
   
   /**
    * @brief       Callback function to notify the shuffle status
    * @param[in]   shuffleMode: shuffle mode
    **/
   broadcast onUpdateShuffleStatus
   {
        out
        {
            enPlaybackShuffleModeType shuffleMode
        }
   }
   
   /**
    * @brief       Callback function to notify the playback state
    * @param[in]   playState: playback state
    **/
   broadcast onUpdatePlayBackState
   {
        out
        {
            enPlaybackStatusType playState
        }
   }
   
   /**
    * @brief       Callback function to notify the current playback status
    * @param[in]   playBackStatus: playback status
    **/
   broadcast onUpdateNowPlayingPlayBackStatus
   {
		out
		{
			tPlaybackStatusData playBackStatus
		}
   }
   
   /**
    * @brief       Callback function to notify the current nowplaying metadata
    * @param[in]   metaData: metadata
    **/
   broadcast onUpdateNowPlayingMetaData
   {
		out
		{
			tMediaMetaData metaData
		}
   }

   
   /**
    * @brief : sending the updates of database syncing
    * @param1: stage : completion stage
    * @param2: completionStatus : status of completion in the particular pass. Note for second pass the completion status is not valid
    * @param3: mediaLibUid: media library Uid for which syncing is happening
    */
	broadcast onUpdateDataBaseStatus
	{
		out
		{
		    enSyncStage stage
			UInt32 completionStatus
			String mediaLibUID
		}
	}
   
 
   /**
    * @brief      Callback function to indicate if Wireless CarPlay is supported or not
    *
    */
   broadcast wirelessCarPlayUpdate
   {
   		out
   		{
   			enWirelessCarPlayUpdate wirelessCarPlayStatus	
   		}
   } 
   
   /**
    * @brief     callBack function to notify  a new EAP session is available from iDevice
     *@param[in]appName: BundleID which we passed in EAP session of iap2.cfg file
     *@param[in]sessionID: session ID given by phone
    */
   broadcast newEAPSession 
   {
   		out
   		{
   			String appName
   			UInt16 sessionID
   		}
   }
   /**
    * @brief      callBack function to notify  data is available for an eap session
     *@param[in]appName: app Name which we passed in EAP session of iap2.cfg file
     *@param[in]sessionID: session ID given by phone
     *@param[in]data: data 
     *@param[in]len:lengh of data
    */
   broadcast eapDataAvaialble
   {
   		out
   		{
   			 String appName
   			 UInt16 sessionID
   			 arUInt8 data
   			 UInt32 len
   		}
   }
   /**
    * @brief   CallBack function to notify  an EAP session is closed from iPhone 
     *@param[in]appName: app Name which we passed in EAP session of iap2.cfg file
     *@param[in]sessionID: session ID given by phone
    */
   broadcast closedEAPSession
   {
   		out
   		{
   			String appName
   			UInt16 sessionID
   		}
   } 
   //--------------------------------------------------------------------
   //                              Structures
   //--------------------------------------------------------------------
   
   /**     
    * @struct      powerUpdateInfo    
    * @brief       Structure representing the data for the power update information    
    */
    struct tPowerUpdateInfo
    {
        UInt16                        maxCurrentDrawn                           /**< Max current drawn by the Apple Device                                             */
                                                                                                                                                                       
        Boolean                       deviceCanCharge                           /**< Flag indicating whether the Apple device can charge                               */
                                                                                                                                                                       
        enPowerModeType               mode                                      /**< Power mode of the Apple device                                                    */
                                                                                                                                                                       
        Boolean                       extChargerConnected                       /**< Flag indicating if the Apple device is connected to charger                       */
                                                                                                                                                                       
        enBatteryChargeStateType      chargingState                             /**< Current charging state of the Apple device                                        */
                                                                                                                                                                       
        UInt16                        chargeLevel                               /**< Is the Max current data is valid                                                  */
    }

   /**
    * @struct      vehicleStatusInfo   
    * @brief       Structure representing the data for the vehicle status update information  
    **/
    struct tVehicleStatusInfo
    {
        Boolean           hasRangeValue		                                    /**< Is the Range value valid                                                          */    						
        UInt16            remainingRangeKM                                      /**< Remaining Range in KM                                                             */
                                                                                
        Boolean           hasOutsideTemp                                        /**< Is the Outside temperature data valid                                             */
        Int16             outsideTempC                                          /**< Outside temperature in Celsius                                                    */
                                                                                
        Boolean           hasRangeWarn                                          /**< Is the Range warning flag valid                                                   */
        Boolean           isLowRangeWarn                                        /**< Flag indicating is the Low range warning is ON                                    */
   }
   
   /**
    * @struct      locationInfoRequest
    * @brief       Structure representing the location information requested by Apple device
    **/
    struct tLocationInfoRequest
    {
        Boolean        needGPGGA                                                /**< Need to report NMEA GPGGA sentence: GPS System Fix Data                           */
        Boolean        needGPRMC                                                /**< Need to report NMEA GPRMC sentence: Recommended Minimum Specific GPS Transit Data */
        Boolean        needGPGSV                                                /**< Need to report NMEA GPGSV sentence: GPS Satellites in View                        */
        Boolean        needPASCD                                                /**< Need to report NMEA PASCD sentence: Vehicle Speed Data                            */
        Boolean        needPAGCD                                                /**< Need to report NMEA PAGCD sentence: Vehicle Gyro Data                             */
        Boolean        needPAACD                                                /**< Need to report NMEA PAACD sentence: Vehicle Accelerometer Data                    */
        Boolean        needGPHDT                                                /**< Need to report NMEA GPHDT sentence: Vehicle Heading Data                          */
    }

   /**
    * @struct      telephonyUpdate
    * @brief       Structure representing the details of telephony updates    
    **/
    struct tTelephonyUpdate
    {
        enTelephonySignalStrength           telephonySignalStrength             /** strength of telephony signal */
        enTelephonyRegistrationStatus       telephonyRegistrationStatus         /** telephony registraation status */
        Boolean                             telephonyAirplaneModeStatus         /* true if airplane mode is enabled in phone */
        String                              carrierName                         /** name of mobile operator */
        Boolean                             cellularSupported          
        Boolean                             telephonyEnabled          
        Boolean                             faceTimeAudioEnabled          
        Boolean                             faceTimeVideoEnabled          
        Boolean                             muteStatus          
        UInt8                               currentCallCount          
        UInt8                               newVoiceMailCount          
        Boolean                             initiateCallAvailable               /** allowed to initiate or add a call if one is already active **/
        Boolean                             endAndAcceptAvailable          
        Boolean                             holdAndAcceptAvailable          
        Boolean                             swapAvaialable          
        Boolean                             mergeAvaialable          
        Boolean                             holdAvaialable                      /** you cannot place a call on hold if this is false. You can unhold a call if th status if held even if this s false **/
    }
   
   /**
    * @struct      callStateInfo
    * @brief       Structure representing the details of call state    
    **/
    struct tCallStateInfo
    {
        String                              remoteID                            /**RemotePhoneNumber or Email ( optional)                                               */ 
        String                              displayName                         /** caller displayName(optional)                                                        */
        enCallStateStatus                   callStateStatus                     /** status of call                                                                      */
        enCallStateDirection                callStateDirection                  /** direction of call (optional)                                                        */
        String                              uniqueCallID                        /** unique call ID (optional)                                                           */
        String                              addressBookID                       /**(optional)                                                                           */
        String                              label                               /**(callers label)(optional)                                                            */
        enCallStateUpdateService            service
        Boolean                             isConfereced                        /**whether this call is a part of conference or not(optional)                           */
        UInt8                               conferenceGroup                     /** conference group. will only sent if isConferenced is =1 (optional)                  */
        enCallStateUpdateDisconnectReason   disconnectReason                    /** will only be sent if status = Disconenceted (otpional)                              */
    }
     
   /**
    * @struct      mediaLibraryInfo
    * @brief       Structure representing the details of media librarary present in iDevice
    **/
    struct tMediaLibraryInfo
    {
        String                             mediaLibraryName                     /** media library name                                                                 */   
        String                             mediaLibraryUniqueId                 /** unique id of each media library                                                    */
        enMediaLibraryType                 MediaLibraryType                     /** media library Type                                                                 */
    }
   
   /**
    * @struct      playbackStatusData
    * @brief       Structure representing the details of media playback status
    **/   
    struct tPlaybackStatusData
    {
		UInt32                             queueIndex	
		UInt32                             queueCount
		UInt32                             queueChapterIndex
		String                             appName
		String                             mediaLibUID
		Boolean                            isRadioAd
		String                             iTunesStationName
		UInt64                             iTunesStationPersistentID
		Boolean                            setElapsedAvailable
		UInt8				               pbQueueListFileID	 
		String                             appBundleID
    }

   /**
    * @struct      mediaMetaData
    * @brief       Structure representing the first part of metadata of media playback 
    **/
    struct tMediaMetaData
    {
        UInt64                             persistentID
		String                             trackTitle
		arMediaItemMediaType               mediaType 
		UInt8                              rating
		UInt32                             durationMSec
		UInt64                             albumPersistentID
		String                             albumTitle
		UInt16                             albumTrackNum
		UInt16                             albumTrackCount
		UInt16                             albumDiscNum
		UInt16                             albumDiscCount
		UInt64                             artistPersistentID
		String                             artistName
		UInt64                             albumArtistPersistentID
		String                             albumArtistName
		UInt64                             genrePersistentID
      	String                             genreName
    	UInt64   	                       composerPersistentID
    	String    	                       composerName
		Boolean		    				   isPartOfCompilation
		Boolean			          		   isLikeSupported
		Boolean			           		   isBanSupported
		Boolean			           		   isLiked
		Boolean			           		   isBanned
		Boolean			          		   isResidentOnDevice
		UInt8				      		   artworkFileID
    	UInt16                             chapterCount
     }

   
   /**
    * @struct      trackTimePosition
    * @brief       Structure representing the metadata of media playback 
    **/
    struct tTrackTimePosition
    {
        UInt32                             totalDuration
        UInt32                             trackPosiiton
    }
   
    //--------------------------------------------------------------------
    //                              Enumerations
    //--------------------------------------------------------------------
  
   /** 
    * @enum        collectionType
    * @brief       Enum value representing the collection types
    **/ 
    enumeration enCollectionType
    {
        Playlist			                                                   /**< Collection type is Playlist                                                       */											
        Artist                                                                 /**< Collection type is Artist                                                         */
        Album                                                                  /**< Collection type is Album                                                          */
        AlbumArtist                                                            /**< Collection type is AlbumArtist                                                    */
        Genre                                                                  /**< Collection type is Genre                                                          */
        Composer                                                               /**< Collection type is Composer                                                       */
    }                                                                          
                                                                               
   /**                                                                         
    * @enum        errorState                                                  
    * @brief       Enum value representing the error states                    
    **/                                                                        
    enumeration enErrorState                                                   
    {                                                                          
        error_LinkDisconnected                                                 /**<If link is disconnected from Device                                                */
        error_Timeout                                                          /**<if timeout happened for a request                                                  */
    }                                                                          
                                                                               
   /**                                                                         
    * @enum        playbackStatusType                                          
    * @brief       Enum value representing the playback status types           
    **/                                                                        
    enumeration enPlaybackStatusType                                           
    {                                                                          
        playbackStatus_Stopped	                                               /**< Playback status is Stopped                                                        */
        playbackStatus_Playing                                                 /**< Playback status is Playing                                                        */
        playbackStatus_Paused                                                  /**< Playback status is Paused                                                         */
        playbackStatus_SeekFwd                                                 /**< Playback status is Seek forward                                                   */
        playbackStatus_SeekBkwd                                                /**< Playback status is Seek backward                                                  */
    }
    
    /**                                                                         
    * @enum        playbackStatusType                                          
    * @brief       Enum value representing the playback status types           
    **/
    enumeration enAudioBookSpeed
    {
    	audioBook_IncreaseSpeed	                                               /**< Increase speed of audio book                                                      */
    	audioBook_DecreaseSpeed	                                               /**< Decrease speed of audio book                                                      */
    	audioBook_NormalSpeed	                                               /**< Play audio book at normal speed                                                   */
    }
   /** 
    * @enum        playbackShuffleModeType
    * @brief       Enum value representing the playback shuffle mode type
    */
    enumeration enPlaybackShuffleModeType
    {
        playbackShuffleMode_Off                                                //**< Playback shuffle mode off                                                        */
        playbackShuffleMode_Songs                                              //**< Shuffle songs																	  */
        playbackShuffleMode_Albums                                             //**< Shuffle album																	  */
    }                                                                          
                                                                               
   /**                                                                         
    * @enum        playbackRepeatModeType                                      
    * @brief       Enum value representing the playback repeat mode status     
    */                                                                         
    enumeration enPlaybackRepeatModeType                                       
    {                                                                          
        playbackRepeatMode_Off                                                 //**< Playback repeat off                                                              */
        playbackRepeatMode_One                                                 //**< Repeat one song                                                                  */
        playbackRepeatMode_All                                                 //**< Repeat all songs                                                                 */
    }                                                                          
                                                                               
   /**                                                                         
    * @enum        UsbDevModeAudioSampleRateType                               
    * @brief       Enum value representing the device mode sampling rates      
    **/                                                                        
    enumeration enUsbDevModeAudioSampleRateType                                
    {                                                                          
        usbDevModeAudioSampleRate_8000Hz                                       /**< 8 KHz Audio data                                                                  */
        usbDevModeAudioSampleRate_11025Hz                                      /**< 11.025 KHz Audio                                                                  */
        usbDevModeAudioSampleRate_12000Hz                                      /**< 12 KHz Audio                                                                      */
        usbDevModeAudioSampleRate_16000Hz                                      /**< 16 KHz Audio                                                                      */
        usbDevModeAudioSampleRate_22050Hz                                      /**< 22.05 KHz Audio                                                                   */
        usbDevModeAudioSampleRate_24000Hz                                      /**< 24 KHz Audio                                                                      */
        usbDevModeAudioSampleRate_32000Hz                                      /**< 32 KHz Audio                                                                      */
        usbDevModeAudioSampleRate_44100Hz                                      /**< 44.1 KHz Audio                                                                    */
        usbDevModeAudioSampleRate_48000Hz                                      /**< 48 KHz Audio                                                                      */
    }
    
   /**     
    * @enum        powerModeType    
    * @brief       Enum value representing the type of power mode used by Apple device    
    **/
    enumeration enPowerModeType
    {
        powerMode_reserved                                                  /**< Reserved value for future use                                                     */
        powerMode_lowPowerMode                                              /**< Low-Power mode                                                                    */
        powerMode_intermittentHighPowerMode                                 /**< Intermittent High-Power mode                                                      */
    }
    
   /**     
    * @enum        batteryChargeStateType    
    * @brief       Enum value representing the type of battery charge state of Apple device 
    **/
    enumeration enBatteryChargeStateType
    {
        batteryChargeState_disabled                                         /**< Battery charging is disabled                                                      */
        batteryChargeState_charging                                         /**< Battery is charging                                                               */
        batteryChargeState_charged                                          /**< Battery is fully charged                                                          */
    }
    
   /** 
    * @enum        telephonySignalStrength
    * @brief       Enum value representing the telephony signal strength
    **/
    enumeration enTelephonySignalStrength
    {
        zero_Bars                                                           /**< no charging                                                                       */
        one_Bars                                                            /**< Charged upto 20%                                                                  */
        two_Bars                                                            /**< Charged upto 40%                                                                  */
        three_Bars                                                           /**< Charged upto 60%                                                                  */
        four_Bars                                                           /**< Charged upto 80%                                                                  */
        five_Bars                                                           /**< Charged 100%                                                                      */
    }
    
   /** 
    * @enum        telephonyRegistrationStatus
    * @brief       Enum value representing the registration status of telephony
    **/   
    enumeration enTelephonyRegistrationStatus
    {
        unknown                                                             /**< Telephony Registration status unknown                                             */
        not_Registered                                                      /**< Telephony not registered                                                          */
        searching                                                           /**< Telephony registration status searching                                           */
        denied                                                              /**< Telephony registration denied                                                     */
        registered_Home                                                     /**< At home                                                                           */
        roaming                                                             /**< Roaming                                                                           */
        emergency_Calls_Only                                                /**< Emergency calls only                                                              */
    }
   
   /** 
    * @enum        callStateStatus
    * @brief       Enum value representing the call status
    **/
    enumeration enCallStateStatus
    {
        status_Disconnected													/** Call is disconnected                                                               */
        status_Sending
        status_Ringing
        status_Connecting													/** Call is getting connected                                                          */
        status_Active														/** Call is active                                                                     */
        status_Hold															/** Call is on hold                                                                    */
        status_Disconnecting
    }
    
    /** 
    * @enum        callStateUpdateService
    * @brief       Enum value representing the call update service
    **/
    enumeration enCallStateUpdateService
    {
       service_Unknown 
       service_Telephony
       service_FaceTimeAudio
       service_FaceTimeVideo
    }
    
    /** 
    * @enum        callStateUpdateDisconnectReason
    * @brief       Enum value representing the call disconnection reason
    **/
    enumeration enCallStateUpdateDisconnectReason
    {
       no_Reason
       call_Declined
       call_Failed
    }
    
   /** 
    * @enum        callStateDirection
    * @brief       Enum value representing the direction of call
    **/
    enumeration enCallStateDirection
    {
        direction_Unknown                                                   /** Call direction unknown                                                             */
		direction_Incoming                                                  /** Call is incoming                                                                   */
        direction_Outgoing                                                  /** Call is outgoing                                                                   */
    }
     
   /** 
    * @enum        mediaLibraryType
    * @brief       Enum value representing the different types of media library
    **/
    enumeration enMediaLibraryType
    {
        LocalDeviceLibrary                                                  /** local device library                                                               */
        iTunesRadioLibrary                                                  /** itunes radio library                                                               */
    }
   
   /** 
    * @enum        mediaItemMediaType
    * @brief       Enum value representing different types of media item
    **/
    enumeration enMediaItemMediaType
    {
        mediaItemMedia_Music	                                            //**< Media Type is Music                                                              */
        mediaItemMedia_Podcast                                              //**< Media Type is Podcast                                                            */
        mediaItemMedia_AudioBook                                            //**< Media Type is AudioBook                                                          */
        mediaItemMedia_iTunesU                                              //**< Media Type is iTunes                                                             */
    }
	
   /** 
    * @enum        mediaItemMediaType
    * @brief       Enum value representing different types of media item
    **/
    enumeration enSyncStage
	{
		DATABASE_SYNC_START
	    DATABASE_FIRSTPASS_DONE
	    DATABASE_SECONDPASS_DONE
	    DATABASE_ADDPLAYLIST_DONE                                            // for syncing playlist
	    DATABASE_DELETEITEMS_DONE                                            //if items are getting deleted from database
	    DATABASE_DELETEPLAYLIST_DONE                                         //playlist is geting deleted
	    DATABASE_SYNC_COMPLETED                                              // if syncing is completed from iphone
	    DATABASE_SYNC_UNKNOWN                                                                                                     
	}
	
	enumeration enWirelessCarPlayUpdate
    {
        wirelessCarPlay_Unavailable
        wirelessCarPlay_Available
    }
 
   enumeration enAppLaunchMethodType
   {
        appLaunchMethod_withUserAlert
        appLaunchMethod_withoutAlert
   }
   
   
    //--------------------------------------------------------------------
    //                              Arrays
    //--------------------------------------------------------------------   
   
    array arMediaLibrary of tMediaLibraryInfo
    array arPbQueList of UInt64
	array arUid of UInt64
    array arMediaItemMediaType of enMediaItemMediaType
    array arString of String
    array arUInt64 of UInt64
    array arUInt8  of UInt8
}