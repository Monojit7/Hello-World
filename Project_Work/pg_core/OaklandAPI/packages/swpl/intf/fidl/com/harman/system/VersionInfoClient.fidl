package com.harman.system

	<**
	   @description :  Client-Interface to supply version information.
		This interface contains functions, which have direct influence on the system state and therefore have to be handled with care. The interface can only be used by certain clients, which need to be configured in the D-Bus configuration.
		
		Under review
   **>
   
interface VersionInfoClient {
	version { major 0 minor 1 }
	
	<**
	   @description :  Request list of versions.
		The response will contain a vector of VersionName/Version/VersionType triples (CClientVersionListEntry), 
		that are delivered by this component. Typically this will be internal versions 
		(firmware and/or hardware versions)of hardware parts, the component is responsible of. 
		In special project dependant cases it could as well be customer specific versions or 
		versions of MOST devices. The type of each version is part of the triple CClientVersionListEntry.
   **>
   
	method VersionList {
		out { VersionListArray versions }
		error {
			VERSION_UNDEFINED=0
			<**
	  		 @description :  Version information is not ready. Try again later.
   			**>
			VERSION_TRY_AGAIN=1
		}
	}
	
	broadcast VersionReady selective {
		
	}
	
	array VersionListArray of VersionListEntry
	
	struct VersionListEntry {
		<**
	  		 @description :  This is a unique (over all components that implement this interface) Identifier for the version. 
	  		 Each version must have a unique and meaningfull name. This name will be used as a handle to get the version as well 
	  		 as to display the version in engineering menu and to perform version checks against a required version.&#13;
			PLEASE NOTE, that uniqueness is not checked at runtime. Reuse of a VersionName will overwrite the old version.&#13;
   		**>
		String VersionName
		<**
	  		 @description :  This is the actual version information. It has to be a string. If the module does not provide this 
	  		 information in a textual form, the component that implements the VersionInfoClient interface has to convert it to text.
   		**>
		String Version
		
		tVersionType VersionType
	}
	
	enumeration tVersionType {
		VT_INVALID = 0
		VT_HWVERSION_INTERNAL=1
		VT_SWVERSION_INTERNAL=2
		VT_SWVERSION_SYSTEM=3
		VT_HWID_INTERNAL=4
		VT_SWID_INTERNAL=5
	}
}