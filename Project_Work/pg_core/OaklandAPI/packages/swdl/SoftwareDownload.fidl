package com.harman.swdl


import com.harman.swdl.SwdlTypes.* from "SwdlTypes.fidl"

	<** @description :       This is a Common API DBUS interface Orinoco 2.0 that can used to Software Download from other interested modules
       @author: SThekkumbada 
    **>

interface SoftwareDownload {
	version { major 1 minor 0 }
	
	<** @description : To check for any software updates are available for download and install. 
					   Software update service checks in server for any update available.
    **>
	method CheckForUpdates {
		out { tUpdateCheckResult checkResult }
		error eSwdlError
	}
	
	

	<** @description : To start the download of newly available software. Download can be accepted, deferred and declined using this method
    **>
	method StartSoftwareDownload {
		in { eRequestDownload requestDownload }
		error eSwdlError
	}
	
	<** @description : Software download package download progress info.
    **>
	attribute UInt32 downloadProgress

	
	<** @description : To start the installation of newly available software. Download can be accepted, deferred and declined using this method.
					   The installation happens in special software update mode.
    **>
	method StartInstallation {
		in { eInstallPackage installPackage }
		error eSwdlError
	}
	
			<** @description : To cancel the download which is already started
    **>
	method CancelDownload {
		error eSwdlError
	}
	
		<** @description : To enable disable automatic download. true for enabling automatic download and false for disabling. 
							In case of enabling automatic check, checking interval in minutes can be passed
    **>
	method SetAutomaticCheck {
		in { 
			Boolean enableAutoCheck
			UInt32 checkInterval
		}
		error eSwdlError
	}
	
		<** @description : To get the enable/disable status of automatich check. If automtic check is enabled checkInterval 
							will checking interval in minutes otherwise checkInterval is not valid
    **>
	method GetAutomaticCheckStatus {
		out { 
			Boolean enableAutoCheck
			UInt32 checkInterval
		}
		error eSwdlError
	}
	
	
		<** @description : To enable disable automatic download. true for enabling automatic download and false for disabling. 
							In case of enabling automatic download, the automatic download limet autoDownloadLimit can be passed
    **>
	method SetAutomaticDownload {
		in { 
			Boolean enableAutoCheck
			UInt32 autoDownloadLimit
		}
		error eSwdlError
	}
	
		<** @description : To get the enable/disable status of automatich download. If automtic download is enabled the autoDownloadLimit 
							will give the value of automatic download limit
    **>
	method GetAutomaticDownloadStatus {
		out { 
			Boolean enableAutoCheck
			UInt32 autoDownloadLimit
		}
		error eSwdlError
	}
	
	
	
	<** @description : Broadcast signals when new SoftwareUpdate image available for download.
    **>
	broadcast SoftwareAvailableForDownload {
		out { tPackageDetails packageDetails }
	}
	
		<** @description : Broadcast signals when new SoftwareUpdate is downloaded and available for install.
    **>
	broadcast SoftwareAvailableForInstall {}
	
	<** @description : Broadcast signals for indication of download complete or failed.
    **>
	broadcast SoftwareDownloadStatus {
		out { tDownloadStatus downloadState }
	}
}