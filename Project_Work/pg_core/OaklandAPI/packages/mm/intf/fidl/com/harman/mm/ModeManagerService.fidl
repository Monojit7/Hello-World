package com.harman.mm

import com.harman.mm.ModeManagerTypes.* from "ModeManagerTypes.fidl"

interface ModeManagerService
{
	version 
	{
		major 1  
		minor 0
	}

	method queryStartupConditions
	{
		out
		{
			RetValMessage_t retValMsg
			StartupConditions startupConditions
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method delay
	{
		in
		{
			UInt32 delay1
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method shutdown
	{
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method addSource
	{
		in
		{
			SourceType_t type
			UniqueId_t uniqueId
			AdditionalInfo additionalInfo
			Boolean isStartupSource
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}
	
	method removeSource
	{
		in
		{
			SourceType_t type
			UniqueId_t uniqueId
			AdditionalInfo additionalInfo
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method requestSwitchSource
	{
		in 
		{
			SourceType_t type
			UniqueId_t uniqueId
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method requestSwitchToPreviousSource
	{
		in 
		{
			SourceGroupName_t sourceGroupName
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method requestSwitchToDefaultSource
	{
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method getSourceList
	{
		in
		{
			DomainName_t domainName
			SourceGroupName_t sourceGroupName
			Boolean isStyledReplyExpected
		}
		out
		{
			RetValMessage_t retValMsg
			SourceGroupName_t retSourceGroupName
			SourceGroupState_t sourceGroupState 
			mmSourceList sourceList
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method refreshSourceConfiguration
	{
		in
		{
			String updatedOverriddenParamKey
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method requestSwitchSourceCategory
	{
		in
		{
			SourceGroupName_t sourceGroupName
			SourceCategory_t sourceCategory
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method requestToggleSourceInCategory
	{
		in
		{
			SourceGroupName_t sourceGroupName
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method requestToggleSource
	{
		in
		{
			SourceGroupName_t sourceGroupName
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method getSourceConfigurations
	{
		in
		{
			SourceGroupName_t sourceGroupName
		}
		out
		{
			RetValMessage_t retValMsg
			SourceGroupName_t retSourceGroupName
			mmSourceConfigurationList sourceConfigurationList
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method getActiveSourceConfiguration
	{
		in
		{
			SourceGroupName_t sourceGroupName
		}
		out
		{
			RetValMessage_t retValMsg
			mmSourceConfigurationStruct sourceConfigurationData
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method toggleSystemMute
	{
		in
		{
			VolChangeTriggerReason_t reason
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method setSystemMute
	{
		in
		{
			MuteState_t muteState
			VolChangeTriggerReason_t reason
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method toggleSourceMute
	{	
		in
		{
			SourceType_t type
			UniqueId_t uniqueId
			VolChangeTriggerReason_t reason
			Boolean incoming
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}
	
	method setSourceMute
	{
		in
		{
			SourceType_t type
			UniqueId_t uniqueId
			MuteState_t muteState
			Boolean incoming
			VolChangeTriggerReason_t reason
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method toggleSourceGroupMute
	{
		in
		{
			SourceGroupName_t sourceGroupName
			VolChangeTriggerReason_t reason
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method setSourceGroupMute
	{
		in
		{
			SourceGroupName_t sourceGroupName
			MuteState_t muteState
			VolChangeTriggerReason_t reason
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method toggleZoneMute
	{
		in
		{
			ZoneId_t zoneId
			VolChangeTriggerReason_t reason
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method setZoneMute
	{
		in
		{
			ZoneId_t zoneId
			MuteState_t muteState
			VolChangeTriggerReason_t reason
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method toggleMasterMute
	{
		in
		{
			VolChangeTriggerReason_t reason
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method setMasterMute
	{
		in
		{
			MuteState_t muteState
			VolChangeTriggerReason_t reason
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method modifyVolume
	{
		in
		{
			SourceType_t type
			Boolean increment
			UInt32 count
			VolChangeTriggerReason_t reason
			Boolean incomingVolume
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method setVolume
	{
		in
		{
			SourceType_t type
			Volume_t volume
			VolChangeTriggerReason_t reason
			Boolean incomingVolume
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method activateSource
	{
		in
		{
			SourceType_t type
			UniqueId_t uniqueId
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method deactivateSource
	{
		in
		{
			SourceType_t type
			UniqueId_t uniqueId
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method getHighestPrioritySources
	{
		out
		{
			RetValMessage_t retValMsg
			mmSourceList sourceList
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method getAllocatedResources
	{
		in
		{
			SourceType_t type
			UniqueId_t uniqueId
		}
		out
		{
			RetValMessage_t retValMsg
			mmResourcesList resources
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method diagnosticsOn
	{
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method diagnosticsOff
	{
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method testSingleSpeakerOn
	{
		in
		{
			SpeakerMask_t speakerMask
			TestToneName_t testToneName
			Frequency_t maxFrequency
			Frequency_t minFrequency
			Volume_t volume
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method testSingleSpeakerOff
	{
		in
		{
			SpeakerMask_t speakerMask
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method testGetSingleSpeakerStatus
	{
		in
		{
			SpeakerMask_t speakerMask
		}
		out
		{
			RetValMessage_t retValMsg
			mmSpeakerStateMap speakerStateList
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method testMultiSpeakerOn
	{
		in
		{
			SpeakerMask_t speakerMask
			TestToneName_t testToneName
			Frequency_t maxFrequency
			Frequency_t minFrequency
			Volume_t volume
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method testMultiSpeakerOff
	{
		in
		{
			SpeakerMask_t speakerMask
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method testGetMultiSpeakerStatus
	{
		in
		{
			SpeakerMask_t speakerMask
		}
		out
		{
			RetValMessage_t retValMsg
			mmSpeakerStateMapList speakerStateMapList
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method getSourceGroupMixState
	{
		in
		{
			SourceGroupName_t sourceGroupName
		}
		out
		{
			RetValMessage_t retValMsg
			UInt32 level
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method setSourceGroupMixState
	{
		in
		{
			SourceGroupName_t sourceGroupName
			UInt32 level
		}
		out
		{
			RetValMessage_t retValMsg
			UInt32 retLevel
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method getVerbosityLevel
	{
		out
		{
			RetValMessage_t retValMsg
			UInt32 level
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method setVerbosityLevel
	{
		in
		{
			UInt32 level
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method getSourceGroupVolume
	{
		in
		{
			SourceGroupName_t sourceGroupName
		}
		out
		{
			RetValMessage_t retValMsg
			SourceGroupVolume_t volume
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method setSourceGroupVolume
	{
		in
		{
			SourceGroupName_t sourceGroupName
			SourceGroupVolume_t sourceGroupVolume
			VolChangeTriggerReason_t reason
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method setDeactiveModeStatus
	{
		in
		{
			DeactiveModeName_t modeName
			Boolean isActive
		}
		out
		{
			RetValMessage_t retValMsg
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}

	method getDeactiveModeStatus
	{
		in
		{
			DeactiveModeName_t modeName
		}
		out
		{
			RetValMessage_t retValMsg
			Boolean isActive
		}
		error
		{
			mmErrorTypeEnum retVal
		}
	}
	
	broadcast sourceListUpdated
	{
		out
		{
			//TODO: SourceGroup Structure
			mmSourceList sourceList
		}
	}
	
	broadcast sourceActivated
	{
		out
		{
			mmSourceStruct mmSource
		}
	}
	
	broadcast sourceAwaitingValidityInfo
	{
		out
		{
			mmSourceStruct mmSource
		}
	}
	
	broadcast sourceValidityInfoUpdated
	{
		out
		{
			mmSourceStruct mmSource
		}
	}
	
	broadcast sourceAwaitingActivation
	{
		out
		{
			mmSourceStruct mmSource
		}
	}
	
	broadcast sourceActivationFailed
	{
		out
		{
			mmSourceStruct mmSource
		}
	}
	
	broadcast sourceDeactivated
	{
		out
		{
			mmSourceStruct mmSource
		}
	}
	
	broadcast sourceAdded
	{
		out
		{
			mmSourceStruct mmSource
		}
	}
	
	broadcast sourceRemoved
	{
		out
		{
			mmSourceStruct mmSource
		}
	}
	
	broadcast sourceSuspended
	{
		out
		{
			mmSourceStruct mmSource
		}
	}
	
	broadcast sourceIgnored
	{
		out
		{
			mmSourceStruct mmSource
		}
	}
	
	broadcast requestSwitchSourceCategoryFailed
	{
		out
		{
			Int32 retVal
		}
	}
	
	broadcast volumeChange
	{
		out
		{
			mmSourceConfigurationStruct sourceConfiguration
		}
	}
	
	broadcast muteStatusChange
	{
		out
		{
			mmSourceList activeSources
		}
	}
	
	broadcast allStartupConditionsFulfilled
	{
		out
		{
			
		}
	}
	
	broadcast sourceAwaitingActivationInfo
	{
		out
		{
			mmSourceTypeList sourceTypeList
			UInt32 shotsRemaining
		}
	}
	
	broadcast sourceDeactivation
	{
		out
		{
			mmSourceStruct mmSource
			String preemptedResourceList
		}
	}
	
	broadcast genericMessage
	{
		out
		{
			String message
		}
	}
	//TODO: ManagedWavePlayer Interface and APIs
}
