package org.genivi.NodeStateManager
import org.genivi.NodeStateManager.NodeStateTypes.* from "NodeStateTypes.fidl"

	<**
	   @description :  "Control" interface of the NodeStateManager.
		This interface contains functions, which have direct influence on the system state and therefore have to be handled with care. The interface can only be used by certain clients, which need to be configured in the D-Bus configuration.
   	**>
interface LifecycleControl {
	
	version { major 2 minor 0 }
	
	
	<** @description : 	RequestNodeRestart:
    	RestartReason: The passed value will be based upon the enum NsmRestartReason_e.
    	RestartType:   This is the type of restart that is required, i.e. during Coding process it is normal for a fast shutdown to be	requested whereas other Diagnosis restart requests would be normal. Possible values are NSM_SHUTDOWNTYPE_FAST and NSM_SHUTDOWNTYPE_NORMAL.
    	ErrorCode:     Return value passed to the caller, based upon NsmErrorStatus_e.

    	The method is used by other applications to request a restart of the node.
    	@author: Giridhar 
    **>
	method RequestNodeRestart {
		in {
			NsmRestartReason RestartReason
			UInt32 RestartType
		}
		out{
			NsmErrorStatus ErrorCode		
		}
	}
		<** @description : SetApplicationMode:
    	ApplicationModeId: This parameter will be based upon the NsmNodeApplicationMode_e.
    	ErrorCode:         Return value passed to the caller, based upon NsmErrorStatus_e.
    	The method is used by other applications to request a restart of the node.
    	@author: Giridhar 
    **>
	method SetApplicationMode {
		in {
			NsmApplicationMode ApplicationModeId
		}
		out{
			NsmErrorStatus ErrorCode		
		}
	}
		<** @description :SetNodeState:
    	NodeStateId: The passed value will be based upon the enum NsmNodeState_e.
    	ErrorCode:   Return value passed to the caller, based upon NsmErrorStatus_e.
    
    	The method is used by other applications to set the NodeState. When this method is called to change the current NodeState a signal will be sent to notify registered consumers of the new state.
 		@author: Giridhar 
    **>
	method SetNodeState {
		in {
			NsmNodeState NodeStateId
		}
		out{
			NsmErrorStatus ErrorCode		
		}
	}
		<** @description :SetBootMode:
    	BootMode:   New BootMode to be set. The values will be defined by a third party header, which has not been delivered yet. The description needs to be updated as soon as the header is available.
    	ErrorCode:  Return value passed to the caller, based upon NsmErrorStatus_e.
    
    	The method has been introduced, because the property "BootMode" can only be read by other applications. Nevertheless there are some exceptions where the property should be set by a restricted set of applications which will be handled within this method.
   		@author: Giridhar 
   **>
	method SetBootMode {
		in {
			Int32 BootMode
		}
		out{
			NsmErrorStatus ErrorCode		
		}
	}
		<** @description : 	SetAppHealthStatus:
    	AppName:    This parameter can be used to give the name of the application that has failed (this must be the applications systemd unit name).
    	AppRunning: The AppState will be FALSE for failed and TRUE for running.
    	ErrorCode:  Return value passed to the caller, based upon NsmErrorStatus_e.
    
    	This method will be used by the Node Health Monitor to report to the NSM if an application has failed and if it is running again. Internally the NSM will use this information to keep a count of the number of failed applications within the current lifecycle. Additionally it will unset any sessions that the failing application may have had active. It will also be possible for the product node state machine to make a decision on what to do with this information, i.e. even reset the node or reset the node if too many applications have failed.
   		The method is used by other applications to request a restart of the node.
    	@author: Giridhar 
    **>
	method SetAppHealthStatus {
		in {
			String AppName
			Boolean  AppRunning
		}
		out{
			NsmErrorStatus ErrorCode		
		}
	}
		<** @description :CheckLucRequired:
    	LucWanted: This will be a simple TRUE or FALSE to define whether the LUC is wanted in the current Lifecycle.
   
    	This method will be called exclusivley by the Boot Manager to find out whether the LUC Applications should be started in the current Lifecycle. This is required whilst in certain Node Application Modes (i.e. Transport, Factory) we do not want the LUC Applications started.
   		@author: Giridhar 
    **>
	method CheckLucRequired {
		out{
			Boolean LucWanted		
		}
	}	
}