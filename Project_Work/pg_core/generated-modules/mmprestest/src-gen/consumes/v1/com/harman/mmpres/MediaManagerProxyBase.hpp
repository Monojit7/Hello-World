/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Wed Oct 26 18:16:09 IST 2016
*/
#ifndef V1_COM_HARMAN_MMPRES_Media_Manager_PROXY_BASE_HPP_
#define V1_COM_HARMAN_MMPRES_Media_Manager_PROXY_BASE_HPP_

#include <v1/com/harman/mmpres/MediaManager.hpp>


#include <v1/com/harman/mmpres/MMPresTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

class MediaManagerProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::v1::com::harman::mmpres::MMPresTypes::tSlot
    > SlotUpdateEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::mmpres::MMPresTypes::tSlotList&)> GetSlotsAsyncCallback;


    /**
     * description: Emitted if there is a state change for any slot. 
    	 		     
             returns:	 
     *   slot:	Slot data
     */
    virtual SlotUpdateEvent& getSlotUpdateEvent() = 0;

    /**
     * description: Gets details for all the configured slots in the pres ctrl. Whichever slots are
     *   configured in the Presentation Controller config will be returned here, with
     *   the 
    					  current status. 
    	 		     
             returns:	  tSlotList:	Slot data
     */
    virtual void getSlots(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::tSlotList &_list, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSlotsAsync(GetSlotsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_MMPRES_Media_Manager_PROXY_BASE_HPP_
