/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Sat Nov 05 14:44:28 IST 2016
*/
#ifndef V1_COM_HARMAN_MMPRES_Media_Player_PROXY_HPP_
#define V1_COM_HARMAN_MMPRES_Media_Player_PROXY_HPP_

#include <v1/com/harman/mmpres/MediaPlayerProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

template <typename ... _AttributeExtensions>
class MediaPlayerProxy
    : virtual public MediaPlayer, 
      virtual public MediaPlayerProxyBase,
      virtual public _AttributeExtensions... {
public:
    MediaPlayerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~MediaPlayerProxy();

    typedef MediaPlayer InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute currentPlayTime.
     */
    virtual CurrentPlayTimeAttribute& getCurrentPlayTimeAttribute() {
        return delegate_->getCurrentPlayTimeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute totalPlayDuration.
     */
    virtual TotalPlayDurationAttribute& getTotalPlayDurationAttribute() {
        return delegate_->getTotalPlayDurationAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute trackState.
     */
    virtual TrackStateAttribute& getTrackStateAttribute() {
        return delegate_->getTrackStateAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute nowPlayingData.
     */
    virtual NowPlayingDataAttribute& getNowPlayingDataAttribute() {
        return delegate_->getNowPlayingDataAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute playState.
     */
    virtual PlayStateAttribute& getPlayStateAttribute() {
        return delegate_->getPlayStateAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute speed.
     */
    virtual SpeedAttribute& getSpeedAttribute() {
        return delegate_->getSpeedAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute repeatMode.
     */
    virtual RepeatModeAttribute& getRepeatModeAttribute() {
        return delegate_->getRepeatModeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute shuffleMode.
     */
    virtual ShuffleModeAttribute& getShuffleModeAttribute() {
        return delegate_->getShuffleModeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute nowPlayingArtworkStatus.
     */
    virtual NowPlayingArtworkStatusAttribute& getNowPlayingArtworkStatusAttribute() {
        return delegate_->getNowPlayingArtworkStatusAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute playbackPreview.
     */
    virtual PlaybackPreviewAttribute& getPlaybackPreviewAttribute() {
        return delegate_->getPlaybackPreviewAttribute();
    }
    /**
     * description: Indicates playback video only,true: start video play; false: stop
     */
    /**
     * Returns the wrapper class that provides access to the attribute videoPlayStatus.
     */
    virtual VideoPlayStatusAttribute& getVideoPlayStatusAttribute() {
        return delegate_->getVideoPlayStatusAttribute();
    }


    /**
     * Calls next with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void next(const uint64_t &_step, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls next with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> nextAsync(const uint64_t &_step, NextAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls previous with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void previous(const uint64_t &_step, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls previous with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> previousAsync(const uint64_t &_step, PreviousAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls pause with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void pause(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls pause with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> pauseAsync(PauseAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls resume with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void resume(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls resume with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> resumeAsync(ResumeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls seekToTime with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void seekToTime(const uint64_t &_timePosition, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls seekToTime with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> seekToTimeAsync(const uint64_t &_timePosition, SeekToTimeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls fastForward with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void fastForward(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls fastForward with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> fastForwardAsync(FastForwardAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls fastReverse with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void fastReverse(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls fastReverse with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> fastReverseAsync(FastReverseAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setRepeat with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setRepeat(const ::v1::com::harman::mmpres::MMPresTypes::eRepeatMode &_mode, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setRepeat with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setRepeatAsync(const ::v1::com::harman::mmpres::MMPresTypes::eRepeatMode &_mode, SetRepeatAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setShuffle with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setShuffle(const ::v1::com::harman::mmpres::MMPresTypes::eShuffleMode &_mode, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setShuffle with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setShuffleAsync(const ::v1::com::harman::mmpres::MMPresTypes::eShuffleMode &_mode, SetShuffleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getNowPlayingAlbumArtInformation with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getNowPlayingAlbumArtInformation(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::tAlbumArtInformation &_albumArtInfo, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getNowPlayingAlbumArtInformation with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getNowPlayingAlbumArtInformationAsync(GetNowPlayingAlbumArtInformationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getNowPlayingAlbumArtPath with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getNowPlayingAlbumArtPath(const uint8_t &_imageNumber, CommonAPI::CallStatus &_internalCallStatus, std::string &_path, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getNowPlayingAlbumArtPath with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getNowPlayingAlbumArtPathAsync(const uint8_t &_imageNumber, GetNowPlayingAlbumArtPathAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getNowPlayingAlbumArtData with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getNowPlayingAlbumArtData(const uint8_t &_imageNumber, CommonAPI::CallStatus &_internalCallStatus, std::vector<uint8_t> &_albumArtData, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getNowPlayingAlbumArtData with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getNowPlayingAlbumArtDataAsync(const uint8_t &_imageNumber, GetNowPlayingAlbumArtDataAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getAlbumArtInformationForTrack with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getAlbumArtInformationForTrack(const uint64_t &_trackId, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::tAlbumArtInformation &_albumArtInfo, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getAlbumArtInformationForTrack with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getAlbumArtInformationForTrackAsync(const uint64_t &_trackId, GetAlbumArtInformationForTrackAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getAlbumArtPathForTrack with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getAlbumArtPathForTrack(const uint64_t &_trackId, const uint8_t &_imageNumber, CommonAPI::CallStatus &_internalCallStatus, std::string &_path, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getAlbumArtPathForTrack with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getAlbumArtPathForTrackAsync(const uint64_t &_trackId, const uint8_t &_imageNumber, GetAlbumArtPathForTrackAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getAlbumArtDataForTrack with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getAlbumArtDataForTrack(const uint64_t &_trackId, const uint8_t &_imageNumber, CommonAPI::CallStatus &_internalCallStatus, std::vector<uint8_t> &_albumArtData, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getAlbumArtDataForTrack with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getAlbumArtDataForTrackAsync(const uint64_t &_trackId, const uint8_t &_imageNumber, GetAlbumArtDataForTrackAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<MediaPlayerProxyBase> delegate_;
};

typedef MediaPlayerProxy<> MediaPlayerProxyDefault;

namespace MediaPlayerExtensions {
    template <template <typename > class _ExtensionType>
    class CurrentPlayTimeAttributeExtension {
     public:
        typedef _ExtensionType<MediaPlayerProxyBase::CurrentPlayTimeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<MediaPlayerProxyBase::CurrentPlayTimeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CurrentPlayTimeAttributeExtension() {}
    #endif
    
        CurrentPlayTimeAttributeExtension(MediaPlayerProxyBase& proxy): attributeExtension_(proxy.getCurrentPlayTimeAttribute()) {
        }
    
        inline extension_type& getCurrentPlayTimeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TotalPlayDurationAttributeExtension {
     public:
        typedef _ExtensionType<MediaPlayerProxyBase::TotalPlayDurationAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<MediaPlayerProxyBase::TotalPlayDurationAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TotalPlayDurationAttributeExtension() {}
    #endif
    
        TotalPlayDurationAttributeExtension(MediaPlayerProxyBase& proxy): attributeExtension_(proxy.getTotalPlayDurationAttribute()) {
        }
    
        inline extension_type& getTotalPlayDurationAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TrackStateAttributeExtension {
     public:
        typedef _ExtensionType<MediaPlayerProxyBase::TrackStateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<MediaPlayerProxyBase::TrackStateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TrackStateAttributeExtension() {}
    #endif
    
        TrackStateAttributeExtension(MediaPlayerProxyBase& proxy): attributeExtension_(proxy.getTrackStateAttribute()) {
        }
    
        inline extension_type& getTrackStateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class NowPlayingDataAttributeExtension {
     public:
        typedef _ExtensionType<MediaPlayerProxyBase::NowPlayingDataAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<MediaPlayerProxyBase::NowPlayingDataAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        NowPlayingDataAttributeExtension() {}
    #endif
    
        NowPlayingDataAttributeExtension(MediaPlayerProxyBase& proxy): attributeExtension_(proxy.getNowPlayingDataAttribute()) {
        }
    
        inline extension_type& getNowPlayingDataAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class PlayStateAttributeExtension {
     public:
        typedef _ExtensionType<MediaPlayerProxyBase::PlayStateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<MediaPlayerProxyBase::PlayStateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PlayStateAttributeExtension() {}
    #endif
    
        PlayStateAttributeExtension(MediaPlayerProxyBase& proxy): attributeExtension_(proxy.getPlayStateAttribute()) {
        }
    
        inline extension_type& getPlayStateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class SpeedAttributeExtension {
     public:
        typedef _ExtensionType<MediaPlayerProxyBase::SpeedAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<MediaPlayerProxyBase::SpeedAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SpeedAttributeExtension() {}
    #endif
    
        SpeedAttributeExtension(MediaPlayerProxyBase& proxy): attributeExtension_(proxy.getSpeedAttribute()) {
        }
    
        inline extension_type& getSpeedAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class RepeatModeAttributeExtension {
     public:
        typedef _ExtensionType<MediaPlayerProxyBase::RepeatModeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<MediaPlayerProxyBase::RepeatModeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        RepeatModeAttributeExtension() {}
    #endif
    
        RepeatModeAttributeExtension(MediaPlayerProxyBase& proxy): attributeExtension_(proxy.getRepeatModeAttribute()) {
        }
    
        inline extension_type& getRepeatModeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class ShuffleModeAttributeExtension {
     public:
        typedef _ExtensionType<MediaPlayerProxyBase::ShuffleModeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<MediaPlayerProxyBase::ShuffleModeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ShuffleModeAttributeExtension() {}
    #endif
    
        ShuffleModeAttributeExtension(MediaPlayerProxyBase& proxy): attributeExtension_(proxy.getShuffleModeAttribute()) {
        }
    
        inline extension_type& getShuffleModeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class NowPlayingArtworkStatusAttributeExtension {
     public:
        typedef _ExtensionType<MediaPlayerProxyBase::NowPlayingArtworkStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<MediaPlayerProxyBase::NowPlayingArtworkStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        NowPlayingArtworkStatusAttributeExtension() {}
    #endif
    
        NowPlayingArtworkStatusAttributeExtension(MediaPlayerProxyBase& proxy): attributeExtension_(proxy.getNowPlayingArtworkStatusAttribute()) {
        }
    
        inline extension_type& getNowPlayingArtworkStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class PlaybackPreviewAttributeExtension {
     public:
        typedef _ExtensionType<MediaPlayerProxyBase::PlaybackPreviewAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<MediaPlayerProxyBase::PlaybackPreviewAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PlaybackPreviewAttributeExtension() {}
    #endif
    
        PlaybackPreviewAttributeExtension(MediaPlayerProxyBase& proxy): attributeExtension_(proxy.getPlaybackPreviewAttribute()) {
        }
    
        inline extension_type& getPlaybackPreviewAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates playback video only,true: start video play; false: stop
     */
    template <template <typename > class _ExtensionType>
    class VideoPlayStatusAttributeExtension {
     public:
        typedef _ExtensionType<MediaPlayerProxyBase::VideoPlayStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<MediaPlayerProxyBase::VideoPlayStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VideoPlayStatusAttributeExtension() {}
    #endif
    
        VideoPlayStatusAttributeExtension(MediaPlayerProxyBase& proxy): attributeExtension_(proxy.getVideoPlayStatusAttribute()) {
        }
    
        inline extension_type& getVideoPlayStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace MediaPlayerExtensions

//
// MediaPlayerProxy Implementation
//
template <typename ... _AttributeExtensions>
MediaPlayerProxy<_AttributeExtensions...>::MediaPlayerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<MediaPlayerProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<MediaPlayerProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
MediaPlayerProxy<_AttributeExtensions...>::~MediaPlayerProxy() {
}

template <typename ... _AttributeExtensions>
void MediaPlayerProxy<_AttributeExtensions...>::next(const uint64_t &_step, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info) {
    delegate_->next(_step, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaPlayerProxy<_AttributeExtensions...>::nextAsync(const uint64_t &_step, NextAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->nextAsync(_step, _callback, _info);
}
template <typename ... _AttributeExtensions>
void MediaPlayerProxy<_AttributeExtensions...>::previous(const uint64_t &_step, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info) {
    delegate_->previous(_step, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaPlayerProxy<_AttributeExtensions...>::previousAsync(const uint64_t &_step, PreviousAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->previousAsync(_step, _callback, _info);
}
template <typename ... _AttributeExtensions>
void MediaPlayerProxy<_AttributeExtensions...>::pause(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info) {
    delegate_->pause(_internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaPlayerProxy<_AttributeExtensions...>::pauseAsync(PauseAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->pauseAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void MediaPlayerProxy<_AttributeExtensions...>::resume(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info) {
    delegate_->resume(_internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaPlayerProxy<_AttributeExtensions...>::resumeAsync(ResumeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->resumeAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void MediaPlayerProxy<_AttributeExtensions...>::seekToTime(const uint64_t &_timePosition, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info) {
    delegate_->seekToTime(_timePosition, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaPlayerProxy<_AttributeExtensions...>::seekToTimeAsync(const uint64_t &_timePosition, SeekToTimeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->seekToTimeAsync(_timePosition, _callback, _info);
}
template <typename ... _AttributeExtensions>
void MediaPlayerProxy<_AttributeExtensions...>::fastForward(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info) {
    delegate_->fastForward(_internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaPlayerProxy<_AttributeExtensions...>::fastForwardAsync(FastForwardAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->fastForwardAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void MediaPlayerProxy<_AttributeExtensions...>::fastReverse(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info) {
    delegate_->fastReverse(_internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaPlayerProxy<_AttributeExtensions...>::fastReverseAsync(FastReverseAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->fastReverseAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void MediaPlayerProxy<_AttributeExtensions...>::setRepeat(const ::v1::com::harman::mmpres::MMPresTypes::eRepeatMode &_mode, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info) {
    if (!_mode.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->setRepeat(_mode, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaPlayerProxy<_AttributeExtensions...>::setRepeatAsync(const ::v1::com::harman::mmpres::MMPresTypes::eRepeatMode &_mode, SetRepeatAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_mode.validate()) {
        ::v1::com::harman::mmpres::MMPresTypes::eCallResult result = ::v1::com::harman::mmpres::MMPresTypes::eCallResult::CALLRESULT_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, result);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->setRepeatAsync(_mode, _callback, _info);
}
template <typename ... _AttributeExtensions>
void MediaPlayerProxy<_AttributeExtensions...>::setShuffle(const ::v1::com::harman::mmpres::MMPresTypes::eShuffleMode &_mode, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info) {
    if (!_mode.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->setShuffle(_mode, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaPlayerProxy<_AttributeExtensions...>::setShuffleAsync(const ::v1::com::harman::mmpres::MMPresTypes::eShuffleMode &_mode, SetShuffleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_mode.validate()) {
        ::v1::com::harman::mmpres::MMPresTypes::eCallResult result = ::v1::com::harman::mmpres::MMPresTypes::eCallResult::CALLRESULT_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, result);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->setShuffleAsync(_mode, _callback, _info);
}
template <typename ... _AttributeExtensions>
void MediaPlayerProxy<_AttributeExtensions...>::getNowPlayingAlbumArtInformation(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::tAlbumArtInformation &_albumArtInfo, const CommonAPI::CallInfo *_info) {
    delegate_->getNowPlayingAlbumArtInformation(_internalCallStatus, _albumArtInfo, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaPlayerProxy<_AttributeExtensions...>::getNowPlayingAlbumArtInformationAsync(GetNowPlayingAlbumArtInformationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getNowPlayingAlbumArtInformationAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void MediaPlayerProxy<_AttributeExtensions...>::getNowPlayingAlbumArtPath(const uint8_t &_imageNumber, CommonAPI::CallStatus &_internalCallStatus, std::string &_path, const CommonAPI::CallInfo *_info) {
    delegate_->getNowPlayingAlbumArtPath(_imageNumber, _internalCallStatus, _path, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaPlayerProxy<_AttributeExtensions...>::getNowPlayingAlbumArtPathAsync(const uint8_t &_imageNumber, GetNowPlayingAlbumArtPathAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getNowPlayingAlbumArtPathAsync(_imageNumber, _callback, _info);
}
template <typename ... _AttributeExtensions>
void MediaPlayerProxy<_AttributeExtensions...>::getNowPlayingAlbumArtData(const uint8_t &_imageNumber, CommonAPI::CallStatus &_internalCallStatus, std::vector<uint8_t> &_albumArtData, const CommonAPI::CallInfo *_info) {
    delegate_->getNowPlayingAlbumArtData(_imageNumber, _internalCallStatus, _albumArtData, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaPlayerProxy<_AttributeExtensions...>::getNowPlayingAlbumArtDataAsync(const uint8_t &_imageNumber, GetNowPlayingAlbumArtDataAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getNowPlayingAlbumArtDataAsync(_imageNumber, _callback, _info);
}
template <typename ... _AttributeExtensions>
void MediaPlayerProxy<_AttributeExtensions...>::getAlbumArtInformationForTrack(const uint64_t &_trackId, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::tAlbumArtInformation &_albumArtInfo, const CommonAPI::CallInfo *_info) {
    delegate_->getAlbumArtInformationForTrack(_trackId, _internalCallStatus, _albumArtInfo, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaPlayerProxy<_AttributeExtensions...>::getAlbumArtInformationForTrackAsync(const uint64_t &_trackId, GetAlbumArtInformationForTrackAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getAlbumArtInformationForTrackAsync(_trackId, _callback, _info);
}
template <typename ... _AttributeExtensions>
void MediaPlayerProxy<_AttributeExtensions...>::getAlbumArtPathForTrack(const uint64_t &_trackId, const uint8_t &_imageNumber, CommonAPI::CallStatus &_internalCallStatus, std::string &_path, const CommonAPI::CallInfo *_info) {
    delegate_->getAlbumArtPathForTrack(_trackId, _imageNumber, _internalCallStatus, _path, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaPlayerProxy<_AttributeExtensions...>::getAlbumArtPathForTrackAsync(const uint64_t &_trackId, const uint8_t &_imageNumber, GetAlbumArtPathForTrackAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getAlbumArtPathForTrackAsync(_trackId, _imageNumber, _callback, _info);
}
template <typename ... _AttributeExtensions>
void MediaPlayerProxy<_AttributeExtensions...>::getAlbumArtDataForTrack(const uint64_t &_trackId, const uint8_t &_imageNumber, CommonAPI::CallStatus &_internalCallStatus, std::vector<uint8_t> &_albumArtData, const CommonAPI::CallInfo *_info) {
    delegate_->getAlbumArtDataForTrack(_trackId, _imageNumber, _internalCallStatus, _albumArtData, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaPlayerProxy<_AttributeExtensions...>::getAlbumArtDataForTrackAsync(const uint64_t &_trackId, const uint8_t &_imageNumber, GetAlbumArtDataForTrackAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getAlbumArtDataForTrackAsync(_trackId, _imageNumber, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &MediaPlayerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool MediaPlayerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool MediaPlayerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& MediaPlayerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& MediaPlayerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v1::com::harman::mmpres::MediaPlayerProxy,
    _AttributeExtension> {
    typedef typename ::v1::com::harman::mmpres::MediaPlayerProxy<
            ::v1::com::harman::mmpres::MediaPlayerExtensions::CurrentPlayTimeAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::mmpres::MediaPlayerExtensions::TotalPlayDurationAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::mmpres::MediaPlayerExtensions::TrackStateAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::mmpres::MediaPlayerExtensions::NowPlayingDataAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::mmpres::MediaPlayerExtensions::PlayStateAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::mmpres::MediaPlayerExtensions::SpeedAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::mmpres::MediaPlayerExtensions::RepeatModeAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::mmpres::MediaPlayerExtensions::ShuffleModeAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::mmpres::MediaPlayerExtensions::NowPlayingArtworkStatusAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::mmpres::MediaPlayerExtensions::PlaybackPreviewAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::mmpres::MediaPlayerExtensions::VideoPlayStatusAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_MMPRES_Media_Player_PROXY_HPP_
