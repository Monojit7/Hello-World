/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Wed Oct 26 18:16:09 IST 2016
*/
#ifndef V1_COM_HARMAN_MMPRES_Media_Manager_PROXY_HPP_
#define V1_COM_HARMAN_MMPRES_Media_Manager_PROXY_HPP_

#include <v1/com/harman/mmpres/MediaManagerProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

template <typename ... _AttributeExtensions>
class MediaManagerProxy
    : virtual public MediaManager, 
      virtual public MediaManagerProxyBase,
      virtual public _AttributeExtensions... {
public:
    MediaManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~MediaManagerProxy();

    typedef MediaManager InterfaceType;



    /**
     * description: Emitted if there is a state change for any slot. 
    	 		     
             returns:	 
     *   slot:	Slot data
     */
    /**
     * Returns the wrapper class that provides access to the broadcast slotUpdate.
     */
    virtual SlotUpdateEvent& getSlotUpdateEvent() {
        return delegate_->getSlotUpdateEvent();
    }

    /**
     * description: Gets details for all the configured slots in the pres ctrl. Whichever slots are
     *   configured in the Presentation Controller config will be returned here, with
     *   the 
    					  current status. 
    	 		     
             returns:	  tSlotList:	Slot data
     * Calls getSlots with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getSlots(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::tSlotList &_list, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getSlots with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getSlotsAsync(GetSlotsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<MediaManagerProxyBase> delegate_;
};

typedef MediaManagerProxy<> MediaManagerProxyDefault;


//
// MediaManagerProxy Implementation
//
template <typename ... _AttributeExtensions>
MediaManagerProxy<_AttributeExtensions...>::MediaManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<MediaManagerProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<MediaManagerProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
MediaManagerProxy<_AttributeExtensions...>::~MediaManagerProxy() {
}

/**
 * description: Gets details for all the configured slots in the pres ctrl. Whichever slots are
 *   configured in the Presentation Controller config will be returned here, with
 *   the 
					  current status. 
	 		     
         returns:	  tSlotList:	Slot data
 */
template <typename ... _AttributeExtensions>
void MediaManagerProxy<_AttributeExtensions...>::getSlots(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::tSlotList &_list, const CommonAPI::CallInfo *_info) {
    delegate_->getSlots(_internalCallStatus, _list, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaManagerProxy<_AttributeExtensions...>::getSlotsAsync(GetSlotsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getSlotsAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &MediaManagerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool MediaManagerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool MediaManagerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& MediaManagerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& MediaManagerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_MMPRES_Media_Manager_PROXY_HPP_
