/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Oct 04 15:43:40 EDT 2016
*/
/**
 * description: This is a Common API DBUS control interface of audio presentation controller
 *   for Orinoco 2.0
 * author: AYatheesh
 */
#ifndef V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Controls_STUB_HPP_
#define V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Controls_STUB_HPP_

#include <functional>



#include <v1/com/harman/audio/audioPresCtrl/audioPresCtrlTypes.hpp>

#include <v1/com/harman/audio/audioPresCtrl/audioPresCtrlControls.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <unordered_map>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace audio {
namespace audioPresCtrl {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service audioPresCtrlControls. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class audioPresCtrlControlsStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual audioPresCtrlControls {
 public:
    ///Notifies all remote listeners about a change of value of the attribute activeAudioSource.
    virtual void fireActiveAudioSourceAttributeChanged(const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId& activeAudioSource) = 0;
    ///Notifies all remote listeners about a change of value of the attribute activeEntSrc.
    virtual void fireActiveEntSrcAttributeChanged(const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eEntertainmentSrcs& activeEntSrc) = 0;
    ///Notifies all remote listeners about a change of value of the attribute entSourceList.
    virtual void fireEntSourceListAttributeChanged(const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::EntSourceList& entSourceList) = 0;



    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for audioPresCtrlControls.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class audioPresCtrlControlsStubRemoteEvent
{
public:
    virtual ~audioPresCtrlControlsStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service audioPresCtrlControls to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class audioPresCtrlControlsStub
    : public virtual CommonAPI::Stub<audioPresCtrlControlsStubAdapter, audioPresCtrlControlsStubRemoteEvent>
{
public:
    typedef std::function<void (::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors _error)>SetEntertainmentSrcReply_t;
    typedef std::function<void (::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors _error)>SetSourceGroupReply_t;
    typedef std::function<void (::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors _error)>ToggleInSourceGroupReply_t;
    typedef std::function<void (::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors _error)>ToggleSourceReply_t;
    typedef std::function<void (::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors _error)>RequestInformationSourceReply_t;
    typedef std::function<void (::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors _error)>ReleaseInformationSourceReply_t;

    virtual ~audioPresCtrlControlsStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /**
     * description: Attribute holding current ative audio source 		This will be updated on every
     *   audiosource change
     */
    /// Provides getter access to the attribute activeAudioSource
    virtual const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId &getActiveAudioSourceAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Attribute holding current ative entertainment source 		This will be updated on
     *   every audiosource change
     */
    /// Provides getter access to the attribute activeEntSrc
    virtual const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eEntertainmentSrcs &getActiveEntSrcAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Attribute holding list of entertainment sources with available status 		This
     *   will be update on a status change(available/unavailable/unknown) of any
     *   entertainment source
     */
    /// Provides getter access to the attribute entSourceList
    virtual const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::EntSourceList &getEntSourceListAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /**
     * description: This method is used to set audio entertainment sources 	(at)attribute update
     *   activeAudioSource and activeEntSrc
     */
    /// This is the method that will be called on remote calls on the method SetEntertainmentSrc.
    virtual void SetEntertainmentSrc(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eEntertainmentSrcs _sourceId, SetEntertainmentSrcReply_t _reply) = 0;
    /**
     * description: This method is used to switch Audio Context to the source in the given group
     *   	Group needs to be first mentioned in the audiopres.cfg 	Project may choose
     *   any naming strategy as long as it doesnt conflict with another json key in the
     *   cfg 	(at)attribute update activeAudioSource and activeEntSrc if a source
     *   switch has happened 	(at)return eAudioPresErrors
     */
    /// This is the method that will be called on remote calls on the method SetSourceGroup.
    virtual void SetSourceGroup(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _sourceGroupName, SetSourceGroupReply_t _reply) = 0;
    /**
     * description: This method is used to toggle source in the source group 	SetSourceGroup needs
     *   to be invoked in order to select an active group 	(at)attribute update
     *   activeAudioSource and activeEntSrc if a source switch has happened 	(at)return
     *   eAudioPresErrors
     */
    /// This is the method that will be called on remote calls on the method ToggleInSourceGroup.
    virtual void ToggleInSourceGroup(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eToggleDirection _direction, ToggleInSourceGroupReply_t _reply) = 0;
    /**
     * description: This method is used to toggle source in the order specified in
     *   "toggleNextPreviousStrategy" in audiopes.cfg 	If no cfg item
     *   toggleNextPreviousStrategy with value is defined , method return an error
     *   	toggleNextPreviousStrategy should be used to capture the toggle sequence of
     *   entertainment sources in a project 	(at)attribute update activeAudioSource and
     *   activeEntSrc if a source switch has happened	 	(at)return eAudioPresErrors
     */
    /// This is the method that will be called on remote calls on the method ToggleSource.
    virtual void ToggleSource(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eToggleDirection _direction, ToggleSourceReply_t _reply) = 0;
    /**
     * description: to activate interrupt source with given SourceID 	Only touchbeep and keytouch
     *   srcs will be supported through requestinformationsource interface 	as these
     *   are the only sources that will be requested by HMIs 	Other sources will be
     *   invoked for switch by respective pres ctrl (ex btpres for hfp , projectionpres
     *   for alt audio sources etc) 	Other sources are kept just so that HMI can track
     *   the active source through attribute activeAudioSource     	(at)return
     *   eAudioPresErrors
     */
    /// This is the method that will be called on remote calls on the method RequestInformationSource.
    virtual void RequestInformationSource(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eInterruptSrcs _sourceID, RequestInformationSourceReply_t _reply) = 0;
    /**
     * description: to deactivate interrupt source with given SourceID 	(at)return eAudioPresErrors
     */
    /// This is the method that will be called on remote calls on the method ReleaseInformationSource.
    virtual void ReleaseInformationSource(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eInterruptSrcs _sourceID, ReleaseInformationSourceReply_t _reply) = 0;

    using CommonAPI::Stub<audioPresCtrlControlsStubAdapter, audioPresCtrlControlsStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<audioPresCtrlControlsStubAdapter, audioPresCtrlControlsStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<audioPresCtrlControlsStubAdapter, audioPresCtrlControlsStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef audioPresCtrlControlsStubRemoteEvent RemoteEventType;
    typedef audioPresCtrlControls StubInterface;
};

} // namespace audioPresCtrl
} // namespace audio
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Controls_STUB_HPP_
