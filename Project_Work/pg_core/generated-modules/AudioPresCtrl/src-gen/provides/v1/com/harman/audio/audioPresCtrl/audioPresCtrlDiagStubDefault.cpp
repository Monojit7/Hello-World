/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Oct 04 15:43:40 EDT 2016
*/
#include <v1/com/harman/audio/audioPresCtrl/audioPresCtrlDiagStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace com {
namespace harman {
namespace audio {
namespace audioPresCtrl {

audioPresCtrlDiagStubDefault::audioPresCtrlDiagStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(audioPresCtrlDiag::getInterfaceVersion()) {
}

const CommonAPI::Version& audioPresCtrlDiagStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

audioPresCtrlDiagStubRemoteEvent* audioPresCtrlDiagStubDefault::initStubAdapter(const std::shared_ptr<audioPresCtrlDiagStubAdapter> &_adapter) {
    CommonAPI::Stub<audioPresCtrlDiagStubAdapter, audioPresCtrlDiagStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


/**
 * description: For diagnostic purpose to test one or multiple speakers 	(at)return
 *   eAudioPresErrors
 */
void audioPresCtrlDiagStubDefault::TestSpeakerOn(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _speakerMask, std::string _testToneName, float _frequency, uint16_t _volume, TestSpeakerOnReply_t _reply) {
    (void)_client;
    (void) _speakerMask;
    (void) _testToneName;
    (void) _frequency;
    (void) _volume;
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors error;
    _reply(error);
}

/**
 * description: For diagnostic purpose to turn OFF one or more speakers 	(at)return
 *   eAudioPresErrors
 */
void audioPresCtrlDiagStubDefault::TestMultiSpeakersOff(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _speakerMask, TestMultiSpeakersOffReply_t _reply) {
    (void)_client;
    (void) _speakerMask;
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors error;
    _reply(error);
}

/**
 * description: This function is used to play a sine signal with sine generator with special
 *   parameters.     (at)return eAudioPresErrors
 */
void audioPresCtrlDiagStubDefault::playSineTone(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eSampleRateType _sampleRate, int16_t _frequency, int16_t _pauseTime, int16_t _pulseTime, int16_t _repeatCount, playSineToneReply_t _reply) {
    (void)_client;
    (void) _sampleRate;
    (void) _frequency;
    (void) _pauseTime;
    (void) _pulseTime;
    (void) _repeatCount;
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors error;
    _reply(error);
}

/**
 * description: This function is used to stop playing sine tone for diagnostics purpose    
 *   (at)return eAudioPresErrors
 */
void audioPresCtrlDiagStubDefault::StopSineTone(const std::shared_ptr<CommonAPI::ClientId> _client, StopSineToneReply_t _reply) {
    (void)_client;
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors error;
    _reply(error);
}




audioPresCtrlDiagStubDefault::RemoteEventHandler::RemoteEventHandler(audioPresCtrlDiagStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace audioPresCtrl
} // namespace audio
} // namespace harman
} // namespace com
} // namespace v1
