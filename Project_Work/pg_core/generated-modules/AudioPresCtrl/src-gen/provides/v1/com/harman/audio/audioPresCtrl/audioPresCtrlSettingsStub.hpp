/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Oct 04 15:43:40 EDT 2016
*/
/**
 * description: This is a Common API DBUS settings interface of audio presentation controller
 *   for Orinoco 2.0
 * author: AYatheesh
 */
#ifndef V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Settings_STUB_HPP_
#define V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Settings_STUB_HPP_

#include <functional>



#include <v1/com/harman/audio/audioPresCtrl/audioPresCtrlTypes.hpp>

#include <v1/com/harman/audio/audioPresCtrl/audioPresCtrlSettings.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace audio {
namespace audioPresCtrl {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service audioPresCtrlSettings. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class audioPresCtrlSettingsStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual audioPresCtrlSettings {
 public:
    ///Notifies all remote listeners about a change of value of the attribute Fade.
    virtual void fireFadeAttributeChanged(const int16_t& Fade) = 0;
    ///Notifies all remote listeners about a change of value of the attribute Balance.
    virtual void fireBalanceAttributeChanged(const int16_t& Balance) = 0;
    ///Notifies all remote listeners about a change of value of the attribute Bass.
    virtual void fireBassAttributeChanged(const int16_t& Bass) = 0;
    ///Notifies all remote listeners about a change of value of the attribute Mid.
    virtual void fireMidAttributeChanged(const int16_t& Mid) = 0;
    ///Notifies all remote listeners about a change of value of the attribute Treble.
    virtual void fireTrebleAttributeChanged(const int16_t& Treble) = 0;
    ///Notifies all remote listeners about a change of value of the attribute Equalizer.
    virtual void fireEqualizerAttributeChanged(const std::string& Equalizer) = 0;
    ///Notifies all remote listeners about a change of value of the attribute Clarifi.
    virtual void fireClarifiAttributeChanged(const bool& Clarifi) = 0;
    ///Notifies all remote listeners about a change of value of the attribute Loudness.
    virtual void fireLoudnessAttributeChanged(const bool& Loudness) = 0;
    ///Notifies all remote listeners about a change of value of the attribute AVCMode.
    virtual void fireAVCModeAttributeChanged(const uint16_t& AVCMode) = 0;
    ///Notifies all remote listeners about a change of value of the attribute AuxOffsetGain.
    virtual void fireAuxOffsetGainAttributeChanged(const int16_t& AuxOffsetGain) = 0;
    ///Notifies all remote listeners about a change of value of the attribute MidLow.
    virtual void fireMidLowAttributeChanged(const int16_t& MidLow) = 0;
    ///Notifies all remote listeners about a change of value of the attribute MidHigh.
    virtual void fireMidHighAttributeChanged(const int16_t& MidHigh) = 0;
    ///Notifies all remote listeners about a change of value of the attribute A2dpOffsetGain.
    virtual void fireA2dpOffsetGainAttributeChanged(const int16_t& A2dpOffsetGain) = 0;
    ///Notifies all remote listeners about a change of value of the attribute MicGain.
    virtual void fireMicGainAttributeChanged(const int16_t& MicGain) = 0;
    ///Notifies all remote listeners about a change of value of the attribute ActiveSrcMute.
    virtual void fireActiveSrcMuteAttributeChanged(const bool& ActiveSrcMute) = 0;
    ///Notifies all remote listeners about a change of value of the attribute MasterMute.
    virtual void fireMasterMuteAttributeChanged(const bool& MasterMute) = 0;
    ///Notifies all remote listeners about a change of value of the attribute MicMuteStatus.
    virtual void fireMicMuteStatusAttributeChanged(const bool& MicMuteStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute TouchBeepSelection.
    virtual void fireTouchBeepSelectionAttributeChanged(const std::string& TouchBeepSelection) = 0;
    ///Notifies all remote listeners about a change of value of the attribute KeypadBeepSelection.
    virtual void fireKeypadBeepSelectionAttributeChanged(const std::string& KeypadBeepSelection) = 0;

    /**
     * Sends a broadcast event for VolumeChange. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireVolumeChangeEvent(const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume &_volume, const bool &_sourceActive) = 0;
    /**
     * Sends a broadcast event for SourceMuteState. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSourceMuteStateEvent(const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId &_sourcename, const bool &_muteState) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for audioPresCtrlSettings.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class audioPresCtrlSettingsStubRemoteEvent
{
public:
    virtual ~audioPresCtrlSettingsStubRemoteEvent() { }

    /// Verification callback for remote set requests on the attribute TouchBeepSelection
    virtual bool onRemoteSetTouchBeepSelectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value) = 0;
    /// Action callback for remote set requests on the attribute TouchBeepSelection
    virtual void onRemoteTouchBeepSelectionAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute KeypadBeepSelection
    virtual bool onRemoteSetKeypadBeepSelectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value) = 0;
    /// Action callback for remote set requests on the attribute KeypadBeepSelection
    virtual void onRemoteKeypadBeepSelectionAttributeChanged() = 0;
};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service audioPresCtrlSettings to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class audioPresCtrlSettingsStub
    : public virtual CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>
{
public:
    typedef std::function<void (::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors _error)>SetSourceVolumeReply_t;
    typedef std::function<void (::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors _error, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume _volumeOfSource)>GetSourceVolumeReply_t;
    typedef std::function<void (::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors _error, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::ListItems _list)>GetListReply_t;
    typedef std::function<void (::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors _error, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId _sourceId, bool _mute)>GetSourceMuteReply_t;

    virtual ~audioPresCtrlSettingsStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /**
     * description: Attribute holding current fade level
     */
    /// Provides getter access to the attribute Fade
    virtual const int16_t &getFadeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Attribute holding current Balance level
     */
    /// Provides getter access to the attribute Balance
    virtual const int16_t &getBalanceAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Attribute holding current Bass level
     */
    /// Provides getter access to the attribute Bass
    virtual const int16_t &getBassAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Attribute holding current Mid level
     */
    /// Provides getter access to the attribute Mid
    virtual const int16_t &getMidAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Attribute holding current Treble level
     */
    /// Provides getter access to the attribute Treble
    virtual const int16_t &getTrebleAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Attribute holding Equalizer set
     */
    /// Provides getter access to the attribute Equalizer
    virtual const std::string &getEqualizerAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Attribute holding Clarifi status (enabled/disabled)
     */
    /// Provides getter access to the attribute Clarifi
    virtual const bool &getClarifiAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Attribute holding Loudness status (enabled/disabled)
     */
    /// Provides getter access to the attribute Loudness
    virtual const bool &getLoudnessAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Attribute holding current AVCMode level
     */
    /// Provides getter access to the attribute AVCMode
    virtual const uint16_t &getAVCModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Attribute holding Aux offset gain value
     */
    /// Provides getter access to the attribute AuxOffsetGain
    virtual const int16_t &getAuxOffsetGainAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Attribute holding Mid low value
     */
    /// Provides getter access to the attribute MidLow
    virtual const int16_t &getMidLowAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Attribute holding MidHigh value
     */
    /// Provides getter access to the attribute MidHigh
    virtual const int16_t &getMidHighAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Attribute holding A2dp source offset gain value
     */
    /// Provides getter access to the attribute A2dpOffsetGain
    virtual const int16_t &getA2dpOffsetGainAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Attribute holding Mic gain value
     */
    /// Provides getter access to the attribute MicGain
    virtual const int16_t &getMicGainAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Attribute holding mute state of active source
     */
    /// Provides getter access to the attribute ActiveSrcMute
    virtual const bool &getActiveSrcMuteAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Attribute holding system mute state
     */
    /// Provides getter access to the attribute MasterMute
    virtual const bool &getMasterMuteAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Attribute hodling MicMute status
     */
    /// Provides getter access to the attribute MicMuteStatus
    virtual const bool &getMicMuteStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Attribute hodling touch beep tone selection
     */
    /// Provides getter access to the attribute TouchBeepSelection
    virtual const std::string &getTouchBeepSelectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Attribute hodling touch beep tone selection
     */
    /// Provides getter access to the attribute KeypadBeepSelection
    virtual const std::string &getKeypadBeepSelectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /**
     * description: This method is used to set absolute volume of presently playing source.  	If
     *   interrupt source is active, it changes the volume of active interrupt source
     *   	If no interrupts are active, it changes volume of Entertainment source.
     *   	(at)broadast VolumeChange
     */
    /// This is the method that will be called on remote calls on the method SetVolume.
    virtual void SetVolume(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _absoluteVolume) = 0;
    /**
     * description: This method is used to set Volume of presently playing source where volume
     *   change is given in steps example -2 or +2 	(at)broadast VolumeChange
     */
    /// This is the method that will be called on remote calls on the method SetVolumeStep.
    virtual void SetVolumeStep(const std::shared_ptr<CommonAPI::ClientId> _client, int16_t _volumeStep) = 0;
    /**
     * description: This method is used to set Volume of any source group 	(at)broadast VolumeChange
     */
    /// This is the method that will be called on remote calls on the method SetSourceVolume.
    virtual void SetSourceVolume(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume _volume, SetSourceVolumeReply_t _reply) = 0;
    /**
     * description: This method is used to get Volume of any source 	(at)return eAudioPresErrors
     */
    /// This is the method that will be called on remote calls on the method GetSourceVolume.
    virtual void GetSourceVolume(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId _sourceID, GetSourceVolumeReply_t _reply) = 0;
    /**
     * description: This method is used to toggle mute status of currently playing source
     *   	(at)attribute update ActiveSrcMute
     */
    /// This is the method that will be called on remote calls on the method ToggleActiveSrcMute.
    virtual void ToggleActiveSrcMute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: This method is used to set mute status of any particular source 	(at)broadcast
     *   SourceMuteState
     */
    /// This is the method that will be called on remote calls on the method SetSourceMute.
    virtual void SetSourceMute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId _sourceID, bool _mute) = 0;
    /**
     * description: This method is used to toggle MIC mute status  	(at)attribute update
     *   MicMuteStatus
     */
    /// This is the method that will be called on remote calls on the method ToggleMicMute.
    virtual void ToggleMicMute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: This method is used to get supported EQ preset, Touch tone list and keyboard
     *   tone list 	(at)return eAudioPresErrors
     */
    /// This is the method that will be called on remote calls on the method GetList.
    virtual void GetList(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eUserOption _listType, GetListReply_t _reply) = 0;
    /**
     * description: This method is used to get mute status of any particular source 	(at)return
     *   eAudioPresErrors
     */
    /// This is the method that will be called on remote calls on the method GetSourceMute.
    virtual void GetSourceMute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId _sourceID, GetSourceMuteReply_t _reply) = 0;
    /**
     * description: This method is used to toggle mute status of complete system 	(at)attribute
     *   update MasterMute
     */
    /// This is the method that will be called on remote calls on the method ToggleMasterMute.
    virtual void ToggleMasterMute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: This method is used to set audio settings attributes     You may pass a map of
     *   attributes rather than multiple calls.      For example , the balance and fade
     *   is always a combination 	(at)attribute update
     */
    /// This is the method that will be called on remote calls on the method setAudioAttribute.
    virtual void setAudioAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::mAttribute _attributesmap) = 0;
    /**
     * description: To broadcast volume change signal to HMI to display updated volume level
     */
    /// Sends a broadcast event for VolumeChange.
    virtual void fireVolumeChangeEvent(const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume &_volume, const bool &_sourceActive) = 0;
    /**
     * description: To broadcast system mute state to HMI
     */
    /// Sends a broadcast event for SourceMuteState.
    virtual void fireSourceMuteStateEvent(const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId &_sourcename, const bool &_muteState) = 0;

    using CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef audioPresCtrlSettingsStubRemoteEvent RemoteEventType;
    typedef audioPresCtrlSettings StubInterface;
};

} // namespace audioPresCtrl
} // namespace audio
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Settings_STUB_HPP_
