/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Oct 04 15:43:40 EDT 2016
*/
/**
 * description: This is a Common API DBUS diagnostics interface of audio presentation
 *   controller for Orinoco 2.0
 * author: AYatheesh
 */
#ifndef V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Diag_STUB_DEFAULT_HPP_
#define V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Diag_STUB_DEFAULT_HPP_


#include <v1/com/harman/audio/audioPresCtrl/audioPresCtrlDiagStub.hpp>
#include <sstream>

namespace v1 {
namespace com {
namespace harman {
namespace audio {
namespace audioPresCtrl {

/**
 * Provides a default implementation for audioPresCtrlDiagStubRemoteEvent and
 * audioPresCtrlDiagStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class audioPresCtrlDiagStubDefault
    : public virtual audioPresCtrlDiagStub {
public:
    audioPresCtrlDiagStubDefault();

    audioPresCtrlDiagStubRemoteEvent* initStubAdapter(const std::shared_ptr<audioPresCtrlDiagStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);


    /**
     * description: For diagnostic purpose to test one or multiple speakers 	(at)return
     *   eAudioPresErrors
     */
    virtual void TestSpeakerOn(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _speakerMask, std::string _testToneName, float _frequency, uint16_t _volume, TestSpeakerOnReply_t _reply);
    /**
     * description: For diagnostic purpose to turn OFF one or more speakers 	(at)return
     *   eAudioPresErrors
     */
    virtual void TestMultiSpeakersOff(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _speakerMask, TestMultiSpeakersOffReply_t _reply);
    /**
     * description: This function is used to play a sine signal with sine generator with special
     *   parameters.     (at)return eAudioPresErrors
     */
    virtual void playSineTone(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eSampleRateType _sampleRate, int16_t _frequency, int16_t _pauseTime, int16_t _pulseTime, int16_t _repeatCount, playSineToneReply_t _reply);
    /**
     * description: This function is used to stop playing sine tone for diagnostics purpose    
     *   (at)return eAudioPresErrors
     */
    virtual void StopSineTone(const std::shared_ptr<CommonAPI::ClientId> _client, StopSineToneReply_t _reply);



protected:
    class RemoteEventHandler: public virtual audioPresCtrlDiagStubRemoteEvent {
    public:
        RemoteEventHandler(audioPresCtrlDiagStubDefault *_defaultStub);


    private:
        audioPresCtrlDiagStubDefault *defaultStub_;
    };
private:
    audioPresCtrlDiagStubDefault::RemoteEventHandler remoteEventHandler_;


    CommonAPI::Version interfaceVersion_;
};

} // namespace audioPresCtrl
} // namespace audio
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Diag_STUB_DEFAULT
