/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Oct 04 15:43:40 EDT 2016
*/
#include <v1/com/harman/audio/audioPresCtrl/audioPresCtrlSettingsStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace com {
namespace harman {
namespace audio {
namespace audioPresCtrl {

audioPresCtrlSettingsStubDefault::audioPresCtrlSettingsStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(audioPresCtrlSettings::getInterfaceVersion()) {
}

const CommonAPI::Version& audioPresCtrlSettingsStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

audioPresCtrlSettingsStubRemoteEvent* audioPresCtrlSettingsStubDefault::initStubAdapter(const std::shared_ptr<audioPresCtrlSettingsStubAdapter> &_adapter) {
    CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

const int16_t& audioPresCtrlSettingsStubDefault::getFadeAttribute() {
    return fadeAttributeValue_;
}

const int16_t& audioPresCtrlSettingsStubDefault::getFadeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getFadeAttribute();
}

void audioPresCtrlSettingsStubDefault::setFadeAttribute(int16_t _value) {
    const bool valueChanged = trySetFadeAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireFadeAttributeChanged(fadeAttributeValue_);
    }
}

bool audioPresCtrlSettingsStubDefault::trySetFadeAttribute(int16_t _value) {
    if (!validateFadeAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (fadeAttributeValue_ != _value);
    fadeAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool audioPresCtrlSettingsStubDefault::validateFadeAttributeRequestedValue(const int16_t &_value) {
    (void)_value;
	return true;
}


const int16_t& audioPresCtrlSettingsStubDefault::getBalanceAttribute() {
    return balanceAttributeValue_;
}

const int16_t& audioPresCtrlSettingsStubDefault::getBalanceAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getBalanceAttribute();
}

void audioPresCtrlSettingsStubDefault::setBalanceAttribute(int16_t _value) {
    const bool valueChanged = trySetBalanceAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireBalanceAttributeChanged(balanceAttributeValue_);
    }
}

bool audioPresCtrlSettingsStubDefault::trySetBalanceAttribute(int16_t _value) {
    if (!validateBalanceAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (balanceAttributeValue_ != _value);
    balanceAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool audioPresCtrlSettingsStubDefault::validateBalanceAttributeRequestedValue(const int16_t &_value) {
    (void)_value;
	return true;
}


const int16_t& audioPresCtrlSettingsStubDefault::getBassAttribute() {
    return bassAttributeValue_;
}

const int16_t& audioPresCtrlSettingsStubDefault::getBassAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getBassAttribute();
}

void audioPresCtrlSettingsStubDefault::setBassAttribute(int16_t _value) {
    const bool valueChanged = trySetBassAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireBassAttributeChanged(bassAttributeValue_);
    }
}

bool audioPresCtrlSettingsStubDefault::trySetBassAttribute(int16_t _value) {
    if (!validateBassAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (bassAttributeValue_ != _value);
    bassAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool audioPresCtrlSettingsStubDefault::validateBassAttributeRequestedValue(const int16_t &_value) {
    (void)_value;
	return true;
}


const int16_t& audioPresCtrlSettingsStubDefault::getMidAttribute() {
    return midAttributeValue_;
}

const int16_t& audioPresCtrlSettingsStubDefault::getMidAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getMidAttribute();
}

void audioPresCtrlSettingsStubDefault::setMidAttribute(int16_t _value) {
    const bool valueChanged = trySetMidAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireMidAttributeChanged(midAttributeValue_);
    }
}

bool audioPresCtrlSettingsStubDefault::trySetMidAttribute(int16_t _value) {
    if (!validateMidAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (midAttributeValue_ != _value);
    midAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool audioPresCtrlSettingsStubDefault::validateMidAttributeRequestedValue(const int16_t &_value) {
    (void)_value;
	return true;
}


const int16_t& audioPresCtrlSettingsStubDefault::getTrebleAttribute() {
    return trebleAttributeValue_;
}

const int16_t& audioPresCtrlSettingsStubDefault::getTrebleAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getTrebleAttribute();
}

void audioPresCtrlSettingsStubDefault::setTrebleAttribute(int16_t _value) {
    const bool valueChanged = trySetTrebleAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireTrebleAttributeChanged(trebleAttributeValue_);
    }
}

bool audioPresCtrlSettingsStubDefault::trySetTrebleAttribute(int16_t _value) {
    if (!validateTrebleAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (trebleAttributeValue_ != _value);
    trebleAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool audioPresCtrlSettingsStubDefault::validateTrebleAttributeRequestedValue(const int16_t &_value) {
    (void)_value;
	return true;
}


const std::string& audioPresCtrlSettingsStubDefault::getEqualizerAttribute() {
    return equalizerAttributeValue_;
}

const std::string& audioPresCtrlSettingsStubDefault::getEqualizerAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getEqualizerAttribute();
}

void audioPresCtrlSettingsStubDefault::setEqualizerAttribute(std::string _value) {
    const bool valueChanged = trySetEqualizerAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireEqualizerAttributeChanged(equalizerAttributeValue_);
    }
}

bool audioPresCtrlSettingsStubDefault::trySetEqualizerAttribute(std::string _value) {
    if (!validateEqualizerAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (equalizerAttributeValue_ != _value);
    equalizerAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool audioPresCtrlSettingsStubDefault::validateEqualizerAttributeRequestedValue(const std::string &_value) {
    (void)_value;
	return true;
}


const bool& audioPresCtrlSettingsStubDefault::getClarifiAttribute() {
    return clarifiAttributeValue_;
}

const bool& audioPresCtrlSettingsStubDefault::getClarifiAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getClarifiAttribute();
}

void audioPresCtrlSettingsStubDefault::setClarifiAttribute(bool _value) {
    const bool valueChanged = trySetClarifiAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireClarifiAttributeChanged(clarifiAttributeValue_);
    }
}

bool audioPresCtrlSettingsStubDefault::trySetClarifiAttribute(bool _value) {
    if (!validateClarifiAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (clarifiAttributeValue_ != _value);
    clarifiAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool audioPresCtrlSettingsStubDefault::validateClarifiAttributeRequestedValue(const bool &_value) {
    (void)_value;
	return true;
}


const bool& audioPresCtrlSettingsStubDefault::getLoudnessAttribute() {
    return loudnessAttributeValue_;
}

const bool& audioPresCtrlSettingsStubDefault::getLoudnessAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getLoudnessAttribute();
}

void audioPresCtrlSettingsStubDefault::setLoudnessAttribute(bool _value) {
    const bool valueChanged = trySetLoudnessAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireLoudnessAttributeChanged(loudnessAttributeValue_);
    }
}

bool audioPresCtrlSettingsStubDefault::trySetLoudnessAttribute(bool _value) {
    if (!validateLoudnessAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (loudnessAttributeValue_ != _value);
    loudnessAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool audioPresCtrlSettingsStubDefault::validateLoudnessAttributeRequestedValue(const bool &_value) {
    (void)_value;
	return true;
}


const uint16_t& audioPresCtrlSettingsStubDefault::getAVCModeAttribute() {
    return aVCModeAttributeValue_;
}

const uint16_t& audioPresCtrlSettingsStubDefault::getAVCModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getAVCModeAttribute();
}

void audioPresCtrlSettingsStubDefault::setAVCModeAttribute(uint16_t _value) {
    const bool valueChanged = trySetAVCModeAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireAVCModeAttributeChanged(aVCModeAttributeValue_);
    }
}

bool audioPresCtrlSettingsStubDefault::trySetAVCModeAttribute(uint16_t _value) {
    if (!validateAVCModeAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (aVCModeAttributeValue_ != _value);
    aVCModeAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool audioPresCtrlSettingsStubDefault::validateAVCModeAttributeRequestedValue(const uint16_t &_value) {
    (void)_value;
	return true;
}


const int16_t& audioPresCtrlSettingsStubDefault::getAuxOffsetGainAttribute() {
    return auxOffsetGainAttributeValue_;
}

const int16_t& audioPresCtrlSettingsStubDefault::getAuxOffsetGainAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getAuxOffsetGainAttribute();
}

void audioPresCtrlSettingsStubDefault::setAuxOffsetGainAttribute(int16_t _value) {
    const bool valueChanged = trySetAuxOffsetGainAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireAuxOffsetGainAttributeChanged(auxOffsetGainAttributeValue_);
    }
}

bool audioPresCtrlSettingsStubDefault::trySetAuxOffsetGainAttribute(int16_t _value) {
    if (!validateAuxOffsetGainAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (auxOffsetGainAttributeValue_ != _value);
    auxOffsetGainAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool audioPresCtrlSettingsStubDefault::validateAuxOffsetGainAttributeRequestedValue(const int16_t &_value) {
    (void)_value;
	return true;
}


const int16_t& audioPresCtrlSettingsStubDefault::getMidLowAttribute() {
    return midLowAttributeValue_;
}

const int16_t& audioPresCtrlSettingsStubDefault::getMidLowAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getMidLowAttribute();
}

void audioPresCtrlSettingsStubDefault::setMidLowAttribute(int16_t _value) {
    const bool valueChanged = trySetMidLowAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireMidLowAttributeChanged(midLowAttributeValue_);
    }
}

bool audioPresCtrlSettingsStubDefault::trySetMidLowAttribute(int16_t _value) {
    if (!validateMidLowAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (midLowAttributeValue_ != _value);
    midLowAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool audioPresCtrlSettingsStubDefault::validateMidLowAttributeRequestedValue(const int16_t &_value) {
    (void)_value;
	return true;
}


const int16_t& audioPresCtrlSettingsStubDefault::getMidHighAttribute() {
    return midHighAttributeValue_;
}

const int16_t& audioPresCtrlSettingsStubDefault::getMidHighAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getMidHighAttribute();
}

void audioPresCtrlSettingsStubDefault::setMidHighAttribute(int16_t _value) {
    const bool valueChanged = trySetMidHighAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireMidHighAttributeChanged(midHighAttributeValue_);
    }
}

bool audioPresCtrlSettingsStubDefault::trySetMidHighAttribute(int16_t _value) {
    if (!validateMidHighAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (midHighAttributeValue_ != _value);
    midHighAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool audioPresCtrlSettingsStubDefault::validateMidHighAttributeRequestedValue(const int16_t &_value) {
    (void)_value;
	return true;
}


const int16_t& audioPresCtrlSettingsStubDefault::getA2dpOffsetGainAttribute() {
    return a2dpOffsetGainAttributeValue_;
}

const int16_t& audioPresCtrlSettingsStubDefault::getA2dpOffsetGainAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getA2dpOffsetGainAttribute();
}

void audioPresCtrlSettingsStubDefault::setA2dpOffsetGainAttribute(int16_t _value) {
    const bool valueChanged = trySetA2dpOffsetGainAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireA2dpOffsetGainAttributeChanged(a2dpOffsetGainAttributeValue_);
    }
}

bool audioPresCtrlSettingsStubDefault::trySetA2dpOffsetGainAttribute(int16_t _value) {
    if (!validateA2dpOffsetGainAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (a2dpOffsetGainAttributeValue_ != _value);
    a2dpOffsetGainAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool audioPresCtrlSettingsStubDefault::validateA2dpOffsetGainAttributeRequestedValue(const int16_t &_value) {
    (void)_value;
	return true;
}


const int16_t& audioPresCtrlSettingsStubDefault::getMicGainAttribute() {
    return micGainAttributeValue_;
}

const int16_t& audioPresCtrlSettingsStubDefault::getMicGainAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getMicGainAttribute();
}

void audioPresCtrlSettingsStubDefault::setMicGainAttribute(int16_t _value) {
    const bool valueChanged = trySetMicGainAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireMicGainAttributeChanged(micGainAttributeValue_);
    }
}

bool audioPresCtrlSettingsStubDefault::trySetMicGainAttribute(int16_t _value) {
    if (!validateMicGainAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (micGainAttributeValue_ != _value);
    micGainAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool audioPresCtrlSettingsStubDefault::validateMicGainAttributeRequestedValue(const int16_t &_value) {
    (void)_value;
	return true;
}


const bool& audioPresCtrlSettingsStubDefault::getActiveSrcMuteAttribute() {
    return activeSrcMuteAttributeValue_;
}

const bool& audioPresCtrlSettingsStubDefault::getActiveSrcMuteAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getActiveSrcMuteAttribute();
}

void audioPresCtrlSettingsStubDefault::setActiveSrcMuteAttribute(bool _value) {
    const bool valueChanged = trySetActiveSrcMuteAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireActiveSrcMuteAttributeChanged(activeSrcMuteAttributeValue_);
    }
}

bool audioPresCtrlSettingsStubDefault::trySetActiveSrcMuteAttribute(bool _value) {
    if (!validateActiveSrcMuteAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (activeSrcMuteAttributeValue_ != _value);
    activeSrcMuteAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool audioPresCtrlSettingsStubDefault::validateActiveSrcMuteAttributeRequestedValue(const bool &_value) {
    (void)_value;
	return true;
}


const bool& audioPresCtrlSettingsStubDefault::getMasterMuteAttribute() {
    return masterMuteAttributeValue_;
}

const bool& audioPresCtrlSettingsStubDefault::getMasterMuteAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getMasterMuteAttribute();
}

void audioPresCtrlSettingsStubDefault::setMasterMuteAttribute(bool _value) {
    const bool valueChanged = trySetMasterMuteAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireMasterMuteAttributeChanged(masterMuteAttributeValue_);
    }
}

bool audioPresCtrlSettingsStubDefault::trySetMasterMuteAttribute(bool _value) {
    if (!validateMasterMuteAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (masterMuteAttributeValue_ != _value);
    masterMuteAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool audioPresCtrlSettingsStubDefault::validateMasterMuteAttributeRequestedValue(const bool &_value) {
    (void)_value;
	return true;
}


const bool& audioPresCtrlSettingsStubDefault::getMicMuteStatusAttribute() {
    return micMuteStatusAttributeValue_;
}

const bool& audioPresCtrlSettingsStubDefault::getMicMuteStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getMicMuteStatusAttribute();
}

void audioPresCtrlSettingsStubDefault::setMicMuteStatusAttribute(bool _value) {
    const bool valueChanged = trySetMicMuteStatusAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireMicMuteStatusAttributeChanged(micMuteStatusAttributeValue_);
    }
}

bool audioPresCtrlSettingsStubDefault::trySetMicMuteStatusAttribute(bool _value) {
    if (!validateMicMuteStatusAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (micMuteStatusAttributeValue_ != _value);
    micMuteStatusAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool audioPresCtrlSettingsStubDefault::validateMicMuteStatusAttributeRequestedValue(const bool &_value) {
    (void)_value;
	return true;
}


const std::string& audioPresCtrlSettingsStubDefault::getTouchBeepSelectionAttribute() {
    return touchBeepSelectionAttributeValue_;
}

const std::string& audioPresCtrlSettingsStubDefault::getTouchBeepSelectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getTouchBeepSelectionAttribute();
}

void audioPresCtrlSettingsStubDefault::setTouchBeepSelectionAttribute(std::string _value) {
    const bool valueChanged = trySetTouchBeepSelectionAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireTouchBeepSelectionAttributeChanged(touchBeepSelectionAttributeValue_);
    }
}

bool audioPresCtrlSettingsStubDefault::trySetTouchBeepSelectionAttribute(std::string _value) {
    if (!validateTouchBeepSelectionAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (touchBeepSelectionAttributeValue_ != _value);
    touchBeepSelectionAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool audioPresCtrlSettingsStubDefault::validateTouchBeepSelectionAttributeRequestedValue(const std::string &_value) {
    (void)_value;
	return true;
}

void audioPresCtrlSettingsStubDefault::setTouchBeepSelectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value) {
    (void)_client;
    setTouchBeepSelectionAttribute(_value);
}

void audioPresCtrlSettingsStubDefault::onRemoteTouchBeepSelectionAttributeChanged() {
    // No operation in default
}

void audioPresCtrlSettingsStubDefault::RemoteEventHandler::onRemoteTouchBeepSelectionAttributeChanged() {
	assert(defaultStub_ !=NULL);
    defaultStub_->onRemoteTouchBeepSelectionAttributeChanged();
}

bool audioPresCtrlSettingsStubDefault::RemoteEventHandler::onRemoteSetTouchBeepSelectionAttribute(std::string _value) {
	assert(defaultStub_ !=NULL);
    return defaultStub_->trySetTouchBeepSelectionAttribute(std::move(_value));
}

bool audioPresCtrlSettingsStubDefault::RemoteEventHandler::onRemoteSetTouchBeepSelectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value) {
    (void)_client;
    return onRemoteSetTouchBeepSelectionAttribute(_value);
}

const std::string& audioPresCtrlSettingsStubDefault::getKeypadBeepSelectionAttribute() {
    return keypadBeepSelectionAttributeValue_;
}

const std::string& audioPresCtrlSettingsStubDefault::getKeypadBeepSelectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getKeypadBeepSelectionAttribute();
}

void audioPresCtrlSettingsStubDefault::setKeypadBeepSelectionAttribute(std::string _value) {
    const bool valueChanged = trySetKeypadBeepSelectionAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireKeypadBeepSelectionAttributeChanged(keypadBeepSelectionAttributeValue_);
    }
}

bool audioPresCtrlSettingsStubDefault::trySetKeypadBeepSelectionAttribute(std::string _value) {
    if (!validateKeypadBeepSelectionAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (keypadBeepSelectionAttributeValue_ != _value);
    keypadBeepSelectionAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool audioPresCtrlSettingsStubDefault::validateKeypadBeepSelectionAttributeRequestedValue(const std::string &_value) {
    (void)_value;
	return true;
}

void audioPresCtrlSettingsStubDefault::setKeypadBeepSelectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value) {
    (void)_client;
    setKeypadBeepSelectionAttribute(_value);
}

void audioPresCtrlSettingsStubDefault::onRemoteKeypadBeepSelectionAttributeChanged() {
    // No operation in default
}

void audioPresCtrlSettingsStubDefault::RemoteEventHandler::onRemoteKeypadBeepSelectionAttributeChanged() {
	assert(defaultStub_ !=NULL);
    defaultStub_->onRemoteKeypadBeepSelectionAttributeChanged();
}

bool audioPresCtrlSettingsStubDefault::RemoteEventHandler::onRemoteSetKeypadBeepSelectionAttribute(std::string _value) {
	assert(defaultStub_ !=NULL);
    return defaultStub_->trySetKeypadBeepSelectionAttribute(std::move(_value));
}

bool audioPresCtrlSettingsStubDefault::RemoteEventHandler::onRemoteSetKeypadBeepSelectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value) {
    (void)_client;
    return onRemoteSetKeypadBeepSelectionAttribute(_value);
}


/**
 * description: This method is used to set absolute volume of presently playing source.  	If
 *   interrupt source is active, it changes the volume of active interrupt source
 *   	If no interrupts are active, it changes volume of Entertainment source.
 *   	(at)broadast VolumeChange
 */
void audioPresCtrlSettingsStubDefault::SetVolume(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _absoluteVolume) {
    (void)_client;
    (void) _absoluteVolume;
}

/**
 * description: This method is used to set Volume of presently playing source where volume
 *   change is given in steps example -2 or +2 	(at)broadast VolumeChange
 */
void audioPresCtrlSettingsStubDefault::SetVolumeStep(const std::shared_ptr<CommonAPI::ClientId> _client, int16_t _volumeStep) {
    (void)_client;
    (void) _volumeStep;
}

/**
 * description: This method is used to set Volume of any source group 	(at)broadast VolumeChange
 */
void audioPresCtrlSettingsStubDefault::SetSourceVolume(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume _volume, SetSourceVolumeReply_t _reply) {
    (void)_client;
    (void) _volume;
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors error;
    _reply(error);
}

/**
 * description: This method is used to get Volume of any source 	(at)return eAudioPresErrors
 */
void audioPresCtrlSettingsStubDefault::GetSourceVolume(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId _sourceID, GetSourceVolumeReply_t _reply) {
    (void)_client;
    (void) _sourceID;
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors error;
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume volumeOfSource = {};
    _reply(error, volumeOfSource);
}

/**
 * description: This method is used to toggle mute status of currently playing source
 *   	(at)attribute update ActiveSrcMute
 */
void audioPresCtrlSettingsStubDefault::ToggleActiveSrcMute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
}

/**
 * description: This method is used to set mute status of any particular source 	(at)broadcast
 *   SourceMuteState
 */
void audioPresCtrlSettingsStubDefault::SetSourceMute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId _sourceID, bool _mute) {
    (void)_client;
    (void) _sourceID;
    (void) _mute;
}

/**
 * description: This method is used to toggle MIC mute status  	(at)attribute update
 *   MicMuteStatus
 */
void audioPresCtrlSettingsStubDefault::ToggleMicMute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
}

/**
 * description: This method is used to get supported EQ preset, Touch tone list and keyboard
 *   tone list 	(at)return eAudioPresErrors
 */
void audioPresCtrlSettingsStubDefault::GetList(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eUserOption _listType, GetListReply_t _reply) {
    (void)_client;
    (void) _listType;
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors error;
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::ListItems list = {};
    _reply(error, list);
}

/**
 * description: This method is used to get mute status of any particular source 	(at)return
 *   eAudioPresErrors
 */
void audioPresCtrlSettingsStubDefault::GetSourceMute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId _sourceID, GetSourceMuteReply_t _reply) {
    (void)_client;
    (void) _sourceID;
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors error;
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId sourceId = 0u;
    bool mute = false;
    _reply(error, sourceId, mute);
}

/**
 * description: This method is used to toggle mute status of complete system 	(at)attribute
 *   update MasterMute
 */
void audioPresCtrlSettingsStubDefault::ToggleMasterMute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
}

/**
 * description: This method is used to set audio settings attributes     You may pass a map of
 *   attributes rather than multiple calls.      For example , the balance and fade
 *   is always a combination 	(at)attribute update
 */
void audioPresCtrlSettingsStubDefault::setAudioAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::mAttribute _attributesmap) {
    (void)_client;
    (void) _attributesmap;
}


/**
 * description: To broadcast volume change signal to HMI to display updated volume level
 */
void audioPresCtrlSettingsStubDefault::fireVolumeChangeEvent(const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume &_volume, const bool &_sourceActive) {
    assert((CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireVolumeChangeEvent(_volume, _sourceActive);
}
/**
 * description: To broadcast system mute state to HMI
 */
void audioPresCtrlSettingsStubDefault::fireSourceMuteStateEvent(const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId &_sourcename, const bool &_muteState) {
    assert((CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<audioPresCtrlSettingsStubAdapter, audioPresCtrlSettingsStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireSourceMuteStateEvent(_sourcename, _muteState);
}


audioPresCtrlSettingsStubDefault::RemoteEventHandler::RemoteEventHandler(audioPresCtrlSettingsStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace audioPresCtrl
} // namespace audio
} // namespace harman
} // namespace com
} // namespace v1
