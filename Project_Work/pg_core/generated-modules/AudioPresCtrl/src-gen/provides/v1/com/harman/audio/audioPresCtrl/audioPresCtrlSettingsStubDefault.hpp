/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Oct 04 15:43:40 EDT 2016
*/
/**
 * description: This is a Common API DBUS settings interface of audio presentation controller
 *   for Orinoco 2.0
 * author: AYatheesh
 */
#ifndef V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Settings_STUB_DEFAULT_HPP_
#define V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Settings_STUB_DEFAULT_HPP_


#include <v1/com/harman/audio/audioPresCtrl/audioPresCtrlSettingsStub.hpp>
#include <sstream>

namespace v1 {
namespace com {
namespace harman {
namespace audio {
namespace audioPresCtrl {

/**
 * Provides a default implementation for audioPresCtrlSettingsStubRemoteEvent and
 * audioPresCtrlSettingsStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class audioPresCtrlSettingsStubDefault
    : public virtual audioPresCtrlSettingsStub {
public:
    audioPresCtrlSettingsStubDefault();

    audioPresCtrlSettingsStubRemoteEvent* initStubAdapter(const std::shared_ptr<audioPresCtrlSettingsStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    virtual const int16_t& getFadeAttribute();
    virtual const int16_t& getFadeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setFadeAttribute(int16_t _value);
    virtual const int16_t& getBalanceAttribute();
    virtual const int16_t& getBalanceAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setBalanceAttribute(int16_t _value);
    virtual const int16_t& getBassAttribute();
    virtual const int16_t& getBassAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setBassAttribute(int16_t _value);
    virtual const int16_t& getMidAttribute();
    virtual const int16_t& getMidAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setMidAttribute(int16_t _value);
    virtual const int16_t& getTrebleAttribute();
    virtual const int16_t& getTrebleAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setTrebleAttribute(int16_t _value);
    virtual const std::string& getEqualizerAttribute();
    virtual const std::string& getEqualizerAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setEqualizerAttribute(std::string _value);
    virtual const bool& getClarifiAttribute();
    virtual const bool& getClarifiAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setClarifiAttribute(bool _value);
    virtual const bool& getLoudnessAttribute();
    virtual const bool& getLoudnessAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setLoudnessAttribute(bool _value);
    virtual const uint16_t& getAVCModeAttribute();
    virtual const uint16_t& getAVCModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setAVCModeAttribute(uint16_t _value);
    virtual const int16_t& getAuxOffsetGainAttribute();
    virtual const int16_t& getAuxOffsetGainAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setAuxOffsetGainAttribute(int16_t _value);
    virtual const int16_t& getMidLowAttribute();
    virtual const int16_t& getMidLowAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setMidLowAttribute(int16_t _value);
    virtual const int16_t& getMidHighAttribute();
    virtual const int16_t& getMidHighAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setMidHighAttribute(int16_t _value);
    virtual const int16_t& getA2dpOffsetGainAttribute();
    virtual const int16_t& getA2dpOffsetGainAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setA2dpOffsetGainAttribute(int16_t _value);
    virtual const int16_t& getMicGainAttribute();
    virtual const int16_t& getMicGainAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setMicGainAttribute(int16_t _value);
    virtual const bool& getActiveSrcMuteAttribute();
    virtual const bool& getActiveSrcMuteAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setActiveSrcMuteAttribute(bool _value);
    virtual const bool& getMasterMuteAttribute();
    virtual const bool& getMasterMuteAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setMasterMuteAttribute(bool _value);
    virtual const bool& getMicMuteStatusAttribute();
    virtual const bool& getMicMuteStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setMicMuteStatusAttribute(bool _value);
    virtual const std::string& getTouchBeepSelectionAttribute();
    virtual const std::string& getTouchBeepSelectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setTouchBeepSelectionAttribute(std::string _value);
    virtual void setTouchBeepSelectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value);
    virtual const std::string& getKeypadBeepSelectionAttribute();
    virtual const std::string& getKeypadBeepSelectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setKeypadBeepSelectionAttribute(std::string _value);
    virtual void setKeypadBeepSelectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value);

    /**
     * description: This method is used to set absolute volume of presently playing source.  	If
     *   interrupt source is active, it changes the volume of active interrupt source
     *   	If no interrupts are active, it changes volume of Entertainment source.
     *   	(at)broadast VolumeChange
     */
    virtual void SetVolume(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _absoluteVolume);
    /**
     * description: This method is used to set Volume of presently playing source where volume
     *   change is given in steps example -2 or +2 	(at)broadast VolumeChange
     */
    virtual void SetVolumeStep(const std::shared_ptr<CommonAPI::ClientId> _client, int16_t _volumeStep);
    /**
     * description: This method is used to set Volume of any source group 	(at)broadast VolumeChange
     */
    virtual void SetSourceVolume(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume _volume, SetSourceVolumeReply_t _reply);
    /**
     * description: This method is used to get Volume of any source 	(at)return eAudioPresErrors
     */
    virtual void GetSourceVolume(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId _sourceID, GetSourceVolumeReply_t _reply);
    /**
     * description: This method is used to toggle mute status of currently playing source
     *   	(at)attribute update ActiveSrcMute
     */
    virtual void ToggleActiveSrcMute(const std::shared_ptr<CommonAPI::ClientId> _client);
    /**
     * description: This method is used to set mute status of any particular source 	(at)broadcast
     *   SourceMuteState
     */
    virtual void SetSourceMute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId _sourceID, bool _mute);
    /**
     * description: This method is used to toggle MIC mute status  	(at)attribute update
     *   MicMuteStatus
     */
    virtual void ToggleMicMute(const std::shared_ptr<CommonAPI::ClientId> _client);
    /**
     * description: This method is used to get supported EQ preset, Touch tone list and keyboard
     *   tone list 	(at)return eAudioPresErrors
     */
    virtual void GetList(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eUserOption _listType, GetListReply_t _reply);
    /**
     * description: This method is used to get mute status of any particular source 	(at)return
     *   eAudioPresErrors
     */
    virtual void GetSourceMute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId _sourceID, GetSourceMuteReply_t _reply);
    /**
     * description: This method is used to toggle mute status of complete system 	(at)attribute
     *   update MasterMute
     */
    virtual void ToggleMasterMute(const std::shared_ptr<CommonAPI::ClientId> _client);
    /**
     * description: This method is used to set audio settings attributes     You may pass a map of
     *   attributes rather than multiple calls.      For example , the balance and fade
     *   is always a combination 	(at)attribute update
     */
    virtual void setAudioAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::mAttribute _attributesmap);

/**
 * description: To broadcast volume change signal to HMI to display updated volume level
 */
virtual void fireVolumeChangeEvent(const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume &_volume, const bool &_sourceActive);
/**
 * description: To broadcast system mute state to HMI
 */
virtual void fireSourceMuteStateEvent(const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId &_sourcename, const bool &_muteState);


protected:
    /**
     * description: Attribute holding current fade level
     */
    virtual bool trySetFadeAttribute(int16_t _value);
    virtual bool validateFadeAttributeRequestedValue(const int16_t &_value);
    /**
     * description: Attribute holding current Balance level
     */
    virtual bool trySetBalanceAttribute(int16_t _value);
    virtual bool validateBalanceAttributeRequestedValue(const int16_t &_value);
    /**
     * description: Attribute holding current Bass level
     */
    virtual bool trySetBassAttribute(int16_t _value);
    virtual bool validateBassAttributeRequestedValue(const int16_t &_value);
    /**
     * description: Attribute holding current Mid level
     */
    virtual bool trySetMidAttribute(int16_t _value);
    virtual bool validateMidAttributeRequestedValue(const int16_t &_value);
    /**
     * description: Attribute holding current Treble level
     */
    virtual bool trySetTrebleAttribute(int16_t _value);
    virtual bool validateTrebleAttributeRequestedValue(const int16_t &_value);
    /**
     * description: Attribute holding Equalizer set
     */
    virtual bool trySetEqualizerAttribute(std::string _value);
    virtual bool validateEqualizerAttributeRequestedValue(const std::string &_value);
    /**
     * description: Attribute holding Clarifi status (enabled/disabled)
     */
    virtual bool trySetClarifiAttribute(bool _value);
    virtual bool validateClarifiAttributeRequestedValue(const bool &_value);
    /**
     * description: Attribute holding Loudness status (enabled/disabled)
     */
    virtual bool trySetLoudnessAttribute(bool _value);
    virtual bool validateLoudnessAttributeRequestedValue(const bool &_value);
    /**
     * description: Attribute holding current AVCMode level
     */
    virtual bool trySetAVCModeAttribute(uint16_t _value);
    virtual bool validateAVCModeAttributeRequestedValue(const uint16_t &_value);
    /**
     * description: Attribute holding Aux offset gain value
     */
    virtual bool trySetAuxOffsetGainAttribute(int16_t _value);
    virtual bool validateAuxOffsetGainAttributeRequestedValue(const int16_t &_value);
    /**
     * description: Attribute holding Mid low value
     */
    virtual bool trySetMidLowAttribute(int16_t _value);
    virtual bool validateMidLowAttributeRequestedValue(const int16_t &_value);
    /**
     * description: Attribute holding MidHigh value
     */
    virtual bool trySetMidHighAttribute(int16_t _value);
    virtual bool validateMidHighAttributeRequestedValue(const int16_t &_value);
    /**
     * description: Attribute holding A2dp source offset gain value
     */
    virtual bool trySetA2dpOffsetGainAttribute(int16_t _value);
    virtual bool validateA2dpOffsetGainAttributeRequestedValue(const int16_t &_value);
    /**
     * description: Attribute holding Mic gain value
     */
    virtual bool trySetMicGainAttribute(int16_t _value);
    virtual bool validateMicGainAttributeRequestedValue(const int16_t &_value);
    /**
     * description: Attribute holding mute state of active source
     */
    virtual bool trySetActiveSrcMuteAttribute(bool _value);
    virtual bool validateActiveSrcMuteAttributeRequestedValue(const bool &_value);
    /**
     * description: Attribute holding system mute state
     */
    virtual bool trySetMasterMuteAttribute(bool _value);
    virtual bool validateMasterMuteAttributeRequestedValue(const bool &_value);
    /**
     * description: Attribute hodling MicMute status
     */
    virtual bool trySetMicMuteStatusAttribute(bool _value);
    virtual bool validateMicMuteStatusAttributeRequestedValue(const bool &_value);
    /**
     * description: Attribute hodling touch beep tone selection
     */
    virtual bool trySetTouchBeepSelectionAttribute(std::string _value);
    virtual bool validateTouchBeepSelectionAttributeRequestedValue(const std::string &_value);
    virtual void onRemoteTouchBeepSelectionAttributeChanged();
    /**
     * description: Attribute hodling touch beep tone selection
     */
    virtual bool trySetKeypadBeepSelectionAttribute(std::string _value);
    virtual bool validateKeypadBeepSelectionAttributeRequestedValue(const std::string &_value);
    virtual void onRemoteKeypadBeepSelectionAttributeChanged();
    class RemoteEventHandler: public virtual audioPresCtrlSettingsStubRemoteEvent {
    public:
        RemoteEventHandler(audioPresCtrlSettingsStubDefault *_defaultStub);

        /**
         * description: Attribute holding current fade level
         */

        /**
         * description: Attribute holding current Balance level
         */

        /**
         * description: Attribute holding current Bass level
         */

        /**
         * description: Attribute holding current Mid level
         */

        /**
         * description: Attribute holding current Treble level
         */

        /**
         * description: Attribute holding Equalizer set
         */

        /**
         * description: Attribute holding Clarifi status (enabled/disabled)
         */

        /**
         * description: Attribute holding Loudness status (enabled/disabled)
         */

        /**
         * description: Attribute holding current AVCMode level
         */

        /**
         * description: Attribute holding Aux offset gain value
         */

        /**
         * description: Attribute holding Mid low value
         */

        /**
         * description: Attribute holding MidHigh value
         */

        /**
         * description: Attribute holding A2dp source offset gain value
         */

        /**
         * description: Attribute holding Mic gain value
         */

        /**
         * description: Attribute holding mute state of active source
         */

        /**
         * description: Attribute holding system mute state
         */

        /**
         * description: Attribute hodling MicMute status
         */

        /**
         * description: Attribute hodling touch beep tone selection
         */
        virtual bool onRemoteSetTouchBeepSelectionAttribute(std::string _value);
        virtual bool onRemoteSetTouchBeepSelectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value);
        virtual void onRemoteTouchBeepSelectionAttributeChanged();

        /**
         * description: Attribute hodling touch beep tone selection
         */
        virtual bool onRemoteSetKeypadBeepSelectionAttribute(std::string _value);
        virtual bool onRemoteSetKeypadBeepSelectionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value);
        virtual void onRemoteKeypadBeepSelectionAttributeChanged();


    private:
        audioPresCtrlSettingsStubDefault *defaultStub_;
    };
private:
    audioPresCtrlSettingsStubDefault::RemoteEventHandler remoteEventHandler_;

    /**
     * description: Attribute holding current fade level
     */
    int16_t fadeAttributeValue_ {};
    /**
     * description: Attribute holding current Balance level
     */
    int16_t balanceAttributeValue_ {};
    /**
     * description: Attribute holding current Bass level
     */
    int16_t bassAttributeValue_ {};
    /**
     * description: Attribute holding current Mid level
     */
    int16_t midAttributeValue_ {};
    /**
     * description: Attribute holding current Treble level
     */
    int16_t trebleAttributeValue_ {};
    /**
     * description: Attribute holding Equalizer set
     */
    std::string equalizerAttributeValue_ {};
    /**
     * description: Attribute holding Clarifi status (enabled/disabled)
     */
    bool clarifiAttributeValue_ {};
    /**
     * description: Attribute holding Loudness status (enabled/disabled)
     */
    bool loudnessAttributeValue_ {};
    /**
     * description: Attribute holding current AVCMode level
     */
    uint16_t aVCModeAttributeValue_ {};
    /**
     * description: Attribute holding Aux offset gain value
     */
    int16_t auxOffsetGainAttributeValue_ {};
    /**
     * description: Attribute holding Mid low value
     */
    int16_t midLowAttributeValue_ {};
    /**
     * description: Attribute holding MidHigh value
     */
    int16_t midHighAttributeValue_ {};
    /**
     * description: Attribute holding A2dp source offset gain value
     */
    int16_t a2dpOffsetGainAttributeValue_ {};
    /**
     * description: Attribute holding Mic gain value
     */
    int16_t micGainAttributeValue_ {};
    /**
     * description: Attribute holding mute state of active source
     */
    bool activeSrcMuteAttributeValue_ {};
    /**
     * description: Attribute holding system mute state
     */
    bool masterMuteAttributeValue_ {};
    /**
     * description: Attribute hodling MicMute status
     */
    bool micMuteStatusAttributeValue_ {};
    /**
     * description: Attribute hodling touch beep tone selection
     */
    std::string touchBeepSelectionAttributeValue_ {};
    /**
     * description: Attribute hodling touch beep tone selection
     */
    std::string keypadBeepSelectionAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace audioPresCtrl
} // namespace audio
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Settings_STUB_DEFAULT
