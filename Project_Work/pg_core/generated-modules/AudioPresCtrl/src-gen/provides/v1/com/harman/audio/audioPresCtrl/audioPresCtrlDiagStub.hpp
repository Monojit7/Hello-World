/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Oct 04 15:43:40 EDT 2016
*/
/**
 * description: This is a Common API DBUS diagnostics interface of audio presentation
 *   controller for Orinoco 2.0
 * author: AYatheesh
 */
#ifndef V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Diag_STUB_HPP_
#define V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Diag_STUB_HPP_

#include <functional>



#include <v1/com/harman/audio/audioPresCtrl/audioPresCtrlTypes.hpp>

#include <v1/com/harman/audio/audioPresCtrl/audioPresCtrlDiag.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace audio {
namespace audioPresCtrl {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service audioPresCtrlDiag. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class audioPresCtrlDiagStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual audioPresCtrlDiag {
 public:



    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for audioPresCtrlDiag.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class audioPresCtrlDiagStubRemoteEvent
{
public:
    virtual ~audioPresCtrlDiagStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service audioPresCtrlDiag to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class audioPresCtrlDiagStub
    : public virtual CommonAPI::Stub<audioPresCtrlDiagStubAdapter, audioPresCtrlDiagStubRemoteEvent>
{
public:
    typedef std::function<void (::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors _error)>TestSpeakerOnReply_t;
    typedef std::function<void (::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors _error)>TestMultiSpeakersOffReply_t;
    typedef std::function<void (::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors _error)>playSineToneReply_t;
    typedef std::function<void (::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors _error)>StopSineToneReply_t;

    virtual ~audioPresCtrlDiagStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /**
     * description: For diagnostic purpose to test one or multiple speakers 	(at)return
     *   eAudioPresErrors
     */
    /// This is the method that will be called on remote calls on the method TestSpeakerOn.
    virtual void TestSpeakerOn(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _speakerMask, std::string _testToneName, float _frequency, uint16_t _volume, TestSpeakerOnReply_t _reply) = 0;
    /**
     * description: For diagnostic purpose to turn OFF one or more speakers 	(at)return
     *   eAudioPresErrors
     */
    /// This is the method that will be called on remote calls on the method TestMultiSpeakersOff.
    virtual void TestMultiSpeakersOff(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _speakerMask, TestMultiSpeakersOffReply_t _reply) = 0;
    /**
     * description: This function is used to play a sine signal with sine generator with special
     *   parameters.     (at)return eAudioPresErrors
     */
    /// This is the method that will be called on remote calls on the method playSineTone.
    virtual void playSineTone(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eSampleRateType _sampleRate, int16_t _frequency, int16_t _pauseTime, int16_t _pulseTime, int16_t _repeatCount, playSineToneReply_t _reply) = 0;
    /**
     * description: This function is used to stop playing sine tone for diagnostics purpose    
     *   (at)return eAudioPresErrors
     */
    /// This is the method that will be called on remote calls on the method StopSineTone.
    virtual void StopSineTone(const std::shared_ptr<CommonAPI::ClientId> _client, StopSineToneReply_t _reply) = 0;

    using CommonAPI::Stub<audioPresCtrlDiagStubAdapter, audioPresCtrlDiagStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<audioPresCtrlDiagStubAdapter, audioPresCtrlDiagStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<audioPresCtrlDiagStubAdapter, audioPresCtrlDiagStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef audioPresCtrlDiagStubRemoteEvent RemoteEventType;
    typedef audioPresCtrlDiag StubInterface;
};

} // namespace audioPresCtrl
} // namespace audio
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Diag_STUB_HPP_
