/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Oct 04 15:43:40 EDT 2016
*/
#ifndef V0_COM_HARMAN_AUDIO_WAVEPLAYER_wave_Player_PROXY_BASE_HPP_
#define V0_COM_HARMAN_AUDIO_WAVEPLAYER_wave_Player_PROXY_BASE_HPP_

#include <v0/com/harman/audio/waveplayer/wavePlayer.hpp>


#include <v0/com/harman/audio/waveplayer/wavePlayerType.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace audio {
namespace waveplayer {

class wavePlayerProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        int64_t, ::v0::com::harman::audio::waveplayer::wavePlayerType::wavePlayerState_e
    > PlayStateUpdateEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const int64_t&)> PlayAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int64_t&)> PlayFileAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int64_t&)> PlaySineAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int16_t&)> StopAsyncCallback;


    /**
     * description: This function a signal to indicate the wavePlayer current working state.
     */
    virtual PlayStateUpdateEvent& getPlayStateUpdateEvent() = 0;

    /**
     * description: This function is used to play, stop or abort a predefined beep type. (at)return
     *   handle number on success, -1 on error.
     */
    virtual void play(const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepType_e &_type, CommonAPI::CallStatus &_internalCallStatus, int64_t &_handle, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> playAsync(const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepType_e &_type, PlayAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This function is used to play, stop or abort a special wave file. (at)return
     *   handle number on success, -1 on error.
     */
    virtual void playFile(const std::string &_filePath, const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e &_group, const int32_t &_repeatCount, CommonAPI::CallStatus &_internalCallStatus, int64_t &_handle, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> playFileAsync(const std::string &_filePath, const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e &_group, const int32_t &_repeatCount, PlayFileAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This function is used to play a sine signal with sine generator with special
     *   parameters. (at)return handle number on success, -1 on error.
     */
    virtual void playSine(const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e &_group, const ::v0::com::harman::audio::waveplayer::wavePlayerType::sampleRateType_e &_sampleRate, const int16_t &_frequency, const int32_t &_pauseTime, const int32_t &_pulseTime, const int32_t &_repeatCount, CommonAPI::CallStatus &_internalCallStatus, int64_t &_handle, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> playSineAsync(const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e &_group, const ::v0::com::harman::audio::waveplayer::wavePlayerType::sampleRateType_e &_sampleRate, const int16_t &_frequency, const int32_t &_pauseTime, const int32_t &_pulseTime, const int32_t &_repeatCount, PlaySineAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This function is used to stop a playing beep with its handle. this API can stop
     *   the any playback created by play(), playFile(), playSine() (at)return 0 on
     *   success, -1 on error.
     */
    virtual void stop(const int64_t &_handle, CommonAPI::CallStatus &_internalCallStatus, int16_t &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> stopAsync(const int64_t &_handle, StopAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace waveplayer
} // namespace audio
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_AUDIO_WAVEPLAYER_wave_Player_PROXY_BASE_HPP_
