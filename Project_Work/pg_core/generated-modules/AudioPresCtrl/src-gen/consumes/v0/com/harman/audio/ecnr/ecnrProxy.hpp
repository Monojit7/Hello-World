/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Oct 04 15:43:40 EDT 2016
*/
/**
 * description: This class implements all echo cacellation & noise reduction
 * author: lian zhang
 */
#ifndef V0_COM_HARMAN_AUDIO_ECNR_ecnr_PROXY_HPP_
#define V0_COM_HARMAN_AUDIO_ECNR_ecnr_PROXY_HPP_

#include <v0/com/harman/audio/ecnr/ecnrProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace audio {
namespace ecnr {

template <typename ... _AttributeExtensions>
class ecnrProxy
    : virtual public ecnr, 
      virtual public ecnrProxyBase,
      virtual public _AttributeExtensions... {
public:
    ecnrProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~ecnrProxy();

    typedef ecnr InterfaceType;



    /**
     * description: This function is used to broadcast mute status of mic.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast micMuteChanged.
     */
    virtual MicMuteChangedEvent& getMicMuteChangedEvent() {
        return delegate_->getMicMuteChangedEvent();
    }
    /**
     * description: This function is used to broadcast the microphone gain value of current
     *   scenario.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast micGainChanged.
     */
    virtual MicGainChangedEvent& getMicGainChangedEvent() {
        return delegate_->getMicGainChangedEvent();
    }

    /**
     * description: This function is used to start one scenario.
     * Calls start with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void start(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_scenario_e &_scenario, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls start with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> startAsync(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_scenario_e &_scenario, StartAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This function is used to stop one scenario.
     * Calls stop with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void stop(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_scenario_e &_scenario, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls stop with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> stopAsync(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_scenario_e &_scenario, StopAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This function is used to mute mic.
     * Calls setMicMute with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setMicMute(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_mute_e &_muteState, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setMicMute with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setMicMuteAsync(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_mute_e &_muteState, SetMicMuteAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This function is used to change the microphone gain value of current scenario.
     * Calls setMicGain with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setMicGain(const float &_gain, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setMicGain with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setMicGainAsync(const float &_gain, SetMicGainAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This function is used to change the log level.
     * Calls logLevel with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void logLevel(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_logLevel_e &_level, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls logLevel with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> logLevelAsync(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_logLevel_e &_level, LogLevelAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This function is used to change the tuning mode.
     * Calls tuningMode with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void tuningMode(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_tuningMode_e &_mode, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls tuningMode with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> tuningModeAsync(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_tuningMode_e &_mode, TuningModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This function is used to get mute status of mic.
     * Calls getMicMute with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getMicMute(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_mute_e &_muteState, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getMicMute with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getMicMuteAsync(GetMicMuteAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This function is used to get the microphone gain value of current scenario.
     * Calls getMicGain with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getMicGain(CommonAPI::CallStatus &_internalCallStatus, float &_gain, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getMicGain with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getMicGainAsync(GetMicGainAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<ecnrProxyBase> delegate_;
};

typedef ecnrProxy<> ecnrProxyDefault;


//
// ecnrProxy Implementation
//
template <typename ... _AttributeExtensions>
ecnrProxy<_AttributeExtensions...>::ecnrProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<ecnrProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<ecnrProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
ecnrProxy<_AttributeExtensions...>::~ecnrProxy() {
}

/**
 * description: This function is used to start one scenario.
 */
template <typename ... _AttributeExtensions>
void ecnrProxy<_AttributeExtensions...>::start(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_scenario_e &_scenario, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info) {
    if (!_scenario.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->start(_scenario, _internalCallStatus, _err, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ecnrProxy<_AttributeExtensions...>::startAsync(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_scenario_e &_scenario, StartAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_scenario.validate()) {
        ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e err = ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e::E_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, err);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->startAsync(_scenario, _callback, _info);
}
/**
 * description: This function is used to stop one scenario.
 */
template <typename ... _AttributeExtensions>
void ecnrProxy<_AttributeExtensions...>::stop(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_scenario_e &_scenario, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info) {
    if (!_scenario.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->stop(_scenario, _internalCallStatus, _err, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ecnrProxy<_AttributeExtensions...>::stopAsync(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_scenario_e &_scenario, StopAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_scenario.validate()) {
        ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e err = ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e::E_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, err);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->stopAsync(_scenario, _callback, _info);
}
/**
 * description: This function is used to mute mic.
 */
template <typename ... _AttributeExtensions>
void ecnrProxy<_AttributeExtensions...>::setMicMute(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_mute_e &_muteState, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info) {
    if (!_muteState.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->setMicMute(_muteState, _internalCallStatus, _err, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ecnrProxy<_AttributeExtensions...>::setMicMuteAsync(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_mute_e &_muteState, SetMicMuteAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_muteState.validate()) {
        ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e err = ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e::E_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, err);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->setMicMuteAsync(_muteState, _callback, _info);
}
/**
 * description: This function is used to change the microphone gain value of current scenario.
 */
template <typename ... _AttributeExtensions>
void ecnrProxy<_AttributeExtensions...>::setMicGain(const float &_gain, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info) {
    delegate_->setMicGain(_gain, _internalCallStatus, _err, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ecnrProxy<_AttributeExtensions...>::setMicGainAsync(const float &_gain, SetMicGainAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setMicGainAsync(_gain, _callback, _info);
}
/**
 * description: This function is used to change the log level.
 */
template <typename ... _AttributeExtensions>
void ecnrProxy<_AttributeExtensions...>::logLevel(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_logLevel_e &_level, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info) {
    if (!_level.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->logLevel(_level, _internalCallStatus, _err, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ecnrProxy<_AttributeExtensions...>::logLevelAsync(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_logLevel_e &_level, LogLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_level.validate()) {
        ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e err = ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e::E_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, err);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->logLevelAsync(_level, _callback, _info);
}
/**
 * description: This function is used to change the tuning mode.
 */
template <typename ... _AttributeExtensions>
void ecnrProxy<_AttributeExtensions...>::tuningMode(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_tuningMode_e &_mode, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info) {
    if (!_mode.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->tuningMode(_mode, _internalCallStatus, _err, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ecnrProxy<_AttributeExtensions...>::tuningModeAsync(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_tuningMode_e &_mode, TuningModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_mode.validate()) {
        ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e err = ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e::E_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, err);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->tuningModeAsync(_mode, _callback, _info);
}
/**
 * description: This function is used to get mute status of mic.
 */
template <typename ... _AttributeExtensions>
void ecnrProxy<_AttributeExtensions...>::getMicMute(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_mute_e &_muteState, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info) {
    delegate_->getMicMute(_internalCallStatus, _muteState, _err, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ecnrProxy<_AttributeExtensions...>::getMicMuteAsync(GetMicMuteAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getMicMuteAsync(_callback, _info);
}
/**
 * description: This function is used to get the microphone gain value of current scenario.
 */
template <typename ... _AttributeExtensions>
void ecnrProxy<_AttributeExtensions...>::getMicGain(CommonAPI::CallStatus &_internalCallStatus, float &_gain, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info) {
    delegate_->getMicGain(_internalCallStatus, _gain, _err, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ecnrProxy<_AttributeExtensions...>::getMicGainAsync(GetMicGainAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getMicGainAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &ecnrProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool ecnrProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool ecnrProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& ecnrProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& ecnrProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace ecnr
} // namespace audio
} // namespace harman
} // namespace com
} // namespace v0



// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_AUDIO_ECNR_ecnr_PROXY_HPP_
