/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Oct 04 15:43:40 EDT 2016
*/
/**
 * description: This class implements all echo cacellation & noise reduction
 * author: lian zhang
 */
#ifndef V0_COM_HARMAN_AUDIO_ECNR_ecnr_PROXY_BASE_HPP_
#define V0_COM_HARMAN_AUDIO_ECNR_ecnr_PROXY_BASE_HPP_

#include <v0/com/harman/audio/ecnr/ecnr.hpp>


#include <v0/com/harman/audio/ecnr/ecnrType.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace audio {
namespace ecnr {

class ecnrProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::v0::com::harman::audio::ecnr::ecnrType::ecnr_mute_e, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e
    > MicMuteChangedEvent;
    typedef CommonAPI::Event<
        float, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e
    > MicGainChangedEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e&)> StartAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e&)> StopAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e&)> SetMicMuteAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e&)> SetMicGainAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e&)> LogLevelAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e&)> TuningModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_mute_e&, const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e&)> GetMicMuteAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const float&, const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e&)> GetMicGainAsyncCallback;


    /**
     * description: This function is used to broadcast mute status of mic.
     */
    virtual MicMuteChangedEvent& getMicMuteChangedEvent() = 0;
    /**
     * description: This function is used to broadcast the microphone gain value of current
     *   scenario.
     */
    virtual MicGainChangedEvent& getMicGainChangedEvent() = 0;

    /**
     * description: This function is used to start one scenario.
     */
    virtual void start(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_scenario_e &_scenario, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startAsync(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_scenario_e &_scenario, StartAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This function is used to stop one scenario.
     */
    virtual void stop(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_scenario_e &_scenario, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> stopAsync(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_scenario_e &_scenario, StopAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This function is used to mute mic.
     */
    virtual void setMicMute(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_mute_e &_muteState, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setMicMuteAsync(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_mute_e &_muteState, SetMicMuteAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This function is used to change the microphone gain value of current scenario.
     */
    virtual void setMicGain(const float &_gain, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setMicGainAsync(const float &_gain, SetMicGainAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This function is used to change the log level.
     */
    virtual void logLevel(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_logLevel_e &_level, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> logLevelAsync(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_logLevel_e &_level, LogLevelAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This function is used to change the tuning mode.
     */
    virtual void tuningMode(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_tuningMode_e &_mode, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> tuningModeAsync(const ::v0::com::harman::audio::ecnr::ecnrType::ecnr_tuningMode_e &_mode, TuningModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This function is used to get mute status of mic.
     */
    virtual void getMicMute(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_mute_e &_muteState, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getMicMuteAsync(GetMicMuteAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This function is used to get the microphone gain value of current scenario.
     */
    virtual void getMicGain(CommonAPI::CallStatus &_internalCallStatus, float &_gain, ::v0::com::harman::audio::ecnr::ecnrType::ecnr_Error_e &_err, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getMicGainAsync(GetMicGainAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace ecnr
} // namespace audio
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_AUDIO_ECNR_ecnr_PROXY_BASE_HPP_
