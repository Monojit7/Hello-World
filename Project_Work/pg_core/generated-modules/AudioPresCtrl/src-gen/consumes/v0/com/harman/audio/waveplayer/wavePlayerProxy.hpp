/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Oct 04 15:43:40 EDT 2016
*/
#ifndef V0_COM_HARMAN_AUDIO_WAVEPLAYER_wave_Player_PROXY_HPP_
#define V0_COM_HARMAN_AUDIO_WAVEPLAYER_wave_Player_PROXY_HPP_

#include <v0/com/harman/audio/waveplayer/wavePlayerProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace audio {
namespace waveplayer {

template <typename ... _AttributeExtensions>
class wavePlayerProxy
    : virtual public wavePlayer, 
      virtual public wavePlayerProxyBase,
      virtual public _AttributeExtensions... {
public:
    wavePlayerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~wavePlayerProxy();

    typedef wavePlayer InterfaceType;



    /**
     * description: This function a signal to indicate the wavePlayer current working state.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast playStateUpdate.
     */
    virtual PlayStateUpdateEvent& getPlayStateUpdateEvent() {
        return delegate_->getPlayStateUpdateEvent();
    }

    /**
     * description: This function is used to play, stop or abort a predefined beep type. (at)return
     *   handle number on success, -1 on error.
     * Calls play with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void play(const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepType_e &_type, CommonAPI::CallStatus &_internalCallStatus, int64_t &_handle, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls play with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> playAsync(const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepType_e &_type, PlayAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This function is used to play, stop or abort a special wave file. (at)return
     *   handle number on success, -1 on error.
     * Calls playFile with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void playFile(const std::string &_filePath, const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e &_group, const int32_t &_repeatCount, CommonAPI::CallStatus &_internalCallStatus, int64_t &_handle, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls playFile with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> playFileAsync(const std::string &_filePath, const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e &_group, const int32_t &_repeatCount, PlayFileAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This function is used to play a sine signal with sine generator with special
     *   parameters. (at)return handle number on success, -1 on error.
     * Calls playSine with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void playSine(const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e &_group, const ::v0::com::harman::audio::waveplayer::wavePlayerType::sampleRateType_e &_sampleRate, const int16_t &_frequency, const int32_t &_pauseTime, const int32_t &_pulseTime, const int32_t &_repeatCount, CommonAPI::CallStatus &_internalCallStatus, int64_t &_handle, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls playSine with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> playSineAsync(const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e &_group, const ::v0::com::harman::audio::waveplayer::wavePlayerType::sampleRateType_e &_sampleRate, const int16_t &_frequency, const int32_t &_pauseTime, const int32_t &_pulseTime, const int32_t &_repeatCount, PlaySineAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This function is used to stop a playing beep with its handle. this API can stop
     *   the any playback created by play(), playFile(), playSine() (at)return 0 on
     *   success, -1 on error.
     * Calls stop with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void stop(const int64_t &_handle, CommonAPI::CallStatus &_internalCallStatus, int16_t &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls stop with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> stopAsync(const int64_t &_handle, StopAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<wavePlayerProxyBase> delegate_;
};

typedef wavePlayerProxy<> wavePlayerProxyDefault;


//
// wavePlayerProxy Implementation
//
template <typename ... _AttributeExtensions>
wavePlayerProxy<_AttributeExtensions...>::wavePlayerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<wavePlayerProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<wavePlayerProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
wavePlayerProxy<_AttributeExtensions...>::~wavePlayerProxy() {
}

/**
 * description: This function is used to play, stop or abort a predefined beep type. (at)return
 *   handle number on success, -1 on error.
 */
template <typename ... _AttributeExtensions>
void wavePlayerProxy<_AttributeExtensions...>::play(const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepType_e &_type, CommonAPI::CallStatus &_internalCallStatus, int64_t &_handle, const CommonAPI::CallInfo *_info) {
    if (!_type.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->play(_type, _internalCallStatus, _handle, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> wavePlayerProxy<_AttributeExtensions...>::playAsync(const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepType_e &_type, PlayAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_type.validate()) {
        int64_t handle = 0;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, handle);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->playAsync(_type, _callback, _info);
}
/**
 * description: This function is used to play, stop or abort a special wave file. (at)return
 *   handle number on success, -1 on error.
 */
template <typename ... _AttributeExtensions>
void wavePlayerProxy<_AttributeExtensions...>::playFile(const std::string &_filePath, const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e &_group, const int32_t &_repeatCount, CommonAPI::CallStatus &_internalCallStatus, int64_t &_handle, const CommonAPI::CallInfo *_info) {
    if (!_group.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->playFile(_filePath, _group, _repeatCount, _internalCallStatus, _handle, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> wavePlayerProxy<_AttributeExtensions...>::playFileAsync(const std::string &_filePath, const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e &_group, const int32_t &_repeatCount, PlayFileAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_group.validate()) {
        int64_t handle = 0;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, handle);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->playFileAsync(_filePath, _group, _repeatCount, _callback, _info);
}
/**
 * description: This function is used to play a sine signal with sine generator with special
 *   parameters. (at)return handle number on success, -1 on error.
 */
template <typename ... _AttributeExtensions>
void wavePlayerProxy<_AttributeExtensions...>::playSine(const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e &_group, const ::v0::com::harman::audio::waveplayer::wavePlayerType::sampleRateType_e &_sampleRate, const int16_t &_frequency, const int32_t &_pauseTime, const int32_t &_pulseTime, const int32_t &_repeatCount, CommonAPI::CallStatus &_internalCallStatus, int64_t &_handle, const CommonAPI::CallInfo *_info) {
    if (!_group.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    if (!_sampleRate.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->playSine(_group, _sampleRate, _frequency, _pauseTime, _pulseTime, _repeatCount, _internalCallStatus, _handle, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> wavePlayerProxy<_AttributeExtensions...>::playSineAsync(const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e &_group, const ::v0::com::harman::audio::waveplayer::wavePlayerType::sampleRateType_e &_sampleRate, const int16_t &_frequency, const int32_t &_pauseTime, const int32_t &_pulseTime, const int32_t &_repeatCount, PlaySineAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_group.validate()) {
        int64_t handle = 0;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, handle);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    if (!_sampleRate.validate()) {
        int64_t handle = 0;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, handle);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->playSineAsync(_group, _sampleRate, _frequency, _pauseTime, _pulseTime, _repeatCount, _callback, _info);
}
/**
 * description: This function is used to stop a playing beep with its handle. this API can stop
 *   the any playback created by play(), playFile(), playSine() (at)return 0 on
 *   success, -1 on error.
 */
template <typename ... _AttributeExtensions>
void wavePlayerProxy<_AttributeExtensions...>::stop(const int64_t &_handle, CommonAPI::CallStatus &_internalCallStatus, int16_t &_result, const CommonAPI::CallInfo *_info) {
    delegate_->stop(_handle, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> wavePlayerProxy<_AttributeExtensions...>::stopAsync(const int64_t &_handle, StopAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->stopAsync(_handle, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &wavePlayerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool wavePlayerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool wavePlayerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& wavePlayerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& wavePlayerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace waveplayer
} // namespace audio
} // namespace harman
} // namespace com
} // namespace v0



// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_AUDIO_WAVEPLAYER_wave_Player_PROXY_HPP_
