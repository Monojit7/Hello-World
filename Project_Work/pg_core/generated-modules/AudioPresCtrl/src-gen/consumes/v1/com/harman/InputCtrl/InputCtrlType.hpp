/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Oct 04 15:43:40 EDT 2016
*/
#ifndef V1_COM_HARMAN_INPUTCTRL_Input_Ctrl_Type_HPP_
#define V1_COM_HARMAN_INPUTCTRL_Input_Ctrl_Type_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace InputCtrl {

struct InputCtrlType {
    
    struct eButtonState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            BUTTON_STATE_INVALIED = 0,
            BUTTON_STATE_PRESS = 1,
            BUTTON_STATE_SHORT_PRESS = 2,
            BUTTON_STATE_EXTENDED_PRESS = 3,
            BUTTON_STATE_LONG_PRESS = 4,
            BUTTON_STATE_STUCK = 5,
            BUTTON_STATE_RELEASE = 6
        };
        
        eButtonState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::BUTTON_STATE_INVALIED)) {}
        eButtonState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::BUTTON_STATE_INVALIED):
                case static_cast<int32_t>(Literal::BUTTON_STATE_PRESS):
                case static_cast<int32_t>(Literal::BUTTON_STATE_SHORT_PRESS):
                case static_cast<int32_t>(Literal::BUTTON_STATE_EXTENDED_PRESS):
                case static_cast<int32_t>(Literal::BUTTON_STATE_LONG_PRESS):
                case static_cast<int32_t>(Literal::BUTTON_STATE_STUCK):
                case static_cast<int32_t>(Literal::BUTTON_STATE_RELEASE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eButtonState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eButtonState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eButtonState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eButtonState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eButtonState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eButtonState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eButtonSource : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            BUTTON_SOURCE_INVALID = 0,
            BUTTON_SOURCE_SWC = 1,
            BUTTON_SURCE_ICP = 2
        };
        
        eButtonSource() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::BUTTON_SOURCE_INVALID)) {}
        eButtonSource(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::BUTTON_SOURCE_INVALID):
                case static_cast<int32_t>(Literal::BUTTON_SOURCE_SWC):
                case static_cast<int32_t>(Literal::BUTTON_SURCE_ICP):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eButtonSource &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eButtonSource &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eButtonSource &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eButtonSource &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eButtonSource &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eButtonSource &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eRotationDirection : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ROTARION_INVALID = 0,
            ROTATION_CLOCK_WISE = 1,
            ROTATION_COUNTER_CLOCK_WISE = 2
        };
        
        eRotationDirection() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ROTARION_INVALID)) {}
        eRotationDirection(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ROTARION_INVALID):
                case static_cast<int32_t>(Literal::ROTATION_CLOCK_WISE):
                case static_cast<int32_t>(Literal::ROTATION_COUNTER_CLOCK_WISE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eRotationDirection &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eRotationDirection &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eRotationDirection &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eRotationDirection &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eRotationDirection &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eRotationDirection &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eKeys : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            KEY_ON_OFF = 0,
            KEY_SEEK_RIGHT = 1,
            KEY_SEEK_LEFT = 2,
            KEY_ACCEPT_CALL = 3,
            KEY_REJECT_CALL = 4
        };
        
        eKeys() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::KEY_ON_OFF)) {}
        eKeys(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::KEY_ON_OFF):
                case static_cast<int32_t>(Literal::KEY_SEEK_RIGHT):
                case static_cast<int32_t>(Literal::KEY_SEEK_LEFT):
                case static_cast<int32_t>(Literal::KEY_ACCEPT_CALL):
                case static_cast<int32_t>(Literal::KEY_REJECT_CALL):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eKeys &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eKeys &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eKeys &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eKeys &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eKeys &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eKeys &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct ButtonInfoStruct : CommonAPI::Struct<eButtonSource, eButtonState> {
    	
    	ButtonInfoStruct() {
    	}
    	ButtonInfoStruct(const eButtonSource &_buttonSource, const eButtonState &_buttonState)
    	{
    		std::get<0>(values_) = _buttonSource;
    		std::get<1>(values_) = _buttonState;
    	}
    	inline const eButtonSource &getButtonSource() const { return std::get<0>(values_); }
    	inline void setButtonSource(const eButtonSource &_value) { std::get<0>(values_) = _value; }
    	inline const eButtonState &getButtonState() const { return std::get<1>(values_); }
    	inline void setButtonState(const eButtonState &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const ButtonInfoStruct& _other) const {
                return (getButtonSource() == _other.getButtonSource() && getButtonState() == _other.getButtonState());
        }
    	inline bool operator!=(const ButtonInfoStruct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct RotaryInfoStruct : CommonAPI::Struct<eButtonSource, eRotationDirection, int16_t> {
    	
    	RotaryInfoStruct() {
    	}
    	RotaryInfoStruct(const eButtonSource &_buttonSource, const eRotationDirection &_rotationDirection, const int16_t &_count)
    	{
    		std::get<0>(values_) = _buttonSource;
    		std::get<1>(values_) = _rotationDirection;
    		std::get<2>(values_) = _count;
    	}
    	inline const eButtonSource &getButtonSource() const { return std::get<0>(values_); }
    	inline void setButtonSource(const eButtonSource &_value) { std::get<0>(values_) = _value; }
    	inline const eRotationDirection &getRotationDirection() const { return std::get<1>(values_); }
    	inline void setRotationDirection(const eRotationDirection &_value) { std::get<1>(values_) = _value; }
    	inline const int16_t &getCount() const { return std::get<2>(values_); }
    	inline void setCount(const int16_t &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const RotaryInfoStruct& _other) const {
                return (getButtonSource() == _other.getButtonSource() && getRotationDirection() == _other.getRotationDirection() && getCount() == _other.getCount());
        }
    	inline bool operator!=(const RotaryInfoStruct &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.InputCtrl.InputCtrlType";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct InputCtrlType

} // namespace InputCtrl
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for eButtonState
    template<>
    struct hash<::v1::com::harman::InputCtrl::InputCtrlType::eButtonState> {
        inline size_t operator()(const ::v1::com::harman::InputCtrl::InputCtrlType::eButtonState& eButtonState) const {
            return static_cast<int32_t>(eButtonState);
        }
    };
    //Hash for eButtonSource
    template<>
    struct hash<::v1::com::harman::InputCtrl::InputCtrlType::eButtonSource> {
        inline size_t operator()(const ::v1::com::harman::InputCtrl::InputCtrlType::eButtonSource& eButtonSource) const {
            return static_cast<int32_t>(eButtonSource);
        }
    };
    //Hash for eRotationDirection
    template<>
    struct hash<::v1::com::harman::InputCtrl::InputCtrlType::eRotationDirection> {
        inline size_t operator()(const ::v1::com::harman::InputCtrl::InputCtrlType::eRotationDirection& eRotationDirection) const {
            return static_cast<int32_t>(eRotationDirection);
        }
    };
    //Hash for eKeys
    template<>
    struct hash<::v1::com::harman::InputCtrl::InputCtrlType::eKeys> {
        inline size_t operator()(const ::v1::com::harman::InputCtrl::InputCtrlType::eKeys& eKeys) const {
            return static_cast<int32_t>(eKeys);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_INPUTCTRL_Input_Ctrl_Type_HPP_
