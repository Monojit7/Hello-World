/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Oct 04 15:43:40 EDT 2016
*/
#ifndef V1_COM_HARMAN_INPUTCTRL_Input_Ctrl_PROXY_HPP_
#define V1_COM_HARMAN_INPUTCTRL_Input_Ctrl_PROXY_HPP_

#include <v1/com/harman/InputCtrl/InputCtrlProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace InputCtrl {

template <typename ... _AttributeExtensions>
class InputCtrlProxy
    : virtual public InputCtrl, 
      virtual public InputCtrlProxyBase,
      virtual public _AttributeExtensions... {
public:
    InputCtrlProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~InputCtrlProxy();

    typedef InputCtrl InterfaceType;



    /**
     * Returns the wrapper class that provides access to the broadcast KeyMute.
     */
    virtual KeyMuteEvent& getKeyMuteEvent() {
        return delegate_->getKeyMuteEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast KeyPushToTalk.
     */
    virtual KeyPushToTalkEvent& getKeyPushToTalkEvent() {
        return delegate_->getKeyPushToTalkEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast KeyAcceptCall.
     */
    virtual KeyAcceptCallEvent& getKeyAcceptCallEvent() {
        return delegate_->getKeyAcceptCallEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast KeyRejectCall.
     */
    virtual KeyRejectCallEvent& getKeyRejectCallEvent() {
        return delegate_->getKeyRejectCallEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast KeySettings.
     */
    virtual KeySettingsEvent& getKeySettingsEvent() {
        return delegate_->getKeySettingsEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast KeySeekLeft.
     */
    virtual KeySeekLeftEvent& getKeySeekLeftEvent() {
        return delegate_->getKeySeekLeftEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast KeySeekRight.
     */
    virtual KeySeekRightEvent& getKeySeekRightEvent() {
        return delegate_->getKeySeekRightEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast KeyPlayPause.
     */
    virtual KeyPlayPauseEvent& getKeyPlayPauseEvent() {
        return delegate_->getKeyPlayPauseEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast KeyDisplay.
     */
    virtual KeyDisplayEvent& getKeyDisplayEvent() {
        return delegate_->getKeyDisplayEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast KeySound.
     */
    virtual KeySoundEvent& getKeySoundEvent() {
        return delegate_->getKeySoundEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast KeyOnOff.
     */
    virtual KeyOnOffEvent& getKeyOnOffEvent() {
        return delegate_->getKeyOnOffEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast KeyTuneRotary.
     */
    virtual KeyTuneRotaryEvent& getKeyTuneRotaryEvent() {
        return delegate_->getKeyTuneRotaryEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast KeyTuneUp.
     */
    virtual KeyTuneUpEvent& getKeyTuneUpEvent() {
        return delegate_->getKeyTuneUpEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast KeyTuneDown.
     */
    virtual KeyTuneDownEvent& getKeyTuneDownEvent() {
        return delegate_->getKeyTuneDownEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast KeyVolumeRotary.
     */
    virtual KeyVolumeRotaryEvent& getKeyVolumeRotaryEvent() {
        return delegate_->getKeyVolumeRotaryEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast KeyVolumeUp.
     */
    virtual KeyVolumeUpEvent& getKeyVolumeUpEvent() {
        return delegate_->getKeyVolumeUpEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast KeyVolumeDown.
     */
    virtual KeyVolumeDownEvent& getKeyVolumeDownEvent() {
        return delegate_->getKeyVolumeDownEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast KeyCombination.
     */
    virtual KeyCombinationEvent& getKeyCombinationEvent() {
        return delegate_->getKeyCombinationEvent();
    }



    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<InputCtrlProxyBase> delegate_;
};

typedef InputCtrlProxy<> InputCtrlProxyDefault;


//
// InputCtrlProxy Implementation
//
template <typename ... _AttributeExtensions>
InputCtrlProxy<_AttributeExtensions...>::InputCtrlProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<InputCtrlProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<InputCtrlProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
InputCtrlProxy<_AttributeExtensions...>::~InputCtrlProxy() {
}


template <typename ... _AttributeExtensions>
const CommonAPI::Address &InputCtrlProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool InputCtrlProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool InputCtrlProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& InputCtrlProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& InputCtrlProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace InputCtrl
} // namespace harman
} // namespace com
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_INPUTCTRL_Input_Ctrl_PROXY_HPP_
