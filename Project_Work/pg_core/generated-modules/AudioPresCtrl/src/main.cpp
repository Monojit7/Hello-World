/**
 * generated by Voice CodeGen Version: R1_v1.3.0
 * generated on: Tue Sep 06 11:52:31 IST 2016
 */

#include <thread>

#include <CommonAPI/CommonAPI.hpp>
#include "provides/v1/com/harman/audio/audioPresCtrl/audioPresCtrlDiagStubImpl.hpp"
#include "provides/v1/com/harman/audio/audioPresCtrl/audioPresCtrlControlsStubImpl.hpp"
#include "provides/v1/com/harman/audio/audioPresCtrl/audioPresCtrlSettingsStubImpl.hpp"
#include "v3/org/genivi/am/commandinterface/CommandControl.hpp"
#include "v3/org/genivi/am/commandinterface/CommandControlProxy.hpp"
#include "v2/org/genivi/NodeStateManager/Consumer.hpp"
#include "v2/org/genivi/NodeStateManager/ConsumerProxy.hpp"
#include "v0/com/harman/audio/waveplayer/wavePlayer.hpp"
#include "v0/com/harman/audio/waveplayer/wavePlayerProxy.hpp"


int main(int argc, char **argv) {
	CommonAPI::Runtime::setProperty("LogContext", "AudioPresCtrl");
	CommonAPI::Runtime::setProperty("LibraryBase", "AudioPresCtrl");

	/*
	 * create the runtime
	 */
	std::shared_ptr<CommonAPI::Runtime> runtime = CommonAPI::Runtime::get();
	if(!runtime)
	{
		// Error: could not load runtime
		return 1;
	}
	
	std::string domain = "local";
	std::string connection = "AudioPresCtrl";

	{
		std::string instance = "AudioPresCtrl.diagInst";
		std::shared_ptr<v1::com::harman::audio::audioPresCtrl::audioPresCtrlDiagStubImpl> svc = std::make_shared<v1::com::harman::audio::audioPresCtrl::audioPresCtrlDiagStubImpl>();
		runtime->registerService(domain, instance, svc, connection);
	}
	{
		std::string instance = "AudioPresCtrl.controlsInst";
		std::shared_ptr<v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStubImpl> svc = std::make_shared<v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStubImpl>();
		runtime->registerService(domain, instance, svc, connection);
	}
	{
		std::string instance = "AudioPresCtrl.settingsInst";
		std::shared_ptr<v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStubImpl> svc = std::make_shared<v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStubImpl>();
		runtime->registerService(domain, instance, svc, connection);
	}


	    // create the CommandControl proxy
	    {
	    	std::string connection = "commandProxy";
	    	std::string instance = "audioManager.commandInst";
	    	std::shared_ptr<v3::org::genivi::am::commandinterface::CommandControlProxy<>> commandProxy = runtime->buildProxy<v3::org::genivi::am::commandinterface::CommandControlProxy>(domain, instance, connection);
	    	if(!commandProxy)
	    	{
	    		// Error: could not create CommandControlProxy
	    	}
	    }
	    // create the wavePlayer proxy
	    {
	    	std::string connection = "waveplayerProxy";
	    	std::string instance = "providerComp.wavePlayerProvider";
	    	std::shared_ptr<v0::com::harman::audio::waveplayer::wavePlayerProxy<>> waveplayerProxy = runtime->buildProxy<v0::com::harman::audio::waveplayer::wavePlayerProxy>(domain, instance, connection);
	    	if(!waveplayerProxy)
	    	{
	    		// Error: could not create wavePlayerProxy
	    	}
	    }
	    // create the Consumer proxy
	    {
	    	std::string connection = "nsm_consumer";
	    	std::string instance = "NodeStateManager.inst0";
	    	std::shared_ptr<v2::org::genivi::NodeStateManager::ConsumerProxy<>> nsm_consumer = runtime->buildProxy<v2::org::genivi::NodeStateManager::ConsumerProxy>(domain, instance, connection);
	    	if(!nsm_consumer)
	    	{
	    		// Error: could not create ConsumerProxy
	    	}
	    }
	
    
    while (true) {
        std::cout << "Waiting for calls... (Abort with CTRL+C)" << std::endl;
        std::this_thread::sleep_for(std::chrono::seconds(60));
    }
    return 0;
}
