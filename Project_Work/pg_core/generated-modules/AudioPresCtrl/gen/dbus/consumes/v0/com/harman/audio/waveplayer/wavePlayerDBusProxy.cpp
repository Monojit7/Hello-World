/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Sun Oct 16 06:59:52 IST 2016
*/
#include <v0/com/harman/audio/waveplayer/wavePlayerDBusProxy.hpp>

namespace v0 {
namespace com {
namespace harman {
namespace audio {
namespace waveplayer {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createwavePlayerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<wavePlayerDBusProxy>(_address, _connection);
}

INITIALIZER(registerwavePlayerDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		wavePlayer::getInterface(),
		&createwavePlayerDBusProxy);
}

wavePlayerDBusProxy::wavePlayerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		playStateUpdate_(*this, "playStateUpdate", "xi", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
{
}


wavePlayerDBusProxy::PlayStateUpdateEvent& wavePlayerDBusProxy::getPlayStateUpdateEvent() {
    return playStateUpdate_;
}
    
    /**
     * description: This function is used to play, stop or abort a predefined beep type. (at)return
     *   handle number on success, -1 on error.
     */
    void wavePlayerDBusProxy::play(const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepType_e &_type, CommonAPI::CallStatus &_internalCallStatus, int64_t &_handle, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::audio::waveplayer::wavePlayerType::beepType_e, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_handle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::audio::waveplayer::wavePlayerType::beepType_e, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int64_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "play",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_type,
_internalCallStatus,
deploy_handle);
_handle = deploy_handle.getValue();
}
    std::future<CommonAPI::CallStatus> wavePlayerDBusProxy::playAsync(const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepType_e &_type, PlayAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::audio::waveplayer::wavePlayerType::beepType_e, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_handle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::audio::waveplayer::wavePlayerType::beepType_e, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int64_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "play",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_type,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> _handle) {
        	if (_callback)
        		_callback(_internalCallStatus, _handle.getValue());
        },
        std::make_tuple(deploy_handle));
    }
    /**
     * description: This function is used to play, stop or abort a special wave file. (at)return
     *   handle number on success, -1 on error.
     */
    void wavePlayerDBusProxy::playFile(const std::string &_filePath, const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e &_group, const int32_t &_repeatCount, CommonAPI::CallStatus &_internalCallStatus, int64_t &_handle, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_filePath(_filePath, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e, CommonAPI::EmptyDeployment> deploy_group(_group, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_repeatCount(_repeatCount, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_handle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int64_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "playFile",
        "sii",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_filePath, deploy_group, deploy_repeatCount,
_internalCallStatus,
deploy_handle);
_handle = deploy_handle.getValue();
}
    std::future<CommonAPI::CallStatus> wavePlayerDBusProxy::playFileAsync(const std::string &_filePath, const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e &_group, const int32_t &_repeatCount, PlayFileAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_filePath(_filePath, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e, CommonAPI::EmptyDeployment> deploy_group(_group, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_repeatCount(_repeatCount, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_handle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int64_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "playFile",
        "sii",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_filePath, deploy_group, deploy_repeatCount,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> _handle) {
        	if (_callback)
        		_callback(_internalCallStatus, _handle.getValue());
        },
        std::make_tuple(deploy_handle));
    }
    /**
     * description: This function is used to play a sine signal with sine generator with special
     *   parameters. (at)return handle number on success, -1 on error.
     */
    void wavePlayerDBusProxy::playSine(const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e &_group, const ::v0::com::harman::audio::waveplayer::wavePlayerType::sampleRateType_e &_sampleRate, const int16_t &_frequency, const int32_t &_pauseTime, const int32_t &_pulseTime, const int32_t &_repeatCount, CommonAPI::CallStatus &_internalCallStatus, int64_t &_handle, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e, CommonAPI::EmptyDeployment> deploy_group(_group, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::audio::waveplayer::wavePlayerType::sampleRateType_e, CommonAPI::EmptyDeployment> deploy_sampleRate(_sampleRate, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_frequency(_frequency, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_pauseTime(_pauseTime, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_pulseTime(_pulseTime, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_repeatCount(_repeatCount, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_handle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v0::com::harman::audio::waveplayer::wavePlayerType::sampleRateType_e, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int64_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "playSine",
        "iiniii",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_group, deploy_sampleRate, deploy_frequency, deploy_pauseTime, deploy_pulseTime, deploy_repeatCount,
_internalCallStatus,
deploy_handle);
_handle = deploy_handle.getValue();
}
    std::future<CommonAPI::CallStatus> wavePlayerDBusProxy::playSineAsync(const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e &_group, const ::v0::com::harman::audio::waveplayer::wavePlayerType::sampleRateType_e &_sampleRate, const int16_t &_frequency, const int32_t &_pauseTime, const int32_t &_pulseTime, const int32_t &_repeatCount, PlaySineAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e, CommonAPI::EmptyDeployment> deploy_group(_group, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::audio::waveplayer::wavePlayerType::sampleRateType_e, CommonAPI::EmptyDeployment> deploy_sampleRate(_sampleRate, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_frequency(_frequency, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_pauseTime(_pauseTime, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_pulseTime(_pulseTime, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_repeatCount(_repeatCount, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_handle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v0::com::harman::audio::waveplayer::wavePlayerType::sampleRateType_e, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int64_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "playSine",
        "iiniii",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_group, deploy_sampleRate, deploy_frequency, deploy_pauseTime, deploy_pulseTime, deploy_repeatCount,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> _handle) {
        	if (_callback)
        		_callback(_internalCallStatus, _handle.getValue());
        },
        std::make_tuple(deploy_handle));
    }
    /**
     * description: This function is used to stop a playing beep with its handle. this API can stop
     *   the any playback created by play(), playFile(), playSine() (at)return 0 on
     *   success, -1 on error.
     */
    void wavePlayerDBusProxy::stop(const int64_t &_handle, CommonAPI::CallStatus &_internalCallStatus, int16_t &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int16_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "stop",
        "x",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_handle,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> wavePlayerDBusProxy::stopAsync(const int64_t &_handle, StopAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int16_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "stop",
        "x",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_handle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }


void wavePlayerDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 1;
      }

      } // namespace waveplayer
      } // namespace audio
      } // namespace harman
      } // namespace com
      } // namespace v0
