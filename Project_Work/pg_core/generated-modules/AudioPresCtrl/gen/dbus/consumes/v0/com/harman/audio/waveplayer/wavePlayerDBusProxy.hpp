/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Sun Oct 16 06:59:52 IST 2016
*/
#ifndef V0_COM_HARMAN_AUDIO_WAVEPLAYER_wave_Player_DBUS_PROXY_HPP_
#define V0_COM_HARMAN_AUDIO_WAVEPLAYER_wave_Player_DBUS_PROXY_HPP_

#include <v0/com/harman/audio/waveplayer/wavePlayerProxyBase.hpp>
#include "v0/com/harman/audio/waveplayer/wavePlayerDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v0 {
namespace com {
namespace harman {
namespace audio {
namespace waveplayer {

class wavePlayerDBusProxy
    : virtual public wavePlayerProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    wavePlayerDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~wavePlayerDBusProxy() { }


    virtual PlayStateUpdateEvent& getPlayStateUpdateEvent();

    /**
     * description: This function is used to play, stop or abort a predefined beep type. (at)return
     *   handle number on success, -1 on error.
     */
    virtual void play(const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepType_e &_type, CommonAPI::CallStatus &_internalCallStatus, int64_t &_handle, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> playAsync(const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepType_e &_type, PlayAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This function is used to play, stop or abort a special wave file. (at)return
     *   handle number on success, -1 on error.
     */
    virtual void playFile(const std::string &_filePath, const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e &_group, const int32_t &_repeatCount, CommonAPI::CallStatus &_internalCallStatus, int64_t &_handle, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> playFileAsync(const std::string &_filePath, const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e &_group, const int32_t &_repeatCount, PlayFileAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This function is used to play a sine signal with sine generator with special
     *   parameters. (at)return handle number on success, -1 on error.
     */
    virtual void playSine(const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e &_group, const ::v0::com::harman::audio::waveplayer::wavePlayerType::sampleRateType_e &_sampleRate, const int16_t &_frequency, const int32_t &_pauseTime, const int32_t &_pulseTime, const int32_t &_repeatCount, CommonAPI::CallStatus &_internalCallStatus, int64_t &_handle, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> playSineAsync(const ::v0::com::harman::audio::waveplayer::wavePlayerType::beepGroup_e &_group, const ::v0::com::harman::audio::waveplayer::wavePlayerType::sampleRateType_e &_sampleRate, const int16_t &_frequency, const int32_t &_pauseTime, const int32_t &_pulseTime, const int32_t &_repeatCount, PlaySineAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This function is used to stop a playing beep with its handle. this API can stop
     *   the any playback created by play(), playFile(), playSine() (at)return 0 on
     *   success, -1 on error.
     */
    virtual void stop(const int64_t &_handle, CommonAPI::CallStatus &_internalCallStatus, int16_t &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> stopAsync(const int64_t &_handle, StopAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<PlayStateUpdateEvent, CommonAPI::Deployable<int64_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v0::com::harman::audio::waveplayer::wavePlayerType::wavePlayerState_e, CommonAPI::EmptyDeployment>> playStateUpdate_;

};

} // namespace waveplayer
} // namespace audio
} // namespace harman
} // namespace com
} // namespace v0

#endif // V0_COM_HARMAN_AUDIO_WAVEPLAYER_wave_Player_DBUS_PROXY_HPP_

