/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Oct 04 15:43:40 EDT 2016
*/
#include <v1/com/harman/InputCtrl/InputCtrlDBusProxy.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace InputCtrl {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createInputCtrlDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<InputCtrlDBusProxy>(_address, _connection);
}

INITIALIZER(registerInputCtrlDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		InputCtrl::getInterface(),
		&createInputCtrlDBusProxy);
}

InputCtrlDBusProxy::InputCtrlDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		keyMute_(*this, "KeyMute", "(ii)", std::make_tuple(static_cast<::v1::com::harman::InputCtrl::InputCtrlType_::ButtonInfoStructDeployment_t*>(nullptr))),
		keyPushToTalk_(*this, "KeyPushToTalk", "(ii)", std::make_tuple(static_cast<::v1::com::harman::InputCtrl::InputCtrlType_::ButtonInfoStructDeployment_t*>(nullptr))),
		keyAcceptCall_(*this, "KeyAcceptCall", "(ii)", std::make_tuple(static_cast<::v1::com::harman::InputCtrl::InputCtrlType_::ButtonInfoStructDeployment_t*>(nullptr))),
		keyRejectCall_(*this, "KeyRejectCall", "(ii)", std::make_tuple(static_cast<::v1::com::harman::InputCtrl::InputCtrlType_::ButtonInfoStructDeployment_t*>(nullptr))),
		keySettings_(*this, "KeySettings", "(ii)", std::make_tuple(static_cast<::v1::com::harman::InputCtrl::InputCtrlType_::ButtonInfoStructDeployment_t*>(nullptr))),
		keySeekLeft_(*this, "KeySeekLeft", "(ii)", std::make_tuple(static_cast<::v1::com::harman::InputCtrl::InputCtrlType_::ButtonInfoStructDeployment_t*>(nullptr))),
		keySeekRight_(*this, "KeySeekRight", "(ii)", std::make_tuple(static_cast<::v1::com::harman::InputCtrl::InputCtrlType_::ButtonInfoStructDeployment_t*>(nullptr))),
		keyPlayPause_(*this, "KeyPlayPause", "(ii)", std::make_tuple(static_cast<::v1::com::harman::InputCtrl::InputCtrlType_::ButtonInfoStructDeployment_t*>(nullptr))),
		keyDisplay_(*this, "KeyDisplay", "(ii)", std::make_tuple(static_cast<::v1::com::harman::InputCtrl::InputCtrlType_::ButtonInfoStructDeployment_t*>(nullptr))),
		keySound_(*this, "KeySound", "(ii)", std::make_tuple(static_cast<::v1::com::harman::InputCtrl::InputCtrlType_::ButtonInfoStructDeployment_t*>(nullptr))),
		keyOnOff_(*this, "KeyOnOff", "(ii)", std::make_tuple(static_cast<::v1::com::harman::InputCtrl::InputCtrlType_::ButtonInfoStructDeployment_t*>(nullptr))),
		keyTuneRotary_(*this, "KeyTuneRotary", "(iin)", std::make_tuple(static_cast<::v1::com::harman::InputCtrl::InputCtrlType_::RotaryInfoStructDeployment_t*>(nullptr))),
		keyTuneUp_(*this, "KeyTuneUp", "(ii)n", std::make_tuple(static_cast<::v1::com::harman::InputCtrl::InputCtrlType_::ButtonInfoStructDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		keyTuneDown_(*this, "KeyTuneDown", "(ii)n", std::make_tuple(static_cast<::v1::com::harman::InputCtrl::InputCtrlType_::ButtonInfoStructDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		keyVolumeRotary_(*this, "KeyVolumeRotary", "(iin)", std::make_tuple(static_cast<::v1::com::harman::InputCtrl::InputCtrlType_::RotaryInfoStructDeployment_t*>(nullptr))),
		keyVolumeUp_(*this, "KeyVolumeUp", "(iin)", std::make_tuple(static_cast<::v1::com::harman::InputCtrl::InputCtrlType_::RotaryInfoStructDeployment_t*>(nullptr))),
		keyVolumeDown_(*this, "KeyVolumeDown", "(iin)", std::make_tuple(static_cast<::v1::com::harman::InputCtrl::InputCtrlType_::RotaryInfoStructDeployment_t*>(nullptr))),
		keyCombination_(*this, "KeyCombination", "ai(ii)", std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr), static_cast<::v1::com::harman::InputCtrl::InputCtrlType_::ButtonInfoStructDeployment_t*>(nullptr)))
{
}


InputCtrlDBusProxy::KeyMuteEvent& InputCtrlDBusProxy::getKeyMuteEvent() {
    return keyMute_;
}
InputCtrlDBusProxy::KeyPushToTalkEvent& InputCtrlDBusProxy::getKeyPushToTalkEvent() {
    return keyPushToTalk_;
}
InputCtrlDBusProxy::KeyAcceptCallEvent& InputCtrlDBusProxy::getKeyAcceptCallEvent() {
    return keyAcceptCall_;
}
InputCtrlDBusProxy::KeyRejectCallEvent& InputCtrlDBusProxy::getKeyRejectCallEvent() {
    return keyRejectCall_;
}
InputCtrlDBusProxy::KeySettingsEvent& InputCtrlDBusProxy::getKeySettingsEvent() {
    return keySettings_;
}
InputCtrlDBusProxy::KeySeekLeftEvent& InputCtrlDBusProxy::getKeySeekLeftEvent() {
    return keySeekLeft_;
}
InputCtrlDBusProxy::KeySeekRightEvent& InputCtrlDBusProxy::getKeySeekRightEvent() {
    return keySeekRight_;
}
InputCtrlDBusProxy::KeyPlayPauseEvent& InputCtrlDBusProxy::getKeyPlayPauseEvent() {
    return keyPlayPause_;
}
InputCtrlDBusProxy::KeyDisplayEvent& InputCtrlDBusProxy::getKeyDisplayEvent() {
    return keyDisplay_;
}
InputCtrlDBusProxy::KeySoundEvent& InputCtrlDBusProxy::getKeySoundEvent() {
    return keySound_;
}
InputCtrlDBusProxy::KeyOnOffEvent& InputCtrlDBusProxy::getKeyOnOffEvent() {
    return keyOnOff_;
}
InputCtrlDBusProxy::KeyTuneRotaryEvent& InputCtrlDBusProxy::getKeyTuneRotaryEvent() {
    return keyTuneRotary_;
}
InputCtrlDBusProxy::KeyTuneUpEvent& InputCtrlDBusProxy::getKeyTuneUpEvent() {
    return keyTuneUp_;
}
InputCtrlDBusProxy::KeyTuneDownEvent& InputCtrlDBusProxy::getKeyTuneDownEvent() {
    return keyTuneDown_;
}
InputCtrlDBusProxy::KeyVolumeRotaryEvent& InputCtrlDBusProxy::getKeyVolumeRotaryEvent() {
    return keyVolumeRotary_;
}
InputCtrlDBusProxy::KeyVolumeUpEvent& InputCtrlDBusProxy::getKeyVolumeUpEvent() {
    return keyVolumeUp_;
}
InputCtrlDBusProxy::KeyVolumeDownEvent& InputCtrlDBusProxy::getKeyVolumeDownEvent() {
    return keyVolumeDown_;
}
InputCtrlDBusProxy::KeyCombinationEvent& InputCtrlDBusProxy::getKeyCombinationEvent() {
    return keyCombination_;
}
    


void InputCtrlDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace InputCtrl
      } // namespace harman
      } // namespace com
      } // namespace v1
