/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Sun Oct 16 06:59:52 IST 2016
*/
#include <v1/com/harman/audio/audioPresCtrl/audioPresCtrlControls.hpp>
#include <v1/com/harman/audio/audioPresCtrl/audioPresCtrlControlsDBusStubAdapter.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace audio {
namespace audioPresCtrl {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createaudioPresCtrlControlsDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<audioPresCtrlControlsDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registeraudioPresCtrlControlsDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	audioPresCtrlControls::getInterface(), &createaudioPresCtrlControlsDBusStubAdapter);
}

audioPresCtrlControlsDBusStubAdapterInternal::~audioPresCtrlControlsDBusStubAdapterInternal() {
    deactivateManagedInstances();
    audioPresCtrlControlsDBusStubAdapterHelper::deinit();
}

void audioPresCtrlControlsDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* audioPresCtrlControlsDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"getActiveAudioSourceAttribute\">\n"
            "<arg name=\"value\" type=\"q\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onActiveAudioSourceAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"q\" />\n"
        "</signal>\n"
        "<method name=\"getActiveEntSrcAttribute\">\n"
            "<arg name=\"value\" type=\"i\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onActiveEntSrcAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
        "</signal>\n"
        "<method name=\"getEntSourceListAttribute\">\n"
            "<arg name=\"value\" type=\"a{ii}\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onEntSourceListAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"a{ii}\" />\n"
        "</signal>\n"
        /**
         * description: This method is used to set audio entertainment sources 	(at)attribute update
         *   activeAudioSource and activeEntSrc
         */
        "<method name=\"SetEntertainmentSrc\">\n"
            "<arg name=\"_sourceId\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method is used to switch Audio Context to the source in the given group
         *   	Group needs to be first mentioned in the audiopres.cfg 	Project may choose
         *   any naming strategy as long as it doesnt conflict with another json key in the
         *   cfg 	(at)attribute update activeAudioSource and activeEntSrc if a source
         *   switch has happened 	(at)return eAudioPresErrors
         */
        "<method name=\"SetSourceGroup\">\n"
            "<arg name=\"_sourceGroupName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method is used to toggle source in the source group 	SetSourceGroup needs
         *   to be invoked in order to select an active group 	(at)attribute update
         *   activeAudioSource and activeEntSrc if a source switch has happened 	(at)return
         *   eAudioPresErrors
         */
        "<method name=\"ToggleInSourceGroup\">\n"
            "<arg name=\"_direction\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method is used to toggle source in the order specified in
         *   "toggleNextPreviousStrategy" in audiopes.cfg 	If no cfg item
         *   toggleNextPreviousStrategy with value is defined , method return an error
         *   	toggleNextPreviousStrategy should be used to capture the toggle sequence of
         *   entertainment sources in a project 	(at)attribute update activeAudioSource and
         *   activeEntSrc if a source switch has happened	 	(at)return eAudioPresErrors
         */
        "<method name=\"ToggleSource\">\n"
            "<arg name=\"_direction\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: to activate interrupt source with given SourceID 	Only touchbeep and keytouch
         *   srcs will be supported through requestinformationsource interface 	as these
         *   are the only sources that will be requested by HMIs 	Other sources will be
         *   invoked for switch by respective pres ctrl (ex btpres for hfp , projectionpres
         *   for alt audio sources etc) 	Other sources are kept just so that HMI can track
         *   the active source through attribute activeAudioSource     	(at)return
         *   eAudioPresErrors
         */
        "<method name=\"RequestInformationSource\">\n"
            "<arg name=\"_sourceID\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: to deactivate interrupt source with given SourceID 	(at)return eAudioPresErrors
         */
        "<method name=\"ReleaseInformationSource\">\n"
            "<arg name=\"_sourceID\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub,
        CommonAPI::Version
        > audioPresCtrlControlsDBusStubAdapterInternal::getaudioPresCtrlControlsInterfaceVersionStubDispatcher(&audioPresCtrlControlsStub::getInterfaceVersion, "uu");

/**
 * description: Attribute holding current ative audio source 		This will be updated on every
 *   audiosource change
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub,
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId
        > audioPresCtrlControlsDBusStubAdapterInternal::getActiveAudioSourceAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub::getActiveAudioSourceAttribute
            , "q"
            );
/**
 * description: Attribute holding current ative entertainment source 		This will be updated on
 *   every audiosource change
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub,
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eEntertainmentSrcs
        > audioPresCtrlControlsDBusStubAdapterInternal::getActiveEntSrcAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub::getActiveEntSrcAttribute
            , "i"
            );
/**
 * description: Attribute holding list of entertainment sources with available status 		This
 *   will be update on a status change(available/unavailable/unknown) of any
 *   entertainment source
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub,
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::EntSourceList,
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes_::EntSourceListDeployment_t
        > audioPresCtrlControlsDBusStubAdapterInternal::getEntSourceListAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub::getEntSourceListAttribute
            , "a{ii}"
            );



/**
 * description: This method is used to set audio entertainment sources 	(at)attribute update
 *   activeAudioSource and activeEntSrc
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eEntertainmentSrcs>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > audioPresCtrlControlsDBusStubAdapterInternal::setEntertainmentSrcStubDispatcher(
    &audioPresCtrlControlsStub::SetEntertainmentSrc, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment *>(nullptr)));

/**
 * description: This method is used to switch Audio Context to the source in the given group
 *   	Group needs to be first mentioned in the audiopres.cfg 	Project may choose
 *   any naming strategy as long as it doesnt conflict with another json key in the
 *   cfg 	(at)attribute update activeAudioSource and activeEntSrc if a source
 *   switch has happened 	(at)return eAudioPresErrors
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > audioPresCtrlControlsDBusStubAdapterInternal::setSourceGroupStubDispatcher(
    &audioPresCtrlControlsStub::SetSourceGroup, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment *>(nullptr)));

/**
 * description: This method is used to toggle source in the source group 	SetSourceGroup needs
 *   to be invoked in order to select an active group 	(at)attribute update
 *   activeAudioSource and activeEntSrc if a source switch has happened 	(at)return
 *   eAudioPresErrors
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eToggleDirection>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > audioPresCtrlControlsDBusStubAdapterInternal::toggleInSourceGroupStubDispatcher(
    &audioPresCtrlControlsStub::ToggleInSourceGroup, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment *>(nullptr)));

/**
 * description: This method is used to toggle source in the order specified in
 *   "toggleNextPreviousStrategy" in audiopes.cfg 	If no cfg item
 *   toggleNextPreviousStrategy with value is defined , method return an error
 *   	toggleNextPreviousStrategy should be used to capture the toggle sequence of
 *   entertainment sources in a project 	(at)attribute update activeAudioSource and
 *   activeEntSrc if a source switch has happened	 	(at)return eAudioPresErrors
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eToggleDirection>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > audioPresCtrlControlsDBusStubAdapterInternal::toggleSourceStubDispatcher(
    &audioPresCtrlControlsStub::ToggleSource, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment *>(nullptr)));

/**
 * description: to activate interrupt source with given SourceID 	Only touchbeep and keytouch
 *   srcs will be supported through requestinformationsource interface 	as these
 *   are the only sources that will be requested by HMIs 	Other sources will be
 *   invoked for switch by respective pres ctrl (ex btpres for hfp , projectionpres
 *   for alt audio sources etc) 	Other sources are kept just so that HMI can track
 *   the active source through attribute activeAudioSource     	(at)return
 *   eAudioPresErrors
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eInterruptSrcs>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > audioPresCtrlControlsDBusStubAdapterInternal::requestInformationSourceStubDispatcher(
    &audioPresCtrlControlsStub::RequestInformationSource, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment *>(nullptr)));

/**
 * description: to deactivate interrupt source with given SourceID 	(at)return eAudioPresErrors
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eInterruptSrcs>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > audioPresCtrlControlsDBusStubAdapterInternal::releaseInformationSourceStubDispatcher(
    &audioPresCtrlControlsStub::ReleaseInformationSource, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment *>(nullptr)));


/**
 * description: Attribute holding current ative audio source 		This will be updated on every
 *   audiosource change
 */
void audioPresCtrlControlsDBusStubAdapterInternal::fireActiveAudioSourceAttributeChanged(const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId
    >>
        ::sendSignal(
            *this,
            "onActiveAudioSourceAttributeChanged",
            "q",
            value
    
    );
}
/**
 * description: Attribute holding current ative entertainment source 		This will be updated on
 *   every audiosource change
 */
void audioPresCtrlControlsDBusStubAdapterInternal::fireActiveEntSrcAttributeChanged(const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eEntertainmentSrcs& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eEntertainmentSrcs
    >>
        ::sendSignal(
            *this,
            "onActiveEntSrcAttributeChanged",
            "i",
            value
    
    );
}
/**
 * description: Attribute holding list of entertainment sources with available status 		This
 *   will be update on a status change(available/unavailable/unknown) of any
 *   entertainment source
 */
void audioPresCtrlControlsDBusStubAdapterInternal::fireEntSourceListAttributeChanged(const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::EntSourceList& value) {
    CommonAPI::Deployable<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::EntSourceList, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes_::EntSourceListDeployment_t> deployedValue(value, static_cast<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes_::EntSourceListDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::EntSourceList,
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes_::EntSourceListDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onEntSourceListAttributeChanged",
            "a{ii}",
            deployedValue
    
    );
}



const audioPresCtrlControlsDBusStubAdapterHelper::StubDispatcherTable& audioPresCtrlControlsDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& audioPresCtrlControlsDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

audioPresCtrlControlsDBusStubAdapterInternal::audioPresCtrlControlsDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      audioPresCtrlControlsDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<audioPresCtrlControlsStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: Attribute holding current ative audio source 		This will be updated on every
             *   audiosource change
             */
            { { "getActiveAudioSourceAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlControlsDBusStubAdapterInternal::getActiveAudioSourceAttributeStubDispatcher },
            /**
             * description: Attribute holding current ative entertainment source 		This will be updated on
             *   every audiosource change
             */
            { { "getActiveEntSrcAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlControlsDBusStubAdapterInternal::getActiveEntSrcAttributeStubDispatcher },
            /**
             * description: Attribute holding list of entertainment sources with available status 		This
             *   will be update on a status change(available/unavailable/unknown) of any
             *   entertainment source
             */
            { { "getEntSourceListAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlControlsDBusStubAdapterInternal::getEntSourceListAttributeStubDispatcher }
            ,
            /**
             * description: This method is used to set audio entertainment sources 	(at)attribute update
             *   activeAudioSource and activeEntSrc
             */
            { { "SetEntertainmentSrc", "i" }, &com::harman::audio::audioPresCtrl::audioPresCtrlControlsDBusStubAdapterInternal::setEntertainmentSrcStubDispatcher },
            /**
             * description: This method is used to switch Audio Context to the source in the given group
             *   	Group needs to be first mentioned in the audiopres.cfg 	Project may choose
             *   any naming strategy as long as it doesnt conflict with another json key in the
             *   cfg 	(at)attribute update activeAudioSource and activeEntSrc if a source
             *   switch has happened 	(at)return eAudioPresErrors
             */
            { { "SetSourceGroup", "s" }, &com::harman::audio::audioPresCtrl::audioPresCtrlControlsDBusStubAdapterInternal::setSourceGroupStubDispatcher },
            /**
             * description: This method is used to toggle source in the source group 	SetSourceGroup needs
             *   to be invoked in order to select an active group 	(at)attribute update
             *   activeAudioSource and activeEntSrc if a source switch has happened 	(at)return
             *   eAudioPresErrors
             */
            { { "ToggleInSourceGroup", "i" }, &com::harman::audio::audioPresCtrl::audioPresCtrlControlsDBusStubAdapterInternal::toggleInSourceGroupStubDispatcher },
            /**
             * description: This method is used to toggle source in the order specified in
             *   "toggleNextPreviousStrategy" in audiopes.cfg 	If no cfg item
             *   toggleNextPreviousStrategy with value is defined , method return an error
             *   	toggleNextPreviousStrategy should be used to capture the toggle sequence of
             *   entertainment sources in a project 	(at)attribute update activeAudioSource and
             *   activeEntSrc if a source switch has happened	 	(at)return eAudioPresErrors
             */
            { { "ToggleSource", "i" }, &com::harman::audio::audioPresCtrl::audioPresCtrlControlsDBusStubAdapterInternal::toggleSourceStubDispatcher },
            /**
             * description: to activate interrupt source with given SourceID 	Only touchbeep and keytouch
             *   srcs will be supported through requestinformationsource interface 	as these
             *   are the only sources that will be requested by HMIs 	Other sources will be
             *   invoked for switch by respective pres ctrl (ex btpres for hfp , projectionpres
             *   for alt audio sources etc) 	Other sources are kept just so that HMI can track
             *   the active source through attribute activeAudioSource     	(at)return
             *   eAudioPresErrors
             */
            { { "RequestInformationSource", "i" }, &com::harman::audio::audioPresCtrl::audioPresCtrlControlsDBusStubAdapterInternal::requestInformationSourceStubDispatcher },
            /**
             * description: to deactivate interrupt source with given SourceID 	(at)return eAudioPresErrors
             */
            { { "ReleaseInformationSource", "i" }, &com::harman::audio::audioPresCtrl::audioPresCtrlControlsDBusStubAdapterInternal::releaseInformationSourceStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlControlsDBusStubAdapterInternal::getaudioPresCtrlControlsInterfaceVersionStubDispatcher });
}

bool audioPresCtrlControlsDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace audioPresCtrl
} // namespace audio
} // namespace harman
} // namespace com
} // namespace v1
