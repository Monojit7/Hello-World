/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Sun Oct 16 06:59:52 IST 2016
*/
/**
 * description: This is a Common API DBUS diagnostics interface of audio presentation
 *   controller for Orinoco 2.0
 * author: AYatheesh
 */
#ifndef V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Diag_DBUS_STUB_ADAPTER_HPP_
#define V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Diag_DBUS_STUB_ADAPTER_HPP_

#include <v1/com/harman/audio/audioPresCtrl/audioPresCtrlDiagStub.hpp>
#include "v1/com/harman/audio/audioPresCtrl/audioPresCtrlDiagDBusDeployment.hpp"        
#include <v1/com/harman/audio/audioPresCtrl/audioPresCtrlTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace audio {
namespace audioPresCtrl {

typedef CommonAPI::DBus::DBusStubAdapterHelper<audioPresCtrlDiagStub> audioPresCtrlDiagDBusStubAdapterHelper;

class audioPresCtrlDiagDBusStubAdapterInternal
    : public virtual audioPresCtrlDiagStubAdapter,
      public audioPresCtrlDiagDBusStubAdapterHelper
{
public:
    audioPresCtrlDiagDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~audioPresCtrlDiagDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return audioPresCtrlDiag::getInterface();
    }




    const audioPresCtrlDiagDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlDiagStub,
        CommonAPI::Version
        > getaudioPresCtrlDiagInterfaceVersionStubDispatcher;



/**
 * description: For diagnostic purpose to test one or multiple speakers 	(at)return
 *   eAudioPresErrors
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlDiagStub,
    std::tuple<uint16_t, std::string, float, uint16_t>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > testSpeakerOnStubDispatcher;
/**
 * description: For diagnostic purpose to turn OFF one or more speakers 	(at)return
 *   eAudioPresErrors
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlDiagStub,
    std::tuple<uint16_t>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > testMultiSpeakersOffStubDispatcher;
/**
 * description: This function is used to play a sine signal with sine generator with special
 *   parameters.     (at)return eAudioPresErrors
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlDiagStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eSampleRateType, int16_t, int16_t, int16_t, int16_t>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > playSineToneStubDispatcher;
/**
 * description: This function is used to stop playing sine tone for diagnostics purpose    
 *   (at)return eAudioPresErrors
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlDiagStub,
    std::tuple<>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > stopSineToneStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    audioPresCtrlDiagDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class audioPresCtrlDiagDBusStubAdapter
    : public audioPresCtrlDiagDBusStubAdapterInternal,
      public std::enable_shared_from_this<audioPresCtrlDiagDBusStubAdapter> {
public:
    audioPresCtrlDiagDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          audioPresCtrlDiagDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace audioPresCtrl
} // namespace audio
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Diag_DBUS_STUB_ADAPTER_HPP_
