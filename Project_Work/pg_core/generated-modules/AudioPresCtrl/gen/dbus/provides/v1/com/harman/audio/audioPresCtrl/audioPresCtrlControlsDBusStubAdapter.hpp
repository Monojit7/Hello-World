/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Sun Oct 16 06:59:52 IST 2016
*/
/**
 * description: This is a Common API DBUS control interface of audio presentation controller
 *   for Orinoco 2.0
 * author: AYatheesh
 */
#ifndef V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Controls_DBUS_STUB_ADAPTER_HPP_
#define V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Controls_DBUS_STUB_ADAPTER_HPP_

#include <v1/com/harman/audio/audioPresCtrl/audioPresCtrlControlsStub.hpp>
#include "v1/com/harman/audio/audioPresCtrl/audioPresCtrlControlsDBusDeployment.hpp"        
#include <v1/com/harman/audio/audioPresCtrl/audioPresCtrlTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace audio {
namespace audioPresCtrl {

typedef CommonAPI::DBus::DBusStubAdapterHelper<audioPresCtrlControlsStub> audioPresCtrlControlsDBusStubAdapterHelper;

class audioPresCtrlControlsDBusStubAdapterInternal
    : public virtual audioPresCtrlControlsStubAdapter,
      public audioPresCtrlControlsDBusStubAdapterHelper
{
public:
    audioPresCtrlControlsDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~audioPresCtrlControlsDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return audioPresCtrlControls::getInterface();
    }

    /**
     * description: Attribute holding current ative audio source 		This will be updated on every
     *   audiosource change
     */
    void fireActiveAudioSourceAttributeChanged(const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId& value);
    /**
     * description: Attribute holding current ative entertainment source 		This will be updated on
     *   every audiosource change
     */
    void fireActiveEntSrcAttributeChanged(const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eEntertainmentSrcs& value);
    /**
     * description: Attribute holding list of entertainment sources with available status 		This
     *   will be update on a status change(available/unavailable/unknown) of any
     *   entertainment source
     */
    void fireEntSourceListAttributeChanged(const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::EntSourceList& value);



    const audioPresCtrlControlsDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub,
        CommonAPI::Version
        > getaudioPresCtrlControlsInterfaceVersionStubDispatcher;

/**
 * description: Attribute holding current ative audio source 		This will be updated on every
 *   audiosource change
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub,
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId                
        > getActiveAudioSourceAttributeStubDispatcher;
/**
 * description: Attribute holding current ative entertainment source 		This will be updated on
 *   every audiosource change
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub,
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eEntertainmentSrcs                
        > getActiveEntSrcAttributeStubDispatcher;
/**
 * description: Attribute holding list of entertainment sources with available status 		This
 *   will be update on a status change(available/unavailable/unknown) of any
 *   entertainment source
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub,
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::EntSourceList,
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes_::EntSourceListDeployment_t                
        > getEntSourceListAttributeStubDispatcher;


/**
 * description: This method is used to set audio entertainment sources 	(at)attribute update
 *   activeAudioSource and activeEntSrc
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eEntertainmentSrcs>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > setEntertainmentSrcStubDispatcher;
/**
 * description: This method is used to switch Audio Context to the source in the given group
 *   	Group needs to be first mentioned in the audiopres.cfg 	Project may choose
 *   any naming strategy as long as it doesnt conflict with another json key in the
 *   cfg 	(at)attribute update activeAudioSource and activeEntSrc if a source
 *   switch has happened 	(at)return eAudioPresErrors
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > setSourceGroupStubDispatcher;
/**
 * description: This method is used to toggle source in the source group 	SetSourceGroup needs
 *   to be invoked in order to select an active group 	(at)attribute update
 *   activeAudioSource and activeEntSrc if a source switch has happened 	(at)return
 *   eAudioPresErrors
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eToggleDirection>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > toggleInSourceGroupStubDispatcher;
/**
 * description: This method is used to toggle source in the order specified in
 *   "toggleNextPreviousStrategy" in audiopes.cfg 	If no cfg item
 *   toggleNextPreviousStrategy with value is defined , method return an error
 *   	toggleNextPreviousStrategy should be used to capture the toggle sequence of
 *   entertainment sources in a project 	(at)attribute update activeAudioSource and
 *   activeEntSrc if a source switch has happened	 	(at)return eAudioPresErrors
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eToggleDirection>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > toggleSourceStubDispatcher;
/**
 * description: to activate interrupt source with given SourceID 	Only touchbeep and keytouch
 *   srcs will be supported through requestinformationsource interface 	as these
 *   are the only sources that will be requested by HMIs 	Other sources will be
 *   invoked for switch by respective pres ctrl (ex btpres for hfp , projectionpres
 *   for alt audio sources etc) 	Other sources are kept just so that HMI can track
 *   the active source through attribute activeAudioSource     	(at)return
 *   eAudioPresErrors
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eInterruptSrcs>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > requestInformationSourceStubDispatcher;
/**
 * description: to deactivate interrupt source with given SourceID 	(at)return eAudioPresErrors
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlControlsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eInterruptSrcs>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > releaseInformationSourceStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    audioPresCtrlControlsDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class audioPresCtrlControlsDBusStubAdapter
    : public audioPresCtrlControlsDBusStubAdapterInternal,
      public std::enable_shared_from_this<audioPresCtrlControlsDBusStubAdapter> {
public:
    audioPresCtrlControlsDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          audioPresCtrlControlsDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace audioPresCtrl
} // namespace audio
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Controls_DBUS_STUB_ADAPTER_HPP_
