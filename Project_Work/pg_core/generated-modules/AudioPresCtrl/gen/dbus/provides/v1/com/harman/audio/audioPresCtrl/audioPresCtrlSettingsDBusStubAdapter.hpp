/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Sun Oct 16 06:59:52 IST 2016
*/
/**
 * description: This is a Common API DBUS settings interface of audio presentation controller
 *   for Orinoco 2.0
 * author: AYatheesh
 */
#ifndef V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Settings_DBUS_STUB_ADAPTER_HPP_
#define V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Settings_DBUS_STUB_ADAPTER_HPP_

#include <v1/com/harman/audio/audioPresCtrl/audioPresCtrlSettingsStub.hpp>
#include "v1/com/harman/audio/audioPresCtrl/audioPresCtrlSettingsDBusDeployment.hpp"        
#include <v1/com/harman/audio/audioPresCtrl/audioPresCtrlTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace audio {
namespace audioPresCtrl {

typedef CommonAPI::DBus::DBusStubAdapterHelper<audioPresCtrlSettingsStub> audioPresCtrlSettingsDBusStubAdapterHelper;

class audioPresCtrlSettingsDBusStubAdapterInternal
    : public virtual audioPresCtrlSettingsStubAdapter,
      public audioPresCtrlSettingsDBusStubAdapterHelper
{
public:
    audioPresCtrlSettingsDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~audioPresCtrlSettingsDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return audioPresCtrlSettings::getInterface();
    }

    /**
     * description: Attribute holding current fade level
     */
    void fireFadeAttributeChanged(const int16_t& value);
    /**
     * description: Attribute holding current Balance level
     */
    void fireBalanceAttributeChanged(const int16_t& value);
    /**
     * description: Attribute holding current Bass level
     */
    void fireBassAttributeChanged(const int16_t& value);
    /**
     * description: Attribute holding current Mid level
     */
    void fireMidAttributeChanged(const int16_t& value);
    /**
     * description: Attribute holding current Treble level
     */
    void fireTrebleAttributeChanged(const int16_t& value);
    /**
     * description: Attribute holding Equalizer set
     */
    void fireEqualizerAttributeChanged(const std::string& value);
    /**
     * description: Attribute holding Clarifi status (enabled/disabled)
     */
    void fireClarifiAttributeChanged(const bool& value);
    /**
     * description: Attribute holding Loudness status (enabled/disabled)
     */
    void fireLoudnessAttributeChanged(const bool& value);
    /**
     * description: Attribute holding current AVCMode level
     */
    void fireAVCModeAttributeChanged(const uint16_t& value);
    /**
     * description: Attribute holding Aux offset gain value
     */
    void fireAuxOffsetGainAttributeChanged(const int16_t& value);
    /**
     * description: Attribute holding Mid low value
     */
    void fireMidLowAttributeChanged(const int16_t& value);
    /**
     * description: Attribute holding MidHigh value
     */
    void fireMidHighAttributeChanged(const int16_t& value);
    /**
     * description: Attribute holding A2dp source offset gain value
     */
    void fireA2dpOffsetGainAttributeChanged(const int16_t& value);
    /**
     * description: Attribute holding Mic gain value
     */
    void fireMicGainAttributeChanged(const int16_t& value);
    /**
     * description: Attribute holding mute state of active source
     */
    void fireActiveSrcMuteAttributeChanged(const bool& value);
    /**
     * description: Attribute holding system mute state
     */
    void fireMasterMuteAttributeChanged(const bool& value);
    /**
     * description: Attribute hodling MicMute status
     */
    void fireMicMuteStatusAttributeChanged(const bool& value);
    /**
     * description: Attribute hodling touch beep tone selection
     */
    void fireTouchBeepSelectionAttributeChanged(const std::string& value);
    /**
     * description: Attribute hodling touch beep tone selection
     */
    void fireKeypadBeepSelectionAttributeChanged(const std::string& value);

    /**
     * description: To broadcast volume change signal to HMI to display updated volume level
     */
    void fireVolumeChangeEvent(const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume& volume, const bool& sourceActive);
    /**
     * description: To broadcast system mute state to HMI
     */
    void fireSourceMuteStateEvent(const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId& sourcename, const bool& muteState);


    const audioPresCtrlSettingsDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        CommonAPI::Version
        > getaudioPresCtrlSettingsInterfaceVersionStubDispatcher;

/**
 * description: Attribute holding current fade level
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        int16_t                
        > getFadeAttributeStubDispatcher;
/**
 * description: Attribute holding current Balance level
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        int16_t                
        > getBalanceAttributeStubDispatcher;
/**
 * description: Attribute holding current Bass level
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        int16_t                
        > getBassAttributeStubDispatcher;
/**
 * description: Attribute holding current Mid level
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        int16_t                
        > getMidAttributeStubDispatcher;
/**
 * description: Attribute holding current Treble level
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        int16_t                
        > getTrebleAttributeStubDispatcher;
/**
 * description: Attribute holding Equalizer set
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        std::string,
        CommonAPI::DBus::StringDeployment                
        > getEqualizerAttributeStubDispatcher;
/**
 * description: Attribute holding Clarifi status (enabled/disabled)
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        bool                
        > getClarifiAttributeStubDispatcher;
/**
 * description: Attribute holding Loudness status (enabled/disabled)
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        bool                
        > getLoudnessAttributeStubDispatcher;
/**
 * description: Attribute holding current AVCMode level
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        uint16_t                
        > getAVCModeAttributeStubDispatcher;
/**
 * description: Attribute holding Aux offset gain value
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        int16_t                
        > getAuxOffsetGainAttributeStubDispatcher;
/**
 * description: Attribute holding Mid low value
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        int16_t                
        > getMidLowAttributeStubDispatcher;
/**
 * description: Attribute holding MidHigh value
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        int16_t                
        > getMidHighAttributeStubDispatcher;
/**
 * description: Attribute holding A2dp source offset gain value
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        int16_t                
        > getA2dpOffsetGainAttributeStubDispatcher;
/**
 * description: Attribute holding Mic gain value
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        int16_t                
        > getMicGainAttributeStubDispatcher;
/**
 * description: Attribute holding mute state of active source
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        bool                
        > getActiveSrcMuteAttributeStubDispatcher;
/**
 * description: Attribute holding system mute state
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        bool                
        > getMasterMuteAttributeStubDispatcher;
/**
 * description: Attribute hodling MicMute status
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        bool                
        > getMicMuteStatusAttributeStubDispatcher;
/**
 * description: Attribute hodling touch beep tone selection
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        std::string,
        CommonAPI::DBus::StringDeployment                
        > getTouchBeepSelectionAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        std::string,
        CommonAPI::DBus::StringDeployment                    
        > setTouchBeepSelectionAttributeStubDispatcher;
/**
 * description: Attribute hodling touch beep tone selection
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        std::string,
        CommonAPI::DBus::StringDeployment                
        > getKeypadBeepSelectionAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        std::string,
        CommonAPI::DBus::StringDeployment                    
        > setKeypadBeepSelectionAttributeStubDispatcher;


/**
 * description: This method is used to set absolute volume of presently playing source.  	If
 *   interrupt source is active, it changes the volume of active interrupt source
 *   	If no interrupts are active, it changes volume of Entertainment source.
 *   	(at)broadast VolumeChange
 */

static CommonAPI::DBus::DBusMethodStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
    std::tuple<uint16_t>,
    std::tuple<CommonAPI::EmptyDeployment>
    > setVolumeStubDispatcher;
/**
 * description: This method is used to set Volume of presently playing source where volume
 *   change is given in steps example -2 or +2 	(at)broadast VolumeChange
 */

static CommonAPI::DBus::DBusMethodStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
    std::tuple<int16_t>,
    std::tuple<CommonAPI::EmptyDeployment>
    > setVolumeStepStubDispatcher;
/**
 * description: This method is used to set Volume of any source group 	(at)broadast VolumeChange
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes_::sSourceVolumeDeployment_t>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > setSourceVolumeStubDispatcher;
/**
 * description: This method is used to get Volume of any source 	(at)return eAudioPresErrors
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes_::sSourceVolumeDeployment_t>
    
    > getSourceVolumeStubDispatcher;
/**
 * description: This method is used to toggle mute status of currently playing source
 *   	(at)attribute update ActiveSrcMute
 */

static CommonAPI::DBus::DBusMethodStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
    std::tuple<>,
    std::tuple<>
    > toggleActiveSrcMuteStubDispatcher;
/**
 * description: This method is used to set mute status of any particular source 	(at)broadcast
 *   SourceMuteState
 */

static CommonAPI::DBus::DBusMethodStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId, bool>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    > setSourceMuteStubDispatcher;
/**
 * description: This method is used to toggle MIC mute status  	(at)attribute update
 *   MicMuteStatus
 */

static CommonAPI::DBus::DBusMethodStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
    std::tuple<>,
    std::tuple<>
    > toggleMicMuteStubDispatcher;
/**
 * description: This method is used to get supported EQ preset, Touch tone list and keyboard
 *   tone list 	(at)return eAudioPresErrors
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eUserOption>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::ListItems>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes_::ListItemsDeployment_t>
    
    > getListStubDispatcher;
/**
 * description: This method is used to get mute status of any particular source 	(at)return
 *   eAudioPresErrors
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId, bool>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > getSourceMuteStubDispatcher;
/**
 * description: This method is used to toggle mute status of complete system 	(at)attribute
 *   update MasterMute
 */

static CommonAPI::DBus::DBusMethodStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
    std::tuple<>,
    std::tuple<>
    > toggleMasterMuteStubDispatcher;
/**
 * description: This method is used to set audio settings attributes     You may pass a map of
 *   attributes rather than multiple calls.      For example , the balance and fade
 *   is always a combination 	(at)attribute update
 */

static CommonAPI::DBus::DBusMethodStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::mAttribute>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes_::mAttributeDeployment_t>
    > setAudioAttributeStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    audioPresCtrlSettingsDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class audioPresCtrlSettingsDBusStubAdapter
    : public audioPresCtrlSettingsDBusStubAdapterInternal,
      public std::enable_shared_from_this<audioPresCtrlSettingsDBusStubAdapter> {
public:
    audioPresCtrlSettingsDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          audioPresCtrlSettingsDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace audioPresCtrl
} // namespace audio
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Settings_DBUS_STUB_ADAPTER_HPP_
