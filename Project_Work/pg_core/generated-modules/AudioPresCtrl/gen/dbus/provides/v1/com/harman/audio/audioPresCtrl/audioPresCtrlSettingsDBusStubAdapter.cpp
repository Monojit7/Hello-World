/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Sun Oct 16 06:59:52 IST 2016
*/
#include <v1/com/harman/audio/audioPresCtrl/audioPresCtrlSettings.hpp>
#include <v1/com/harman/audio/audioPresCtrl/audioPresCtrlSettingsDBusStubAdapter.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace audio {
namespace audioPresCtrl {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createaudioPresCtrlSettingsDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<audioPresCtrlSettingsDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registeraudioPresCtrlSettingsDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	audioPresCtrlSettings::getInterface(), &createaudioPresCtrlSettingsDBusStubAdapter);
}

audioPresCtrlSettingsDBusStubAdapterInternal::~audioPresCtrlSettingsDBusStubAdapterInternal() {
    deactivateManagedInstances();
    audioPresCtrlSettingsDBusStubAdapterHelper::deinit();
}

void audioPresCtrlSettingsDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* audioPresCtrlSettingsDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"getFadeAttribute\">\n"
            "<arg name=\"value\" type=\"n\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onFadeAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"n\" />\n"
        "</signal>\n"
        "<method name=\"getBalanceAttribute\">\n"
            "<arg name=\"value\" type=\"n\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onBalanceAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"n\" />\n"
        "</signal>\n"
        "<method name=\"getBassAttribute\">\n"
            "<arg name=\"value\" type=\"n\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onBassAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"n\" />\n"
        "</signal>\n"
        "<method name=\"getMidAttribute\">\n"
            "<arg name=\"value\" type=\"n\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onMidAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"n\" />\n"
        "</signal>\n"
        "<method name=\"getTrebleAttribute\">\n"
            "<arg name=\"value\" type=\"n\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onTrebleAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"n\" />\n"
        "</signal>\n"
        "<method name=\"getEqualizerAttribute\">\n"
            "<arg name=\"value\" type=\"s\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onEqualizerAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"s\" />\n"
        "</signal>\n"
        "<method name=\"getClarifiAttribute\">\n"
            "<arg name=\"value\" type=\"b\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onClarifiAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"b\" />\n"
        "</signal>\n"
        "<method name=\"getLoudnessAttribute\">\n"
            "<arg name=\"value\" type=\"b\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onLoudnessAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"b\" />\n"
        "</signal>\n"
        "<method name=\"getAVCModeAttribute\">\n"
            "<arg name=\"value\" type=\"q\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onAVCModeAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"q\" />\n"
        "</signal>\n"
        "<method name=\"getAuxOffsetGainAttribute\">\n"
            "<arg name=\"value\" type=\"n\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onAuxOffsetGainAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"n\" />\n"
        "</signal>\n"
        "<method name=\"getMidLowAttribute\">\n"
            "<arg name=\"value\" type=\"n\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onMidLowAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"n\" />\n"
        "</signal>\n"
        "<method name=\"getMidHighAttribute\">\n"
            "<arg name=\"value\" type=\"n\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onMidHighAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"n\" />\n"
        "</signal>\n"
        "<method name=\"getA2dpOffsetGainAttribute\">\n"
            "<arg name=\"value\" type=\"n\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onA2dpOffsetGainAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"n\" />\n"
        "</signal>\n"
        "<method name=\"getMicGainAttribute\">\n"
            "<arg name=\"value\" type=\"n\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onMicGainAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"n\" />\n"
        "</signal>\n"
        "<method name=\"getActiveSrcMuteAttribute\">\n"
            "<arg name=\"value\" type=\"b\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onActiveSrcMuteAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"b\" />\n"
        "</signal>\n"
        "<method name=\"getMasterMuteAttribute\">\n"
            "<arg name=\"value\" type=\"b\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onMasterMuteAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"b\" />\n"
        "</signal>\n"
        "<method name=\"getMicMuteStatusAttribute\">\n"
            "<arg name=\"value\" type=\"b\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onMicMuteStatusAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"b\" />\n"
        "</signal>\n"
        "<method name=\"getTouchBeepSelectionAttribute\">\n"
            "<arg name=\"value\" type=\"s\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"setTouchBeepSelectionAttribute\">\n"
            "<arg name=\"requestedValue\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"s\" direction=\"out\" />\n"
        "</method>\n"
        "<signal name=\"onTouchBeepSelectionAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"s\" />\n"
        "</signal>\n"
        "<method name=\"getKeypadBeepSelectionAttribute\">\n"
            "<arg name=\"value\" type=\"s\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"setKeypadBeepSelectionAttribute\">\n"
            "<arg name=\"requestedValue\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"s\" direction=\"out\" />\n"
        "</method>\n"
        "<signal name=\"onKeypadBeepSelectionAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"s\" />\n"
        "</signal>\n"
        /**
         * description: To broadcast volume change signal to HMI to display updated volume level
         */
        "<signal name=\"VolumeChange\">\n"
            "<arg name=\"volume\" type=\"(qq)\" />\n"
            "<arg name=\"sourceActive\" type=\"b\" />\n"
        "</signal>\n"
        /**
         * description: To broadcast system mute state to HMI
         */
        "<signal name=\"SourceMuteState\">\n"
            "<arg name=\"sourcename\" type=\"q\" />\n"
            "<arg name=\"muteState\" type=\"b\" />\n"
        "</signal>\n"
        /**
         * description: This method is used to set absolute volume of presently playing source.  	If
         *   interrupt source is active, it changes the volume of active interrupt source
         *   	If no interrupts are active, it changes volume of Entertainment source.
         *   	(at)broadast VolumeChange
         */
        "<method name=\"SetVolume\">\n"
            "<arg name=\"_absoluteVolume\" type=\"q\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: This method is used to set Volume of presently playing source where volume
         *   change is given in steps example -2 or +2 	(at)broadast VolumeChange
         */
        "<method name=\"SetVolumeStep\">\n"
            "<arg name=\"_volumeStep\" type=\"n\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: This method is used to set Volume of any source group 	(at)broadast VolumeChange
         */
        "<method name=\"SetSourceVolume\">\n"
            "<arg name=\"_volume\" type=\"(qq)\" direction=\"in\" />\n"
            "<arg name=\"_error\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method is used to get Volume of any source 	(at)return eAudioPresErrors
         */
        "<method name=\"GetSourceVolume\">\n"
            "<arg name=\"_sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_error\" type=\"i\" direction=\"out\" />\n"
            "<arg name=\"_volumeOfSource\" type=\"(qq)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method is used to toggle mute status of currently playing source
         *   	(at)attribute update ActiveSrcMute
         */
        "<method name=\"ToggleActiveSrcMute\">\n"
        "</method>\n"
        /**
         * description: This method is used to set mute status of any particular source 	(at)broadcast
         *   SourceMuteState
         */
        "<method name=\"SetSourceMute\">\n"
            "<arg name=\"_sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_mute\" type=\"b\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: This method is used to toggle MIC mute status  	(at)attribute update
         *   MicMuteStatus
         */
        "<method name=\"ToggleMicMute\">\n"
        "</method>\n"
        /**
         * description: This method is used to get supported EQ preset, Touch tone list and keyboard
         *   tone list 	(at)return eAudioPresErrors
         */
        "<method name=\"GetList\">\n"
            "<arg name=\"_listType\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_error\" type=\"i\" direction=\"out\" />\n"
            "<arg name=\"_list\" type=\"as\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method is used to get mute status of any particular source 	(at)return
         *   eAudioPresErrors
         */
        "<method name=\"GetSourceMute\">\n"
            "<arg name=\"_sourceID\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_error\" type=\"i\" direction=\"out\" />\n"
            "<arg name=\"_sourceId\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"_mute\" type=\"b\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method is used to toggle mute status of complete system 	(at)attribute
         *   update MasterMute
         */
        "<method name=\"ToggleMasterMute\">\n"
        "</method>\n"
        /**
         * description: This method is used to set audio settings attributes     You may pass a map of
         *   attributes rather than multiple calls.      For example , the balance and fade
         *   is always a combination 	(at)attribute update
         */
        "<method name=\"setAudioAttribute\">\n"
            "<arg name=\"_attributesmap\" type=\"a{i(yv)}\" direction=\"in\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        CommonAPI::Version
        > audioPresCtrlSettingsDBusStubAdapterInternal::getaudioPresCtrlSettingsInterfaceVersionStubDispatcher(&audioPresCtrlSettingsStub::getInterfaceVersion, "uu");

/**
 * description: Attribute holding current fade level
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        int16_t
        > audioPresCtrlSettingsDBusStubAdapterInternal::getFadeAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub::getFadeAttribute
            , "n"
            );
/**
 * description: Attribute holding current Balance level
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        int16_t
        > audioPresCtrlSettingsDBusStubAdapterInternal::getBalanceAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub::getBalanceAttribute
            , "n"
            );
/**
 * description: Attribute holding current Bass level
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        int16_t
        > audioPresCtrlSettingsDBusStubAdapterInternal::getBassAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub::getBassAttribute
            , "n"
            );
/**
 * description: Attribute holding current Mid level
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        int16_t
        > audioPresCtrlSettingsDBusStubAdapterInternal::getMidAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub::getMidAttribute
            , "n"
            );
/**
 * description: Attribute holding current Treble level
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        int16_t
        > audioPresCtrlSettingsDBusStubAdapterInternal::getTrebleAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub::getTrebleAttribute
            , "n"
            );
/**
 * description: Attribute holding Equalizer set
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        std::string,
        CommonAPI::DBus::StringDeployment
        > audioPresCtrlSettingsDBusStubAdapterInternal::getEqualizerAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub::getEqualizerAttribute
            , "s"
            );
/**
 * description: Attribute holding Clarifi status (enabled/disabled)
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        bool
        > audioPresCtrlSettingsDBusStubAdapterInternal::getClarifiAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub::getClarifiAttribute
            , "b"
            );
/**
 * description: Attribute holding Loudness status (enabled/disabled)
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        bool
        > audioPresCtrlSettingsDBusStubAdapterInternal::getLoudnessAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub::getLoudnessAttribute
            , "b"
            );
/**
 * description: Attribute holding current AVCMode level
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        uint16_t
        > audioPresCtrlSettingsDBusStubAdapterInternal::getAVCModeAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub::getAVCModeAttribute
            , "q"
            );
/**
 * description: Attribute holding Aux offset gain value
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        int16_t
        > audioPresCtrlSettingsDBusStubAdapterInternal::getAuxOffsetGainAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub::getAuxOffsetGainAttribute
            , "n"
            );
/**
 * description: Attribute holding Mid low value
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        int16_t
        > audioPresCtrlSettingsDBusStubAdapterInternal::getMidLowAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub::getMidLowAttribute
            , "n"
            );
/**
 * description: Attribute holding MidHigh value
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        int16_t
        > audioPresCtrlSettingsDBusStubAdapterInternal::getMidHighAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub::getMidHighAttribute
            , "n"
            );
/**
 * description: Attribute holding A2dp source offset gain value
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        int16_t
        > audioPresCtrlSettingsDBusStubAdapterInternal::getA2dpOffsetGainAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub::getA2dpOffsetGainAttribute
            , "n"
            );
/**
 * description: Attribute holding Mic gain value
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        int16_t
        > audioPresCtrlSettingsDBusStubAdapterInternal::getMicGainAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub::getMicGainAttribute
            , "n"
            );
/**
 * description: Attribute holding mute state of active source
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        bool
        > audioPresCtrlSettingsDBusStubAdapterInternal::getActiveSrcMuteAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub::getActiveSrcMuteAttribute
            , "b"
            );
/**
 * description: Attribute holding system mute state
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        bool
        > audioPresCtrlSettingsDBusStubAdapterInternal::getMasterMuteAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub::getMasterMuteAttribute
            , "b"
            );
/**
 * description: Attribute hodling MicMute status
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        bool
        > audioPresCtrlSettingsDBusStubAdapterInternal::getMicMuteStatusAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub::getMicMuteStatusAttribute
            , "b"
            );
/**
 * description: Attribute hodling touch beep tone selection
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        std::string,
        CommonAPI::DBus::StringDeployment
        > audioPresCtrlSettingsDBusStubAdapterInternal::getTouchBeepSelectionAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub::getTouchBeepSelectionAttribute
            , "s"
            );
CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        std::string,
        CommonAPI::DBus::StringDeployment
        > audioPresCtrlSettingsDBusStubAdapterInternal::setTouchBeepSelectionAttributeStubDispatcher(
                &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub::getTouchBeepSelectionAttribute,
                &audioPresCtrlSettingsStubRemoteEvent::onRemoteSetTouchBeepSelectionAttribute,
                &audioPresCtrlSettingsStubRemoteEvent::onRemoteTouchBeepSelectionAttributeChanged
                ,&audioPresCtrlSettingsStubAdapter::fireTouchBeepSelectionAttributeChanged
                ,"s"
                );
/**
 * description: Attribute hodling touch beep tone selection
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        std::string,
        CommonAPI::DBus::StringDeployment
        > audioPresCtrlSettingsDBusStubAdapterInternal::getKeypadBeepSelectionAttributeStubDispatcher(
            &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub::getKeypadBeepSelectionAttribute
            , "s"
            );
CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
        std::string,
        CommonAPI::DBus::StringDeployment
        > audioPresCtrlSettingsDBusStubAdapterInternal::setKeypadBeepSelectionAttributeStubDispatcher(
                &::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub::getKeypadBeepSelectionAttribute,
                &audioPresCtrlSettingsStubRemoteEvent::onRemoteSetKeypadBeepSelectionAttribute,
                &audioPresCtrlSettingsStubRemoteEvent::onRemoteKeypadBeepSelectionAttributeChanged
                ,&audioPresCtrlSettingsStubAdapter::fireKeypadBeepSelectionAttributeChanged
                ,"s"
                );



/**
 * description: This method is used to set absolute volume of presently playing source.  	If
 *   interrupt source is active, it changes the volume of active interrupt source
 *   	If no interrupts are active, it changes volume of Entertainment source.
 *   	(at)broadast VolumeChange
 */
CommonAPI::DBus::DBusMethodStubDispatcher<
    audioPresCtrlSettingsStub,
    std::tuple<uint16_t>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > audioPresCtrlSettingsDBusStubAdapterInternal::setVolumeStubDispatcher(&audioPresCtrlSettingsStub::SetVolume,
    std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This method is used to set Volume of presently playing source where volume
 *   change is given in steps example -2 or +2 	(at)broadast VolumeChange
 */
CommonAPI::DBus::DBusMethodStubDispatcher<
    audioPresCtrlSettingsStub,
    std::tuple<int16_t>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > audioPresCtrlSettingsDBusStubAdapterInternal::setVolumeStepStubDispatcher(&audioPresCtrlSettingsStub::SetVolumeStep,
    std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This method is used to set Volume of any source group 	(at)broadast VolumeChange
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes_::sSourceVolumeDeployment_t>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > audioPresCtrlSettingsDBusStubAdapterInternal::setSourceVolumeStubDispatcher(
    &audioPresCtrlSettingsStub::SetSourceVolume, "i",
					std::make_tuple(static_cast<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes_::sSourceVolumeDeployment_t*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment *>(nullptr)));

/**
 * description: This method is used to get Volume of any source 	(at)return eAudioPresErrors
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes_::sSourceVolumeDeployment_t>
    
    > audioPresCtrlSettingsDBusStubAdapterInternal::getSourceVolumeStubDispatcher(
    &audioPresCtrlSettingsStub::GetSourceVolume, "i(qq)",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment *>(nullptr), static_cast<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes_::sSourceVolumeDeployment_t*>(nullptr)));

/**
 * description: This method is used to toggle mute status of currently playing source
 *   	(at)attribute update ActiveSrcMute
 */
CommonAPI::DBus::DBusMethodStubDispatcher<
    audioPresCtrlSettingsStub,
    std::tuple<>,
    std::tuple<>
    
    > audioPresCtrlSettingsDBusStubAdapterInternal::toggleActiveSrcMuteStubDispatcher(&audioPresCtrlSettingsStub::ToggleActiveSrcMute,
    std::make_tuple());

/**
 * description: This method is used to set mute status of any particular source 	(at)broadcast
 *   SourceMuteState
 */
CommonAPI::DBus::DBusMethodStubDispatcher<
    audioPresCtrlSettingsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId, bool>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > audioPresCtrlSettingsDBusStubAdapterInternal::setSourceMuteStubDispatcher(&audioPresCtrlSettingsStub::SetSourceMute,
    std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This method is used to toggle MIC mute status  	(at)attribute update
 *   MicMuteStatus
 */
CommonAPI::DBus::DBusMethodStubDispatcher<
    audioPresCtrlSettingsStub,
    std::tuple<>,
    std::tuple<>
    
    > audioPresCtrlSettingsDBusStubAdapterInternal::toggleMicMuteStubDispatcher(&audioPresCtrlSettingsStub::ToggleMicMute,
    std::make_tuple());

/**
 * description: This method is used to get supported EQ preset, Touch tone list and keyboard
 *   tone list 	(at)return eAudioPresErrors
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eUserOption>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::ListItems>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes_::ListItemsDeployment_t>
    
    > audioPresCtrlSettingsDBusStubAdapterInternal::getListStubDispatcher(
    &audioPresCtrlSettingsStub::GetList, "ias",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment *>(nullptr), static_cast<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes_::ListItemsDeployment_t*>(nullptr)));

/**
 * description: This method is used to get mute status of any particular source 	(at)return
 *   eAudioPresErrors
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlSettingsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId, bool>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > audioPresCtrlSettingsDBusStubAdapterInternal::getSourceMuteStubDispatcher(
    &audioPresCtrlSettingsStub::GetSourceMute, "iqb",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment *>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This method is used to toggle mute status of complete system 	(at)attribute
 *   update MasterMute
 */
CommonAPI::DBus::DBusMethodStubDispatcher<
    audioPresCtrlSettingsStub,
    std::tuple<>,
    std::tuple<>
    
    > audioPresCtrlSettingsDBusStubAdapterInternal::toggleMasterMuteStubDispatcher(&audioPresCtrlSettingsStub::ToggleMasterMute,
    std::make_tuple());

/**
 * description: This method is used to set audio settings attributes     You may pass a map of
 *   attributes rather than multiple calls.      For example , the balance and fade
 *   is always a combination 	(at)attribute update
 */
CommonAPI::DBus::DBusMethodStubDispatcher<
    audioPresCtrlSettingsStub,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::mAttribute>,
    std::tuple<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes_::mAttributeDeployment_t>
    
    > audioPresCtrlSettingsDBusStubAdapterInternal::setAudioAttributeStubDispatcher(&audioPresCtrlSettingsStub::setAudioAttribute,
    std::make_tuple(static_cast<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes_::mAttributeDeployment_t*>(nullptr)));


/**
 * description: Attribute holding current fade level
 */
void audioPresCtrlSettingsDBusStubAdapterInternal::fireFadeAttributeChanged(const int16_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    int16_t
    >>
        ::sendSignal(
            *this,
            "onFadeAttributeChanged",
            "n",
            value
    
    );
}
/**
 * description: Attribute holding current Balance level
 */
void audioPresCtrlSettingsDBusStubAdapterInternal::fireBalanceAttributeChanged(const int16_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    int16_t
    >>
        ::sendSignal(
            *this,
            "onBalanceAttributeChanged",
            "n",
            value
    
    );
}
/**
 * description: Attribute holding current Bass level
 */
void audioPresCtrlSettingsDBusStubAdapterInternal::fireBassAttributeChanged(const int16_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    int16_t
    >>
        ::sendSignal(
            *this,
            "onBassAttributeChanged",
            "n",
            value
    
    );
}
/**
 * description: Attribute holding current Mid level
 */
void audioPresCtrlSettingsDBusStubAdapterInternal::fireMidAttributeChanged(const int16_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    int16_t
    >>
        ::sendSignal(
            *this,
            "onMidAttributeChanged",
            "n",
            value
    
    );
}
/**
 * description: Attribute holding current Treble level
 */
void audioPresCtrlSettingsDBusStubAdapterInternal::fireTrebleAttributeChanged(const int16_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    int16_t
    >>
        ::sendSignal(
            *this,
            "onTrebleAttributeChanged",
            "n",
            value
    
    );
}
/**
 * description: Attribute holding Equalizer set
 */
void audioPresCtrlSettingsDBusStubAdapterInternal::fireEqualizerAttributeChanged(const std::string& value) {
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deployedValue(value, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        std::string,
        CommonAPI::DBus::StringDeployment
    >
    >>
        ::sendSignal(
            *this,
            "onEqualizerAttributeChanged",
            "s",
            deployedValue
    
    );
}
/**
 * description: Attribute holding Clarifi status (enabled/disabled)
 */
void audioPresCtrlSettingsDBusStubAdapterInternal::fireClarifiAttributeChanged(const bool& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    bool
    >>
        ::sendSignal(
            *this,
            "onClarifiAttributeChanged",
            "b",
            value
    
    );
}
/**
 * description: Attribute holding Loudness status (enabled/disabled)
 */
void audioPresCtrlSettingsDBusStubAdapterInternal::fireLoudnessAttributeChanged(const bool& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    bool
    >>
        ::sendSignal(
            *this,
            "onLoudnessAttributeChanged",
            "b",
            value
    
    );
}
/**
 * description: Attribute holding current AVCMode level
 */
void audioPresCtrlSettingsDBusStubAdapterInternal::fireAVCModeAttributeChanged(const uint16_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    uint16_t
    >>
        ::sendSignal(
            *this,
            "onAVCModeAttributeChanged",
            "q",
            value
    
    );
}
/**
 * description: Attribute holding Aux offset gain value
 */
void audioPresCtrlSettingsDBusStubAdapterInternal::fireAuxOffsetGainAttributeChanged(const int16_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    int16_t
    >>
        ::sendSignal(
            *this,
            "onAuxOffsetGainAttributeChanged",
            "n",
            value
    
    );
}
/**
 * description: Attribute holding Mid low value
 */
void audioPresCtrlSettingsDBusStubAdapterInternal::fireMidLowAttributeChanged(const int16_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    int16_t
    >>
        ::sendSignal(
            *this,
            "onMidLowAttributeChanged",
            "n",
            value
    
    );
}
/**
 * description: Attribute holding MidHigh value
 */
void audioPresCtrlSettingsDBusStubAdapterInternal::fireMidHighAttributeChanged(const int16_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    int16_t
    >>
        ::sendSignal(
            *this,
            "onMidHighAttributeChanged",
            "n",
            value
    
    );
}
/**
 * description: Attribute holding A2dp source offset gain value
 */
void audioPresCtrlSettingsDBusStubAdapterInternal::fireA2dpOffsetGainAttributeChanged(const int16_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    int16_t
    >>
        ::sendSignal(
            *this,
            "onA2dpOffsetGainAttributeChanged",
            "n",
            value
    
    );
}
/**
 * description: Attribute holding Mic gain value
 */
void audioPresCtrlSettingsDBusStubAdapterInternal::fireMicGainAttributeChanged(const int16_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    int16_t
    >>
        ::sendSignal(
            *this,
            "onMicGainAttributeChanged",
            "n",
            value
    
    );
}
/**
 * description: Attribute holding mute state of active source
 */
void audioPresCtrlSettingsDBusStubAdapterInternal::fireActiveSrcMuteAttributeChanged(const bool& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    bool
    >>
        ::sendSignal(
            *this,
            "onActiveSrcMuteAttributeChanged",
            "b",
            value
    
    );
}
/**
 * description: Attribute holding system mute state
 */
void audioPresCtrlSettingsDBusStubAdapterInternal::fireMasterMuteAttributeChanged(const bool& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    bool
    >>
        ::sendSignal(
            *this,
            "onMasterMuteAttributeChanged",
            "b",
            value
    
    );
}
/**
 * description: Attribute hodling MicMute status
 */
void audioPresCtrlSettingsDBusStubAdapterInternal::fireMicMuteStatusAttributeChanged(const bool& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    bool
    >>
        ::sendSignal(
            *this,
            "onMicMuteStatusAttributeChanged",
            "b",
            value
    
    );
}
/**
 * description: Attribute hodling touch beep tone selection
 */
void audioPresCtrlSettingsDBusStubAdapterInternal::fireTouchBeepSelectionAttributeChanged(const std::string& value) {
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deployedValue(value, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        std::string,
        CommonAPI::DBus::StringDeployment
    >
    >>
        ::sendSignal(
            *this,
            "onTouchBeepSelectionAttributeChanged",
            "s",
            deployedValue
    
    );
}
/**
 * description: Attribute hodling touch beep tone selection
 */
void audioPresCtrlSettingsDBusStubAdapterInternal::fireKeypadBeepSelectionAttributeChanged(const std::string& value) {
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deployedValue(value, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        std::string,
        CommonAPI::DBus::StringDeployment
    >
    >>
        ::sendSignal(
            *this,
            "onKeypadBeepSelectionAttributeChanged",
            "s",
            deployedValue
    
    );
}

/**
 * description: To broadcast volume change signal to HMI to display updated volume level
 */
void audioPresCtrlSettingsDBusStubAdapterInternal::fireVolumeChangeEvent(const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume& volume, const bool& sourceActive) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes_::sSourceVolumeDeployment_t>,
    bool
    >>::sendSignal(
            *this,
            "VolumeChange",
            "(qq)b",
    CommonAPI::Deployable<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume, ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes_::sSourceVolumeDeployment_t>(volume, static_cast<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes_::sSourceVolumeDeployment_t*>(nullptr)),
    sourceActive
    );
}
/**
 * description: To broadcast system mute state to HMI
 */
void audioPresCtrlSettingsDBusStubAdapterInternal::fireSourceMuteStateEvent(const ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId& sourcename, const bool& muteState) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId,
    bool
    >>::sendSignal(
            *this,
            "SourceMuteState",
            "qb",
    sourcename,
    muteState
    );
}


const audioPresCtrlSettingsDBusStubAdapterHelper::StubDispatcherTable& audioPresCtrlSettingsDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& audioPresCtrlSettingsDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

audioPresCtrlSettingsDBusStubAdapterInternal::audioPresCtrlSettingsDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      audioPresCtrlSettingsDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<audioPresCtrlSettingsStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: Attribute holding current fade level
             */
            { { "getFadeAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getFadeAttributeStubDispatcher },
            /**
             * description: Attribute holding current Balance level
             */
            { { "getBalanceAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getBalanceAttributeStubDispatcher },
            /**
             * description: Attribute holding current Bass level
             */
            { { "getBassAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getBassAttributeStubDispatcher },
            /**
             * description: Attribute holding current Mid level
             */
            { { "getMidAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getMidAttributeStubDispatcher },
            /**
             * description: Attribute holding current Treble level
             */
            { { "getTrebleAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getTrebleAttributeStubDispatcher },
            /**
             * description: Attribute holding Equalizer set
             */
            { { "getEqualizerAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getEqualizerAttributeStubDispatcher },
            /**
             * description: Attribute holding Clarifi status (enabled/disabled)
             */
            { { "getClarifiAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getClarifiAttributeStubDispatcher },
            /**
             * description: Attribute holding Loudness status (enabled/disabled)
             */
            { { "getLoudnessAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getLoudnessAttributeStubDispatcher },
            /**
             * description: Attribute holding current AVCMode level
             */
            { { "getAVCModeAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getAVCModeAttributeStubDispatcher },
            /**
             * description: Attribute holding Aux offset gain value
             */
            { { "getAuxOffsetGainAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getAuxOffsetGainAttributeStubDispatcher },
            /**
             * description: Attribute holding Mid low value
             */
            { { "getMidLowAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getMidLowAttributeStubDispatcher },
            /**
             * description: Attribute holding MidHigh value
             */
            { { "getMidHighAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getMidHighAttributeStubDispatcher },
            /**
             * description: Attribute holding A2dp source offset gain value
             */
            { { "getA2dpOffsetGainAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getA2dpOffsetGainAttributeStubDispatcher },
            /**
             * description: Attribute holding Mic gain value
             */
            { { "getMicGainAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getMicGainAttributeStubDispatcher },
            /**
             * description: Attribute holding mute state of active source
             */
            { { "getActiveSrcMuteAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getActiveSrcMuteAttributeStubDispatcher },
            /**
             * description: Attribute holding system mute state
             */
            { { "getMasterMuteAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getMasterMuteAttributeStubDispatcher },
            /**
             * description: Attribute hodling MicMute status
             */
            { { "getMicMuteStatusAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getMicMuteStatusAttributeStubDispatcher },
            /**
             * description: Attribute hodling touch beep tone selection
             */
            { { "getTouchBeepSelectionAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getTouchBeepSelectionAttributeStubDispatcher }
            , { { "setTouchBeepSelectionAttribute", "s" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::setTouchBeepSelectionAttributeStubDispatcher },
            /**
             * description: Attribute hodling touch beep tone selection
             */
            { { "getKeypadBeepSelectionAttribute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getKeypadBeepSelectionAttributeStubDispatcher }
            , { { "setKeypadBeepSelectionAttribute", "s" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::setKeypadBeepSelectionAttributeStubDispatcher }
            ,
            /**
             * description: This method is used to set absolute volume of presently playing source.  	If
             *   interrupt source is active, it changes the volume of active interrupt source
             *   	If no interrupts are active, it changes volume of Entertainment source.
             *   	(at)broadast VolumeChange
             */
            { { "SetVolume", "q" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::setVolumeStubDispatcher },
            /**
             * description: This method is used to set Volume of presently playing source where volume
             *   change is given in steps example -2 or +2 	(at)broadast VolumeChange
             */
            { { "SetVolumeStep", "n" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::setVolumeStepStubDispatcher },
            /**
             * description: This method is used to set Volume of any source group 	(at)broadast VolumeChange
             */
            { { "SetSourceVolume", "(qq)" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::setSourceVolumeStubDispatcher },
            /**
             * description: This method is used to get Volume of any source 	(at)return eAudioPresErrors
             */
            { { "GetSourceVolume", "q" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getSourceVolumeStubDispatcher },
            /**
             * description: This method is used to toggle mute status of currently playing source
             *   	(at)attribute update ActiveSrcMute
             */
            { { "ToggleActiveSrcMute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::toggleActiveSrcMuteStubDispatcher },
            /**
             * description: This method is used to set mute status of any particular source 	(at)broadcast
             *   SourceMuteState
             */
            { { "SetSourceMute", "qb" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::setSourceMuteStubDispatcher },
            /**
             * description: This method is used to toggle MIC mute status  	(at)attribute update
             *   MicMuteStatus
             */
            { { "ToggleMicMute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::toggleMicMuteStubDispatcher },
            /**
             * description: This method is used to get supported EQ preset, Touch tone list and keyboard
             *   tone list 	(at)return eAudioPresErrors
             */
            { { "GetList", "i" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getListStubDispatcher },
            /**
             * description: This method is used to get mute status of any particular source 	(at)return
             *   eAudioPresErrors
             */
            { { "GetSourceMute", "q" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getSourceMuteStubDispatcher },
            /**
             * description: This method is used to toggle mute status of complete system 	(at)attribute
             *   update MasterMute
             */
            { { "ToggleMasterMute", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::toggleMasterMuteStubDispatcher },
            /**
             * description: This method is used to set audio settings attributes     You may pass a map of
             *   attributes rather than multiple calls.      For example , the balance and fade
             *   is always a combination 	(at)attribute update
             */
            { { "setAudioAttribute", "a{i(yv)}" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::setAudioAttributeStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &com::harman::audio::audioPresCtrl::audioPresCtrlSettingsDBusStubAdapterInternal::getaudioPresCtrlSettingsInterfaceVersionStubDispatcher });
}

bool audioPresCtrlSettingsDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace audioPresCtrl
} // namespace audio
} // namespace harman
} // namespace com
} // namespace v1
