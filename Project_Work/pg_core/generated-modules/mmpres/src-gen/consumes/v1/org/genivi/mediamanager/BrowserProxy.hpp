/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Wed Oct 26 18:16:09 IST 2016
*/
#ifndef V1_ORG_GENIVI_MEDIAMANAGER_Browser_PROXY_HPP_
#define V1_ORG_GENIVI_MEDIAMANAGER_Browser_PROXY_HPP_

#include <v1/org/genivi/mediamanager/BrowserProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace genivi {
namespace mediamanager {

template <typename ... _AttributeExtensions>
class BrowserProxy
    : virtual public Browser, 
      virtual public BrowserProxyBase,
      virtual public _AttributeExtensions... {
public:
    BrowserProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~BrowserProxy();

    typedef Browser InterfaceType;




    /**
     * description: Return a list of all media manager identifiers. These are
             used to
     *   indicate which media manager we should interact with.
             returns: A list
     *   of all media managers found
     * Calls discoverMediaManagers with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void discoverMediaManagers(CommonAPI::CallStatus &_internalCallStatus, std::vector<std::string> &_identifiers, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls discoverMediaManagers with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> discoverMediaManagersAsync(DiscoverMediaManagersAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: List all containers below the given path.
             returns: ResultMapList of
     *   all containers with the given path as parent.
             	   	  See
     *   MediaTypes.fidl for a list of allowed keys.
             errors: NO_CONNECTION if
     *   no connection can be established to underlying
                     browsing
     *   engine
                     BAD_PATH if path parameter is invalid
     * param: path The path to search for containers. The format of the path
                   
     *   depends on the underlying browsing backend
     * param: offset: The offset to use for indexing the results list
     * param: count: The number of results to return, starting from offset
     * param: filter: Array of keys to include in resulting ResultMapList
     * Calls listContainers with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void listContainers(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls listContainers with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> listContainersAsync(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, ListContainersAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Extends ListContainers with sorting capabilities
     * param: sortKey Key to sort ResultMapList on
     * Calls listContainersEx with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void listContainersEx(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const std::vector<::v1::org::genivi::mediamanager::BrowserTypes::SortKey> &_sortKey, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls listContainersEx with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> listContainersExAsync(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const std::vector<::v1::org::genivi::mediamanager::BrowserTypes::SortKey> &_sortKey, ListContainersExAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: List all items in the given container
             returns: A ResultMapList of all
     *   items with the given container as parent.
             		  See MediaTypes.fidl for
     *   a list of allowed keys.
             errors: NO_CONNECTION if no connection can be
     *   established to underlying
                     browsing engine
                    
     *   BAD_PATH if path parameter is invalid
     * param: path The path of the container to search for items.
                    The format
     *   of the path depends on the underlying browsing
                    backend
     * param: offset: The offset to use for indexing the results list
     * param: count: The number of results to return, starting from offset
     * param: filter: Array of keys to include in resulting ResultMapList
     * Calls listItems with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void listItems(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls listItems with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> listItemsAsync(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, ListItemsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Extends ListItems with sorting capabilities
     * param: sortKey Key to sort ResultMapList
     * Calls listItemsEx with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void listItemsEx(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const std::vector<::v1::org::genivi::mediamanager::BrowserTypes::SortKey> &_sortKey, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls listItemsEx with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> listItemsExAsync(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const std::vector<::v1::org::genivi::mediamanager::BrowserTypes::SortKey> &_sortKey, ListItemsExAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: List all children in the given container
             returns: A ResultMapList of
     *   all children with the given container as parent.
             		  See
     *   MediaTypes.fidl for a list of allowed keys.
             errors: NO_CONNECTION if
     *   no connection can be established to underlying
                      browsing
     *   engine
                      BAD_PATH if path parameter is invalid
     * param: path The path of the container to search for children.
                    The
     *   format of the path depends on the underlying browsing
                    backend
     * param: offset: The offset to use for indexing the results list
     * param: count: The number of results to return, starting from offset
     * param: filter: Array of keys to include in resulting ResultMapList
     * Calls listChildren with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void listChildren(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls listChildren with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> listChildrenAsync(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, ListChildrenAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Extends ListChildren with sorting capabilities
     * param: sortKey Key to sort ResultMapList on
     * Calls listChildrenEx with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void listChildrenEx(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const std::vector<::v1::org::genivi::mediamanager::BrowserTypes::SortKey> &_sortKey, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls listChildrenEx with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> listChildrenExAsync(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const std::vector<::v1::org::genivi::mediamanager::BrowserTypes::SortKey> &_sortKey, ListChildrenExAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: get ojbect attributes
     * param: path:  object path returned by listXX intefaces.
            			 item:
     *   /com/harman/media/1/music/1/0/5 
            			 containter
     * param: filter: attributes list want to retrive.
                    Title Artist
     * Calls getAttributes with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getAttributes(const std::string &_path, const std::vector<std::string> &_filter, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMap &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getAttributes with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getAttributesAsync(const std::string &_path, const std::vector<std::string> &_filter, GetAttributesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Retrieve the count of searching objects in the given container
            
     *   returns:     count of searching objects
             errors:      S_OK if no
     *   error. otherwise, error occurred.
     * param: path The path of the container to search for children.
                    The
     *   format of the path depends on the underlying browsing
                    backend
     * param: query Search query to match children against. The format of the
                   
     *   query depends on the underlying browsing backend
     * Calls getSearchObjectsCount with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getSearchObjectsCount(const std::string &_path, const std::string &_query, CommonAPI::CallStatus &_internalCallStatus, uint64_t &_count, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getSearchObjectsCount with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getSearchObjectsCountAsync(const std::string &_path, const std::string &_query, GetSearchObjectsCountAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Retrieve the playback uri of searching objects in the given container
            
     *   returns:     playback uri, this uri will contain all the serach results.
         
     *      errors:      S_OK if no error. otherwise, error occurred.
     * param: path The path of the container used by search api.
     * Calls getSearchObjectsUri with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getSearchObjectsUri(const std::string &_path, CommonAPI::CallStatus &_internalCallStatus, std::string &_uri, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getSearchObjectsUri with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getSearchObjectsUriAsync(const std::string &_path, GetSearchObjectsUriAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Retrieve the first letter and index for Alpha Jump
             returns:     Vector
     *   for letter and index.
             errors:      S_OK if no error. otherwise, error
     *   occurred.
     * param: path The path of the container to search for children.
                    The
     *   format of the path depends on the underlying browsing
                    backend
     * param: query Search query to match children against. The format of the
                   
     *   query depends on the underlying browsing backend
     * Calls getAlphaJumpInfo with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getAlphaJumpInfo(const std::string &_path, const ::v1::org::genivi::mediamanager::BrowserTypes::SortKey &_sortKey, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::arAlphaIndex &_ajList, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getAlphaJumpInfo with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getAlphaJumpInfoAsync(const std::string &_path, const ::v1::org::genivi::mediamanager::BrowserTypes::SortKey &_sortKey, GetAlphaJumpInfoAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Search for children in the given container
             returns: A ResultMapList of
     *   all children matching the search criteria with
                       the given
     *   container as parent.See MediaTypes.fidl for a list of
                      
     *   allowed keys.
             errors: NO_CONNECTION if no connection can be
     *   established to underlying
                     browsing engine
                    
     *   BAD_PATH if path parameter is invalid
     * param: path The path of the container to search for children.
                    The
     *   format of the path depends on the underlying browsing
                    backend
     * param: query Search query to match children against. The format of the
                   
     *   query depends on the underlying browsing backend
     * param: offset: The offset to use for indexing the results list
     * param: count: The number of results to return, starting from offset
     * param: filter: Array of keys to include in resulting ResultMapList
     * Calls searchObjects with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void searchObjects(const std::string &_path, const std::string &_query, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls searchObjects with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> searchObjectsAsync(const std::string &_path, const std::string &_query, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, SearchObjectsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Extends SearchObjects with sorting capabilities
     * param: sortKey Key to sort ResultMapList on
     * Calls searchObjectsEx with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void searchObjectsEx(const std::string &_path, const std::string &_query, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const std::vector<::v1::org::genivi::mediamanager::BrowserTypes::SortKey> &_sortKey, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls searchObjectsEx with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> searchObjectsExAsync(const std::string &_path, const std::string &_query, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const std::vector<::v1::org::genivi::mediamanager::BrowserTypes::SortKey> &_sortKey, SearchObjectsExAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Get a list of all initial letters and their index in the
                         
     *   given container
             returns: A list of tuples of initial letters and
     *   their first
                       observed position when sorting according to
     *   sortKey
             errors: NO_CONNECTION if no connection can be established to
     *   underlying
                     browsing engine
                     BAD_PATH if path
     *   parameter is invalid
     * param: container: Container to build index list for
     * param: count: How many (unsorted) items should be traversed to build
                     
     *          index
     * param: filter: List of initial letters to include
     * param: sortKey: Key to sort on when building index list
     * Calls listIndexes with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void listIndexes(const std::string &_container, const uint64_t &_count, const std::vector<std::string> &_filter, const ::v1::org::genivi::mediamanager::BrowserTypes::SortKey &_sortKey, CommonAPI::CallStatus &_internalCallStatus, std::string &_indexes, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls listIndexes with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> listIndexesAsync(const std::string &_container, const uint64_t &_count, const std::vector<std::string> &_filter, const ::v1::org::genivi::mediamanager::BrowserTypes::SortKey &_sortKey, ListIndexesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Create a new empty container with path used as root
             returns: Path
     *   identifier for the newly created container
             errors: NO_CONNECTION if
     *   no connection can be established to underlying
                      browsing
     *   engine
                      BAD_PATH if path parameter is invalid
     * param: path: Path to place the newly created container in
     * param: displayName: Display name for the new container
     * param: childTypes: Array of allowed types on children in new container
     * Calls createContainer with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void createContainer(const std::string &_path, const std::string &_displayName, const std::vector<std::string> &_childTypes, CommonAPI::CallStatus &_internalCallStatus, std::string &_pathIdentifier, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls createContainer with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> createContainerAsync(const std::string &_path, const std::string &_displayName, const std::vector<std::string> &_childTypes, CreateContainerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Place a reference in a container, pointing to an object
             returns: Path
     *   identifier for the container containing the reference
             errors:
     *   NO_CONNECTION if no connection can be established to underlying
                  
     *      browsing engine
                      BAD_PATH if path parameter is invalid
     * param: path: Path to place the newly created container in
     * param: objectPath: Path to object to create reference to
     * Calls createReference with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void createReference(const std::string &_path, const std::string &_objectPath, CommonAPI::CallStatus &_internalCallStatus, std::string &_pathIdentifier, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls createReference with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> createReferenceAsync(const std::string &_path, const std::string &_objectPath, CreateReferenceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<BrowserProxyBase> delegate_;
};

typedef BrowserProxy<> BrowserProxyDefault;


//
// BrowserProxy Implementation
//
template <typename ... _AttributeExtensions>
BrowserProxy<_AttributeExtensions...>::BrowserProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<BrowserProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<BrowserProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
BrowserProxy<_AttributeExtensions...>::~BrowserProxy() {
}

/**
 * description: Return a list of all media manager identifiers. These are
         used to
 *   indicate which media manager we should interact with.
         returns: A list
 *   of all media managers found
 */
template <typename ... _AttributeExtensions>
void BrowserProxy<_AttributeExtensions...>::discoverMediaManagers(CommonAPI::CallStatus &_internalCallStatus, std::vector<std::string> &_identifiers, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->discoverMediaManagers(_internalCallStatus, _identifiers, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BrowserProxy<_AttributeExtensions...>::discoverMediaManagersAsync(DiscoverMediaManagersAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->discoverMediaManagersAsync(_callback, _info);
}
/**
 * description: List all containers below the given path.
         returns: ResultMapList of
 *   all containers with the given path as parent.
         	   	  See
 *   MediaTypes.fidl for a list of allowed keys.
         errors: NO_CONNECTION if
 *   no connection can be established to underlying
                 browsing
 *   engine
                 BAD_PATH if path parameter is invalid
 * param: path The path to search for containers. The format of the path
               
 *   depends on the underlying browsing backend
 * param: offset: The offset to use for indexing the results list
 * param: count: The number of results to return, starting from offset
 * param: filter: Array of keys to include in resulting ResultMapList
 */
template <typename ... _AttributeExtensions>
void BrowserProxy<_AttributeExtensions...>::listContainers(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->listContainers(_path, _offset, _count, _filter, _internalCallStatus, _m, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BrowserProxy<_AttributeExtensions...>::listContainersAsync(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, ListContainersAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->listContainersAsync(_path, _offset, _count, _filter, _callback, _info);
}
/**
 * description: Extends ListContainers with sorting capabilities
 * param: sortKey Key to sort ResultMapList on
 */
template <typename ... _AttributeExtensions>
void BrowserProxy<_AttributeExtensions...>::listContainersEx(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const std::vector<::v1::org::genivi::mediamanager::BrowserTypes::SortKey> &_sortKey, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->listContainersEx(_path, _offset, _count, _filter, _sortKey, _internalCallStatus, _m, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BrowserProxy<_AttributeExtensions...>::listContainersExAsync(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const std::vector<::v1::org::genivi::mediamanager::BrowserTypes::SortKey> &_sortKey, ListContainersExAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->listContainersExAsync(_path, _offset, _count, _filter, _sortKey, _callback, _info);
}
/**
 * description: List all items in the given container
         returns: A ResultMapList of all
 *   items with the given container as parent.
         		  See MediaTypes.fidl for
 *   a list of allowed keys.
         errors: NO_CONNECTION if no connection can be
 *   established to underlying
                 browsing engine
                
 *   BAD_PATH if path parameter is invalid
 * param: path The path of the container to search for items.
                The format
 *   of the path depends on the underlying browsing
                backend
 * param: offset: The offset to use for indexing the results list
 * param: count: The number of results to return, starting from offset
 * param: filter: Array of keys to include in resulting ResultMapList
 */
template <typename ... _AttributeExtensions>
void BrowserProxy<_AttributeExtensions...>::listItems(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->listItems(_path, _offset, _count, _filter, _internalCallStatus, _m, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BrowserProxy<_AttributeExtensions...>::listItemsAsync(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, ListItemsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->listItemsAsync(_path, _offset, _count, _filter, _callback, _info);
}
/**
 * description: Extends ListItems with sorting capabilities
 * param: sortKey Key to sort ResultMapList
 */
template <typename ... _AttributeExtensions>
void BrowserProxy<_AttributeExtensions...>::listItemsEx(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const std::vector<::v1::org::genivi::mediamanager::BrowserTypes::SortKey> &_sortKey, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->listItemsEx(_path, _offset, _count, _filter, _sortKey, _internalCallStatus, _m, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BrowserProxy<_AttributeExtensions...>::listItemsExAsync(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const std::vector<::v1::org::genivi::mediamanager::BrowserTypes::SortKey> &_sortKey, ListItemsExAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->listItemsExAsync(_path, _offset, _count, _filter, _sortKey, _callback, _info);
}
/**
 * description: List all children in the given container
         returns: A ResultMapList of
 *   all children with the given container as parent.
         		  See
 *   MediaTypes.fidl for a list of allowed keys.
         errors: NO_CONNECTION if
 *   no connection can be established to underlying
                  browsing
 *   engine
                  BAD_PATH if path parameter is invalid
 * param: path The path of the container to search for children.
                The
 *   format of the path depends on the underlying browsing
                backend
 * param: offset: The offset to use for indexing the results list
 * param: count: The number of results to return, starting from offset
 * param: filter: Array of keys to include in resulting ResultMapList
 */
template <typename ... _AttributeExtensions>
void BrowserProxy<_AttributeExtensions...>::listChildren(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->listChildren(_path, _offset, _count, _filter, _internalCallStatus, _m, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BrowserProxy<_AttributeExtensions...>::listChildrenAsync(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, ListChildrenAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->listChildrenAsync(_path, _offset, _count, _filter, _callback, _info);
}
/**
 * description: Extends ListChildren with sorting capabilities
 * param: sortKey Key to sort ResultMapList on
 */
template <typename ... _AttributeExtensions>
void BrowserProxy<_AttributeExtensions...>::listChildrenEx(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const std::vector<::v1::org::genivi::mediamanager::BrowserTypes::SortKey> &_sortKey, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->listChildrenEx(_path, _offset, _count, _filter, _sortKey, _internalCallStatus, _m, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BrowserProxy<_AttributeExtensions...>::listChildrenExAsync(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const std::vector<::v1::org::genivi::mediamanager::BrowserTypes::SortKey> &_sortKey, ListChildrenExAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->listChildrenExAsync(_path, _offset, _count, _filter, _sortKey, _callback, _info);
}
/**
 * description: get ojbect attributes
 * param: path:  object path returned by listXX intefaces.
        			 item:
 *   /com/harman/media/1/music/1/0/5 
        			 containter
 * param: filter: attributes list want to retrive.
                Title Artist
 */
template <typename ... _AttributeExtensions>
void BrowserProxy<_AttributeExtensions...>::getAttributes(const std::string &_path, const std::vector<std::string> &_filter, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMap &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->getAttributes(_path, _filter, _internalCallStatus, _m, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BrowserProxy<_AttributeExtensions...>::getAttributesAsync(const std::string &_path, const std::vector<std::string> &_filter, GetAttributesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getAttributesAsync(_path, _filter, _callback, _info);
}
/**
 * description: Retrieve the count of searching objects in the given container
        
 *   returns:     count of searching objects
         errors:      S_OK if no
 *   error. otherwise, error occurred.
 * param: path The path of the container to search for children.
                The
 *   format of the path depends on the underlying browsing
                backend
 * param: query Search query to match children against. The format of the
               
 *   query depends on the underlying browsing backend
 */
template <typename ... _AttributeExtensions>
void BrowserProxy<_AttributeExtensions...>::getSearchObjectsCount(const std::string &_path, const std::string &_query, CommonAPI::CallStatus &_internalCallStatus, uint64_t &_count, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->getSearchObjectsCount(_path, _query, _internalCallStatus, _count, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BrowserProxy<_AttributeExtensions...>::getSearchObjectsCountAsync(const std::string &_path, const std::string &_query, GetSearchObjectsCountAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getSearchObjectsCountAsync(_path, _query, _callback, _info);
}
/**
 * description: Retrieve the playback uri of searching objects in the given container
        
 *   returns:     playback uri, this uri will contain all the serach results.
     
 *      errors:      S_OK if no error. otherwise, error occurred.
 * param: path The path of the container used by search api.
 */
template <typename ... _AttributeExtensions>
void BrowserProxy<_AttributeExtensions...>::getSearchObjectsUri(const std::string &_path, CommonAPI::CallStatus &_internalCallStatus, std::string &_uri, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->getSearchObjectsUri(_path, _internalCallStatus, _uri, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BrowserProxy<_AttributeExtensions...>::getSearchObjectsUriAsync(const std::string &_path, GetSearchObjectsUriAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getSearchObjectsUriAsync(_path, _callback, _info);
}
/**
 * description: Retrieve the first letter and index for Alpha Jump
         returns:     Vector
 *   for letter and index.
         errors:      S_OK if no error. otherwise, error
 *   occurred.
 * param: path The path of the container to search for children.
                The
 *   format of the path depends on the underlying browsing
                backend
 * param: query Search query to match children against. The format of the
               
 *   query depends on the underlying browsing backend
 */
template <typename ... _AttributeExtensions>
void BrowserProxy<_AttributeExtensions...>::getAlphaJumpInfo(const std::string &_path, const ::v1::org::genivi::mediamanager::BrowserTypes::SortKey &_sortKey, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::arAlphaIndex &_ajList, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->getAlphaJumpInfo(_path, _sortKey, _internalCallStatus, _ajList, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BrowserProxy<_AttributeExtensions...>::getAlphaJumpInfoAsync(const std::string &_path, const ::v1::org::genivi::mediamanager::BrowserTypes::SortKey &_sortKey, GetAlphaJumpInfoAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getAlphaJumpInfoAsync(_path, _sortKey, _callback, _info);
}
/**
 * description: Search for children in the given container
         returns: A ResultMapList of
 *   all children matching the search criteria with
                   the given
 *   container as parent.See MediaTypes.fidl for a list of
                  
 *   allowed keys.
         errors: NO_CONNECTION if no connection can be
 *   established to underlying
                 browsing engine
                
 *   BAD_PATH if path parameter is invalid
 * param: path The path of the container to search for children.
                The
 *   format of the path depends on the underlying browsing
                backend
 * param: query Search query to match children against. The format of the
               
 *   query depends on the underlying browsing backend
 * param: offset: The offset to use for indexing the results list
 * param: count: The number of results to return, starting from offset
 * param: filter: Array of keys to include in resulting ResultMapList
 */
template <typename ... _AttributeExtensions>
void BrowserProxy<_AttributeExtensions...>::searchObjects(const std::string &_path, const std::string &_query, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->searchObjects(_path, _query, _offset, _count, _filter, _internalCallStatus, _m, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BrowserProxy<_AttributeExtensions...>::searchObjectsAsync(const std::string &_path, const std::string &_query, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, SearchObjectsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->searchObjectsAsync(_path, _query, _offset, _count, _filter, _callback, _info);
}
/**
 * description: Extends SearchObjects with sorting capabilities
 * param: sortKey Key to sort ResultMapList on
 */
template <typename ... _AttributeExtensions>
void BrowserProxy<_AttributeExtensions...>::searchObjectsEx(const std::string &_path, const std::string &_query, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const std::vector<::v1::org::genivi::mediamanager::BrowserTypes::SortKey> &_sortKey, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->searchObjectsEx(_path, _query, _offset, _count, _filter, _sortKey, _internalCallStatus, _m, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BrowserProxy<_AttributeExtensions...>::searchObjectsExAsync(const std::string &_path, const std::string &_query, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const std::vector<::v1::org::genivi::mediamanager::BrowserTypes::SortKey> &_sortKey, SearchObjectsExAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->searchObjectsExAsync(_path, _query, _offset, _count, _filter, _sortKey, _callback, _info);
}
/**
 * description: Get a list of all initial letters and their index in the
                     
 *   given container
         returns: A list of tuples of initial letters and
 *   their first
                   observed position when sorting according to
 *   sortKey
         errors: NO_CONNECTION if no connection can be established to
 *   underlying
                 browsing engine
                 BAD_PATH if path
 *   parameter is invalid
 * param: container: Container to build index list for
 * param: count: How many (unsorted) items should be traversed to build
                 
 *          index
 * param: filter: List of initial letters to include
 * param: sortKey: Key to sort on when building index list
 */
template <typename ... _AttributeExtensions>
void BrowserProxy<_AttributeExtensions...>::listIndexes(const std::string &_container, const uint64_t &_count, const std::vector<std::string> &_filter, const ::v1::org::genivi::mediamanager::BrowserTypes::SortKey &_sortKey, CommonAPI::CallStatus &_internalCallStatus, std::string &_indexes, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->listIndexes(_container, _count, _filter, _sortKey, _internalCallStatus, _indexes, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BrowserProxy<_AttributeExtensions...>::listIndexesAsync(const std::string &_container, const uint64_t &_count, const std::vector<std::string> &_filter, const ::v1::org::genivi::mediamanager::BrowserTypes::SortKey &_sortKey, ListIndexesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->listIndexesAsync(_container, _count, _filter, _sortKey, _callback, _info);
}
/**
 * description: Create a new empty container with path used as root
         returns: Path
 *   identifier for the newly created container
         errors: NO_CONNECTION if
 *   no connection can be established to underlying
                  browsing
 *   engine
                  BAD_PATH if path parameter is invalid
 * param: path: Path to place the newly created container in
 * param: displayName: Display name for the new container
 * param: childTypes: Array of allowed types on children in new container
 */
template <typename ... _AttributeExtensions>
void BrowserProxy<_AttributeExtensions...>::createContainer(const std::string &_path, const std::string &_displayName, const std::vector<std::string> &_childTypes, CommonAPI::CallStatus &_internalCallStatus, std::string &_pathIdentifier, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->createContainer(_path, _displayName, _childTypes, _internalCallStatus, _pathIdentifier, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BrowserProxy<_AttributeExtensions...>::createContainerAsync(const std::string &_path, const std::string &_displayName, const std::vector<std::string> &_childTypes, CreateContainerAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->createContainerAsync(_path, _displayName, _childTypes, _callback, _info);
}
/**
 * description: Place a reference in a container, pointing to an object
         returns: Path
 *   identifier for the container containing the reference
         errors:
 *   NO_CONNECTION if no connection can be established to underlying
              
 *      browsing engine
                  BAD_PATH if path parameter is invalid
 * param: path: Path to place the newly created container in
 * param: objectPath: Path to object to create reference to
 */
template <typename ... _AttributeExtensions>
void BrowserProxy<_AttributeExtensions...>::createReference(const std::string &_path, const std::string &_objectPath, CommonAPI::CallStatus &_internalCallStatus, std::string &_pathIdentifier, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->createReference(_path, _objectPath, _internalCallStatus, _pathIdentifier, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BrowserProxy<_AttributeExtensions...>::createReferenceAsync(const std::string &_path, const std::string &_objectPath, CreateReferenceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->createReferenceAsync(_path, _objectPath, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &BrowserProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool BrowserProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool BrowserProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& BrowserProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& BrowserProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace mediamanager
} // namespace genivi
} // namespace org
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_GENIVI_MEDIAMANAGER_Browser_PROXY_HPP_
