/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Sat Nov 05 14:44:28 IST 2016
*/
#ifndef V1_COM_HARMAN_MMPRES_MM_Pres_Types_HPP_
#define V1_COM_HARMAN_MMPRES_MM_Pres_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

struct MMPresTypes {
    
    struct eSlotType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SLOTTYPE_USB = 0,
            SLOTTYPE_BLUETOOTH = 1,
            SLOTTYPE_OPTICAL_DRIVE = 2,
            SLOTTYPE_WIFI = 3,
            SLOTTYPE_HDD = 4,
            SLOTTYPE_CARD = 5
        };
        
        eSlotType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SLOTTYPE_USB)) {}
        eSlotType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SLOTTYPE_USB):
                case static_cast<int32_t>(Literal::SLOTTYPE_BLUETOOTH):
                case static_cast<int32_t>(Literal::SLOTTYPE_OPTICAL_DRIVE):
                case static_cast<int32_t>(Literal::SLOTTYPE_WIFI):
                case static_cast<int32_t>(Literal::SLOTTYPE_HDD):
                case static_cast<int32_t>(Literal::SLOTTYPE_CARD):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eSlotType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eSlotType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eSlotType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eSlotType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eSlotType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eSlotType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eFileSystemContentType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            FS_CONTENT_TYPE_FILE = 1,
            FS_CONTENT_TYPE_FOLDER = 2,
            FS_CONTENT_TYPE_PLAYLIST = 4,
            FS_CONTENT_TYPE_UNKNOWN = 8
        };
        
        eFileSystemContentType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::FS_CONTENT_TYPE_FILE)) {}
        eFileSystemContentType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::FS_CONTENT_TYPE_FILE):
                case static_cast<int32_t>(Literal::FS_CONTENT_TYPE_FOLDER):
                case static_cast<int32_t>(Literal::FS_CONTENT_TYPE_PLAYLIST):
                case static_cast<int32_t>(Literal::FS_CONTENT_TYPE_UNKNOWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eFileSystemContentType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eFileSystemContentType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eFileSystemContentType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eFileSystemContentType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eFileSystemContentType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eFileSystemContentType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eDeviceType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DEVICETYPE_HDD = 0,
            DEVICETYPE_DISCSINGLE = 1,
            DEVICETYPE_DISCCHANGER = 2,
            DEVICETYPE_USB = 3,
            DEVICETYPE_MEMORYCARD = 4,
            DEVICETYPE_IPOD = 5,
            DEVICETYPE_MTP = 6,
            DEVICETYPE_BLUETOOTH = 7,
            DEVICETYPE_NETWORK = 8,
            DEVICETYPE_UPNP = 9,
            DEVICETYPE_DMB = 10,
            DEVICETYPE_SND = 11,
            DEVICETYPE_MASTER = 12,
            DEVICETYPE_AMP = 13,
            DEVICETYPE_STREAM = 14,
            DEVICETYPE_OAP = 15,
            DEVICETYPE_UKNOWN = 16,
            DEVICETYPE_NODEV = 17
        };
        
        eDeviceType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DEVICETYPE_HDD)) {}
        eDeviceType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DEVICETYPE_HDD):
                case static_cast<int32_t>(Literal::DEVICETYPE_DISCSINGLE):
                case static_cast<int32_t>(Literal::DEVICETYPE_DISCCHANGER):
                case static_cast<int32_t>(Literal::DEVICETYPE_USB):
                case static_cast<int32_t>(Literal::DEVICETYPE_MEMORYCARD):
                case static_cast<int32_t>(Literal::DEVICETYPE_IPOD):
                case static_cast<int32_t>(Literal::DEVICETYPE_MTP):
                case static_cast<int32_t>(Literal::DEVICETYPE_BLUETOOTH):
                case static_cast<int32_t>(Literal::DEVICETYPE_NETWORK):
                case static_cast<int32_t>(Literal::DEVICETYPE_UPNP):
                case static_cast<int32_t>(Literal::DEVICETYPE_DMB):
                case static_cast<int32_t>(Literal::DEVICETYPE_SND):
                case static_cast<int32_t>(Literal::DEVICETYPE_MASTER):
                case static_cast<int32_t>(Literal::DEVICETYPE_AMP):
                case static_cast<int32_t>(Literal::DEVICETYPE_STREAM):
                case static_cast<int32_t>(Literal::DEVICETYPE_OAP):
                case static_cast<int32_t>(Literal::DEVICETYPE_UKNOWN):
                case static_cast<int32_t>(Literal::DEVICETYPE_NODEV):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eDeviceType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eDeviceType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eDeviceType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eDeviceType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eDeviceType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eDeviceType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eDeviceCapabilities : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DEVICECAP_METADATABROWSE = 1,
            DEVICECAP_METADATASEARCH = 2,
            DEVICECAP_FSBROWSE = 4,
            DEVICECAP_NOWPLAYINGLIST = 8,
            DEVICECAP_COVERART = 16,
            DEVICECAP_COVERFLOW = 32,
            DEVICECAP_SEEKTOTIME = 64,
            DEVICECAP_VIDEOPLAYBACK = 128,
            DEVICECAP_CARPLAY = 256,
            DEVICECAP_ANDROIDAUTO = 512,
            DEVICECAP_THIRDPARTYPLAYBACK = 1024,
            DEVICECAP_PLAYPOS_UPDATE = 2048,
            DEVICECAP_TIMEPOS_UPDATE = 4096,
            DEVICECAP_FSSEARCH = 8192
        };
        
        eDeviceCapabilities() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DEVICECAP_METADATABROWSE)) {}
        eDeviceCapabilities(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DEVICECAP_METADATABROWSE):
                case static_cast<int32_t>(Literal::DEVICECAP_METADATASEARCH):
                case static_cast<int32_t>(Literal::DEVICECAP_FSBROWSE):
                case static_cast<int32_t>(Literal::DEVICECAP_NOWPLAYINGLIST):
                case static_cast<int32_t>(Literal::DEVICECAP_COVERART):
                case static_cast<int32_t>(Literal::DEVICECAP_COVERFLOW):
                case static_cast<int32_t>(Literal::DEVICECAP_SEEKTOTIME):
                case static_cast<int32_t>(Literal::DEVICECAP_VIDEOPLAYBACK):
                case static_cast<int32_t>(Literal::DEVICECAP_CARPLAY):
                case static_cast<int32_t>(Literal::DEVICECAP_ANDROIDAUTO):
                case static_cast<int32_t>(Literal::DEVICECAP_THIRDPARTYPLAYBACK):
                case static_cast<int32_t>(Literal::DEVICECAP_PLAYPOS_UPDATE):
                case static_cast<int32_t>(Literal::DEVICECAP_TIMEPOS_UPDATE):
                case static_cast<int32_t>(Literal::DEVICECAP_FSSEARCH):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eDeviceCapabilities &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eDeviceCapabilities &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eDeviceCapabilities &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eDeviceCapabilities &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eDeviceCapabilities &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eDeviceCapabilities &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eRepeatMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            REPEAT_ALL = 1,
            REPEAT_OFF = 2,
            REPEAT_SONG = 4,
            REPEAT_FOLDER = 8,
            REPEAT_SUBFOLDER = 16,
            REPEAT_ALBUM = 32,
            REPEAT_ERROR = 64,
            REPEAT_UNKNOWN = 128,
            REPEAT_TOGGLE = 256,
            REPEAT_NOTSUP = 512
        };
        
        eRepeatMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::REPEAT_ALL)) {}
        eRepeatMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::REPEAT_ALL):
                case static_cast<int32_t>(Literal::REPEAT_OFF):
                case static_cast<int32_t>(Literal::REPEAT_SONG):
                case static_cast<int32_t>(Literal::REPEAT_FOLDER):
                case static_cast<int32_t>(Literal::REPEAT_SUBFOLDER):
                case static_cast<int32_t>(Literal::REPEAT_ALBUM):
                case static_cast<int32_t>(Literal::REPEAT_ERROR):
                case static_cast<int32_t>(Literal::REPEAT_UNKNOWN):
                case static_cast<int32_t>(Literal::REPEAT_TOGGLE):
                case static_cast<int32_t>(Literal::REPEAT_NOTSUP):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eRepeatMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eRepeatMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eRepeatMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eRepeatMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eRepeatMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eRepeatMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eShuffleMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SHUFFLE_ALL = 1,
            SHUFFLE_OFF = 2,
            SHUFFLE_FOLDER = 4,
            SHUFFLE_SUBFOLDER = 8,
            SHUFFLE_ALBUM = 16,
            SHUFFLE_ERROR = 32,
            SHUFFLE_UNKNOWN = 64,
            SHUFFLE_TOGGLE = 128,
            SHUFFLE_NOTSUP = 256
        };
        
        eShuffleMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SHUFFLE_ALL)) {}
        eShuffleMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SHUFFLE_ALL):
                case static_cast<int32_t>(Literal::SHUFFLE_OFF):
                case static_cast<int32_t>(Literal::SHUFFLE_FOLDER):
                case static_cast<int32_t>(Literal::SHUFFLE_SUBFOLDER):
                case static_cast<int32_t>(Literal::SHUFFLE_ALBUM):
                case static_cast<int32_t>(Literal::SHUFFLE_ERROR):
                case static_cast<int32_t>(Literal::SHUFFLE_UNKNOWN):
                case static_cast<int32_t>(Literal::SHUFFLE_TOGGLE):
                case static_cast<int32_t>(Literal::SHUFFLE_NOTSUP):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eShuffleMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eShuffleMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eShuffleMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eShuffleMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eShuffleMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eShuffleMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eDeviceError : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DEVICEERROR_NO_ERROR = 0,
            DEVICEERROR_READ_ERROR = 1,
            DEVICEERROR_MOUNT_ERROR = 2,
            DEVICEERROR_UMOUNT_ERROR = 3,
            DEVICEERROR_MECHANICAL_ERROR = 4,
            DEVICEERROR_PARTITION_ERROR = 5,
            DEVICEERROR_FILESYSTEM_FORMAT_ERROR = 6,
            DEVICEERROR_FILESYSTEM_FORMAT_UNSUPPORTED = 7,
            DEVICEERROR_CORRUPTED = 8,
            DEVICEERROR_UNSUPPORTED = 9,
            DEVICEERROR_UNKNOWN = 10
        };
        
        eDeviceError() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DEVICEERROR_NO_ERROR)) {}
        eDeviceError(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DEVICEERROR_NO_ERROR):
                case static_cast<int32_t>(Literal::DEVICEERROR_READ_ERROR):
                case static_cast<int32_t>(Literal::DEVICEERROR_MOUNT_ERROR):
                case static_cast<int32_t>(Literal::DEVICEERROR_UMOUNT_ERROR):
                case static_cast<int32_t>(Literal::DEVICEERROR_MECHANICAL_ERROR):
                case static_cast<int32_t>(Literal::DEVICEERROR_PARTITION_ERROR):
                case static_cast<int32_t>(Literal::DEVICEERROR_FILESYSTEM_FORMAT_ERROR):
                case static_cast<int32_t>(Literal::DEVICEERROR_FILESYSTEM_FORMAT_UNSUPPORTED):
                case static_cast<int32_t>(Literal::DEVICEERROR_CORRUPTED):
                case static_cast<int32_t>(Literal::DEVICEERROR_UNSUPPORTED):
                case static_cast<int32_t>(Literal::DEVICEERROR_UNKNOWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eDeviceError &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eDeviceError &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eDeviceError &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eDeviceError &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eDeviceError &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eDeviceError &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eSlotState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SLOTSTATE_LOADING = 0,
            SLOTSTATE_READY = 1,
            SLOTSTATE_READY_AUTOINSERT = 2,
            SLOTSTATE_EJECTING = 3,
            SLOTSTATE_EJECTED = 4
        };
        
        eSlotState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SLOTSTATE_LOADING)) {}
        eSlotState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SLOTSTATE_LOADING):
                case static_cast<int32_t>(Literal::SLOTSTATE_READY):
                case static_cast<int32_t>(Literal::SLOTSTATE_READY_AUTOINSERT):
                case static_cast<int32_t>(Literal::SLOTSTATE_EJECTING):
                case static_cast<int32_t>(Literal::SLOTSTATE_EJECTED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eSlotState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eSlotState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eSlotState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eSlotState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eSlotState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eSlotState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eTitleContentType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            TITLETYPE_AUDIO = 1,
            TITLETYPE_VIDEO = 2,
            TITLETYPE_IMAGE = 4,
            TITLETYPE_UNKNOWN = 8
        };
        
        eTitleContentType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::TITLETYPE_AUDIO)) {}
        eTitleContentType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::TITLETYPE_AUDIO):
                case static_cast<int32_t>(Literal::TITLETYPE_VIDEO):
                case static_cast<int32_t>(Literal::TITLETYPE_IMAGE):
                case static_cast<int32_t>(Literal::TITLETYPE_UNKNOWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eTitleContentType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eTitleContentType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eTitleContentType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eTitleContentType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eTitleContentType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eTitleContentType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eMetadataType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            METADATATYPE_UNKNOWN = 0,
            METADATATYPE_NAME = 1,
            METADATATYPE_TITLE = 2,
            METADATATYPE_ARTIST = 4,
            METADATATYPE_NORMALIZEDARTIST = 8,
            METADATATYPE_ALBUMARTIST = 16,
            METADATATYPE_ALBUM = 32,
            METADATATYPE_GENRE = 64,
            METADATATYPE_COVERART = 128,
            METADTATATYPE_PLAYLIST = 256,
            METADTATATYPE_AUDIOBOOK = 1024,
            METADTATATYPE_CHAPTER = 2048,
            METADTATATYPE_PODCAST = 4096,
            METADTATATYPE_EPISODE = 8192,
            METADATATYPE_CATEGORY = 16384,
            METADATATYPE_FILE = 32768,
            METADATATYPE_COMPOSER = 65536,
            METADATATYPE_FOLDER = 131072,
            METADATATYPE_RELEASEDATE = 262144,
            METADATATYPE_YEAR = 524288,
            METADATATYPE_DECADE = 1048576,
            METADATATYPE_DURATION = 2097152,
            METADATATYPE_VIDEO = 4194304,
            METADATATYPE_KEYWORDS = 8388608,
            METADATATYPE_BPM = 16777216,
            METADATATYPE_TRACKNUM = 33554432,
            METADATATYPE_IMAGE = 67108864,
            METADATATYPE_MEDIUMID = 134217728,
            METADATATYPE_COMPILATION = 268435456,
            METADATATYPE_RATING = 536870912,
            METADATATYPE_CONDUCTOR = 1073741824
        };
        
        eMetadataType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::METADATATYPE_UNKNOWN)) {}
        eMetadataType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::METADATATYPE_UNKNOWN):
                case static_cast<int32_t>(Literal::METADATATYPE_NAME):
                case static_cast<int32_t>(Literal::METADATATYPE_TITLE):
                case static_cast<int32_t>(Literal::METADATATYPE_ARTIST):
                case static_cast<int32_t>(Literal::METADATATYPE_NORMALIZEDARTIST):
                case static_cast<int32_t>(Literal::METADATATYPE_ALBUMARTIST):
                case static_cast<int32_t>(Literal::METADATATYPE_ALBUM):
                case static_cast<int32_t>(Literal::METADATATYPE_GENRE):
                case static_cast<int32_t>(Literal::METADATATYPE_COVERART):
                case static_cast<int32_t>(Literal::METADTATATYPE_PLAYLIST):
                case static_cast<int32_t>(Literal::METADTATATYPE_AUDIOBOOK):
                case static_cast<int32_t>(Literal::METADTATATYPE_CHAPTER):
                case static_cast<int32_t>(Literal::METADTATATYPE_PODCAST):
                case static_cast<int32_t>(Literal::METADTATATYPE_EPISODE):
                case static_cast<int32_t>(Literal::METADATATYPE_CATEGORY):
                case static_cast<int32_t>(Literal::METADATATYPE_FILE):
                case static_cast<int32_t>(Literal::METADATATYPE_COMPOSER):
                case static_cast<int32_t>(Literal::METADATATYPE_FOLDER):
                case static_cast<int32_t>(Literal::METADATATYPE_RELEASEDATE):
                case static_cast<int32_t>(Literal::METADATATYPE_YEAR):
                case static_cast<int32_t>(Literal::METADATATYPE_DECADE):
                case static_cast<int32_t>(Literal::METADATATYPE_DURATION):
                case static_cast<int32_t>(Literal::METADATATYPE_VIDEO):
                case static_cast<int32_t>(Literal::METADATATYPE_KEYWORDS):
                case static_cast<int32_t>(Literal::METADATATYPE_BPM):
                case static_cast<int32_t>(Literal::METADATATYPE_TRACKNUM):
                case static_cast<int32_t>(Literal::METADATATYPE_IMAGE):
                case static_cast<int32_t>(Literal::METADATATYPE_MEDIUMID):
                case static_cast<int32_t>(Literal::METADATATYPE_COMPILATION):
                case static_cast<int32_t>(Literal::METADATATYPE_RATING):
                case static_cast<int32_t>(Literal::METADATATYPE_CONDUCTOR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eMetadataType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eMetadataType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eMetadataType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eMetadataType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eMetadataType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eMetadataType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    typedef std::unordered_map<::v1::com::harman::mmpres::MMPresTypes::eMetadataType, uint64_t, CommonAPI::EnumHasher<::v1::com::harman::mmpres::MMPresTypes::eMetadataType>> MetadataCountMap;
    struct tDevice : CommonAPI::Struct<uint64_t, eDeviceType, eDeviceError, uint32_t, uint32_t, uint32_t, std::string, std::string, uint32_t, MetadataCountMap> {
    	
    	tDevice() {
    	}
    	tDevice(const uint64_t &_deviceId, const eDeviceType &_deviceType, const eDeviceError &_deviceError, const uint32_t &_deviceCaps, const uint32_t &_deviceRepeatModes, const uint32_t &_devicesShuffleModes, const std::string &_hardwareIdentifier, const std::string &_deviceName, const uint32_t &_browseCaps, const MetadataCountMap &_categoryCounts)
    	{
    		std::get<0>(values_) = _deviceId;
    		std::get<1>(values_) = _deviceType;
    		std::get<2>(values_) = _deviceError;
    		std::get<3>(values_) = _deviceCaps;
    		std::get<4>(values_) = _deviceRepeatModes;
    		std::get<5>(values_) = _devicesShuffleModes;
    		std::get<6>(values_) = _hardwareIdentifier;
    		std::get<7>(values_) = _deviceName;
    		std::get<8>(values_) = _browseCaps;
    		std::get<9>(values_) = _categoryCounts;
    	}
    	inline const uint64_t &getDeviceId() const { return std::get<0>(values_); }
    	inline void setDeviceId(const uint64_t &_value) { std::get<0>(values_) = _value; }
    	inline const eDeviceType &getDeviceType() const { return std::get<1>(values_); }
    	inline void setDeviceType(const eDeviceType &_value) { std::get<1>(values_) = _value; }
    	inline const eDeviceError &getDeviceError() const { return std::get<2>(values_); }
    	inline void setDeviceError(const eDeviceError &_value) { std::get<2>(values_) = _value; }
    	inline const uint32_t &getDeviceCaps() const { return std::get<3>(values_); }
    	inline void setDeviceCaps(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	inline const uint32_t &getDeviceRepeatModes() const { return std::get<4>(values_); }
    	inline void setDeviceRepeatModes(const uint32_t &_value) { std::get<4>(values_) = _value; }
    	inline const uint32_t &getDevicesShuffleModes() const { return std::get<5>(values_); }
    	inline void setDevicesShuffleModes(const uint32_t &_value) { std::get<5>(values_) = _value; }
    	inline const std::string &getHardwareIdentifier() const { return std::get<6>(values_); }
    	inline void setHardwareIdentifier(const std::string &_value) { std::get<6>(values_) = _value; }
    	inline const std::string &getDeviceName() const { return std::get<7>(values_); }
    	inline void setDeviceName(const std::string &_value) { std::get<7>(values_) = _value; }
    	inline const uint32_t &getBrowseCaps() const { return std::get<8>(values_); }
    	inline void setBrowseCaps(const uint32_t &_value) { std::get<8>(values_) = _value; }
    	inline const MetadataCountMap &getCategoryCounts() const { return std::get<9>(values_); }
    	inline void setCategoryCounts(const MetadataCountMap &_value) { std::get<9>(values_) = _value; }
    	inline bool operator==(const tDevice& _other) const {
                return (getDeviceId() == _other.getDeviceId() && getDeviceType() == _other.getDeviceType() && getDeviceError() == _other.getDeviceError() && getDeviceCaps() == _other.getDeviceCaps() && getDeviceRepeatModes() == _other.getDeviceRepeatModes() && getDevicesShuffleModes() == _other.getDevicesShuffleModes() && getHardwareIdentifier() == _other.getHardwareIdentifier() && getDeviceName() == _other.getDeviceName() && getBrowseCaps() == _other.getBrowseCaps() && getCategoryCounts() == _other.getCategoryCounts());
        }
    	inline bool operator!=(const tDevice &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct tSlot : CommonAPI::Struct<uint8_t, eSlotType, eSlotState, tDevice> {
    	
    	tSlot() {
    	}
    	tSlot(const uint8_t &_slotId, const eSlotType &_slotType, const eSlotState &_slotState, const tDevice &_device)
    	{
    		std::get<0>(values_) = _slotId;
    		std::get<1>(values_) = _slotType;
    		std::get<2>(values_) = _slotState;
    		std::get<3>(values_) = _device;
    	}
    	inline const uint8_t &getSlotId() const { return std::get<0>(values_); }
    	inline void setSlotId(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	inline const eSlotType &getSlotType() const { return std::get<1>(values_); }
    	inline void setSlotType(const eSlotType &_value) { std::get<1>(values_) = _value; }
    	inline const eSlotState &getSlotState() const { return std::get<2>(values_); }
    	inline void setSlotState(const eSlotState &_value) { std::get<2>(values_) = _value; }
    	inline const tDevice &getDevice() const { return std::get<3>(values_); }
    	inline void setDevice(const tDevice &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const tSlot& _other) const {
                return (getSlotId() == _other.getSlotId() && getSlotType() == _other.getSlotType() && getSlotState() == _other.getSlotState() && getDevice() == _other.getDevice());
        }
    	inline bool operator!=(const tSlot &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MMPresTypes::tSlot> tSlotList;
    
    struct eFilterType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            BEGINS_WITH = 0,
            NOT_BEGIN_WITH = 1,
            ENDS_WITH = 2,
            NOT_END_WITH = 3,
            CONTAINS = 4,
            NOT_CONTAINS = 5,
            EXACT_MATCH = 6
        };
        
        eFilterType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::BEGINS_WITH)) {}
        eFilterType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::BEGINS_WITH):
                case static_cast<int32_t>(Literal::NOT_BEGIN_WITH):
                case static_cast<int32_t>(Literal::ENDS_WITH):
                case static_cast<int32_t>(Literal::NOT_END_WITH):
                case static_cast<int32_t>(Literal::CONTAINS):
                case static_cast<int32_t>(Literal::NOT_CONTAINS):
                case static_cast<int32_t>(Literal::EXACT_MATCH):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eFilterType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eFilterType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eFilterType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eFilterType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eFilterType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eFilterType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    typedef std::unordered_map<::v1::com::harman::mmpres::MMPresTypes::eMetadataType, uint64_t, CommonAPI::EnumHasher<::v1::com::harman::mmpres::MMPresTypes::eMetadataType>> FilterIDMap;
    typedef std::unordered_map<::v1::com::harman::mmpres::MMPresTypes::eFilterType, std::string, CommonAPI::EnumHasher<::v1::com::harman::mmpres::MMPresTypes::eFilterType>> FilterMap;
    typedef std::unordered_map<::v1::com::harman::mmpres::MMPresTypes::eMetadataType, std::string, CommonAPI::EnumHasher<::v1::com::harman::mmpres::MMPresTypes::eMetadataType>> MetadataStringMap;
    
    struct eSessionQueryTypes : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SESSION_QUERY_FS_BROWSE = 0,
            SESSION_QUERY_METADATA_BROWSE = 1,
            SESSION_QUERY_NOWPLAYINGLIST_BROWSE = 2,
            SESSION_QUERY_HIGHESTRATED = 3,
            SESSION_QUERY_LOWESTRATED = 4,
            SESSION_QUERY_RECENTLYPLAYED = 5,
            SESSION_QUERY_FAVOURITE = 6
        };
        
        eSessionQueryTypes() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SESSION_QUERY_FS_BROWSE)) {}
        eSessionQueryTypes(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SESSION_QUERY_FS_BROWSE):
                case static_cast<int32_t>(Literal::SESSION_QUERY_METADATA_BROWSE):
                case static_cast<int32_t>(Literal::SESSION_QUERY_NOWPLAYINGLIST_BROWSE):
                case static_cast<int32_t>(Literal::SESSION_QUERY_HIGHESTRATED):
                case static_cast<int32_t>(Literal::SESSION_QUERY_LOWESTRATED):
                case static_cast<int32_t>(Literal::SESSION_QUERY_RECENTLYPLAYED):
                case static_cast<int32_t>(Literal::SESSION_QUERY_FAVOURITE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eSessionQueryTypes &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eSessionQueryTypes &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eSessionQueryTypes &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eSessionQueryTypes &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eSessionQueryTypes &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eSessionQueryTypes &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct tMetadataItem : CommonAPI::Struct<uint64_t, std::string, bool, bool, eFileSystemContentType, eTitleContentType, MetadataCountMap, MetadataStringMap, eMetadataType> {
    	
    	tMetadataItem() {
    		std::get<2>(values_) = false;
    		std::get<3>(values_) = false;
    	}
    	tMetadataItem(const uint64_t &_ID, const std::string &_value, const bool &_playable, const bool &_browsable, const eFileSystemContentType &_folderType, const eTitleContentType &_contentType, const MetadataCountMap &_metadataCountMap, const MetadataStringMap &_metadataMap, const eMetadataType &_itemType)
    	{
    		std::get<0>(values_) = _ID;
    		std::get<1>(values_) = _value;
    		std::get<2>(values_) = _playable;
    		std::get<3>(values_) = _browsable;
    		std::get<4>(values_) = _folderType;
    		std::get<5>(values_) = _contentType;
    		std::get<6>(values_) = _metadataCountMap;
    		std::get<7>(values_) = _metadataMap;
    		std::get<8>(values_) = _itemType;
    	}
    	inline const uint64_t &getID() const { return std::get<0>(values_); }
    	inline void setID(const uint64_t &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getValue() const { return std::get<1>(values_); }
    	inline void setValue(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const bool &getPlayable() const { return std::get<2>(values_); }
    	inline void setPlayable(const bool _value) { std::get<2>(values_) = _value; }
    	inline const bool &getBrowsable() const { return std::get<3>(values_); }
    	inline void setBrowsable(const bool _value) { std::get<3>(values_) = _value; }
    	inline const eFileSystemContentType &getFolderType() const { return std::get<4>(values_); }
    	inline void setFolderType(const eFileSystemContentType &_value) { std::get<4>(values_) = _value; }
    	inline const eTitleContentType &getContentType() const { return std::get<5>(values_); }
    	inline void setContentType(const eTitleContentType &_value) { std::get<5>(values_) = _value; }
    	inline const MetadataCountMap &getMetadataCountMap() const { return std::get<6>(values_); }
    	inline void setMetadataCountMap(const MetadataCountMap &_value) { std::get<6>(values_) = _value; }
    	inline const MetadataStringMap &getMetadataMap() const { return std::get<7>(values_); }
    	inline void setMetadataMap(const MetadataStringMap &_value) { std::get<7>(values_) = _value; }
    	inline const eMetadataType &getItemType() const { return std::get<8>(values_); }
    	inline void setItemType(const eMetadataType &_value) { std::get<8>(values_) = _value; }
    	inline bool operator==(const tMetadataItem& _other) const {
                return (getID() == _other.getID() && getValue() == _other.getValue() && getPlayable() == _other.getPlayable() && getBrowsable() == _other.getBrowsable() && getFolderType() == _other.getFolderType() && getContentType() == _other.getContentType() && getMetadataCountMap() == _other.getMetadataCountMap() && getMetadataMap() == _other.getMetadataMap() && getItemType() == _other.getItemType());
        }
    	inline bool operator!=(const tMetadataItem &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MMPresTypes::tMetadataItem> MetadataItemList;
    
    struct eCallResult : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            CALLRESULT_OK = 0,
            CALLRESULT_CANCELLED_USER_REQUEST = 1,
            CALLRESULT_BAD_PARAMETER = 2,
            CALLRESULT_FAILED_MEDIUM_REMOVED = 3,
            CALLRESULT_FAILED_INTERNALERROR = 4,
            CALLRESULT_FAILED_NORES = 5
        };
        
        eCallResult() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::CALLRESULT_OK)) {}
        eCallResult(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::CALLRESULT_OK):
                case static_cast<int32_t>(Literal::CALLRESULT_CANCELLED_USER_REQUEST):
                case static_cast<int32_t>(Literal::CALLRESULT_BAD_PARAMETER):
                case static_cast<int32_t>(Literal::CALLRESULT_FAILED_MEDIUM_REMOVED):
                case static_cast<int32_t>(Literal::CALLRESULT_FAILED_INTERNALERROR):
                case static_cast<int32_t>(Literal::CALLRESULT_FAILED_NORES):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eCallResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eCallResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eCallResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eCallResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eCallResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eCallResult &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ePlayState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            PLAYSTATE_PLAYING = 0,
            PLAYSTATE_PAUSED = 1,
            PLAYSTATE_STOPPED = 2,
            PLAYSTATE_FASTFORWARD = 3,
            PLAYSTATE_FASTREVERSE = 4,
            PLAYSTATE_ERROR = 5,
            PLAYSTATE_UNKNOWN = 6
        };
        
        ePlayState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::PLAYSTATE_PLAYING)) {}
        ePlayState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::PLAYSTATE_PLAYING):
                case static_cast<int32_t>(Literal::PLAYSTATE_PAUSED):
                case static_cast<int32_t>(Literal::PLAYSTATE_STOPPED):
                case static_cast<int32_t>(Literal::PLAYSTATE_FASTFORWARD):
                case static_cast<int32_t>(Literal::PLAYSTATE_FASTREVERSE):
                case static_cast<int32_t>(Literal::PLAYSTATE_ERROR):
                case static_cast<int32_t>(Literal::PLAYSTATE_UNKNOWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ePlayState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ePlayState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ePlayState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ePlayState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ePlayState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ePlayState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eScanStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SCAN_ON = 0,
            SCAN_OFF = 1,
            SCAN_ERROR = 2,
            SCAN_UNKNOWN = 3
        };
        
        eScanStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SCAN_ON)) {}
        eScanStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SCAN_ON):
                case static_cast<int32_t>(Literal::SCAN_OFF):
                case static_cast<int32_t>(Literal::SCAN_ERROR):
                case static_cast<int32_t>(Literal::SCAN_UNKNOWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eScanStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eScanStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eScanStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eScanStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eScanStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eScanStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eTrackSeekSpeed : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SPEED_ZERO = 1,
            SPEED_1X = 2,
            SPEED_2X = 4,
            SPEED_4X = 8,
            SPEED_8X = 16,
            SPEED_16X = 32,
            SPEED_32X = 64,
            SPEED_64X = 128,
            SPEED_128X = 256,
            SPEED_DEVICE_DEPENDENT = 512
        };
        
        eTrackSeekSpeed() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SPEED_ZERO)) {}
        eTrackSeekSpeed(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SPEED_ZERO):
                case static_cast<int32_t>(Literal::SPEED_1X):
                case static_cast<int32_t>(Literal::SPEED_2X):
                case static_cast<int32_t>(Literal::SPEED_4X):
                case static_cast<int32_t>(Literal::SPEED_8X):
                case static_cast<int32_t>(Literal::SPEED_16X):
                case static_cast<int32_t>(Literal::SPEED_32X):
                case static_cast<int32_t>(Literal::SPEED_64X):
                case static_cast<int32_t>(Literal::SPEED_128X):
                case static_cast<int32_t>(Literal::SPEED_DEVICE_DEPENDENT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eTrackSeekSpeed &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eTrackSeekSpeed &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eTrackSeekSpeed &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eTrackSeekSpeed &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eTrackSeekSpeed &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eTrackSeekSpeed &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct tTrackState : CommonAPI::Struct<uint64_t, uint64_t> {
    	
    	tTrackState() {
    	}
    	tTrackState(const uint64_t &_currentTrack, const uint64_t &_totalTracks)
    	{
    		std::get<0>(values_) = _currentTrack;
    		std::get<1>(values_) = _totalTracks;
    	}
    	inline const uint64_t &getCurrentTrack() const { return std::get<0>(values_); }
    	inline void setCurrentTrack(const uint64_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint64_t &getTotalTracks() const { return std::get<1>(values_); }
    	inline void setTotalTracks(const uint64_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const tTrackState& _other) const {
                return (getCurrentTrack() == _other.getCurrentTrack() && getTotalTracks() == _other.getTotalTracks());
        }
    	inline bool operator!=(const tTrackState &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct tNowPlayingInfo : CommonAPI::Struct<std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string, uint64_t, bool, uint64_t, uint64_t, uint64_t, bool, eMetadataType> {
    	
    	tNowPlayingInfo() {
    		std::get<11>(values_) = false;
    		std::get<15>(values_) = false;
    	}
    	tNowPlayingInfo(const std::string &_title, const std::string &_artist, const std::string &_album, const std::string &_genre, const std::string &_composer, const std::string &_filename, const std::string &_audiobook, const std::string &_podcast, const std::string &_episode, const std::string &_playlist, const uint64_t &_year, const bool &_chaptersAvailable, const uint64_t &_chapterNumber, const uint64_t &_mediumId, const uint64_t &_fid, const bool &_isFav, const eMetadataType &_nowPlayingItemType)
    	{
    		std::get<0>(values_) = _title;
    		std::get<1>(values_) = _artist;
    		std::get<2>(values_) = _album;
    		std::get<3>(values_) = _genre;
    		std::get<4>(values_) = _composer;
    		std::get<5>(values_) = _filename;
    		std::get<6>(values_) = _audiobook;
    		std::get<7>(values_) = _podcast;
    		std::get<8>(values_) = _episode;
    		std::get<9>(values_) = _playlist;
    		std::get<10>(values_) = _year;
    		std::get<11>(values_) = _chaptersAvailable;
    		std::get<12>(values_) = _chapterNumber;
    		std::get<13>(values_) = _mediumId;
    		std::get<14>(values_) = _fid;
    		std::get<15>(values_) = _isFav;
    		std::get<16>(values_) = _nowPlayingItemType;
    	}
    	inline const std::string &getTitle() const { return std::get<0>(values_); }
    	inline void setTitle(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getArtist() const { return std::get<1>(values_); }
    	inline void setArtist(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const std::string &getAlbum() const { return std::get<2>(values_); }
    	inline void setAlbum(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getGenre() const { return std::get<3>(values_); }
    	inline void setGenre(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline const std::string &getComposer() const { return std::get<4>(values_); }
    	inline void setComposer(const std::string &_value) { std::get<4>(values_) = _value; }
    	inline const std::string &getFilename() const { return std::get<5>(values_); }
    	inline void setFilename(const std::string &_value) { std::get<5>(values_) = _value; }
    	inline const std::string &getAudiobook() const { return std::get<6>(values_); }
    	inline void setAudiobook(const std::string &_value) { std::get<6>(values_) = _value; }
    	inline const std::string &getPodcast() const { return std::get<7>(values_); }
    	inline void setPodcast(const std::string &_value) { std::get<7>(values_) = _value; }
    	inline const std::string &getEpisode() const { return std::get<8>(values_); }
    	inline void setEpisode(const std::string &_value) { std::get<8>(values_) = _value; }
    	inline const std::string &getPlaylist() const { return std::get<9>(values_); }
    	inline void setPlaylist(const std::string &_value) { std::get<9>(values_) = _value; }
    	inline const uint64_t &getYear() const { return std::get<10>(values_); }
    	inline void setYear(const uint64_t &_value) { std::get<10>(values_) = _value; }
    	inline const bool &getChaptersAvailable() const { return std::get<11>(values_); }
    	inline void setChaptersAvailable(const bool _value) { std::get<11>(values_) = _value; }
    	inline const uint64_t &getChapterNumber() const { return std::get<12>(values_); }
    	inline void setChapterNumber(const uint64_t &_value) { std::get<12>(values_) = _value; }
    	inline const uint64_t &getMediumId() const { return std::get<13>(values_); }
    	inline void setMediumId(const uint64_t &_value) { std::get<13>(values_) = _value; }
    	inline const uint64_t &getFid() const { return std::get<14>(values_); }
    	inline void setFid(const uint64_t &_value) { std::get<14>(values_) = _value; }
    	inline const bool &getIsFav() const { return std::get<15>(values_); }
    	inline void setIsFav(const bool _value) { std::get<15>(values_) = _value; }
    	inline const eMetadataType &getNowPlayingItemType() const { return std::get<16>(values_); }
    	inline void setNowPlayingItemType(const eMetadataType &_value) { std::get<16>(values_) = _value; }
    	inline bool operator==(const tNowPlayingInfo& _other) const {
                return (getTitle() == _other.getTitle() && getArtist() == _other.getArtist() && getAlbum() == _other.getAlbum() && getGenre() == _other.getGenre() && getComposer() == _other.getComposer() && getFilename() == _other.getFilename() && getAudiobook() == _other.getAudiobook() && getPodcast() == _other.getPodcast() && getEpisode() == _other.getEpisode() && getPlaylist() == _other.getPlaylist() && getYear() == _other.getYear() && getChaptersAvailable() == _other.getChaptersAvailable() && getChapterNumber() == _other.getChapterNumber() && getMediumId() == _other.getMediumId() && getFid() == _other.getFid() && getIsFav() == _other.getIsFav() && getNowPlayingItemType() == _other.getNowPlayingItemType());
        }
    	inline bool operator!=(const tNowPlayingInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct eArtWorkAvailabilityStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ARTWORK_STATUS_AVAILABLE = 0,
            ARTWORK_STATUS_UNAVAILABLE = 1,
            ARTWORK_STATUS_UNKNOWN = 2,
            ARTWORK_NOT_SUPPORTED = 3
        };
        
        eArtWorkAvailabilityStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ARTWORK_STATUS_AVAILABLE)) {}
        eArtWorkAvailabilityStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ARTWORK_STATUS_AVAILABLE):
                case static_cast<int32_t>(Literal::ARTWORK_STATUS_UNAVAILABLE):
                case static_cast<int32_t>(Literal::ARTWORK_STATUS_UNKNOWN):
                case static_cast<int32_t>(Literal::ARTWORK_NOT_SUPPORTED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eArtWorkAvailabilityStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eArtWorkAvailabilityStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eArtWorkAvailabilityStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eArtWorkAvailabilityStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eArtWorkAvailabilityStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eArtWorkAvailabilityStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct tArtWorkImageProperty : CommonAPI::Struct<uint64_t, uint64_t, uint64_t, std::string> {
    	
    	tArtWorkImageProperty() {
    	}
    	tArtWorkImageProperty(const uint64_t &_width, const uint64_t &_height, const uint64_t &_size, const std::string &_description)
    	{
    		std::get<0>(values_) = _width;
    		std::get<1>(values_) = _height;
    		std::get<2>(values_) = _size;
    		std::get<3>(values_) = _description;
    	}
    	inline const uint64_t &getWidth() const { return std::get<0>(values_); }
    	inline void setWidth(const uint64_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint64_t &getHeight() const { return std::get<1>(values_); }
    	inline void setHeight(const uint64_t &_value) { std::get<1>(values_) = _value; }
    	inline const uint64_t &getSize() const { return std::get<2>(values_); }
    	inline void setSize(const uint64_t &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getDescription() const { return std::get<3>(values_); }
    	inline void setDescription(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const tArtWorkImageProperty& _other) const {
                return (getWidth() == _other.getWidth() && getHeight() == _other.getHeight() && getSize() == _other.getSize() && getDescription() == _other.getDescription());
        }
    	inline bool operator!=(const tArtWorkImageProperty &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct tArtWorkImagePositionType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ALBUMART_POSITION_TIME = 0,
            ALBUMART_POSITION_CHAPTERNUMBER = 1,
            ALBUMART_POSITION_NONE = 2
        };
        
        tArtWorkImagePositionType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ALBUMART_POSITION_TIME)) {}
        tArtWorkImagePositionType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ALBUMART_POSITION_TIME):
                case static_cast<int32_t>(Literal::ALBUMART_POSITION_CHAPTERNUMBER):
                case static_cast<int32_t>(Literal::ALBUMART_POSITION_NONE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const tArtWorkImagePositionType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const tArtWorkImagePositionType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const tArtWorkImagePositionType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const tArtWorkImagePositionType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const tArtWorkImagePositionType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const tArtWorkImagePositionType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct tArtWorkArtImage : CommonAPI::Struct<uint8_t, tArtWorkImagePositionType, uint64_t, tArtWorkImageProperty> {
    	
    	tArtWorkArtImage() {
    	}
    	tArtWorkArtImage(const uint8_t &_imageNumber, const tArtWorkImagePositionType &_positionType, const uint64_t &_artWorkPosition, const tArtWorkImageProperty &_property)
    	{
    		std::get<0>(values_) = _imageNumber;
    		std::get<1>(values_) = _positionType;
    		std::get<2>(values_) = _artWorkPosition;
    		std::get<3>(values_) = _property;
    	}
    	inline const uint8_t &getImageNumber() const { return std::get<0>(values_); }
    	inline void setImageNumber(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	inline const tArtWorkImagePositionType &getPositionType() const { return std::get<1>(values_); }
    	inline void setPositionType(const tArtWorkImagePositionType &_value) { std::get<1>(values_) = _value; }
    	inline const uint64_t &getArtWorkPosition() const { return std::get<2>(values_); }
    	inline void setArtWorkPosition(const uint64_t &_value) { std::get<2>(values_) = _value; }
    	inline const tArtWorkImageProperty &getProperty() const { return std::get<3>(values_); }
    	inline void setProperty(const tArtWorkImageProperty &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const tArtWorkArtImage& _other) const {
                return (getImageNumber() == _other.getImageNumber() && getPositionType() == _other.getPositionType() && getArtWorkPosition() == _other.getArtWorkPosition() && getProperty() == _other.getProperty());
        }
    	inline bool operator!=(const tArtWorkArtImage &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MMPresTypes::tArtWorkArtImage> artWorkImageInfo;
    struct tAlbumArtInformation : CommonAPI::Struct<uint8_t, artWorkImageInfo> {
    	
    	tAlbumArtInformation() {
    	}
    	tAlbumArtInformation(const uint8_t &_totalImages, const artWorkImageInfo &_info)
    	{
    		std::get<0>(values_) = _totalImages;
    		std::get<1>(values_) = _info;
    	}
    	inline const uint8_t &getTotalImages() const { return std::get<0>(values_); }
    	inline void setTotalImages(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	inline const artWorkImageInfo &getInfo() const { return std::get<1>(values_); }
    	inline void setInfo(const artWorkImageInfo &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const tAlbumArtInformation& _other) const {
                return (getTotalImages() == _other.getTotalImages() && getInfo() == _other.getInfo());
        }
    	inline bool operator!=(const tAlbumArtInformation &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct eQueryStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            QUERY_STATE_PROCESSING = 0,
            QUERY_STATE_FINISHED = 1,
            QUERY_STATE_ABORTED = 2
        };
        
        eQueryStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::QUERY_STATE_PROCESSING)) {}
        eQueryStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::QUERY_STATE_PROCESSING):
                case static_cast<int32_t>(Literal::QUERY_STATE_FINISHED):
                case static_cast<int32_t>(Literal::QUERY_STATE_ABORTED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eQueryStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eQueryStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eQueryStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eQueryStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eQueryStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eQueryStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.mmpres.MMPresTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct MMPresTypes

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for eSlotType
    template<>
    struct hash<::v1::com::harman::mmpres::MMPresTypes::eSlotType> {
        inline size_t operator()(const ::v1::com::harman::mmpres::MMPresTypes::eSlotType& eSlotType) const {
            return static_cast<int32_t>(eSlotType);
        }
    };
    //Hash for eFileSystemContentType
    template<>
    struct hash<::v1::com::harman::mmpres::MMPresTypes::eFileSystemContentType> {
        inline size_t operator()(const ::v1::com::harman::mmpres::MMPresTypes::eFileSystemContentType& eFileSystemContentType) const {
            return static_cast<int32_t>(eFileSystemContentType);
        }
    };
    //Hash for eDeviceType
    template<>
    struct hash<::v1::com::harman::mmpres::MMPresTypes::eDeviceType> {
        inline size_t operator()(const ::v1::com::harman::mmpres::MMPresTypes::eDeviceType& eDeviceType) const {
            return static_cast<int32_t>(eDeviceType);
        }
    };
    //Hash for eDeviceCapabilities
    template<>
    struct hash<::v1::com::harman::mmpres::MMPresTypes::eDeviceCapabilities> {
        inline size_t operator()(const ::v1::com::harman::mmpres::MMPresTypes::eDeviceCapabilities& eDeviceCapabilities) const {
            return static_cast<int32_t>(eDeviceCapabilities);
        }
    };
    //Hash for eRepeatMode
    template<>
    struct hash<::v1::com::harman::mmpres::MMPresTypes::eRepeatMode> {
        inline size_t operator()(const ::v1::com::harman::mmpres::MMPresTypes::eRepeatMode& eRepeatMode) const {
            return static_cast<int32_t>(eRepeatMode);
        }
    };
    //Hash for eShuffleMode
    template<>
    struct hash<::v1::com::harman::mmpres::MMPresTypes::eShuffleMode> {
        inline size_t operator()(const ::v1::com::harman::mmpres::MMPresTypes::eShuffleMode& eShuffleMode) const {
            return static_cast<int32_t>(eShuffleMode);
        }
    };
    //Hash for eDeviceError
    template<>
    struct hash<::v1::com::harman::mmpres::MMPresTypes::eDeviceError> {
        inline size_t operator()(const ::v1::com::harman::mmpres::MMPresTypes::eDeviceError& eDeviceError) const {
            return static_cast<int32_t>(eDeviceError);
        }
    };
    //Hash for eSlotState
    template<>
    struct hash<::v1::com::harman::mmpres::MMPresTypes::eSlotState> {
        inline size_t operator()(const ::v1::com::harman::mmpres::MMPresTypes::eSlotState& eSlotState) const {
            return static_cast<int32_t>(eSlotState);
        }
    };
    //Hash for eTitleContentType
    template<>
    struct hash<::v1::com::harman::mmpres::MMPresTypes::eTitleContentType> {
        inline size_t operator()(const ::v1::com::harman::mmpres::MMPresTypes::eTitleContentType& eTitleContentType) const {
            return static_cast<int32_t>(eTitleContentType);
        }
    };
    //Hash for eMetadataType
    template<>
    struct hash<::v1::com::harman::mmpres::MMPresTypes::eMetadataType> {
        inline size_t operator()(const ::v1::com::harman::mmpres::MMPresTypes::eMetadataType& eMetadataType) const {
            return static_cast<int32_t>(eMetadataType);
        }
    };
    //Hash for eFilterType
    template<>
    struct hash<::v1::com::harman::mmpres::MMPresTypes::eFilterType> {
        inline size_t operator()(const ::v1::com::harman::mmpres::MMPresTypes::eFilterType& eFilterType) const {
            return static_cast<int32_t>(eFilterType);
        }
    };
    //Hash for eSessionQueryTypes
    template<>
    struct hash<::v1::com::harman::mmpres::MMPresTypes::eSessionQueryTypes> {
        inline size_t operator()(const ::v1::com::harman::mmpres::MMPresTypes::eSessionQueryTypes& eSessionQueryTypes) const {
            return static_cast<int32_t>(eSessionQueryTypes);
        }
    };
    //Hash for eCallResult
    template<>
    struct hash<::v1::com::harman::mmpres::MMPresTypes::eCallResult> {
        inline size_t operator()(const ::v1::com::harman::mmpres::MMPresTypes::eCallResult& eCallResult) const {
            return static_cast<int32_t>(eCallResult);
        }
    };
    //Hash for ePlayState
    template<>
    struct hash<::v1::com::harman::mmpres::MMPresTypes::ePlayState> {
        inline size_t operator()(const ::v1::com::harman::mmpres::MMPresTypes::ePlayState& ePlayState) const {
            return static_cast<int32_t>(ePlayState);
        }
    };
    //Hash for eScanStatus
    template<>
    struct hash<::v1::com::harman::mmpres::MMPresTypes::eScanStatus> {
        inline size_t operator()(const ::v1::com::harman::mmpres::MMPresTypes::eScanStatus& eScanStatus) const {
            return static_cast<int32_t>(eScanStatus);
        }
    };
    //Hash for eTrackSeekSpeed
    template<>
    struct hash<::v1::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed> {
        inline size_t operator()(const ::v1::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed& eTrackSeekSpeed) const {
            return static_cast<int32_t>(eTrackSeekSpeed);
        }
    };
    //Hash for eArtWorkAvailabilityStatus
    template<>
    struct hash<::v1::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus> {
        inline size_t operator()(const ::v1::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus& eArtWorkAvailabilityStatus) const {
            return static_cast<int32_t>(eArtWorkAvailabilityStatus);
        }
    };
    //Hash for tArtWorkImagePositionType
    template<>
    struct hash<::v1::com::harman::mmpres::MMPresTypes::tArtWorkImagePositionType> {
        inline size_t operator()(const ::v1::com::harman::mmpres::MMPresTypes::tArtWorkImagePositionType& tArtWorkImagePositionType) const {
            return static_cast<int32_t>(tArtWorkImagePositionType);
        }
    };
    //Hash for eQueryStatus
    template<>
    struct hash<::v1::com::harman::mmpres::MMPresTypes::eQueryStatus> {
        inline size_t operator()(const ::v1::com::harman::mmpres::MMPresTypes::eQueryStatus& eQueryStatus) const {
            return static_cast<int32_t>(eQueryStatus);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_MMPRES_MM_Pres_Types_HPP_
