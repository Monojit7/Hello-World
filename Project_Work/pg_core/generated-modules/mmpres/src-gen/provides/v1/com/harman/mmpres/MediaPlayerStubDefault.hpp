/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Sat Nov 05 14:44:28 IST 2016
*/
#ifndef V1_COM_HARMAN_MMPRES_Media_Player_STUB_DEFAULT_HPP_
#define V1_COM_HARMAN_MMPRES_Media_Player_STUB_DEFAULT_HPP_


#include <v1/com/harman/mmpres/MediaPlayerStub.hpp>
#include <sstream>

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

/**
 * Provides a default implementation for MediaPlayerStubRemoteEvent and
 * MediaPlayerStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class MediaPlayerStubDefault
    : public virtual MediaPlayerStub {
public:
    MediaPlayerStubDefault();

    MediaPlayerStubRemoteEvent* initStubAdapter(const std::shared_ptr<MediaPlayerStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    virtual const uint64_t& getCurrentPlayTimeAttribute();
    virtual const uint64_t& getCurrentPlayTimeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setCurrentPlayTimeAttribute(uint64_t _value);
    virtual const uint64_t& getTotalPlayDurationAttribute();
    virtual const uint64_t& getTotalPlayDurationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setTotalPlayDurationAttribute(uint64_t _value);
    virtual const ::v1::com::harman::mmpres::MMPresTypes::tTrackState& getTrackStateAttribute();
    virtual const ::v1::com::harman::mmpres::MMPresTypes::tTrackState& getTrackStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setTrackStateAttribute(::v1::com::harman::mmpres::MMPresTypes::tTrackState _value);
    virtual const ::v1::com::harman::mmpres::MMPresTypes::tNowPlayingInfo& getNowPlayingDataAttribute();
    virtual const ::v1::com::harman::mmpres::MMPresTypes::tNowPlayingInfo& getNowPlayingDataAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setNowPlayingDataAttribute(::v1::com::harman::mmpres::MMPresTypes::tNowPlayingInfo _value);
    virtual const ::v1::com::harman::mmpres::MMPresTypes::ePlayState& getPlayStateAttribute();
    virtual const ::v1::com::harman::mmpres::MMPresTypes::ePlayState& getPlayStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPlayStateAttribute(::v1::com::harman::mmpres::MMPresTypes::ePlayState _value);
    virtual const ::v1::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed& getSpeedAttribute();
    virtual const ::v1::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed& getSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setSpeedAttribute(::v1::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed _value);
    virtual const ::v1::com::harman::mmpres::MMPresTypes::eRepeatMode& getRepeatModeAttribute();
    virtual const ::v1::com::harman::mmpres::MMPresTypes::eRepeatMode& getRepeatModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setRepeatModeAttribute(::v1::com::harman::mmpres::MMPresTypes::eRepeatMode _value);
    virtual const ::v1::com::harman::mmpres::MMPresTypes::eShuffleMode& getShuffleModeAttribute();
    virtual const ::v1::com::harman::mmpres::MMPresTypes::eShuffleMode& getShuffleModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setShuffleModeAttribute(::v1::com::harman::mmpres::MMPresTypes::eShuffleMode _value);
    virtual const ::v1::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus& getNowPlayingArtworkStatusAttribute();
    virtual const ::v1::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus& getNowPlayingArtworkStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setNowPlayingArtworkStatusAttribute(::v1::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus _value);
    virtual const ::v1::com::harman::mmpres::MMPresTypes::MetadataItemList& getPlaybackPreviewAttribute();
    virtual const ::v1::com::harman::mmpres::MMPresTypes::MetadataItemList& getPlaybackPreviewAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPlaybackPreviewAttribute(::v1::com::harman::mmpres::MMPresTypes::MetadataItemList _value);
    virtual const bool& getVideoPlayStatusAttribute();
    virtual const bool& getVideoPlayStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setVideoPlayStatusAttribute(bool _value);

    virtual void next(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _step, nextReply_t _reply);
    virtual void previous(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _step, previousReply_t _reply);
    virtual void pause(const std::shared_ptr<CommonAPI::ClientId> _client, pauseReply_t _reply);
    virtual void resume(const std::shared_ptr<CommonAPI::ClientId> _client, resumeReply_t _reply);
    virtual void seekToTime(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _timePosition, seekToTimeReply_t _reply);
    virtual void fastForward(const std::shared_ptr<CommonAPI::ClientId> _client, fastForwardReply_t _reply);
    virtual void fastReverse(const std::shared_ptr<CommonAPI::ClientId> _client, fastReverseReply_t _reply);
    virtual void setRepeat(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::mmpres::MMPresTypes::eRepeatMode _mode, setRepeatReply_t _reply);
    virtual void setShuffle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::mmpres::MMPresTypes::eShuffleMode _mode, setShuffleReply_t _reply);
    virtual void getNowPlayingAlbumArtInformation(const std::shared_ptr<CommonAPI::ClientId> _client, getNowPlayingAlbumArtInformationReply_t _reply);
    virtual void getNowPlayingAlbumArtPath(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _imageNumber, getNowPlayingAlbumArtPathReply_t _reply);
    virtual void getNowPlayingAlbumArtData(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _imageNumber, getNowPlayingAlbumArtDataReply_t _reply);
    virtual void getAlbumArtInformationForTrack(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _trackId, getAlbumArtInformationForTrackReply_t _reply);
    virtual void getAlbumArtPathForTrack(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _trackId, uint8_t _imageNumber, getAlbumArtPathForTrackReply_t _reply);
    virtual void getAlbumArtDataForTrack(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _trackId, uint8_t _imageNumber, getAlbumArtDataForTrackReply_t _reply);



protected:
    virtual bool trySetCurrentPlayTimeAttribute(uint64_t _value);
    virtual bool validateCurrentPlayTimeAttributeRequestedValue(const uint64_t &_value);
    virtual bool trySetTotalPlayDurationAttribute(uint64_t _value);
    virtual bool validateTotalPlayDurationAttributeRequestedValue(const uint64_t &_value);
    virtual bool trySetTrackStateAttribute(::v1::com::harman::mmpres::MMPresTypes::tTrackState _value);
    virtual bool validateTrackStateAttributeRequestedValue(const ::v1::com::harman::mmpres::MMPresTypes::tTrackState &_value);
    virtual bool trySetNowPlayingDataAttribute(::v1::com::harman::mmpres::MMPresTypes::tNowPlayingInfo _value);
    virtual bool validateNowPlayingDataAttributeRequestedValue(const ::v1::com::harman::mmpres::MMPresTypes::tNowPlayingInfo &_value);
    virtual bool trySetPlayStateAttribute(::v1::com::harman::mmpres::MMPresTypes::ePlayState _value);
    virtual bool validatePlayStateAttributeRequestedValue(const ::v1::com::harman::mmpres::MMPresTypes::ePlayState &_value);
    virtual bool trySetSpeedAttribute(::v1::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed _value);
    virtual bool validateSpeedAttributeRequestedValue(const ::v1::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed &_value);
    virtual bool trySetRepeatModeAttribute(::v1::com::harman::mmpres::MMPresTypes::eRepeatMode _value);
    virtual bool validateRepeatModeAttributeRequestedValue(const ::v1::com::harman::mmpres::MMPresTypes::eRepeatMode &_value);
    virtual bool trySetShuffleModeAttribute(::v1::com::harman::mmpres::MMPresTypes::eShuffleMode _value);
    virtual bool validateShuffleModeAttributeRequestedValue(const ::v1::com::harman::mmpres::MMPresTypes::eShuffleMode &_value);
    virtual bool trySetNowPlayingArtworkStatusAttribute(::v1::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus _value);
    virtual bool validateNowPlayingArtworkStatusAttributeRequestedValue(const ::v1::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus &_value);
    virtual bool trySetPlaybackPreviewAttribute(::v1::com::harman::mmpres::MMPresTypes::MetadataItemList _value);
    virtual bool validatePlaybackPreviewAttributeRequestedValue(const ::v1::com::harman::mmpres::MMPresTypes::MetadataItemList &_value);
    /**
     * description: Indicates playback video only,true: start video play; false: stop
     */
    virtual bool trySetVideoPlayStatusAttribute(bool _value);
    virtual bool validateVideoPlayStatusAttributeRequestedValue(const bool &_value);
    class RemoteEventHandler: public virtual MediaPlayerStubRemoteEvent {
    public:
        RemoteEventHandler(MediaPlayerStubDefault *_defaultStub);











        /**
         * description: Indicates playback video only,true: start video play; false: stop
         */


    private:
        MediaPlayerStubDefault *defaultStub_;
    };
private:
    MediaPlayerStubDefault::RemoteEventHandler remoteEventHandler_;

    uint64_t currentPlayTimeAttributeValue_ {};
    uint64_t totalPlayDurationAttributeValue_ {};
    ::v1::com::harman::mmpres::MMPresTypes::tTrackState trackStateAttributeValue_ {};
    ::v1::com::harman::mmpres::MMPresTypes::tNowPlayingInfo nowPlayingDataAttributeValue_ {};
    ::v1::com::harman::mmpres::MMPresTypes::ePlayState playStateAttributeValue_ {};
    ::v1::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed speedAttributeValue_ {};
    ::v1::com::harman::mmpres::MMPresTypes::eRepeatMode repeatModeAttributeValue_ {};
    ::v1::com::harman::mmpres::MMPresTypes::eShuffleMode shuffleModeAttributeValue_ {};
    ::v1::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus nowPlayingArtworkStatusAttributeValue_ {};
    ::v1::com::harman::mmpres::MMPresTypes::MetadataItemList playbackPreviewAttributeValue_ {};
    /**
     * description: Indicates playback video only,true: start video play; false: stop
     */
    bool videoPlayStatusAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_MMPRES_Media_Player_STUB_DEFAULT
