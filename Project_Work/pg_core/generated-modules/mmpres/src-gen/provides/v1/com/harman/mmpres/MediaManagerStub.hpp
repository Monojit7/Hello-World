/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Wed Oct 26 18:16:09 IST 2016
*/
#ifndef V1_COM_HARMAN_MMPRES_Media_Manager_STUB_HPP_
#define V1_COM_HARMAN_MMPRES_Media_Manager_STUB_HPP_

#include <functional>



#include <v1/com/harman/mmpres/MMPresTypes.hpp>

#include <v1/com/harman/mmpres/MediaManager.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service MediaManager. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class MediaManagerStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual MediaManager {
 public:

    /**
     * Sends a broadcast event for slotUpdate. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSlotUpdateEvent(const ::v1::com::harman::mmpres::MMPresTypes::tSlot &_slot) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for MediaManager.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class MediaManagerStubRemoteEvent
{
public:
    virtual ~MediaManagerStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service MediaManager to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class MediaManagerStub
    : public virtual CommonAPI::Stub<MediaManagerStubAdapter, MediaManagerStubRemoteEvent>
{
public:
    typedef std::function<void (::v1::com::harman::mmpres::MMPresTypes::tSlotList _list)>getSlotsReply_t;

    virtual ~MediaManagerStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /**
     * description: Gets details for all the configured slots in the pres ctrl. Whichever slots are
     *   configured in the Presentation Controller config will be returned here, with
     *   the 
    					  current status. 
    	 		     
             returns:	  tSlotList:	Slot data
     */
    /// This is the method that will be called on remote calls on the method getSlots.
    virtual void getSlots(const std::shared_ptr<CommonAPI::ClientId> _client, getSlotsReply_t _reply) = 0;
    /**
     * description: Emitted if there is a state change for any slot. 
    	 		     
             returns:	 
     *   slot:	Slot data
     */
    /// Sends a broadcast event for slotUpdate.
    virtual void fireSlotUpdateEvent(const ::v1::com::harman::mmpres::MMPresTypes::tSlot &_slot) = 0;

    using CommonAPI::Stub<MediaManagerStubAdapter, MediaManagerStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<MediaManagerStubAdapter, MediaManagerStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<MediaManagerStubAdapter, MediaManagerStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef MediaManagerStubRemoteEvent RemoteEventType;
    typedef MediaManager StubInterface;
};

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_MMPRES_Media_Manager_STUB_HPP_
