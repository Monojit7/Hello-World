/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Wed Oct 26 18:16:09 IST 2016
*/
/**
 * description: This class implements everything from Audiomanager -&gt; RoutingAdapter
 * author: lian zhang
 */
#ifndef V1_ORG_GENIVI_AM_ROUTINGINTERFACE_Routing_Control_STUB_HPP_
#define V1_ORG_GENIVI_AM_ROUTINGINTERFACE_Routing_Control_STUB_HPP_

#include <functional>



#include <v3/org/genivi/am_t.hpp>

#include <v1/org/genivi/am/routinginterface/RoutingControl.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace genivi {
namespace am {
namespace routinginterface {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service RoutingControl. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class RoutingControlStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual RoutingControl {
 public:

    /**
     * Sends a selective broadcast event for ackSetSourceState. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireAckSetSourceStateSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const ::v3::org::genivi::am_t::am_Handle_s &_handle, const ::v3::org::genivi::am_t::am_Error_e &_amError) = 0;
    virtual void sendAckSetSourceStateSelective(const ::v3::org::genivi::am_t::am_Handle_s &_handle, const ::v3::org::genivi::am_t::am_Error_e &_amError, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    virtual void subscribeForackSetSourceStateSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) = 0;
    virtual void unsubscribeFromackSetSourceStateSelective(const std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForAckSetSourceStateSelective() = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
    std::shared_ptr<CommonAPI::ClientIdList> subscribersForAckSetSourceStateSelective_;
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for RoutingControl.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class RoutingControlStubRemoteEvent
{
public:
    virtual ~RoutingControlStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service RoutingControl to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class RoutingControlStub
    : public virtual CommonAPI::Stub<RoutingControlStubAdapter, RoutingControlStubRemoteEvent>
{
public:
    typedef std::function<void ()>asyncSetSourceStateReply_t;

    virtual ~RoutingControlStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /**
     * description: This function is used to set the source state of a particular
     *   source.
    (at)return E_OK on success, E_UNKNOWN on error
     */
    /// This is the method that will be called on remote calls on the method asyncSetSourceState.
    virtual void asyncSetSourceState(const std::shared_ptr<CommonAPI::ClientId> _client, ::v3::org::genivi::am_t::am_Handle_s _handle, ::v3::org::genivi::am_t::am_sourceID_t _sourceID, ::v3::org::genivi::am_t::am_SourceState_e _state, asyncSetSourceStateReply_t _reply) = 0;
    /**
     * description: Acknowledges for asyncSetSourceState.
     */
    /**
     * Sends a selective broadcast event for ackSetSourceState to the given ClientIds.
     * The ClientIds must all be out of the set of subscribed clients.
     * If no ClientIds are given, the selective broadcast is sent to all subscribed clients.
     */
    virtual void fireAckSetSourceStateSelective(const ::v3::org::genivi::am_t::am_Handle_s &_handle, const ::v3::org::genivi::am_t::am_Error_e &_amError, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    /// retreives the list of all subscribed clients for ackSetSourceState
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForAckSetSourceStateSelective() = 0;
    /// Hook method for reacting on new subscriptions or removed subscriptions respectively for selective broadcasts.
    virtual void onAckSetSourceStateSelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event) = 0;
    /// Hook method for reacting accepting or denying new subscriptions 
    virtual bool onAckSetSourceStateSelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    using CommonAPI::Stub<RoutingControlStubAdapter, RoutingControlStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<RoutingControlStubAdapter, RoutingControlStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<RoutingControlStubAdapter, RoutingControlStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef RoutingControlStubRemoteEvent RemoteEventType;
    typedef RoutingControl StubInterface;
};

} // namespace routinginterface
} // namespace am
} // namespace genivi
} // namespace org
} // namespace v1


// Compatibility
namespace v1_1 = v1;

#endif // V1_ORG_GENIVI_AM_ROUTINGINTERFACE_Routing_Control_STUB_HPP_
