/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Wed Oct 26 18:16:09 IST 2016
*/
/**
 * description: PlayerExt interface provide favorite/most played/recent played songs retrive
 *   and delete.
 */
#include <v1/com/harman/media/PlayerExtDBusProxy.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace media {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createPlayerExtDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<PlayerExtDBusProxy>(_address, _connection);
}

INITIALIZER(registerPlayerExtDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		PlayerExt::getInterface(),
		&createPlayerExtDBusProxy);
}

PlayerExtDBusProxy::PlayerExtDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
{
}


    
    /**
     * description: Retrieve the favorite songs of the given devices.
     */
    void PlayerExtDBusProxy::getFavoriteList(const std::vector<uint64_t> &_devices, const uint64_t &_offset, const uint64_t &_count, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_devices(_devices, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getFavoriteList",
        "attt",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_devices, deploy_offset, deploy_count,
_internalCallStatus,
deploy_m, deploy_e);
_m = deploy_m.getValue();
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> PlayerExtDBusProxy::getFavoriteListAsync(const std::vector<uint64_t> &_devices, const uint64_t &_offset, const uint64_t &_count, GetFavoriteListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_devices(_devices, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getFavoriteList",
        "attt",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_devices, deploy_offset, deploy_count,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> _m, CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _m.getValue(), _e.getValue());
        },
        std::make_tuple(deploy_m, deploy_e));
    }
    /**
     * description: Retrieve the count of favorite songs of the given devices.
     */
    void PlayerExtDBusProxy::getFavoriteCount(const std::vector<uint64_t> &_devices, CommonAPI::CallStatus &_internalCallStatus, uint64_t &_count, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_devices(_devices, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint64_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getFavoriteCount",
        "at",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_devices,
_internalCallStatus,
deploy_count, deploy_e);
_count = deploy_count.getValue();
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> PlayerExtDBusProxy::getFavoriteCountAsync(const std::vector<uint64_t> &_devices, GetFavoriteCountAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_devices(_devices, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint64_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getFavoriteCount",
        "at",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_devices,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> _count, CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _count.getValue(), _e.getValue());
        },
        std::make_tuple(deploy_count, deploy_e));
    }
    /**
     * description: Add songs to favorite list.
     */
    void PlayerExtDBusProxy::addToFavoriteList(const std::vector<std::string> &_listToAdd, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_listToAdd(_listToAdd, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "addToFavoriteList",
        "as",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_listToAdd,
_internalCallStatus,
deploy_e);
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> PlayerExtDBusProxy::addToFavoriteListAsync(const std::vector<std::string> &_listToAdd, AddToFavoriteListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_listToAdd(_listToAdd, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "addToFavoriteList",
        "as",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_listToAdd,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _e.getValue());
        },
        std::make_tuple(deploy_e));
    }
    /**
     * description: Delete songs from favorite list.
     */
    void PlayerExtDBusProxy::deleteFromFavoriteList(const std::vector<std::string> &_listToDelete, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_listToDelete(_listToDelete, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "deleteFromFavoriteList",
        "as",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_listToDelete,
_internalCallStatus,
deploy_e);
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> PlayerExtDBusProxy::deleteFromFavoriteListAsync(const std::vector<std::string> &_listToDelete, DeleteFromFavoriteListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_listToDelete(_listToDelete, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "deleteFromFavoriteList",
        "as",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_listToDelete,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _e.getValue());
        },
        std::make_tuple(deploy_e));
    }
    /**
     * description: Check given song is favorite or not.
     */
    void PlayerExtDBusProxy::isFavoriteSong(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, bool &_b, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_uri(_uri, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_b(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "isFavoriteSong",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_uri,
_internalCallStatus,
deploy_b, deploy_e);
_b = deploy_b.getValue();
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> PlayerExtDBusProxy::isFavoriteSongAsync(const std::string &_uri, IsFavoriteSongAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_uri(_uri, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_b(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "isFavoriteSong",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_uri,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> _b, CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _b.getValue(), _e.getValue());
        },
        std::make_tuple(deploy_b, deploy_e));
    }
    /**
     * description: Retrieve the most played songs of the given devices.
     */
    void PlayerExtDBusProxy::getMostPlayedList(const std::vector<uint64_t> &_devices, const uint64_t &_offset, const uint64_t &_count, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_devices(_devices, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getMostPlayedList",
        "attt",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_devices, deploy_offset, deploy_count,
_internalCallStatus,
deploy_m, deploy_e);
_m = deploy_m.getValue();
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> PlayerExtDBusProxy::getMostPlayedListAsync(const std::vector<uint64_t> &_devices, const uint64_t &_offset, const uint64_t &_count, GetMostPlayedListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_devices(_devices, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getMostPlayedList",
        "attt",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_devices, deploy_offset, deploy_count,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> _m, CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _m.getValue(), _e.getValue());
        },
        std::make_tuple(deploy_m, deploy_e));
    }
    /**
     * description: Retrieve the count of most played songs of the given devices.
     */
    void PlayerExtDBusProxy::getMostPlayedCount(const std::vector<uint64_t> &_devices, CommonAPI::CallStatus &_internalCallStatus, uint64_t &_count, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_devices(_devices, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint64_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getMostPlayedCount",
        "at",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_devices,
_internalCallStatus,
deploy_count, deploy_e);
_count = deploy_count.getValue();
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> PlayerExtDBusProxy::getMostPlayedCountAsync(const std::vector<uint64_t> &_devices, GetMostPlayedCountAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_devices(_devices, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint64_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getMostPlayedCount",
        "at",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_devices,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> _count, CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _count.getValue(), _e.getValue());
        },
        std::make_tuple(deploy_count, deploy_e));
    }
    /**
     * description: Retrieve the recently played songs of the given devices.
     */
    void PlayerExtDBusProxy::getRecentPlayedList(const std::vector<uint64_t> &_devices, const uint64_t &_offset, const uint64_t &_count, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_devices(_devices, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getRecentPlayedList",
        "attt",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_devices, deploy_offset, deploy_count,
_internalCallStatus,
deploy_m, deploy_e);
_m = deploy_m.getValue();
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> PlayerExtDBusProxy::getRecentPlayedListAsync(const std::vector<uint64_t> &_devices, const uint64_t &_offset, const uint64_t &_count, GetRecentPlayedListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_devices(_devices, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getRecentPlayedList",
        "attt",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_devices, deploy_offset, deploy_count,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> _m, CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _m.getValue(), _e.getValue());
        },
        std::make_tuple(deploy_m, deploy_e));
    }
    /**
     * description: Retrieve the count of recently played songs of the given devices.
     */
    void PlayerExtDBusProxy::getRecentPlayedCount(const std::vector<uint64_t> &_devices, CommonAPI::CallStatus &_internalCallStatus, uint64_t &_count, ::v1::com::harman::media::BaseType::tBaseError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_devices(_devices, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint64_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getRecentPlayedCount",
        "at",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_devices,
_internalCallStatus,
deploy_count, deploy_e);
_count = deploy_count.getValue();
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> PlayerExtDBusProxy::getRecentPlayedCountAsync(const std::vector<uint64_t> &_devices, GetRecentPlayedCountAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_devices(_devices, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<uint64_t>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint64_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getRecentPlayedCount",
        "at",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_devices,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> _count, CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _count.getValue(), _e.getValue());
        },
        std::make_tuple(deploy_count, deploy_e));
    }


void PlayerExtDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace media
      } // namespace harman
      } // namespace com
      } // namespace v1
