/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Sat Nov 05 14:44:28 IST 2016
*/
#ifndef V1_COM_HARMAN_MMPRES_Media_Player_DBUS_STUB_ADAPTER_HPP_
#define V1_COM_HARMAN_MMPRES_Media_Player_DBUS_STUB_ADAPTER_HPP_

#include <v1/com/harman/mmpres/MediaPlayerStub.hpp>
#include "v1/com/harman/mmpres/MediaPlayerDBusDeployment.hpp"        
#include <v1/com/harman/mmpres/MMPresTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

typedef CommonAPI::DBus::DBusStubAdapterHelper<MediaPlayerStub> MediaPlayerDBusStubAdapterHelper;

class MediaPlayerDBusStubAdapterInternal
    : public virtual MediaPlayerStubAdapter,
      public MediaPlayerDBusStubAdapterHelper
{
public:
    MediaPlayerDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~MediaPlayerDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return MediaPlayer::getInterface();
    }

    void fireCurrentPlayTimeAttributeChanged(const uint64_t& value);
    void fireTotalPlayDurationAttributeChanged(const uint64_t& value);
    void fireTrackStateAttributeChanged(const ::v1::com::harman::mmpres::MMPresTypes::tTrackState& value);
    void fireNowPlayingDataAttributeChanged(const ::v1::com::harman::mmpres::MMPresTypes::tNowPlayingInfo& value);
    void firePlayStateAttributeChanged(const ::v1::com::harman::mmpres::MMPresTypes::ePlayState& value);
    void fireSpeedAttributeChanged(const ::v1::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed& value);
    void fireRepeatModeAttributeChanged(const ::v1::com::harman::mmpres::MMPresTypes::eRepeatMode& value);
    void fireShuffleModeAttributeChanged(const ::v1::com::harman::mmpres::MMPresTypes::eShuffleMode& value);
    void fireNowPlayingArtworkStatusAttributeChanged(const ::v1::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus& value);
    void firePlaybackPreviewAttributeChanged(const ::v1::com::harman::mmpres::MMPresTypes::MetadataItemList& value);
    /**
     * description: Indicates playback video only,true: start video play; false: stop
     */
    void fireVideoPlayStatusAttributeChanged(const bool& value);



    const MediaPlayerDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        CommonAPI::Version
        > getMediaPlayerInterfaceVersionStubDispatcher;

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        uint64_t                
        > getCurrentPlayTimeAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        uint64_t                
        > getTotalPlayDurationAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        ::v1::com::harman::mmpres::MMPresTypes::tTrackState,
        ::v1::com::harman::mmpres::MMPresTypes_::tTrackStateDeployment_t                
        > getTrackStateAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        ::v1::com::harman::mmpres::MMPresTypes::tNowPlayingInfo,
        ::v1::com::harman::mmpres::MMPresTypes_::tNowPlayingInfoDeployment_t                
        > getNowPlayingDataAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        ::v1::com::harman::mmpres::MMPresTypes::ePlayState                
        > getPlayStateAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        ::v1::com::harman::mmpres::MMPresTypes::eTrackSeekSpeed                
        > getSpeedAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        ::v1::com::harman::mmpres::MMPresTypes::eRepeatMode                
        > getRepeatModeAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        ::v1::com::harman::mmpres::MMPresTypes::eShuffleMode                
        > getShuffleModeAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        ::v1::com::harman::mmpres::MMPresTypes::eArtWorkAvailabilityStatus                
        > getNowPlayingArtworkStatusAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        ::v1::com::harman::mmpres::MMPresTypes::MetadataItemList,
        ::v1::com::harman::mmpres::MMPresTypes_::MetadataItemListDeployment_t                
        > getPlaybackPreviewAttributeStubDispatcher;
/**
 * description: Indicates playback video only,true: start video play; false: stop
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::mmpres::MediaPlayerStub,
        bool                
        > getVideoPlayStatusAttributeStubDispatcher;



static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<uint64_t>,
    std::tuple<::v1::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > nextStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<uint64_t>,
    std::tuple<::v1::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > previousStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<>,
    std::tuple<::v1::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > pauseStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<>,
    std::tuple<::v1::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > resumeStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<uint64_t>,
    std::tuple<::v1::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > seekToTimeStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<>,
    std::tuple<::v1::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > fastForwardStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<>,
    std::tuple<::v1::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > fastReverseStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<::v1::com::harman::mmpres::MMPresTypes::eRepeatMode>,
    std::tuple<::v1::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > setRepeatStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<::v1::com::harman::mmpres::MMPresTypes::eShuffleMode>,
    std::tuple<::v1::com::harman::mmpres::MMPresTypes::eCallResult>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > setShuffleStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<>,
    std::tuple<::v1::com::harman::mmpres::MMPresTypes::tAlbumArtInformation>,
    std::tuple<>,
    std::tuple<::v1::com::harman::mmpres::MMPresTypes_::tAlbumArtInformationDeployment_t>
    
    > getNowPlayingAlbumArtInformationStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<uint8_t>,
    std::tuple<std::string>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::StringDeployment>
    
    > getNowPlayingAlbumArtPathStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<uint8_t>,
    std::tuple<std::vector<uint8_t>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > getNowPlayingAlbumArtDataStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<uint64_t>,
    std::tuple<::v1::com::harman::mmpres::MMPresTypes::tAlbumArtInformation>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<::v1::com::harman::mmpres::MMPresTypes_::tAlbumArtInformationDeployment_t>
    
    > getAlbumArtInformationForTrackStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<uint64_t, uint8_t>,
    std::tuple<std::string>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::StringDeployment>
    
    > getAlbumArtPathForTrackStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::mmpres::MediaPlayerStub,
    std::tuple<uint64_t, uint8_t>,
    std::tuple<std::vector<uint8_t>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > getAlbumArtDataForTrackStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    MediaPlayerDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class MediaPlayerDBusStubAdapter
    : public MediaPlayerDBusStubAdapterInternal,
      public std::enable_shared_from_this<MediaPlayerDBusStubAdapter> {
public:
    MediaPlayerDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          MediaPlayerDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_MMPRES_Media_Player_DBUS_STUB_ADAPTER_HPP_
