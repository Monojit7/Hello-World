/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Thu Sep 22 00:23:23 IST 2016
*/
#include <v1/com/harman/btpres/CallManager.hpp>
#include <v1/com/harman/btpres/CallManagerDBusStubAdapter.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace btpres {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createCallManagerDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<CallManagerDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerCallManagerDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	CallManager::getInterface(), &createCallManagerDBusStubAdapter);
}

CallManagerDBusStubAdapterInternal::~CallManagerDBusStubAdapterInternal() {
    deactivateManagedInstances();
    CallManagerDBusStubAdapterHelper::deinit();
}

void CallManagerDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* CallManagerDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"getHfFeaturesListAttribute\">\n"
            "<arg name=\"value\" type=\"a(sa{ib})\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onHfFeaturesListAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"a(sa{ib})\" />\n"
        "</signal>\n"
        "<method name=\"getOperatorInfoListAttribute\">\n"
            "<arg name=\"value\" type=\"a(ibsssi)\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onOperatorInfoListAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"a(ibsssi)\" />\n"
        "</signal>\n"
        "<method name=\"getRssiChargeInfoListAttribute\">\n"
            "<arg name=\"value\" type=\"a(sii)\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onRssiChargeInfoListAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"a(sii)\" />\n"
        "</signal>\n"
        "<method name=\"getCallStateInfoAttribute\">\n"
            "<arg name=\"value\" type=\"a(yissssiui)\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onCallStateInfoAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"a(yissssiui)\" />\n"
        "</signal>\n"
        "<method name=\"getHfModeAttribute\">\n"
            "<arg name=\"value\" type=\"a(si)\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onHfModeAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"a(si)\" />\n"
        "</signal>\n"
        "<method name=\"getCallDurationAttribute\">\n"
            "<arg name=\"value\" type=\"a(yus)\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onCallDurationAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"a(yus)\" />\n"
        "</signal>\n"
        "<method name=\"getAudioStatusAttribute\">\n"
            "<arg name=\"value\" type=\"a(si)\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onAudioStatusAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"a(si)\" />\n"
        "</signal>\n"
        "<method name=\"getVrModeAttribute\">\n"
            "<arg name=\"value\" type=\"a(sb)\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onVrModeAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"a(sb)\" />\n"
        "</signal>\n"
        /**
         * description: Used to initate call from head unit HMI.
         * param: inAddress (String)    	: BD Address of the device to get the properties
        	     
         *   : dialNumber (String)	        : Number to be dialled
        	      : contactName
         *   (String)    	: Contact Name if available
        	      : imageUrl (String)	        :
         *   Image URL if available
        	returns: errorCode (eErrorType)	: API execution output
         */
        "<method name=\"dial\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_dialNumber\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_contactName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_imageUrl\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_numType\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Used to send DTMF tone from head unit to phone.
         * param: inAddress (String)	: BD Address of the device to get the properties
        	      :
         *   dtmfTone (String)	: DTMF tone to be sent
        	returns: errorCode (errorCode)	: API
         *   execution ouput
         */
        "<method name=\"sendDtmfTone\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_dtmfTone\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Accept incoming call from Head Unit
         * param: inAddress (String)	: BD Address of the device to get the properties
        	      :
         *   transfer (Boolean)	: Whether the call has to be transferred to Handset mode
         *   upon acceptance
        	returns: errorCode (eErrorType): API execution output
         */
        "<method name=\"acceptIncomingCall\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_transfer\" type=\"b\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: End call for passed call ID
         * param: inAddress (String)	: BD Address of the device to get the properties
        	      :
         *   callId (Int32)          : Call ID of the phone call to be ended
        	returns:
         *   errorCode (eErrorType): API execution output
         */
        "<method name=\"endCall\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_callId\" type=\"y\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: End currently active call for a particular device
         * param: inAddress (String)      : BD Address of the device to get the
         *   properties
        	returns: errorCode (eErrorType): API execution output
         */
        "<method name=\"endActiveCall\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Ends all available calls
         * param: inAddress (String)	: BD Address of the device to get the properties
        	returns:
         *   errorCode (eErrorType): API execution output
         */
        "<method name=\"endAllCalls\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Reject incoming calls
         * param: inAddress (String)	: BD Address of the device to get the properties
        	returns:
         *   errorCode (eErrorType): API execution output
         */
        "<method name=\"rejectIncomingCall\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Put current active call on hold
         * param: inAddress (String)	: BD Address of the device to get the properties
        	returns:
         *   errorCode (eErrorType): API execution output
         */
        "<method name=\"holdActiveCall\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Activate the held from head unit
         * param: inAddress (String)	: BD Address of the device to get the properties
        	returns:
         *   errorCode (eErrorType): API execution output
         */
        "<method name=\"resumeHeldCall\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Conference available calls from Head Unit
         * param: inAddress (String)	: BD Address of the device to get the properties
        	returns:
         *   errorCode (eErrorType): API execution output
         */
        "<method name=\"conferenceCall\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Interface is used by HMI to select a particular call in case two phone are
         *   connected each with a phone call.
         * param: inAddress (String)	: BD Address of the device to get the properties
        	      :
         *   callId (Int32)          : Call ID of the phone call to be selected
        	returns:
         *   errorCode (eErrorType): API execution output
         */
        "<method name=\"selectCall\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_callId\" type=\"y\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Interface is used by HMI to transfer call audio from Handsfree to Handset and
         *   vise versa
         * param: inAddress (String)	: BD Address of the device to get the properties
        	      :
         *   hfMode (Boolean)	: Handsfree Mode requested from the HMI
        	returns: errorCode
         *   (eErrorType): API execution output
         */
        "<method name=\"setHfMode\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_hfMode\" type=\"b\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Interface is used by HMI to active Phone VR mode from Head Unit
         * param: inAddress (String)	: BD Address of the device to get the properties
        	      :
         *   mode (Boolean)		: VR Mode requested from the HMI
        	returns: errorCode
         *   (eErrorType): API execution output
         */
        "<method name=\"setVRMode\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_mode\" type=\"b\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Interface is used by HMI to swap the active call available on Head Unit
         * param: inAddress (String)	: BD Address of the device to get the properties
        	returns:
         *   errorCode (eErrorType): API execution output
         */
        "<method name=\"swapCalls\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::CallManagerStub,
        CommonAPI::Version
        > CallManagerDBusStubAdapterInternal::getCallManagerInterfaceVersionStubDispatcher(&CallManagerStub::getInterfaceVersion, "uu");

/**
 * description: broadcast Handsfree supported features to registered clients
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::CallManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::hfpSupportedFeaturesList,
        ::v1::com::harman::btpres::BTPresTypes_::hfpSupportedFeaturesListDeployment_t
        > CallManagerDBusStubAdapterInternal::getHfFeaturesListAttributeStubDispatcher(
            &::v1::com::harman::btpres::CallManagerStub::getHfFeaturesListAttribute
            , "a(sa{ib})"
            );
/**
 * description: broadcast phone network operator information to registered clients
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::CallManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::networkOperatorInfoList,
        ::v1::com::harman::btpres::BTPresTypes_::networkOperatorInfoListDeployment_t
        > CallManagerDBusStubAdapterInternal::getOperatorInfoListAttributeStubDispatcher(
            &::v1::com::harman::btpres::CallManagerStub::getOperatorInfoListAttribute
            , "a(ibsssi)"
            );
/**
 * description: broadcast signal and charge levels to registered clients
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::CallManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::signalChargeInfoList,
        ::v1::com::harman::btpres::BTPresTypes_::signalChargeInfoListDeployment_t
        > CallManagerDBusStubAdapterInternal::getRssiChargeInfoListAttributeStubDispatcher(
            &::v1::com::harman::btpres::CallManagerStub::getRssiChargeInfoListAttribute
            , "a(sii)"
            );
/**
 * description: broadcast callstate status to registered clients
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::CallManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::callstateInfoList,
        ::v1::com::harman::btpres::BTPresTypes_::callstateInfoListDeployment_t
        > CallManagerDBusStubAdapterInternal::getCallStateInfoAttributeStubDispatcher(
            &::v1::com::harman::btpres::CallManagerStub::getCallStateInfoAttribute
            , "a(yissssiui)"
            );
/**
 * description: broadcast HF mode status to registered clients
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::CallManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::hfModeStatusList,
        ::v1::com::harman::btpres::BTPresTypes_::hfModeStatusListDeployment_t
        > CallManagerDBusStubAdapterInternal::getHfModeAttributeStubDispatcher(
            &::v1::com::harman::btpres::CallManagerStub::getHfModeAttribute
            , "a(si)"
            );
/**
 * description: broadcast call duration to registered clients
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::CallManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::callDurationList,
        ::v1::com::harman::btpres::BTPresTypes_::callDurationListDeployment_t
        > CallManagerDBusStubAdapterInternal::getCallDurationAttributeStubDispatcher(
            &::v1::com::harman::btpres::CallManagerStub::getCallDurationAttribute
            , "a(yus)"
            );
/**
 * description: broadcast SCO audio status to registered clients
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::CallManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::audioStatusList,
        ::v1::com::harman::btpres::BTPresTypes_::audioStatusListDeployment_t
        > CallManagerDBusStubAdapterInternal::getAudioStatusAttributeStubDispatcher(
            &::v1::com::harman::btpres::CallManagerStub::getAudioStatusAttribute
            , "a(si)"
            );
/**
 * description: broadcast VR status to registered clients
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::CallManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::vrModeStatusList,
        ::v1::com::harman::btpres::BTPresTypes_::vrModeStatusListDeployment_t
        > CallManagerDBusStubAdapterInternal::getVrModeAttributeStubDispatcher(
            &::v1::com::harman::btpres::CallManagerStub::getVrModeAttribute
            , "a(sb)"
            );



/**
 * description: Used to initate call from head unit HMI.
 * param: inAddress (String)    	: BD Address of the device to get the properties
	     
 *   : dialNumber (String)	        : Number to be dialled
	      : contactName
 *   (String)    	: Contact Name if available
	      : imageUrl (String)	        :
 *   Image URL if available
	returns: errorCode (eErrorType)	: API execution output
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string, std::string, std::string, std::string, ::v1::com::harman::btpres::BTPresTypes::eTelType>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CallManagerDBusStubAdapterInternal::dialStubDispatcher(
    &CallManagerStub::dial, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Used to send DTMF tone from head unit to phone.
 * param: inAddress (String)	: BD Address of the device to get the properties
	      :
 *   dtmfTone (String)	: DTMF tone to be sent
	returns: errorCode (errorCode)	: API
 *   execution ouput
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string, std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CallManagerDBusStubAdapterInternal::sendDtmfToneStubDispatcher(
    &CallManagerStub::sendDtmfTone, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Accept incoming call from Head Unit
 * param: inAddress (String)	: BD Address of the device to get the properties
	      :
 *   transfer (Boolean)	: Whether the call has to be transferred to Handset mode
 *   upon acceptance
	returns: errorCode (eErrorType): API execution output
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string, bool>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CallManagerDBusStubAdapterInternal::acceptIncomingCallStubDispatcher(
    &CallManagerStub::acceptIncomingCall, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: End call for passed call ID
 * param: inAddress (String)	: BD Address of the device to get the properties
	      :
 *   callId (Int32)          : Call ID of the phone call to be ended
	returns:
 *   errorCode (eErrorType): API execution output
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string, int8_t>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CallManagerDBusStubAdapterInternal::endCallStubDispatcher(
    &CallManagerStub::endCall, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: End currently active call for a particular device
 * param: inAddress (String)      : BD Address of the device to get the
 *   properties
	returns: errorCode (eErrorType): API execution output
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CallManagerDBusStubAdapterInternal::endActiveCallStubDispatcher(
    &CallManagerStub::endActiveCall, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Ends all available calls
 * param: inAddress (String)	: BD Address of the device to get the properties
	returns:
 *   errorCode (eErrorType): API execution output
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CallManagerDBusStubAdapterInternal::endAllCallsStubDispatcher(
    &CallManagerStub::endAllCalls, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Reject incoming calls
 * param: inAddress (String)	: BD Address of the device to get the properties
	returns:
 *   errorCode (eErrorType): API execution output
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CallManagerDBusStubAdapterInternal::rejectIncomingCallStubDispatcher(
    &CallManagerStub::rejectIncomingCall, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Put current active call on hold
 * param: inAddress (String)	: BD Address of the device to get the properties
	returns:
 *   errorCode (eErrorType): API execution output
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CallManagerDBusStubAdapterInternal::holdActiveCallStubDispatcher(
    &CallManagerStub::holdActiveCall, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Activate the held from head unit
 * param: inAddress (String)	: BD Address of the device to get the properties
	returns:
 *   errorCode (eErrorType): API execution output
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CallManagerDBusStubAdapterInternal::resumeHeldCallStubDispatcher(
    &CallManagerStub::resumeHeldCall, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Conference available calls from Head Unit
 * param: inAddress (String)	: BD Address of the device to get the properties
	returns:
 *   errorCode (eErrorType): API execution output
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CallManagerDBusStubAdapterInternal::conferenceCallStubDispatcher(
    &CallManagerStub::conferenceCall, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Interface is used by HMI to select a particular call in case two phone are
 *   connected each with a phone call.
 * param: inAddress (String)	: BD Address of the device to get the properties
	      :
 *   callId (Int32)          : Call ID of the phone call to be selected
	returns:
 *   errorCode (eErrorType): API execution output
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string, int8_t>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CallManagerDBusStubAdapterInternal::selectCallStubDispatcher(
    &CallManagerStub::selectCall, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Interface is used by HMI to transfer call audio from Handsfree to Handset and
 *   vise versa
 * param: inAddress (String)	: BD Address of the device to get the properties
	      :
 *   hfMode (Boolean)	: Handsfree Mode requested from the HMI
	returns: errorCode
 *   (eErrorType): API execution output
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string, bool>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CallManagerDBusStubAdapterInternal::setHfModeStubDispatcher(
    &CallManagerStub::setHfMode, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Interface is used by HMI to active Phone VR mode from Head Unit
 * param: inAddress (String)	: BD Address of the device to get the properties
	      :
 *   mode (Boolean)		: VR Mode requested from the HMI
	returns: errorCode
 *   (eErrorType): API execution output
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string, bool>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CallManagerDBusStubAdapterInternal::setVRModeStubDispatcher(
    &CallManagerStub::setVRMode, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Interface is used by HMI to swap the active call available on Head Unit
 * param: inAddress (String)	: BD Address of the device to get the properties
	returns:
 *   errorCode (eErrorType): API execution output
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > CallManagerDBusStubAdapterInternal::swapCallsStubDispatcher(
    &CallManagerStub::swapCalls, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));


/**
 * description: broadcast Handsfree supported features to registered clients
 */
void CallManagerDBusStubAdapterInternal::fireHfFeaturesListAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::hfpSupportedFeaturesList& value) {
    CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::hfpSupportedFeaturesList, ::v1::com::harman::btpres::BTPresTypes_::hfpSupportedFeaturesListDeployment_t> deployedValue(value, static_cast<::v1::com::harman::btpres::BTPresTypes_::hfpSupportedFeaturesListDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v1::com::harman::btpres::BTPresTypes::hfpSupportedFeaturesList,
        ::v1::com::harman::btpres::BTPresTypes_::hfpSupportedFeaturesListDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onHfFeaturesListAttributeChanged",
            "a(sa{ib})",
            deployedValue
    
    );
}
/**
 * description: broadcast phone network operator information to registered clients
 */
void CallManagerDBusStubAdapterInternal::fireOperatorInfoListAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::networkOperatorInfoList& value) {
    CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::networkOperatorInfoList, ::v1::com::harman::btpres::BTPresTypes_::networkOperatorInfoListDeployment_t> deployedValue(value, static_cast<::v1::com::harman::btpres::BTPresTypes_::networkOperatorInfoListDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v1::com::harman::btpres::BTPresTypes::networkOperatorInfoList,
        ::v1::com::harman::btpres::BTPresTypes_::networkOperatorInfoListDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onOperatorInfoListAttributeChanged",
            "a(ibsssi)",
            deployedValue
    
    );
}
/**
 * description: broadcast signal and charge levels to registered clients
 */
void CallManagerDBusStubAdapterInternal::fireRssiChargeInfoListAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::signalChargeInfoList& value) {
    CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::signalChargeInfoList, ::v1::com::harman::btpres::BTPresTypes_::signalChargeInfoListDeployment_t> deployedValue(value, static_cast<::v1::com::harman::btpres::BTPresTypes_::signalChargeInfoListDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v1::com::harman::btpres::BTPresTypes::signalChargeInfoList,
        ::v1::com::harman::btpres::BTPresTypes_::signalChargeInfoListDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onRssiChargeInfoListAttributeChanged",
            "a(sii)",
            deployedValue
    
    );
}
/**
 * description: broadcast callstate status to registered clients
 */
void CallManagerDBusStubAdapterInternal::fireCallStateInfoAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::callstateInfoList& value) {
    CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::callstateInfoList, ::v1::com::harman::btpres::BTPresTypes_::callstateInfoListDeployment_t> deployedValue(value, static_cast<::v1::com::harman::btpres::BTPresTypes_::callstateInfoListDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v1::com::harman::btpres::BTPresTypes::callstateInfoList,
        ::v1::com::harman::btpres::BTPresTypes_::callstateInfoListDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onCallStateInfoAttributeChanged",
            "a(yissssiui)",
            deployedValue
    
    );
}
/**
 * description: broadcast HF mode status to registered clients
 */
void CallManagerDBusStubAdapterInternal::fireHfModeAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::hfModeStatusList& value) {
    CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::hfModeStatusList, ::v1::com::harman::btpres::BTPresTypes_::hfModeStatusListDeployment_t> deployedValue(value, static_cast<::v1::com::harman::btpres::BTPresTypes_::hfModeStatusListDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v1::com::harman::btpres::BTPresTypes::hfModeStatusList,
        ::v1::com::harman::btpres::BTPresTypes_::hfModeStatusListDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onHfModeAttributeChanged",
            "a(si)",
            deployedValue
    
    );
}
/**
 * description: broadcast call duration to registered clients
 */
void CallManagerDBusStubAdapterInternal::fireCallDurationAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::callDurationList& value) {
    CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::callDurationList, ::v1::com::harman::btpres::BTPresTypes_::callDurationListDeployment_t> deployedValue(value, static_cast<::v1::com::harman::btpres::BTPresTypes_::callDurationListDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v1::com::harman::btpres::BTPresTypes::callDurationList,
        ::v1::com::harman::btpres::BTPresTypes_::callDurationListDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onCallDurationAttributeChanged",
            "a(yus)",
            deployedValue
    
    );
}
/**
 * description: broadcast SCO audio status to registered clients
 */
void CallManagerDBusStubAdapterInternal::fireAudioStatusAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::audioStatusList& value) {
    CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::audioStatusList, ::v1::com::harman::btpres::BTPresTypes_::audioStatusListDeployment_t> deployedValue(value, static_cast<::v1::com::harman::btpres::BTPresTypes_::audioStatusListDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v1::com::harman::btpres::BTPresTypes::audioStatusList,
        ::v1::com::harman::btpres::BTPresTypes_::audioStatusListDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onAudioStatusAttributeChanged",
            "a(si)",
            deployedValue
    
    );
}
/**
 * description: broadcast VR status to registered clients
 */
void CallManagerDBusStubAdapterInternal::fireVrModeAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::vrModeStatusList& value) {
    CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::vrModeStatusList, ::v1::com::harman::btpres::BTPresTypes_::vrModeStatusListDeployment_t> deployedValue(value, static_cast<::v1::com::harman::btpres::BTPresTypes_::vrModeStatusListDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v1::com::harman::btpres::BTPresTypes::vrModeStatusList,
        ::v1::com::harman::btpres::BTPresTypes_::vrModeStatusListDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onVrModeAttributeChanged",
            "a(sb)",
            deployedValue
    
    );
}



const CallManagerDBusStubAdapterHelper::StubDispatcherTable& CallManagerDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& CallManagerDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

CallManagerDBusStubAdapterInternal::CallManagerDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      CallManagerDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<CallManagerStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: broadcast Handsfree supported features to registered clients
             */
            { { "getHfFeaturesListAttribute", "" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::getHfFeaturesListAttributeStubDispatcher },
            /**
             * description: broadcast phone network operator information to registered clients
             */
            { { "getOperatorInfoListAttribute", "" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::getOperatorInfoListAttributeStubDispatcher },
            /**
             * description: broadcast signal and charge levels to registered clients
             */
            { { "getRssiChargeInfoListAttribute", "" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::getRssiChargeInfoListAttributeStubDispatcher },
            /**
             * description: broadcast callstate status to registered clients
             */
            { { "getCallStateInfoAttribute", "" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::getCallStateInfoAttributeStubDispatcher },
            /**
             * description: broadcast HF mode status to registered clients
             */
            { { "getHfModeAttribute", "" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::getHfModeAttributeStubDispatcher },
            /**
             * description: broadcast call duration to registered clients
             */
            { { "getCallDurationAttribute", "" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::getCallDurationAttributeStubDispatcher },
            /**
             * description: broadcast SCO audio status to registered clients
             */
            { { "getAudioStatusAttribute", "" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::getAudioStatusAttributeStubDispatcher },
            /**
             * description: broadcast VR status to registered clients
             */
            { { "getVrModeAttribute", "" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::getVrModeAttributeStubDispatcher }
            ,
            /**
             * description: Used to initate call from head unit HMI.
             * param: inAddress (String)    	: BD Address of the device to get the properties
            	     
             *   : dialNumber (String)	        : Number to be dialled
            	      : contactName
             *   (String)    	: Contact Name if available
            	      : imageUrl (String)	        :
             *   Image URL if available
            	returns: errorCode (eErrorType)	: API execution output
             */
            { { "dial", "ssssi" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::dialStubDispatcher },
            /**
             * description: Used to send DTMF tone from head unit to phone.
             * param: inAddress (String)	: BD Address of the device to get the properties
            	      :
             *   dtmfTone (String)	: DTMF tone to be sent
            	returns: errorCode (errorCode)	: API
             *   execution ouput
             */
            { { "sendDtmfTone", "ss" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::sendDtmfToneStubDispatcher },
            /**
             * description: Accept incoming call from Head Unit
             * param: inAddress (String)	: BD Address of the device to get the properties
            	      :
             *   transfer (Boolean)	: Whether the call has to be transferred to Handset mode
             *   upon acceptance
            	returns: errorCode (eErrorType): API execution output
             */
            { { "acceptIncomingCall", "sb" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::acceptIncomingCallStubDispatcher },
            /**
             * description: End call for passed call ID
             * param: inAddress (String)	: BD Address of the device to get the properties
            	      :
             *   callId (Int32)          : Call ID of the phone call to be ended
            	returns:
             *   errorCode (eErrorType): API execution output
             */
            { { "endCall", "sy" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::endCallStubDispatcher },
            /**
             * description: End currently active call for a particular device
             * param: inAddress (String)      : BD Address of the device to get the
             *   properties
            	returns: errorCode (eErrorType): API execution output
             */
            { { "endActiveCall", "s" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::endActiveCallStubDispatcher },
            /**
             * description: Ends all available calls
             * param: inAddress (String)	: BD Address of the device to get the properties
            	returns:
             *   errorCode (eErrorType): API execution output
             */
            { { "endAllCalls", "s" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::endAllCallsStubDispatcher },
            /**
             * description: Reject incoming calls
             * param: inAddress (String)	: BD Address of the device to get the properties
            	returns:
             *   errorCode (eErrorType): API execution output
             */
            { { "rejectIncomingCall", "s" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::rejectIncomingCallStubDispatcher },
            /**
             * description: Put current active call on hold
             * param: inAddress (String)	: BD Address of the device to get the properties
            	returns:
             *   errorCode (eErrorType): API execution output
             */
            { { "holdActiveCall", "s" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::holdActiveCallStubDispatcher },
            /**
             * description: Activate the held from head unit
             * param: inAddress (String)	: BD Address of the device to get the properties
            	returns:
             *   errorCode (eErrorType): API execution output
             */
            { { "resumeHeldCall", "s" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::resumeHeldCallStubDispatcher },
            /**
             * description: Conference available calls from Head Unit
             * param: inAddress (String)	: BD Address of the device to get the properties
            	returns:
             *   errorCode (eErrorType): API execution output
             */
            { { "conferenceCall", "s" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::conferenceCallStubDispatcher },
            /**
             * description: Interface is used by HMI to select a particular call in case two phone are
             *   connected each with a phone call.
             * param: inAddress (String)	: BD Address of the device to get the properties
            	      :
             *   callId (Int32)          : Call ID of the phone call to be selected
            	returns:
             *   errorCode (eErrorType): API execution output
             */
            { { "selectCall", "sy" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::selectCallStubDispatcher },
            /**
             * description: Interface is used by HMI to transfer call audio from Handsfree to Handset and
             *   vise versa
             * param: inAddress (String)	: BD Address of the device to get the properties
            	      :
             *   hfMode (Boolean)	: Handsfree Mode requested from the HMI
            	returns: errorCode
             *   (eErrorType): API execution output
             */
            { { "setHfMode", "sb" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::setHfModeStubDispatcher },
            /**
             * description: Interface is used by HMI to active Phone VR mode from Head Unit
             * param: inAddress (String)	: BD Address of the device to get the properties
            	      :
             *   mode (Boolean)		: VR Mode requested from the HMI
            	returns: errorCode
             *   (eErrorType): API execution output
             */
            { { "setVRMode", "sb" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::setVRModeStubDispatcher },
            /**
             * description: Interface is used by HMI to swap the active call available on Head Unit
             * param: inAddress (String)	: BD Address of the device to get the properties
            	returns:
             *   errorCode (eErrorType): API execution output
             */
            { { "swapCalls", "s" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::swapCallsStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &com::harman::btpres::CallManagerDBusStubAdapterInternal::getCallManagerInterfaceVersionStubDispatcher });
}

bool CallManagerDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace btpres
} // namespace harman
} // namespace com
} // namespace v1
