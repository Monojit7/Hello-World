/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Thu Sep 22 00:23:23 IST 2016
*/
#ifndef V1_COM_HARMAN_BTPRES_Call_Manager_DBUS_STUB_ADAPTER_HPP_
#define V1_COM_HARMAN_BTPRES_Call_Manager_DBUS_STUB_ADAPTER_HPP_

#include <v1/com/harman/btpres/CallManagerStub.hpp>
#include "v1/com/harman/btpres/CallManagerDBusDeployment.hpp"        
#include <v1/com/harman/btpres/BTPresTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace btpres {

typedef CommonAPI::DBus::DBusStubAdapterHelper<CallManagerStub> CallManagerDBusStubAdapterHelper;

class CallManagerDBusStubAdapterInternal
    : public virtual CallManagerStubAdapter,
      public CallManagerDBusStubAdapterHelper
{
public:
    CallManagerDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~CallManagerDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return CallManager::getInterface();
    }

    /**
     * description: broadcast Handsfree supported features to registered clients
     */
    void fireHfFeaturesListAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::hfpSupportedFeaturesList& value);
    /**
     * description: broadcast phone network operator information to registered clients
     */
    void fireOperatorInfoListAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::networkOperatorInfoList& value);
    /**
     * description: broadcast signal and charge levels to registered clients
     */
    void fireRssiChargeInfoListAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::signalChargeInfoList& value);
    /**
     * description: broadcast callstate status to registered clients
     */
    void fireCallStateInfoAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::callstateInfoList& value);
    /**
     * description: broadcast HF mode status to registered clients
     */
    void fireHfModeAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::hfModeStatusList& value);
    /**
     * description: broadcast call duration to registered clients
     */
    void fireCallDurationAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::callDurationList& value);
    /**
     * description: broadcast SCO audio status to registered clients
     */
    void fireAudioStatusAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::audioStatusList& value);
    /**
     * description: broadcast VR status to registered clients
     */
    void fireVrModeAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::vrModeStatusList& value);



    const CallManagerDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::CallManagerStub,
        CommonAPI::Version
        > getCallManagerInterfaceVersionStubDispatcher;

/**
 * description: broadcast Handsfree supported features to registered clients
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::CallManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::hfpSupportedFeaturesList,
        ::v1::com::harman::btpres::BTPresTypes_::hfpSupportedFeaturesListDeployment_t                
        > getHfFeaturesListAttributeStubDispatcher;
/**
 * description: broadcast phone network operator information to registered clients
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::CallManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::networkOperatorInfoList,
        ::v1::com::harman::btpres::BTPresTypes_::networkOperatorInfoListDeployment_t                
        > getOperatorInfoListAttributeStubDispatcher;
/**
 * description: broadcast signal and charge levels to registered clients
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::CallManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::signalChargeInfoList,
        ::v1::com::harman::btpres::BTPresTypes_::signalChargeInfoListDeployment_t                
        > getRssiChargeInfoListAttributeStubDispatcher;
/**
 * description: broadcast callstate status to registered clients
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::CallManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::callstateInfoList,
        ::v1::com::harman::btpres::BTPresTypes_::callstateInfoListDeployment_t                
        > getCallStateInfoAttributeStubDispatcher;
/**
 * description: broadcast HF mode status to registered clients
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::CallManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::hfModeStatusList,
        ::v1::com::harman::btpres::BTPresTypes_::hfModeStatusListDeployment_t                
        > getHfModeAttributeStubDispatcher;
/**
 * description: broadcast call duration to registered clients
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::CallManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::callDurationList,
        ::v1::com::harman::btpres::BTPresTypes_::callDurationListDeployment_t                
        > getCallDurationAttributeStubDispatcher;
/**
 * description: broadcast SCO audio status to registered clients
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::CallManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::audioStatusList,
        ::v1::com::harman::btpres::BTPresTypes_::audioStatusListDeployment_t                
        > getAudioStatusAttributeStubDispatcher;
/**
 * description: broadcast VR status to registered clients
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::CallManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::vrModeStatusList,
        ::v1::com::harman::btpres::BTPresTypes_::vrModeStatusListDeployment_t                
        > getVrModeAttributeStubDispatcher;


/**
 * description: Used to initate call from head unit HMI.
 * param: inAddress (String)    	: BD Address of the device to get the properties
	     
 *   : dialNumber (String)	        : Number to be dialled
	      : contactName
 *   (String)    	: Contact Name if available
	      : imageUrl (String)	        :
 *   Image URL if available
	returns: errorCode (eErrorType)	: API execution output
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string, std::string, std::string, std::string, ::v1::com::harman::btpres::BTPresTypes::eTelType>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > dialStubDispatcher;
/**
 * description: Used to send DTMF tone from head unit to phone.
 * param: inAddress (String)	: BD Address of the device to get the properties
	      :
 *   dtmfTone (String)	: DTMF tone to be sent
	returns: errorCode (errorCode)	: API
 *   execution ouput
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string, std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > sendDtmfToneStubDispatcher;
/**
 * description: Accept incoming call from Head Unit
 * param: inAddress (String)	: BD Address of the device to get the properties
	      :
 *   transfer (Boolean)	: Whether the call has to be transferred to Handset mode
 *   upon acceptance
	returns: errorCode (eErrorType): API execution output
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string, bool>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > acceptIncomingCallStubDispatcher;
/**
 * description: End call for passed call ID
 * param: inAddress (String)	: BD Address of the device to get the properties
	      :
 *   callId (Int32)          : Call ID of the phone call to be ended
	returns:
 *   errorCode (eErrorType): API execution output
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string, int8_t>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > endCallStubDispatcher;
/**
 * description: End currently active call for a particular device
 * param: inAddress (String)      : BD Address of the device to get the
 *   properties
	returns: errorCode (eErrorType): API execution output
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > endActiveCallStubDispatcher;
/**
 * description: Ends all available calls
 * param: inAddress (String)	: BD Address of the device to get the properties
	returns:
 *   errorCode (eErrorType): API execution output
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > endAllCallsStubDispatcher;
/**
 * description: Reject incoming calls
 * param: inAddress (String)	: BD Address of the device to get the properties
	returns:
 *   errorCode (eErrorType): API execution output
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > rejectIncomingCallStubDispatcher;
/**
 * description: Put current active call on hold
 * param: inAddress (String)	: BD Address of the device to get the properties
	returns:
 *   errorCode (eErrorType): API execution output
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > holdActiveCallStubDispatcher;
/**
 * description: Activate the held from head unit
 * param: inAddress (String)	: BD Address of the device to get the properties
	returns:
 *   errorCode (eErrorType): API execution output
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > resumeHeldCallStubDispatcher;
/**
 * description: Conference available calls from Head Unit
 * param: inAddress (String)	: BD Address of the device to get the properties
	returns:
 *   errorCode (eErrorType): API execution output
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > conferenceCallStubDispatcher;
/**
 * description: Interface is used by HMI to select a particular call in case two phone are
 *   connected each with a phone call.
 * param: inAddress (String)	: BD Address of the device to get the properties
	      :
 *   callId (Int32)          : Call ID of the phone call to be selected
	returns:
 *   errorCode (eErrorType): API execution output
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string, int8_t>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > selectCallStubDispatcher;
/**
 * description: Interface is used by HMI to transfer call audio from Handsfree to Handset and
 *   vise versa
 * param: inAddress (String)	: BD Address of the device to get the properties
	      :
 *   hfMode (Boolean)	: Handsfree Mode requested from the HMI
	returns: errorCode
 *   (eErrorType): API execution output
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string, bool>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > setHfModeStubDispatcher;
/**
 * description: Interface is used by HMI to active Phone VR mode from Head Unit
 * param: inAddress (String)	: BD Address of the device to get the properties
	      :
 *   mode (Boolean)		: VR Mode requested from the HMI
	returns: errorCode
 *   (eErrorType): API execution output
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string, bool>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > setVRModeStubDispatcher;
/**
 * description: Interface is used by HMI to swap the active call available on Head Unit
 * param: inAddress (String)	: BD Address of the device to get the properties
	returns:
 *   errorCode (eErrorType): API execution output
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::CallManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > swapCallsStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    CallManagerDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class CallManagerDBusStubAdapter
    : public CallManagerDBusStubAdapterInternal,
      public std::enable_shared_from_this<CallManagerDBusStubAdapter> {
public:
    CallManagerDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          CallManagerDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace btpres
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_BTPRES_Call_Manager_DBUS_STUB_ADAPTER_HPP_
