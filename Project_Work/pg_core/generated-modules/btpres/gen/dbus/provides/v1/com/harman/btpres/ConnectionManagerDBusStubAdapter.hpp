/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Thu Sep 22 00:23:23 IST 2016
*/
#ifndef V1_COM_HARMAN_BTPRES_Connection_Manager_DBUS_STUB_ADAPTER_HPP_
#define V1_COM_HARMAN_BTPRES_Connection_Manager_DBUS_STUB_ADAPTER_HPP_

#include <v1/com/harman/btpres/ConnectionManagerStub.hpp>
#include "v1/com/harman/btpres/ConnectionManagerDBusDeployment.hpp"        
#include <v1/com/harman/btpres/BTPresTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace btpres {

typedef CommonAPI::DBus::DBusStubAdapterHelper<ConnectionManagerStub> ConnectionManagerDBusStubAdapterHelper;

class ConnectionManagerDBusStubAdapterInternal
    : public virtual ConnectionManagerStubAdapter,
      public ConnectionManagerDBusStubAdapterHelper
{
public:
    ConnectionManagerDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~ConnectionManagerDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return ConnectionManager::getInterface();
    }

    /**
     * description: It will reflect the current bluetooth status to registered clients
     */
    void fireBtStateAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::eBluetoothStatus& value);
    /**
     * description: It will reflect local device address to registered clients
     */
    void fireLocalDevAddrAttributeChanged(const std::string& value);
    /**
     * description: It will reflect local device name to registered clients
     */
    void fireLocalDevNameAttributeChanged(const std::string& value);
    /**
     * description: It will broadcast stored pass key to registered clients
     */
    void firePassKeyPinAttributeChanged(const std::string& value);
    /**
     * description: It will broadcast device search status to registered client
     */
    void fireDeviceSearchStatusAttributeChanged(const bool& value);
    /**
     * description: It will broadcast discoverability status to registered clients
     */
    void fireDiscoverableStatusAttributeChanged(const bool& value);
    /**
     * description: It will broadcast discoverability timeout to registered clients
     */
    void fireDiscoveryTimeoutAttributeChanged(const uint16_t& value);
    /**
     * description: It will broadcast device search results to registered clients
     */
    void fireDevSearchResultsAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::tDeviceSearchEntryList& value);
    /**
     * description: It will broadcast bonded device list to registered clients
     */
    void fireDevListAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::bondedDevList& value);
    /**
     * description: It will broadcast network status to registered clients
     */
    void fireNetIfStatusAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::networkIfStatus& value);
    /**
     * description: It will braodcast unstable device info to registered clients
     */
    void fireUnstableDevsAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::unstableDeviceInfoList& value);
    /**
     * description: It will braodcast primary device address
     */
    void firePrimaryDeviceAttributeChanged(const std::string& value);

    /**
     * description: It will broadcast standard bonding Request to registered clients
     * param: outAddress (string)     : Bt address of phone
     * param: deviceName (string)     : Device name
     * param: type (eBondingType)     : Bonding type
     * param: pin (string) : pass key pin
     */
    void fireBondingRequestEvent(const std::string& outAddress, const std::string& deviceName, const ::v1::com::harman::btpres::BTPresTypes::eBondingType& type, const std::string& pin);
    /**
     * description: It will broadcast service connection request to registered clients
     * param: outAddress (string)         : Bt address of phone
     * param: name (string)               : Device name
     * param: service (eSupportedProfile) : supported profile list
     */
    void fireServiceConnectionRequestEvent(const std::string& outAddress, const std::string& name, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile& service);
    /**
     * description: It will broadcast service connection status signal to registered clients
     * param: outAddress (string)         : Bt address of phone
     * param: name (string)               : Device name
     * param: service (eSupportedProfile) : supported profile list
     * param: status (eConnectionStatus)  : Connected or disconnected status
     * param: reason (eServiceConnectDisconnectReason) : reason for connection or
     *   disconnection
     */
    void fireServiceConnectionStatusEvent(const std::string& outAddress, const std::string& name, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile& service, const ::v1::com::harman::btpres::BTPresTypes::eConnectionStatus& status, const ::v1::com::harman::btpres::BTPresTypes::eServiceConnectDisconnectReason& reason);
    /**
     * description: This signal is sent when device has been deleted from Head Unit to registered
     *   clients
     * param: outAddress (string)     : Bt address of phone
     * param: deviceName (string )    : device name
     */
    void fireDeviceDeletedEvent(const std::string& outAddress, const std::string& deviceName);
    /**
     * description: This signal is used to update the pairing status to registered clients
     * param: outAddress (string)         : Bt address of phone
     * param: deviceName (string)         : device name
     * param: pairStatus (ePairingStatus) : Pairing status i.e. successful Or failure
     */
    void fireBondingStatusEvent(const std::string& outAddress, const std::string& deviceName, const ::v1::com::harman::btpres::BTPresTypes::ePairingStatus& pairStatus);


    const ConnectionManagerDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        CommonAPI::Version
        > getConnectionManagerInterfaceVersionStubDispatcher;

/**
 * description: It will reflect the current bluetooth status to registered clients
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::eBluetoothStatus                
        > getBtStateAttributeStubDispatcher;
/**
 * description: It will reflect local device address to registered clients
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        std::string,
        CommonAPI::DBus::StringDeployment                
        > getLocalDevAddrAttributeStubDispatcher;
/**
 * description: It will reflect local device name to registered clients
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        std::string,
        CommonAPI::DBus::StringDeployment                
        > getLocalDevNameAttributeStubDispatcher;
/**
 * description: It will broadcast stored pass key to registered clients
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        std::string,
        CommonAPI::DBus::StringDeployment                
        > getPassKeyPinAttributeStubDispatcher;
/**
 * description: It will broadcast device search status to registered client
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        bool                
        > getDeviceSearchStatusAttributeStubDispatcher;
/**
 * description: It will broadcast discoverability status to registered clients
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        bool                
        > getDiscoverableStatusAttributeStubDispatcher;
/**
 * description: It will broadcast discoverability timeout to registered clients
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        uint16_t                
        > getDiscoveryTimeoutAttributeStubDispatcher;
/**
 * description: It will broadcast device search results to registered clients
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::tDeviceSearchEntryList,
        ::v1::com::harman::btpres::BTPresTypes_::tDeviceSearchEntryListDeployment_t                
        > getDevSearchResultsAttributeStubDispatcher;
/**
 * description: It will broadcast bonded device list to registered clients
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::bondedDevList,
        ::v1::com::harman::btpres::BTPresTypes_::bondedDevListDeployment_t                
        > getDevListAttributeStubDispatcher;
/**
 * description: It will broadcast network status to registered clients
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::networkIfStatus,
        ::v1::com::harman::btpres::BTPresTypes_::networkIfStatusDeployment_t                
        > getNetIfStatusAttributeStubDispatcher;
/**
 * description: It will braodcast unstable device info to registered clients
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::unstableDeviceInfoList,
        ::v1::com::harman::btpres::BTPresTypes_::unstableDeviceInfoListDeployment_t                
        > getUnstableDevsAttributeStubDispatcher;
/**
 * description: It will braodcast primary device address
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        std::string,
        CommonAPI::DBus::StringDeployment                
        > getPrimaryDeviceAttributeStubDispatcher;


/**
 * description: Used to start device search on head unit
 * param: maxDevice (UInt32)       : max limit for found devices
 * param: timeout (UInt32)         : time limit for device search operation

       
 *   returns: errorCode (eErrorType) : error code
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<uint32_t, uint32_t>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > startDeviceSearchStubDispatcher;
/**
 * description: Used to stop device search on head unit
 * param: none

        returns: error code (eErrorType) : error code
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > stopDeviceSearchStubDispatcher;
/**
 * description: Used to send secure Bonding reply
 * param: inAddress (string)       : phone BT address
 * param: accept (boolean)         : accepting authentication request
 * param: trusted (boolean)        : making device trusted means service won't send
 *   connection request for each connect attempt
 * param: type (eBondingType)      : Bonding type, standard or secure bonding

       
 *   returns: errorCode (eErrorType) : error code
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<std::string, bool, bool, ::v1::com::harman::btpres::BTPresTypes::eBondingType>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > bondingReplyStubDispatcher;
/**
 * description: Used to delete device from paired device list
 * param: inAddress (string)      : phone BT address

        returns: errorCode
 *   (eErrorType): error code
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > deleteDeviceStubDispatcher;
/**
 * description: Used to delete all device in paired device list
 * param: none

        returns: errorCode (eErrorType) : error code
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > deleteAllDevicesStubDispatcher;
/**
 * description: Used to initate profile connection with device
 * param: inAddress (string)       : phone BT address
 * param: service (eSupportedProfile) : profile name
 * param: instanceName (string)    : containing the phone instance
 * param: replaceAddr (string)     : containing the replacement address for which the
 *   connection will be replaced

        returns: errorCode (eErrorType) : error
 *   code
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<std::string, ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, std::string, std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > startServiceConnectionStubDispatcher;
/**
 * description: Used to allows the existance of the service connection to this device and
 *   service.
 * param: inAddress (string)           : phone BT address
 * param: service (eSupportedProfile)  : profile name
 * param: allow (Boolean)              : containing the value true for allow, or false
 *   for reject

        returns: errorCode (eErrorType)      : error code
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<std::string, ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, bool>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > allowServiceConnectionStubDispatcher;
/**
 * description: Used to initate the disconnection with connected service i.e. HFP and A2DP
 * param: inAddress (string)                  : phone BT address
 * param: service (eSupportedProfile)         : profile name

        returns: errorCode
 *   error code (eErrorType)  : error code
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<std::string, ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > startServiceDisconnectionStubDispatcher;
/**
 * description: This method should be called by clients in order to reply to the incoming
 *   service 
                       connection request from a remote device as
 *   indicated by the signal 'serviceConnectionRequest'. 
                      
 *   The reply can be to accept or reject incoming service connection request.
 * param: inAddress (string)              : phone BT address
 * param: service (eSupportedProfile)     : profile name
 * param: accept (boolean)                : containing the value true for allow, or false
 *   for reject
 * param: instanceName (string)           : containing the instance name of the device

 
 *         returns: errorCode (eErrorType)         : error code
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<std::string, ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, bool, std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > serviceConnectionReplyStubDispatcher;
/**
 * description: Used to initiate the reconnection to previously connected device
 * param: None

        returns: errorCode error code (eErrorType) : error code
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > startReconnectStubDispatcher;
/**
 * description: This method should be called to get oldest connected device
 * param: None

        returns: oldestDevInfo (oldestDevInfo)     : Oldest device name
 *   and address
        returns: errorCode error code (eErrorType) : error code
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::deviceInfo, ::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes_::deviceInfoDeployment_t, CommonAPI::EmptyDeployment>
    
    > getOldestConnectedDevStubDispatcher;
/**
 * description: This method used to change name of bonded device.
 * param: inAddress  (string)     : contains the BD address.
 * param: name (string)           : Device name

        returns: errorCode(eErrorType) 
 *   : error code
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<std::string, std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > renameBondedDeviceStubDispatcher;
/**
 * description: This method used to change local name of head unit.
 * param: name (string)           : Device name

        returns: errorCode(eErrorType) 
 *   : error code
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > renameLocalDeviceStubDispatcher;
/**
 * description: Used to set bluetooth on or off
 * param: status (boolean)       : set true or false

        returns: error
 *   code(eErrorType) : error code
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<bool>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > setBluetoothStatusStubDispatcher;
/**
 * description: Used to enable or disable discoverable mode
 * param: enabled (boolean)       : set true or false

        returns: errorCode
 *   (eErrorType) : error code
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<bool>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > setDiscoverableModeStubDispatcher;
/**
 * description: This method used to pin information for head unit.
 * param: passkey (string)          : set the default pin for legacy devices

       
 *   returns:  error code (eErrorType) : error code
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > setPinStubDispatcher;
/**
 * description: It will set a device as primary
 * param: inAddress  (string)     : contains the BD address.

        returns:  error
 *   code (eErrorType) : error code
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > setPrimaryDeviceStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    ConnectionManagerDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class ConnectionManagerDBusStubAdapter
    : public ConnectionManagerDBusStubAdapterInternal,
      public std::enable_shared_from_this<ConnectionManagerDBusStubAdapter> {
public:
    ConnectionManagerDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          ConnectionManagerDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace btpres
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_BTPRES_Connection_Manager_DBUS_STUB_ADAPTER_HPP_
