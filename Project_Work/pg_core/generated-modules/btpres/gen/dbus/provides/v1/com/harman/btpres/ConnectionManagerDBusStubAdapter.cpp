/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Thu Sep 22 00:23:23 IST 2016
*/
#include <v1/com/harman/btpres/ConnectionManager.hpp>
#include <v1/com/harman/btpres/ConnectionManagerDBusStubAdapter.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace btpres {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createConnectionManagerDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<ConnectionManagerDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerConnectionManagerDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	ConnectionManager::getInterface(), &createConnectionManagerDBusStubAdapter);
}

ConnectionManagerDBusStubAdapterInternal::~ConnectionManagerDBusStubAdapterInternal() {
    deactivateManagedInstances();
    ConnectionManagerDBusStubAdapterHelper::deinit();
}

void ConnectionManagerDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* ConnectionManagerDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"getBtStateAttribute\">\n"
            "<arg name=\"value\" type=\"i\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onBtStateAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
        "</signal>\n"
        "<method name=\"getLocalDevAddrAttribute\">\n"
            "<arg name=\"value\" type=\"s\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onLocalDevAddrAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"s\" />\n"
        "</signal>\n"
        "<method name=\"getLocalDevNameAttribute\">\n"
            "<arg name=\"value\" type=\"s\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onLocalDevNameAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"s\" />\n"
        "</signal>\n"
        "<method name=\"getPassKeyPinAttribute\">\n"
            "<arg name=\"value\" type=\"s\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onPassKeyPinAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"s\" />\n"
        "</signal>\n"
        "<method name=\"getDeviceSearchStatusAttribute\">\n"
            "<arg name=\"value\" type=\"b\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onDeviceSearchStatusAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"b\" />\n"
        "</signal>\n"
        "<method name=\"getDiscoverableStatusAttribute\">\n"
            "<arg name=\"value\" type=\"b\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onDiscoverableStatusAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"b\" />\n"
        "</signal>\n"
        "<method name=\"getDiscoveryTimeoutAttribute\">\n"
            "<arg name=\"value\" type=\"q\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onDiscoveryTimeoutAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"q\" />\n"
        "</signal>\n"
        "<method name=\"getDevSearchResultsAttribute\">\n"
            "<arg name=\"value\" type=\"a(ssibb)\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onDevSearchResultsAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"a(ssibb)\" />\n"
        "</signal>\n"
        "<method name=\"getDevListAttribute\">\n"
            "<arg name=\"value\" type=\"a(ssia{ii})\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onDevListAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"a(ssia{ii})\" />\n"
        "</signal>\n"
        "<method name=\"getNetIfStatusAttribute\">\n"
            "<arg name=\"value\" type=\"(sb)\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onNetIfStatusAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"(sb)\" />\n"
        "</signal>\n"
        "<method name=\"getUnstableDevsAttribute\">\n"
            "<arg name=\"value\" type=\"a(ss)\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onUnstableDevsAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"a(ss)\" />\n"
        "</signal>\n"
        "<method name=\"getPrimaryDeviceAttribute\">\n"
            "<arg name=\"value\" type=\"s\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onPrimaryDeviceAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"s\" />\n"
        "</signal>\n"
        /**
         * description: It will broadcast standard bonding Request to registered clients
         * param: outAddress (string)     : Bt address of phone
         * param: deviceName (string)     : Device name
         * param: type (eBondingType)     : Bonding type
         * param: pin (string) : pass key pin
         */
        "<signal name=\"bondingRequest\">\n"
            "<arg name=\"outAddress\" type=\"s\" />\n"
            "<arg name=\"deviceName\" type=\"s\" />\n"
            "<arg name=\"type\" type=\"i\" />\n"
            "<arg name=\"pin\" type=\"s\" />\n"
        "</signal>\n"
        /**
         * description: It will broadcast service connection request to registered clients
         * param: outAddress (string)         : Bt address of phone
         * param: name (string)               : Device name
         * param: service (eSupportedProfile) : supported profile list
         */
        "<signal name=\"serviceConnectionRequest\">\n"
            "<arg name=\"outAddress\" type=\"s\" />\n"
            "<arg name=\"name\" type=\"s\" />\n"
            "<arg name=\"service\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * description: It will broadcast service connection status signal to registered clients
         * param: outAddress (string)         : Bt address of phone
         * param: name (string)               : Device name
         * param: service (eSupportedProfile) : supported profile list
         * param: status (eConnectionStatus)  : Connected or disconnected status
         * param: reason (eServiceConnectDisconnectReason) : reason for connection or
         *   disconnection
         */
        "<signal name=\"serviceConnectionStatus\">\n"
            "<arg name=\"outAddress\" type=\"s\" />\n"
            "<arg name=\"name\" type=\"s\" />\n"
            "<arg name=\"service\" type=\"i\" />\n"
            "<arg name=\"status\" type=\"i\" />\n"
            "<arg name=\"reason\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * description: This signal is sent when device has been deleted from Head Unit to registered
         *   clients
         * param: outAddress (string)     : Bt address of phone
         * param: deviceName (string )    : device name
         */
        "<signal name=\"deviceDeleted\">\n"
            "<arg name=\"outAddress\" type=\"s\" />\n"
            "<arg name=\"deviceName\" type=\"s\" />\n"
        "</signal>\n"
        /**
         * description: This signal is used to update the pairing status to registered clients
         * param: outAddress (string)         : Bt address of phone
         * param: deviceName (string)         : device name
         * param: pairStatus (ePairingStatus) : Pairing status i.e. successful Or failure
         */
        "<signal name=\"bondingStatus\">\n"
            "<arg name=\"outAddress\" type=\"s\" />\n"
            "<arg name=\"deviceName\" type=\"s\" />\n"
            "<arg name=\"pairStatus\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * description: Used to start device search on head unit
         * param: maxDevice (UInt32)       : max limit for found devices
         * param: timeout (UInt32)         : time limit for device search operation
        
               
         *   returns: errorCode (eErrorType) : error code
         */
        "<method name=\"startDeviceSearch\">\n"
            "<arg name=\"_maxDevice\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_timeout\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Used to stop device search on head unit
         * param: none
        
                returns: error code (eErrorType) : error code
         */
        "<method name=\"stopDeviceSearch\">\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Used to send secure Bonding reply
         * param: inAddress (string)       : phone BT address
         * param: accept (boolean)         : accepting authentication request
         * param: trusted (boolean)        : making device trusted means service won't send
         *   connection request for each connect attempt
         * param: type (eBondingType)      : Bonding type, standard or secure bonding
        
               
         *   returns: errorCode (eErrorType) : error code
         */
        "<method name=\"bondingReply\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_accept\" type=\"b\" direction=\"in\" />\n"
            "<arg name=\"_trusted\" type=\"b\" direction=\"in\" />\n"
            "<arg name=\"_type\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Used to delete device from paired device list
         * param: inAddress (string)      : phone BT address
        
                returns: errorCode
         *   (eErrorType): error code
         */
        "<method name=\"deleteDevice\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Used to delete all device in paired device list
         * param: none
        
                returns: errorCode (eErrorType) : error code
         */
        "<method name=\"deleteAllDevices\">\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Used to initate profile connection with device
         * param: inAddress (string)       : phone BT address
         * param: service (eSupportedProfile) : profile name
         * param: instanceName (string)    : containing the phone instance
         * param: replaceAddr (string)     : containing the replacement address for which the
         *   connection will be replaced
        
                returns: errorCode (eErrorType) : error
         *   code
         */
        "<method name=\"startServiceConnection\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_service\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_instanceName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_replaceAddr\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Used to allows the existance of the service connection to this device and
         *   service.
         * param: inAddress (string)           : phone BT address
         * param: service (eSupportedProfile)  : profile name
         * param: allow (Boolean)              : containing the value true for allow, or false
         *   for reject
        
                returns: errorCode (eErrorType)      : error code
         */
        "<method name=\"allowServiceConnection\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_service\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_allow\" type=\"b\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Used to initate the disconnection with connected service i.e. HFP and A2DP
         * param: inAddress (string)                  : phone BT address
         * param: service (eSupportedProfile)         : profile name
        
                returns: errorCode
         *   error code (eErrorType)  : error code
         */
        "<method name=\"startServiceDisconnection\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_service\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method should be called by clients in order to reply to the incoming
         *   service 
                               connection request from a remote device as
         *   indicated by the signal 'serviceConnectionRequest'. 
                              
         *   The reply can be to accept or reject incoming service connection request.
         * param: inAddress (string)              : phone BT address
         * param: service (eSupportedProfile)     : profile name
         * param: accept (boolean)                : containing the value true for allow, or false
         *   for reject
         * param: instanceName (string)           : containing the instance name of the device
        
         
         *         returns: errorCode (eErrorType)         : error code
         */
        "<method name=\"serviceConnectionReply\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_service\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_accept\" type=\"b\" direction=\"in\" />\n"
            "<arg name=\"_instanceName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Used to initiate the reconnection to previously connected device
         * param: None
        
                returns: errorCode error code (eErrorType) : error code
         */
        "<method name=\"startReconnect\">\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method should be called to get oldest connected device
         * param: None
        
                returns: oldestDevInfo (oldestDevInfo)     : Oldest device name
         *   and address
                returns: errorCode error code (eErrorType) : error code
         */
        "<method name=\"getOldestConnectedDev\">\n"
            "<arg name=\"_oldestDevInfo\" type=\"(ss)\" direction=\"out\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method used to change name of bonded device.
         * param: inAddress  (string)     : contains the BD address.
         * param: name (string)           : Device name
        
                returns: errorCode(eErrorType) 
         *   : error code
         */
        "<method name=\"renameBondedDevice\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_name\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method used to change local name of head unit.
         * param: name (string)           : Device name
        
                returns: errorCode(eErrorType) 
         *   : error code
         */
        "<method name=\"renameLocalDevice\">\n"
            "<arg name=\"_name\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Used to set bluetooth on or off
         * param: status (boolean)       : set true or false
        
                returns: error
         *   code(eErrorType) : error code
         */
        "<method name=\"setBluetoothStatus\">\n"
            "<arg name=\"_status\" type=\"b\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Used to enable or disable discoverable mode
         * param: enabled (boolean)       : set true or false
        
                returns: errorCode
         *   (eErrorType) : error code
         */
        "<method name=\"setDiscoverableMode\">\n"
            "<arg name=\"_enabled\" type=\"b\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method used to pin information for head unit.
         * param: passkey (string)          : set the default pin for legacy devices
        
               
         *   returns:  error code (eErrorType) : error code
         */
        "<method name=\"setPin\">\n"
            "<arg name=\"_passkey\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: It will set a device as primary
         * param: inAddress  (string)     : contains the BD address.
        
                returns:  error
         *   code (eErrorType) : error code
         */
        "<method name=\"setPrimaryDevice\">\n"
            "<arg name=\"_inAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_errorCode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        CommonAPI::Version
        > ConnectionManagerDBusStubAdapterInternal::getConnectionManagerInterfaceVersionStubDispatcher(&ConnectionManagerStub::getInterfaceVersion, "uu");

/**
 * description: It will reflect the current bluetooth status to registered clients
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::eBluetoothStatus
        > ConnectionManagerDBusStubAdapterInternal::getBtStateAttributeStubDispatcher(
            &::v1::com::harman::btpres::ConnectionManagerStub::getBtStateAttribute
            , "i"
            );
/**
 * description: It will reflect local device address to registered clients
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        std::string,
        CommonAPI::DBus::StringDeployment
        > ConnectionManagerDBusStubAdapterInternal::getLocalDevAddrAttributeStubDispatcher(
            &::v1::com::harman::btpres::ConnectionManagerStub::getLocalDevAddrAttribute
            , "s"
            );
/**
 * description: It will reflect local device name to registered clients
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        std::string,
        CommonAPI::DBus::StringDeployment
        > ConnectionManagerDBusStubAdapterInternal::getLocalDevNameAttributeStubDispatcher(
            &::v1::com::harman::btpres::ConnectionManagerStub::getLocalDevNameAttribute
            , "s"
            );
/**
 * description: It will broadcast stored pass key to registered clients
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        std::string,
        CommonAPI::DBus::StringDeployment
        > ConnectionManagerDBusStubAdapterInternal::getPassKeyPinAttributeStubDispatcher(
            &::v1::com::harman::btpres::ConnectionManagerStub::getPassKeyPinAttribute
            , "s"
            );
/**
 * description: It will broadcast device search status to registered client
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        bool
        > ConnectionManagerDBusStubAdapterInternal::getDeviceSearchStatusAttributeStubDispatcher(
            &::v1::com::harman::btpres::ConnectionManagerStub::getDeviceSearchStatusAttribute
            , "b"
            );
/**
 * description: It will broadcast discoverability status to registered clients
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        bool
        > ConnectionManagerDBusStubAdapterInternal::getDiscoverableStatusAttributeStubDispatcher(
            &::v1::com::harman::btpres::ConnectionManagerStub::getDiscoverableStatusAttribute
            , "b"
            );
/**
 * description: It will broadcast discoverability timeout to registered clients
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        uint16_t
        > ConnectionManagerDBusStubAdapterInternal::getDiscoveryTimeoutAttributeStubDispatcher(
            &::v1::com::harman::btpres::ConnectionManagerStub::getDiscoveryTimeoutAttribute
            , "q"
            );
/**
 * description: It will broadcast device search results to registered clients
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::tDeviceSearchEntryList,
        ::v1::com::harman::btpres::BTPresTypes_::tDeviceSearchEntryListDeployment_t
        > ConnectionManagerDBusStubAdapterInternal::getDevSearchResultsAttributeStubDispatcher(
            &::v1::com::harman::btpres::ConnectionManagerStub::getDevSearchResultsAttribute
            , "a(ssibb)"
            );
/**
 * description: It will broadcast bonded device list to registered clients
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::bondedDevList,
        ::v1::com::harman::btpres::BTPresTypes_::bondedDevListDeployment_t
        > ConnectionManagerDBusStubAdapterInternal::getDevListAttributeStubDispatcher(
            &::v1::com::harman::btpres::ConnectionManagerStub::getDevListAttribute
            , "a(ssia{ii})"
            );
/**
 * description: It will broadcast network status to registered clients
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::networkIfStatus,
        ::v1::com::harman::btpres::BTPresTypes_::networkIfStatusDeployment_t
        > ConnectionManagerDBusStubAdapterInternal::getNetIfStatusAttributeStubDispatcher(
            &::v1::com::harman::btpres::ConnectionManagerStub::getNetIfStatusAttribute
            , "(sb)"
            );
/**
 * description: It will braodcast unstable device info to registered clients
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        ::v1::com::harman::btpres::BTPresTypes::unstableDeviceInfoList,
        ::v1::com::harman::btpres::BTPresTypes_::unstableDeviceInfoListDeployment_t
        > ConnectionManagerDBusStubAdapterInternal::getUnstableDevsAttributeStubDispatcher(
            &::v1::com::harman::btpres::ConnectionManagerStub::getUnstableDevsAttribute
            , "a(ss)"
            );
/**
 * description: It will braodcast primary device address
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::harman::btpres::ConnectionManagerStub,
        std::string,
        CommonAPI::DBus::StringDeployment
        > ConnectionManagerDBusStubAdapterInternal::getPrimaryDeviceAttributeStubDispatcher(
            &::v1::com::harman::btpres::ConnectionManagerStub::getPrimaryDeviceAttribute
            , "s"
            );



/**
 * description: Used to start device search on head unit
 * param: maxDevice (UInt32)       : max limit for found devices
 * param: timeout (UInt32)         : time limit for device search operation

       
 *   returns: errorCode (eErrorType) : error code
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<uint32_t, uint32_t>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ConnectionManagerDBusStubAdapterInternal::startDeviceSearchStubDispatcher(
    &ConnectionManagerStub::startDeviceSearch, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Used to stop device search on head unit
 * param: none

        returns: error code (eErrorType) : error code
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ConnectionManagerDBusStubAdapterInternal::stopDeviceSearchStubDispatcher(
    &ConnectionManagerStub::stopDeviceSearch, "i",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Used to send secure Bonding reply
 * param: inAddress (string)       : phone BT address
 * param: accept (boolean)         : accepting authentication request
 * param: trusted (boolean)        : making device trusted means service won't send
 *   connection request for each connect attempt
 * param: type (eBondingType)      : Bonding type, standard or secure bonding

       
 *   returns: errorCode (eErrorType) : error code
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<std::string, bool, bool, ::v1::com::harman::btpres::BTPresTypes::eBondingType>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ConnectionManagerDBusStubAdapterInternal::bondingReplyStubDispatcher(
    &ConnectionManagerStub::bondingReply, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Used to delete device from paired device list
 * param: inAddress (string)      : phone BT address

        returns: errorCode
 *   (eErrorType): error code
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ConnectionManagerDBusStubAdapterInternal::deleteDeviceStubDispatcher(
    &ConnectionManagerStub::deleteDevice, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Used to delete all device in paired device list
 * param: none

        returns: errorCode (eErrorType) : error code
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ConnectionManagerDBusStubAdapterInternal::deleteAllDevicesStubDispatcher(
    &ConnectionManagerStub::deleteAllDevices, "i",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Used to initate profile connection with device
 * param: inAddress (string)       : phone BT address
 * param: service (eSupportedProfile) : profile name
 * param: instanceName (string)    : containing the phone instance
 * param: replaceAddr (string)     : containing the replacement address for which the
 *   connection will be replaced

        returns: errorCode (eErrorType) : error
 *   code
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<std::string, ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, std::string, std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ConnectionManagerDBusStubAdapterInternal::startServiceConnectionStubDispatcher(
    &ConnectionManagerStub::startServiceConnection, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Used to allows the existance of the service connection to this device and
 *   service.
 * param: inAddress (string)           : phone BT address
 * param: service (eSupportedProfile)  : profile name
 * param: allow (Boolean)              : containing the value true for allow, or false
 *   for reject

        returns: errorCode (eErrorType)      : error code
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<std::string, ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, bool>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ConnectionManagerDBusStubAdapterInternal::allowServiceConnectionStubDispatcher(
    &ConnectionManagerStub::allowServiceConnection, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Used to initate the disconnection with connected service i.e. HFP and A2DP
 * param: inAddress (string)                  : phone BT address
 * param: service (eSupportedProfile)         : profile name

        returns: errorCode
 *   error code (eErrorType)  : error code
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<std::string, ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ConnectionManagerDBusStubAdapterInternal::startServiceDisconnectionStubDispatcher(
    &ConnectionManagerStub::startServiceDisconnection, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This method should be called by clients in order to reply to the incoming
 *   service 
                       connection request from a remote device as
 *   indicated by the signal 'serviceConnectionRequest'. 
                      
 *   The reply can be to accept or reject incoming service connection request.
 * param: inAddress (string)              : phone BT address
 * param: service (eSupportedProfile)     : profile name
 * param: accept (boolean)                : containing the value true for allow, or false
 *   for reject
 * param: instanceName (string)           : containing the instance name of the device

 
 *         returns: errorCode (eErrorType)         : error code
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<std::string, ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, bool, std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ConnectionManagerDBusStubAdapterInternal::serviceConnectionReplyStubDispatcher(
    &ConnectionManagerStub::serviceConnectionReply, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Used to initiate the reconnection to previously connected device
 * param: None

        returns: errorCode error code (eErrorType) : error code
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ConnectionManagerDBusStubAdapterInternal::startReconnectStubDispatcher(
    &ConnectionManagerStub::startReconnect, "i",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This method should be called to get oldest connected device
 * param: None

        returns: oldestDevInfo (oldestDevInfo)     : Oldest device name
 *   and address
        returns: errorCode error code (eErrorType) : error code
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::deviceInfo, ::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes_::deviceInfoDeployment_t, CommonAPI::EmptyDeployment>
    
    > ConnectionManagerDBusStubAdapterInternal::getOldestConnectedDevStubDispatcher(
    &ConnectionManagerStub::getOldestConnectedDev, "(ss)i",
					std::make_tuple(),
                	std::make_tuple(static_cast<::v1::com::harman::btpres::BTPresTypes_::deviceInfoDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This method used to change name of bonded device.
 * param: inAddress  (string)     : contains the BD address.
 * param: name (string)           : Device name

        returns: errorCode(eErrorType) 
 *   : error code
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<std::string, std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ConnectionManagerDBusStubAdapterInternal::renameBondedDeviceStubDispatcher(
    &ConnectionManagerStub::renameBondedDevice, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This method used to change local name of head unit.
 * param: name (string)           : Device name

        returns: errorCode(eErrorType) 
 *   : error code
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ConnectionManagerDBusStubAdapterInternal::renameLocalDeviceStubDispatcher(
    &ConnectionManagerStub::renameLocalDevice, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Used to set bluetooth on or off
 * param: status (boolean)       : set true or false

        returns: error
 *   code(eErrorType) : error code
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<bool>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ConnectionManagerDBusStubAdapterInternal::setBluetoothStatusStubDispatcher(
    &ConnectionManagerStub::setBluetoothStatus, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Used to enable or disable discoverable mode
 * param: enabled (boolean)       : set true or false

        returns: errorCode
 *   (eErrorType) : error code
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<bool>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ConnectionManagerDBusStubAdapterInternal::setDiscoverableModeStubDispatcher(
    &ConnectionManagerStub::setDiscoverableMode, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This method used to pin information for head unit.
 * param: passkey (string)          : set the default pin for legacy devices

       
 *   returns:  error code (eErrorType) : error code
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ConnectionManagerDBusStubAdapterInternal::setPinStubDispatcher(
    &ConnectionManagerStub::setPin, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: It will set a device as primary
 * param: inAddress  (string)     : contains the BD address.

        returns:  error
 *   code (eErrorType) : error code
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::harman::btpres::ConnectionManagerStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::btpres::BTPresTypes::eErrorType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ConnectionManagerDBusStubAdapterInternal::setPrimaryDeviceStubDispatcher(
    &ConnectionManagerStub::setPrimaryDevice, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));


/**
 * description: It will reflect the current bluetooth status to registered clients
 */
void ConnectionManagerDBusStubAdapterInternal::fireBtStateAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::eBluetoothStatus& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v1::com::harman::btpres::BTPresTypes::eBluetoothStatus
    >>
        ::sendSignal(
            *this,
            "onBtStateAttributeChanged",
            "i",
            value
    
    );
}
/**
 * description: It will reflect local device address to registered clients
 */
void ConnectionManagerDBusStubAdapterInternal::fireLocalDevAddrAttributeChanged(const std::string& value) {
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deployedValue(value, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        std::string,
        CommonAPI::DBus::StringDeployment
    >
    >>
        ::sendSignal(
            *this,
            "onLocalDevAddrAttributeChanged",
            "s",
            deployedValue
    
    );
}
/**
 * description: It will reflect local device name to registered clients
 */
void ConnectionManagerDBusStubAdapterInternal::fireLocalDevNameAttributeChanged(const std::string& value) {
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deployedValue(value, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        std::string,
        CommonAPI::DBus::StringDeployment
    >
    >>
        ::sendSignal(
            *this,
            "onLocalDevNameAttributeChanged",
            "s",
            deployedValue
    
    );
}
/**
 * description: It will broadcast stored pass key to registered clients
 */
void ConnectionManagerDBusStubAdapterInternal::firePassKeyPinAttributeChanged(const std::string& value) {
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deployedValue(value, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        std::string,
        CommonAPI::DBus::StringDeployment
    >
    >>
        ::sendSignal(
            *this,
            "onPassKeyPinAttributeChanged",
            "s",
            deployedValue
    
    );
}
/**
 * description: It will broadcast device search status to registered client
 */
void ConnectionManagerDBusStubAdapterInternal::fireDeviceSearchStatusAttributeChanged(const bool& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    bool
    >>
        ::sendSignal(
            *this,
            "onDeviceSearchStatusAttributeChanged",
            "b",
            value
    
    );
}
/**
 * description: It will broadcast discoverability status to registered clients
 */
void ConnectionManagerDBusStubAdapterInternal::fireDiscoverableStatusAttributeChanged(const bool& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    bool
    >>
        ::sendSignal(
            *this,
            "onDiscoverableStatusAttributeChanged",
            "b",
            value
    
    );
}
/**
 * description: It will broadcast discoverability timeout to registered clients
 */
void ConnectionManagerDBusStubAdapterInternal::fireDiscoveryTimeoutAttributeChanged(const uint16_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    uint16_t
    >>
        ::sendSignal(
            *this,
            "onDiscoveryTimeoutAttributeChanged",
            "q",
            value
    
    );
}
/**
 * description: It will broadcast device search results to registered clients
 */
void ConnectionManagerDBusStubAdapterInternal::fireDevSearchResultsAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::tDeviceSearchEntryList& value) {
    CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::tDeviceSearchEntryList, ::v1::com::harman::btpres::BTPresTypes_::tDeviceSearchEntryListDeployment_t> deployedValue(value, static_cast<::v1::com::harman::btpres::BTPresTypes_::tDeviceSearchEntryListDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v1::com::harman::btpres::BTPresTypes::tDeviceSearchEntryList,
        ::v1::com::harman::btpres::BTPresTypes_::tDeviceSearchEntryListDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onDevSearchResultsAttributeChanged",
            "a(ssibb)",
            deployedValue
    
    );
}
/**
 * description: It will broadcast bonded device list to registered clients
 */
void ConnectionManagerDBusStubAdapterInternal::fireDevListAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::bondedDevList& value) {
    CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::bondedDevList, ::v1::com::harman::btpres::BTPresTypes_::bondedDevListDeployment_t> deployedValue(value, static_cast<::v1::com::harman::btpres::BTPresTypes_::bondedDevListDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v1::com::harman::btpres::BTPresTypes::bondedDevList,
        ::v1::com::harman::btpres::BTPresTypes_::bondedDevListDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onDevListAttributeChanged",
            "a(ssia{ii})",
            deployedValue
    
    );
}
/**
 * description: It will broadcast network status to registered clients
 */
void ConnectionManagerDBusStubAdapterInternal::fireNetIfStatusAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::networkIfStatus& value) {
    CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::networkIfStatus, ::v1::com::harman::btpres::BTPresTypes_::networkIfStatusDeployment_t> deployedValue(value, static_cast<::v1::com::harman::btpres::BTPresTypes_::networkIfStatusDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v1::com::harman::btpres::BTPresTypes::networkIfStatus,
        ::v1::com::harman::btpres::BTPresTypes_::networkIfStatusDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onNetIfStatusAttributeChanged",
            "(sb)",
            deployedValue
    
    );
}
/**
 * description: It will braodcast unstable device info to registered clients
 */
void ConnectionManagerDBusStubAdapterInternal::fireUnstableDevsAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::unstableDeviceInfoList& value) {
    CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::unstableDeviceInfoList, ::v1::com::harman::btpres::BTPresTypes_::unstableDeviceInfoListDeployment_t> deployedValue(value, static_cast<::v1::com::harman::btpres::BTPresTypes_::unstableDeviceInfoListDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v1::com::harman::btpres::BTPresTypes::unstableDeviceInfoList,
        ::v1::com::harman::btpres::BTPresTypes_::unstableDeviceInfoListDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onUnstableDevsAttributeChanged",
            "a(ss)",
            deployedValue
    
    );
}
/**
 * description: It will braodcast primary device address
 */
void ConnectionManagerDBusStubAdapterInternal::firePrimaryDeviceAttributeChanged(const std::string& value) {
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deployedValue(value, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        std::string,
        CommonAPI::DBus::StringDeployment
    >
    >>
        ::sendSignal(
            *this,
            "onPrimaryDeviceAttributeChanged",
            "s",
            deployedValue
    
    );
}

/**
 * description: It will broadcast standard bonding Request to registered clients
 * param: outAddress (string)     : Bt address of phone
 * param: deviceName (string)     : Device name
 * param: type (eBondingType)     : Bonding type
 * param: pin (string) : pass key pin
 */
void ConnectionManagerDBusStubAdapterInternal::fireBondingRequestEvent(const std::string& outAddress, const std::string& deviceName, const ::v1::com::harman::btpres::BTPresTypes::eBondingType& type, const std::string& pin) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>,
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>,
    ::v1::com::harman::btpres::BTPresTypes::eBondingType,
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>
    >>::sendSignal(
            *this,
            "bondingRequest",
            "ssis",
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(outAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(deviceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
    type,
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(pin, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))
    );
}
/**
 * description: It will broadcast service connection request to registered clients
 * param: outAddress (string)         : Bt address of phone
 * param: name (string)               : Device name
 * param: service (eSupportedProfile) : supported profile list
 */
void ConnectionManagerDBusStubAdapterInternal::fireServiceConnectionRequestEvent(const std::string& outAddress, const std::string& name, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile& service) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>,
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>,
    ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile
    >>::sendSignal(
            *this,
            "serviceConnectionRequest",
            "ssi",
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(outAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(name, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
    service
    );
}
/**
 * description: It will broadcast service connection status signal to registered clients
 * param: outAddress (string)         : Bt address of phone
 * param: name (string)               : Device name
 * param: service (eSupportedProfile) : supported profile list
 * param: status (eConnectionStatus)  : Connected or disconnected status
 * param: reason (eServiceConnectDisconnectReason) : reason for connection or
 *   disconnection
 */
void ConnectionManagerDBusStubAdapterInternal::fireServiceConnectionStatusEvent(const std::string& outAddress, const std::string& name, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile& service, const ::v1::com::harman::btpres::BTPresTypes::eConnectionStatus& status, const ::v1::com::harman::btpres::BTPresTypes::eServiceConnectDisconnectReason& reason) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>,
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>,
    ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile,
    ::v1::com::harman::btpres::BTPresTypes::eConnectionStatus,
    ::v1::com::harman::btpres::BTPresTypes::eServiceConnectDisconnectReason
    >>::sendSignal(
            *this,
            "serviceConnectionStatus",
            "ssiii",
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(outAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(name, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
    service,
    status,
    reason
    );
}
/**
 * description: This signal is sent when device has been deleted from Head Unit to registered
 *   clients
 * param: outAddress (string)     : Bt address of phone
 * param: deviceName (string )    : device name
 */
void ConnectionManagerDBusStubAdapterInternal::fireDeviceDeletedEvent(const std::string& outAddress, const std::string& deviceName) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>,
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>
    >>::sendSignal(
            *this,
            "deviceDeleted",
            "ss",
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(outAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(deviceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))
    );
}
/**
 * description: This signal is used to update the pairing status to registered clients
 * param: outAddress (string)         : Bt address of phone
 * param: deviceName (string)         : device name
 * param: pairStatus (ePairingStatus) : Pairing status i.e. successful Or failure
 */
void ConnectionManagerDBusStubAdapterInternal::fireBondingStatusEvent(const std::string& outAddress, const std::string& deviceName, const ::v1::com::harman::btpres::BTPresTypes::ePairingStatus& pairStatus) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>,
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>,
    ::v1::com::harman::btpres::BTPresTypes::ePairingStatus
    >>::sendSignal(
            *this,
            "bondingStatus",
            "ssi",
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(outAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(deviceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
    pairStatus
    );
}


const ConnectionManagerDBusStubAdapterHelper::StubDispatcherTable& ConnectionManagerDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& ConnectionManagerDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

ConnectionManagerDBusStubAdapterInternal::ConnectionManagerDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      ConnectionManagerDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<ConnectionManagerStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: It will reflect the current bluetooth status to registered clients
             */
            { { "getBtStateAttribute", "" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::getBtStateAttributeStubDispatcher },
            /**
             * description: It will reflect local device address to registered clients
             */
            { { "getLocalDevAddrAttribute", "" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::getLocalDevAddrAttributeStubDispatcher },
            /**
             * description: It will reflect local device name to registered clients
             */
            { { "getLocalDevNameAttribute", "" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::getLocalDevNameAttributeStubDispatcher },
            /**
             * description: It will broadcast stored pass key to registered clients
             */
            { { "getPassKeyPinAttribute", "" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::getPassKeyPinAttributeStubDispatcher },
            /**
             * description: It will broadcast device search status to registered client
             */
            { { "getDeviceSearchStatusAttribute", "" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::getDeviceSearchStatusAttributeStubDispatcher },
            /**
             * description: It will broadcast discoverability status to registered clients
             */
            { { "getDiscoverableStatusAttribute", "" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::getDiscoverableStatusAttributeStubDispatcher },
            /**
             * description: It will broadcast discoverability timeout to registered clients
             */
            { { "getDiscoveryTimeoutAttribute", "" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::getDiscoveryTimeoutAttributeStubDispatcher },
            /**
             * description: It will broadcast device search results to registered clients
             */
            { { "getDevSearchResultsAttribute", "" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::getDevSearchResultsAttributeStubDispatcher },
            /**
             * description: It will broadcast bonded device list to registered clients
             */
            { { "getDevListAttribute", "" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::getDevListAttributeStubDispatcher },
            /**
             * description: It will broadcast network status to registered clients
             */
            { { "getNetIfStatusAttribute", "" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::getNetIfStatusAttributeStubDispatcher },
            /**
             * description: It will braodcast unstable device info to registered clients
             */
            { { "getUnstableDevsAttribute", "" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::getUnstableDevsAttributeStubDispatcher },
            /**
             * description: It will braodcast primary device address
             */
            { { "getPrimaryDeviceAttribute", "" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::getPrimaryDeviceAttributeStubDispatcher }
            ,
            /**
             * description: Used to start device search on head unit
             * param: maxDevice (UInt32)       : max limit for found devices
             * param: timeout (UInt32)         : time limit for device search operation
            
                   
             *   returns: errorCode (eErrorType) : error code
             */
            { { "startDeviceSearch", "uu" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::startDeviceSearchStubDispatcher },
            /**
             * description: Used to stop device search on head unit
             * param: none
            
                    returns: error code (eErrorType) : error code
             */
            { { "stopDeviceSearch", "" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::stopDeviceSearchStubDispatcher },
            /**
             * description: Used to send secure Bonding reply
             * param: inAddress (string)       : phone BT address
             * param: accept (boolean)         : accepting authentication request
             * param: trusted (boolean)        : making device trusted means service won't send
             *   connection request for each connect attempt
             * param: type (eBondingType)      : Bonding type, standard or secure bonding
            
                   
             *   returns: errorCode (eErrorType) : error code
             */
            { { "bondingReply", "sbbi" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::bondingReplyStubDispatcher },
            /**
             * description: Used to delete device from paired device list
             * param: inAddress (string)      : phone BT address
            
                    returns: errorCode
             *   (eErrorType): error code
             */
            { { "deleteDevice", "s" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::deleteDeviceStubDispatcher },
            /**
             * description: Used to delete all device in paired device list
             * param: none
            
                    returns: errorCode (eErrorType) : error code
             */
            { { "deleteAllDevices", "" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::deleteAllDevicesStubDispatcher },
            /**
             * description: Used to initate profile connection with device
             * param: inAddress (string)       : phone BT address
             * param: service (eSupportedProfile) : profile name
             * param: instanceName (string)    : containing the phone instance
             * param: replaceAddr (string)     : containing the replacement address for which the
             *   connection will be replaced
            
                    returns: errorCode (eErrorType) : error
             *   code
             */
            { { "startServiceConnection", "siss" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::startServiceConnectionStubDispatcher },
            /**
             * description: Used to allows the existance of the service connection to this device and
             *   service.
             * param: inAddress (string)           : phone BT address
             * param: service (eSupportedProfile)  : profile name
             * param: allow (Boolean)              : containing the value true for allow, or false
             *   for reject
            
                    returns: errorCode (eErrorType)      : error code
             */
            { { "allowServiceConnection", "sib" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::allowServiceConnectionStubDispatcher },
            /**
             * description: Used to initate the disconnection with connected service i.e. HFP and A2DP
             * param: inAddress (string)                  : phone BT address
             * param: service (eSupportedProfile)         : profile name
            
                    returns: errorCode
             *   error code (eErrorType)  : error code
             */
            { { "startServiceDisconnection", "si" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::startServiceDisconnectionStubDispatcher },
            /**
             * description: This method should be called by clients in order to reply to the incoming
             *   service 
                                   connection request from a remote device as
             *   indicated by the signal 'serviceConnectionRequest'. 
                                  
             *   The reply can be to accept or reject incoming service connection request.
             * param: inAddress (string)              : phone BT address
             * param: service (eSupportedProfile)     : profile name
             * param: accept (boolean)                : containing the value true for allow, or false
             *   for reject
             * param: instanceName (string)           : containing the instance name of the device
            
             
             *         returns: errorCode (eErrorType)         : error code
             */
            { { "serviceConnectionReply", "sibs" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::serviceConnectionReplyStubDispatcher },
            /**
             * description: Used to initiate the reconnection to previously connected device
             * param: None
            
                    returns: errorCode error code (eErrorType) : error code
             */
            { { "startReconnect", "" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::startReconnectStubDispatcher },
            /**
             * description: This method should be called to get oldest connected device
             * param: None
            
                    returns: oldestDevInfo (oldestDevInfo)     : Oldest device name
             *   and address
                    returns: errorCode error code (eErrorType) : error code
             */
            { { "getOldestConnectedDev", "" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::getOldestConnectedDevStubDispatcher },
            /**
             * description: This method used to change name of bonded device.
             * param: inAddress  (string)     : contains the BD address.
             * param: name (string)           : Device name
            
                    returns: errorCode(eErrorType) 
             *   : error code
             */
            { { "renameBondedDevice", "ss" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::renameBondedDeviceStubDispatcher },
            /**
             * description: This method used to change local name of head unit.
             * param: name (string)           : Device name
            
                    returns: errorCode(eErrorType) 
             *   : error code
             */
            { { "renameLocalDevice", "s" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::renameLocalDeviceStubDispatcher },
            /**
             * description: Used to set bluetooth on or off
             * param: status (boolean)       : set true or false
            
                    returns: error
             *   code(eErrorType) : error code
             */
            { { "setBluetoothStatus", "b" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::setBluetoothStatusStubDispatcher },
            /**
             * description: Used to enable or disable discoverable mode
             * param: enabled (boolean)       : set true or false
            
                    returns: errorCode
             *   (eErrorType) : error code
             */
            { { "setDiscoverableMode", "b" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::setDiscoverableModeStubDispatcher },
            /**
             * description: This method used to pin information for head unit.
             * param: passkey (string)          : set the default pin for legacy devices
            
                   
             *   returns:  error code (eErrorType) : error code
             */
            { { "setPin", "s" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::setPinStubDispatcher },
            /**
             * description: It will set a device as primary
             * param: inAddress  (string)     : contains the BD address.
            
                    returns:  error
             *   code (eErrorType) : error code
             */
            { { "setPrimaryDevice", "s" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::setPrimaryDeviceStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &com::harman::btpres::ConnectionManagerDBusStubAdapterInternal::getConnectionManagerInterfaceVersionStubDispatcher });
}

bool ConnectionManagerDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace btpres
} // namespace harman
} // namespace com
} // namespace v1
