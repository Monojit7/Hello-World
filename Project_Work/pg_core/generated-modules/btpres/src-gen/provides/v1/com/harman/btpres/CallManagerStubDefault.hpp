/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Thu Sep 22 00:23:23 IST 2016
*/
#ifndef V1_COM_HARMAN_BTPRES_Call_Manager_STUB_DEFAULT_HPP_
#define V1_COM_HARMAN_BTPRES_Call_Manager_STUB_DEFAULT_HPP_


#include <v1/com/harman/btpres/CallManagerStub.hpp>
#include <sstream>

namespace v1 {
namespace com {
namespace harman {
namespace btpres {

/**
 * Provides a default implementation for CallManagerStubRemoteEvent and
 * CallManagerStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class CallManagerStubDefault
    : public virtual CallManagerStub {
public:
    CallManagerStubDefault();

    CallManagerStubRemoteEvent* initStubAdapter(const std::shared_ptr<CallManagerStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    virtual const ::v1::com::harman::btpres::BTPresTypes::hfpSupportedFeaturesList& getHfFeaturesListAttribute();
    virtual const ::v1::com::harman::btpres::BTPresTypes::hfpSupportedFeaturesList& getHfFeaturesListAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setHfFeaturesListAttribute(::v1::com::harman::btpres::BTPresTypes::hfpSupportedFeaturesList _value);
    virtual const ::v1::com::harman::btpres::BTPresTypes::networkOperatorInfoList& getOperatorInfoListAttribute();
    virtual const ::v1::com::harman::btpres::BTPresTypes::networkOperatorInfoList& getOperatorInfoListAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setOperatorInfoListAttribute(::v1::com::harman::btpres::BTPresTypes::networkOperatorInfoList _value);
    virtual const ::v1::com::harman::btpres::BTPresTypes::signalChargeInfoList& getRssiChargeInfoListAttribute();
    virtual const ::v1::com::harman::btpres::BTPresTypes::signalChargeInfoList& getRssiChargeInfoListAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setRssiChargeInfoListAttribute(::v1::com::harman::btpres::BTPresTypes::signalChargeInfoList _value);
    virtual const ::v1::com::harman::btpres::BTPresTypes::callstateInfoList& getCallStateInfoAttribute();
    virtual const ::v1::com::harman::btpres::BTPresTypes::callstateInfoList& getCallStateInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setCallStateInfoAttribute(::v1::com::harman::btpres::BTPresTypes::callstateInfoList _value);
    virtual const ::v1::com::harman::btpres::BTPresTypes::hfModeStatusList& getHfModeAttribute();
    virtual const ::v1::com::harman::btpres::BTPresTypes::hfModeStatusList& getHfModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setHfModeAttribute(::v1::com::harman::btpres::BTPresTypes::hfModeStatusList _value);
    virtual const ::v1::com::harman::btpres::BTPresTypes::callDurationList& getCallDurationAttribute();
    virtual const ::v1::com::harman::btpres::BTPresTypes::callDurationList& getCallDurationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setCallDurationAttribute(::v1::com::harman::btpres::BTPresTypes::callDurationList _value);
    virtual const ::v1::com::harman::btpres::BTPresTypes::audioStatusList& getAudioStatusAttribute();
    virtual const ::v1::com::harman::btpres::BTPresTypes::audioStatusList& getAudioStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setAudioStatusAttribute(::v1::com::harman::btpres::BTPresTypes::audioStatusList _value);
    virtual const ::v1::com::harman::btpres::BTPresTypes::vrModeStatusList& getVrModeAttribute();
    virtual const ::v1::com::harman::btpres::BTPresTypes::vrModeStatusList& getVrModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setVrModeAttribute(::v1::com::harman::btpres::BTPresTypes::vrModeStatusList _value);

    /**
     * description: Used to initate call from head unit HMI.
     * param: inAddress (String)    	: BD Address of the device to get the properties
    	     
     *   : dialNumber (String)	        : Number to be dialled
    	      : contactName
     *   (String)    	: Contact Name if available
    	      : imageUrl (String)	        :
     *   Image URL if available
    	returns: errorCode (eErrorType)	: API execution output
     */
    virtual void dial(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, std::string _dialNumber, std::string _contactName, std::string _imageUrl, ::v1::com::harman::btpres::BTPresTypes::eTelType _numType, dialReply_t _reply);
    /**
     * description: Used to send DTMF tone from head unit to phone.
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   dtmfTone (String)	: DTMF tone to be sent
    	returns: errorCode (errorCode)	: API
     *   execution ouput
     */
    virtual void sendDtmfTone(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, std::string _dtmfTone, sendDtmfToneReply_t _reply);
    /**
     * description: Accept incoming call from Head Unit
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   transfer (Boolean)	: Whether the call has to be transferred to Handset mode
     *   upon acceptance
    	returns: errorCode (eErrorType): API execution output
     */
    virtual void acceptIncomingCall(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, bool _transfer, acceptIncomingCallReply_t _reply);
    /**
     * description: End call for passed call ID
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   callId (Int32)          : Call ID of the phone call to be ended
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    virtual void endCall(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, int8_t _callId, endCallReply_t _reply);
    /**
     * description: End currently active call for a particular device
     * param: inAddress (String)      : BD Address of the device to get the
     *   properties
    	returns: errorCode (eErrorType): API execution output
     */
    virtual void endActiveCall(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, endActiveCallReply_t _reply);
    /**
     * description: Ends all available calls
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    virtual void endAllCalls(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, endAllCallsReply_t _reply);
    /**
     * description: Reject incoming calls
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    virtual void rejectIncomingCall(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, rejectIncomingCallReply_t _reply);
    /**
     * description: Put current active call on hold
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    virtual void holdActiveCall(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, holdActiveCallReply_t _reply);
    /**
     * description: Activate the held from head unit
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    virtual void resumeHeldCall(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, resumeHeldCallReply_t _reply);
    /**
     * description: Conference available calls from Head Unit
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    virtual void conferenceCall(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, conferenceCallReply_t _reply);
    /**
     * description: Interface is used by HMI to select a particular call in case two phone are
     *   connected each with a phone call.
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   callId (Int32)          : Call ID of the phone call to be selected
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    virtual void selectCall(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, int8_t _callId, selectCallReply_t _reply);
    /**
     * description: Interface is used by HMI to transfer call audio from Handsfree to Handset and
     *   vise versa
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   hfMode (Boolean)	: Handsfree Mode requested from the HMI
    	returns: errorCode
     *   (eErrorType): API execution output
     */
    virtual void setHfMode(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, bool _hfMode, setHfModeReply_t _reply);
    /**
     * description: Interface is used by HMI to active Phone VR mode from Head Unit
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   mode (Boolean)		: VR Mode requested from the HMI
    	returns: errorCode
     *   (eErrorType): API execution output
     */
    virtual void setVRMode(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, bool _mode, setVRModeReply_t _reply);
    /**
     * description: Interface is used by HMI to swap the active call available on Head Unit
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    virtual void swapCalls(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, swapCallsReply_t _reply);



protected:
    /**
     * description: broadcast Handsfree supported features to registered clients
     */
    virtual bool trySetHfFeaturesListAttribute(::v1::com::harman::btpres::BTPresTypes::hfpSupportedFeaturesList _value);
    virtual bool validateHfFeaturesListAttributeRequestedValue(const ::v1::com::harman::btpres::BTPresTypes::hfpSupportedFeaturesList &_value);
    /**
     * description: broadcast phone network operator information to registered clients
     */
    virtual bool trySetOperatorInfoListAttribute(::v1::com::harman::btpres::BTPresTypes::networkOperatorInfoList _value);
    virtual bool validateOperatorInfoListAttributeRequestedValue(const ::v1::com::harman::btpres::BTPresTypes::networkOperatorInfoList &_value);
    /**
     * description: broadcast signal and charge levels to registered clients
     */
    virtual bool trySetRssiChargeInfoListAttribute(::v1::com::harman::btpres::BTPresTypes::signalChargeInfoList _value);
    virtual bool validateRssiChargeInfoListAttributeRequestedValue(const ::v1::com::harman::btpres::BTPresTypes::signalChargeInfoList &_value);
    /**
     * description: broadcast callstate status to registered clients
     */
    virtual bool trySetCallStateInfoAttribute(::v1::com::harman::btpres::BTPresTypes::callstateInfoList _value);
    virtual bool validateCallStateInfoAttributeRequestedValue(const ::v1::com::harman::btpres::BTPresTypes::callstateInfoList &_value);
    /**
     * description: broadcast HF mode status to registered clients
     */
    virtual bool trySetHfModeAttribute(::v1::com::harman::btpres::BTPresTypes::hfModeStatusList _value);
    virtual bool validateHfModeAttributeRequestedValue(const ::v1::com::harman::btpres::BTPresTypes::hfModeStatusList &_value);
    /**
     * description: broadcast call duration to registered clients
     */
    virtual bool trySetCallDurationAttribute(::v1::com::harman::btpres::BTPresTypes::callDurationList _value);
    virtual bool validateCallDurationAttributeRequestedValue(const ::v1::com::harman::btpres::BTPresTypes::callDurationList &_value);
    /**
     * description: broadcast SCO audio status to registered clients
     */
    virtual bool trySetAudioStatusAttribute(::v1::com::harman::btpres::BTPresTypes::audioStatusList _value);
    virtual bool validateAudioStatusAttributeRequestedValue(const ::v1::com::harman::btpres::BTPresTypes::audioStatusList &_value);
    /**
     * description: broadcast VR status to registered clients
     */
    virtual bool trySetVrModeAttribute(::v1::com::harman::btpres::BTPresTypes::vrModeStatusList _value);
    virtual bool validateVrModeAttributeRequestedValue(const ::v1::com::harman::btpres::BTPresTypes::vrModeStatusList &_value);
    class RemoteEventHandler: public virtual CallManagerStubRemoteEvent {
    public:
        RemoteEventHandler(CallManagerStubDefault *_defaultStub);

        /**
         * description: broadcast Handsfree supported features to registered clients
         */

        /**
         * description: broadcast phone network operator information to registered clients
         */

        /**
         * description: broadcast signal and charge levels to registered clients
         */

        /**
         * description: broadcast callstate status to registered clients
         */

        /**
         * description: broadcast HF mode status to registered clients
         */

        /**
         * description: broadcast call duration to registered clients
         */

        /**
         * description: broadcast SCO audio status to registered clients
         */

        /**
         * description: broadcast VR status to registered clients
         */


    private:
        CallManagerStubDefault *defaultStub_;
    };
private:
    CallManagerStubDefault::RemoteEventHandler remoteEventHandler_;

    /**
     * description: broadcast Handsfree supported features to registered clients
     */
    ::v1::com::harman::btpres::BTPresTypes::hfpSupportedFeaturesList hfFeaturesListAttributeValue_ {};
    /**
     * description: broadcast phone network operator information to registered clients
     */
    ::v1::com::harman::btpres::BTPresTypes::networkOperatorInfoList operatorInfoListAttributeValue_ {};
    /**
     * description: broadcast signal and charge levels to registered clients
     */
    ::v1::com::harman::btpres::BTPresTypes::signalChargeInfoList rssiChargeInfoListAttributeValue_ {};
    /**
     * description: broadcast callstate status to registered clients
     */
    ::v1::com::harman::btpres::BTPresTypes::callstateInfoList callStateInfoAttributeValue_ {};
    /**
     * description: broadcast HF mode status to registered clients
     */
    ::v1::com::harman::btpres::BTPresTypes::hfModeStatusList hfModeAttributeValue_ {};
    /**
     * description: broadcast call duration to registered clients
     */
    ::v1::com::harman::btpres::BTPresTypes::callDurationList callDurationAttributeValue_ {};
    /**
     * description: broadcast SCO audio status to registered clients
     */
    ::v1::com::harman::btpres::BTPresTypes::audioStatusList audioStatusAttributeValue_ {};
    /**
     * description: broadcast VR status to registered clients
     */
    ::v1::com::harman::btpres::BTPresTypes::vrModeStatusList vrModeAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace btpres
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_BTPRES_Call_Manager_STUB_DEFAULT
