/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Thu Sep 22 00:23:23 IST 2016
*/
#ifndef V1_COM_HARMAN_BTPRES_BT_Pres_Types_HPP_
#define V1_COM_HARMAN_BTPRES_BT_Pres_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace btpres {

struct BTPresTypes {
    
    struct eBluetoothStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            BTSTATE_OFF = 0,
            BTSTATE_ON = 1
        };
        
        eBluetoothStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::BTSTATE_OFF)) {}
        eBluetoothStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::BTSTATE_OFF):
                case static_cast<int32_t>(Literal::BTSTATE_ON):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eBluetoothStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eBluetoothStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eBluetoothStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eBluetoothStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eBluetoothStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eBluetoothStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eSupportedFeature : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            PHONE_FEATURE_NONE = 0,
            PHONE_FEATURE_REJECT = 1,
            PHONE_FEATURE_REPLACE = 2,
            PHONE_FEATURE_SWAP = 3,
            PHONE_FEATURE_HANGUP_ENH = 4,
            PHONE_FEATURE_SELECT = 5,
            PHONE_FEATURE_CONFERENCE = 6,
            PHONE_FEATURE_CALLTRANSFER = 7,
            PHONE_FEATURE_CALLSTATUS_ENH = 8,
            PHONE_FEATURE_RESP_AND_HOLD = 9,
            PHONE_FEATURE_INBAND = 10,
            PHONE_FEATURE_VR = 11,
            PHONE_FEATURE_AUDIO_ENH = 12,
            PHONE_FEATURE_SIRI = 13,
            PHONE_FEATURE_GOOGLE_NOW = 14
        };
        
        eSupportedFeature() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::PHONE_FEATURE_NONE)) {}
        eSupportedFeature(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::PHONE_FEATURE_NONE):
                case static_cast<int32_t>(Literal::PHONE_FEATURE_REJECT):
                case static_cast<int32_t>(Literal::PHONE_FEATURE_REPLACE):
                case static_cast<int32_t>(Literal::PHONE_FEATURE_SWAP):
                case static_cast<int32_t>(Literal::PHONE_FEATURE_HANGUP_ENH):
                case static_cast<int32_t>(Literal::PHONE_FEATURE_SELECT):
                case static_cast<int32_t>(Literal::PHONE_FEATURE_CONFERENCE):
                case static_cast<int32_t>(Literal::PHONE_FEATURE_CALLTRANSFER):
                case static_cast<int32_t>(Literal::PHONE_FEATURE_CALLSTATUS_ENH):
                case static_cast<int32_t>(Literal::PHONE_FEATURE_RESP_AND_HOLD):
                case static_cast<int32_t>(Literal::PHONE_FEATURE_INBAND):
                case static_cast<int32_t>(Literal::PHONE_FEATURE_VR):
                case static_cast<int32_t>(Literal::PHONE_FEATURE_AUDIO_ENH):
                case static_cast<int32_t>(Literal::PHONE_FEATURE_SIRI):
                case static_cast<int32_t>(Literal::PHONE_FEATURE_GOOGLE_NOW):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eSupportedFeature &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eSupportedFeature &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eSupportedFeature &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eSupportedFeature &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eSupportedFeature &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eSupportedFeature &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eSupportedProfile : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            PROFILE_HFPGW = 0,
            PROFILE_A2DP = 1,
            PROFILE_AVRCP = 2,
            PROFILE_SPP = 3,
            PROFILE_PAN = 4,
            PROFILE_PBAP = 5,
            PROFILE_MAP = 6,
            PROFILE_UNKNOWN = 7
        };
        
        eSupportedProfile() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::PROFILE_HFPGW)) {}
        eSupportedProfile(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::PROFILE_HFPGW):
                case static_cast<int32_t>(Literal::PROFILE_A2DP):
                case static_cast<int32_t>(Literal::PROFILE_AVRCP):
                case static_cast<int32_t>(Literal::PROFILE_SPP):
                case static_cast<int32_t>(Literal::PROFILE_PAN):
                case static_cast<int32_t>(Literal::PROFILE_PBAP):
                case static_cast<int32_t>(Literal::PROFILE_MAP):
                case static_cast<int32_t>(Literal::PROFILE_UNKNOWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eSupportedProfile &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eSupportedProfile &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eSupportedProfile &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eSupportedProfile &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eSupportedProfile &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eSupportedProfile &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eCOD : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            CLASS_COMPUTER = 0,
            CLASS_PHONE = 1,
            CLASS_AUDIO_VIDEO = 2,
            CLASS_WEARABLE = 3,
            CLASS_OTHERS = 4
        };
        
        eCOD() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::CLASS_COMPUTER)) {}
        eCOD(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::CLASS_COMPUTER):
                case static_cast<int32_t>(Literal::CLASS_PHONE):
                case static_cast<int32_t>(Literal::CLASS_AUDIO_VIDEO):
                case static_cast<int32_t>(Literal::CLASS_WEARABLE):
                case static_cast<int32_t>(Literal::CLASS_OTHERS):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eCOD &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eCOD &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eCOD &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eCOD &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eCOD &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eCOD &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eBondingType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            BONDING_STANDARD = 0,
            BONDING_SECURE = 1
        };
        
        eBondingType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::BONDING_STANDARD)) {}
        eBondingType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::BONDING_STANDARD):
                case static_cast<int32_t>(Literal::BONDING_SECURE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eBondingType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eBondingType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eBondingType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eBondingType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eBondingType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eBondingType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ePairingStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            PAIRING_SUCCESS = 0,
            PAIRING_FAILURE = 1,
            PAIRING_DISCOVERABLE = 2,
            PAIRING_NOT_DISCOVERABLE = 3
        };
        
        ePairingStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::PAIRING_SUCCESS)) {}
        ePairingStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::PAIRING_SUCCESS):
                case static_cast<int32_t>(Literal::PAIRING_FAILURE):
                case static_cast<int32_t>(Literal::PAIRING_DISCOVERABLE):
                case static_cast<int32_t>(Literal::PAIRING_NOT_DISCOVERABLE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ePairingStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ePairingStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ePairingStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ePairingStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ePairingStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ePairingStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eConnectionStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SERVICE_CONNECTED = 0,
            SERVICE_CONNECTING = 1,
            SERVICE_DISCONNECTING = 2,
            SERVICE_DISCONNECTED = 3,
            SERVICE_CONNECTERROR = 4,
            SERVICE_NOT_SUPPORTED = 5
        };
        
        eConnectionStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SERVICE_CONNECTED)) {}
        eConnectionStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SERVICE_CONNECTED):
                case static_cast<int32_t>(Literal::SERVICE_CONNECTING):
                case static_cast<int32_t>(Literal::SERVICE_DISCONNECTING):
                case static_cast<int32_t>(Literal::SERVICE_DISCONNECTED):
                case static_cast<int32_t>(Literal::SERVICE_CONNECTERROR):
                case static_cast<int32_t>(Literal::SERVICE_NOT_SUPPORTED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eConnectionStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eConnectionStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eConnectionStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eConnectionStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eConnectionStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eConnectionStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eServiceConnectDisconnectReason : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SERVICE_CONNECTED_HEADUNIT_INITIATED = 0,
            SERVICE_CONNECTED_PHONE_INITIATED = 1,
            SERVICE_CONNECTED_AUTO_CONNECTION = 2,
            SERVICE_DISCONNECTED_HEADUNIT_INITIATED = 3,
            SERVICE_DISCONNECTED_PHONE_INITIATED = 4,
            SERVICE_DISCONNECTED_LINK_LOSS = 5,
            SERVICE_CONNECT_ERROR_PAGE_TIMEOUT = 6,
            SERVICE_CONNECT_ERROR_USER_REJECTED = 7,
            SERVICE_DISCONNECTED_DEVICE_DISCONNECTED = 8
        };
        
        eServiceConnectDisconnectReason() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SERVICE_CONNECTED_HEADUNIT_INITIATED)) {}
        eServiceConnectDisconnectReason(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SERVICE_CONNECTED_HEADUNIT_INITIATED):
                case static_cast<int32_t>(Literal::SERVICE_CONNECTED_PHONE_INITIATED):
                case static_cast<int32_t>(Literal::SERVICE_CONNECTED_AUTO_CONNECTION):
                case static_cast<int32_t>(Literal::SERVICE_DISCONNECTED_HEADUNIT_INITIATED):
                case static_cast<int32_t>(Literal::SERVICE_DISCONNECTED_PHONE_INITIATED):
                case static_cast<int32_t>(Literal::SERVICE_DISCONNECTED_LINK_LOSS):
                case static_cast<int32_t>(Literal::SERVICE_CONNECT_ERROR_PAGE_TIMEOUT):
                case static_cast<int32_t>(Literal::SERVICE_CONNECT_ERROR_USER_REJECTED):
                case static_cast<int32_t>(Literal::SERVICE_DISCONNECTED_DEVICE_DISCONNECTED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eServiceConnectDisconnectReason &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eServiceConnectDisconnectReason &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eServiceConnectDisconnectReason &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eServiceConnectDisconnectReason &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eServiceConnectDisconnectReason &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eServiceConnectDisconnectReason &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eTransferDelay : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            TRANSFER_DELAY_YES = 0,
            TRANSFER_DELAY_NO = 1
        };
        
        eTransferDelay() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::TRANSFER_DELAY_YES)) {}
        eTransferDelay(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::TRANSFER_DELAY_YES):
                case static_cast<int32_t>(Literal::TRANSFER_DELAY_NO):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eTransferDelay &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eTransferDelay &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eTransferDelay &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eTransferDelay &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eTransferDelay &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eTransferDelay &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eCodecType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            CODEC_NARROW_BAND = 0,
            CODEC_WIDE_BAND = 1
        };
        
        eCodecType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::CODEC_NARROW_BAND)) {}
        eCodecType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::CODEC_NARROW_BAND):
                case static_cast<int32_t>(Literal::CODEC_WIDE_BAND):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eCodecType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eCodecType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eCodecType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eCodecType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eCodecType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eCodecType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eDirection : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DIRECTION_UNKNOWN = 0,
            DIRECTION_INCOMING = 1,
            DIRECTION_OUTGOING = 2
        };
        
        eDirection() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DIRECTION_UNKNOWN)) {}
        eDirection(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DIRECTION_UNKNOWN):
                case static_cast<int32_t>(Literal::DIRECTION_INCOMING):
                case static_cast<int32_t>(Literal::DIRECTION_OUTGOING):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eDirection &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eDirection &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eDirection &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eDirection &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eDirection &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eDirection &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eBatteryChargeLevel : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            BATTERY_CHARGE_0_PERCENT = 0,
            BATTERY_CHARGE_20_PERCENT = 1,
            BATTERY_CHARGE_40_PERCENT = 2,
            BATTERY_CHARGE_60_PERCENT = 3,
            BATTERY_CHARGE_80_PERCENT = 4,
            BATTERY_CHARGE_100_PERCENT = 5
        };
        
        eBatteryChargeLevel() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::BATTERY_CHARGE_0_PERCENT)) {}
        eBatteryChargeLevel(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::BATTERY_CHARGE_0_PERCENT):
                case static_cast<int32_t>(Literal::BATTERY_CHARGE_20_PERCENT):
                case static_cast<int32_t>(Literal::BATTERY_CHARGE_40_PERCENT):
                case static_cast<int32_t>(Literal::BATTERY_CHARGE_60_PERCENT):
                case static_cast<int32_t>(Literal::BATTERY_CHARGE_80_PERCENT):
                case static_cast<int32_t>(Literal::BATTERY_CHARGE_100_PERCENT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eBatteryChargeLevel &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eBatteryChargeLevel &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eBatteryChargeLevel &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eBatteryChargeLevel &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eBatteryChargeLevel &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eBatteryChargeLevel &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eRssiLevel : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            RSSI_LEVEL_10_PERCENT = 0,
            RSSI_LEVEL_20_PERCENT = 1,
            RSSI_LEVEL_30_PERCENT = 2,
            RSSI_LEVEL_40_PERCENT = 3,
            RSSI_LEVEL_50_PERCENT = 4,
            RSSI_LEVEL_60_PERCENT = 5,
            RSSI_LEVEL_70_PERCENT = 6,
            RSSI_LEVEL_80_PERCENT = 7,
            RSSI_LEVEL_90_PERCENT = 8,
            RSSI_LEVEL_100_PERCENT = 9
        };
        
        eRssiLevel() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::RSSI_LEVEL_10_PERCENT)) {}
        eRssiLevel(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::RSSI_LEVEL_10_PERCENT):
                case static_cast<int32_t>(Literal::RSSI_LEVEL_20_PERCENT):
                case static_cast<int32_t>(Literal::RSSI_LEVEL_30_PERCENT):
                case static_cast<int32_t>(Literal::RSSI_LEVEL_40_PERCENT):
                case static_cast<int32_t>(Literal::RSSI_LEVEL_50_PERCENT):
                case static_cast<int32_t>(Literal::RSSI_LEVEL_60_PERCENT):
                case static_cast<int32_t>(Literal::RSSI_LEVEL_70_PERCENT):
                case static_cast<int32_t>(Literal::RSSI_LEVEL_80_PERCENT):
                case static_cast<int32_t>(Literal::RSSI_LEVEL_90_PERCENT):
                case static_cast<int32_t>(Literal::RSSI_LEVEL_100_PERCENT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eRssiLevel &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eRssiLevel &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eRssiLevel &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eRssiLevel &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eRssiLevel &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eRssiLevel &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eNetworkRegState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            PHONE_REGSTATE_UNKNOWN = 0,
            PHONE_REGSTATE_NOT_REGISTERED = 1,
            PHONE_REGSTATE_HOME = 2,
            PHONE_REGSTATE_SEARCHING = 3,
            PHONE_REGSTATE_DENIED = 4,
            PHONE_REGSTATE_ROAMING = 5,
            PHONE_REGSTATE_OPERATOR_DENIED = 6
        };
        
        eNetworkRegState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::PHONE_REGSTATE_UNKNOWN)) {}
        eNetworkRegState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::PHONE_REGSTATE_UNKNOWN):
                case static_cast<int32_t>(Literal::PHONE_REGSTATE_NOT_REGISTERED):
                case static_cast<int32_t>(Literal::PHONE_REGSTATE_HOME):
                case static_cast<int32_t>(Literal::PHONE_REGSTATE_SEARCHING):
                case static_cast<int32_t>(Literal::PHONE_REGSTATE_DENIED):
                case static_cast<int32_t>(Literal::PHONE_REGSTATE_ROAMING):
                case static_cast<int32_t>(Literal::PHONE_REGSTATE_OPERATOR_DENIED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eNetworkRegState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eNetworkRegState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eNetworkRegState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eNetworkRegState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eNetworkRegState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eNetworkRegState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eOperatorMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            OPERATOR_MODE_UNKNOWN = 0,
            OPERATOR_MODE_AUTO = 1,
            OPERATOR_MODE_MANUAL = 2
        };
        
        eOperatorMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::OPERATOR_MODE_UNKNOWN)) {}
        eOperatorMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OPERATOR_MODE_UNKNOWN):
                case static_cast<int32_t>(Literal::OPERATOR_MODE_AUTO):
                case static_cast<int32_t>(Literal::OPERATOR_MODE_MANUAL):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eOperatorMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eOperatorMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eOperatorMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eOperatorMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eOperatorMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eOperatorMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eCallState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            CALL_STATE_IDLE = 0,
            CALL_STATE_ACTIVE = 1,
            CALL_STATE_ON_HOLD = 2,
            CALL_STATE_TERMINATED = 3,
            CALL_STATE_DIALING = 4,
            CALL_STATE_RINGING = 5,
            CALL_STATE_ALERTING = 6,
            CALL_STATE_WAITING = 7
        };
        
        eCallState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::CALL_STATE_IDLE)) {}
        eCallState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::CALL_STATE_IDLE):
                case static_cast<int32_t>(Literal::CALL_STATE_ACTIVE):
                case static_cast<int32_t>(Literal::CALL_STATE_ON_HOLD):
                case static_cast<int32_t>(Literal::CALL_STATE_TERMINATED):
                case static_cast<int32_t>(Literal::CALL_STATE_DIALING):
                case static_cast<int32_t>(Literal::CALL_STATE_RINGING):
                case static_cast<int32_t>(Literal::CALL_STATE_ALERTING):
                case static_cast<int32_t>(Literal::CALL_STATE_WAITING):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eCallState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eCallState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eCallState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eCallState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eCallState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eCallState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eAudioStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SCO_DISCONNECTED = 0,
            SCO_CONNECTED = 1,
            SCO_ERROR = 2
        };
        
        eAudioStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SCO_DISCONNECTED)) {}
        eAudioStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SCO_DISCONNECTED):
                case static_cast<int32_t>(Literal::SCO_CONNECTED):
                case static_cast<int32_t>(Literal::SCO_ERROR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eAudioStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eAudioStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eAudioStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eAudioStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eAudioStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eAudioStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eErrorType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ERROR_TYPE_SUCCESS = 0,
            ERROR_TYPE_DEFAULT = 1,
            ERROR_TYPE_PENDING = 2,
            ERROR_TYPE_API_NOT_SUPPORTED = 3,
            ERROR_TYPE_BAD_PARAMETER = 4,
            ERROR_TYPE_DEVICE_REMOVED = 5,
            ERROR_TYPE_SYNC_NOT_COMPLETED = 6,
            ERROR_TYPE_FAILURE = 7,
            ERROR_EXCEEDED_MAX_ENTRY_LIMIT = 8,
            ERROR_EXCEEDED_MAX_CHARACTER_LIMIT = 9
        };
        
        eErrorType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ERROR_TYPE_SUCCESS)) {}
        eErrorType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ERROR_TYPE_SUCCESS):
                case static_cast<int32_t>(Literal::ERROR_TYPE_DEFAULT):
                case static_cast<int32_t>(Literal::ERROR_TYPE_PENDING):
                case static_cast<int32_t>(Literal::ERROR_TYPE_API_NOT_SUPPORTED):
                case static_cast<int32_t>(Literal::ERROR_TYPE_BAD_PARAMETER):
                case static_cast<int32_t>(Literal::ERROR_TYPE_DEVICE_REMOVED):
                case static_cast<int32_t>(Literal::ERROR_TYPE_SYNC_NOT_COMPLETED):
                case static_cast<int32_t>(Literal::ERROR_TYPE_FAILURE):
                case static_cast<int32_t>(Literal::ERROR_EXCEEDED_MAX_ENTRY_LIMIT):
                case static_cast<int32_t>(Literal::ERROR_EXCEEDED_MAX_CHARACTER_LIMIT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eErrorType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eErrorType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eErrorType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eErrorType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eErrorType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eErrorType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eFilterType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            FILTER_TYPE_BEGINS_WITH = 0,
            FILTER_TYPE_ENDS_WITH = 1,
            FILTER_TYPE_CONTAINS = 2,
            FILTER_TYPE_EXACT_MATCH = 3,
            FILTER_UNREAD_SMS = 4
        };
        
        eFilterType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::FILTER_TYPE_BEGINS_WITH)) {}
        eFilterType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::FILTER_TYPE_BEGINS_WITH):
                case static_cast<int32_t>(Literal::FILTER_TYPE_ENDS_WITH):
                case static_cast<int32_t>(Literal::FILTER_TYPE_CONTAINS):
                case static_cast<int32_t>(Literal::FILTER_TYPE_EXACT_MATCH):
                case static_cast<int32_t>(Literal::FILTER_UNREAD_SMS):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eFilterType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eFilterType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eFilterType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eFilterType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eFilterType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eFilterType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eResultType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DEFAULT_BROWSING_ITEM = 0,
            CONTACT_FORMATTTED_NAME = 1,
            CONTACT_GIVEN_NAME = 2,
            CONTACT_FAMILY_NAME = 3,
            CONTACT_NUMBER = 4,
            CONTACT_IMAGE = 5,
            CONTACT_ADDRESS = 6,
            CALLSTACK_DATE_TIME = 7,
            CALLSTACK_STORAGE_TYPE = 8,
            SMS_FROM = 9,
            SMS_TO = 10,
            SMS_NAME = 11,
            SMS_READSTATUS = 12,
            SMS_SHORT_BODY = 13
        };
        
        eResultType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DEFAULT_BROWSING_ITEM)) {}
        eResultType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DEFAULT_BROWSING_ITEM):
                case static_cast<int32_t>(Literal::CONTACT_FORMATTTED_NAME):
                case static_cast<int32_t>(Literal::CONTACT_GIVEN_NAME):
                case static_cast<int32_t>(Literal::CONTACT_FAMILY_NAME):
                case static_cast<int32_t>(Literal::CONTACT_NUMBER):
                case static_cast<int32_t>(Literal::CONTACT_IMAGE):
                case static_cast<int32_t>(Literal::CONTACT_ADDRESS):
                case static_cast<int32_t>(Literal::CALLSTACK_DATE_TIME):
                case static_cast<int32_t>(Literal::CALLSTACK_STORAGE_TYPE):
                case static_cast<int32_t>(Literal::SMS_FROM):
                case static_cast<int32_t>(Literal::SMS_TO):
                case static_cast<int32_t>(Literal::SMS_NAME):
                case static_cast<int32_t>(Literal::SMS_READSTATUS):
                case static_cast<int32_t>(Literal::SMS_SHORT_BODY):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eResultType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eResultType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eResultType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eResultType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eResultType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eResultType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eDatabaseType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DB_TYPE_PHONEBOOK = 1,
            DB_TYPE_FAVOURITE = 2,
            DB_TYPE_COMBINED_CALLSTACK = 4,
            DB_TYPE_MISSED_CALLSTACK = 8,
            DB_TYPE_DIALLED_CALLSTACK = 16,
            DB_TYPE_RECEIVED_CALLSTACK = 32,
            DB_TYPE_SMS = 64,
            DB_TYPE_SMS_TEMPLATE = 128,
            DB_TYPE_ACTIVITY_LIST = 256
        };
        
        eDatabaseType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DB_TYPE_PHONEBOOK)) {}
        eDatabaseType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DB_TYPE_PHONEBOOK):
                case static_cast<int32_t>(Literal::DB_TYPE_FAVOURITE):
                case static_cast<int32_t>(Literal::DB_TYPE_COMBINED_CALLSTACK):
                case static_cast<int32_t>(Literal::DB_TYPE_MISSED_CALLSTACK):
                case static_cast<int32_t>(Literal::DB_TYPE_DIALLED_CALLSTACK):
                case static_cast<int32_t>(Literal::DB_TYPE_RECEIVED_CALLSTACK):
                case static_cast<int32_t>(Literal::DB_TYPE_SMS):
                case static_cast<int32_t>(Literal::DB_TYPE_SMS_TEMPLATE):
                case static_cast<int32_t>(Literal::DB_TYPE_ACTIVITY_LIST):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eDatabaseType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eDatabaseType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eDatabaseType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eDatabaseType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eDatabaseType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eDatabaseType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eDbOperationId : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INSERT_INTO_DB_BY_CONTACT_ID = 0,
            INSERT_NEW = 1,
            DELETE_FROM_DB = 2,
            DELETE_ALL_FROM_DB = 3,
            MANUAL_SYNC = 4
        };
        
        eDbOperationId() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INSERT_INTO_DB_BY_CONTACT_ID)) {}
        eDbOperationId(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INSERT_INTO_DB_BY_CONTACT_ID):
                case static_cast<int32_t>(Literal::INSERT_NEW):
                case static_cast<int32_t>(Literal::DELETE_FROM_DB):
                case static_cast<int32_t>(Literal::DELETE_ALL_FROM_DB):
                case static_cast<int32_t>(Literal::MANUAL_SYNC):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eDbOperationId &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eDbOperationId &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eDbOperationId &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eDbOperationId &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eDbOperationId &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eDbOperationId &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eSyncState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SYNC_STATUS_DEFAULT = 0,
            SYNC_STATUS_START = 1,
            SYNC_STATUS_INPROGRESS = 2,
            SYNC_STATUS_COMPLETED = 3,
            SYNC_STATUS_DELTA_SYNC = 4,
            SYNC_STATUS_ABORTED = 5,
            SYNC_STATUS_ERROR = 6,
            SYNC_STATUS_ACCESS_DENIED = 7
        };
        
        eSyncState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SYNC_STATUS_DEFAULT)) {}
        eSyncState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SYNC_STATUS_DEFAULT):
                case static_cast<int32_t>(Literal::SYNC_STATUS_START):
                case static_cast<int32_t>(Literal::SYNC_STATUS_INPROGRESS):
                case static_cast<int32_t>(Literal::SYNC_STATUS_COMPLETED):
                case static_cast<int32_t>(Literal::SYNC_STATUS_DELTA_SYNC):
                case static_cast<int32_t>(Literal::SYNC_STATUS_ABORTED):
                case static_cast<int32_t>(Literal::SYNC_STATUS_ERROR):
                case static_cast<int32_t>(Literal::SYNC_STATUS_ACCESS_DENIED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eSyncState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eSyncState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eSyncState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eSyncState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eSyncState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eSyncState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eContactNameOredr : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            CONTACT_NAME_ORDER_FIRSTNAME_LASTNAME = 0,
            CONTACT_NAME_ORDER_LASTNAME_FIRSTNAME = 1,
            CONTACT_NAME_ORDER_FIRSTNAME_EXTENDED_LASTNAME = 2,
            CONTACT_NAME_ORDER_LASTNAME_EXTENDED_FIRSTNAME = 3
        };
        
        eContactNameOredr() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::CONTACT_NAME_ORDER_FIRSTNAME_LASTNAME)) {}
        eContactNameOredr(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::CONTACT_NAME_ORDER_FIRSTNAME_LASTNAME):
                case static_cast<int32_t>(Literal::CONTACT_NAME_ORDER_LASTNAME_FIRSTNAME):
                case static_cast<int32_t>(Literal::CONTACT_NAME_ORDER_FIRSTNAME_EXTENDED_LASTNAME):
                case static_cast<int32_t>(Literal::CONTACT_NAME_ORDER_LASTNAME_EXTENDED_FIRSTNAME):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eContactNameOredr &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eContactNameOredr &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eContactNameOredr &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eContactNameOredr &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eContactNameOredr &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eContactNameOredr &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eTelType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            CONTACT_TEL_TYPE_CELL = 1,
            CONTACT_TEL_TYPE_HOME = 2,
            CONTACT_TEL_TYPE_WORK = 4,
            CONTACT_TEL_TYPE_OTHER = 8
        };
        
        eTelType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::CONTACT_TEL_TYPE_CELL)) {}
        eTelType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::CONTACT_TEL_TYPE_CELL):
                case static_cast<int32_t>(Literal::CONTACT_TEL_TYPE_HOME):
                case static_cast<int32_t>(Literal::CONTACT_TEL_TYPE_WORK):
                case static_cast<int32_t>(Literal::CONTACT_TEL_TYPE_OTHER):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eTelType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eTelType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eTelType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eTelType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eTelType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eTelType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eContactNameField : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            CONTACT_FIELD_FORMATTED_NAME = 1,
            CONTACT_FIELD_GIVEN_NAME = 2,
            CONTACT_FIELD_FAMILY_NAME = 4,
            CONTACT_FIELD_NUMBER_SEARCH = 8
        };
        
        eContactNameField() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::CONTACT_FIELD_FORMATTED_NAME)) {}
        eContactNameField(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::CONTACT_FIELD_FORMATTED_NAME):
                case static_cast<int32_t>(Literal::CONTACT_FIELD_GIVEN_NAME):
                case static_cast<int32_t>(Literal::CONTACT_FIELD_FAMILY_NAME):
                case static_cast<int32_t>(Literal::CONTACT_FIELD_NUMBER_SEARCH):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eContactNameField &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eContactNameField &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eContactNameField &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eContactNameField &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eContactNameField &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eContactNameField &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eAddrtype : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            HOME_ADDRESS = 1,
            WORK_ADDRESS = 2,
            OTHER_ADDRESS = 4
        };
        
        eAddrtype() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::HOME_ADDRESS)) {}
        eAddrtype(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::HOME_ADDRESS):
                case static_cast<int32_t>(Literal::WORK_ADDRESS):
                case static_cast<int32_t>(Literal::OTHER_ADDRESS):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eAddrtype &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eAddrtype &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eAddrtype &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eAddrtype &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eAddrtype &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eAddrtype &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eEmailtype : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            HOME_EMAIL = 1,
            WORK_EMAIL = 2,
            MOBILE_EMAIL = 4,
            OTHER_EMAIL = 8
        };
        
        eEmailtype() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::HOME_EMAIL)) {}
        eEmailtype(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::HOME_EMAIL):
                case static_cast<int32_t>(Literal::WORK_EMAIL):
                case static_cast<int32_t>(Literal::MOBILE_EMAIL):
                case static_cast<int32_t>(Literal::OTHER_EMAIL):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eEmailtype &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eEmailtype &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eEmailtype &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eEmailtype &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eEmailtype &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eEmailtype &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eExtraFeature : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NOTES = 1,
            IMAGE = 2,
            LABEL = 4,
            ORG = 8,
            COMPANY = 16,
            DATE_TIME = 32,
            SMS_BODY = 64,
            SMS_STATUS = 128
        };
        
        eExtraFeature() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NOTES)) {}
        eExtraFeature(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NOTES):
                case static_cast<int32_t>(Literal::IMAGE):
                case static_cast<int32_t>(Literal::LABEL):
                case static_cast<int32_t>(Literal::ORG):
                case static_cast<int32_t>(Literal::COMPANY):
                case static_cast<int32_t>(Literal::DATE_TIME):
                case static_cast<int32_t>(Literal::SMS_BODY):
                case static_cast<int32_t>(Literal::SMS_STATUS):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eExtraFeature &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eExtraFeature &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eExtraFeature &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eExtraFeature &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eExtraFeature &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eExtraFeature &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eFoldertype : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            MSG_FOLDER_INBOX = 0,
            MSG_FOLDER_OUTBOX = 1,
            MSG_FOLDER_SENT = 2,
            MSG_FOLDER_DELETED = 3,
            MSG_FOLDER_DRAFT = 4
        };
        
        eFoldertype() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::MSG_FOLDER_INBOX)) {}
        eFoldertype(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::MSG_FOLDER_INBOX):
                case static_cast<int32_t>(Literal::MSG_FOLDER_OUTBOX):
                case static_cast<int32_t>(Literal::MSG_FOLDER_SENT):
                case static_cast<int32_t>(Literal::MSG_FOLDER_DELETED):
                case static_cast<int32_t>(Literal::MSG_FOLDER_DRAFT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eFoldertype &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eFoldertype &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eFoldertype &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eFoldertype &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eFoldertype &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eFoldertype &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eMsgNotification : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            MSG_NOTIFICATION_DELIVERY_SUCCESS = 0,
            MSG_NOTIFICATION_DELIVERY_FAILURE = 1,
            MSG_NOTIFICATION_SENDING_SUCCESS = 2,
            MSG_NOTIFICATION_SENDING_FAILURE = 3,
            MSG_NOTIFICATION_MEMORY_FULL = 4,
            MSG_NOTIFICATION_MEMORY_AVAILABLE = 5,
            MSG_NOTIFICATION_DELETED = 6,
            MSG_NOTIFICATION_SHIFTED = 7,
            MSG_NOTIFICATION_LOST_NOTIFICATIONS = 8,
            MSG_NOTIFICATION_NEW_SMS_RECEIVED = 9
        };
        
        eMsgNotification() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::MSG_NOTIFICATION_DELIVERY_SUCCESS)) {}
        eMsgNotification(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::MSG_NOTIFICATION_DELIVERY_SUCCESS):
                case static_cast<int32_t>(Literal::MSG_NOTIFICATION_DELIVERY_FAILURE):
                case static_cast<int32_t>(Literal::MSG_NOTIFICATION_SENDING_SUCCESS):
                case static_cast<int32_t>(Literal::MSG_NOTIFICATION_SENDING_FAILURE):
                case static_cast<int32_t>(Literal::MSG_NOTIFICATION_MEMORY_FULL):
                case static_cast<int32_t>(Literal::MSG_NOTIFICATION_MEMORY_AVAILABLE):
                case static_cast<int32_t>(Literal::MSG_NOTIFICATION_DELETED):
                case static_cast<int32_t>(Literal::MSG_NOTIFICATION_SHIFTED):
                case static_cast<int32_t>(Literal::MSG_NOTIFICATION_LOST_NOTIFICATIONS):
                case static_cast<int32_t>(Literal::MSG_NOTIFICATION_NEW_SMS_RECEIVED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eMsgNotification &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eMsgNotification &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eMsgNotification &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eMsgNotification &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eMsgNotification &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eMsgNotification &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct phonebookResult : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NAME = 0,
            NUMBER = 1,
            EMAIL = 2,
            ADDRESS = 3,
            EXTENDED = 4,
            FEATURE = 5
        };
        
        phonebookResult() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NAME)) {}
        phonebookResult(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NAME):
                case static_cast<int32_t>(Literal::NUMBER):
                case static_cast<int32_t>(Literal::EMAIL):
                case static_cast<int32_t>(Literal::ADDRESS):
                case static_cast<int32_t>(Literal::EXTENDED):
                case static_cast<int32_t>(Literal::FEATURE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const phonebookResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const phonebookResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const phonebookResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const phonebookResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const phonebookResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const phonebookResult &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Structure for Different type of contact Adddress
     */
    struct ContactAddress : CommonAPI::Struct<std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string> {
    	
    	ContactAddress() {
    	}
    	ContactAddress(const std::string &_Contacts_Adr_Lan, const std::string &_Contacts_Adr_Lon, const std::string &_Contacts_Adr_PostOfficeBox, const std::string &_Contacts_Adr_PostalCode, const std::string &_Contacts_Adr_StreetAddress, const std::string &_Contacts_Adr_Locality, const std::string &_Contacts_Adr_Region, const std::string &_Contacts_Adr_CountryName)
    	{
    		std::get<0>(values_) = _Contacts_Adr_Lan;
    		std::get<1>(values_) = _Contacts_Adr_Lon;
    		std::get<2>(values_) = _Contacts_Adr_PostOfficeBox;
    		std::get<3>(values_) = _Contacts_Adr_PostalCode;
    		std::get<4>(values_) = _Contacts_Adr_StreetAddress;
    		std::get<5>(values_) = _Contacts_Adr_Locality;
    		std::get<6>(values_) = _Contacts_Adr_Region;
    		std::get<7>(values_) = _Contacts_Adr_CountryName;
    	}
    	inline const std::string &getContacts_Adr_Lan() const { return std::get<0>(values_); }
    	inline void setContacts_Adr_Lan(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getContacts_Adr_Lon() const { return std::get<1>(values_); }
    	inline void setContacts_Adr_Lon(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const std::string &getContacts_Adr_PostOfficeBox() const { return std::get<2>(values_); }
    	inline void setContacts_Adr_PostOfficeBox(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getContacts_Adr_PostalCode() const { return std::get<3>(values_); }
    	inline void setContacts_Adr_PostalCode(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline const std::string &getContacts_Adr_StreetAddress() const { return std::get<4>(values_); }
    	inline void setContacts_Adr_StreetAddress(const std::string &_value) { std::get<4>(values_) = _value; }
    	inline const std::string &getContacts_Adr_Locality() const { return std::get<5>(values_); }
    	inline void setContacts_Adr_Locality(const std::string &_value) { std::get<5>(values_) = _value; }
    	inline const std::string &getContacts_Adr_Region() const { return std::get<6>(values_); }
    	inline void setContacts_Adr_Region(const std::string &_value) { std::get<6>(values_) = _value; }
    	inline const std::string &getContacts_Adr_CountryName() const { return std::get<7>(values_); }
    	inline void setContacts_Adr_CountryName(const std::string &_value) { std::get<7>(values_) = _value; }
    	inline bool operator==(const ContactAddress& _other) const {
                return (getContacts_Adr_Lan() == _other.getContacts_Adr_Lan() && getContacts_Adr_Lon() == _other.getContacts_Adr_Lon() && getContacts_Adr_PostOfficeBox() == _other.getContacts_Adr_PostOfficeBox() && getContacts_Adr_PostalCode() == _other.getContacts_Adr_PostalCode() && getContacts_Adr_StreetAddress() == _other.getContacts_Adr_StreetAddress() && getContacts_Adr_Locality() == _other.getContacts_Adr_Locality() && getContacts_Adr_Region() == _other.getContacts_Adr_Region() && getContacts_Adr_CountryName() == _other.getContacts_Adr_CountryName());
        }
    	inline bool operator!=(const ContactAddress &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Structure for phone Name MAP
     */
    typedef std::unordered_map<::v1::com::harman::btpres::BTPresTypes::eContactNameField, std::string, CommonAPI::EnumHasher<::v1::com::harman::btpres::BTPresTypes::eContactNameField>> contactNameMap;
    typedef std::vector<std::string> arString;
    /**
     * description: Structure for phone number MAP
     */
    typedef std::unordered_map<::v1::com::harman::btpres::BTPresTypes::eTelType, ::v1::com::harman::btpres::BTPresTypes::arString, CommonAPI::EnumHasher<::v1::com::harman::btpres::BTPresTypes::eTelType>> phoneNumberMap;
    /**
     * description: Structure for contact Address MAP
     */
    typedef std::unordered_map<::v1::com::harman::btpres::BTPresTypes::eAddrtype, ::v1::com::harman::btpres::BTPresTypes::ContactAddress, CommonAPI::EnumHasher<::v1::com::harman::btpres::BTPresTypes::eAddrtype>> contactAddressMap;
    /**
     * description: Structure for contact Email MAP
     */
    typedef std::unordered_map<::v1::com::harman::btpres::BTPresTypes::eEmailtype, ::v1::com::harman::btpres::BTPresTypes::arString, CommonAPI::EnumHasher<::v1::com::harman::btpres::BTPresTypes::eEmailtype>> contactEmailMap;
    /**
     * description: Structure for contact extended feature MAP
     */
    typedef std::unordered_map<::v1::com::harman::btpres::BTPresTypes::eExtraFeature, std::string, CommonAPI::EnumHasher<::v1::com::harman::btpres::BTPresTypes::eExtraFeature>> contactExtendeFeatureMap;
    /**
     * description: Structure for phonebook entry
     * param: contactID: Contact ID of a phone
     * param: FavIndex: This will be only present in case of Fav list
     * param: NameList: Mapped name list
     * param: PhoneNumberList: Mapped PhoneNumber List
     * param: AddressList: Address list
     * param: EmailList: list of emails
     * param: ExtendeFeatureList: Extended feature list
     */
    struct phonebookEntry : CommonAPI::Struct<uint16_t, uint16_t, int64_t, eDatabaseType, contactNameMap, phoneNumberMap, contactAddressMap, contactEmailMap, contactExtendeFeatureMap> {
    	
    	phonebookEntry() {
    	}
    	phonebookEntry(const uint16_t &_Index, const uint16_t &_FavIndex, const int64_t &_msg_id, const eDatabaseType &_databaseType, const contactNameMap &_NameList, const phoneNumberMap &_PhoneNumberList, const contactAddressMap &_AddressList, const contactEmailMap &_EmailList, const contactExtendeFeatureMap &_ExtendeFeatureList)
    	{
    		std::get<0>(values_) = _Index;
    		std::get<1>(values_) = _FavIndex;
    		std::get<2>(values_) = _msg_id;
    		std::get<3>(values_) = _databaseType;
    		std::get<4>(values_) = _NameList;
    		std::get<5>(values_) = _PhoneNumberList;
    		std::get<6>(values_) = _AddressList;
    		std::get<7>(values_) = _EmailList;
    		std::get<8>(values_) = _ExtendeFeatureList;
    	}
    	inline const uint16_t &getIndex() const { return std::get<0>(values_); }
    	inline void setIndex(const uint16_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint16_t &getFavIndex() const { return std::get<1>(values_); }
    	inline void setFavIndex(const uint16_t &_value) { std::get<1>(values_) = _value; }
    	inline const int64_t &getMsg_id() const { return std::get<2>(values_); }
    	inline void setMsg_id(const int64_t &_value) { std::get<2>(values_) = _value; }
    	inline const eDatabaseType &getDatabaseType() const { return std::get<3>(values_); }
    	inline void setDatabaseType(const eDatabaseType &_value) { std::get<3>(values_) = _value; }
    	inline const contactNameMap &getNameList() const { return std::get<4>(values_); }
    	inline void setNameList(const contactNameMap &_value) { std::get<4>(values_) = _value; }
    	inline const phoneNumberMap &getPhoneNumberList() const { return std::get<5>(values_); }
    	inline void setPhoneNumberList(const phoneNumberMap &_value) { std::get<5>(values_) = _value; }
    	inline const contactAddressMap &getAddressList() const { return std::get<6>(values_); }
    	inline void setAddressList(const contactAddressMap &_value) { std::get<6>(values_) = _value; }
    	inline const contactEmailMap &getEmailList() const { return std::get<7>(values_); }
    	inline void setEmailList(const contactEmailMap &_value) { std::get<7>(values_) = _value; }
    	inline const contactExtendeFeatureMap &getExtendeFeatureList() const { return std::get<8>(values_); }
    	inline void setExtendeFeatureList(const contactExtendeFeatureMap &_value) { std::get<8>(values_) = _value; }
    	inline bool operator==(const phonebookEntry& _other) const {
                return (getIndex() == _other.getIndex() && getFavIndex() == _other.getFavIndex() && getMsg_id() == _other.getMsg_id() && getDatabaseType() == _other.getDatabaseType() && getNameList() == _other.getNameList() && getPhoneNumberList() == _other.getPhoneNumberList() && getAddressList() == _other.getAddressList() && getEmailList() == _other.getEmailList() && getExtendeFeatureList() == _other.getExtendeFeatureList());
        }
    	inline bool operator!=(const phonebookEntry &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Structure for callstack entry
     * param: NameList: mapped Name List
     * param: databaseType: Missed call or Receive or dialled call
     * param: number: Number
     * param: timeStamp: timeStamp of a call
     * param: URL: Image Path
     * param: mappedcontactID: ContactID of this contact
     */
    struct callstackEntry : CommonAPI::Struct<contactNameMap, eDatabaseType, std::string, std::string, std::string, eTelType, uint32_t> {
    	
    	callstackEntry() {
    	}
    	callstackEntry(const contactNameMap &_NameList, const eDatabaseType &_databaseType, const std::string &_number, const std::string &_timeStamp, const std::string &_URL, const eTelType &_NumberType, const uint32_t &_mappedcontactID)
    	{
    		std::get<0>(values_) = _NameList;
    		std::get<1>(values_) = _databaseType;
    		std::get<2>(values_) = _number;
    		std::get<3>(values_) = _timeStamp;
    		std::get<4>(values_) = _URL;
    		std::get<5>(values_) = _NumberType;
    		std::get<6>(values_) = _mappedcontactID;
    	}
    	inline const contactNameMap &getNameList() const { return std::get<0>(values_); }
    	inline void setNameList(const contactNameMap &_value) { std::get<0>(values_) = _value; }
    	inline const eDatabaseType &getDatabaseType() const { return std::get<1>(values_); }
    	inline void setDatabaseType(const eDatabaseType &_value) { std::get<1>(values_) = _value; }
    	inline const std::string &getNumber() const { return std::get<2>(values_); }
    	inline void setNumber(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getTimeStamp() const { return std::get<3>(values_); }
    	inline void setTimeStamp(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline const std::string &getURL() const { return std::get<4>(values_); }
    	inline void setURL(const std::string &_value) { std::get<4>(values_) = _value; }
    	inline const eTelType &getNumberType() const { return std::get<5>(values_); }
    	inline void setNumberType(const eTelType &_value) { std::get<5>(values_) = _value; }
    	inline const uint32_t &getMappedcontactID() const { return std::get<6>(values_); }
    	inline void setMappedcontactID(const uint32_t &_value) { std::get<6>(values_) = _value; }
    	inline bool operator==(const callstackEntry& _other) const {
                return (getNameList() == _other.getNameList() && getDatabaseType() == _other.getDatabaseType() && getNumber() == _other.getNumber() && getTimeStamp() == _other.getTimeStamp() && getURL() == _other.getURL() && getNumberType() == _other.getNumberType() && getMappedcontactID() == _other.getMappedcontactID());
        }
    	inline bool operator!=(const callstackEntry &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Network interface status
     */
    struct networkIfStatus : CommonAPI::Struct<std::string, bool> {
    	
    	networkIfStatus() {
    		std::get<1>(values_) = false;
    	}
    	networkIfStatus(const std::string &_ipAddr, const bool &_status)
    	{
    		std::get<0>(values_) = _ipAddr;
    		std::get<1>(values_) = _status;
    	}
    	inline const std::string &getIpAddr() const { return std::get<0>(values_); }
    	inline void setIpAddr(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const bool &getStatus() const { return std::get<1>(values_); }
    	inline void setStatus(const bool _value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const networkIfStatus& _other) const {
                return (getIpAddr() == _other.getIpAddr() && getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const networkIfStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Network Operator information
     */
    struct networkOperatorInfo : CommonAPI::Struct<eNetworkRegState, bool, std::string, std::string, std::string, eOperatorMode> {
    	
    	networkOperatorInfo() {
    		std::get<1>(values_) = false;
    	}
    	networkOperatorInfo(const eNetworkRegState &_networkRegistrationState, const bool &_networkAvailability, const std::string &_deviceAddress, const std::string &_subscriberNumber, const std::string &_operatorName, const eOperatorMode &_operatorMode)
    	{
    		std::get<0>(values_) = _networkRegistrationState;
    		std::get<1>(values_) = _networkAvailability;
    		std::get<2>(values_) = _deviceAddress;
    		std::get<3>(values_) = _subscriberNumber;
    		std::get<4>(values_) = _operatorName;
    		std::get<5>(values_) = _operatorMode;
    	}
    	inline const eNetworkRegState &getNetworkRegistrationState() const { return std::get<0>(values_); }
    	inline void setNetworkRegistrationState(const eNetworkRegState &_value) { std::get<0>(values_) = _value; }
    	inline const bool &getNetworkAvailability() const { return std::get<1>(values_); }
    	inline void setNetworkAvailability(const bool _value) { std::get<1>(values_) = _value; }
    	inline const std::string &getDeviceAddress() const { return std::get<2>(values_); }
    	inline void setDeviceAddress(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getSubscriberNumber() const { return std::get<3>(values_); }
    	inline void setSubscriberNumber(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline const std::string &getOperatorName() const { return std::get<4>(values_); }
    	inline void setOperatorName(const std::string &_value) { std::get<4>(values_) = _value; }
    	inline const eOperatorMode &getOperatorMode() const { return std::get<5>(values_); }
    	inline void setOperatorMode(const eOperatorMode &_value) { std::get<5>(values_) = _value; }
    	inline bool operator==(const networkOperatorInfo& _other) const {
                return (getNetworkRegistrationState() == _other.getNetworkRegistrationState() && getNetworkAvailability() == _other.getNetworkAvailability() && getDeviceAddress() == _other.getDeviceAddress() && getSubscriberNumber() == _other.getSubscriberNumber() && getOperatorName() == _other.getOperatorName() && getOperatorMode() == _other.getOperatorMode());
        }
    	inline bool operator!=(const networkOperatorInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Nework Signal and Charge level information
     */
    struct signalChargeInfo : CommonAPI::Struct<std::string, eRssiLevel, eBatteryChargeLevel> {
    	
    	signalChargeInfo() {
    	}
    	signalChargeInfo(const std::string &_deviceAddress, const eRssiLevel &_signalQuality, const eBatteryChargeLevel &_batteryCharge)
    	{
    		std::get<0>(values_) = _deviceAddress;
    		std::get<1>(values_) = _signalQuality;
    		std::get<2>(values_) = _batteryCharge;
    	}
    	inline const std::string &getDeviceAddress() const { return std::get<0>(values_); }
    	inline void setDeviceAddress(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const eRssiLevel &getSignalQuality() const { return std::get<1>(values_); }
    	inline void setSignalQuality(const eRssiLevel &_value) { std::get<1>(values_) = _value; }
    	inline const eBatteryChargeLevel &getBatteryCharge() const { return std::get<2>(values_); }
    	inline void setBatteryCharge(const eBatteryChargeLevel &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const signalChargeInfo& _other) const {
                return (getDeviceAddress() == _other.getDeviceAddress() && getSignalQuality() == _other.getSignalQuality() && getBatteryCharge() == _other.getBatteryCharge());
        }
    	inline bool operator!=(const signalChargeInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: HFP supported feature map
     */
    typedef std::unordered_map<::v1::com::harman::btpres::BTPresTypes::eSupportedFeature, bool, CommonAPI::EnumHasher<::v1::com::harman::btpres::BTPresTypes::eSupportedFeature>> supportedFeatureMap;
    /**
     * description: HFP supported features
     */
    struct hfpSupportedFeatures : CommonAPI::Struct<std::string, supportedFeatureMap> {
    	
    	hfpSupportedFeatures() {
    	}
    	hfpSupportedFeatures(const std::string &_deviceAddress, const supportedFeatureMap &_hfpFeatures)
    	{
    		std::get<0>(values_) = _deviceAddress;
    		std::get<1>(values_) = _hfpFeatures;
    	}
    	inline const std::string &getDeviceAddress() const { return std::get<0>(values_); }
    	inline void setDeviceAddress(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const supportedFeatureMap &getHfpFeatures() const { return std::get<1>(values_); }
    	inline void setHfpFeatures(const supportedFeatureMap &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const hfpSupportedFeatures& _other) const {
                return (getDeviceAddress() == _other.getDeviceAddress() && getHfpFeatures() == _other.getHfpFeatures());
        }
    	inline bool operator!=(const hfpSupportedFeatures &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Handsfree Mode status
     */
    struct hfModeStatus : CommonAPI::Struct<std::string, eAudioStatus> {
    	
    	hfModeStatus() {
    	}
    	hfModeStatus(const std::string &_deviceAddress, const eAudioStatus &_status)
    	{
    		std::get<0>(values_) = _deviceAddress;
    		std::get<1>(values_) = _status;
    	}
    	inline const std::string &getDeviceAddress() const { return std::get<0>(values_); }
    	inline void setDeviceAddress(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const eAudioStatus &getStatus() const { return std::get<1>(values_); }
    	inline void setStatus(const eAudioStatus &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const hfModeStatus& _other) const {
                return (getDeviceAddress() == _other.getDeviceAddress() && getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const hfModeStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: VR Mode status
     */
    struct vrModeStatus : CommonAPI::Struct<std::string, bool> {
    	
    	vrModeStatus() {
    		std::get<1>(values_) = false;
    	}
    	vrModeStatus(const std::string &_deviceAddress, const bool &_status)
    	{
    		std::get<0>(values_) = _deviceAddress;
    		std::get<1>(values_) = _status;
    	}
    	inline const std::string &getDeviceAddress() const { return std::get<0>(values_); }
    	inline void setDeviceAddress(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const bool &getStatus() const { return std::get<1>(values_); }
    	inline void setStatus(const bool _value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const vrModeStatus& _other) const {
                return (getDeviceAddress() == _other.getDeviceAddress() && getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const vrModeStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: SCO status
     */
    struct audioStatus : CommonAPI::Struct<std::string, eAudioStatus> {
    	
    	audioStatus() {
    	}
    	audioStatus(const std::string &_deviceAddress, const eAudioStatus &_status)
    	{
    		std::get<0>(values_) = _deviceAddress;
    		std::get<1>(values_) = _status;
    	}
    	inline const std::string &getDeviceAddress() const { return std::get<0>(values_); }
    	inline void setDeviceAddress(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const eAudioStatus &getStatus() const { return std::get<1>(values_); }
    	inline void setStatus(const eAudioStatus &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const audioStatus& _other) const {
                return (getDeviceAddress() == _other.getDeviceAddress() && getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const audioStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Call details information
     */
    struct callStateInfo : CommonAPI::Struct<int8_t, eCallState, std::string, std::string, std::string, std::string, eTelType, uint32_t, eDirection> {
    	
    	callStateInfo() {
    	}
    	callStateInfo(const int8_t &_callId, const eCallState &_cstate, const std::string &_number, const std::string &_deviceAddress, const std::string &_name, const std::string &_imageUrl, const eTelType &_numType, const uint32_t &_mappedContactId, const eDirection &_direction)
    	{
    		std::get<0>(values_) = _callId;
    		std::get<1>(values_) = _cstate;
    		std::get<2>(values_) = _number;
    		std::get<3>(values_) = _deviceAddress;
    		std::get<4>(values_) = _name;
    		std::get<5>(values_) = _imageUrl;
    		std::get<6>(values_) = _numType;
    		std::get<7>(values_) = _mappedContactId;
    		std::get<8>(values_) = _direction;
    	}
    	inline const int8_t &getCallId() const { return std::get<0>(values_); }
    	inline void setCallId(const int8_t &_value) { std::get<0>(values_) = _value; }
    	inline const eCallState &getCstate() const { return std::get<1>(values_); }
    	inline void setCstate(const eCallState &_value) { std::get<1>(values_) = _value; }
    	inline const std::string &getNumber() const { return std::get<2>(values_); }
    	inline void setNumber(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getDeviceAddress() const { return std::get<3>(values_); }
    	inline void setDeviceAddress(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline const std::string &getName() const { return std::get<4>(values_); }
    	inline void setName(const std::string &_value) { std::get<4>(values_) = _value; }
    	inline const std::string &getImageUrl() const { return std::get<5>(values_); }
    	inline void setImageUrl(const std::string &_value) { std::get<5>(values_) = _value; }
    	inline const eTelType &getNumType() const { return std::get<6>(values_); }
    	inline void setNumType(const eTelType &_value) { std::get<6>(values_) = _value; }
    	inline const uint32_t &getMappedContactId() const { return std::get<7>(values_); }
    	inline void setMappedContactId(const uint32_t &_value) { std::get<7>(values_) = _value; }
    	inline const eDirection &getDirection() const { return std::get<8>(values_); }
    	inline void setDirection(const eDirection &_value) { std::get<8>(values_) = _value; }
    	inline bool operator==(const callStateInfo& _other) const {
                return (getCallId() == _other.getCallId() && getCstate() == _other.getCstate() && getNumber() == _other.getNumber() && getDeviceAddress() == _other.getDeviceAddress() && getName() == _other.getName() && getImageUrl() == _other.getImageUrl() && getNumType() == _other.getNumType() && getMappedContactId() == _other.getMappedContactId() && getDirection() == _other.getDirection());
        }
    	inline bool operator!=(const callStateInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Call duration information
     */
    struct callDuration : CommonAPI::Struct<int8_t, uint32_t, std::string> {
    	
    	callDuration() {
    	}
    	callDuration(const int8_t &_callId, const uint32_t &_duration, const std::string &_deviceAddress)
    	{
    		std::get<0>(values_) = _callId;
    		std::get<1>(values_) = _duration;
    		std::get<2>(values_) = _deviceAddress;
    	}
    	inline const int8_t &getCallId() const { return std::get<0>(values_); }
    	inline void setCallId(const int8_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint32_t &getDuration() const { return std::get<1>(values_); }
    	inline void setDuration(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	inline const std::string &getDeviceAddress() const { return std::get<2>(values_); }
    	inline void setDeviceAddress(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const callDuration& _other) const {
                return (getCallId() == _other.getCallId() && getDuration() == _other.getDuration() && getDeviceAddress() == _other.getDeviceAddress());
        }
    	inline bool operator!=(const callDuration &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Device search entry
     */
    struct tDeviceSearchEntry : CommonAPI::Struct<std::string, std::string, eCOD, bool, bool> {
    	
    	tDeviceSearchEntry() {
    		std::get<3>(values_) = false;
    		std::get<4>(values_) = false;
    	}
    	tDeviceSearchEntry(const std::string &_deviceName, const std::string &_deviceAddr, const eCOD &_deviceClass, const bool &_connected, const bool &_paired)
    	{
    		std::get<0>(values_) = _deviceName;
    		std::get<1>(values_) = _deviceAddr;
    		std::get<2>(values_) = _deviceClass;
    		std::get<3>(values_) = _connected;
    		std::get<4>(values_) = _paired;
    	}
    	inline const std::string &getDeviceName() const { return std::get<0>(values_); }
    	inline void setDeviceName(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getDeviceAddr() const { return std::get<1>(values_); }
    	inline void setDeviceAddr(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const eCOD &getDeviceClass() const { return std::get<2>(values_); }
    	inline void setDeviceClass(const eCOD &_value) { std::get<2>(values_) = _value; }
    	inline const bool &getConnected() const { return std::get<3>(values_); }
    	inline void setConnected(const bool _value) { std::get<3>(values_) = _value; }
    	inline const bool &getPaired() const { return std::get<4>(values_); }
    	inline void setPaired(const bool _value) { std::get<4>(values_) = _value; }
    	inline bool operator==(const tDeviceSearchEntry& _other) const {
                return (getDeviceName() == _other.getDeviceName() && getDeviceAddr() == _other.getDeviceAddr() && getDeviceClass() == _other.getDeviceClass() && getConnected() == _other.getConnected() && getPaired() == _other.getPaired());
        }
    	inline bool operator!=(const tDeviceSearchEntry &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: connectionstate for service
     */
    typedef std::unordered_map<::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, ::v1::com::harman::btpres::BTPresTypes::eConnectionStatus, CommonAPI::EnumHasher<::v1::com::harman::btpres::BTPresTypes::eSupportedProfile>> connectionStateMap;
    /**
     * description: Gives information about bonded devices
     * param: : devicename (string)             : Device name of connected phone
                
     *    : btAddress  (string)             : BtAddress for connected device
              
     *      : deviceClass (eCOD)               : Device class
                  :
     *   serviceList (connectionStateMap): Maintain list of connected profile
     *   information i.e. serviceName, connection state
     */
    struct bondedDev : CommonAPI::Struct<std::string, std::string, eCOD, connectionStateMap> {
    	
    	bondedDev() {
    	}
    	bondedDev(const std::string &_devName, const std::string &_btAddress, const eCOD &_deviceClass, const connectionStateMap &_serviceList)
    	{
    		std::get<0>(values_) = _devName;
    		std::get<1>(values_) = _btAddress;
    		std::get<2>(values_) = _deviceClass;
    		std::get<3>(values_) = _serviceList;
    	}
    	inline const std::string &getDevName() const { return std::get<0>(values_); }
    	inline void setDevName(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getBtAddress() const { return std::get<1>(values_); }
    	inline void setBtAddress(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const eCOD &getDeviceClass() const { return std::get<2>(values_); }
    	inline void setDeviceClass(const eCOD &_value) { std::get<2>(values_) = _value; }
    	inline const connectionStateMap &getServiceList() const { return std::get<3>(values_); }
    	inline void setServiceList(const connectionStateMap &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const bondedDev& _other) const {
                return (getDevName() == _other.getDevName() && getBtAddress() == _other.getBtAddress() && getDeviceClass() == _other.getDeviceClass() && getServiceList() == _other.getServiceList());
        }
    	inline bool operator!=(const bondedDev &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Device information
     */
    struct deviceInfo : CommonAPI::Struct<std::string, std::string> {
    	
    	deviceInfo() {
    	}
    	deviceInfo(const std::string &_name, const std::string &_address)
    	{
    		std::get<0>(values_) = _name;
    		std::get<1>(values_) = _address;
    	}
    	inline const std::string &getName() const { return std::get<0>(values_); }
    	inline void setName(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getAddress() const { return std::get<1>(values_); }
    	inline void setAddress(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const deviceInfo& _other) const {
                return (getName() == _other.getName() && getAddress() == _other.getAddress());
        }
    	inline bool operator!=(const deviceInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Structure for SMS entry
     * param: smsBody: Body of SMS
     * param: smsFrom: Number from which SMS came
     * param: smsTo: Number to which sms is sent
     * param: timeStamp: Timestamp of SMS
     * param: smsName: Name of SMS
     * param: url: related url
     * param: msg_id: Message Id of that SMS
     * param: sms_read_status: SMS read status
     */
    struct smsEntry : CommonAPI::Struct<std::string, std::string, std::string, std::string, std::string, std::string, int64_t, bool> {
    	
    	smsEntry() {
    		std::get<7>(values_) = false;
    	}
    	smsEntry(const std::string &_smsBody, const std::string &_smsFrom, const std::string &_smsTo, const std::string &_timeStamp, const std::string &_smsName, const std::string &_url, const int64_t &_msg_id, const bool &_sms_read_status)
    	{
    		std::get<0>(values_) = _smsBody;
    		std::get<1>(values_) = _smsFrom;
    		std::get<2>(values_) = _smsTo;
    		std::get<3>(values_) = _timeStamp;
    		std::get<4>(values_) = _smsName;
    		std::get<5>(values_) = _url;
    		std::get<6>(values_) = _msg_id;
    		std::get<7>(values_) = _sms_read_status;
    	}
    	inline const std::string &getSmsBody() const { return std::get<0>(values_); }
    	inline void setSmsBody(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getSmsFrom() const { return std::get<1>(values_); }
    	inline void setSmsFrom(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const std::string &getSmsTo() const { return std::get<2>(values_); }
    	inline void setSmsTo(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getTimeStamp() const { return std::get<3>(values_); }
    	inline void setTimeStamp(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline const std::string &getSmsName() const { return std::get<4>(values_); }
    	inline void setSmsName(const std::string &_value) { std::get<4>(values_) = _value; }
    	inline const std::string &getUrl() const { return std::get<5>(values_); }
    	inline void setUrl(const std::string &_value) { std::get<5>(values_) = _value; }
    	inline const int64_t &getMsg_id() const { return std::get<6>(values_); }
    	inline void setMsg_id(const int64_t &_value) { std::get<6>(values_) = _value; }
    	inline const bool &getSms_read_status() const { return std::get<7>(values_); }
    	inline void setSms_read_status(const bool _value) { std::get<7>(values_) = _value; }
    	inline bool operator==(const smsEntry& _other) const {
                return (getSmsBody() == _other.getSmsBody() && getSmsFrom() == _other.getSmsFrom() && getSmsTo() == _other.getSmsTo() && getTimeStamp() == _other.getTimeStamp() && getSmsName() == _other.getSmsName() && getUrl() == _other.getUrl() && getMsg_id() == _other.getMsg_id() && getSms_read_status() == _other.getSms_read_status());
        }
    	inline bool operator!=(const smsEntry &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: syncstate for a particular db
     */
    typedef std::unordered_map<::v1::com::harman::btpres::BTPresTypes::eDatabaseType, ::v1::com::harman::btpres::BTPresTypes::eSyncState, CommonAPI::EnumHasher<::v1::com::harman::btpres::BTPresTypes::eDatabaseType>> dBSyncStateMap;
    /**
     * description: PimProperties of device
     * param: btAddress : bdAddress of device
     * param: dbSyncList: sync list which will contain syncstate for all db
     */
    struct pimProperties : CommonAPI::Struct<std::string, dBSyncStateMap> {
    	
    	pimProperties() {
    	}
    	pimProperties(const std::string &_btAddress, const dBSyncStateMap &_dbSyncState)
    	{
    		std::get<0>(values_) = _btAddress;
    		std::get<1>(values_) = _dbSyncState;
    	}
    	inline const std::string &getBtAddress() const { return std::get<0>(values_); }
    	inline void setBtAddress(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const dBSyncStateMap &getDbSyncState() const { return std::get<1>(values_); }
    	inline void setDbSyncState(const dBSyncStateMap &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const pimProperties& _other) const {
                return (getBtAddress() == _other.getBtAddress() && getDbSyncState() == _other.getDbSyncState());
        }
    	inline bool operator!=(const pimProperties &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Mapping of requested fields and value
     */
    typedef std::unordered_map<::v1::com::harman::btpres::BTPresTypes::eResultType, std::string, CommonAPI::EnumHasher<::v1::com::harman::btpres::BTPresTypes::eResultType>> ResultSpecificMap;
    /**
     * description: Default PimProperties
     * param: contactID : ContactId of a contact
     * param: FavIndex: Fav Index of a contact
     * param: SMSIndex: SMS Index of
     * param: SMSId: List of SMS Ids
     * param: dbSyncList: sync list which will contain syncstate for all db
     */
    struct browsingData : CommonAPI::Struct<uint16_t, uint16_t, uint8_t, int64_t, ResultSpecificMap> {
    	
    	browsingData() {
    	}
    	browsingData(const uint16_t &_contactID, const uint16_t &_FavIndex, const uint8_t &_SMSIndex, const int64_t &_SMSId, const ResultSpecificMap &_ResultData)
    	{
    		std::get<0>(values_) = _contactID;
    		std::get<1>(values_) = _FavIndex;
    		std::get<2>(values_) = _SMSIndex;
    		std::get<3>(values_) = _SMSId;
    		std::get<4>(values_) = _ResultData;
    	}
    	inline const uint16_t &getContactID() const { return std::get<0>(values_); }
    	inline void setContactID(const uint16_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint16_t &getFavIndex() const { return std::get<1>(values_); }
    	inline void setFavIndex(const uint16_t &_value) { std::get<1>(values_) = _value; }
    	inline const uint8_t &getSMSIndex() const { return std::get<2>(values_); }
    	inline void setSMSIndex(const uint8_t &_value) { std::get<2>(values_) = _value; }
    	inline const int64_t &getSMSId() const { return std::get<3>(values_); }
    	inline void setSMSId(const int64_t &_value) { std::get<3>(values_) = _value; }
    	inline const ResultSpecificMap &getResultData() const { return std::get<4>(values_); }
    	inline void setResultData(const ResultSpecificMap &_value) { std::get<4>(values_) = _value; }
    	inline bool operator==(const browsingData& _other) const {
                return (getContactID() == _other.getContactID() && getFavIndex() == _other.getFavIndex() && getSMSIndex() == _other.getSMSIndex() && getSMSId() == _other.getSMSId() && getResultData() == _other.getResultData());
        }
    	inline bool operator!=(const browsingData &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Indicates alphaJumpTable
     * param: alpha: this is alpha table
     * param: startId: StartId of the correponding Alpha
     */
    struct alphaJumpTable : CommonAPI::Struct<std::string, uint16_t> {
    	
    	alphaJumpTable() {
    	}
    	alphaJumpTable(const std::string &_alpha, const uint16_t &_startId)
    	{
    		std::get<0>(values_) = _alpha;
    		std::get<1>(values_) = _startId;
    	}
    	inline const std::string &getAlpha() const { return std::get<0>(values_); }
    	inline void setAlpha(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const uint16_t &getStartId() const { return std::get<1>(values_); }
    	inline void setStartId(const uint16_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const alphaJumpTable& _other) const {
                return (getAlpha() == _other.getAlpha() && getStartId() == _other.getStartId());
        }
    	inline bool operator!=(const alphaJumpTable &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Indicates different list for db operation
     * param: ContactIdList: List of contact IDs to be added or deleted
     * param: SMSTemplate:New SMS template
     * param: contactInfo: New contact details
     * param: SMSTemplateIdList: List of templateId's to be added or deleted
     */
    struct InsertItems : CommonAPI::Struct<std::vector<uint16_t>, std::string, phonebookEntry, std::vector<uint8_t>> {
    	
    	InsertItems() {
    	}
    	InsertItems(const std::vector<uint16_t> &_ContactIdList, const std::string &_SMSTemplate, const phonebookEntry &_contactInfo, const std::vector<uint8_t> &_SMSTemplateIdList)
    	{
    		std::get<0>(values_) = _ContactIdList;
    		std::get<1>(values_) = _SMSTemplate;
    		std::get<2>(values_) = _contactInfo;
    		std::get<3>(values_) = _SMSTemplateIdList;
    	}
    	inline const std::vector<uint16_t> &getContactIdList() const { return std::get<0>(values_); }
    	inline void setContactIdList(const std::vector<uint16_t> &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getSMSTemplate() const { return std::get<1>(values_); }
    	inline void setSMSTemplate(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const phonebookEntry &getContactInfo() const { return std::get<2>(values_); }
    	inline void setContactInfo(const phonebookEntry &_value) { std::get<2>(values_) = _value; }
    	inline const std::vector<uint8_t> &getSMSTemplateIdList() const { return std::get<3>(values_); }
    	inline void setSMSTemplateIdList(const std::vector<uint8_t> &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const InsertItems& _other) const {
                return (getContactIdList() == _other.getContactIdList() && getSMSTemplate() == _other.getSMSTemplate() && getContactInfo() == _other.getContactInfo() && getSMSTemplateIdList() == _other.getSMSTemplateIdList());
        }
    	inline bool operator!=(const InsertItems &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Structure for expected phonebook entry, Mapeed between phonebookresult to
     *   bitmasked valued of 
                            eTelType , eContactNameField ,
     *   eAddrtype , email , Extende feature
     */
    typedef std::unordered_map<::v1::com::harman::btpres::BTPresTypes::phonebookResult, uint8_t, CommonAPI::EnumHasher<::v1::com::harman::btpres::BTPresTypes::phonebookResult>> phonebookResultMap;
    /**
     * description: Mapping between filter and string
     */
    typedef std::unordered_map<::v1::com::harman::btpres::BTPresTypes::eFilterType, std::string, CommonAPI::EnumHasher<::v1::com::harman::btpres::BTPresTypes::eFilterType>> filterMap;
    /**
     * description: Required field values, if default is set default data will be sent based on
     *   config
     */
    typedef std::unordered_map<::v1::com::harman::btpres::BTPresTypes::eResultType, bool, CommonAPI::EnumHasher<::v1::com::harman::btpres::BTPresTypes::eResultType>> requiredFieldMap;
    typedef std::vector<BTPresTypes::tDeviceSearchEntry> tDeviceSearchEntryList;
    typedef std::vector<BTPresTypes::bondedDev> bondedDevList;
    typedef std::vector<BTPresTypes::deviceInfo> unstableDeviceInfoList;
    typedef std::vector<int32_t> integerList;
    typedef std::vector<std::string> stringList;
    typedef std::vector<BTPresTypes::eSupportedFeature> tSupportedFeatureList;
    typedef std::vector<BTPresTypes::networkOperatorInfo> networkOperatorInfoList;
    typedef std::vector<BTPresTypes::signalChargeInfo> signalChargeInfoList;
    typedef std::vector<BTPresTypes::hfpSupportedFeatures> hfpSupportedFeaturesList;
    typedef std::vector<BTPresTypes::hfModeStatus> hfModeStatusList;
    typedef std::vector<BTPresTypes::vrModeStatus> vrModeStatusList;
    typedef std::vector<BTPresTypes::callStateInfo> callstateInfoList;
    typedef std::vector<BTPresTypes::callDuration> callDurationList;
    typedef std::vector<BTPresTypes::audioStatus> audioStatusList;
    typedef std::vector<BTPresTypes::phonebookEntry> phonebook;
    typedef std::vector<BTPresTypes::callstackEntry> arcallstack;
    typedef std::vector<BTPresTypes::smsEntry> arSMS;
    typedef std::vector<BTPresTypes::pimProperties> pimPropertiesList;
    typedef std::vector<BTPresTypes::browsingData> arfieldList;
    typedef std::vector<BTPresTypes::alphaJumpTable> alphaJumpList;



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.btpres.BTPresTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct BTPresTypes

} // namespace btpres
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for eBluetoothStatus
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eBluetoothStatus> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eBluetoothStatus& eBluetoothStatus) const {
            return static_cast<int32_t>(eBluetoothStatus);
        }
    };
    //Hash for eSupportedFeature
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eSupportedFeature> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eSupportedFeature& eSupportedFeature) const {
            return static_cast<int32_t>(eSupportedFeature);
        }
    };
    //Hash for eSupportedProfile
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eSupportedProfile> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile& eSupportedProfile) const {
            return static_cast<int32_t>(eSupportedProfile);
        }
    };
    //Hash for eCOD
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eCOD> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eCOD& eCOD) const {
            return static_cast<int32_t>(eCOD);
        }
    };
    //Hash for eBondingType
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eBondingType> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eBondingType& eBondingType) const {
            return static_cast<int32_t>(eBondingType);
        }
    };
    //Hash for ePairingStatus
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::ePairingStatus> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::ePairingStatus& ePairingStatus) const {
            return static_cast<int32_t>(ePairingStatus);
        }
    };
    //Hash for eConnectionStatus
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eConnectionStatus> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eConnectionStatus& eConnectionStatus) const {
            return static_cast<int32_t>(eConnectionStatus);
        }
    };
    //Hash for eServiceConnectDisconnectReason
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eServiceConnectDisconnectReason> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eServiceConnectDisconnectReason& eServiceConnectDisconnectReason) const {
            return static_cast<int32_t>(eServiceConnectDisconnectReason);
        }
    };
    //Hash for eTransferDelay
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eTransferDelay> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eTransferDelay& eTransferDelay) const {
            return static_cast<int32_t>(eTransferDelay);
        }
    };
    //Hash for eCodecType
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eCodecType> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eCodecType& eCodecType) const {
            return static_cast<int32_t>(eCodecType);
        }
    };
    //Hash for eDirection
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eDirection> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eDirection& eDirection) const {
            return static_cast<int32_t>(eDirection);
        }
    };
    //Hash for eBatteryChargeLevel
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eBatteryChargeLevel> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eBatteryChargeLevel& eBatteryChargeLevel) const {
            return static_cast<int32_t>(eBatteryChargeLevel);
        }
    };
    //Hash for eRssiLevel
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eRssiLevel> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eRssiLevel& eRssiLevel) const {
            return static_cast<int32_t>(eRssiLevel);
        }
    };
    //Hash for eNetworkRegState
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eNetworkRegState> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eNetworkRegState& eNetworkRegState) const {
            return static_cast<int32_t>(eNetworkRegState);
        }
    };
    //Hash for eOperatorMode
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eOperatorMode> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eOperatorMode& eOperatorMode) const {
            return static_cast<int32_t>(eOperatorMode);
        }
    };
    //Hash for eCallState
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eCallState> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eCallState& eCallState) const {
            return static_cast<int32_t>(eCallState);
        }
    };
    //Hash for eAudioStatus
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eAudioStatus> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eAudioStatus& eAudioStatus) const {
            return static_cast<int32_t>(eAudioStatus);
        }
    };
    //Hash for eErrorType
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eErrorType> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eErrorType& eErrorType) const {
            return static_cast<int32_t>(eErrorType);
        }
    };
    //Hash for eFilterType
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eFilterType> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eFilterType& eFilterType) const {
            return static_cast<int32_t>(eFilterType);
        }
    };
    //Hash for eResultType
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eResultType> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eResultType& eResultType) const {
            return static_cast<int32_t>(eResultType);
        }
    };
    //Hash for eDatabaseType
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eDatabaseType> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eDatabaseType& eDatabaseType) const {
            return static_cast<int32_t>(eDatabaseType);
        }
    };
    //Hash for eDbOperationId
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eDbOperationId> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eDbOperationId& eDbOperationId) const {
            return static_cast<int32_t>(eDbOperationId);
        }
    };
    //Hash for eSyncState
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eSyncState> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eSyncState& eSyncState) const {
            return static_cast<int32_t>(eSyncState);
        }
    };
    //Hash for eContactNameOredr
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eContactNameOredr> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eContactNameOredr& eContactNameOredr) const {
            return static_cast<int32_t>(eContactNameOredr);
        }
    };
    //Hash for eTelType
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eTelType> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eTelType& eTelType) const {
            return static_cast<int32_t>(eTelType);
        }
    };
    //Hash for eContactNameField
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eContactNameField> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eContactNameField& eContactNameField) const {
            return static_cast<int32_t>(eContactNameField);
        }
    };
    //Hash for eAddrtype
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eAddrtype> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eAddrtype& eAddrtype) const {
            return static_cast<int32_t>(eAddrtype);
        }
    };
    //Hash for eEmailtype
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eEmailtype> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eEmailtype& eEmailtype) const {
            return static_cast<int32_t>(eEmailtype);
        }
    };
    //Hash for eExtraFeature
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eExtraFeature> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eExtraFeature& eExtraFeature) const {
            return static_cast<int32_t>(eExtraFeature);
        }
    };
    //Hash for eFoldertype
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eFoldertype> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eFoldertype& eFoldertype) const {
            return static_cast<int32_t>(eFoldertype);
        }
    };
    //Hash for eMsgNotification
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::eMsgNotification> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::eMsgNotification& eMsgNotification) const {
            return static_cast<int32_t>(eMsgNotification);
        }
    };
    //Hash for phonebookResult
    template<>
    struct hash<::v1::com::harman::btpres::BTPresTypes::phonebookResult> {
        inline size_t operator()(const ::v1::com::harman::btpres::BTPresTypes::phonebookResult& phonebookResult) const {
            return static_cast<int32_t>(phonebookResult);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_BTPRES_BT_Pres_Types_HPP_
