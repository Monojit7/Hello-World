/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Thu Sep 22 00:23:23 IST 2016
*/
#ifndef V1_COM_HARMAN_BTPRES_Call_Manager_STUB_HPP_
#define V1_COM_HARMAN_BTPRES_Call_Manager_STUB_HPP_

#include <functional>



#include <v1/com/harman/btpres/BTPresTypes.hpp>

#include <v1/com/harman/btpres/CallManager.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace btpres {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service CallManager. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class CallManagerStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual CallManager {
 public:
    ///Notifies all remote listeners about a change of value of the attribute hfFeaturesList.
    virtual void fireHfFeaturesListAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::hfpSupportedFeaturesList& hfFeaturesList) = 0;
    ///Notifies all remote listeners about a change of value of the attribute operatorInfoList.
    virtual void fireOperatorInfoListAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::networkOperatorInfoList& operatorInfoList) = 0;
    ///Notifies all remote listeners about a change of value of the attribute rssiChargeInfoList.
    virtual void fireRssiChargeInfoListAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::signalChargeInfoList& rssiChargeInfoList) = 0;
    ///Notifies all remote listeners about a change of value of the attribute callStateInfo.
    virtual void fireCallStateInfoAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::callstateInfoList& callStateInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute hfMode.
    virtual void fireHfModeAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::hfModeStatusList& hfMode) = 0;
    ///Notifies all remote listeners about a change of value of the attribute callDuration.
    virtual void fireCallDurationAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::callDurationList& callDuration) = 0;
    ///Notifies all remote listeners about a change of value of the attribute audioStatus.
    virtual void fireAudioStatusAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::audioStatusList& audioStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute vrMode.
    virtual void fireVrModeAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::vrModeStatusList& vrMode) = 0;



    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for CallManager.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class CallManagerStubRemoteEvent
{
public:
    virtual ~CallManagerStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service CallManager to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class CallManagerStub
    : public virtual CommonAPI::Stub<CallManagerStubAdapter, CallManagerStubRemoteEvent>
{
public:
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>dialReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>sendDtmfToneReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>acceptIncomingCallReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>endCallReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>endActiveCallReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>endAllCallsReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>rejectIncomingCallReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>holdActiveCallReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>resumeHeldCallReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>conferenceCallReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>selectCallReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>setHfModeReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>setVRModeReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>swapCallsReply_t;

    virtual ~CallManagerStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /**
     * description: broadcast Handsfree supported features to registered clients
     */
    /// Provides getter access to the attribute hfFeaturesList
    virtual const ::v1::com::harman::btpres::BTPresTypes::hfpSupportedFeaturesList &getHfFeaturesListAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: broadcast phone network operator information to registered clients
     */
    /// Provides getter access to the attribute operatorInfoList
    virtual const ::v1::com::harman::btpres::BTPresTypes::networkOperatorInfoList &getOperatorInfoListAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: broadcast signal and charge levels to registered clients
     */
    /// Provides getter access to the attribute rssiChargeInfoList
    virtual const ::v1::com::harman::btpres::BTPresTypes::signalChargeInfoList &getRssiChargeInfoListAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: broadcast callstate status to registered clients
     */
    /// Provides getter access to the attribute callStateInfo
    virtual const ::v1::com::harman::btpres::BTPresTypes::callstateInfoList &getCallStateInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: broadcast HF mode status to registered clients
     */
    /// Provides getter access to the attribute hfMode
    virtual const ::v1::com::harman::btpres::BTPresTypes::hfModeStatusList &getHfModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: broadcast call duration to registered clients
     */
    /// Provides getter access to the attribute callDuration
    virtual const ::v1::com::harman::btpres::BTPresTypes::callDurationList &getCallDurationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: broadcast SCO audio status to registered clients
     */
    /// Provides getter access to the attribute audioStatus
    virtual const ::v1::com::harman::btpres::BTPresTypes::audioStatusList &getAudioStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: broadcast VR status to registered clients
     */
    /// Provides getter access to the attribute vrMode
    virtual const ::v1::com::harman::btpres::BTPresTypes::vrModeStatusList &getVrModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /**
     * description: Used to initate call from head unit HMI.
     * param: inAddress (String)    	: BD Address of the device to get the properties
    	     
     *   : dialNumber (String)	        : Number to be dialled
    	      : contactName
     *   (String)    	: Contact Name if available
    	      : imageUrl (String)	        :
     *   Image URL if available
    	returns: errorCode (eErrorType)	: API execution output
     */
    /// This is the method that will be called on remote calls on the method dial.
    virtual void dial(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, std::string _dialNumber, std::string _contactName, std::string _imageUrl, ::v1::com::harman::btpres::BTPresTypes::eTelType _numType, dialReply_t _reply) = 0;
    /**
     * description: Used to send DTMF tone from head unit to phone.
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   dtmfTone (String)	: DTMF tone to be sent
    	returns: errorCode (errorCode)	: API
     *   execution ouput
     */
    /// This is the method that will be called on remote calls on the method sendDtmfTone.
    virtual void sendDtmfTone(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, std::string _dtmfTone, sendDtmfToneReply_t _reply) = 0;
    /**
     * description: Accept incoming call from Head Unit
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   transfer (Boolean)	: Whether the call has to be transferred to Handset mode
     *   upon acceptance
    	returns: errorCode (eErrorType): API execution output
     */
    /// This is the method that will be called on remote calls on the method acceptIncomingCall.
    virtual void acceptIncomingCall(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, bool _transfer, acceptIncomingCallReply_t _reply) = 0;
    /**
     * description: End call for passed call ID
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   callId (Int32)          : Call ID of the phone call to be ended
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    /// This is the method that will be called on remote calls on the method endCall.
    virtual void endCall(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, int8_t _callId, endCallReply_t _reply) = 0;
    /**
     * description: End currently active call for a particular device
     * param: inAddress (String)      : BD Address of the device to get the
     *   properties
    	returns: errorCode (eErrorType): API execution output
     */
    /// This is the method that will be called on remote calls on the method endActiveCall.
    virtual void endActiveCall(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, endActiveCallReply_t _reply) = 0;
    /**
     * description: Ends all available calls
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    /// This is the method that will be called on remote calls on the method endAllCalls.
    virtual void endAllCalls(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, endAllCallsReply_t _reply) = 0;
    /**
     * description: Reject incoming calls
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    /// This is the method that will be called on remote calls on the method rejectIncomingCall.
    virtual void rejectIncomingCall(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, rejectIncomingCallReply_t _reply) = 0;
    /**
     * description: Put current active call on hold
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    /// This is the method that will be called on remote calls on the method holdActiveCall.
    virtual void holdActiveCall(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, holdActiveCallReply_t _reply) = 0;
    /**
     * description: Activate the held from head unit
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    /// This is the method that will be called on remote calls on the method resumeHeldCall.
    virtual void resumeHeldCall(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, resumeHeldCallReply_t _reply) = 0;
    /**
     * description: Conference available calls from Head Unit
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    /// This is the method that will be called on remote calls on the method conferenceCall.
    virtual void conferenceCall(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, conferenceCallReply_t _reply) = 0;
    /**
     * description: Interface is used by HMI to select a particular call in case two phone are
     *   connected each with a phone call.
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   callId (Int32)          : Call ID of the phone call to be selected
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    /// This is the method that will be called on remote calls on the method selectCall.
    virtual void selectCall(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, int8_t _callId, selectCallReply_t _reply) = 0;
    /**
     * description: Interface is used by HMI to transfer call audio from Handsfree to Handset and
     *   vise versa
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   hfMode (Boolean)	: Handsfree Mode requested from the HMI
    	returns: errorCode
     *   (eErrorType): API execution output
     */
    /// This is the method that will be called on remote calls on the method setHfMode.
    virtual void setHfMode(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, bool _hfMode, setHfModeReply_t _reply) = 0;
    /**
     * description: Interface is used by HMI to active Phone VR mode from Head Unit
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   mode (Boolean)		: VR Mode requested from the HMI
    	returns: errorCode
     *   (eErrorType): API execution output
     */
    /// This is the method that will be called on remote calls on the method setVRMode.
    virtual void setVRMode(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, bool _mode, setVRModeReply_t _reply) = 0;
    /**
     * description: Interface is used by HMI to swap the active call available on Head Unit
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    /// This is the method that will be called on remote calls on the method swapCalls.
    virtual void swapCalls(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, swapCallsReply_t _reply) = 0;

    using CommonAPI::Stub<CallManagerStubAdapter, CallManagerStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<CallManagerStubAdapter, CallManagerStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<CallManagerStubAdapter, CallManagerStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef CallManagerStubRemoteEvent RemoteEventType;
    typedef CallManager StubInterface;
};

} // namespace btpres
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_BTPRES_Call_Manager_STUB_HPP_
