/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Thu Sep 22 00:23:23 IST 2016
*/
#ifndef V1_COM_HARMAN_BTPRES_Connection_Manager_STUB_DEFAULT_HPP_
#define V1_COM_HARMAN_BTPRES_Connection_Manager_STUB_DEFAULT_HPP_


#include <v1/com/harman/btpres/ConnectionManagerStub.hpp>
#include <sstream>

namespace v1 {
namespace com {
namespace harman {
namespace btpres {

/**
 * Provides a default implementation for ConnectionManagerStubRemoteEvent and
 * ConnectionManagerStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class ConnectionManagerStubDefault
    : public virtual ConnectionManagerStub {
public:
    ConnectionManagerStubDefault();

    ConnectionManagerStubRemoteEvent* initStubAdapter(const std::shared_ptr<ConnectionManagerStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    virtual const ::v1::com::harman::btpres::BTPresTypes::eBluetoothStatus& getBtStateAttribute();
    virtual const ::v1::com::harman::btpres::BTPresTypes::eBluetoothStatus& getBtStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setBtStateAttribute(::v1::com::harman::btpres::BTPresTypes::eBluetoothStatus _value);
    virtual const std::string& getLocalDevAddrAttribute();
    virtual const std::string& getLocalDevAddrAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setLocalDevAddrAttribute(std::string _value);
    virtual const std::string& getLocalDevNameAttribute();
    virtual const std::string& getLocalDevNameAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setLocalDevNameAttribute(std::string _value);
    virtual const std::string& getPassKeyPinAttribute();
    virtual const std::string& getPassKeyPinAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPassKeyPinAttribute(std::string _value);
    virtual const bool& getDeviceSearchStatusAttribute();
    virtual const bool& getDeviceSearchStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setDeviceSearchStatusAttribute(bool _value);
    virtual const bool& getDiscoverableStatusAttribute();
    virtual const bool& getDiscoverableStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setDiscoverableStatusAttribute(bool _value);
    virtual const uint16_t& getDiscoveryTimeoutAttribute();
    virtual const uint16_t& getDiscoveryTimeoutAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setDiscoveryTimeoutAttribute(uint16_t _value);
    virtual const ::v1::com::harman::btpres::BTPresTypes::tDeviceSearchEntryList& getDevSearchResultsAttribute();
    virtual const ::v1::com::harman::btpres::BTPresTypes::tDeviceSearchEntryList& getDevSearchResultsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setDevSearchResultsAttribute(::v1::com::harman::btpres::BTPresTypes::tDeviceSearchEntryList _value);
    virtual const ::v1::com::harman::btpres::BTPresTypes::bondedDevList& getDevListAttribute();
    virtual const ::v1::com::harman::btpres::BTPresTypes::bondedDevList& getDevListAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setDevListAttribute(::v1::com::harman::btpres::BTPresTypes::bondedDevList _value);
    virtual const ::v1::com::harman::btpres::BTPresTypes::networkIfStatus& getNetIfStatusAttribute();
    virtual const ::v1::com::harman::btpres::BTPresTypes::networkIfStatus& getNetIfStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setNetIfStatusAttribute(::v1::com::harman::btpres::BTPresTypes::networkIfStatus _value);
    virtual const ::v1::com::harman::btpres::BTPresTypes::unstableDeviceInfoList& getUnstableDevsAttribute();
    virtual const ::v1::com::harman::btpres::BTPresTypes::unstableDeviceInfoList& getUnstableDevsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setUnstableDevsAttribute(::v1::com::harman::btpres::BTPresTypes::unstableDeviceInfoList _value);
    virtual const std::string& getPrimaryDeviceAttribute();
    virtual const std::string& getPrimaryDeviceAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPrimaryDeviceAttribute(std::string _value);

    /**
     * description: Used to start device search on head unit
     * param: maxDevice (UInt32)       : max limit for found devices
     * param: timeout (UInt32)         : time limit for device search operation
    
           
     *   returns: errorCode (eErrorType) : error code
     */
    virtual void startDeviceSearch(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _maxDevice, uint32_t _timeout, startDeviceSearchReply_t _reply);
    /**
     * description: Used to stop device search on head unit
     * param: none
    
            returns: error code (eErrorType) : error code
     */
    virtual void stopDeviceSearch(const std::shared_ptr<CommonAPI::ClientId> _client, stopDeviceSearchReply_t _reply);
    /**
     * description: Used to send secure Bonding reply
     * param: inAddress (string)       : phone BT address
     * param: accept (boolean)         : accepting authentication request
     * param: trusted (boolean)        : making device trusted means service won't send
     *   connection request for each connect attempt
     * param: type (eBondingType)      : Bonding type, standard or secure bonding
    
           
     *   returns: errorCode (eErrorType) : error code
     */
    virtual void bondingReply(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, bool _accept, bool _trusted, ::v1::com::harman::btpres::BTPresTypes::eBondingType _type, bondingReplyReply_t _reply);
    /**
     * description: Used to delete device from paired device list
     * param: inAddress (string)      : phone BT address
    
            returns: errorCode
     *   (eErrorType): error code
     */
    virtual void deleteDevice(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, deleteDeviceReply_t _reply);
    /**
     * description: Used to delete all device in paired device list
     * param: none
    
            returns: errorCode (eErrorType) : error code
     */
    virtual void deleteAllDevices(const std::shared_ptr<CommonAPI::ClientId> _client, deleteAllDevicesReply_t _reply);
    /**
     * description: Used to initate profile connection with device
     * param: inAddress (string)       : phone BT address
     * param: service (eSupportedProfile) : profile name
     * param: instanceName (string)    : containing the phone instance
     * param: replaceAddr (string)     : containing the replacement address for which the
     *   connection will be replaced
    
            returns: errorCode (eErrorType) : error
     *   code
     */
    virtual void startServiceConnection(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile _service, std::string _instanceName, std::string _replaceAddr, startServiceConnectionReply_t _reply);
    /**
     * description: Used to allows the existance of the service connection to this device and
     *   service.
     * param: inAddress (string)           : phone BT address
     * param: service (eSupportedProfile)  : profile name
     * param: allow (Boolean)              : containing the value true for allow, or false
     *   for reject
    
            returns: errorCode (eErrorType)      : error code
     */
    virtual void allowServiceConnection(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile _service, bool _allow, allowServiceConnectionReply_t _reply);
    /**
     * description: Used to initate the disconnection with connected service i.e. HFP and A2DP
     * param: inAddress (string)                  : phone BT address
     * param: service (eSupportedProfile)         : profile name
    
            returns: errorCode
     *   error code (eErrorType)  : error code
     */
    virtual void startServiceDisconnection(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile _service, startServiceDisconnectionReply_t _reply);
    /**
     * description: This method should be called by clients in order to reply to the incoming
     *   service 
                           connection request from a remote device as
     *   indicated by the signal 'serviceConnectionRequest'. 
                          
     *   The reply can be to accept or reject incoming service connection request.
     * param: inAddress (string)              : phone BT address
     * param: service (eSupportedProfile)     : profile name
     * param: accept (boolean)                : containing the value true for allow, or false
     *   for reject
     * param: instanceName (string)           : containing the instance name of the device
    
     
     *         returns: errorCode (eErrorType)         : error code
     */
    virtual void serviceConnectionReply(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile _service, bool _accept, std::string _instanceName, serviceConnectionReplyReply_t _reply);
    /**
     * description: Used to initiate the reconnection to previously connected device
     * param: None
    
            returns: errorCode error code (eErrorType) : error code
     */
    virtual void startReconnect(const std::shared_ptr<CommonAPI::ClientId> _client, startReconnectReply_t _reply);
    /**
     * description: This method should be called to get oldest connected device
     * param: None
    
            returns: oldestDevInfo (oldestDevInfo)     : Oldest device name
     *   and address
            returns: errorCode error code (eErrorType) : error code
     */
    virtual void getOldestConnectedDev(const std::shared_ptr<CommonAPI::ClientId> _client, getOldestConnectedDevReply_t _reply);
    /**
     * description: This method used to change name of bonded device.
     * param: inAddress  (string)     : contains the BD address.
     * param: name (string)           : Device name
    
            returns: errorCode(eErrorType) 
     *   : error code
     */
    virtual void renameBondedDevice(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, std::string _name, renameBondedDeviceReply_t _reply);
    /**
     * description: This method used to change local name of head unit.
     * param: name (string)           : Device name
    
            returns: errorCode(eErrorType) 
     *   : error code
     */
    virtual void renameLocalDevice(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _name, renameLocalDeviceReply_t _reply);
    /**
     * description: Used to set bluetooth on or off
     * param: status (boolean)       : set true or false
    
            returns: error
     *   code(eErrorType) : error code
     */
    virtual void setBluetoothStatus(const std::shared_ptr<CommonAPI::ClientId> _client, bool _status, setBluetoothStatusReply_t _reply);
    /**
     * description: Used to enable or disable discoverable mode
     * param: enabled (boolean)       : set true or false
    
            returns: errorCode
     *   (eErrorType) : error code
     */
    virtual void setDiscoverableMode(const std::shared_ptr<CommonAPI::ClientId> _client, bool _enabled, setDiscoverableModeReply_t _reply);
    /**
     * description: This method used to pin information for head unit.
     * param: passkey (string)          : set the default pin for legacy devices
    
           
     *   returns:  error code (eErrorType) : error code
     */
    virtual void setPin(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _passkey, setPinReply_t _reply);
    /**
     * description: It will set a device as primary
     * param: inAddress  (string)     : contains the BD address.
    
            returns:  error
     *   code (eErrorType) : error code
     */
    virtual void setPrimaryDevice(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, setPrimaryDeviceReply_t _reply);

/**
 * description: It will broadcast standard bonding Request to registered clients
 * param: outAddress (string)     : Bt address of phone
 * param: deviceName (string)     : Device name
 * param: type (eBondingType)     : Bonding type
 * param: pin (string) : pass key pin
 */
virtual void fireBondingRequestEvent(const std::string &_outAddress, const std::string &_deviceName, const ::v1::com::harman::btpres::BTPresTypes::eBondingType &_type, const std::string &_pin);
/**
 * description: It will broadcast service connection request to registered clients
 * param: outAddress (string)         : Bt address of phone
 * param: name (string)               : Device name
 * param: service (eSupportedProfile) : supported profile list
 */
virtual void fireServiceConnectionRequestEvent(const std::string &_outAddress, const std::string &_name, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service);
/**
 * description: It will broadcast service connection status signal to registered clients
 * param: outAddress (string)         : Bt address of phone
 * param: name (string)               : Device name
 * param: service (eSupportedProfile) : supported profile list
 * param: status (eConnectionStatus)  : Connected or disconnected status
 * param: reason (eServiceConnectDisconnectReason) : reason for connection or
 *   disconnection
 */
virtual void fireServiceConnectionStatusEvent(const std::string &_outAddress, const std::string &_name, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const ::v1::com::harman::btpres::BTPresTypes::eConnectionStatus &_status, const ::v1::com::harman::btpres::BTPresTypes::eServiceConnectDisconnectReason &_reason);
/**
 * description: This signal is sent when device has been deleted from Head Unit to registered
 *   clients
 * param: outAddress (string)     : Bt address of phone
 * param: deviceName (string )    : device name
 */
virtual void fireDeviceDeletedEvent(const std::string &_outAddress, const std::string &_deviceName);
/**
 * description: This signal is used to update the pairing status to registered clients
 * param: outAddress (string)         : Bt address of phone
 * param: deviceName (string)         : device name
 * param: pairStatus (ePairingStatus) : Pairing status i.e. successful Or failure
 */
virtual void fireBondingStatusEvent(const std::string &_outAddress, const std::string &_deviceName, const ::v1::com::harman::btpres::BTPresTypes::ePairingStatus &_pairStatus);


protected:
    /**
     * description: It will reflect the current bluetooth status to registered clients
     */
    virtual bool trySetBtStateAttribute(::v1::com::harman::btpres::BTPresTypes::eBluetoothStatus _value);
    virtual bool validateBtStateAttributeRequestedValue(const ::v1::com::harman::btpres::BTPresTypes::eBluetoothStatus &_value);
    /**
     * description: It will reflect local device address to registered clients
     */
    virtual bool trySetLocalDevAddrAttribute(std::string _value);
    virtual bool validateLocalDevAddrAttributeRequestedValue(const std::string &_value);
    /**
     * description: It will reflect local device name to registered clients
     */
    virtual bool trySetLocalDevNameAttribute(std::string _value);
    virtual bool validateLocalDevNameAttributeRequestedValue(const std::string &_value);
    /**
     * description: It will broadcast stored pass key to registered clients
     */
    virtual bool trySetPassKeyPinAttribute(std::string _value);
    virtual bool validatePassKeyPinAttributeRequestedValue(const std::string &_value);
    /**
     * description: It will broadcast device search status to registered client
     */
    virtual bool trySetDeviceSearchStatusAttribute(bool _value);
    virtual bool validateDeviceSearchStatusAttributeRequestedValue(const bool &_value);
    /**
     * description: It will broadcast discoverability status to registered clients
     */
    virtual bool trySetDiscoverableStatusAttribute(bool _value);
    virtual bool validateDiscoverableStatusAttributeRequestedValue(const bool &_value);
    /**
     * description: It will broadcast discoverability timeout to registered clients
     */
    virtual bool trySetDiscoveryTimeoutAttribute(uint16_t _value);
    virtual bool validateDiscoveryTimeoutAttributeRequestedValue(const uint16_t &_value);
    /**
     * description: It will broadcast device search results to registered clients
     */
    virtual bool trySetDevSearchResultsAttribute(::v1::com::harman::btpres::BTPresTypes::tDeviceSearchEntryList _value);
    virtual bool validateDevSearchResultsAttributeRequestedValue(const ::v1::com::harman::btpres::BTPresTypes::tDeviceSearchEntryList &_value);
    /**
     * description: It will broadcast bonded device list to registered clients
     */
    virtual bool trySetDevListAttribute(::v1::com::harman::btpres::BTPresTypes::bondedDevList _value);
    virtual bool validateDevListAttributeRequestedValue(const ::v1::com::harman::btpres::BTPresTypes::bondedDevList &_value);
    /**
     * description: It will broadcast network status to registered clients
     */
    virtual bool trySetNetIfStatusAttribute(::v1::com::harman::btpres::BTPresTypes::networkIfStatus _value);
    virtual bool validateNetIfStatusAttributeRequestedValue(const ::v1::com::harman::btpres::BTPresTypes::networkIfStatus &_value);
    /**
     * description: It will braodcast unstable device info to registered clients
     */
    virtual bool trySetUnstableDevsAttribute(::v1::com::harman::btpres::BTPresTypes::unstableDeviceInfoList _value);
    virtual bool validateUnstableDevsAttributeRequestedValue(const ::v1::com::harman::btpres::BTPresTypes::unstableDeviceInfoList &_value);
    /**
     * description: It will braodcast primary device address
     */
    virtual bool trySetPrimaryDeviceAttribute(std::string _value);
    virtual bool validatePrimaryDeviceAttributeRequestedValue(const std::string &_value);
    class RemoteEventHandler: public virtual ConnectionManagerStubRemoteEvent {
    public:
        RemoteEventHandler(ConnectionManagerStubDefault *_defaultStub);

        /**
         * description: It will reflect the current bluetooth status to registered clients
         */

        /**
         * description: It will reflect local device address to registered clients
         */

        /**
         * description: It will reflect local device name to registered clients
         */

        /**
         * description: It will broadcast stored pass key to registered clients
         */

        /**
         * description: It will broadcast device search status to registered client
         */

        /**
         * description: It will broadcast discoverability status to registered clients
         */

        /**
         * description: It will broadcast discoverability timeout to registered clients
         */

        /**
         * description: It will broadcast device search results to registered clients
         */

        /**
         * description: It will broadcast bonded device list to registered clients
         */

        /**
         * description: It will broadcast network status to registered clients
         */

        /**
         * description: It will braodcast unstable device info to registered clients
         */

        /**
         * description: It will braodcast primary device address
         */


    private:
        ConnectionManagerStubDefault *defaultStub_;
    };
private:
    ConnectionManagerStubDefault::RemoteEventHandler remoteEventHandler_;

    /**
     * description: It will reflect the current bluetooth status to registered clients
     */
    ::v1::com::harman::btpres::BTPresTypes::eBluetoothStatus btStateAttributeValue_ {};
    /**
     * description: It will reflect local device address to registered clients
     */
    std::string localDevAddrAttributeValue_ {};
    /**
     * description: It will reflect local device name to registered clients
     */
    std::string localDevNameAttributeValue_ {};
    /**
     * description: It will broadcast stored pass key to registered clients
     */
    std::string passKeyPinAttributeValue_ {};
    /**
     * description: It will broadcast device search status to registered client
     */
    bool deviceSearchStatusAttributeValue_ {};
    /**
     * description: It will broadcast discoverability status to registered clients
     */
    bool discoverableStatusAttributeValue_ {};
    /**
     * description: It will broadcast discoverability timeout to registered clients
     */
    uint16_t discoveryTimeoutAttributeValue_ {};
    /**
     * description: It will broadcast device search results to registered clients
     */
    ::v1::com::harman::btpres::BTPresTypes::tDeviceSearchEntryList devSearchResultsAttributeValue_ {};
    /**
     * description: It will broadcast bonded device list to registered clients
     */
    ::v1::com::harman::btpres::BTPresTypes::bondedDevList devListAttributeValue_ {};
    /**
     * description: It will broadcast network status to registered clients
     */
    ::v1::com::harman::btpres::BTPresTypes::networkIfStatus netIfStatusAttributeValue_ {};
    /**
     * description: It will braodcast unstable device info to registered clients
     */
    ::v1::com::harman::btpres::BTPresTypes::unstableDeviceInfoList unstableDevsAttributeValue_ {};
    /**
     * description: It will braodcast primary device address
     */
    std::string primaryDeviceAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace btpres
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_BTPRES_Connection_Manager_STUB_DEFAULT
