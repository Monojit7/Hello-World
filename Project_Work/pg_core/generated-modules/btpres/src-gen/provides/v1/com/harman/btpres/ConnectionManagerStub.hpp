/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Thu Sep 22 00:23:23 IST 2016
*/
#ifndef V1_COM_HARMAN_BTPRES_Connection_Manager_STUB_HPP_
#define V1_COM_HARMAN_BTPRES_Connection_Manager_STUB_HPP_

#include <functional>



#include <v1/com/harman/btpres/BTPresTypes.hpp>

#include <v1/com/harman/btpres/ConnectionManager.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace btpres {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service ConnectionManager. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class ConnectionManagerStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual ConnectionManager {
 public:
    ///Notifies all remote listeners about a change of value of the attribute btState.
    virtual void fireBtStateAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::eBluetoothStatus& btState) = 0;
    ///Notifies all remote listeners about a change of value of the attribute localDevAddr.
    virtual void fireLocalDevAddrAttributeChanged(const std::string& localDevAddr) = 0;
    ///Notifies all remote listeners about a change of value of the attribute localDevName.
    virtual void fireLocalDevNameAttributeChanged(const std::string& localDevName) = 0;
    ///Notifies all remote listeners about a change of value of the attribute passKeyPin.
    virtual void firePassKeyPinAttributeChanged(const std::string& passKeyPin) = 0;
    ///Notifies all remote listeners about a change of value of the attribute deviceSearchStatus.
    virtual void fireDeviceSearchStatusAttributeChanged(const bool& deviceSearchStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute discoverableStatus.
    virtual void fireDiscoverableStatusAttributeChanged(const bool& discoverableStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute discoveryTimeout.
    virtual void fireDiscoveryTimeoutAttributeChanged(const uint16_t& discoveryTimeout) = 0;
    ///Notifies all remote listeners about a change of value of the attribute devSearchResults.
    virtual void fireDevSearchResultsAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::tDeviceSearchEntryList& devSearchResults) = 0;
    ///Notifies all remote listeners about a change of value of the attribute devList.
    virtual void fireDevListAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::bondedDevList& devList) = 0;
    ///Notifies all remote listeners about a change of value of the attribute netIfStatus.
    virtual void fireNetIfStatusAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::networkIfStatus& netIfStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute unstableDevs.
    virtual void fireUnstableDevsAttributeChanged(const ::v1::com::harman::btpres::BTPresTypes::unstableDeviceInfoList& unstableDevs) = 0;
    ///Notifies all remote listeners about a change of value of the attribute primaryDevice.
    virtual void firePrimaryDeviceAttributeChanged(const std::string& primaryDevice) = 0;

    /**
     * Sends a broadcast event for bondingRequest. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireBondingRequestEvent(const std::string &_outAddress, const std::string &_deviceName, const ::v1::com::harman::btpres::BTPresTypes::eBondingType &_type, const std::string &_pin) = 0;
    /**
     * Sends a broadcast event for serviceConnectionRequest. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireServiceConnectionRequestEvent(const std::string &_outAddress, const std::string &_name, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service) = 0;
    /**
     * Sends a broadcast event for serviceConnectionStatus. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireServiceConnectionStatusEvent(const std::string &_outAddress, const std::string &_name, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const ::v1::com::harman::btpres::BTPresTypes::eConnectionStatus &_status, const ::v1::com::harman::btpres::BTPresTypes::eServiceConnectDisconnectReason &_reason) = 0;
    /**
     * Sends a broadcast event for deviceDeleted. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireDeviceDeletedEvent(const std::string &_outAddress, const std::string &_deviceName) = 0;
    /**
     * Sends a broadcast event for bondingStatus. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireBondingStatusEvent(const std::string &_outAddress, const std::string &_deviceName, const ::v1::com::harman::btpres::BTPresTypes::ePairingStatus &_pairStatus) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for ConnectionManager.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ConnectionManagerStubRemoteEvent
{
public:
    virtual ~ConnectionManagerStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service ConnectionManager to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ConnectionManagerStub
    : public virtual CommonAPI::Stub<ConnectionManagerStubAdapter, ConnectionManagerStubRemoteEvent>
{
public:
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>startDeviceSearchReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>stopDeviceSearchReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>bondingReplyReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>deleteDeviceReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>deleteAllDevicesReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>startServiceConnectionReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>allowServiceConnectionReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>startServiceDisconnectionReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>serviceConnectionReplyReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>startReconnectReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::deviceInfo _oldestDevInfo, ::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>getOldestConnectedDevReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>renameBondedDeviceReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>renameLocalDeviceReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>setBluetoothStatusReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>setDiscoverableModeReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>setPinReply_t;
    typedef std::function<void (::v1::com::harman::btpres::BTPresTypes::eErrorType _errorCode)>setPrimaryDeviceReply_t;

    virtual ~ConnectionManagerStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /**
     * description: It will reflect the current bluetooth status to registered clients
     */
    /// Provides getter access to the attribute btState
    virtual const ::v1::com::harman::btpres::BTPresTypes::eBluetoothStatus &getBtStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: It will reflect local device address to registered clients
     */
    /// Provides getter access to the attribute localDevAddr
    virtual const std::string &getLocalDevAddrAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: It will reflect local device name to registered clients
     */
    /// Provides getter access to the attribute localDevName
    virtual const std::string &getLocalDevNameAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: It will broadcast stored pass key to registered clients
     */
    /// Provides getter access to the attribute passKeyPin
    virtual const std::string &getPassKeyPinAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: It will broadcast device search status to registered client
     */
    /// Provides getter access to the attribute deviceSearchStatus
    virtual const bool &getDeviceSearchStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: It will broadcast discoverability status to registered clients
     */
    /// Provides getter access to the attribute discoverableStatus
    virtual const bool &getDiscoverableStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: It will broadcast discoverability timeout to registered clients
     */
    /// Provides getter access to the attribute discoveryTimeout
    virtual const uint16_t &getDiscoveryTimeoutAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: It will broadcast device search results to registered clients
     */
    /// Provides getter access to the attribute devSearchResults
    virtual const ::v1::com::harman::btpres::BTPresTypes::tDeviceSearchEntryList &getDevSearchResultsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: It will broadcast bonded device list to registered clients
     */
    /// Provides getter access to the attribute devList
    virtual const ::v1::com::harman::btpres::BTPresTypes::bondedDevList &getDevListAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: It will broadcast network status to registered clients
     */
    /// Provides getter access to the attribute netIfStatus
    virtual const ::v1::com::harman::btpres::BTPresTypes::networkIfStatus &getNetIfStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: It will braodcast unstable device info to registered clients
     */
    /// Provides getter access to the attribute unstableDevs
    virtual const ::v1::com::harman::btpres::BTPresTypes::unstableDeviceInfoList &getUnstableDevsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: It will braodcast primary device address
     */
    /// Provides getter access to the attribute primaryDevice
    virtual const std::string &getPrimaryDeviceAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /**
     * description: Used to start device search on head unit
     * param: maxDevice (UInt32)       : max limit for found devices
     * param: timeout (UInt32)         : time limit for device search operation
    
           
     *   returns: errorCode (eErrorType) : error code
     */
    /// This is the method that will be called on remote calls on the method startDeviceSearch.
    virtual void startDeviceSearch(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _maxDevice, uint32_t _timeout, startDeviceSearchReply_t _reply) = 0;
    /**
     * description: Used to stop device search on head unit
     * param: none
    
            returns: error code (eErrorType) : error code
     */
    /// This is the method that will be called on remote calls on the method stopDeviceSearch.
    virtual void stopDeviceSearch(const std::shared_ptr<CommonAPI::ClientId> _client, stopDeviceSearchReply_t _reply) = 0;
    /**
     * description: Used to send secure Bonding reply
     * param: inAddress (string)       : phone BT address
     * param: accept (boolean)         : accepting authentication request
     * param: trusted (boolean)        : making device trusted means service won't send
     *   connection request for each connect attempt
     * param: type (eBondingType)      : Bonding type, standard or secure bonding
    
           
     *   returns: errorCode (eErrorType) : error code
     */
    /// This is the method that will be called on remote calls on the method bondingReply.
    virtual void bondingReply(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, bool _accept, bool _trusted, ::v1::com::harman::btpres::BTPresTypes::eBondingType _type, bondingReplyReply_t _reply) = 0;
    /**
     * description: Used to delete device from paired device list
     * param: inAddress (string)      : phone BT address
    
            returns: errorCode
     *   (eErrorType): error code
     */
    /// This is the method that will be called on remote calls on the method deleteDevice.
    virtual void deleteDevice(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, deleteDeviceReply_t _reply) = 0;
    /**
     * description: Used to delete all device in paired device list
     * param: none
    
            returns: errorCode (eErrorType) : error code
     */
    /// This is the method that will be called on remote calls on the method deleteAllDevices.
    virtual void deleteAllDevices(const std::shared_ptr<CommonAPI::ClientId> _client, deleteAllDevicesReply_t _reply) = 0;
    /**
     * description: Used to initate profile connection with device
     * param: inAddress (string)       : phone BT address
     * param: service (eSupportedProfile) : profile name
     * param: instanceName (string)    : containing the phone instance
     * param: replaceAddr (string)     : containing the replacement address for which the
     *   connection will be replaced
    
            returns: errorCode (eErrorType) : error
     *   code
     */
    /// This is the method that will be called on remote calls on the method startServiceConnection.
    virtual void startServiceConnection(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile _service, std::string _instanceName, std::string _replaceAddr, startServiceConnectionReply_t _reply) = 0;
    /**
     * description: Used to allows the existance of the service connection to this device and
     *   service.
     * param: inAddress (string)           : phone BT address
     * param: service (eSupportedProfile)  : profile name
     * param: allow (Boolean)              : containing the value true for allow, or false
     *   for reject
    
            returns: errorCode (eErrorType)      : error code
     */
    /// This is the method that will be called on remote calls on the method allowServiceConnection.
    virtual void allowServiceConnection(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile _service, bool _allow, allowServiceConnectionReply_t _reply) = 0;
    /**
     * description: Used to initate the disconnection with connected service i.e. HFP and A2DP
     * param: inAddress (string)                  : phone BT address
     * param: service (eSupportedProfile)         : profile name
    
            returns: errorCode
     *   error code (eErrorType)  : error code
     */
    /// This is the method that will be called on remote calls on the method startServiceDisconnection.
    virtual void startServiceDisconnection(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile _service, startServiceDisconnectionReply_t _reply) = 0;
    /**
     * description: This method should be called by clients in order to reply to the incoming
     *   service 
                           connection request from a remote device as
     *   indicated by the signal 'serviceConnectionRequest'. 
                          
     *   The reply can be to accept or reject incoming service connection request.
     * param: inAddress (string)              : phone BT address
     * param: service (eSupportedProfile)     : profile name
     * param: accept (boolean)                : containing the value true for allow, or false
     *   for reject
     * param: instanceName (string)           : containing the instance name of the device
    
     
     *         returns: errorCode (eErrorType)         : error code
     */
    /// This is the method that will be called on remote calls on the method serviceConnectionReply.
    virtual void serviceConnectionReply(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile _service, bool _accept, std::string _instanceName, serviceConnectionReplyReply_t _reply) = 0;
    /**
     * description: Used to initiate the reconnection to previously connected device
     * param: None
    
            returns: errorCode error code (eErrorType) : error code
     */
    /// This is the method that will be called on remote calls on the method startReconnect.
    virtual void startReconnect(const std::shared_ptr<CommonAPI::ClientId> _client, startReconnectReply_t _reply) = 0;
    /**
     * description: This method should be called to get oldest connected device
     * param: None
    
            returns: oldestDevInfo (oldestDevInfo)     : Oldest device name
     *   and address
            returns: errorCode error code (eErrorType) : error code
     */
    /// This is the method that will be called on remote calls on the method getOldestConnectedDev.
    virtual void getOldestConnectedDev(const std::shared_ptr<CommonAPI::ClientId> _client, getOldestConnectedDevReply_t _reply) = 0;
    /**
     * description: This method used to change name of bonded device.
     * param: inAddress  (string)     : contains the BD address.
     * param: name (string)           : Device name
    
            returns: errorCode(eErrorType) 
     *   : error code
     */
    /// This is the method that will be called on remote calls on the method renameBondedDevice.
    virtual void renameBondedDevice(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, std::string _name, renameBondedDeviceReply_t _reply) = 0;
    /**
     * description: This method used to change local name of head unit.
     * param: name (string)           : Device name
    
            returns: errorCode(eErrorType) 
     *   : error code
     */
    /// This is the method that will be called on remote calls on the method renameLocalDevice.
    virtual void renameLocalDevice(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _name, renameLocalDeviceReply_t _reply) = 0;
    /**
     * description: Used to set bluetooth on or off
     * param: status (boolean)       : set true or false
    
            returns: error
     *   code(eErrorType) : error code
     */
    /// This is the method that will be called on remote calls on the method setBluetoothStatus.
    virtual void setBluetoothStatus(const std::shared_ptr<CommonAPI::ClientId> _client, bool _status, setBluetoothStatusReply_t _reply) = 0;
    /**
     * description: Used to enable or disable discoverable mode
     * param: enabled (boolean)       : set true or false
    
            returns: errorCode
     *   (eErrorType) : error code
     */
    /// This is the method that will be called on remote calls on the method setDiscoverableMode.
    virtual void setDiscoverableMode(const std::shared_ptr<CommonAPI::ClientId> _client, bool _enabled, setDiscoverableModeReply_t _reply) = 0;
    /**
     * description: This method used to pin information for head unit.
     * param: passkey (string)          : set the default pin for legacy devices
    
           
     *   returns:  error code (eErrorType) : error code
     */
    /// This is the method that will be called on remote calls on the method setPin.
    virtual void setPin(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _passkey, setPinReply_t _reply) = 0;
    /**
     * description: It will set a device as primary
     * param: inAddress  (string)     : contains the BD address.
    
            returns:  error
     *   code (eErrorType) : error code
     */
    /// This is the method that will be called on remote calls on the method setPrimaryDevice.
    virtual void setPrimaryDevice(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inAddress, setPrimaryDeviceReply_t _reply) = 0;
    /**
     * description: It will broadcast standard bonding Request to registered clients
     * param: outAddress (string)     : Bt address of phone
     * param: deviceName (string)     : Device name
     * param: type (eBondingType)     : Bonding type
     * param: pin (string) : pass key pin
     */
    /// Sends a broadcast event for bondingRequest.
    virtual void fireBondingRequestEvent(const std::string &_outAddress, const std::string &_deviceName, const ::v1::com::harman::btpres::BTPresTypes::eBondingType &_type, const std::string &_pin) = 0;
    /**
     * description: It will broadcast service connection request to registered clients
     * param: outAddress (string)         : Bt address of phone
     * param: name (string)               : Device name
     * param: service (eSupportedProfile) : supported profile list
     */
    /// Sends a broadcast event for serviceConnectionRequest.
    virtual void fireServiceConnectionRequestEvent(const std::string &_outAddress, const std::string &_name, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service) = 0;
    /**
     * description: It will broadcast service connection status signal to registered clients
     * param: outAddress (string)         : Bt address of phone
     * param: name (string)               : Device name
     * param: service (eSupportedProfile) : supported profile list
     * param: status (eConnectionStatus)  : Connected or disconnected status
     * param: reason (eServiceConnectDisconnectReason) : reason for connection or
     *   disconnection
     */
    /// Sends a broadcast event for serviceConnectionStatus.
    virtual void fireServiceConnectionStatusEvent(const std::string &_outAddress, const std::string &_name, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const ::v1::com::harman::btpres::BTPresTypes::eConnectionStatus &_status, const ::v1::com::harman::btpres::BTPresTypes::eServiceConnectDisconnectReason &_reason) = 0;
    /**
     * description: This signal is sent when device has been deleted from Head Unit to registered
     *   clients
     * param: outAddress (string)     : Bt address of phone
     * param: deviceName (string )    : device name
     */
    /// Sends a broadcast event for deviceDeleted.
    virtual void fireDeviceDeletedEvent(const std::string &_outAddress, const std::string &_deviceName) = 0;
    /**
     * description: This signal is used to update the pairing status to registered clients
     * param: outAddress (string)         : Bt address of phone
     * param: deviceName (string)         : device name
     * param: pairStatus (ePairingStatus) : Pairing status i.e. successful Or failure
     */
    /// Sends a broadcast event for bondingStatus.
    virtual void fireBondingStatusEvent(const std::string &_outAddress, const std::string &_deviceName, const ::v1::com::harman::btpres::BTPresTypes::ePairingStatus &_pairStatus) = 0;

    using CommonAPI::Stub<ConnectionManagerStubAdapter, ConnectionManagerStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<ConnectionManagerStubAdapter, ConnectionManagerStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<ConnectionManagerStubAdapter, ConnectionManagerStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef ConnectionManagerStubRemoteEvent RemoteEventType;
    typedef ConnectionManager StubInterface;
};

} // namespace btpres
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_BTPRES_Connection_Manager_STUB_HPP_
