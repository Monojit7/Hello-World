/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Thu Sep 22 00:23:23 IST 2016
*/
#ifndef V1_COM_HARMAN_CONNECTIVITY_Bt_Service_PROXY_BASE_HPP_
#define V1_COM_HARMAN_CONNECTIVITY_Bt_Service_PROXY_BASE_HPP_

#include <v1/com/harman/connectivity/BtService.hpp>


#include <com/harman/connectivity/btTypedefs.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace connectivity {

class BtServiceProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        bool
    > BluetoothStatusEvent;
    typedef CommonAPI::Event<
        std::string
    > OnOffStateEvent;
    typedef CommonAPI::Event<
        std::string
    > LocalDevAddrEvent;
    typedef CommonAPI::Event<
        std::string
    > PasskeyEvent;
    typedef CommonAPI::Event<
        std::string, int32_t
    > SignalQualityEvent;
    typedef CommonAPI::Event<
        std::string, bool, bool
    > VrModeEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string, std::string, std::string, std::string
    > NetworkOperatorEvent;
    typedef CommonAPI::Event<
        std::string, ::com::harman::connectivity::btTypedefs::stringList
    > SupportedFeaturesEvent;
    typedef CommonAPI::Event<
        ::com::harman::connectivity::btTypedefs::deviceSearchEntryList
    > DeviceSearchListEvent;
    typedef CommonAPI::Event<
        std::string, std::string, int32_t
    > StandardBondingRequestEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string
    > SecureSimpleBondingRequestEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string
    > ServiceConnectionRequestEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string, bool
    > ServiceConnectedEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string, std::string
    > ServiceDisconnectedEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string
    > DeviceDisconnectedEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string
    > ServiceConnectionErrorEvent;
    typedef CommonAPI::Event<
        std::string, ::com::harman::connectivity::btTypedefs::profileList
    > BondedDeviceProfileListChangedEvent;
    typedef CommonAPI::Event<
        std::string, ::com::harman::connectivity::btTypedefs::serviceList, bool
    > BondedDeviceServiceListChangedEvent;
    typedef CommonAPI::Event<
        std::string, std::string
    > DeviceDeletedEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string
    > NetworkIfUpEvent;
    typedef CommonAPI::Event<
        std::string
    > NetworkIfDownEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string
    > BondingStatusEvent;
    typedef CommonAPI::Event<
        std::string, std::string, int32_t, bool
    > IncomingCallInfoEvent;
    typedef CommonAPI::Event<
        std::string, bool, std::string, bool
    > HandsFreeModeEvent;
    typedef CommonAPI::Event<
        std::string, bool, std::string, bool
    > AudioStatusEvent;
    typedef CommonAPI::Event<
        std::string, int32_t
    > BatteryChargeEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string, std::string, std::string, std::string
    > NetworkOperatorChangedEvent;
    typedef CommonAPI::Event<
        std::string, std::string
    > NetworkRegistrationStateEvent;
    typedef CommonAPI::Event<
        std::string, ::com::harman::connectivity::btTypedefs::callstateInfoList
    > CallStatusEvent;
    typedef CommonAPI::Event<
        std::string, std::string, std::string, std::string
    > CallListUpdateEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> SetIgnitionStateAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const bool&, const int32_t&)> GetPropBluetoothStatusAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const int32_t&)> GetSignalQualityAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const int32_t&)> GetBatteryChargeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&)> GetPropLocalDeviceAddressAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&)> GetPropLocalDeviceNameAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const bool&, const int32_t&)> GetHfpConnectionStatusAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::com::harman::connectivity::btTypedefs::bondedDevList&, const int32_t&)> GetPropBondedDeviceListAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const ::com::harman::connectivity::btTypedefs::stringList&, const int32_t&)> GetSupportedFeaturesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const bool&, const int32_t&)> GetNetworkAvailabilityAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&)> GetNetworkRegistrationStateAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&)> GetSubscriberNumberAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::com::harman::connectivity::btTypedefs::lastConnectedDevList&, const int32_t&, const std::string&)> GetlastConnectedDeviceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const ::com::harman::connectivity::btTypedefs::callstateInfoList&, const int32_t&, const std::string&)> GetCallStateEventDataAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<std::string>&, const std::vector<std::string>&)> SppInterfacesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> EnterBondingModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> ExitBondingModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const std::string&)> ChangePriorityAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> StartDeviceSearchAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> StopDeviceSearchAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const std::string&)> SecureSimpleBondingReplyAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> DeleteDeviceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> DeleteAllDevicesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> StartServiceConnectionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&)> AllowServiceConnectionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const std::string&)> StartServiceDisconnectionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> ServiceConnectionReplyAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const std::string&)> GetBondedDeviceServiceListAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::com::harman::connectivity::btTypedefs::stringList&, const ::com::harman::connectivity::btTypedefs::stringList&, const ::com::harman::connectivity::btTypedefs::integerList&, const ::com::harman::connectivity::btTypedefs::integerList&, const ::com::harman::connectivity::btTypedefs::integerList&, const ::com::harman::connectivity::btTypedefs::stringList&, const int32_t&, const std::string&)> GetRadioStatusAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const std::string&)> RenameBondedDeviceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> RenameLocalDeviceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> StartAutoConnectAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> PauseAutoConnectAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> StopAutoConnectAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> SetAutoConnectServicesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> ClearAutoConnectServicesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const std::string&, const std::string&, const std::string&, const std::string&, const int32_t&, const std::string&)> GetNetworkOperatorInfoAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::com::harman::connectivity::btTypedefs::bondedDevList&, const int32_t&, const std::string&)> GetBondedDeviceListAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> SetBluetoothOnAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> SetBluetoothOffAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const ::com::harman::connectivity::btTypedefs::serviceList&, const int32_t&, const std::string&)> ServiceListQueryAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> SetPinAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const int32_t&, const std::string&)> DialAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const int32_t&, const std::string&)> ReDialAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const std::string&)> SendDtmfToneAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> AcceptIncomingCallAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> EndCallAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> EndActiveCallAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> EndAllCallsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> RejectIncomingCallAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> HoldActiveCallAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> ResumeHeldCallAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> ConferenceCallAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> SelectCallAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const std::string&)> SetHfModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> SetSSPDebugModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const std::string&)> SetVRModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const int32_t&, const std::string&)> SetEyesFreeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const std::string&)> ClearTransferTimeoutAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const int32_t&, const std::string&)> SwapCallsAsyncCallback;


    virtual BluetoothStatusEvent& getBluetoothStatusEvent() = 0;
    virtual OnOffStateEvent& getOnOffStateEvent() = 0;
    virtual LocalDevAddrEvent& getLocalDevAddrEvent() = 0;
    virtual PasskeyEvent& getPasskeyEvent() = 0;
    virtual SignalQualityEvent& getSignalQualityEvent() = 0;
    virtual VrModeEvent& getVrModeEvent() = 0;
    virtual NetworkOperatorEvent& getNetworkOperatorEvent() = 0;
    virtual SupportedFeaturesEvent& getSupportedFeaturesEvent() = 0;
    virtual DeviceSearchListEvent& getDeviceSearchListEvent() = 0;
    virtual StandardBondingRequestEvent& getStandardBondingRequestEvent() = 0;
    virtual SecureSimpleBondingRequestEvent& getSecureSimpleBondingRequestEvent() = 0;
    virtual ServiceConnectionRequestEvent& getServiceConnectionRequestEvent() = 0;
    virtual ServiceConnectedEvent& getServiceConnectedEvent() = 0;
    virtual ServiceDisconnectedEvent& getServiceDisconnectedEvent() = 0;
    virtual DeviceDisconnectedEvent& getDeviceDisconnectedEvent() = 0;
    virtual ServiceConnectionErrorEvent& getServiceConnectionErrorEvent() = 0;
    virtual BondedDeviceProfileListChangedEvent& getBondedDeviceProfileListChangedEvent() = 0;
    virtual BondedDeviceServiceListChangedEvent& getBondedDeviceServiceListChangedEvent() = 0;
    virtual DeviceDeletedEvent& getDeviceDeletedEvent() = 0;
    virtual NetworkIfUpEvent& getNetworkIfUpEvent() = 0;
    virtual NetworkIfDownEvent& getNetworkIfDownEvent() = 0;
    virtual BondingStatusEvent& getBondingStatusEvent() = 0;
    virtual IncomingCallInfoEvent& getIncomingCallInfoEvent() = 0;
    virtual HandsFreeModeEvent& getHandsFreeModeEvent() = 0;
    virtual AudioStatusEvent& getAudioStatusEvent() = 0;
    virtual BatteryChargeEvent& getBatteryChargeEvent() = 0;
    virtual NetworkOperatorChangedEvent& getNetworkOperatorChangedEvent() = 0;
    virtual NetworkRegistrationStateEvent& getNetworkRegistrationStateEvent() = 0;
    virtual CallStatusEvent& getCallStatusEvent() = 0;
    virtual CallListUpdateEvent& getCallListUpdateEvent() = 0;

    virtual void setIgnitionState(const bool &_ignitionState, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setIgnitionStateAsync(const bool &_ignitionState, SetIgnitionStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getPropBluetoothStatus(CommonAPI::CallStatus &_internalCallStatus, bool &_Status, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getPropBluetoothStatusAsync(GetPropBluetoothStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getSignalQuality(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_signalQual, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSignalQualityAsync(const std::string &_inAddress, GetSignalQualityAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getBatteryCharge(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_batteryCharge, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getBatteryChargeAsync(const std::string &_inAddress, GetBatteryChargeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getPropLocalDeviceAddress(CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getPropLocalDeviceAddressAsync(GetPropLocalDeviceAddressAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getPropLocalDeviceName(CommonAPI::CallStatus &_internalCallStatus, std::string &_name, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getPropLocalDeviceNameAsync(GetPropLocalDeviceNameAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getHfpConnectionStatus(CommonAPI::CallStatus &_internalCallStatus, bool &_Status, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getHfpConnectionStatusAsync(GetHfpConnectionStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getPropBondedDeviceList(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::bondedDevList &_list, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getPropBondedDeviceListAsync(GetPropBondedDeviceListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getSupportedFeatures(const std::string &_inAddrress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, ::com::harman::connectivity::btTypedefs::stringList &_featureList, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSupportedFeaturesAsync(const std::string &_inAddrress, GetSupportedFeaturesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getNetworkAvailability(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, bool &_netwrkStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getNetworkAvailabilityAsync(const std::string &_inAddress, GetNetworkAvailabilityAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getNetworkRegistrationState(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_regState, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getNetworkRegistrationStateAsync(const std::string &_inAddress, GetNetworkRegistrationStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getSubscriberNumber(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_subscrbNum, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSubscriberNumberAsync(const std::string &_inAddress, GetSubscriberNumberAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getlastConnectedDevice(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::lastConnectedDevList &_list, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getlastConnectedDeviceAsync(GetlastConnectedDeviceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getCallStateEventData(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, ::com::harman::connectivity::btTypedefs::callstateInfoList &_list, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getCallStateEventDataAsync(const std::string &_inAddress, GetCallStateEventDataAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void sppInterfaces(CommonAPI::CallStatus &_internalCallStatus, std::vector<std::string> &_devA, std::vector<std::string> &_devB, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> sppInterfacesAsync(SppInterfacesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void enterBondingMode(const uint32_t &_timeout, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> enterBondingModeAsync(const uint32_t &_timeout, EnterBondingModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void exitBondingMode(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> exitBondingModeAsync(ExitBondingModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void changePriority(const std::string &_inAddress, const std::string &_service, const int32_t &_priority, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> changePriorityAsync(const std::string &_inAddress, const std::string &_service, const int32_t &_priority, ChangePriorityAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void startDeviceSearch(const uint32_t &_maxDevice, const uint32_t &_timeout, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startDeviceSearchAsync(const uint32_t &_maxDevice, const uint32_t &_timeout, StartDeviceSearchAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void stopDeviceSearch(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> stopDeviceSearchAsync(StopDeviceSearchAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void secureSimpleBondingReply(const std::string &_inAddress, const bool &_accept, const bool &_trusted, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> secureSimpleBondingReplyAsync(const std::string &_inAddress, const bool &_accept, const bool &_trusted, SecureSimpleBondingReplyAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void deleteDevice(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> deleteDeviceAsync(const std::string &_inAddress, DeleteDeviceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void deleteAllDevices(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> deleteAllDevicesAsync(DeleteAllDevicesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void startServiceConnection(const std::string &_inAddress, const std::string &_service, const std::string &_instanceName, const std::string &_replaceAddr, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_devName, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startServiceConnectionAsync(const std::string &_inAddress, const std::string &_service, const std::string &_instanceName, const std::string &_replaceAddr, StartServiceConnectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void allowServiceConnection(const std::string &_inAddress, const std::string &_service, const bool &_allow, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> allowServiceConnectionAsync(const std::string &_inAddress, const std::string &_service, const bool &_allow, AllowServiceConnectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void startServiceDisconnection(const std::string &_inAddress, const std::string &_service, const bool &_internalReq, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startServiceDisconnectionAsync(const std::string &_inAddress, const std::string &_service, const bool &_internalReq, StartServiceDisconnectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void serviceConnectionReply(const std::string &_inAddress, const std::string &_service, const bool &_accept, const std::string &_instanceName, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_devName, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> serviceConnectionReplyAsync(const std::string &_inAddress, const std::string &_service, const bool &_accept, const std::string &_instanceName, ServiceConnectionReplyAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getBondedDeviceServiceList(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getBondedDeviceServiceListAsync(const std::string &_inAddress, GetBondedDeviceServiceListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getRadioStatus(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::stringList &_addrList, ::com::harman::connectivity::btTypedefs::stringList &_connRoleList, ::com::harman::connectivity::btTypedefs::integerList &_linkQualitylist, ::com::harman::connectivity::btTypedefs::integerList &_rssiList, ::com::harman::connectivity::btTypedefs::integerList &_txPowerList, ::com::harman::connectivity::btTypedefs::stringList &_modeTypeList, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getRadioStatusAsync(GetRadioStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void renameBondedDevice(const std::string &_inAddress, const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> renameBondedDeviceAsync(const std::string &_inAddress, const std::string &_name, RenameBondedDeviceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void renameLocalDevice(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> renameLocalDeviceAsync(const std::string &_name, RenameLocalDeviceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void startAutoConnect(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startAutoConnectAsync(StartAutoConnectAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void pauseAutoConnect(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> pauseAutoConnectAsync(PauseAutoConnectAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void stopAutoConnect(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> stopAutoConnectAsync(StopAutoConnectAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void setAutoConnectServices(const std::string &_serviceName, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setAutoConnectServicesAsync(const std::string &_serviceName, SetAutoConnectServicesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void clearAutoConnectServices(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> clearAutoConnectServicesAsync(ClearAutoConnectServicesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getNetworkOperatorInfo(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_code, std::string &_longName, std::string &_shortName, std::string &_mode, std::string &_accTech, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getNetworkOperatorInfoAsync(const std::string &_inAddress, GetNetworkOperatorInfoAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getBondedDeviceList(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::bondedDevList &_list, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getBondedDeviceListAsync(GetBondedDeviceListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void setBluetoothOn(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setBluetoothOnAsync(SetBluetoothOnAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void setBluetoothOff(const bool &_doNotStore, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setBluetoothOffAsync(const bool &_doNotStore, SetBluetoothOffAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void serviceListQuery(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, ::com::harman::connectivity::btTypedefs::serviceList &_list, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> serviceListQueryAsync(const std::string &_inAddress, ServiceListQueryAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void setPin(const std::string &_passkey, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setPinAsync(const std::string &_passkey, SetPinAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void dial(const std::string &_inAddress, const std::string &_num, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_callId, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> dialAsync(const std::string &_inAddress, const std::string &_num, DialAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void reDial(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_callId, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> reDialAsync(const std::string &_inAddress, ReDialAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void sendDtmfTone(const std::string &_inAddress, const std::string &_dtmfTone, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> sendDtmfToneAsync(const std::string &_inAddress, const std::string &_dtmfTone, SendDtmfToneAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void acceptIncomingCall(const std::string &_inAddress, const bool &_transfer, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> acceptIncomingCallAsync(const std::string &_inAddress, const bool &_transfer, AcceptIncomingCallAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void endCall(const std::string &_inAddress, const int32_t &_callId, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> endCallAsync(const std::string &_inAddress, const int32_t &_callId, EndCallAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void endActiveCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> endActiveCallAsync(const std::string &_inAddress, EndActiveCallAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void endAllCalls(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> endAllCallsAsync(const std::string &_inAddress, EndAllCallsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void rejectIncomingCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> rejectIncomingCallAsync(const std::string &_inAddress, RejectIncomingCallAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void holdActiveCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> holdActiveCallAsync(const std::string &_inAddress, HoldActiveCallAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void resumeHeldCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> resumeHeldCallAsync(const std::string &_inAddress, ResumeHeldCallAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void conferenceCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> conferenceCallAsync(const std::string &_inAddress, ConferenceCallAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void selectCall(const std::string &_inAddress, const int32_t &_callId, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> selectCallAsync(const std::string &_inAddress, const int32_t &_callId, SelectCallAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void setHfMode(const std::string &_inAddress, const bool &_hfMode, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setHfModeAsync(const std::string &_inAddress, const bool &_hfMode, SetHfModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void setSSPDebugMode(const int32_t &_debugMode, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setSSPDebugModeAsync(const int32_t &_debugMode, SetSSPDebugModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void setVRMode(const std::string &_inAddress, const bool &_mode, CommonAPI::CallStatus &_internalCallStatus, std::string &_OutAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setVRModeAsync(const std::string &_inAddress, const bool &_mode, SetVRModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void setEyesFree(const std::string &_inAddress, const bool &_toSet, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setEyesFreeAsync(const std::string &_inAddress, const bool &_toSet, SetEyesFreeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void clearTransferTimeout(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> clearTransferTimeoutAsync(ClearTransferTimeoutAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void swapCalls(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> swapCallsAsync(const std::string &_inAddress, SwapCallsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace connectivity
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_CONNECTIVITY_Bt_Service_PROXY_BASE_HPP_
