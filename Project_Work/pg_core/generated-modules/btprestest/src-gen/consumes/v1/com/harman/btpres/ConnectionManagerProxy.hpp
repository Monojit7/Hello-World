/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Thu Sep 22 00:23:23 IST 2016
*/
#ifndef V1_COM_HARMAN_BTPRES_Connection_Manager_PROXY_HPP_
#define V1_COM_HARMAN_BTPRES_Connection_Manager_PROXY_HPP_

#include <v1/com/harman/btpres/ConnectionManagerProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace btpres {

template <typename ... _AttributeExtensions>
class ConnectionManagerProxy
    : virtual public ConnectionManager, 
      virtual public ConnectionManagerProxyBase,
      virtual public _AttributeExtensions... {
public:
    ConnectionManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~ConnectionManagerProxy();

    typedef ConnectionManager InterfaceType;


    /**
     * description: It will reflect the current bluetooth status to registered clients
     */
    /**
     * Returns the wrapper class that provides access to the attribute btState.
     */
    virtual BtStateAttribute& getBtStateAttribute() {
        return delegate_->getBtStateAttribute();
    }
    /**
     * description: It will reflect local device address to registered clients
     */
    /**
     * Returns the wrapper class that provides access to the attribute localDevAddr.
     */
    virtual LocalDevAddrAttribute& getLocalDevAddrAttribute() {
        return delegate_->getLocalDevAddrAttribute();
    }
    /**
     * description: It will reflect local device name to registered clients
     */
    /**
     * Returns the wrapper class that provides access to the attribute localDevName.
     */
    virtual LocalDevNameAttribute& getLocalDevNameAttribute() {
        return delegate_->getLocalDevNameAttribute();
    }
    /**
     * description: It will broadcast stored pass key to registered clients
     */
    /**
     * Returns the wrapper class that provides access to the attribute passKeyPin.
     */
    virtual PassKeyPinAttribute& getPassKeyPinAttribute() {
        return delegate_->getPassKeyPinAttribute();
    }
    /**
     * description: It will broadcast device search status to registered client
     */
    /**
     * Returns the wrapper class that provides access to the attribute deviceSearchStatus.
     */
    virtual DeviceSearchStatusAttribute& getDeviceSearchStatusAttribute() {
        return delegate_->getDeviceSearchStatusAttribute();
    }
    /**
     * description: It will broadcast discoverability status to registered clients
     */
    /**
     * Returns the wrapper class that provides access to the attribute discoverableStatus.
     */
    virtual DiscoverableStatusAttribute& getDiscoverableStatusAttribute() {
        return delegate_->getDiscoverableStatusAttribute();
    }
    /**
     * description: It will broadcast discoverability timeout to registered clients
     */
    /**
     * Returns the wrapper class that provides access to the attribute discoveryTimeout.
     */
    virtual DiscoveryTimeoutAttribute& getDiscoveryTimeoutAttribute() {
        return delegate_->getDiscoveryTimeoutAttribute();
    }
    /**
     * description: It will broadcast device search results to registered clients
     */
    /**
     * Returns the wrapper class that provides access to the attribute devSearchResults.
     */
    virtual DevSearchResultsAttribute& getDevSearchResultsAttribute() {
        return delegate_->getDevSearchResultsAttribute();
    }
    /**
     * description: It will broadcast bonded device list to registered clients
     */
    /**
     * Returns the wrapper class that provides access to the attribute devList.
     */
    virtual DevListAttribute& getDevListAttribute() {
        return delegate_->getDevListAttribute();
    }
    /**
     * description: It will broadcast network status to registered clients
     */
    /**
     * Returns the wrapper class that provides access to the attribute netIfStatus.
     */
    virtual NetIfStatusAttribute& getNetIfStatusAttribute() {
        return delegate_->getNetIfStatusAttribute();
    }
    /**
     * description: It will braodcast unstable device info to registered clients
     */
    /**
     * Returns the wrapper class that provides access to the attribute unstableDevs.
     */
    virtual UnstableDevsAttribute& getUnstableDevsAttribute() {
        return delegate_->getUnstableDevsAttribute();
    }
    /**
     * description: It will braodcast primary device address
     */
    /**
     * Returns the wrapper class that provides access to the attribute primaryDevice.
     */
    virtual PrimaryDeviceAttribute& getPrimaryDeviceAttribute() {
        return delegate_->getPrimaryDeviceAttribute();
    }

    /**
     * description: It will broadcast standard bonding Request to registered clients
     * param: outAddress (string)     : Bt address of phone
     * param: deviceName (string)     : Device name
     * param: type (eBondingType)     : Bonding type
     * param: pin (string) : pass key pin
     */
    /**
     * Returns the wrapper class that provides access to the broadcast bondingRequest.
     */
    virtual BondingRequestEvent& getBondingRequestEvent() {
        return delegate_->getBondingRequestEvent();
    }
    /**
     * description: It will broadcast service connection request to registered clients
     * param: outAddress (string)         : Bt address of phone
     * param: name (string)               : Device name
     * param: service (eSupportedProfile) : supported profile list
     */
    /**
     * Returns the wrapper class that provides access to the broadcast serviceConnectionRequest.
     */
    virtual ServiceConnectionRequestEvent& getServiceConnectionRequestEvent() {
        return delegate_->getServiceConnectionRequestEvent();
    }
    /**
     * description: It will broadcast service connection status signal to registered clients
     * param: outAddress (string)         : Bt address of phone
     * param: name (string)               : Device name
     * param: service (eSupportedProfile) : supported profile list
     * param: status (eConnectionStatus)  : Connected or disconnected status
     * param: reason (eServiceConnectDisconnectReason) : reason for connection or
     *   disconnection
     */
    /**
     * Returns the wrapper class that provides access to the broadcast serviceConnectionStatus.
     */
    virtual ServiceConnectionStatusEvent& getServiceConnectionStatusEvent() {
        return delegate_->getServiceConnectionStatusEvent();
    }
    /**
     * description: This signal is sent when device has been deleted from Head Unit to registered
     *   clients
     * param: outAddress (string)     : Bt address of phone
     * param: deviceName (string )    : device name
     */
    /**
     * Returns the wrapper class that provides access to the broadcast deviceDeleted.
     */
    virtual DeviceDeletedEvent& getDeviceDeletedEvent() {
        return delegate_->getDeviceDeletedEvent();
    }
    /**
     * description: This signal is used to update the pairing status to registered clients
     * param: outAddress (string)         : Bt address of phone
     * param: deviceName (string)         : device name
     * param: pairStatus (ePairingStatus) : Pairing status i.e. successful Or failure
     */
    /**
     * Returns the wrapper class that provides access to the broadcast bondingStatus.
     */
    virtual BondingStatusEvent& getBondingStatusEvent() {
        return delegate_->getBondingStatusEvent();
    }

    /**
     * description: Used to start device search on head unit
     * param: maxDevice (UInt32)       : max limit for found devices
     * param: timeout (UInt32)         : time limit for device search operation
    
           
     *   returns: errorCode (eErrorType) : error code
     * Calls startDeviceSearch with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void startDeviceSearch(const uint32_t &_maxDevice, const uint32_t &_timeout, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls startDeviceSearch with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> startDeviceSearchAsync(const uint32_t &_maxDevice, const uint32_t &_timeout, StartDeviceSearchAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Used to stop device search on head unit
     * param: none
    
            returns: error code (eErrorType) : error code
     * Calls stopDeviceSearch with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void stopDeviceSearch(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls stopDeviceSearch with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> stopDeviceSearchAsync(StopDeviceSearchAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Used to send secure Bonding reply
     * param: inAddress (string)       : phone BT address
     * param: accept (boolean)         : accepting authentication request
     * param: trusted (boolean)        : making device trusted means service won't send
     *   connection request for each connect attempt
     * param: type (eBondingType)      : Bonding type, standard or secure bonding
    
           
     *   returns: errorCode (eErrorType) : error code
     * Calls bondingReply with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void bondingReply(const std::string &_inAddress, const bool &_accept, const bool &_trusted, const ::v1::com::harman::btpres::BTPresTypes::eBondingType &_type, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls bondingReply with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> bondingReplyAsync(const std::string &_inAddress, const bool &_accept, const bool &_trusted, const ::v1::com::harman::btpres::BTPresTypes::eBondingType &_type, BondingReplyAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Used to delete device from paired device list
     * param: inAddress (string)      : phone BT address
    
            returns: errorCode
     *   (eErrorType): error code
     * Calls deleteDevice with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void deleteDevice(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls deleteDevice with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> deleteDeviceAsync(const std::string &_inAddress, DeleteDeviceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Used to delete all device in paired device list
     * param: none
    
            returns: errorCode (eErrorType) : error code
     * Calls deleteAllDevices with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void deleteAllDevices(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls deleteAllDevices with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> deleteAllDevicesAsync(DeleteAllDevicesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Used to initate profile connection with device
     * param: inAddress (string)       : phone BT address
     * param: service (eSupportedProfile) : profile name
     * param: instanceName (string)    : containing the phone instance
     * param: replaceAddr (string)     : containing the replacement address for which the
     *   connection will be replaced
    
            returns: errorCode (eErrorType) : error
     *   code
     * Calls startServiceConnection with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void startServiceConnection(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const std::string &_instanceName, const std::string &_replaceAddr, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls startServiceConnection with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> startServiceConnectionAsync(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const std::string &_instanceName, const std::string &_replaceAddr, StartServiceConnectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Used to allows the existance of the service connection to this device and
     *   service.
     * param: inAddress (string)           : phone BT address
     * param: service (eSupportedProfile)  : profile name
     * param: allow (Boolean)              : containing the value true for allow, or false
     *   for reject
    
            returns: errorCode (eErrorType)      : error code
     * Calls allowServiceConnection with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void allowServiceConnection(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const bool &_allow, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls allowServiceConnection with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> allowServiceConnectionAsync(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const bool &_allow, AllowServiceConnectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Used to initate the disconnection with connected service i.e. HFP and A2DP
     * param: inAddress (string)                  : phone BT address
     * param: service (eSupportedProfile)         : profile name
    
            returns: errorCode
     *   error code (eErrorType)  : error code
     * Calls startServiceDisconnection with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void startServiceDisconnection(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls startServiceDisconnection with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> startServiceDisconnectionAsync(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, StartServiceDisconnectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method should be called by clients in order to reply to the incoming
     *   service 
                           connection request from a remote device as
     *   indicated by the signal 'serviceConnectionRequest'. 
                          
     *   The reply can be to accept or reject incoming service connection request.
     * param: inAddress (string)              : phone BT address
     * param: service (eSupportedProfile)     : profile name
     * param: accept (boolean)                : containing the value true for allow, or false
     *   for reject
     * param: instanceName (string)           : containing the instance name of the device
    
     
     *         returns: errorCode (eErrorType)         : error code
     * Calls serviceConnectionReply with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void serviceConnectionReply(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const bool &_accept, const std::string &_instanceName, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls serviceConnectionReply with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> serviceConnectionReplyAsync(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const bool &_accept, const std::string &_instanceName, ServiceConnectionReplyAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Used to initiate the reconnection to previously connected device
     * param: None
    
            returns: errorCode error code (eErrorType) : error code
     * Calls startReconnect with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void startReconnect(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls startReconnect with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> startReconnectAsync(StartReconnectAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method should be called to get oldest connected device
     * param: None
    
            returns: oldestDevInfo (oldestDevInfo)     : Oldest device name
     *   and address
            returns: errorCode error code (eErrorType) : error code
     * Calls getOldestConnectedDev with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getOldestConnectedDev(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::deviceInfo &_oldestDevInfo, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getOldestConnectedDev with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getOldestConnectedDevAsync(GetOldestConnectedDevAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method used to change name of bonded device.
     * param: inAddress  (string)     : contains the BD address.
     * param: name (string)           : Device name
    
            returns: errorCode(eErrorType) 
     *   : error code
     * Calls renameBondedDevice with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void renameBondedDevice(const std::string &_inAddress, const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls renameBondedDevice with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> renameBondedDeviceAsync(const std::string &_inAddress, const std::string &_name, RenameBondedDeviceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method used to change local name of head unit.
     * param: name (string)           : Device name
    
            returns: errorCode(eErrorType) 
     *   : error code
     * Calls renameLocalDevice with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void renameLocalDevice(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls renameLocalDevice with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> renameLocalDeviceAsync(const std::string &_name, RenameLocalDeviceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Used to set bluetooth on or off
     * param: status (boolean)       : set true or false
    
            returns: error
     *   code(eErrorType) : error code
     * Calls setBluetoothStatus with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setBluetoothStatus(const bool &_status, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setBluetoothStatus with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setBluetoothStatusAsync(const bool &_status, SetBluetoothStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Used to enable or disable discoverable mode
     * param: enabled (boolean)       : set true or false
    
            returns: errorCode
     *   (eErrorType) : error code
     * Calls setDiscoverableMode with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setDiscoverableMode(const bool &_enabled, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setDiscoverableMode with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setDiscoverableModeAsync(const bool &_enabled, SetDiscoverableModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method used to pin information for head unit.
     * param: passkey (string)          : set the default pin for legacy devices
    
           
     *   returns:  error code (eErrorType) : error code
     * Calls setPin with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setPin(const std::string &_passkey, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setPin with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setPinAsync(const std::string &_passkey, SetPinAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: It will set a device as primary
     * param: inAddress  (string)     : contains the BD address.
    
            returns:  error
     *   code (eErrorType) : error code
     * Calls setPrimaryDevice with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setPrimaryDevice(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setPrimaryDevice with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setPrimaryDeviceAsync(const std::string &_inAddress, SetPrimaryDeviceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<ConnectionManagerProxyBase> delegate_;
};

typedef ConnectionManagerProxy<> ConnectionManagerProxyDefault;

namespace ConnectionManagerExtensions {
    /**
     * description: It will reflect the current bluetooth status to registered clients
     */
    template <template <typename > class _ExtensionType>
    class BtStateAttributeExtension {
     public:
        typedef _ExtensionType<ConnectionManagerProxyBase::BtStateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ConnectionManagerProxyBase::BtStateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        BtStateAttributeExtension() {}
    #endif
    
        BtStateAttributeExtension(ConnectionManagerProxyBase& proxy): attributeExtension_(proxy.getBtStateAttribute()) {
        }
    
        inline extension_type& getBtStateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: It will reflect local device address to registered clients
     */
    template <template <typename > class _ExtensionType>
    class LocalDevAddrAttributeExtension {
     public:
        typedef _ExtensionType<ConnectionManagerProxyBase::LocalDevAddrAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ConnectionManagerProxyBase::LocalDevAddrAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        LocalDevAddrAttributeExtension() {}
    #endif
    
        LocalDevAddrAttributeExtension(ConnectionManagerProxyBase& proxy): attributeExtension_(proxy.getLocalDevAddrAttribute()) {
        }
    
        inline extension_type& getLocalDevAddrAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: It will reflect local device name to registered clients
     */
    template <template <typename > class _ExtensionType>
    class LocalDevNameAttributeExtension {
     public:
        typedef _ExtensionType<ConnectionManagerProxyBase::LocalDevNameAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ConnectionManagerProxyBase::LocalDevNameAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        LocalDevNameAttributeExtension() {}
    #endif
    
        LocalDevNameAttributeExtension(ConnectionManagerProxyBase& proxy): attributeExtension_(proxy.getLocalDevNameAttribute()) {
        }
    
        inline extension_type& getLocalDevNameAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: It will broadcast stored pass key to registered clients
     */
    template <template <typename > class _ExtensionType>
    class PassKeyPinAttributeExtension {
     public:
        typedef _ExtensionType<ConnectionManagerProxyBase::PassKeyPinAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ConnectionManagerProxyBase::PassKeyPinAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PassKeyPinAttributeExtension() {}
    #endif
    
        PassKeyPinAttributeExtension(ConnectionManagerProxyBase& proxy): attributeExtension_(proxy.getPassKeyPinAttribute()) {
        }
    
        inline extension_type& getPassKeyPinAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: It will broadcast device search status to registered client
     */
    template <template <typename > class _ExtensionType>
    class DeviceSearchStatusAttributeExtension {
     public:
        typedef _ExtensionType<ConnectionManagerProxyBase::DeviceSearchStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ConnectionManagerProxyBase::DeviceSearchStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DeviceSearchStatusAttributeExtension() {}
    #endif
    
        DeviceSearchStatusAttributeExtension(ConnectionManagerProxyBase& proxy): attributeExtension_(proxy.getDeviceSearchStatusAttribute()) {
        }
    
        inline extension_type& getDeviceSearchStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: It will broadcast discoverability status to registered clients
     */
    template <template <typename > class _ExtensionType>
    class DiscoverableStatusAttributeExtension {
     public:
        typedef _ExtensionType<ConnectionManagerProxyBase::DiscoverableStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ConnectionManagerProxyBase::DiscoverableStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DiscoverableStatusAttributeExtension() {}
    #endif
    
        DiscoverableStatusAttributeExtension(ConnectionManagerProxyBase& proxy): attributeExtension_(proxy.getDiscoverableStatusAttribute()) {
        }
    
        inline extension_type& getDiscoverableStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: It will broadcast discoverability timeout to registered clients
     */
    template <template <typename > class _ExtensionType>
    class DiscoveryTimeoutAttributeExtension {
     public:
        typedef _ExtensionType<ConnectionManagerProxyBase::DiscoveryTimeoutAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ConnectionManagerProxyBase::DiscoveryTimeoutAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DiscoveryTimeoutAttributeExtension() {}
    #endif
    
        DiscoveryTimeoutAttributeExtension(ConnectionManagerProxyBase& proxy): attributeExtension_(proxy.getDiscoveryTimeoutAttribute()) {
        }
    
        inline extension_type& getDiscoveryTimeoutAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: It will broadcast device search results to registered clients
     */
    template <template <typename > class _ExtensionType>
    class DevSearchResultsAttributeExtension {
     public:
        typedef _ExtensionType<ConnectionManagerProxyBase::DevSearchResultsAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ConnectionManagerProxyBase::DevSearchResultsAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DevSearchResultsAttributeExtension() {}
    #endif
    
        DevSearchResultsAttributeExtension(ConnectionManagerProxyBase& proxy): attributeExtension_(proxy.getDevSearchResultsAttribute()) {
        }
    
        inline extension_type& getDevSearchResultsAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: It will broadcast bonded device list to registered clients
     */
    template <template <typename > class _ExtensionType>
    class DevListAttributeExtension {
     public:
        typedef _ExtensionType<ConnectionManagerProxyBase::DevListAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ConnectionManagerProxyBase::DevListAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DevListAttributeExtension() {}
    #endif
    
        DevListAttributeExtension(ConnectionManagerProxyBase& proxy): attributeExtension_(proxy.getDevListAttribute()) {
        }
    
        inline extension_type& getDevListAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: It will broadcast network status to registered clients
     */
    template <template <typename > class _ExtensionType>
    class NetIfStatusAttributeExtension {
     public:
        typedef _ExtensionType<ConnectionManagerProxyBase::NetIfStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ConnectionManagerProxyBase::NetIfStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        NetIfStatusAttributeExtension() {}
    #endif
    
        NetIfStatusAttributeExtension(ConnectionManagerProxyBase& proxy): attributeExtension_(proxy.getNetIfStatusAttribute()) {
        }
    
        inline extension_type& getNetIfStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: It will braodcast unstable device info to registered clients
     */
    template <template <typename > class _ExtensionType>
    class UnstableDevsAttributeExtension {
     public:
        typedef _ExtensionType<ConnectionManagerProxyBase::UnstableDevsAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ConnectionManagerProxyBase::UnstableDevsAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        UnstableDevsAttributeExtension() {}
    #endif
    
        UnstableDevsAttributeExtension(ConnectionManagerProxyBase& proxy): attributeExtension_(proxy.getUnstableDevsAttribute()) {
        }
    
        inline extension_type& getUnstableDevsAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: It will braodcast primary device address
     */
    template <template <typename > class _ExtensionType>
    class PrimaryDeviceAttributeExtension {
     public:
        typedef _ExtensionType<ConnectionManagerProxyBase::PrimaryDeviceAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ConnectionManagerProxyBase::PrimaryDeviceAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PrimaryDeviceAttributeExtension() {}
    #endif
    
        PrimaryDeviceAttributeExtension(ConnectionManagerProxyBase& proxy): attributeExtension_(proxy.getPrimaryDeviceAttribute()) {
        }
    
        inline extension_type& getPrimaryDeviceAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace ConnectionManagerExtensions

//
// ConnectionManagerProxy Implementation
//
template <typename ... _AttributeExtensions>
ConnectionManagerProxy<_AttributeExtensions...>::ConnectionManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<ConnectionManagerProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<ConnectionManagerProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
ConnectionManagerProxy<_AttributeExtensions...>::~ConnectionManagerProxy() {
}

/**
 * description: Used to start device search on head unit
 * param: maxDevice (UInt32)       : max limit for found devices
 * param: timeout (UInt32)         : time limit for device search operation

       
 *   returns: errorCode (eErrorType) : error code
 */
template <typename ... _AttributeExtensions>
void ConnectionManagerProxy<_AttributeExtensions...>::startDeviceSearch(const uint32_t &_maxDevice, const uint32_t &_timeout, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    delegate_->startDeviceSearch(_maxDevice, _timeout, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConnectionManagerProxy<_AttributeExtensions...>::startDeviceSearchAsync(const uint32_t &_maxDevice, const uint32_t &_timeout, StartDeviceSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->startDeviceSearchAsync(_maxDevice, _timeout, _callback, _info);
}
/**
 * description: Used to stop device search on head unit
 * param: none

        returns: error code (eErrorType) : error code
 */
template <typename ... _AttributeExtensions>
void ConnectionManagerProxy<_AttributeExtensions...>::stopDeviceSearch(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    delegate_->stopDeviceSearch(_internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConnectionManagerProxy<_AttributeExtensions...>::stopDeviceSearchAsync(StopDeviceSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->stopDeviceSearchAsync(_callback, _info);
}
/**
 * description: Used to send secure Bonding reply
 * param: inAddress (string)       : phone BT address
 * param: accept (boolean)         : accepting authentication request
 * param: trusted (boolean)        : making device trusted means service won't send
 *   connection request for each connect attempt
 * param: type (eBondingType)      : Bonding type, standard or secure bonding

       
 *   returns: errorCode (eErrorType) : error code
 */
template <typename ... _AttributeExtensions>
void ConnectionManagerProxy<_AttributeExtensions...>::bondingReply(const std::string &_inAddress, const bool &_accept, const bool &_trusted, const ::v1::com::harman::btpres::BTPresTypes::eBondingType &_type, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    if (!_type.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->bondingReply(_inAddress, _accept, _trusted, _type, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConnectionManagerProxy<_AttributeExtensions...>::bondingReplyAsync(const std::string &_inAddress, const bool &_accept, const bool &_trusted, const ::v1::com::harman::btpres::BTPresTypes::eBondingType &_type, BondingReplyAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_type.validate()) {
        ::v1::com::harman::btpres::BTPresTypes::eErrorType errorCode = ::v1::com::harman::btpres::BTPresTypes::eErrorType::ERROR_TYPE_SUCCESS;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, errorCode);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->bondingReplyAsync(_inAddress, _accept, _trusted, _type, _callback, _info);
}
/**
 * description: Used to delete device from paired device list
 * param: inAddress (string)      : phone BT address

        returns: errorCode
 *   (eErrorType): error code
 */
template <typename ... _AttributeExtensions>
void ConnectionManagerProxy<_AttributeExtensions...>::deleteDevice(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    delegate_->deleteDevice(_inAddress, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConnectionManagerProxy<_AttributeExtensions...>::deleteDeviceAsync(const std::string &_inAddress, DeleteDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->deleteDeviceAsync(_inAddress, _callback, _info);
}
/**
 * description: Used to delete all device in paired device list
 * param: none

        returns: errorCode (eErrorType) : error code
 */
template <typename ... _AttributeExtensions>
void ConnectionManagerProxy<_AttributeExtensions...>::deleteAllDevices(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    delegate_->deleteAllDevices(_internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConnectionManagerProxy<_AttributeExtensions...>::deleteAllDevicesAsync(DeleteAllDevicesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->deleteAllDevicesAsync(_callback, _info);
}
/**
 * description: Used to initate profile connection with device
 * param: inAddress (string)       : phone BT address
 * param: service (eSupportedProfile) : profile name
 * param: instanceName (string)    : containing the phone instance
 * param: replaceAddr (string)     : containing the replacement address for which the
 *   connection will be replaced

        returns: errorCode (eErrorType) : error
 *   code
 */
template <typename ... _AttributeExtensions>
void ConnectionManagerProxy<_AttributeExtensions...>::startServiceConnection(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const std::string &_instanceName, const std::string &_replaceAddr, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    if (!_service.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->startServiceConnection(_inAddress, _service, _instanceName, _replaceAddr, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConnectionManagerProxy<_AttributeExtensions...>::startServiceConnectionAsync(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const std::string &_instanceName, const std::string &_replaceAddr, StartServiceConnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_service.validate()) {
        ::v1::com::harman::btpres::BTPresTypes::eErrorType errorCode = ::v1::com::harman::btpres::BTPresTypes::eErrorType::ERROR_TYPE_SUCCESS;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, errorCode);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->startServiceConnectionAsync(_inAddress, _service, _instanceName, _replaceAddr, _callback, _info);
}
/**
 * description: Used to allows the existance of the service connection to this device and
 *   service.
 * param: inAddress (string)           : phone BT address
 * param: service (eSupportedProfile)  : profile name
 * param: allow (Boolean)              : containing the value true for allow, or false
 *   for reject

        returns: errorCode (eErrorType)      : error code
 */
template <typename ... _AttributeExtensions>
void ConnectionManagerProxy<_AttributeExtensions...>::allowServiceConnection(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const bool &_allow, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    if (!_service.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->allowServiceConnection(_inAddress, _service, _allow, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConnectionManagerProxy<_AttributeExtensions...>::allowServiceConnectionAsync(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const bool &_allow, AllowServiceConnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_service.validate()) {
        ::v1::com::harman::btpres::BTPresTypes::eErrorType errorCode = ::v1::com::harman::btpres::BTPresTypes::eErrorType::ERROR_TYPE_SUCCESS;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, errorCode);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->allowServiceConnectionAsync(_inAddress, _service, _allow, _callback, _info);
}
/**
 * description: Used to initate the disconnection with connected service i.e. HFP and A2DP
 * param: inAddress (string)                  : phone BT address
 * param: service (eSupportedProfile)         : profile name

        returns: errorCode
 *   error code (eErrorType)  : error code
 */
template <typename ... _AttributeExtensions>
void ConnectionManagerProxy<_AttributeExtensions...>::startServiceDisconnection(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    if (!_service.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->startServiceDisconnection(_inAddress, _service, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConnectionManagerProxy<_AttributeExtensions...>::startServiceDisconnectionAsync(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, StartServiceDisconnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_service.validate()) {
        ::v1::com::harman::btpres::BTPresTypes::eErrorType errorCode = ::v1::com::harman::btpres::BTPresTypes::eErrorType::ERROR_TYPE_SUCCESS;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, errorCode);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->startServiceDisconnectionAsync(_inAddress, _service, _callback, _info);
}
/**
 * description: This method should be called by clients in order to reply to the incoming
 *   service 
                       connection request from a remote device as
 *   indicated by the signal 'serviceConnectionRequest'. 
                      
 *   The reply can be to accept or reject incoming service connection request.
 * param: inAddress (string)              : phone BT address
 * param: service (eSupportedProfile)     : profile name
 * param: accept (boolean)                : containing the value true for allow, or false
 *   for reject
 * param: instanceName (string)           : containing the instance name of the device

 
 *         returns: errorCode (eErrorType)         : error code
 */
template <typename ... _AttributeExtensions>
void ConnectionManagerProxy<_AttributeExtensions...>::serviceConnectionReply(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const bool &_accept, const std::string &_instanceName, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    if (!_service.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->serviceConnectionReply(_inAddress, _service, _accept, _instanceName, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConnectionManagerProxy<_AttributeExtensions...>::serviceConnectionReplyAsync(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const bool &_accept, const std::string &_instanceName, ServiceConnectionReplyAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_service.validate()) {
        ::v1::com::harman::btpres::BTPresTypes::eErrorType errorCode = ::v1::com::harman::btpres::BTPresTypes::eErrorType::ERROR_TYPE_SUCCESS;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, errorCode);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->serviceConnectionReplyAsync(_inAddress, _service, _accept, _instanceName, _callback, _info);
}
/**
 * description: Used to initiate the reconnection to previously connected device
 * param: None

        returns: errorCode error code (eErrorType) : error code
 */
template <typename ... _AttributeExtensions>
void ConnectionManagerProxy<_AttributeExtensions...>::startReconnect(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    delegate_->startReconnect(_internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConnectionManagerProxy<_AttributeExtensions...>::startReconnectAsync(StartReconnectAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->startReconnectAsync(_callback, _info);
}
/**
 * description: This method should be called to get oldest connected device
 * param: None

        returns: oldestDevInfo (oldestDevInfo)     : Oldest device name
 *   and address
        returns: errorCode error code (eErrorType) : error code
 */
template <typename ... _AttributeExtensions>
void ConnectionManagerProxy<_AttributeExtensions...>::getOldestConnectedDev(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::deviceInfo &_oldestDevInfo, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    delegate_->getOldestConnectedDev(_internalCallStatus, _oldestDevInfo, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConnectionManagerProxy<_AttributeExtensions...>::getOldestConnectedDevAsync(GetOldestConnectedDevAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getOldestConnectedDevAsync(_callback, _info);
}
/**
 * description: This method used to change name of bonded device.
 * param: inAddress  (string)     : contains the BD address.
 * param: name (string)           : Device name

        returns: errorCode(eErrorType) 
 *   : error code
 */
template <typename ... _AttributeExtensions>
void ConnectionManagerProxy<_AttributeExtensions...>::renameBondedDevice(const std::string &_inAddress, const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    delegate_->renameBondedDevice(_inAddress, _name, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConnectionManagerProxy<_AttributeExtensions...>::renameBondedDeviceAsync(const std::string &_inAddress, const std::string &_name, RenameBondedDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->renameBondedDeviceAsync(_inAddress, _name, _callback, _info);
}
/**
 * description: This method used to change local name of head unit.
 * param: name (string)           : Device name

        returns: errorCode(eErrorType) 
 *   : error code
 */
template <typename ... _AttributeExtensions>
void ConnectionManagerProxy<_AttributeExtensions...>::renameLocalDevice(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    delegate_->renameLocalDevice(_name, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConnectionManagerProxy<_AttributeExtensions...>::renameLocalDeviceAsync(const std::string &_name, RenameLocalDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->renameLocalDeviceAsync(_name, _callback, _info);
}
/**
 * description: Used to set bluetooth on or off
 * param: status (boolean)       : set true or false

        returns: error
 *   code(eErrorType) : error code
 */
template <typename ... _AttributeExtensions>
void ConnectionManagerProxy<_AttributeExtensions...>::setBluetoothStatus(const bool &_status, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    delegate_->setBluetoothStatus(_status, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConnectionManagerProxy<_AttributeExtensions...>::setBluetoothStatusAsync(const bool &_status, SetBluetoothStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setBluetoothStatusAsync(_status, _callback, _info);
}
/**
 * description: Used to enable or disable discoverable mode
 * param: enabled (boolean)       : set true or false

        returns: errorCode
 *   (eErrorType) : error code
 */
template <typename ... _AttributeExtensions>
void ConnectionManagerProxy<_AttributeExtensions...>::setDiscoverableMode(const bool &_enabled, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    delegate_->setDiscoverableMode(_enabled, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConnectionManagerProxy<_AttributeExtensions...>::setDiscoverableModeAsync(const bool &_enabled, SetDiscoverableModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setDiscoverableModeAsync(_enabled, _callback, _info);
}
/**
 * description: This method used to pin information for head unit.
 * param: passkey (string)          : set the default pin for legacy devices

       
 *   returns:  error code (eErrorType) : error code
 */
template <typename ... _AttributeExtensions>
void ConnectionManagerProxy<_AttributeExtensions...>::setPin(const std::string &_passkey, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    delegate_->setPin(_passkey, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConnectionManagerProxy<_AttributeExtensions...>::setPinAsync(const std::string &_passkey, SetPinAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setPinAsync(_passkey, _callback, _info);
}
/**
 * description: It will set a device as primary
 * param: inAddress  (string)     : contains the BD address.

        returns:  error
 *   code (eErrorType) : error code
 */
template <typename ... _AttributeExtensions>
void ConnectionManagerProxy<_AttributeExtensions...>::setPrimaryDevice(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    delegate_->setPrimaryDevice(_inAddress, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConnectionManagerProxy<_AttributeExtensions...>::setPrimaryDeviceAsync(const std::string &_inAddress, SetPrimaryDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setPrimaryDeviceAsync(_inAddress, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &ConnectionManagerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool ConnectionManagerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool ConnectionManagerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& ConnectionManagerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& ConnectionManagerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace btpres
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v1::com::harman::btpres::ConnectionManagerProxy,
    _AttributeExtension> {
    typedef typename ::v1::com::harman::btpres::ConnectionManagerProxy<
            ::v1::com::harman::btpres::ConnectionManagerExtensions::BtStateAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::btpres::ConnectionManagerExtensions::LocalDevAddrAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::btpres::ConnectionManagerExtensions::LocalDevNameAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::btpres::ConnectionManagerExtensions::PassKeyPinAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::btpres::ConnectionManagerExtensions::DeviceSearchStatusAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::btpres::ConnectionManagerExtensions::DiscoverableStatusAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::btpres::ConnectionManagerExtensions::DiscoveryTimeoutAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::btpres::ConnectionManagerExtensions::DevSearchResultsAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::btpres::ConnectionManagerExtensions::DevListAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::btpres::ConnectionManagerExtensions::NetIfStatusAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::btpres::ConnectionManagerExtensions::UnstableDevsAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::btpres::ConnectionManagerExtensions::PrimaryDeviceAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_BTPRES_Connection_Manager_PROXY_HPP_
