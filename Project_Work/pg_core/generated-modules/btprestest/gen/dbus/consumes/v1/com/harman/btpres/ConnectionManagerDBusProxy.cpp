/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Thu Sep 22 00:23:23 IST 2016
*/
#include <v1/com/harman/btpres/ConnectionManagerDBusProxy.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace btpres {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createConnectionManagerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<ConnectionManagerDBusProxy>(_address, _connection);
}

INITIALIZER(registerConnectionManagerDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		ConnectionManager::getInterface(),
		&createConnectionManagerDBusProxy);
}

ConnectionManagerDBusProxy::ConnectionManagerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		btState_(*this, "onBtStateAttributeChanged", "i", "getBtStateAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		localDevAddr_(*this, "onLocalDevAddrAttributeChanged", "s", "getLocalDevAddrAttribute", static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
		localDevName_(*this, "onLocalDevNameAttributeChanged", "s", "getLocalDevNameAttribute", static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
		passKeyPin_(*this, "onPassKeyPinAttributeChanged", "s", "getPassKeyPinAttribute", static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
		deviceSearchStatus_(*this, "onDeviceSearchStatusAttributeChanged", "b", "getDeviceSearchStatusAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		discoverableStatus_(*this, "onDiscoverableStatusAttributeChanged", "b", "getDiscoverableStatusAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		discoveryTimeout_(*this, "onDiscoveryTimeoutAttributeChanged", "q", "getDiscoveryTimeoutAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		devSearchResults_(*this, "onDevSearchResultsAttributeChanged", "a(ssibb)", "getDevSearchResultsAttribute", static_cast<::v1::com::harman::btpres::BTPresTypes_::tDeviceSearchEntryListDeployment_t*>(nullptr)),
		devList_(*this, "onDevListAttributeChanged", "a(ssia{ii})", "getDevListAttribute", static_cast<::v1::com::harman::btpres::BTPresTypes_::bondedDevListDeployment_t*>(nullptr)),
		netIfStatus_(*this, "onNetIfStatusAttributeChanged", "(sb)", "getNetIfStatusAttribute", static_cast<::v1::com::harman::btpres::BTPresTypes_::networkIfStatusDeployment_t*>(nullptr)),
		unstableDevs_(*this, "onUnstableDevsAttributeChanged", "a(ss)", "getUnstableDevsAttribute", static_cast<::v1::com::harman::btpres::BTPresTypes_::unstableDeviceInfoListDeployment_t*>(nullptr)),
		primaryDevice_(*this, "onPrimaryDeviceAttributeChanged", "s", "getPrimaryDeviceAttribute", static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))
,		bondingRequest_(*this, "bondingRequest", "ssis", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		serviceConnectionRequest_(*this, "serviceConnectionRequest", "ssi", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		serviceConnectionStatus_(*this, "serviceConnectionStatus", "ssiii", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		deviceDeleted_(*this, "deviceDeleted", "ss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		bondingStatus_(*this, "bondingStatus", "ssi", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
{
}

      ConnectionManagerDBusProxy::BtStateAttribute& ConnectionManagerDBusProxy::getBtStateAttribute() {
          return btState_;
      }
      ConnectionManagerDBusProxy::LocalDevAddrAttribute& ConnectionManagerDBusProxy::getLocalDevAddrAttribute() {
          return localDevAddr_;
      }
      ConnectionManagerDBusProxy::LocalDevNameAttribute& ConnectionManagerDBusProxy::getLocalDevNameAttribute() {
          return localDevName_;
      }
      ConnectionManagerDBusProxy::PassKeyPinAttribute& ConnectionManagerDBusProxy::getPassKeyPinAttribute() {
          return passKeyPin_;
      }
      ConnectionManagerDBusProxy::DeviceSearchStatusAttribute& ConnectionManagerDBusProxy::getDeviceSearchStatusAttribute() {
          return deviceSearchStatus_;
      }
      ConnectionManagerDBusProxy::DiscoverableStatusAttribute& ConnectionManagerDBusProxy::getDiscoverableStatusAttribute() {
          return discoverableStatus_;
      }
      ConnectionManagerDBusProxy::DiscoveryTimeoutAttribute& ConnectionManagerDBusProxy::getDiscoveryTimeoutAttribute() {
          return discoveryTimeout_;
      }
      ConnectionManagerDBusProxy::DevSearchResultsAttribute& ConnectionManagerDBusProxy::getDevSearchResultsAttribute() {
          return devSearchResults_;
      }
      ConnectionManagerDBusProxy::DevListAttribute& ConnectionManagerDBusProxy::getDevListAttribute() {
          return devList_;
      }
      ConnectionManagerDBusProxy::NetIfStatusAttribute& ConnectionManagerDBusProxy::getNetIfStatusAttribute() {
          return netIfStatus_;
      }
      ConnectionManagerDBusProxy::UnstableDevsAttribute& ConnectionManagerDBusProxy::getUnstableDevsAttribute() {
          return unstableDevs_;
      }
      ConnectionManagerDBusProxy::PrimaryDeviceAttribute& ConnectionManagerDBusProxy::getPrimaryDeviceAttribute() {
          return primaryDevice_;
      }

ConnectionManagerDBusProxy::BondingRequestEvent& ConnectionManagerDBusProxy::getBondingRequestEvent() {
    return bondingRequest_;
}
ConnectionManagerDBusProxy::ServiceConnectionRequestEvent& ConnectionManagerDBusProxy::getServiceConnectionRequestEvent() {
    return serviceConnectionRequest_;
}
ConnectionManagerDBusProxy::ServiceConnectionStatusEvent& ConnectionManagerDBusProxy::getServiceConnectionStatusEvent() {
    return serviceConnectionStatus_;
}
ConnectionManagerDBusProxy::DeviceDeletedEvent& ConnectionManagerDBusProxy::getDeviceDeletedEvent() {
    return deviceDeleted_;
}
ConnectionManagerDBusProxy::BondingStatusEvent& ConnectionManagerDBusProxy::getBondingStatusEvent() {
    return bondingStatus_;
}
    
    /**
     * description: Used to start device search on head unit
     * param: maxDevice (UInt32)       : max limit for found devices
     * param: timeout (UInt32)         : time limit for device search operation
    
           
     *   returns: errorCode (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::startDeviceSearch(const uint32_t &_maxDevice, const uint32_t &_timeout, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_maxDevice(_maxDevice, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_timeout(_timeout, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "startDeviceSearch",
        "uu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_maxDevice, deploy_timeout,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::startDeviceSearchAsync(const uint32_t &_maxDevice, const uint32_t &_timeout, StartDeviceSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_maxDevice(_maxDevice, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_timeout(_timeout, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "startDeviceSearch",
        "uu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_maxDevice, deploy_timeout,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to stop device search on head unit
     * param: none
    
            returns: error code (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::stopDeviceSearch(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "stopDeviceSearch",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::stopDeviceSearchAsync(StopDeviceSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "stopDeviceSearch",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to send secure Bonding reply
     * param: inAddress (string)       : phone BT address
     * param: accept (boolean)         : accepting authentication request
     * param: trusted (boolean)        : making device trusted means service won't send
     *   connection request for each connect attempt
     * param: type (eBondingType)      : Bonding type, standard or secure bonding
    
           
     *   returns: errorCode (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::bondingReply(const std::string &_inAddress, const bool &_accept, const bool &_trusted, const ::v1::com::harman::btpres::BTPresTypes::eBondingType &_type, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_accept(_accept, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_trusted(_trusted, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eBondingType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eBondingType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "bondingReply",
        "sbbi",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_accept, deploy_trusted, deploy_type,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::bondingReplyAsync(const std::string &_inAddress, const bool &_accept, const bool &_trusted, const ::v1::com::harman::btpres::BTPresTypes::eBondingType &_type, BondingReplyAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_accept(_accept, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_trusted(_trusted, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eBondingType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eBondingType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "bondingReply",
        "sbbi",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_accept, deploy_trusted, deploy_type,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to delete device from paired device list
     * param: inAddress (string)      : phone BT address
    
            returns: errorCode
     *   (eErrorType): error code
     */
    void ConnectionManagerDBusProxy::deleteDevice(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "deleteDevice",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::deleteDeviceAsync(const std::string &_inAddress, DeleteDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "deleteDevice",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to delete all device in paired device list
     * param: none
    
            returns: errorCode (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::deleteAllDevices(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "deleteAllDevices",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::deleteAllDevicesAsync(DeleteAllDevicesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "deleteAllDevices",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to initate profile connection with device
     * param: inAddress (string)       : phone BT address
     * param: service (eSupportedProfile) : profile name
     * param: instanceName (string)    : containing the phone instance
     * param: replaceAddr (string)     : containing the replacement address for which the
     *   connection will be replaced
    
            returns: errorCode (eErrorType) : error
     *   code
     */
    void ConnectionManagerDBusProxy::startServiceConnection(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const std::string &_instanceName, const std::string &_replaceAddr, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment> deploy_service(_service, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_instanceName(_instanceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_replaceAddr(_replaceAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "startServiceConnection",
        "siss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_service, deploy_instanceName, deploy_replaceAddr,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::startServiceConnectionAsync(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const std::string &_instanceName, const std::string &_replaceAddr, StartServiceConnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment> deploy_service(_service, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_instanceName(_instanceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_replaceAddr(_replaceAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "startServiceConnection",
        "siss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_service, deploy_instanceName, deploy_replaceAddr,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to allows the existance of the service connection to this device and
     *   service.
     * param: inAddress (string)           : phone BT address
     * param: service (eSupportedProfile)  : profile name
     * param: allow (Boolean)              : containing the value true for allow, or false
     *   for reject
    
            returns: errorCode (eErrorType)      : error code
     */
    void ConnectionManagerDBusProxy::allowServiceConnection(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const bool &_allow, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment> deploy_service(_service, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_allow(_allow, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "allowServiceConnection",
        "sib",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_service, deploy_allow,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::allowServiceConnectionAsync(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const bool &_allow, AllowServiceConnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment> deploy_service(_service, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_allow(_allow, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "allowServiceConnection",
        "sib",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_service, deploy_allow,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to initate the disconnection with connected service i.e. HFP and A2DP
     * param: inAddress (string)                  : phone BT address
     * param: service (eSupportedProfile)         : profile name
    
            returns: errorCode
     *   error code (eErrorType)  : error code
     */
    void ConnectionManagerDBusProxy::startServiceDisconnection(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment> deploy_service(_service, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "startServiceDisconnection",
        "si",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_service,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::startServiceDisconnectionAsync(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, StartServiceDisconnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment> deploy_service(_service, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "startServiceDisconnection",
        "si",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_service,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: This method should be called by clients in order to reply to the incoming
     *   service 
                           connection request from a remote device as
     *   indicated by the signal 'serviceConnectionRequest'. 
                          
     *   The reply can be to accept or reject incoming service connection request.
     * param: inAddress (string)              : phone BT address
     * param: service (eSupportedProfile)     : profile name
     * param: accept (boolean)                : containing the value true for allow, or false
     *   for reject
     * param: instanceName (string)           : containing the instance name of the device
    
     
     *         returns: errorCode (eErrorType)         : error code
     */
    void ConnectionManagerDBusProxy::serviceConnectionReply(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const bool &_accept, const std::string &_instanceName, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment> deploy_service(_service, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_accept(_accept, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_instanceName(_instanceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "serviceConnectionReply",
        "sibs",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_service, deploy_accept, deploy_instanceName,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::serviceConnectionReplyAsync(const std::string &_inAddress, const ::v1::com::harman::btpres::BTPresTypes::eSupportedProfile &_service, const bool &_accept, const std::string &_instanceName, ServiceConnectionReplyAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment> deploy_service(_service, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_accept(_accept, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_instanceName(_instanceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eSupportedProfile, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "serviceConnectionReply",
        "sibs",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_service, deploy_accept, deploy_instanceName,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to initiate the reconnection to previously connected device
     * param: None
    
            returns: errorCode error code (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::startReconnect(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "startReconnect",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::startReconnectAsync(StartReconnectAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "startReconnect",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: This method should be called to get oldest connected device
     * param: None
    
            returns: oldestDevInfo (oldestDevInfo)     : Oldest device name
     *   and address
            returns: errorCode error code (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::getOldestConnectedDev(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::deviceInfo &_oldestDevInfo, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::deviceInfo, ::v1::com::harman::btpres::BTPresTypes_::deviceInfoDeployment_t> deploy_oldestDevInfo(static_cast<::v1::com::harman::btpres::BTPresTypes_::deviceInfoDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::deviceInfo,::v1::com::harman::btpres::BTPresTypes_::deviceInfoDeployment_t>,
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getOldestConnectedDev",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_oldestDevInfo, deploy_errorCode);
_oldestDevInfo = deploy_oldestDevInfo.getValue();
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::getOldestConnectedDevAsync(GetOldestConnectedDevAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::deviceInfo, ::v1::com::harman::btpres::BTPresTypes_::deviceInfoDeployment_t> deploy_oldestDevInfo(static_cast<::v1::com::harman::btpres::BTPresTypes_::deviceInfoDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::deviceInfo,::v1::com::harman::btpres::BTPresTypes_::deviceInfoDeployment_t>,
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getOldestConnectedDev",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::deviceInfo, ::v1::com::harman::btpres::BTPresTypes_::deviceInfoDeployment_t> _oldestDevInfo, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _oldestDevInfo.getValue(), _errorCode.getValue());
        },
        std::make_tuple(deploy_oldestDevInfo, deploy_errorCode));
    }
    /**
     * description: This method used to change name of bonded device.
     * param: inAddress  (string)     : contains the BD address.
     * param: name (string)           : Device name
    
            returns: errorCode(eErrorType) 
     *   : error code
     */
    void ConnectionManagerDBusProxy::renameBondedDevice(const std::string &_inAddress, const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_name(_name, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "renameBondedDevice",
        "ss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_name,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::renameBondedDeviceAsync(const std::string &_inAddress, const std::string &_name, RenameBondedDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_name(_name, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "renameBondedDevice",
        "ss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_name,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: This method used to change local name of head unit.
     * param: name (string)           : Device name
    
            returns: errorCode(eErrorType) 
     *   : error code
     */
    void ConnectionManagerDBusProxy::renameLocalDevice(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_name(_name, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "renameLocalDevice",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_name,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::renameLocalDeviceAsync(const std::string &_name, RenameLocalDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_name(_name, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "renameLocalDevice",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_name,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to set bluetooth on or off
     * param: status (boolean)       : set true or false
    
            returns: error
     *   code(eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::setBluetoothStatus(const bool &_status, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_status(_status, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setBluetoothStatus",
        "b",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_status,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::setBluetoothStatusAsync(const bool &_status, SetBluetoothStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_status(_status, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setBluetoothStatus",
        "b",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_status,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to enable or disable discoverable mode
     * param: enabled (boolean)       : set true or false
    
            returns: errorCode
     *   (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::setDiscoverableMode(const bool &_enabled, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_enabled(_enabled, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setDiscoverableMode",
        "b",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_enabled,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::setDiscoverableModeAsync(const bool &_enabled, SetDiscoverableModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_enabled(_enabled, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setDiscoverableMode",
        "b",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_enabled,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: This method used to pin information for head unit.
     * param: passkey (string)          : set the default pin for legacy devices
    
           
     *   returns:  error code (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::setPin(const std::string &_passkey, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_passkey(_passkey, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setPin",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_passkey,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::setPinAsync(const std::string &_passkey, SetPinAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_passkey(_passkey, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setPin",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_passkey,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: It will set a device as primary
     * param: inAddress  (string)     : contains the BD address.
    
            returns:  error
     *   code (eErrorType) : error code
     */
    void ConnectionManagerDBusProxy::setPrimaryDevice(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setPrimaryDevice",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConnectionManagerDBusProxy::setPrimaryDeviceAsync(const std::string &_inAddress, SetPrimaryDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setPrimaryDevice",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }


void ConnectionManagerDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace btpres
      } // namespace harman
      } // namespace com
      } // namespace v1
