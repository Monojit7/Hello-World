/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Thu Sep 22 00:23:23 IST 2016
*/
#include <v1/com/harman/btpres/CallManagerDBusProxy.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace btpres {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createCallManagerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<CallManagerDBusProxy>(_address, _connection);
}

INITIALIZER(registerCallManagerDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		CallManager::getInterface(),
		&createCallManagerDBusProxy);
}

CallManagerDBusProxy::CallManagerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		hfFeaturesList_(*this, "onHfFeaturesListAttributeChanged", "a(sa{ib})", "getHfFeaturesListAttribute", static_cast<::v1::com::harman::btpres::BTPresTypes_::hfpSupportedFeaturesListDeployment_t*>(nullptr)),
		operatorInfoList_(*this, "onOperatorInfoListAttributeChanged", "a(ibsssi)", "getOperatorInfoListAttribute", static_cast<::v1::com::harman::btpres::BTPresTypes_::networkOperatorInfoListDeployment_t*>(nullptr)),
		rssiChargeInfoList_(*this, "onRssiChargeInfoListAttributeChanged", "a(sii)", "getRssiChargeInfoListAttribute", static_cast<::v1::com::harman::btpres::BTPresTypes_::signalChargeInfoListDeployment_t*>(nullptr)),
		callStateInfo_(*this, "onCallStateInfoAttributeChanged", "a(yissssiui)", "getCallStateInfoAttribute", static_cast<::v1::com::harman::btpres::BTPresTypes_::callstateInfoListDeployment_t*>(nullptr)),
		hfMode_(*this, "onHfModeAttributeChanged", "a(si)", "getHfModeAttribute", static_cast<::v1::com::harman::btpres::BTPresTypes_::hfModeStatusListDeployment_t*>(nullptr)),
		callDuration_(*this, "onCallDurationAttributeChanged", "a(yus)", "getCallDurationAttribute", static_cast<::v1::com::harman::btpres::BTPresTypes_::callDurationListDeployment_t*>(nullptr)),
		audioStatus_(*this, "onAudioStatusAttributeChanged", "a(si)", "getAudioStatusAttribute", static_cast<::v1::com::harman::btpres::BTPresTypes_::audioStatusListDeployment_t*>(nullptr)),
		vrMode_(*this, "onVrModeAttributeChanged", "a(sb)", "getVrModeAttribute", static_cast<::v1::com::harman::btpres::BTPresTypes_::vrModeStatusListDeployment_t*>(nullptr))
{
}

      CallManagerDBusProxy::HfFeaturesListAttribute& CallManagerDBusProxy::getHfFeaturesListAttribute() {
          return hfFeaturesList_;
      }
      CallManagerDBusProxy::OperatorInfoListAttribute& CallManagerDBusProxy::getOperatorInfoListAttribute() {
          return operatorInfoList_;
      }
      CallManagerDBusProxy::RssiChargeInfoListAttribute& CallManagerDBusProxy::getRssiChargeInfoListAttribute() {
          return rssiChargeInfoList_;
      }
      CallManagerDBusProxy::CallStateInfoAttribute& CallManagerDBusProxy::getCallStateInfoAttribute() {
          return callStateInfo_;
      }
      CallManagerDBusProxy::HfModeAttribute& CallManagerDBusProxy::getHfModeAttribute() {
          return hfMode_;
      }
      CallManagerDBusProxy::CallDurationAttribute& CallManagerDBusProxy::getCallDurationAttribute() {
          return callDuration_;
      }
      CallManagerDBusProxy::AudioStatusAttribute& CallManagerDBusProxy::getAudioStatusAttribute() {
          return audioStatus_;
      }
      CallManagerDBusProxy::VrModeAttribute& CallManagerDBusProxy::getVrModeAttribute() {
          return vrMode_;
      }

    
    /**
     * description: Used to initate call from head unit HMI.
     * param: inAddress (String)    	: BD Address of the device to get the properties
    	     
     *   : dialNumber (String)	        : Number to be dialled
    	      : contactName
     *   (String)    	: Contact Name if available
    	      : imageUrl (String)	        :
     *   Image URL if available
    	returns: errorCode (eErrorType)	: API execution output
     */
    void CallManagerDBusProxy::dial(const std::string &_inAddress, const std::string &_dialNumber, const std::string &_contactName, const std::string &_imageUrl, const ::v1::com::harman::btpres::BTPresTypes::eTelType &_numType, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_dialNumber(_dialNumber, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_contactName(_contactName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_imageUrl(_imageUrl, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eTelType, CommonAPI::EmptyDeployment> deploy_numType(_numType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eTelType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "dial",
        "ssssi",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_dialNumber, deploy_contactName, deploy_imageUrl, deploy_numType,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CallManagerDBusProxy::dialAsync(const std::string &_inAddress, const std::string &_dialNumber, const std::string &_contactName, const std::string &_imageUrl, const ::v1::com::harman::btpres::BTPresTypes::eTelType &_numType, DialAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_dialNumber(_dialNumber, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_contactName(_contactName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_imageUrl(_imageUrl, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eTelType, CommonAPI::EmptyDeployment> deploy_numType(_numType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eTelType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "dial",
        "ssssi",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_dialNumber, deploy_contactName, deploy_imageUrl, deploy_numType,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to send DTMF tone from head unit to phone.
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   dtmfTone (String)	: DTMF tone to be sent
    	returns: errorCode (errorCode)	: API
     *   execution ouput
     */
    void CallManagerDBusProxy::sendDtmfTone(const std::string &_inAddress, const std::string &_dtmfTone, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_dtmfTone(_dtmfTone, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "sendDtmfTone",
        "ss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_dtmfTone,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CallManagerDBusProxy::sendDtmfToneAsync(const std::string &_inAddress, const std::string &_dtmfTone, SendDtmfToneAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_dtmfTone(_dtmfTone, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "sendDtmfTone",
        "ss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_dtmfTone,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Accept incoming call from Head Unit
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   transfer (Boolean)	: Whether the call has to be transferred to Handset mode
     *   upon acceptance
    	returns: errorCode (eErrorType): API execution output
     */
    void CallManagerDBusProxy::acceptIncomingCall(const std::string &_inAddress, const bool &_transfer, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_transfer(_transfer, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "acceptIncomingCall",
        "sb",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_transfer,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CallManagerDBusProxy::acceptIncomingCallAsync(const std::string &_inAddress, const bool &_transfer, AcceptIncomingCallAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_transfer(_transfer, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "acceptIncomingCall",
        "sb",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_transfer,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: End call for passed call ID
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   callId (Int32)          : Call ID of the phone call to be ended
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    void CallManagerDBusProxy::endCall(const std::string &_inAddress, const int8_t &_callId, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int8_t, CommonAPI::EmptyDeployment> deploy_callId(_callId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int8_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "endCall",
        "sy",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_callId,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CallManagerDBusProxy::endCallAsync(const std::string &_inAddress, const int8_t &_callId, EndCallAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int8_t, CommonAPI::EmptyDeployment> deploy_callId(_callId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int8_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "endCall",
        "sy",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_callId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: End currently active call for a particular device
     * param: inAddress (String)      : BD Address of the device to get the
     *   properties
    	returns: errorCode (eErrorType): API execution output
     */
    void CallManagerDBusProxy::endActiveCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "endActiveCall",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CallManagerDBusProxy::endActiveCallAsync(const std::string &_inAddress, EndActiveCallAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "endActiveCall",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Ends all available calls
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    void CallManagerDBusProxy::endAllCalls(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "endAllCalls",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CallManagerDBusProxy::endAllCallsAsync(const std::string &_inAddress, EndAllCallsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "endAllCalls",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Reject incoming calls
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    void CallManagerDBusProxy::rejectIncomingCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "rejectIncomingCall",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CallManagerDBusProxy::rejectIncomingCallAsync(const std::string &_inAddress, RejectIncomingCallAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "rejectIncomingCall",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Put current active call on hold
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    void CallManagerDBusProxy::holdActiveCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "holdActiveCall",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CallManagerDBusProxy::holdActiveCallAsync(const std::string &_inAddress, HoldActiveCallAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "holdActiveCall",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Activate the held from head unit
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    void CallManagerDBusProxy::resumeHeldCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "resumeHeldCall",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CallManagerDBusProxy::resumeHeldCallAsync(const std::string &_inAddress, ResumeHeldCallAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "resumeHeldCall",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Conference available calls from Head Unit
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    void CallManagerDBusProxy::conferenceCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "conferenceCall",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CallManagerDBusProxy::conferenceCallAsync(const std::string &_inAddress, ConferenceCallAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "conferenceCall",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Interface is used by HMI to select a particular call in case two phone are
     *   connected each with a phone call.
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   callId (Int32)          : Call ID of the phone call to be selected
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    void CallManagerDBusProxy::selectCall(const std::string &_inAddress, const int8_t &_callId, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int8_t, CommonAPI::EmptyDeployment> deploy_callId(_callId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int8_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "selectCall",
        "sy",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_callId,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CallManagerDBusProxy::selectCallAsync(const std::string &_inAddress, const int8_t &_callId, SelectCallAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int8_t, CommonAPI::EmptyDeployment> deploy_callId(_callId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int8_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "selectCall",
        "sy",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_callId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Interface is used by HMI to transfer call audio from Handsfree to Handset and
     *   vise versa
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   hfMode (Boolean)	: Handsfree Mode requested from the HMI
    	returns: errorCode
     *   (eErrorType): API execution output
     */
    void CallManagerDBusProxy::setHfMode(const std::string &_inAddress, const bool &_hfMode, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_hfMode(_hfMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setHfMode",
        "sb",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_hfMode,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CallManagerDBusProxy::setHfModeAsync(const std::string &_inAddress, const bool &_hfMode, SetHfModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_hfMode(_hfMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setHfMode",
        "sb",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_hfMode,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Interface is used by HMI to active Phone VR mode from Head Unit
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   mode (Boolean)		: VR Mode requested from the HMI
    	returns: errorCode
     *   (eErrorType): API execution output
     */
    void CallManagerDBusProxy::setVRMode(const std::string &_inAddress, const bool &_mode, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_mode(_mode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setVRMode",
        "sb",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress, deploy_mode,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CallManagerDBusProxy::setVRModeAsync(const std::string &_inAddress, const bool &_mode, SetVRModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_mode(_mode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setVRMode",
        "sb",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress, deploy_mode,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Interface is used by HMI to swap the active call available on Head Unit
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    void CallManagerDBusProxy::swapCalls(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "swapCalls",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CallManagerDBusProxy::swapCallsAsync(const std::string &_inAddress, SwapCallsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "swapCalls",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }


void CallManagerDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace btpres
      } // namespace harman
      } // namespace com
      } // namespace v1
