/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Thu Sep 22 00:23:23 IST 2016
*/
#ifndef V1_COM_HARMAN_BTPRES_Call_Manager_DBUS_PROXY_HPP_
#define V1_COM_HARMAN_BTPRES_Call_Manager_DBUS_PROXY_HPP_

#include <v1/com/harman/btpres/CallManagerProxyBase.hpp>
#include "v1/com/harman/btpres/CallManagerDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace com {
namespace harman {
namespace btpres {

class CallManagerDBusProxy
    : virtual public CallManagerProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    CallManagerDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~CallManagerDBusProxy() { }

    virtual HfFeaturesListAttribute& getHfFeaturesListAttribute();
    virtual OperatorInfoListAttribute& getOperatorInfoListAttribute();
    virtual RssiChargeInfoListAttribute& getRssiChargeInfoListAttribute();
    virtual CallStateInfoAttribute& getCallStateInfoAttribute();
    virtual HfModeAttribute& getHfModeAttribute();
    virtual CallDurationAttribute& getCallDurationAttribute();
    virtual AudioStatusAttribute& getAudioStatusAttribute();
    virtual VrModeAttribute& getVrModeAttribute();


    /**
     * description: Used to initate call from head unit HMI.
     * param: inAddress (String)    	: BD Address of the device to get the properties
    	     
     *   : dialNumber (String)	        : Number to be dialled
    	      : contactName
     *   (String)    	: Contact Name if available
    	      : imageUrl (String)	        :
     *   Image URL if available
    	returns: errorCode (eErrorType)	: API execution output
     */
    virtual void dial(const std::string &_inAddress, const std::string &_dialNumber, const std::string &_contactName, const std::string &_imageUrl, const ::v1::com::harman::btpres::BTPresTypes::eTelType &_numType, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> dialAsync(const std::string &_inAddress, const std::string &_dialNumber, const std::string &_contactName, const std::string &_imageUrl, const ::v1::com::harman::btpres::BTPresTypes::eTelType &_numType, DialAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Used to send DTMF tone from head unit to phone.
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   dtmfTone (String)	: DTMF tone to be sent
    	returns: errorCode (errorCode)	: API
     *   execution ouput
     */
    virtual void sendDtmfTone(const std::string &_inAddress, const std::string &_dtmfTone, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> sendDtmfToneAsync(const std::string &_inAddress, const std::string &_dtmfTone, SendDtmfToneAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Accept incoming call from Head Unit
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   transfer (Boolean)	: Whether the call has to be transferred to Handset mode
     *   upon acceptance
    	returns: errorCode (eErrorType): API execution output
     */
    virtual void acceptIncomingCall(const std::string &_inAddress, const bool &_transfer, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> acceptIncomingCallAsync(const std::string &_inAddress, const bool &_transfer, AcceptIncomingCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: End call for passed call ID
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   callId (Int32)          : Call ID of the phone call to be ended
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    virtual void endCall(const std::string &_inAddress, const int8_t &_callId, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> endCallAsync(const std::string &_inAddress, const int8_t &_callId, EndCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: End currently active call for a particular device
     * param: inAddress (String)      : BD Address of the device to get the
     *   properties
    	returns: errorCode (eErrorType): API execution output
     */
    virtual void endActiveCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> endActiveCallAsync(const std::string &_inAddress, EndActiveCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Ends all available calls
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    virtual void endAllCalls(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> endAllCallsAsync(const std::string &_inAddress, EndAllCallsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Reject incoming calls
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    virtual void rejectIncomingCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> rejectIncomingCallAsync(const std::string &_inAddress, RejectIncomingCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Put current active call on hold
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    virtual void holdActiveCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> holdActiveCallAsync(const std::string &_inAddress, HoldActiveCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Activate the held from head unit
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    virtual void resumeHeldCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> resumeHeldCallAsync(const std::string &_inAddress, ResumeHeldCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Conference available calls from Head Unit
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    virtual void conferenceCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> conferenceCallAsync(const std::string &_inAddress, ConferenceCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Interface is used by HMI to select a particular call in case two phone are
     *   connected each with a phone call.
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   callId (Int32)          : Call ID of the phone call to be selected
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    virtual void selectCall(const std::string &_inAddress, const int8_t &_callId, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> selectCallAsync(const std::string &_inAddress, const int8_t &_callId, SelectCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Interface is used by HMI to transfer call audio from Handsfree to Handset and
     *   vise versa
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   hfMode (Boolean)	: Handsfree Mode requested from the HMI
    	returns: errorCode
     *   (eErrorType): API execution output
     */
    virtual void setHfMode(const std::string &_inAddress, const bool &_hfMode, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setHfModeAsync(const std::string &_inAddress, const bool &_hfMode, SetHfModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Interface is used by HMI to active Phone VR mode from Head Unit
     * param: inAddress (String)	: BD Address of the device to get the properties
    	      :
     *   mode (Boolean)		: VR Mode requested from the HMI
    	returns: errorCode
     *   (eErrorType): API execution output
     */
    virtual void setVRMode(const std::string &_inAddress, const bool &_mode, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setVRModeAsync(const std::string &_inAddress, const bool &_mode, SetVRModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Interface is used by HMI to swap the active call available on Head Unit
     * param: inAddress (String)	: BD Address of the device to get the properties
    	returns:
     *   errorCode (eErrorType): API execution output
     */
    virtual void swapCalls(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> swapCallsAsync(const std::string &_inAddress, SwapCallsAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<HfFeaturesListAttribute, ::v1::com::harman::btpres::BTPresTypes_::hfpSupportedFeaturesListDeployment_t>> hfFeaturesList_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<OperatorInfoListAttribute, ::v1::com::harman::btpres::BTPresTypes_::networkOperatorInfoListDeployment_t>> operatorInfoList_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<RssiChargeInfoListAttribute, ::v1::com::harman::btpres::BTPresTypes_::signalChargeInfoListDeployment_t>> rssiChargeInfoList_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CallStateInfoAttribute, ::v1::com::harman::btpres::BTPresTypes_::callstateInfoListDeployment_t>> callStateInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<HfModeAttribute, ::v1::com::harman::btpres::BTPresTypes_::hfModeStatusListDeployment_t>> hfMode_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CallDurationAttribute, ::v1::com::harman::btpres::BTPresTypes_::callDurationListDeployment_t>> callDuration_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<AudioStatusAttribute, ::v1::com::harman::btpres::BTPresTypes_::audioStatusListDeployment_t>> audioStatus_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VrModeAttribute, ::v1::com::harman::btpres::BTPresTypes_::vrModeStatusListDeployment_t>> vrMode_;


};

} // namespace btpres
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_BTPRES_Call_Manager_DBUS_PROXY_HPP_

