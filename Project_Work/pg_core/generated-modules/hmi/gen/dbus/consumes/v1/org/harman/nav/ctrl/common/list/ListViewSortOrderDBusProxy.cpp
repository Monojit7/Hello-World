/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * description: This interface provides functionality to specify the sort order to views.
   
 *   Any interfaces using this interface building block must provide specification
 *   on which parts of list elements shall be used for sorting.
    The number of
 *   sort orders may be extended by inheritance of data type Order as well if
 *   needed.
 */
#include <v1/org/harman/nav/ctrl/common/list/ListViewSortOrderDBusProxy.hpp>

namespace v1 {
namespace org {
namespace harman {
namespace nav {
namespace ctrl {
namespace common {
namespace list {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createListViewSortOrderDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<ListViewSortOrderDBusProxy>(_address, _connection);
}

INITIALIZER(registerListViewSortOrderDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		ListViewSortOrder::getInterface(),
		&createListViewSortOrderDBusProxy);
}

ListViewSortOrderDBusProxy::ListViewSortOrderDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection),
		ListViewBaseDBusProxy(_address, _connection)
{
}


    
    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     */
    void ListViewSortOrderDBusProxy::getVersion(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Version, ::org::harman::nav::ctrl::CommonTypes_::VersionDeployment_t> deploy_version(static_cast<::org::harman::nav::ctrl::CommonTypes_::VersionDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Version,::org::harman::nav::ctrl::CommonTypes_::VersionDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getVersion",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_version);
_version = deploy_version.getValue();
}
    std::future<CommonAPI::CallStatus> ListViewSortOrderDBusProxy::getVersionAsync(GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Version, ::org::harman::nav::ctrl::CommonTypes_::VersionDeployment_t> deploy_version(static_cast<::org::harman::nav::ctrl::CommonTypes_::VersionDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Version,::org::harman::nav::ctrl::CommonTypes_::VersionDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getVersion",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Version, ::org::harman::nav::ctrl::CommonTypes_::VersionDeployment_t> _version) {
        	if (_callback)
        		_callback(_internalCallStatus, _version.getValue());
        },
        std::make_tuple(deploy_version));
    }
    /**
     * description: configure the sort order of a view instance. Changing the sort order of a view
     *   may trigger a view update.
     */
    void ListViewSortOrderDBusProxy::setSortOrder(const ::org::harman::nav::ctrl::common::list::ListTypes::ViewId &_view, const ::org::harman::nav::ctrl::common::list::ListTypes::SortOption &_order, CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::common::list::ListTypes::ListError &_error, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewId, CommonAPI::EmptyDeployment> deploy_view(_view, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::SortOption, CommonAPI::EmptyDeployment> deploy_order(_order, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewId, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::SortOption, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setSortOrder",
        "qi",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_view, deploy_order,
_internalCallStatus,
deploy_error);
_error = deploy_error.getValue();
}
    std::future<CommonAPI::CallStatus> ListViewSortOrderDBusProxy::setSortOrderAsync(const ::org::harman::nav::ctrl::common::list::ListTypes::ViewId &_view, const ::org::harman::nav::ctrl::common::list::ListTypes::SortOption &_order, SetSortOrderAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewId, CommonAPI::EmptyDeployment> deploy_view(_view, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::SortOption, CommonAPI::EmptyDeployment> deploy_order(_order, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewId, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::SortOption, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setSortOrder",
        "qi",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_view, deploy_order,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment> _deploy_error) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue());
        },
        std::make_tuple(deploy_error));
    }
    /**
     * description: retrieve the sort order of a view instance
     */
    void ListViewSortOrderDBusProxy::getSortOrder(const ::org::harman::nav::ctrl::common::list::ListTypes::ViewId &_view, CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::common::list::ListTypes::ListError &_error, ::org::harman::nav::ctrl::common::list::ListTypes::SortOption &_order, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewId, CommonAPI::EmptyDeployment> deploy_view(_view, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::SortOption, CommonAPI::EmptyDeployment> deploy_order(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewId, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::SortOption,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getSortOrder",
        "q",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_view,
_internalCallStatus,
deploy_error,
deploy_order);
_error = deploy_error.getValue();
_order = deploy_order.getValue();
}
    std::future<CommonAPI::CallStatus> ListViewSortOrderDBusProxy::getSortOrderAsync(const ::org::harman::nav::ctrl::common::list::ListTypes::ViewId &_view, GetSortOrderAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewId, CommonAPI::EmptyDeployment> deploy_view(_view, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::SortOption, CommonAPI::EmptyDeployment> deploy_order(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewId, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::SortOption,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getSortOrder",
        "q",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_view,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment> _deploy_error, CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::SortOption, CommonAPI::EmptyDeployment> _order) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue(), _order.getValue());
        },
        std::make_tuple(deploy_error, deploy_order));
    }
    /**
     * description: remove all items which are related to the given List id.
     */
    void ListViewSortOrderDBusProxy::removeAll(const ::org::harman::nav::ctrl::common::list::ListTypes::ListId &_list, CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::common::list::ListTypes::ListError &_error, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListId, ::org::harman::nav::ctrl::common::list::ListTypes_::ListIdDeployment_t> deploy_list(_list, static_cast<::org::harman::nav::ctrl::common::list::ListTypes_::ListIdDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListId, ::org::harman::nav::ctrl::common::list::ListTypes_::ListIdDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "removeAll",
        "(s)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_list,
_internalCallStatus,
deploy_error);
_error = deploy_error.getValue();
}
    std::future<CommonAPI::CallStatus> ListViewSortOrderDBusProxy::removeAllAsync(const ::org::harman::nav::ctrl::common::list::ListTypes::ListId &_list, RemoveAllAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListId, ::org::harman::nav::ctrl::common::list::ListTypes_::ListIdDeployment_t> deploy_list(_list, static_cast<::org::harman::nav::ctrl::common::list::ListTypes_::ListIdDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListId, ::org::harman::nav::ctrl::common::list::ListTypes_::ListIdDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "removeAll",
        "(s)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_list,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment> _deploy_error) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue());
        },
        std::make_tuple(deploy_error));
    }
    /**
     * description: remove an item from a list
     * param: ListTypes.ViewId sourceViewId source view id, which is where this item is known
     *   from
     * param: ListTypes.ViewKey source item key, which identifies the item which shall be
     *   removed
     * param: ListTypes.destinationListId the list from which the item shall be removed
     */
    void ListViewSortOrderDBusProxy::removeItem(const ::org::harman::nav::ctrl::common::list::ListTypes::ViewId &_sourceViewId, const ::org::harman::nav::ctrl::common::list::ListTypes::ViewKey &_sourceItemKey, const ::org::harman::nav::ctrl::common::list::ListTypes::ListId &_destination, CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::common::list::ListTypes::ListError &_error, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewId, CommonAPI::EmptyDeployment> deploy_sourceViewId(_sourceViewId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewKey, CommonAPI::EmptyDeployment> deploy_sourceItemKey(_sourceItemKey, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListId, ::org::harman::nav::ctrl::common::list::ListTypes_::ListIdDeployment_t> deploy_destination(_destination, static_cast<::org::harman::nav::ctrl::common::list::ListTypes_::ListIdDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewId, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewKey, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListId, ::org::harman::nav::ctrl::common::list::ListTypes_::ListIdDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "removeItem",
        "qq(s)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sourceViewId, deploy_sourceItemKey, deploy_destination,
_internalCallStatus,
deploy_error);
_error = deploy_error.getValue();
}
    std::future<CommonAPI::CallStatus> ListViewSortOrderDBusProxy::removeItemAsync(const ::org::harman::nav::ctrl::common::list::ListTypes::ViewId &_sourceViewId, const ::org::harman::nav::ctrl::common::list::ListTypes::ViewKey &_sourceItemKey, const ::org::harman::nav::ctrl::common::list::ListTypes::ListId &_destination, RemoveItemAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewId, CommonAPI::EmptyDeployment> deploy_sourceViewId(_sourceViewId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewKey, CommonAPI::EmptyDeployment> deploy_sourceItemKey(_sourceItemKey, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListId, ::org::harman::nav::ctrl::common::list::ListTypes_::ListIdDeployment_t> deploy_destination(_destination, static_cast<::org::harman::nav::ctrl::common::list::ListTypes_::ListIdDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewId, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewKey, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListId, ::org::harman::nav::ctrl::common::list::ListTypes_::ListIdDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "removeItem",
        "qq(s)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sourceViewId, deploy_sourceItemKey, deploy_destination,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment> _deploy_error) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue());
        },
        std::make_tuple(deploy_error));
    }
    /**
     * description: add a exsisting item to another list.
     * param: ListTypes.ViewId sourceViewId, the source viewid of the to be added item
     * param: ListTypes.ViewKey sourceItemKey, the key within the given view of the to be
     *   added item
     * param: ListTypes.ListId destinationListId, the list where the item should be added.
     */
    void ListViewSortOrderDBusProxy::addItem(const ::org::harman::nav::ctrl::common::list::ListTypes::ViewId &_sourceViewId, const ::org::harman::nav::ctrl::common::list::ListTypes::ViewKey &_sourceItemKey, const ::org::harman::nav::ctrl::common::list::ListTypes::ListId &_destinationListId, CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::common::list::ListTypes::ListError &_error, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewId, CommonAPI::EmptyDeployment> deploy_sourceViewId(_sourceViewId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewKey, CommonAPI::EmptyDeployment> deploy_sourceItemKey(_sourceItemKey, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListId, ::org::harman::nav::ctrl::common::list::ListTypes_::ListIdDeployment_t> deploy_destinationListId(_destinationListId, static_cast<::org::harman::nav::ctrl::common::list::ListTypes_::ListIdDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewId, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewKey, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListId, ::org::harman::nav::ctrl::common::list::ListTypes_::ListIdDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "addItem",
        "qq(s)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sourceViewId, deploy_sourceItemKey, deploy_destinationListId,
_internalCallStatus,
deploy_error);
_error = deploy_error.getValue();
}
    std::future<CommonAPI::CallStatus> ListViewSortOrderDBusProxy::addItemAsync(const ::org::harman::nav::ctrl::common::list::ListTypes::ViewId &_sourceViewId, const ::org::harman::nav::ctrl::common::list::ListTypes::ViewKey &_sourceItemKey, const ::org::harman::nav::ctrl::common::list::ListTypes::ListId &_destinationListId, AddItemAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewId, CommonAPI::EmptyDeployment> deploy_sourceViewId(_sourceViewId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewKey, CommonAPI::EmptyDeployment> deploy_sourceItemKey(_sourceItemKey, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListId, ::org::harman::nav::ctrl::common::list::ListTypes_::ListIdDeployment_t> deploy_destinationListId(_destinationListId, static_cast<::org::harman::nav::ctrl::common::list::ListTypes_::ListIdDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewId, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ViewKey, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListId, ::org::harman::nav::ctrl::common::list::ListTypes_::ListIdDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "addItem",
        "qq(s)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sourceViewId, deploy_sourceItemKey, deploy_destinationListId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::org::harman::nav::ctrl::common::list::ListTypes::ListError, CommonAPI::EmptyDeployment> _deploy_error) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue());
        },
        std::make_tuple(deploy_error));
    }


void ListViewSortOrderDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace list
      } // namespace common
      } // namespace ctrl
      } // namespace nav
      } // namespace harman
      } // namespace org
      } // namespace v1
