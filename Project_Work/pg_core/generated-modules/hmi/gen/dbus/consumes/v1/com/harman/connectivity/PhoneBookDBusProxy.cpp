/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#include <v1/com/harman/connectivity/PhoneBookDBusProxy.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace connectivity {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createPhoneBookDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<PhoneBookDBusProxy>(_address, _connection);
}

INITIALIZER(registerPhoneBookDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		PhoneBook::getInterface(),
		&createPhoneBookDBusProxy);
}

PhoneBookDBusProxy::PhoneBookDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		pIMSYNCSTATUS_(*this, "PIMSYNCSTATUS", "ssiss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		pimObjectBackGndSyncInfo_(*this, "pimObjectBackGndSyncInfo", "siss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		databaseReady_(*this, "databaseReady", "si", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		databaseChanged_(*this, "databaseChanged", "ssiis", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		unreadMissedCall_(*this, "unreadMissedCall", "sssi", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		newCallList_(*this, "newCallList", "sssssssss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		connectedDeviceTableUpdated_(*this, "connectedDeviceTableUpdated", "sisi", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		connectedBtDevice_(*this, "connectedBtDevice", "ss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		newSMS_(*this, "newSMS", "sii", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		sendSMSNotification_(*this, "sendSMSNotification", "sii", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
{
}


PhoneBookDBusProxy::PIMSYNCSTATUSEvent& PhoneBookDBusProxy::getPIMSYNCSTATUSEvent() {
    return pIMSYNCSTATUS_;
}
PhoneBookDBusProxy::PimObjectBackGndSyncInfoEvent& PhoneBookDBusProxy::getPimObjectBackGndSyncInfoEvent() {
    return pimObjectBackGndSyncInfo_;
}
PhoneBookDBusProxy::DatabaseReadyEvent& PhoneBookDBusProxy::getDatabaseReadyEvent() {
    return databaseReady_;
}
PhoneBookDBusProxy::DatabaseChangedEvent& PhoneBookDBusProxy::getDatabaseChangedEvent() {
    return databaseChanged_;
}
PhoneBookDBusProxy::UnreadMissedCallEvent& PhoneBookDBusProxy::getUnreadMissedCallEvent() {
    return unreadMissedCall_;
}
PhoneBookDBusProxy::NewCallListEvent& PhoneBookDBusProxy::getNewCallListEvent() {
    return newCallList_;
}
PhoneBookDBusProxy::ConnectedDeviceTableUpdatedEvent& PhoneBookDBusProxy::getConnectedDeviceTableUpdatedEvent() {
    return connectedDeviceTableUpdated_;
}
PhoneBookDBusProxy::ConnectedBtDeviceEvent& PhoneBookDBusProxy::getConnectedBtDeviceEvent() {
    return connectedBtDevice_;
}
PhoneBookDBusProxy::NewSMSEvent& PhoneBookDBusProxy::getNewSMSEvent() {
    return newSMS_;
}
PhoneBookDBusProxy::SendSMSNotificationEvent& PhoneBookDBusProxy::getSendSMSNotificationEvent() {
    return sendSMSNotification_;
}
    
    void PhoneBookDBusProxy::getProperties(const std::string &_bdAddr, const ::v2::com::harman::connectivity::BaseType::arString &_properties, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_Description, ::v2::com::harman::connectivity::BaseType::arString &_propertiesValue, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> deploy_properties(_properties, static_cast<::v2::com::harman::connectivity::BaseType_::arStringDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Description(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> deploy_propertiesValue(static_cast<::v2::com::harman::connectivity::BaseType_::arStringDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString,::v2::com::harman::connectivity::BaseType_::arStringDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getProperties",
        "sas",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr, deploy_properties,
_internalCallStatus,
deploy_errorCode, deploy_Description, deploy_propertiesValue);
_errorCode = deploy_errorCode.getValue();
_Description = deploy_Description.getValue();
_propertiesValue = deploy_propertiesValue.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::getPropertiesAsync(const std::string &_bdAddr, const ::v2::com::harman::connectivity::BaseType::arString &_properties, GetPropertiesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> deploy_properties(_properties, static_cast<::v2::com::harman::connectivity::BaseType_::arStringDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Description(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> deploy_propertiesValue(static_cast<::v2::com::harman::connectivity::BaseType_::arStringDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString,::v2::com::harman::connectivity::BaseType_::arStringDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getProperties",
        "sas",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr, deploy_properties,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Description, CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> _propertiesValue) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _Description.getValue(), _propertiesValue.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_Description, deploy_propertiesValue));
    }
    void PhoneBookDBusProxy::getItemsCount(const std::string &_bdAddr, const std::string &_databaseType, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_Description, int32_t &_contactsCount, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_databaseType(_databaseType, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Description(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_contactsCount(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getItemsCount",
        "ss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr, deploy_databaseType,
_internalCallStatus,
deploy_errorCode, deploy_Description, deploy_contactsCount);
_errorCode = deploy_errorCode.getValue();
_Description = deploy_Description.getValue();
_contactsCount = deploy_contactsCount.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::getItemsCountAsync(const std::string &_bdAddr, const std::string &_databaseType, GetItemsCountAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_databaseType(_databaseType, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Description(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_contactsCount(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getItemsCount",
        "ss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr, deploy_databaseType,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Description, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _contactsCount) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _Description.getValue(), _contactsCount.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_Description, deploy_contactsCount));
    }
    void PhoneBookDBusProxy::getItems(const std::string &_bdAddr, const std::string &_databaseType, const ::v2::com::harman::connectivity::BaseType::arString &_fieldsList, const int32_t &_index, const int32_t &_count, const std::string &_sortCriteria, const std::string &_sortOrder, const std::string &_condition, const std::string &_filterCriteria, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_Description, ::v2::com::harman::connectivity::BaseType::arString &_resultPhonebook, int32_t &_outIndex, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_databaseType(_databaseType, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> deploy_fieldsList(_fieldsList, static_cast<::v2::com::harman::connectivity::BaseType_::arStringDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_index(_index, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_sortCriteria(_sortCriteria, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_sortOrder(_sortOrder, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_condition(_condition, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_filterCriteria(_filterCriteria, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Description(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> deploy_resultPhonebook(static_cast<::v2::com::harman::connectivity::BaseType_::arStringDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_outIndex(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString,::v2::com::harman::connectivity::BaseType_::arStringDeployment_t>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getItems",
        "ssasiissss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr, deploy_databaseType, deploy_fieldsList, deploy_index, deploy_count, deploy_sortCriteria, deploy_sortOrder, deploy_condition, deploy_filterCriteria,
_internalCallStatus,
deploy_errorCode, deploy_Description, deploy_resultPhonebook, deploy_outIndex);
_errorCode = deploy_errorCode.getValue();
_Description = deploy_Description.getValue();
_resultPhonebook = deploy_resultPhonebook.getValue();
_outIndex = deploy_outIndex.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::getItemsAsync(const std::string &_bdAddr, const std::string &_databaseType, const ::v2::com::harman::connectivity::BaseType::arString &_fieldsList, const int32_t &_index, const int32_t &_count, const std::string &_sortCriteria, const std::string &_sortOrder, const std::string &_condition, const std::string &_filterCriteria, GetItemsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_databaseType(_databaseType, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> deploy_fieldsList(_fieldsList, static_cast<::v2::com::harman::connectivity::BaseType_::arStringDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_index(_index, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_sortCriteria(_sortCriteria, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_sortOrder(_sortOrder, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_condition(_condition, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_filterCriteria(_filterCriteria, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Description(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> deploy_resultPhonebook(static_cast<::v2::com::harman::connectivity::BaseType_::arStringDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_outIndex(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString,::v2::com::harman::connectivity::BaseType_::arStringDeployment_t>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getItems",
        "ssasiissss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr, deploy_databaseType, deploy_fieldsList, deploy_index, deploy_count, deploy_sortCriteria, deploy_sortOrder, deploy_condition, deploy_filterCriteria,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Description, CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> _resultPhonebook, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _outIndex) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _Description.getValue(), _resultPhonebook.getValue(), _outIndex.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_Description, deploy_resultPhonebook, deploy_outIndex));
    }
    void PhoneBookDBusProxy::getItemsMoreInfo(const std::string &_bdAddr, const int32_t &_moreInfoByte, const int32_t &_contactsId, const std::string &_databaseType, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_Description, ::v2::com::harman::connectivity::BaseType::arString &_moreInfo, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_moreInfoByte(_moreInfoByte, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_contactsId(_contactsId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_databaseType(_databaseType, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Description(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> deploy_moreInfo(static_cast<::v2::com::harman::connectivity::BaseType_::arStringDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString,::v2::com::harman::connectivity::BaseType_::arStringDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getItemsMoreInfo",
        "siis",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr, deploy_moreInfoByte, deploy_contactsId, deploy_databaseType,
_internalCallStatus,
deploy_errorCode, deploy_Description, deploy_moreInfo);
_errorCode = deploy_errorCode.getValue();
_Description = deploy_Description.getValue();
_moreInfo = deploy_moreInfo.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::getItemsMoreInfoAsync(const std::string &_bdAddr, const int32_t &_moreInfoByte, const int32_t &_contactsId, const std::string &_databaseType, GetItemsMoreInfoAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_moreInfoByte(_moreInfoByte, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_contactsId(_contactsId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_databaseType(_databaseType, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Description(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> deploy_moreInfo(static_cast<::v2::com::harman::connectivity::BaseType_::arStringDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString,::v2::com::harman::connectivity::BaseType_::arStringDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getItemsMoreInfo",
        "siis",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr, deploy_moreInfoByte, deploy_contactsId, deploy_databaseType,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Description, CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> _moreInfo) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _Description.getValue(), _moreInfo.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_Description, deploy_moreInfo));
    }
    void PhoneBookDBusProxy::manualSync(const std::string &_bdAddr, const std::string &_databaseType, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_Description, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_databaseType(_databaseType, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Description(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "manualSync",
        "ss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr, deploy_databaseType,
_internalCallStatus,
deploy_errorCode, deploy_Description);
_errorCode = deploy_errorCode.getValue();
_Description = deploy_Description.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::manualSyncAsync(const std::string &_bdAddr, const std::string &_databaseType, ManualSyncAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_databaseType(_databaseType, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Description(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "manualSync",
        "ss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr, deploy_databaseType,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Description) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _Description.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_Description));
    }
    void PhoneBookDBusProxy::refreshPhonebook(const std::string &_bdAddr, const std::string &_databaseType, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_refresh_status, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_databaseType(_databaseType, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_refresh_status(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "refreshPhonebook",
        "ss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr, deploy_databaseType,
_internalCallStatus,
deploy_errorCode, deploy_refresh_status);
_errorCode = deploy_errorCode.getValue();
_refresh_status = deploy_refresh_status.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::refreshPhonebookAsync(const std::string &_bdAddr, const std::string &_databaseType, RefreshPhonebookAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_databaseType(_databaseType, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_refresh_status(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "refreshPhonebook",
        "ss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr, deploy_databaseType,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _refresh_status) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _refresh_status.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_refresh_status));
    }
    void PhoneBookDBusProxy::getCallStackCount(const std::string &_bdAddr, const std::string &_storageType, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_description, int32_t &_callStackCount, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_storageType(_storageType, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_description(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_callStackCount(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getCallStackCount",
        "ss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr, deploy_storageType,
_internalCallStatus,
deploy_errorCode, deploy_description, deploy_callStackCount);
_errorCode = deploy_errorCode.getValue();
_description = deploy_description.getValue();
_callStackCount = deploy_callStackCount.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::getCallStackCountAsync(const std::string &_bdAddr, const std::string &_storageType, GetCallStackCountAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_storageType(_storageType, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_description(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_callStackCount(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getCallStackCount",
        "ss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr, deploy_storageType,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _description, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _callStackCount) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _description.getValue(), _callStackCount.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_description, deploy_callStackCount));
    }
    void PhoneBookDBusProxy::getCallStackList(const std::string &_bdAddr, const std::string &_storageType, const int32_t &_startCallstacksFrom, const int32_t &_numCallstacks, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_Description, ::v2::com::harman::connectivity::BaseType::arString &_resultCallstacks, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_storageType(_storageType, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_startCallstacksFrom(_startCallstacksFrom, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_numCallstacks(_numCallstacks, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Description(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> deploy_resultCallstacks(static_cast<::v2::com::harman::connectivity::BaseType_::arStringDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString,::v2::com::harman::connectivity::BaseType_::arStringDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getCallStackList",
        "ssii",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr, deploy_storageType, deploy_startCallstacksFrom, deploy_numCallstacks,
_internalCallStatus,
deploy_errorCode, deploy_Description, deploy_resultCallstacks);
_errorCode = deploy_errorCode.getValue();
_Description = deploy_Description.getValue();
_resultCallstacks = deploy_resultCallstacks.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::getCallStackListAsync(const std::string &_bdAddr, const std::string &_storageType, const int32_t &_startCallstacksFrom, const int32_t &_numCallstacks, GetCallStackListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_storageType(_storageType, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_startCallstacksFrom(_startCallstacksFrom, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_numCallstacks(_numCallstacks, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Description(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> deploy_resultCallstacks(static_cast<::v2::com::harman::connectivity::BaseType_::arStringDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString,::v2::com::harman::connectivity::BaseType_::arStringDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getCallStackList",
        "ssii",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr, deploy_storageType, deploy_startCallstacksFrom, deploy_numCallstacks,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Description, CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> _resultCallstacks) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _Description.getValue(), _resultCallstacks.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_Description, deploy_resultCallstacks));
    }
    void PhoneBookDBusProxy::getAlphaJumpTable(const std::string &_bdAddr, const std::string &_database, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, ::v2::com::harman::connectivity::BaseType::arAlphaTable &_alphaTable, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_database(_database, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arAlphaTable, ::v2::com::harman::connectivity::BaseType_::arAlphaTableDeployment_t> deploy_alphaTable(static_cast<::v2::com::harman::connectivity::BaseType_::arAlphaTableDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arAlphaTable,::v2::com::harman::connectivity::BaseType_::arAlphaTableDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getAlphaJumpTable",
        "ss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr, deploy_database,
_internalCallStatus,
deploy_errorCode, deploy_alphaTable);
_errorCode = deploy_errorCode.getValue();
_alphaTable = deploy_alphaTable.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::getAlphaJumpTableAsync(const std::string &_bdAddr, const std::string &_database, GetAlphaJumpTableAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_database(_database, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arAlphaTable, ::v2::com::harman::connectivity::BaseType_::arAlphaTableDeployment_t> deploy_alphaTable(static_cast<::v2::com::harman::connectivity::BaseType_::arAlphaTableDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arAlphaTable,::v2::com::harman::connectivity::BaseType_::arAlphaTableDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getAlphaJumpTable",
        "ss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr, deploy_database,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arAlphaTable, ::v2::com::harman::connectivity::BaseType_::arAlphaTableDeployment_t> _alphaTable) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _alphaTable.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_alphaTable));
    }
    void PhoneBookDBusProxy::getNameByPhoneNum(const std::string &_bdAddr, const std::string &_database, const std::string &_phoneNumber, const std::string &_fieldList, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_get_status, ::v2::com::harman::connectivity::BaseType::arString &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_database(_database, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_phoneNumber(_phoneNumber, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_fieldList(_fieldList, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_get_status(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> deploy_result(static_cast<::v2::com::harman::connectivity::BaseType_::arStringDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString,::v2::com::harman::connectivity::BaseType_::arStringDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getNameByPhoneNum",
        "ssss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr, deploy_database, deploy_phoneNumber, deploy_fieldList,
_internalCallStatus,
deploy_errorCode, deploy_get_status, deploy_result);
_errorCode = deploy_errorCode.getValue();
_get_status = deploy_get_status.getValue();
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::getNameByPhoneNumAsync(const std::string &_bdAddr, const std::string &_database, const std::string &_phoneNumber, const std::string &_fieldList, GetNameByPhoneNumAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_database(_database, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_phoneNumber(_phoneNumber, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_fieldList(_fieldList, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_get_status(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> deploy_result(static_cast<::v2::com::harman::connectivity::BaseType_::arStringDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString,::v2::com::harman::connectivity::BaseType_::arStringDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getNameByPhoneNum",
        "ssss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr, deploy_database, deploy_phoneNumber, deploy_fieldList,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _get_status, CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _get_status.getValue(), _result.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_get_status, deploy_result));
    }
    void PhoneBookDBusProxy::searchContactsByNumber(const std::string &_bdAddr, const std::string &_database, const std::string &_sortCriteria, const std::string &_condition, const std::string &_sortOrder, const int32_t &_startId, const int32_t &_count, const std::string &_filterCriteria, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_search_status, int32_t &_itemNumber, ::v2::com::harman::connectivity::BaseType::arString &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_database(_database, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_sortCriteria(_sortCriteria, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_condition(_condition, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_sortOrder(_sortOrder, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_startId(_startId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_filterCriteria(_filterCriteria, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_search_status(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_itemNumber(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> deploy_result(static_cast<::v2::com::harman::connectivity::BaseType_::arStringDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString,::v2::com::harman::connectivity::BaseType_::arStringDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "searchContactsByNumber",
        "sssssiis",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr, deploy_database, deploy_sortCriteria, deploy_condition, deploy_sortOrder, deploy_startId, deploy_count, deploy_filterCriteria,
_internalCallStatus,
deploy_errorCode, deploy_search_status, deploy_itemNumber, deploy_result);
_errorCode = deploy_errorCode.getValue();
_search_status = deploy_search_status.getValue();
_itemNumber = deploy_itemNumber.getValue();
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::searchContactsByNumberAsync(const std::string &_bdAddr, const std::string &_database, const std::string &_sortCriteria, const std::string &_condition, const std::string &_sortOrder, const int32_t &_startId, const int32_t &_count, const std::string &_filterCriteria, SearchContactsByNumberAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_database(_database, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_sortCriteria(_sortCriteria, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_condition(_condition, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_sortOrder(_sortOrder, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_startId(_startId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_filterCriteria(_filterCriteria, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_search_status(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_itemNumber(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> deploy_result(static_cast<::v2::com::harman::connectivity::BaseType_::arStringDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString,::v2::com::harman::connectivity::BaseType_::arStringDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "searchContactsByNumber",
        "sssssiis",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr, deploy_database, deploy_sortCriteria, deploy_condition, deploy_sortOrder, deploy_startId, deploy_count, deploy_filterCriteria,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _search_status, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _itemNumber, CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arString, ::v2::com::harman::connectivity::BaseType_::arStringDeployment_t> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _search_status.getValue(), _itemNumber.getValue(), _result.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_search_status, deploy_itemNumber, deploy_result));
    }
    void PhoneBookDBusProxy::getNextValidCharacters(const std::string &_bdAddr, const std::string &_databaseType, const std::string &_inputName, const std::string &_sortCriteria, const std::string &_sortOrder, const std::string &_condition, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_get_char_status, int32_t &_contactsCount, int32_t &_index, std::string &_charactersMask, std::string &_firstMatch, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_databaseType(_databaseType, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inputName(_inputName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_sortCriteria(_sortCriteria, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_sortOrder(_sortOrder, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_condition(_condition, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_get_char_status(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_contactsCount(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_index(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_charactersMask(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_firstMatch(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getNextValidCharacters",
        "ssssss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr, deploy_databaseType, deploy_inputName, deploy_sortCriteria, deploy_sortOrder, deploy_condition,
_internalCallStatus,
deploy_errorCode, deploy_get_char_status, deploy_contactsCount, deploy_index, deploy_charactersMask, deploy_firstMatch);
_errorCode = deploy_errorCode.getValue();
_get_char_status = deploy_get_char_status.getValue();
_contactsCount = deploy_contactsCount.getValue();
_index = deploy_index.getValue();
_charactersMask = deploy_charactersMask.getValue();
_firstMatch = deploy_firstMatch.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::getNextValidCharactersAsync(const std::string &_bdAddr, const std::string &_databaseType, const std::string &_inputName, const std::string &_sortCriteria, const std::string &_sortOrder, const std::string &_condition, GetNextValidCharactersAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_databaseType(_databaseType, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inputName(_inputName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_sortCriteria(_sortCriteria, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_sortOrder(_sortOrder, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_condition(_condition, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_get_char_status(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_contactsCount(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_index(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_charactersMask(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_firstMatch(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getNextValidCharacters",
        "ssssss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr, deploy_databaseType, deploy_inputName, deploy_sortCriteria, deploy_sortOrder, deploy_condition,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _get_char_status, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _contactsCount, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _index, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _charactersMask, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _firstMatch) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _get_char_status.getValue(), _contactsCount.getValue(), _index.getValue(), _charactersMask.getValue(), _firstMatch.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_get_char_status, deploy_contactsCount, deploy_index, deploy_charactersMask, deploy_firstMatch));
    }
    void PhoneBookDBusProxy::setFormattedNameOrder(const std::string &_bdAddr, const std::string &_formattedNameOrder, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_Description, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_formattedNameOrder(_formattedNameOrder, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Description(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setFormattedNameOrder",
        "ss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr, deploy_formattedNameOrder,
_internalCallStatus,
deploy_errorCode, deploy_Description);
_errorCode = deploy_errorCode.getValue();
_Description = deploy_Description.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::setFormattedNameOrderAsync(const std::string &_bdAddr, const std::string &_formattedNameOrder, SetFormattedNameOrderAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_formattedNameOrder(_formattedNameOrder, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Description(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setFormattedNameOrder",
        "ss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr, deploy_formattedNameOrder,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Description) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _Description.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_Description));
    }
    void PhoneBookDBusProxy::getFormattedNameOrder(const std::string &_bdAddr, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_Description, std::string &_formattedNameOrder, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Description(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_formattedNameOrder(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getFormattedNameOrder",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr,
_internalCallStatus,
deploy_errorCode, deploy_Description, deploy_formattedNameOrder);
_errorCode = deploy_errorCode.getValue();
_Description = deploy_Description.getValue();
_formattedNameOrder = deploy_formattedNameOrder.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::getFormattedNameOrderAsync(const std::string &_bdAddr, GetFormattedNameOrderAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Description(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_formattedNameOrder(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getFormattedNameOrder",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Description, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _formattedNameOrder) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _Description.getValue(), _formattedNameOrder.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_Description, deploy_formattedNameOrder));
    }
    void PhoneBookDBusProxy::getSMS(const std::string &_bdAddr, const int32_t &_smsId, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, ::v2::com::harman::connectivity::BaseType::smsentry &_sms, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_smsId(_smsId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::smsentry, ::v2::com::harman::connectivity::BaseType_::smsentryDeployment_t> deploy_sms(static_cast<::v2::com::harman::connectivity::BaseType_::smsentryDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::smsentry,::v2::com::harman::connectivity::BaseType_::smsentryDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getSMS",
        "si",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr, deploy_smsId,
_internalCallStatus,
deploy_errorCode, deploy_sms);
_errorCode = deploy_errorCode.getValue();
_sms = deploy_sms.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::getSMSAsync(const std::string &_bdAddr, const int32_t &_smsId, GetSMSAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_smsId(_smsId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::smsentry, ::v2::com::harman::connectivity::BaseType_::smsentryDeployment_t> deploy_sms(static_cast<::v2::com::harman::connectivity::BaseType_::smsentryDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::smsentry,::v2::com::harman::connectivity::BaseType_::smsentryDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getSMS",
        "si",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr, deploy_smsId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::smsentry, ::v2::com::harman::connectivity::BaseType_::smsentryDeployment_t> _sms) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _sms.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_sms));
    }
    void PhoneBookDBusProxy::getSMSCount(const std::string &_bdAddr, const ::v2::com::harman::connectivity::BaseType::foldertype &_folder, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, int32_t &_count, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::foldertype, CommonAPI::EmptyDeployment> deploy_folder(_folder, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_count(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::foldertype, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getSMSCount",
        "si",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr, deploy_folder,
_internalCallStatus,
deploy_errorCode, deploy_count);
_errorCode = deploy_errorCode.getValue();
_count = deploy_count.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::getSMSCountAsync(const std::string &_bdAddr, const ::v2::com::harman::connectivity::BaseType::foldertype &_folder, GetSMSCountAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::foldertype, CommonAPI::EmptyDeployment> deploy_folder(_folder, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_count(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::foldertype, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getSMSCount",
        "si",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr, deploy_folder,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _count) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _count.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_count));
    }
    void PhoneBookDBusProxy::getSMSList(const std::string &_bdAddr, const int32_t &_startSMSFrom, const ::v2::com::harman::connectivity::BaseType::foldertype &_folder, const int32_t &_numSMS, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, ::v2::com::harman::connectivity::BaseType::arSMS &_smsList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_startSMSFrom(_startSMSFrom, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::foldertype, CommonAPI::EmptyDeployment> deploy_folder(_folder, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_numSMS(_numSMS, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arSMS, ::v2::com::harman::connectivity::BaseType_::arSMSDeployment_t> deploy_smsList(static_cast<::v2::com::harman::connectivity::BaseType_::arSMSDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::foldertype, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arSMS,::v2::com::harman::connectivity::BaseType_::arSMSDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getSMSList",
        "siii",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr, deploy_startSMSFrom, deploy_folder, deploy_numSMS,
_internalCallStatus,
deploy_errorCode, deploy_smsList);
_errorCode = deploy_errorCode.getValue();
_smsList = deploy_smsList.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::getSMSListAsync(const std::string &_bdAddr, const int32_t &_startSMSFrom, const ::v2::com::harman::connectivity::BaseType::foldertype &_folder, const int32_t &_numSMS, GetSMSListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_startSMSFrom(_startSMSFrom, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::foldertype, CommonAPI::EmptyDeployment> deploy_folder(_folder, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_numSMS(_numSMS, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arSMS, ::v2::com::harman::connectivity::BaseType_::arSMSDeployment_t> deploy_smsList(static_cast<::v2::com::harman::connectivity::BaseType_::arSMSDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::foldertype, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arSMS,::v2::com::harman::connectivity::BaseType_::arSMSDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getSMSList",
        "siii",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr, deploy_startSMSFrom, deploy_folder, deploy_numSMS,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arSMS, ::v2::com::harman::connectivity::BaseType_::arSMSDeployment_t> _smsList) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _smsList.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_smsList));
    }
    void PhoneBookDBusProxy::getUnreadSMSCount(const std::string &_bdAddr, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, int32_t &_count, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_count(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getUnreadSMSCount",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr,
_internalCallStatus,
deploy_errorCode, deploy_count);
_errorCode = deploy_errorCode.getValue();
_count = deploy_count.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::getUnreadSMSCountAsync(const std::string &_bdAddr, GetUnreadSMSCountAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_count(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getUnreadSMSCount",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _count) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _count.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_count));
    }
    void PhoneBookDBusProxy::getUnreadSMSList(const std::string &_bdAddr, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, ::v2::com::harman::connectivity::BaseType::arSMS &_smsList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arSMS, ::v2::com::harman::connectivity::BaseType_::arSMSDeployment_t> deploy_smsList(static_cast<::v2::com::harman::connectivity::BaseType_::arSMSDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arSMS,::v2::com::harman::connectivity::BaseType_::arSMSDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getUnreadSMSList",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr,
_internalCallStatus,
deploy_errorCode, deploy_smsList);
_errorCode = deploy_errorCode.getValue();
_smsList = deploy_smsList.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::getUnreadSMSListAsync(const std::string &_bdAddr, GetUnreadSMSListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arSMS, ::v2::com::harman::connectivity::BaseType_::arSMSDeployment_t> deploy_smsList(static_cast<::v2::com::harman::connectivity::BaseType_::arSMSDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arSMS,::v2::com::harman::connectivity::BaseType_::arSMSDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getUnreadSMSList",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<::v2::com::harman::connectivity::BaseType::arSMS, ::v2::com::harman::connectivity::BaseType_::arSMSDeployment_t> _smsList) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _smsList.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_smsList));
    }
    void PhoneBookDBusProxy::sendSMS(const std::string &_bdAddr, const std::string &_destinationNumber, const std::string &_smsBody, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_contactName, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_destinationNumber(_destinationNumber, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_smsBody(_smsBody, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_contactName(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "sendSMS",
        "sss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr, deploy_destinationNumber, deploy_smsBody,
_internalCallStatus,
deploy_errorCode, deploy_contactName);
_errorCode = deploy_errorCode.getValue();
_contactName = deploy_contactName.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::sendSMSAsync(const std::string &_bdAddr, const std::string &_destinationNumber, const std::string &_smsBody, SendSMSAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_destinationNumber(_destinationNumber, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_smsBody(_smsBody, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_contactName(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "sendSMS",
        "sss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr, deploy_destinationNumber, deploy_smsBody,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _contactName) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue(), _contactName.getValue());
        },
        std::make_tuple(deploy_errorCode, deploy_contactName));
    }
    void PhoneBookDBusProxy::setSMSReadStatus(const std::string &_bdAddr, const int32_t &_smsId, const std::string &_read_status, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_smsId(_smsId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_read_status(_read_status, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setSMSReadStatus",
        "sis",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr, deploy_smsId, deploy_read_status,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::setSMSReadStatusAsync(const std::string &_bdAddr, const int32_t &_smsId, const std::string &_read_status, SetSMSReadStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_smsId(_smsId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_read_status(_read_status, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setSMSReadStatus",
        "sis",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr, deploy_smsId, deploy_read_status,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    void PhoneBookDBusProxy::insertItem(const std::string &_bdAddr, const std::string &_database, const int32_t &_contactId, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_database(_database, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_contactId(_contactId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "insertItem",
        "ssi",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr, deploy_database, deploy_contactId,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::insertItemAsync(const std::string &_bdAddr, const std::string &_database, const int32_t &_contactId, InsertItemAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_database(_database, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_contactId(_contactId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "insertItem",
        "ssi",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr, deploy_database, deploy_contactId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    void PhoneBookDBusProxy::deleteItem(const std::string &_bdAddr, const std::string &_database, const int32_t &_contactId, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_database(_database, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_contactId(_contactId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "deleteItem",
        "ssi",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr, deploy_database, deploy_contactId,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::deleteItemAsync(const std::string &_bdAddr, const std::string &_database, const int32_t &_contactId, DeleteItemAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_database(_database, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_contactId(_contactId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "deleteItem",
        "ssi",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr, deploy_database, deploy_contactId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    void PhoneBookDBusProxy::deleteAllItems(const std::string &_bdAddr, const std::string &_database, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_database(_database, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "deleteAllItems",
        "ss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_bdAddr, deploy_database,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> PhoneBookDBusProxy::deleteAllItemsAsync(const std::string &_bdAddr, const std::string &_database, DeleteAllItemsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bdAddr(_bdAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_database(_database, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "deleteAllItems",
        "ss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_bdAddr, deploy_database,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }


void PhoneBookDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace connectivity
      } // namespace harman
      } // namespace com
      } // namespace v1
