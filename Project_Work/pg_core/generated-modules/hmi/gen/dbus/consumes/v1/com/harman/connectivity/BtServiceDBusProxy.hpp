/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V1_COM_HARMAN_CONNECTIVITY_Bt_Service_DBUS_PROXY_HPP_
#define V1_COM_HARMAN_CONNECTIVITY_Bt_Service_DBUS_PROXY_HPP_

#include <v1/com/harman/connectivity/BtServiceProxyBase.hpp>
#include "v1/com/harman/connectivity/BtServiceDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace com {
namespace harman {
namespace connectivity {

class BtServiceDBusProxy
    : virtual public BtServiceProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    BtServiceDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~BtServiceDBusProxy() { }


    virtual BluetoothStatusEvent& getBluetoothStatusEvent();
    virtual OnOffStateEvent& getOnOffStateEvent();
    virtual LocalDevAddrEvent& getLocalDevAddrEvent();
    virtual PasskeyEvent& getPasskeyEvent();
    virtual SignalQualityEvent& getSignalQualityEvent();
    virtual VrModeEvent& getVrModeEvent();
    virtual NetworkOperatorEvent& getNetworkOperatorEvent();
    virtual SupportedFeaturesEvent& getSupportedFeaturesEvent();
    virtual DeviceSearchListEvent& getDeviceSearchListEvent();
    virtual StandardBondingRequestEvent& getStandardBondingRequestEvent();
    virtual SecureSimpleBondingRequestEvent& getSecureSimpleBondingRequestEvent();
    virtual ServiceConnectionRequestEvent& getServiceConnectionRequestEvent();
    virtual ServiceConnectedEvent& getServiceConnectedEvent();
    virtual ServiceDisconnectedEvent& getServiceDisconnectedEvent();
    virtual DeviceDisconnectedEvent& getDeviceDisconnectedEvent();
    virtual ServiceConnectionErrorEvent& getServiceConnectionErrorEvent();
    virtual BondedDeviceProfileListChangedEvent& getBondedDeviceProfileListChangedEvent();
    virtual BondedDeviceServiceListChangedEvent& getBondedDeviceServiceListChangedEvent();
    virtual DeviceDeletedEvent& getDeviceDeletedEvent();
    virtual NetworkIfUpEvent& getNetworkIfUpEvent();
    virtual NetworkIfDownEvent& getNetworkIfDownEvent();
    virtual BondingStatusEvent& getBondingStatusEvent();
    virtual IncomingCallInfoEvent& getIncomingCallInfoEvent();
    virtual HandsFreeModeEvent& getHandsFreeModeEvent();
    virtual AudioStatusEvent& getAudioStatusEvent();
    virtual BatteryChargeEvent& getBatteryChargeEvent();
    virtual NetworkOperatorChangedEvent& getNetworkOperatorChangedEvent();
    virtual NetworkRegistrationStateEvent& getNetworkRegistrationStateEvent();
    virtual CallStatusEvent& getCallStatusEvent();
    virtual CallListUpdateEvent& getCallListUpdateEvent();

    virtual void setIgnitionState(const bool &_ignitionState, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setIgnitionStateAsync(const bool &_ignitionState, SetIgnitionStateAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getPropBluetoothStatus(CommonAPI::CallStatus &_internalCallStatus, bool &_Status, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getPropBluetoothStatusAsync(GetPropBluetoothStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getSignalQuality(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_signalQual, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSignalQualityAsync(const std::string &_inAddress, GetSignalQualityAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getBatteryCharge(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_batteryCharge, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getBatteryChargeAsync(const std::string &_inAddress, GetBatteryChargeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getPropLocalDeviceAddress(CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getPropLocalDeviceAddressAsync(GetPropLocalDeviceAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getPropLocalDeviceName(CommonAPI::CallStatus &_internalCallStatus, std::string &_name, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getPropLocalDeviceNameAsync(GetPropLocalDeviceNameAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getHfpConnectionStatus(CommonAPI::CallStatus &_internalCallStatus, bool &_Status, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getHfpConnectionStatusAsync(GetHfpConnectionStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getPropBondedDeviceList(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::bondedDevList &_list, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getPropBondedDeviceListAsync(GetPropBondedDeviceListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getSupportedFeatures(const std::string &_inAddrress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, ::com::harman::connectivity::btTypedefs::stringList &_featureList, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedFeaturesAsync(const std::string &_inAddrress, GetSupportedFeaturesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getNetworkAvailability(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, bool &_netwrkStatus, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getNetworkAvailabilityAsync(const std::string &_inAddress, GetNetworkAvailabilityAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getNetworkRegistrationState(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_regState, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getNetworkRegistrationStateAsync(const std::string &_inAddress, GetNetworkRegistrationStateAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getSubscriberNumber(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_subscrbNum, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSubscriberNumberAsync(const std::string &_inAddress, GetSubscriberNumberAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getlastConnectedDevice(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::lastConnectedDevList &_list, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getlastConnectedDeviceAsync(GetlastConnectedDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getCallStateEventData(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, ::com::harman::connectivity::btTypedefs::callstateInfoList &_list, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCallStateEventDataAsync(const std::string &_inAddress, GetCallStateEventDataAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void sppInterfaces(CommonAPI::CallStatus &_internalCallStatus, std::vector<std::string> &_devA, std::vector<std::string> &_devB, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> sppInterfacesAsync(SppInterfacesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void enterBondingMode(const uint32_t &_timeout, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> enterBondingModeAsync(const uint32_t &_timeout, EnterBondingModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void exitBondingMode(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> exitBondingModeAsync(ExitBondingModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void changePriority(const std::string &_inAddress, const std::string &_service, const int32_t &_priority, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> changePriorityAsync(const std::string &_inAddress, const std::string &_service, const int32_t &_priority, ChangePriorityAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void startDeviceSearch(const uint32_t &_maxDevice, const uint32_t &_timeout, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> startDeviceSearchAsync(const uint32_t &_maxDevice, const uint32_t &_timeout, StartDeviceSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void stopDeviceSearch(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> stopDeviceSearchAsync(StopDeviceSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void secureSimpleBondingReply(const std::string &_inAddress, const bool &_accept, const bool &_trusted, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> secureSimpleBondingReplyAsync(const std::string &_inAddress, const bool &_accept, const bool &_trusted, SecureSimpleBondingReplyAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void deleteDevice(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> deleteDeviceAsync(const std::string &_inAddress, DeleteDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void deleteAllDevices(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> deleteAllDevicesAsync(DeleteAllDevicesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void startServiceConnection(const std::string &_inAddress, const std::string &_service, const std::string &_instanceName, const std::string &_replaceAddr, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_devName, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> startServiceConnectionAsync(const std::string &_inAddress, const std::string &_service, const std::string &_instanceName, const std::string &_replaceAddr, StartServiceConnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void allowServiceConnection(const std::string &_inAddress, const std::string &_service, const bool &_allow, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> allowServiceConnectionAsync(const std::string &_inAddress, const std::string &_service, const bool &_allow, AllowServiceConnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void startServiceDisconnection(const std::string &_inAddress, const std::string &_service, const bool &_internalReq, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> startServiceDisconnectionAsync(const std::string &_inAddress, const std::string &_service, const bool &_internalReq, StartServiceDisconnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void serviceConnectionReply(const std::string &_inAddress, const std::string &_service, const bool &_accept, const std::string &_instanceName, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_devName, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> serviceConnectionReplyAsync(const std::string &_inAddress, const std::string &_service, const bool &_accept, const std::string &_instanceName, ServiceConnectionReplyAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getBondedDeviceServiceList(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getBondedDeviceServiceListAsync(const std::string &_inAddress, GetBondedDeviceServiceListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getRadioStatus(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::stringList &_addrList, ::com::harman::connectivity::btTypedefs::stringList &_connRoleList, ::com::harman::connectivity::btTypedefs::integerList &_linkQualitylist, ::com::harman::connectivity::btTypedefs::integerList &_rssiList, ::com::harman::connectivity::btTypedefs::integerList &_txPowerList, ::com::harman::connectivity::btTypedefs::stringList &_modeTypeList, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getRadioStatusAsync(GetRadioStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void renameBondedDevice(const std::string &_inAddress, const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> renameBondedDeviceAsync(const std::string &_inAddress, const std::string &_name, RenameBondedDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void renameLocalDevice(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> renameLocalDeviceAsync(const std::string &_name, RenameLocalDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void startAutoConnect(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> startAutoConnectAsync(StartAutoConnectAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void pauseAutoConnect(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> pauseAutoConnectAsync(PauseAutoConnectAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void stopAutoConnect(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> stopAutoConnectAsync(StopAutoConnectAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setAutoConnectServices(const std::string &_serviceName, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setAutoConnectServicesAsync(const std::string &_serviceName, SetAutoConnectServicesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void clearAutoConnectServices(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> clearAutoConnectServicesAsync(ClearAutoConnectServicesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getNetworkOperatorInfo(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_code, std::string &_longName, std::string &_shortName, std::string &_mode, std::string &_accTech, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getNetworkOperatorInfoAsync(const std::string &_inAddress, GetNetworkOperatorInfoAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getBondedDeviceList(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::btTypedefs::bondedDevList &_list, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getBondedDeviceListAsync(GetBondedDeviceListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setBluetoothOn(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setBluetoothOnAsync(SetBluetoothOnAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setBluetoothOff(const bool &_doNotStore, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setBluetoothOffAsync(const bool &_doNotStore, SetBluetoothOffAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void serviceListQuery(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, ::com::harman::connectivity::btTypedefs::serviceList &_list, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> serviceListQueryAsync(const std::string &_inAddress, ServiceListQueryAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setPin(const std::string &_passkey, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setPinAsync(const std::string &_passkey, SetPinAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void dial(const std::string &_inAddress, const std::string &_num, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_callId, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> dialAsync(const std::string &_inAddress, const std::string &_num, DialAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void reDial(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_callId, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> reDialAsync(const std::string &_inAddress, ReDialAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void sendDtmfTone(const std::string &_inAddress, const std::string &_dtmfTone, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> sendDtmfToneAsync(const std::string &_inAddress, const std::string &_dtmfTone, SendDtmfToneAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void acceptIncomingCall(const std::string &_inAddress, const bool &_transfer, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> acceptIncomingCallAsync(const std::string &_inAddress, const bool &_transfer, AcceptIncomingCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void endCall(const std::string &_inAddress, const int32_t &_callId, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> endCallAsync(const std::string &_inAddress, const int32_t &_callId, EndCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void endActiveCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> endActiveCallAsync(const std::string &_inAddress, EndActiveCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void endAllCalls(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> endAllCallsAsync(const std::string &_inAddress, EndAllCallsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void rejectIncomingCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> rejectIncomingCallAsync(const std::string &_inAddress, RejectIncomingCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void holdActiveCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> holdActiveCallAsync(const std::string &_inAddress, HoldActiveCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void resumeHeldCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> resumeHeldCallAsync(const std::string &_inAddress, ResumeHeldCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void conferenceCall(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> conferenceCallAsync(const std::string &_inAddress, ConferenceCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void selectCall(const std::string &_inAddress, const int32_t &_callId, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> selectCallAsync(const std::string &_inAddress, const int32_t &_callId, SelectCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setHfMode(const std::string &_inAddress, const bool &_hfMode, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setHfModeAsync(const std::string &_inAddress, const bool &_hfMode, SetHfModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setSSPDebugMode(const int32_t &_debugMode, CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setSSPDebugModeAsync(const int32_t &_debugMode, SetSSPDebugModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setVRMode(const std::string &_inAddress, const bool &_mode, CommonAPI::CallStatus &_internalCallStatus, std::string &_OutAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setVRModeAsync(const std::string &_inAddress, const bool &_mode, SetVRModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setEyesFree(const std::string &_inAddress, const bool &_toSet, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setEyesFreeAsync(const std::string &_inAddress, const bool &_toSet, SetEyesFreeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void clearTransferTimeout(CommonAPI::CallStatus &_internalCallStatus, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> clearTransferTimeoutAsync(ClearTransferTimeoutAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void swapCalls(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, std::string &_outAddress, std::string &_reason, int32_t &_errorCode, std::string &_errorDesc, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> swapCallsAsync(const std::string &_inAddress, SwapCallsAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<BluetoothStatusEvent, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> bluetoothStatus_;
    CommonAPI::DBus::DBusEvent<OnOffStateEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> onOffState_;
    CommonAPI::DBus::DBusEvent<LocalDevAddrEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> localDevAddr_;
    CommonAPI::DBus::DBusEvent<PasskeyEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> passkey_;
    CommonAPI::DBus::DBusEvent<SignalQualityEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>> signalQuality_;
    CommonAPI::DBus::DBusEvent<VrModeEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> vrMode_;
    CommonAPI::DBus::DBusEvent<NetworkOperatorEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> networkOperator_;
    CommonAPI::DBus::DBusEvent<SupportedFeaturesEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::stringList, ::com::harman::connectivity::btTypedefs_::stringListDeployment_t>> supportedFeatures_;
    CommonAPI::DBus::DBusEvent<DeviceSearchListEvent, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::deviceSearchEntryList, ::com::harman::connectivity::btTypedefs_::deviceSearchEntryListDeployment_t>> deviceSearchList_;
    CommonAPI::DBus::DBusEvent<StandardBondingRequestEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>> standardBondingRequest_;
    CommonAPI::DBus::DBusEvent<SecureSimpleBondingRequestEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> secureSimpleBondingRequest_;
    CommonAPI::DBus::DBusEvent<ServiceConnectionRequestEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> serviceConnectionRequest_;
    CommonAPI::DBus::DBusEvent<ServiceConnectedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> serviceConnected_;
    CommonAPI::DBus::DBusEvent<ServiceDisconnectedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> serviceDisconnected_;
    CommonAPI::DBus::DBusEvent<DeviceDisconnectedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> deviceDisconnected_;
    CommonAPI::DBus::DBusEvent<ServiceConnectionErrorEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> serviceConnectionError_;
    CommonAPI::DBus::DBusEvent<BondedDeviceProfileListChangedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::profileList, ::com::harman::connectivity::btTypedefs_::profileListDeployment_t>> bondedDeviceProfileListChanged_;
    CommonAPI::DBus::DBusEvent<BondedDeviceServiceListChangedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::serviceList, ::com::harman::connectivity::btTypedefs_::serviceListDeployment_t>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> bondedDeviceServiceListChanged_;
    CommonAPI::DBus::DBusEvent<DeviceDeletedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> deviceDeleted_;
    CommonAPI::DBus::DBusEvent<NetworkIfUpEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> networkIfUp_;
    CommonAPI::DBus::DBusEvent<NetworkIfDownEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> networkIfDown_;
    CommonAPI::DBus::DBusEvent<BondingStatusEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> bondingStatus_;
    CommonAPI::DBus::DBusEvent<IncomingCallInfoEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> incomingCallInfo_;
    CommonAPI::DBus::DBusEvent<HandsFreeModeEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> handsFreeMode_;
    CommonAPI::DBus::DBusEvent<AudioStatusEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> audioStatus_;
    CommonAPI::DBus::DBusEvent<BatteryChargeEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>> batteryCharge_;
    CommonAPI::DBus::DBusEvent<NetworkOperatorChangedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> networkOperatorChanged_;
    CommonAPI::DBus::DBusEvent<NetworkRegistrationStateEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> networkRegistrationState_;
    CommonAPI::DBus::DBusEvent<CallStatusEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<::com::harman::connectivity::btTypedefs::callstateInfoList, ::com::harman::connectivity::btTypedefs_::callstateInfoListDeployment_t>> callStatus_;
    CommonAPI::DBus::DBusEvent<CallListUpdateEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> callListUpdate_;

};

} // namespace connectivity
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_CONNECTIVITY_Bt_Service_DBUS_PROXY_HPP_

