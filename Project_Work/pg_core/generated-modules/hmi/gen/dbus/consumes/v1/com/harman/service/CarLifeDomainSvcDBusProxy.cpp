/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#include <v1/com/harman/service/CarLifeDomainSvcDBusProxy.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace service {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createCarLifeDomainSvcDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<CarLifeDomainSvcDBusProxy>(_address, _connection);
}

INITIALIZER(registerCarLifeDomainSvcDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		CarLifeDomainSvc::getInterface(),
		&createCarLifeDomainSvcDBusProxy);
}

CarLifeDomainSvcDBusProxy::CarLifeDomainSvcDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		sessionStatus_(*this, "sessionStatus", "is", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		remoteScreenActive_(*this, "remoteScreenActive", "", std::make_tuple()),
		remoteScreenInactive_(*this, "remoteScreenInactive", "", std::make_tuple()),
		requestScreen_(*this, "requestScreen", "", std::make_tuple())
{
}


CarLifeDomainSvcDBusProxy::SessionStatusEvent& CarLifeDomainSvcDBusProxy::getSessionStatusEvent() {
    return sessionStatus_;
}
CarLifeDomainSvcDBusProxy::RemoteScreenActiveEvent& CarLifeDomainSvcDBusProxy::getRemoteScreenActiveEvent() {
    return remoteScreenActive_;
}
CarLifeDomainSvcDBusProxy::RemoteScreenInactiveEvent& CarLifeDomainSvcDBusProxy::getRemoteScreenInactiveEvent() {
    return remoteScreenInactive_;
}
CarLifeDomainSvcDBusProxy::RequestScreenEvent& CarLifeDomainSvcDBusProxy::getRequestScreenEvent() {
    return requestScreen_;
}
    
    void CarLifeDomainSvcDBusProxy::showRemoteScreen(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "showRemoteScreen",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> CarLifeDomainSvcDBusProxy::showRemoteScreenAsync(ShowRemoteScreenAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "showRemoteScreen",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    void CarLifeDomainSvcDBusProxy::hideRemoteScreen(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "hideRemoteScreen",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> CarLifeDomainSvcDBusProxy::hideRemoteScreenAsync(HideRemoteScreenAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "hideRemoteScreen",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    void CarLifeDomainSvcDBusProxy::setButtonEvent(const bool &_isBtnPressed, const CarLifeDomainSvc::enCarLifeHardButtonType &_btnType, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_isBtnPressed(_isBtnPressed, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<CarLifeDomainSvc::enCarLifeHardButtonType, CommonAPI::EmptyDeployment> deploy_btnType(_btnType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<CarLifeDomainSvc::enCarLifeHardButtonType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setButtonEvent",
        "bi",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_isBtnPressed, deploy_btnType,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> CarLifeDomainSvcDBusProxy::setButtonEventAsync(const bool &_isBtnPressed, const CarLifeDomainSvc::enCarLifeHardButtonType &_btnType, SetButtonEventAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_isBtnPressed(_isBtnPressed, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<CarLifeDomainSvc::enCarLifeHardButtonType, CommonAPI::EmptyDeployment> deploy_btnType(_btnType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<CarLifeDomainSvc::enCarLifeHardButtonType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setButtonEvent",
        "bi",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_isBtnPressed, deploy_btnType,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }


void CarLifeDomainSvcDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace service
      } // namespace harman
      } // namespace com
      } // namespace v1
