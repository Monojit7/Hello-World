/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#include <v1/org/genivi/mediamanager/BrowserDBusProxy.hpp>

namespace v1 {
namespace org {
namespace genivi {
namespace mediamanager {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createBrowserDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<BrowserDBusProxy>(_address, _connection);
}

INITIALIZER(registerBrowserDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		Browser::getInterface(),
		&createBrowserDBusProxy);
}

BrowserDBusProxy::BrowserDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
{
}


    
    /**
     * description: Return a list of all media manager identifiers. These are
             used to
     *   indicate which media manager we should interact with.
             returns: A list
     *   of all media managers found
     */
    void BrowserDBusProxy::discoverMediaManagers(CommonAPI::CallStatus &_internalCallStatus, std::vector<std::string> &_identifiers, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_identifiers(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<std::string>,CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "discoverMediaManagers",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_identifiers, deploy_e);
_identifiers = deploy_identifiers.getValue();
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> BrowserDBusProxy::discoverMediaManagersAsync(DiscoverMediaManagersAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_identifiers(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<std::string>,CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "discoverMediaManagers",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> _identifiers, CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _identifiers.getValue(), _e.getValue());
        },
        std::make_tuple(deploy_identifiers, deploy_e));
    }
    /**
     * description: List all containers below the given path.
             returns: ResultMapList of
     *   all containers with the given path as parent.
             	   	  See
     *   MediaTypes.fidl for a list of allowed keys.
             errors: NO_CONNECTION if
     *   no connection can be established to underlying
                     browsing
     *   engine
                     BAD_PATH if path parameter is invalid
     * param: path The path to search for containers. The format of the path
                   
     *   depends on the underlying browsing backend
     * param: offset: The offset to use for indexing the results list
     * param: count: The number of results to return, starting from offset
     * param: filter: Array of keys to include in resulting ResultMapList
     */
    void BrowserDBusProxy::listContainers(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_filter(_filter, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "listContainers",
        "sttas",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_path, deploy_offset, deploy_count, deploy_filter,
_internalCallStatus,
deploy_m, deploy_e);
_m = deploy_m.getValue();
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> BrowserDBusProxy::listContainersAsync(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, ListContainersAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_filter(_filter, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "listContainers",
        "sttas",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_path, deploy_offset, deploy_count, deploy_filter,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> _m, CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _m.getValue(), _e.getValue());
        },
        std::make_tuple(deploy_m, deploy_e));
    }
    /**
     * description: Extends ListContainers with sorting capabilities
     * param: sortKey Key to sort ResultMapList on
     */
    void BrowserDBusProxy::listContainersEx(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const ::v1::org::genivi::mediamanager::BrowserTypes::SortKey &_sortKey, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_filter(_filter, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::SortKey, ::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t> deploy_sortKey(_sortKey, static_cast<::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::SortKey, ::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "listContainersEx",
        "sttas(is)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_path, deploy_offset, deploy_count, deploy_filter, deploy_sortKey,
_internalCallStatus,
deploy_m, deploy_e);
_m = deploy_m.getValue();
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> BrowserDBusProxy::listContainersExAsync(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const ::v1::org::genivi::mediamanager::BrowserTypes::SortKey &_sortKey, ListContainersExAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_filter(_filter, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::SortKey, ::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t> deploy_sortKey(_sortKey, static_cast<::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::SortKey, ::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "listContainersEx",
        "sttas(is)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_path, deploy_offset, deploy_count, deploy_filter, deploy_sortKey,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> _m, CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _m.getValue(), _e.getValue());
        },
        std::make_tuple(deploy_m, deploy_e));
    }
    /**
     * description: List all items in the given container
             returns: A ResultMapList of all
     *   items with the given container as parent.
             		  See MediaTypes.fidl for
     *   a list of allowed keys.
             errors: NO_CONNECTION if no connection can be
     *   established to underlying
                     browsing engine
                    
     *   BAD_PATH if path parameter is invalid
     * param: path The path of the container to search for items.
                    The format
     *   of the path depends on the underlying browsing
                    backend
     * param: offset: The offset to use for indexing the results list
     * param: count: The number of results to return, starting from offset
     * param: filter: Array of keys to include in resulting ResultMapList
     */
    void BrowserDBusProxy::listItems(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_filter(_filter, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "listItems",
        "sttas",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_path, deploy_offset, deploy_count, deploy_filter,
_internalCallStatus,
deploy_m, deploy_e);
_m = deploy_m.getValue();
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> BrowserDBusProxy::listItemsAsync(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, ListItemsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_filter(_filter, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "listItems",
        "sttas",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_path, deploy_offset, deploy_count, deploy_filter,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> _m, CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _m.getValue(), _e.getValue());
        },
        std::make_tuple(deploy_m, deploy_e));
    }
    /**
     * description: Extends ListItems with sorting capabilities
     * param: sortKey Key to sort ResultMapList
     */
    void BrowserDBusProxy::listItemsEx(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const ::v1::org::genivi::mediamanager::BrowserTypes::SortKey &_sortKey, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_filter(_filter, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::SortKey, ::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t> deploy_sortKey(_sortKey, static_cast<::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::SortKey, ::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "listItemsEx",
        "sttas(is)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_path, deploy_offset, deploy_count, deploy_filter, deploy_sortKey,
_internalCallStatus,
deploy_m, deploy_e);
_m = deploy_m.getValue();
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> BrowserDBusProxy::listItemsExAsync(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const ::v1::org::genivi::mediamanager::BrowserTypes::SortKey &_sortKey, ListItemsExAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_filter(_filter, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::SortKey, ::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t> deploy_sortKey(_sortKey, static_cast<::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::SortKey, ::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "listItemsEx",
        "sttas(is)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_path, deploy_offset, deploy_count, deploy_filter, deploy_sortKey,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> _m, CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _m.getValue(), _e.getValue());
        },
        std::make_tuple(deploy_m, deploy_e));
    }
    /**
     * description: List all children in the given container
             returns: A ResultMapList of
     *   all children with the given container as parent.
             		  See
     *   MediaTypes.fidl for a list of allowed keys.
             errors: NO_CONNECTION if
     *   no connection can be established to underlying
                      browsing
     *   engine
                      BAD_PATH if path parameter is invalid
     * param: path The path of the container to search for children.
                    The
     *   format of the path depends on the underlying browsing
                    backend
     * param: offset: The offset to use for indexing the results list
     * param: count: The number of results to return, starting from offset
     * param: filter: Array of keys to include in resulting ResultMapList
     */
    void BrowserDBusProxy::listChildren(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_filter(_filter, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "listChildren",
        "sttas",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_path, deploy_offset, deploy_count, deploy_filter,
_internalCallStatus,
deploy_m, deploy_e);
_m = deploy_m.getValue();
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> BrowserDBusProxy::listChildrenAsync(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, ListChildrenAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_filter(_filter, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "listChildren",
        "sttas",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_path, deploy_offset, deploy_count, deploy_filter,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> _m, CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _m.getValue(), _e.getValue());
        },
        std::make_tuple(deploy_m, deploy_e));
    }
    /**
     * description: Extends ListChildren with sorting capabilities
     * param: sortKey Key to sort ResultMapList on
     */
    void BrowserDBusProxy::listChildrenEx(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const ::v1::org::genivi::mediamanager::BrowserTypes::SortKey &_sortKey, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_filter(_filter, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::SortKey, ::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t> deploy_sortKey(_sortKey, static_cast<::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::SortKey, ::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "listChildrenEx",
        "sttas(is)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_path, deploy_offset, deploy_count, deploy_filter, deploy_sortKey,
_internalCallStatus,
deploy_m, deploy_e);
_m = deploy_m.getValue();
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> BrowserDBusProxy::listChildrenExAsync(const std::string &_path, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const ::v1::org::genivi::mediamanager::BrowserTypes::SortKey &_sortKey, ListChildrenExAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_filter(_filter, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::SortKey, ::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t> deploy_sortKey(_sortKey, static_cast<::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::SortKey, ::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "listChildrenEx",
        "sttas(is)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_path, deploy_offset, deploy_count, deploy_filter, deploy_sortKey,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> _m, CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _m.getValue(), _e.getValue());
        },
        std::make_tuple(deploy_m, deploy_e));
    }
    /**
     * description: Retrieve the count of searching objects in the given container
            
     *   returns:     count of searching objects
             errors:      S_OK if no
     *   error. otherwise, error occurred.
     * param: path The path of the container to search for children.
                    The
     *   format of the path depends on the underlying browsing
                    backend
     * param: query Search query to match children against. The format of the
                   
     *   query depends on the underlying browsing backend
     */
    void BrowserDBusProxy::getSearchObjectsCount(const std::string &_path, const std::string &_query, CommonAPI::CallStatus &_internalCallStatus, uint64_t &_count, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_query(_query, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint64_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getSearchObjectsCount",
        "ss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_path, deploy_query,
_internalCallStatus,
deploy_count, deploy_e);
_count = deploy_count.getValue();
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> BrowserDBusProxy::getSearchObjectsCountAsync(const std::string &_path, const std::string &_query, GetSearchObjectsCountAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_query(_query, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint64_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getSearchObjectsCount",
        "ss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_path, deploy_query,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> _count, CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _count.getValue(), _e.getValue());
        },
        std::make_tuple(deploy_count, deploy_e));
    }
    /**
     * description: Search for children in the given container
             returns: A ResultMapList of
     *   all children matching the search criteria with
                       the given
     *   container as parent.See MediaTypes.fidl for a list of
                      
     *   allowed keys.
             errors: NO_CONNECTION if no connection can be
     *   established to underlying
                     browsing engine
                    
     *   BAD_PATH if path parameter is invalid
     * param: path The path of the container to search for children.
                    The
     *   format of the path depends on the underlying browsing
                    backend
     * param: query Search query to match children against. The format of the
                   
     *   query depends on the underlying browsing backend
     * param: offset: The offset to use for indexing the results list
     * param: count: The number of results to return, starting from offset
     * param: filter: Array of keys to include in resulting ResultMapList
     */
    void BrowserDBusProxy::searchObjects(const std::string &_path, const std::string &_query, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_query(_query, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_filter(_filter, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "searchObjects",
        "ssttas",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_path, deploy_query, deploy_offset, deploy_count, deploy_filter,
_internalCallStatus,
deploy_m, deploy_e);
_m = deploy_m.getValue();
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> BrowserDBusProxy::searchObjectsAsync(const std::string &_path, const std::string &_query, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, SearchObjectsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_query(_query, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_filter(_filter, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "searchObjects",
        "ssttas",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_path, deploy_query, deploy_offset, deploy_count, deploy_filter,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> _m, CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _m.getValue(), _e.getValue());
        },
        std::make_tuple(deploy_m, deploy_e));
    }
    /**
     * description: Extends SearchObjects with sorting capabilities
     * param: sortKey Key to sort ResultMapList on
     */
    void BrowserDBusProxy::searchObjectsEx(const std::string &_path, const std::string &_query, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const ::v1::org::genivi::mediamanager::BrowserTypes::SortKey &_sortKey, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_m, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_query(_query, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_filter(_filter, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::SortKey, ::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t> deploy_sortKey(_sortKey, static_cast<::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::SortKey, ::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "searchObjectsEx",
        "ssttas(is)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_path, deploy_query, deploy_offset, deploy_count, deploy_filter, deploy_sortKey,
_internalCallStatus,
deploy_m, deploy_e);
_m = deploy_m.getValue();
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> BrowserDBusProxy::searchObjectsExAsync(const std::string &_path, const std::string &_query, const uint64_t &_offset, const uint64_t &_count, const std::vector<std::string> &_filter, const ::v1::org::genivi::mediamanager::BrowserTypes::SortKey &_sortKey, SearchObjectsExAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_query(_query, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_filter(_filter, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::SortKey, ::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t> deploy_sortKey(_sortKey, static_cast<::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> deploy_m(static_cast<::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::SortKey, ::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList,::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "searchObjectsEx",
        "ssttas(is)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_path, deploy_query, deploy_offset, deploy_count, deploy_filter, deploy_sortKey,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::org::genivi::mediamanager::MediaTypes::ResultMapList, ::v1::org::genivi::mediamanager::MediaTypes_::ResultMapListDeployment_t> _m, CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _m.getValue(), _e.getValue());
        },
        std::make_tuple(deploy_m, deploy_e));
    }
    /**
     * description: Get a list of all initial letters and their index in the
                         
     *   given container
             returns: A list of tuples of initial letters and
     *   their first
                       observed position when sorting according to
     *   sortKey
             errors: NO_CONNECTION if no connection can be established to
     *   underlying
                     browsing engine
                     BAD_PATH if path
     *   parameter is invalid
     * param: container: Container to build index list for
     * param: count: How many (unsorted) items should be traversed to build
                     
     *          index
     * param: filter: List of initial letters to include
     * param: sortKey: Key to sort on when building index list
     */
    void BrowserDBusProxy::listIndexes(const std::string &_container, const uint64_t &_count, const std::vector<std::string> &_filter, const ::v1::org::genivi::mediamanager::BrowserTypes::SortKey &_sortKey, CommonAPI::CallStatus &_internalCallStatus, std::string &_indexes, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_container(_container, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_filter(_filter, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::SortKey, ::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t> deploy_sortKey(_sortKey, static_cast<::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_indexes(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::SortKey, ::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "listIndexes",
        "stas(is)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_container, deploy_count, deploy_filter, deploy_sortKey,
_internalCallStatus,
deploy_indexes, deploy_e);
_indexes = deploy_indexes.getValue();
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> BrowserDBusProxy::listIndexesAsync(const std::string &_container, const uint64_t &_count, const std::vector<std::string> &_filter, const ::v1::org::genivi::mediamanager::BrowserTypes::SortKey &_sortKey, ListIndexesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_container(_container, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_count(_count, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_filter(_filter, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::SortKey, ::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t> deploy_sortKey(_sortKey, static_cast<::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_indexes(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::SortKey, ::v1::org::genivi::mediamanager::BrowserTypes_::SortKeyDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "listIndexes",
        "stas(is)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_container, deploy_count, deploy_filter, deploy_sortKey,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _indexes, CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _indexes.getValue(), _e.getValue());
        },
        std::make_tuple(deploy_indexes, deploy_e));
    }
    /**
     * description: Create a new empty container with path used as root
             returns: Path
     *   identifier for the newly created container
             errors: NO_CONNECTION if
     *   no connection can be established to underlying
                      browsing
     *   engine
                      BAD_PATH if path parameter is invalid
     * param: path: Path to place the newly created container in
     * param: displayName: Display name for the new container
     * param: childTypes: Array of allowed types on children in new container
     */
    void BrowserDBusProxy::createContainer(const std::string &_path, const std::string &_displayName, const std::vector<std::string> &_childTypes, CommonAPI::CallStatus &_internalCallStatus, std::string &_pathIdentifier, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_displayName(_displayName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_childTypes(_childTypes, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_pathIdentifier(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "createContainer",
        "ssas",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_path, deploy_displayName, deploy_childTypes,
_internalCallStatus,
deploy_pathIdentifier, deploy_e);
_pathIdentifier = deploy_pathIdentifier.getValue();
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> BrowserDBusProxy::createContainerAsync(const std::string &_path, const std::string &_displayName, const std::vector<std::string> &_childTypes, CreateContainerAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_displayName(_displayName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_childTypes(_childTypes, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_pathIdentifier(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "createContainer",
        "ssas",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_path, deploy_displayName, deploy_childTypes,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _pathIdentifier, CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _pathIdentifier.getValue(), _e.getValue());
        },
        std::make_tuple(deploy_pathIdentifier, deploy_e));
    }
    /**
     * description: Place a reference in a container, pointing to an object
             returns: Path
     *   identifier for the container containing the reference
             errors:
     *   NO_CONNECTION if no connection can be established to underlying
                  
     *      browsing engine
                      BAD_PATH if path parameter is invalid
     * param: path: Path to place the newly created container in
     * param: objectPath: Path to object to create reference to
     */
    void BrowserDBusProxy::createReference(const std::string &_path, const std::string &_objectPath, CommonAPI::CallStatus &_internalCallStatus, std::string &_pathIdentifier, ::v1::org::genivi::mediamanager::BrowserTypes::BrowserError &_e, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_objectPath(_objectPath, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_pathIdentifier(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "createReference",
        "ss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_path, deploy_objectPath,
_internalCallStatus,
deploy_pathIdentifier, deploy_e);
_pathIdentifier = deploy_pathIdentifier.getValue();
_e = deploy_e.getValue();
}
    std::future<CommonAPI::CallStatus> BrowserDBusProxy::createReferenceAsync(const std::string &_path, const std::string &_objectPath, CreateReferenceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(_path, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_objectPath(_objectPath, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_pathIdentifier(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> deploy_e(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "createReference",
        "ss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_path, deploy_objectPath,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _pathIdentifier, CommonAPI::Deployable<::v1::org::genivi::mediamanager::BrowserTypes::BrowserError, CommonAPI::EmptyDeployment> _e) {
        	if (_callback)
        		_callback(_internalCallStatus, _pathIdentifier.getValue(), _e.getValue());
        },
        std::make_tuple(deploy_pathIdentifier, deploy_e));
    }


void BrowserDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace mediamanager
      } // namespace genivi
      } // namespace org
      } // namespace v1
