/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * author: Rico Schuster
 * description: Configuration interface which extends the ConfigurationBase interface to be
 *   able to set several configuration values.
    Note: Usually Franca supports
 *   the extension of Interface via "extends" keyword. But Mocca is not able to
 *   handle the inheritance of Interfaces.
    Therefore all Methods of
 *   ConfigurationBase are also part of the Configuration Interface.
 * see: org.harman.nav.ctrl.configuration.ConfigurationBase.fidl
 * see: ConfigurationBase
 */
#ifndef V1_ORG_HARMAN_NAV_CTRL_CONFIGURATION_Configuration_DBUS_PROXY_HPP_
#define V1_ORG_HARMAN_NAV_CTRL_CONFIGURATION_Configuration_DBUS_PROXY_HPP_

#include <v1/org/harman/nav/ctrl/configuration/ConfigurationProxyBase.hpp>
#include "v1/org/harman/nav/ctrl/configuration/ConfigurationDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace org {
namespace harman {
namespace nav {
namespace ctrl {
namespace configuration {

class ConfigurationDBusProxy
    : virtual public ConfigurationProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    ConfigurationDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~ConfigurationDBusProxy() { }


    virtual ConfigurationChangesEvent& getConfigurationChangesEvent();

    /**
     * description: Methode for getting version of Navigation Controller.
     */
    virtual void getNavigationVersion(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetVersionError &_error, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::NavigationVersion &_navigationVersion, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getNavigationVersionAsync(GetNavigationVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Methode for setting units of measurements.
     */
    virtual void setUnitsOfMeasurement(const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::UnitsOfMeasurement &_unitsOfMeasurement, CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::SetUnitsOfMeasurementError &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setUnitsOfMeasurementAsync(const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::UnitsOfMeasurement &_unitsOfMeasurement, SetUnitsOfMeasurementAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Methode for setting time format.
     */
    virtual void setTimeFormat(const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::TimeFormat &_timeFormat, CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::SetTimeFormatError &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setTimeFormatAsync(const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::TimeFormat &_timeFormat, SetTimeFormatAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Methode for getting supported time formats.
     */
    virtual void getSupportedTimeFormats(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetSupportedTimeFormatsError &_error, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::TimeFormats &_timeFormats, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedTimeFormatsAsync(GetSupportedTimeFormatsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Methode for setting coordinates format.
     */
    virtual void setCoordinatesFormat(const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::CoordinatesFormat &_coordinatesFormat, CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::SetCoordinatesFormatError &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setCoordinatesFormatAsync(const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::CoordinatesFormat &_coordinatesFormat, SetCoordinatesFormatAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Methode for setting locale.
     */
    virtual void setLocale(const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::Locale &_locale, CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::SetLocaleError &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setLocaleAsync(const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::Locale &_locale, SetLocaleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Methode for getting supported units of measurements.
     */
    virtual void getSupportedUnitsOfMeasurement(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetSupportedUnitsOfMeasurementError &_error, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::UnitsOfMeasurement &_unitsOfMeasurement, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedUnitsOfMeasurementAsync(GetSupportedUnitsOfMeasurementAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Methode for getting units of measurements.
     */
    virtual void getUnitsOfMeasurement(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetUnitsOfMeasurementError &_error, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::UnitsOfMeasurement &_unitsOfMeasurement, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getUnitsOfMeasurementAsync(GetUnitsOfMeasurementAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Methode for getting time format.
     */
    virtual void getTimeFormat(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetTimeFormatError &_error, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::TimeFormat &_timeFormat, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getTimeFormatAsync(GetTimeFormatAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Methode for getting coordinates format.
     */
    virtual void getCoordinatesFormat(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetCoordinatesFormatError &_error, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::CoordinatesFormat &_coordinatesFormat, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCoordinatesFormatAsync(GetCoordinatesFormatAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Methode for getting supported coordinates format.
     */
    virtual void getSupportedCoordinatesFormats(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetSupportedCoordinatesFormatsError &_error, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::CoordinatesFormats &_coordinatesFormats, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedCoordinatesFormatsAsync(GetSupportedCoordinatesFormatsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Methode for getting locale.
     */
    virtual void getLocale(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetLocaleError &_error, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::Locale &_locale, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getLocaleAsync(GetLocaleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Methode for getting supported locales.
     */
    virtual void getSupportedLocales(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetLocalesError &_error, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::Locales &_locales, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedLocalesAsync(GetSupportedLocalesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Methode for setting style for theme.
     */
    virtual void setStyleTheme(const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::StyleTheme &_style, CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::SetStyleThemeError &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setStyleThemeAsync(const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::StyleTheme &_style, SetStyleThemeAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<ConfigurationChangesEvent, CommonAPI::Deployable<::org::harman::nav::ctrl::configuration::ConfigurationTypes::Settings, ::org::harman::nav::ctrl::configuration::ConfigurationTypes_::SettingsDeployment_t>> configurationChanges_;

};

} // namespace configuration
} // namespace ctrl
} // namespace nav
} // namespace harman
} // namespace org
} // namespace v1

#endif // V1_ORG_HARMAN_NAV_CTRL_CONFIGURATION_Configuration_DBUS_PROXY_HPP_

