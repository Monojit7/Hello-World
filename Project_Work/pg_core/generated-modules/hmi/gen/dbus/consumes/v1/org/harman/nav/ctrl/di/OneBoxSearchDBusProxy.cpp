/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#include <v1/org/harman/nav/ctrl/di/OneBoxSearchDBusProxy.hpp>

namespace v1 {
namespace org {
namespace harman {
namespace nav {
namespace ctrl {
namespace di {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createOneBoxSearchDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<OneBoxSearchDBusProxy>(_address, _connection);
}

INITIALIZER(registerOneBoxSearchDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		OneBoxSearch::getInterface(),
		&createOneBoxSearchDBusProxy);
}

OneBoxSearchDBusProxy::OneBoxSearchDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		searchStatus_(*this, "searchStatus", "ui", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		searchResultList_(*this, "searchResultList", "uqqq", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		searchResultListSizeChanged_(*this, "searchResultListSizeChanged", "uq", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
{
}


OneBoxSearchDBusProxy::SearchStatusEvent& OneBoxSearchDBusProxy::getSearchStatusEvent() {
    return searchStatus_;
}
OneBoxSearchDBusProxy::SearchResultListEvent& OneBoxSearchDBusProxy::getSearchResultListEvent() {
    return searchResultList_;
}
OneBoxSearchDBusProxy::SearchResultListSizeChangedEvent& OneBoxSearchDBusProxy::getSearchResultListSizeChangedEvent() {
    return searchResultListSizeChanged_;
}
    
    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     */
    void OneBoxSearchDBusProxy::getVersion(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Version, ::org::harman::nav::ctrl::CommonTypes_::VersionDeployment_t> deploy_version(static_cast<::org::harman::nav::ctrl::CommonTypes_::VersionDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Version,::org::harman::nav::ctrl::CommonTypes_::VersionDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getVersion",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_version);
_version = deploy_version.getValue();
}
    std::future<CommonAPI::CallStatus> OneBoxSearchDBusProxy::getVersionAsync(GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Version, ::org::harman::nav::ctrl::CommonTypes_::VersionDeployment_t> deploy_version(static_cast<::org::harman::nav::ctrl::CommonTypes_::VersionDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Version,::org::harman::nav::ctrl::CommonTypes_::VersionDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getVersion",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Version, ::org::harman::nav::ctrl::CommonTypes_::VersionDeployment_t> _version) {
        	if (_callback)
        		_callback(_internalCallStatus, _version.getValue());
        },
        std::make_tuple(deploy_version));
    }
    /**
     * description: createOneBoxSearch = This method creates a new OneBoxSearch and retrieves a
     *   handle
     */
    void OneBoxSearchDBusProxy::createOneBoxSearch(CommonAPI::CallStatus &_internalCallStatus, OneBoxSearch::createOneBoxSearchError &_error, ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<OneBoxSearch::createOneBoxSearchError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_oneBoxSearchHandle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<OneBoxSearch::createOneBoxSearchError, CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "createOneBoxSearch",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_error,
deploy_oneBoxSearchHandle);
_error = deploy_error.getValue();
_oneBoxSearchHandle = deploy_oneBoxSearchHandle.getValue();
}
    std::future<CommonAPI::CallStatus> OneBoxSearchDBusProxy::createOneBoxSearchAsync(CreateOneBoxSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<OneBoxSearch::createOneBoxSearchError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_oneBoxSearchHandle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<OneBoxSearch::createOneBoxSearchError, CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "createOneBoxSearch",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<OneBoxSearch::createOneBoxSearchError, CommonAPI::EmptyDeployment> _deploy_error, CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> _oneBoxSearchHandle) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue(), _oneBoxSearchHandle.getValue());
        },
        std::make_tuple(deploy_error, deploy_oneBoxSearchHandle));
    }
    /**
     * description: deleteLocationInput = This method deletes a location input and its associated
     *   resources
     */
    void OneBoxSearchDBusProxy::deleteOneBoxSearch(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_oneBoxSearchHandle(_oneBoxSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "deleteOneBoxSearch",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_oneBoxSearchHandle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> OneBoxSearchDBusProxy::deleteOneBoxSearchAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, DeleteOneBoxSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_oneBoxSearchHandle(_oneBoxSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "deleteOneBoxSearch",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_oneBoxSearchHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: setSearchCountry = This method sets the target country for the current search,
     *   If no country is set the current center position is used to determine the
     *   country
     */
    void OneBoxSearchDBusProxy::setSearchCountry(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const std::string &_country, CommonAPI::CallStatus &_internalCallStatus, OneBoxSearch::setSearchCountryError &_error, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<OneBoxSearch::setSearchCountryError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_oneBoxSearchHandle(_oneBoxSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_country(_country, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<OneBoxSearch::setSearchCountryError, CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setSearchCountry",
        "us",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_oneBoxSearchHandle, deploy_country,
_internalCallStatus,
deploy_error);
_error = deploy_error.getValue();
}
    std::future<CommonAPI::CallStatus> OneBoxSearchDBusProxy::setSearchCountryAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const std::string &_country, SetSearchCountryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<OneBoxSearch::setSearchCountryError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_oneBoxSearchHandle(_oneBoxSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_country(_country, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<OneBoxSearch::setSearchCountryError, CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setSearchCountry",
        "us",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_oneBoxSearchHandle, deploy_country,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<OneBoxSearch::setSearchCountryError, CommonAPI::EmptyDeployment> _deploy_error) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue());
        },
        std::make_tuple(deploy_error));
    }
    /**
     * description: setSearchLanguage = for the phonetic search algorithms the language and script
     *   are important
     */
    void OneBoxSearchDBusProxy::setSearchLanguage(const ::org::harman::nav::ctrl::CommonTypes::Handle &_ftsSearchHandle, const std::string &_language, const std::string &_script, CommonAPI::CallStatus &_internalCallStatus, OneBoxSearch::setSearchLanguageError &_error, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<OneBoxSearch::setSearchLanguageError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_ftsSearchHandle(_ftsSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_language(_language, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_script(_script, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<OneBoxSearch::setSearchLanguageError, CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setSearchLanguage",
        "uss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_ftsSearchHandle, deploy_language, deploy_script,
_internalCallStatus,
deploy_error);
_error = deploy_error.getValue();
}
    std::future<CommonAPI::CallStatus> OneBoxSearchDBusProxy::setSearchLanguageAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_ftsSearchHandle, const std::string &_language, const std::string &_script, SetSearchLanguageAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<OneBoxSearch::setSearchLanguageError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_ftsSearchHandle(_ftsSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_language(_language, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_script(_script, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<OneBoxSearch::setSearchLanguageError, CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setSearchLanguage",
        "uss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_ftsSearchHandle, deploy_language, deploy_script,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<OneBoxSearch::setSearchLanguageError, CommonAPI::EmptyDeployment> _deploy_error) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue());
        },
        std::make_tuple(deploy_error));
    }
    /**
     * description: setSearchParameters = SetSearchParameters = configure if we want to search for
     *   addresses and/or pois.
    			configure if we want to search in the vicinity of
     *   the specified center.
            	configure if we want to search using
     *   fuzziness.
            	Default behaviour if no option is set we search everywhere
     */
    void OneBoxSearchDBusProxy::setSearchParameters(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_searchOptions, CommonAPI::CallStatus &_internalCallStatus, OneBoxSearch::setSearchParametersError &_error, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<OneBoxSearch::setSearchParametersError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_oneBoxSearchHandle(_oneBoxSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_searchOptions(_searchOptions, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<OneBoxSearch::setSearchParametersError, CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setSearchParameters",
        "uq",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_oneBoxSearchHandle, deploy_searchOptions,
_internalCallStatus,
deploy_error);
_error = deploy_error.getValue();
}
    std::future<CommonAPI::CallStatus> OneBoxSearchDBusProxy::setSearchParametersAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_searchOptions, SetSearchParametersAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<OneBoxSearch::setSearchParametersError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_oneBoxSearchHandle(_oneBoxSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_searchOptions(_searchOptions, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<OneBoxSearch::setSearchParametersError, CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setSearchParameters",
        "uq",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_oneBoxSearchHandle, deploy_searchOptions,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<OneBoxSearch::setSearchParametersError, CommonAPI::EmptyDeployment> _deploy_error) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue());
        },
        std::make_tuple(deploy_error));
    }
    /**
     * description: startOneBoxSearch = This method sends the search input for the search
     *   handle.
    						The search will start with the location.
     */
    void OneBoxSearchDBusProxy::startOneBoxSearch(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const std::string &_inputString, CommonAPI::CallStatus &_internalCallStatus, OneBoxSearch::startOneBoxSearchError &_error, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<OneBoxSearch::startOneBoxSearchError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_oneBoxSearchHandle(_oneBoxSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inputString(_inputString, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<OneBoxSearch::startOneBoxSearchError, CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "startOneBoxSearch",
        "us",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_oneBoxSearchHandle, deploy_inputString,
_internalCallStatus,
deploy_error);
_error = deploy_error.getValue();
}
    std::future<CommonAPI::CallStatus> OneBoxSearchDBusProxy::startOneBoxSearchAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const std::string &_inputString, StartOneBoxSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<OneBoxSearch::startOneBoxSearchError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_oneBoxSearchHandle(_oneBoxSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inputString(_inputString, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<OneBoxSearch::startOneBoxSearchError, CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "startOneBoxSearch",
        "us",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_oneBoxSearchHandle, deploy_inputString,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<OneBoxSearch::startOneBoxSearchError, CommonAPI::EmptyDeployment> _deploy_error) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue());
        },
        std::make_tuple(deploy_error));
    }
    /**
     * description: cancelFtsSearch = This method cancels the search for the current session
     */
    void OneBoxSearchDBusProxy::cancelOneBoxSearch(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, CommonAPI::CallStatus &_internalCallStatus, OneBoxSearch::cancelOneBoxSearchError &_error, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<OneBoxSearch::cancelOneBoxSearchError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_oneBoxSearchHandle(_oneBoxSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<OneBoxSearch::cancelOneBoxSearchError, CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "cancelOneBoxSearch",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_oneBoxSearchHandle,
_internalCallStatus,
deploy_error);
_error = deploy_error.getValue();
}
    std::future<CommonAPI::CallStatus> OneBoxSearchDBusProxy::cancelOneBoxSearchAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, CancelOneBoxSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<OneBoxSearch::cancelOneBoxSearchError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_oneBoxSearchHandle(_oneBoxSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<OneBoxSearch::cancelOneBoxSearchError, CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "cancelOneBoxSearch",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_oneBoxSearchHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<OneBoxSearch::cancelOneBoxSearchError, CommonAPI::EmptyDeployment> _deploy_error) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue());
        },
        std::make_tuple(deploy_error));
    }
    /**
     * description: requestListUpdate = This method sends a request for more list elements for the
     *   current session
     */
    void OneBoxSearchDBusProxy::requestResultList(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_statusValue, uint16_t &_resultListSize, ::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes::LocationList &_locations, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_oneBoxSearchHandle(_oneBoxSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_maxWindowSize(_maxWindowSize, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_statusValue(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_resultListSize(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes::LocationList, ::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes_::LocationListDeployment_t> deploy_locations(static_cast<::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes_::LocationListDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<uint16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes::LocationList,::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes_::LocationListDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "requestResultList",
        "uqq",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_oneBoxSearchHandle, deploy_offset, deploy_maxWindowSize,
_internalCallStatus,
deploy_statusValue, deploy_resultListSize, deploy_locations);
_statusValue = deploy_statusValue.getValue();
_resultListSize = deploy_resultListSize.getValue();
_locations = deploy_locations.getValue();
}
    std::future<CommonAPI::CallStatus> OneBoxSearchDBusProxy::requestResultListAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, RequestResultListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_oneBoxSearchHandle(_oneBoxSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_maxWindowSize(_maxWindowSize, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_statusValue(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_resultListSize(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes::LocationList, ::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes_::LocationListDeployment_t> deploy_locations(static_cast<::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes_::LocationListDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<uint16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes::LocationList,::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes_::LocationListDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "requestResultList",
        "uqq",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_oneBoxSearchHandle, deploy_offset, deploy_maxWindowSize,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> _statusValue, CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> _resultListSize, CommonAPI::Deployable<::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes::LocationList, ::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes_::LocationListDeployment_t> _locations) {
        	if (_callback)
        		_callback(_internalCallStatus, _statusValue.getValue(), _resultListSize.getValue(), _locations.getValue());
        },
        std::make_tuple(deploy_statusValue, deploy_resultListSize, deploy_locations));
    }
    /**
     * description: selectEntry = This method triggers selection of a result list entry by index
     */
    void OneBoxSearchDBusProxy::selectEntry(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_index, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_oneBoxSearchHandle(_oneBoxSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_index(_index, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "selectEntry",
        "uq",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_oneBoxSearchHandle, deploy_index,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> OneBoxSearchDBusProxy::selectEntryAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_index, SelectEntryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_oneBoxSearchHandle(_oneBoxSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_index(_index, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "selectEntry",
        "uq",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_oneBoxSearchHandle, deploy_index,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getEntry = This method synchronously gets the address for the given result list
     *   entry
     */
    void OneBoxSearchDBusProxy::getEntry(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_index, CommonAPI::CallStatus &_internalCallStatus, ::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes::Location &_locItem, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_oneBoxSearchHandle(_oneBoxSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_index(_index, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes::Location, ::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes_::LocationDeployment_t> deploy_locItem(static_cast<::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes_::LocationDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes::Location,::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes_::LocationDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getEntry",
        "uq",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_oneBoxSearchHandle, deploy_index,
_internalCallStatus,
deploy_locItem);
_locItem = deploy_locItem.getValue();
}
    std::future<CommonAPI::CallStatus> OneBoxSearchDBusProxy::getEntryAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_index, GetEntryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_oneBoxSearchHandle(_oneBoxSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_index(_index, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes::Location, ::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes_::LocationDeployment_t> deploy_locItem(static_cast<::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes_::LocationDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes::Location,::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes_::LocationDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getEntry",
        "uq",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_oneBoxSearchHandle, deploy_index,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes::Location, ::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes_::LocationDeployment_t> _locItem) {
        	if (_callback)
        		_callback(_internalCallStatus, _locItem.getValue());
        },
        std::make_tuple(deploy_locItem));
    }


void OneBoxSearchDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace di
      } // namespace ctrl
      } // namespace nav
      } // namespace harman
      } // namespace org
      } // namespace v1
