/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#include <v1/com/harman/connectivity/WifiServiceDBusProxy.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace connectivity {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createWifiServiceDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<WifiServiceDBusProxy>(_address, _connection);
}

INITIALIZER(registerWifiServiceDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		WifiService::getInterface(),
		&createWifiServiceDBusProxy);
}

WifiServiceDBusProxy::WifiServiceDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		scanningForNetworks_(*this, "ScanningForNetworks", "si", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		scanResults_(*this, "scanResults", "a(sisiasasasasasiasiasisbb)", std::make_tuple(static_cast<::com::harman::connectivity::WifiTypedefs_::WiFiSvcNetworklistDeployment_t*>(nullptr))),
		joinedNetwork_(*this, "joinedNetwork", "ssb", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		leftNetwork_(*this, "leftNetwork", "ssi", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		enableClientUpdate_(*this, "enableClientUpdate", "sb", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		wPASuccess_(*this, "WPASuccess", "ss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		wPAFailure_(*this, "WPAFailure", "ssi", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		connectionError_(*this, "connectionError", "ss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		connectionEstablished_(*this, "connectionEstablished", "ss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		connectionLost_(*this, "connectionLost", "ss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		passwordRequired_(*this, "passwordRequired", "sas", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr))),
		maxNumberKnownNetworksReached_(*this, "MaxNumberKnownNetworksReached", "si", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		enableAPUpdate_(*this, "enableAPUpdate", "sb", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		clientJoined_(*this, "clientJoined", "ss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		clientLeave_(*this, "clientLeave", "ssi", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		clientWPASuccess_(*this, "clientWPASuccess", "ss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		maxClientSet_(*this, "MaxClientSet", "si", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		bandSet_(*this, "BandSet", "ss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		modeListUpdate_(*this, "modeListUpdate", "a(sis)", std::make_tuple(static_cast<::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t*>(nullptr))),
		ifCreated_(*this, "IfCreated", "sss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		ifDestroyed_(*this, "IfDestroyed", "sss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		roleChanged_(*this, "roleChanged", "as", std::make_tuple(static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr))),
		ifUp_(*this, "IfUp", "sss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		ifDown_(*this, "IfDown", "si", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		wlanCrash_(*this, "wlanCrash", "s", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		serviceFailure_(*this, "serviceFailure", "s", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)))
{
}


WifiServiceDBusProxy::ScanningForNetworksEvent& WifiServiceDBusProxy::getScanningForNetworksEvent() {
    return scanningForNetworks_;
}
WifiServiceDBusProxy::ScanResultsEvent& WifiServiceDBusProxy::getScanResultsEvent() {
    return scanResults_;
}
WifiServiceDBusProxy::JoinedNetworkEvent& WifiServiceDBusProxy::getJoinedNetworkEvent() {
    return joinedNetwork_;
}
WifiServiceDBusProxy::LeftNetworkEvent& WifiServiceDBusProxy::getLeftNetworkEvent() {
    return leftNetwork_;
}
WifiServiceDBusProxy::EnableClientUpdateEvent& WifiServiceDBusProxy::getEnableClientUpdateEvent() {
    return enableClientUpdate_;
}
WifiServiceDBusProxy::WPASuccessEvent& WifiServiceDBusProxy::getWPASuccessEvent() {
    return wPASuccess_;
}
WifiServiceDBusProxy::WPAFailureEvent& WifiServiceDBusProxy::getWPAFailureEvent() {
    return wPAFailure_;
}
WifiServiceDBusProxy::ConnectionErrorEvent& WifiServiceDBusProxy::getConnectionErrorEvent() {
    return connectionError_;
}
WifiServiceDBusProxy::ConnectionEstablishedEvent& WifiServiceDBusProxy::getConnectionEstablishedEvent() {
    return connectionEstablished_;
}
WifiServiceDBusProxy::ConnectionLostEvent& WifiServiceDBusProxy::getConnectionLostEvent() {
    return connectionLost_;
}
WifiServiceDBusProxy::PasswordRequiredEvent& WifiServiceDBusProxy::getPasswordRequiredEvent() {
    return passwordRequired_;
}
WifiServiceDBusProxy::MaxNumberKnownNetworksReachedEvent& WifiServiceDBusProxy::getMaxNumberKnownNetworksReachedEvent() {
    return maxNumberKnownNetworksReached_;
}
WifiServiceDBusProxy::EnableAPUpdateEvent& WifiServiceDBusProxy::getEnableAPUpdateEvent() {
    return enableAPUpdate_;
}
WifiServiceDBusProxy::ClientJoinedEvent& WifiServiceDBusProxy::getClientJoinedEvent() {
    return clientJoined_;
}
WifiServiceDBusProxy::ClientLeaveEvent& WifiServiceDBusProxy::getClientLeaveEvent() {
    return clientLeave_;
}
WifiServiceDBusProxy::ClientWPASuccessEvent& WifiServiceDBusProxy::getClientWPASuccessEvent() {
    return clientWPASuccess_;
}
WifiServiceDBusProxy::MaxClientSetEvent& WifiServiceDBusProxy::getMaxClientSetEvent() {
    return maxClientSet_;
}
WifiServiceDBusProxy::BandSetEvent& WifiServiceDBusProxy::getBandSetEvent() {
    return bandSet_;
}
WifiServiceDBusProxy::ModeListUpdateEvent& WifiServiceDBusProxy::getModeListUpdateEvent() {
    return modeListUpdate_;
}
WifiServiceDBusProxy::IfCreatedEvent& WifiServiceDBusProxy::getIfCreatedEvent() {
    return ifCreated_;
}
WifiServiceDBusProxy::IfDestroyedEvent& WifiServiceDBusProxy::getIfDestroyedEvent() {
    return ifDestroyed_;
}
WifiServiceDBusProxy::RoleChangedEvent& WifiServiceDBusProxy::getRoleChangedEvent() {
    return roleChanged_;
}
WifiServiceDBusProxy::IfUpEvent& WifiServiceDBusProxy::getIfUpEvent() {
    return ifUp_;
}
WifiServiceDBusProxy::IfDownEvent& WifiServiceDBusProxy::getIfDownEvent() {
    return ifDown_;
}
WifiServiceDBusProxy::WlanCrashEvent& WifiServiceDBusProxy::getWlanCrashEvent() {
    return wlanCrash_;
}
WifiServiceDBusProxy::ServiceFailureEvent& WifiServiceDBusProxy::getServiceFailureEvent() {
    return serviceFailure_;
}
    
    void WifiServiceDBusProxy::enableClient(const std::string &_interfaceName, CommonAPI::CallStatus &_internalCallStatus, std::string &_interfaceName_out, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(_interfaceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName_out(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "enableClient",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_interfaceName,
_internalCallStatus,
deploy_interfaceName_out, deploy_Result, deploy_Code);
_interfaceName_out = deploy_interfaceName_out.getValue();
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::enableClientAsync(const std::string &_interfaceName, EnableClientAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(_interfaceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName_out(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "enableClient",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_interfaceName,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _interfaceName_out, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _interfaceName_out.getValue(), _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_interfaceName_out, deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::disableClient(const std::string &_interfaceName, CommonAPI::CallStatus &_internalCallStatus, std::string &_interfaceName_out, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(_interfaceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName_out(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "disableClient",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_interfaceName,
_internalCallStatus,
deploy_interfaceName_out, deploy_Result, deploy_Code);
_interfaceName_out = deploy_interfaceName_out.getValue();
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::disableClientAsync(const std::string &_interfaceName, DisableClientAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(_interfaceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName_out(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "disableClient",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_interfaceName,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _interfaceName_out, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _interfaceName_out.getValue(), _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_interfaceName_out, deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::scanNetworks(const int32_t &_scanTime, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_scanTime(_scanTime, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "scanNetworks",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_scanTime,
_internalCallStatus,
deploy_Result, deploy_Code);
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::scanNetworksAsync(const int32_t &_scanTime, ScanNetworksAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_scanTime(_scanTime, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "scanNetworks",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_scanTime,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::stopScanNetwork(const std::string &_interfaceName, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(_interfaceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "stopScanNetwork",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_interfaceName,
_internalCallStatus,
deploy_Result, deploy_Code);
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::stopScanNetworkAsync(const std::string &_interfaceName, StopScanNetworkAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(_interfaceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "stopScanNetwork",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_interfaceName,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::joinNetwork(const std::string &_ssid, const std::string &_password, const std::string &_hexKey, const ::com::harman::connectivity::WifiTypedefs::stringList &_security, const ::com::harman::connectivity::WifiTypedefs::stringList &_groupCipher, const ::com::harman::connectivity::WifiTypedefs::stringList &_pairwiseCipher, const ::com::harman::connectivity::WifiTypedefs::stringList &_authentication, const int32_t &_securityOption, const bool &_hidden, const std::string &_ipAddress, const std::string &_subnetMask, const bool &_saveNetwork, const bool &_highestPriority, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, std::string &_Status, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_ssid(_ssid, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_password(_password, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_hexKey(_hexKey, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_security(_security, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_groupCipher(_groupCipher, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_pairwiseCipher(_pairwiseCipher, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_authentication(_authentication, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_securityOption(_securityOption, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_hidden(_hidden, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_ipAddress(_ipAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_subnetMask(_subnetMask, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_saveNetwork(_saveNetwork, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_highestPriority(_highestPriority, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Status(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "joinNetwork",
        "sssasasasasibssbb",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_ssid, deploy_password, deploy_hexKey, deploy_security, deploy_groupCipher, deploy_pairwiseCipher, deploy_authentication, deploy_securityOption, deploy_hidden, deploy_ipAddress, deploy_subnetMask, deploy_saveNetwork, deploy_highestPriority,
_internalCallStatus,
deploy_Result, deploy_Code, deploy_Status);
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
_Status = deploy_Status.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::joinNetworkAsync(const std::string &_ssid, const std::string &_password, const std::string &_hexKey, const ::com::harman::connectivity::WifiTypedefs::stringList &_security, const ::com::harman::connectivity::WifiTypedefs::stringList &_groupCipher, const ::com::harman::connectivity::WifiTypedefs::stringList &_pairwiseCipher, const ::com::harman::connectivity::WifiTypedefs::stringList &_authentication, const int32_t &_securityOption, const bool &_hidden, const std::string &_ipAddress, const std::string &_subnetMask, const bool &_saveNetwork, const bool &_highestPriority, JoinNetworkAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_ssid(_ssid, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_password(_password, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_hexKey(_hexKey, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_security(_security, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_groupCipher(_groupCipher, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_pairwiseCipher(_pairwiseCipher, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_authentication(_authentication, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_securityOption(_securityOption, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_hidden(_hidden, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_ipAddress(_ipAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_subnetMask(_subnetMask, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_saveNetwork(_saveNetwork, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_highestPriority(_highestPriority, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Status(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "joinNetwork",
        "sssasasasasibssbb",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_ssid, deploy_password, deploy_hexKey, deploy_security, deploy_groupCipher, deploy_pairwiseCipher, deploy_authentication, deploy_securityOption, deploy_hidden, deploy_ipAddress, deploy_subnetMask, deploy_saveNetwork, deploy_highestPriority,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Status) {
        	if (_callback)
        		_callback(_internalCallStatus, _Result.getValue(), _Code.getValue(), _Status.getValue());
        },
        std::make_tuple(deploy_Result, deploy_Code, deploy_Status));
    }
    void WifiServiceDBusProxy::leaveNetwork(CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "leaveNetwork",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_Result, deploy_Code);
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::leaveNetworkAsync(LeaveNetworkAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "leaveNetwork",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::getKnownNetworkList(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::WifiTypedefs::WiFiSvcNetworklist &_list, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::WiFiSvcNetworklist, ::com::harman::connectivity::WifiTypedefs_::WiFiSvcNetworklistDeployment_t> deploy_list(static_cast<::com::harman::connectivity::WifiTypedefs_::WiFiSvcNetworklistDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::WiFiSvcNetworklist,::com::harman::connectivity::WifiTypedefs_::WiFiSvcNetworklistDeployment_t>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getKnownNetworkList",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_list, deploy_Result, deploy_Code);
_list = deploy_list.getValue();
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::getKnownNetworkListAsync(GetKnownNetworkListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::WiFiSvcNetworklist, ::com::harman::connectivity::WifiTypedefs_::WiFiSvcNetworklistDeployment_t> deploy_list(static_cast<::com::harman::connectivity::WifiTypedefs_::WiFiSvcNetworklistDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::WiFiSvcNetworklist,::com::harman::connectivity::WifiTypedefs_::WiFiSvcNetworklistDeployment_t>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getKnownNetworkList",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::WiFiSvcNetworklist, ::com::harman::connectivity::WifiTypedefs_::WiFiSvcNetworklistDeployment_t> _list, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _list.getValue(), _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_list, deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::getKnownNetworksCount(CommonAPI::CallStatus &_internalCallStatus, int32_t &_count, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_count(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getKnownNetworksCount",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_count, deploy_Result, deploy_Code);
_count = deploy_count.getValue();
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::getKnownNetworksCountAsync(GetKnownNetworksCountAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_count(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getKnownNetworksCount",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _count, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _count.getValue(), _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_count, deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::storeAsKnownNetwork(const std::string &_ssid, const std::string &_password, const std::string &_hexKey, const ::com::harman::connectivity::WifiTypedefs::stringList &_security, const ::com::harman::connectivity::WifiTypedefs::stringList &_groupCipher, const ::com::harman::connectivity::WifiTypedefs::stringList &_pairwiseCipher, const ::com::harman::connectivity::WifiTypedefs::stringList &_authentication, const int32_t &_securityOption, const bool &_hidden, const bool &_highestPriority, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_ssid(_ssid, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_password(_password, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_hexKey(_hexKey, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_security(_security, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_groupCipher(_groupCipher, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_pairwiseCipher(_pairwiseCipher, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_authentication(_authentication, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_securityOption(_securityOption, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_hidden(_hidden, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_highestPriority(_highestPriority, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "storeAsKnownNetwork",
        "sssasasasasibb",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_ssid, deploy_password, deploy_hexKey, deploy_security, deploy_groupCipher, deploy_pairwiseCipher, deploy_authentication, deploy_securityOption, deploy_hidden, deploy_highestPriority,
_internalCallStatus,
deploy_Result, deploy_Code);
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::storeAsKnownNetworkAsync(const std::string &_ssid, const std::string &_password, const std::string &_hexKey, const ::com::harman::connectivity::WifiTypedefs::stringList &_security, const ::com::harman::connectivity::WifiTypedefs::stringList &_groupCipher, const ::com::harman::connectivity::WifiTypedefs::stringList &_pairwiseCipher, const ::com::harman::connectivity::WifiTypedefs::stringList &_authentication, const int32_t &_securityOption, const bool &_hidden, const bool &_highestPriority, StoreAsKnownNetworkAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_ssid(_ssid, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_password(_password, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_hexKey(_hexKey, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_security(_security, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_groupCipher(_groupCipher, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_pairwiseCipher(_pairwiseCipher, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_authentication(_authentication, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_securityOption(_securityOption, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_hidden(_hidden, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_highestPriority(_highestPriority, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "storeAsKnownNetwork",
        "sssasasasasibb",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_ssid, deploy_password, deploy_hexKey, deploy_security, deploy_groupCipher, deploy_pairwiseCipher, deploy_authentication, deploy_securityOption, deploy_hidden, deploy_highestPriority,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::updateKnownNetworkPriority(const ::com::harman::connectivity::WifiTypedefs::knownNetworkList &_list, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::knownNetworkList, ::com::harman::connectivity::WifiTypedefs_::knownNetworkListDeployment_t> deploy_list(_list, static_cast<::com::harman::connectivity::WifiTypedefs_::knownNetworkListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::knownNetworkList, ::com::harman::connectivity::WifiTypedefs_::knownNetworkListDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "updateKnownNetworkPriority",
        "a(si)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_list,
_internalCallStatus,
deploy_Result, deploy_Code);
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::updateKnownNetworkPriorityAsync(const ::com::harman::connectivity::WifiTypedefs::knownNetworkList &_list, UpdateKnownNetworkPriorityAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::knownNetworkList, ::com::harman::connectivity::WifiTypedefs_::knownNetworkListDeployment_t> deploy_list(_list, static_cast<::com::harman::connectivity::WifiTypedefs_::knownNetworkListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::knownNetworkList, ::com::harman::connectivity::WifiTypedefs_::knownNetworkListDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "updateKnownNetworkPriority",
        "a(si)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_list,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::deleteKnownNetwork(const std::string &_ssid, const std::string &_bssid, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_ssid(_ssid, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bssid(_bssid, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "deleteKnownNetwork",
        "ss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_ssid, deploy_bssid,
_internalCallStatus,
deploy_Result, deploy_Code);
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::deleteKnownNetworkAsync(const std::string &_ssid, const std::string &_bssid, DeleteKnownNetworkAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_ssid(_ssid, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bssid(_bssid, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "deleteKnownNetwork",
        "ss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_ssid, deploy_bssid,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::startPeriodicScanning(const int32_t &_interval, const int32_t &_scantime, const bool &_autoconnect, const ::com::harman::connectivity::WifiTypedefs::stringList &_doNotAutoconnect, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_interval(_interval, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_scantime(_scantime, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_autoconnect(_autoconnect, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_doNotAutoconnect(_doNotAutoconnect, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "startPeriodicScanning",
        "iibas",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_interval, deploy_scantime, deploy_autoconnect, deploy_doNotAutoconnect,
_internalCallStatus,
deploy_Result, deploy_Code);
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::startPeriodicScanningAsync(const int32_t &_interval, const int32_t &_scantime, const bool &_autoconnect, const ::com::harman::connectivity::WifiTypedefs::stringList &_doNotAutoconnect, StartPeriodicScanningAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_interval(_interval, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_scantime(_scantime, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_autoconnect(_autoconnect, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_doNotAutoconnect(_doNotAutoconnect, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "startPeriodicScanning",
        "iibas",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_interval, deploy_scantime, deploy_autoconnect, deploy_doNotAutoconnect,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::stopPeriodicScanning(CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "stopPeriodicScanning",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_Result, deploy_Code);
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::stopPeriodicScanningAsync(StopPeriodicScanningAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "stopPeriodicScanning",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::getClientStatus(CommonAPI::CallStatus &_internalCallStatus, int32_t &_assocState, std::string &_bssid, std::string &_securityState, int32_t &_rssi, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_assocState(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bssid(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_securityState(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_rssi(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getClientStatus",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_assocState, deploy_bssid, deploy_securityState, deploy_rssi, deploy_Result, deploy_Code);
_assocState = deploy_assocState.getValue();
_bssid = deploy_bssid.getValue();
_securityState = deploy_securityState.getValue();
_rssi = deploy_rssi.getValue();
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::getClientStatusAsync(GetClientStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_assocState(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_bssid(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_securityState(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_rssi(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getClientStatus",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _assocState, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _bssid, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _securityState, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _rssi, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _assocState.getValue(), _bssid.getValue(), _securityState.getValue(), _rssi.getValue(), _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_assocState, deploy_bssid, deploy_securityState, deploy_rssi, deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::getClientAddress(CommonAPI::CallStatus &_internalCallStatus, std::string &_interfaceName, std::string &_ipAddress, std::string &_subnet, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_ipAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_subnet(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getClientAddress",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_interfaceName, deploy_ipAddress, deploy_subnet, deploy_Result, deploy_Code);
_interfaceName = deploy_interfaceName.getValue();
_ipAddress = deploy_ipAddress.getValue();
_subnet = deploy_subnet.getValue();
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::getClientAddressAsync(GetClientAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_ipAddress(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_subnet(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getClientAddress",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _interfaceName, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _ipAddress, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _subnet, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _interfaceName.getValue(), _ipAddress.getValue(), _subnet.getValue(), _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_interfaceName, deploy_ipAddress, deploy_subnet, deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::enableAP(const std::string &_interfaceName, const int32_t &_Keyindex, const ::com::harman::connectivity::WifiTypedefs::stringList &_Keylist, const std::string &_password, const std::string &_Encryption, const std::string &_Authentication, const int32_t &_Channel, const std::string &_opMode, const std::string &_CountryCode, const std::string &_ssid, const ::com::harman::connectivity::WifiTypedefs::stringList &_eWPSModeList, const bool &_broadcast_On, const std::string &_filter_Mode, const ::com::harman::connectivity::WifiTypedefs::stringList &_mac_list, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(_interfaceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Keyindex(_Keyindex, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_Keylist(_Keylist, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_password(_password, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Encryption(_Encryption, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Authentication(_Authentication, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Channel(_Channel, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_opMode(_opMode, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_CountryCode(_CountryCode, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_ssid(_ssid, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_eWPSModeList(_eWPSModeList, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_broadcast_On(_broadcast_On, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_filter_Mode(_filter_Mode, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_mac_list(_mac_list, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "enableAP",
        "siassssisssasbsas",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_interfaceName, deploy_Keyindex, deploy_Keylist, deploy_password, deploy_Encryption, deploy_Authentication, deploy_Channel, deploy_opMode, deploy_CountryCode, deploy_ssid, deploy_eWPSModeList, deploy_broadcast_On, deploy_filter_Mode, deploy_mac_list,
_internalCallStatus,
deploy_Result, deploy_Code);
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::enableAPAsync(const std::string &_interfaceName, const int32_t &_Keyindex, const ::com::harman::connectivity::WifiTypedefs::stringList &_Keylist, const std::string &_password, const std::string &_Encryption, const std::string &_Authentication, const int32_t &_Channel, const std::string &_opMode, const std::string &_CountryCode, const std::string &_ssid, const ::com::harman::connectivity::WifiTypedefs::stringList &_eWPSModeList, const bool &_broadcast_On, const std::string &_filter_Mode, const ::com::harman::connectivity::WifiTypedefs::stringList &_mac_list, EnableAPAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(_interfaceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Keyindex(_Keyindex, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_Keylist(_Keylist, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_password(_password, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Encryption(_Encryption, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Authentication(_Authentication, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Channel(_Channel, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_opMode(_opMode, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_CountryCode(_CountryCode, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_ssid(_ssid, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_eWPSModeList(_eWPSModeList, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_broadcast_On(_broadcast_On, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_filter_Mode(_filter_Mode, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_mac_list(_mac_list, static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "enableAP",
        "siassssisssasbsas",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_interfaceName, deploy_Keyindex, deploy_Keylist, deploy_password, deploy_Encryption, deploy_Authentication, deploy_Channel, deploy_opMode, deploy_CountryCode, deploy_ssid, deploy_eWPSModeList, deploy_broadcast_On, deploy_filter_Mode, deploy_mac_list,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::disableAP(const std::string &_interfaceName, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(_interfaceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "disableAP",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_interfaceName,
_internalCallStatus,
deploy_Result, deploy_Code);
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::disableAPAsync(const std::string &_interfaceName, DisableAPAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(_interfaceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "disableAP",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_interfaceName,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::getAccessPointProperties(CommonAPI::CallStatus &_internalCallStatus, std::string &_interfaceName, int32_t &_Keyindex, ::com::harman::connectivity::WifiTypedefs::stringList &_Keylist, std::string &_Encryption, std::string &_Authentication, int32_t &_Channel, std::string &_opMode, std::string &_CountryCode, std::string &_ssid, ::com::harman::connectivity::WifiTypedefs::stringList &_eWPSModeList, bool &_broadcast_On, std::string &_filter_Mode, ::com::harman::connectivity::WifiTypedefs::stringList &_mac_list, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Keyindex(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_Keylist(static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Encryption(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Authentication(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Channel(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_opMode(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_CountryCode(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_ssid(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_eWPSModeList(static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_broadcast_On(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_filter_Mode(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_mac_list(static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList,::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList,::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t>,
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList,::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getAccessPointProperties",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_interfaceName, deploy_Keyindex, deploy_Keylist, deploy_Encryption, deploy_Authentication, deploy_Channel, deploy_opMode, deploy_CountryCode, deploy_ssid, deploy_eWPSModeList, deploy_broadcast_On, deploy_filter_Mode, deploy_mac_list, deploy_Result, deploy_Code);
_interfaceName = deploy_interfaceName.getValue();
_Keyindex = deploy_Keyindex.getValue();
_Keylist = deploy_Keylist.getValue();
_Encryption = deploy_Encryption.getValue();
_Authentication = deploy_Authentication.getValue();
_Channel = deploy_Channel.getValue();
_opMode = deploy_opMode.getValue();
_CountryCode = deploy_CountryCode.getValue();
_ssid = deploy_ssid.getValue();
_eWPSModeList = deploy_eWPSModeList.getValue();
_broadcast_On = deploy_broadcast_On.getValue();
_filter_Mode = deploy_filter_Mode.getValue();
_mac_list = deploy_mac_list.getValue();
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::getAccessPointPropertiesAsync(GetAccessPointPropertiesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Keyindex(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_Keylist(static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Encryption(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Authentication(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Channel(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_opMode(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_CountryCode(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_ssid(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_eWPSModeList(static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_broadcast_On(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_filter_Mode(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_mac_list(static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList,::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList,::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t>,
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList,::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getAccessPointProperties",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _interfaceName, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Keyindex, CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> _Keylist, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Encryption, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Authentication, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Channel, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _opMode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _CountryCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _ssid, CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> _eWPSModeList, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> _broadcast_On, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _filter_Mode, CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> _mac_list, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _interfaceName.getValue(), _Keyindex.getValue(), _Keylist.getValue(), _Encryption.getValue(), _Authentication.getValue(), _Channel.getValue(), _opMode.getValue(), _CountryCode.getValue(), _ssid.getValue(), _eWPSModeList.getValue(), _broadcast_On.getValue(), _filter_Mode.getValue(), _mac_list.getValue(), _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_interfaceName, deploy_Keyindex, deploy_Keylist, deploy_Encryption, deploy_Authentication, deploy_Channel, deploy_opMode, deploy_CountryCode, deploy_ssid, deploy_eWPSModeList, deploy_broadcast_On, deploy_filter_Mode, deploy_mac_list, deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::getClientList(CommonAPI::CallStatus &_internalCallStatus, std::string &_interfaceName, ::com::harman::connectivity::WifiTypedefs::clientNodeList &_mClientList, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::clientNodeList, ::com::harman::connectivity::WifiTypedefs_::clientNodeListDeployment_t> deploy_mClientList(static_cast<::com::harman::connectivity::WifiTypedefs_::clientNodeListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::clientNodeList,::com::harman::connectivity::WifiTypedefs_::clientNodeListDeployment_t>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getClientList",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_interfaceName, deploy_mClientList, deploy_Result, deploy_Code);
_interfaceName = deploy_interfaceName.getValue();
_mClientList = deploy_mClientList.getValue();
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::getClientListAsync(GetClientListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::clientNodeList, ::com::harman::connectivity::WifiTypedefs_::clientNodeListDeployment_t> deploy_mClientList(static_cast<::com::harman::connectivity::WifiTypedefs_::clientNodeListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::clientNodeList,::com::harman::connectivity::WifiTypedefs_::clientNodeListDeployment_t>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getClientList",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _interfaceName, CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::clientNodeList, ::com::harman::connectivity::WifiTypedefs_::clientNodeListDeployment_t> _mClientList, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _interfaceName.getValue(), _mClientList.getValue(), _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_interfaceName, deploy_mClientList, deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::setMaxClient(const int32_t &_maxClient, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_maxClient(_maxClient, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setMaxClient",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_maxClient,
_internalCallStatus,
deploy_Result, deploy_Code);
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::setMaxClientAsync(const int32_t &_maxClient, SetMaxClientAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_maxClient(_maxClient, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setMaxClient",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_maxClient,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::getMaxClient(CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getMaxClient",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_Result, deploy_Code);
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::getMaxClientAsync(GetMaxClientAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getMaxClient",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::setRadioPower(const bool &_RadioPower, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_RadioPower(_RadioPower, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setRadioPower",
        "b",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_RadioPower,
_internalCallStatus,
deploy_Result, deploy_Code);
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::setRadioPowerAsync(const bool &_RadioPower, SetRadioPowerAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_RadioPower(_RadioPower, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setRadioPower",
        "b",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_RadioPower,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::setBand(const std::string &_band, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_band(_band, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setBand",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_band,
_internalCallStatus,
deploy_Result, deploy_Code);
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::setBandAsync(const std::string &_band, SetBandAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_band(_band, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setBand",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_band,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::getBand(CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getBand",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_Result, deploy_Code);
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::getBandAsync(GetBandAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getBand",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::setOperationMode11ac(const int32_t &_enable, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_enable(_enable, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setOperationMode11ac",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_enable,
_internalCallStatus,
deploy_Result, deploy_Code);
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::setOperationMode11acAsync(const int32_t &_enable, SetOperationMode11acAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_enable(_enable, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setOperationMode11ac",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_enable,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::getOperationMode11ac(CommonAPI::CallStatus &_internalCallStatus, int32_t &_enable, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_enable(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getOperationMode11ac",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_enable, deploy_Result, deploy_Code);
_enable = deploy_enable.getValue();
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::getOperationMode11acAsync(GetOperationMode11acAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_enable(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getOperationMode11ac",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _enable, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _enable.getValue(), _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_enable, deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::setMode(const ::com::harman::connectivity::WifiTypedefs::interfaceModeList &_list, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::WifiTypedefs::interfaceModeList &_Interfaces_Created, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::interfaceModeList, ::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t> deploy_list(_list, static_cast<::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::interfaceModeList, ::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t> deploy_Interfaces_Created(static_cast<::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::interfaceModeList, ::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::interfaceModeList,::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setMode",
        "a(sis)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_list,
_internalCallStatus,
deploy_Interfaces_Created, deploy_Result, deploy_Code);
_Interfaces_Created = deploy_Interfaces_Created.getValue();
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::setModeAsync(const ::com::harman::connectivity::WifiTypedefs::interfaceModeList &_list, SetModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::interfaceModeList, ::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t> deploy_list(_list, static_cast<::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::interfaceModeList, ::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t> deploy_Interfaces_Created(static_cast<::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::interfaceModeList, ::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::interfaceModeList,::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setMode",
        "a(sis)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_list,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::interfaceModeList, ::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t> _Interfaces_Created, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _Interfaces_Created.getValue(), _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_Interfaces_Created, deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::getModeList(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::WifiTypedefs::interfaceModeList &_list, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::interfaceModeList, ::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t> deploy_list(static_cast<::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::interfaceModeList,::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getModeList",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_list, deploy_Result, deploy_Code);
_list = deploy_list.getValue();
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::getModeListAsync(GetModeListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::interfaceModeList, ::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t> deploy_list(static_cast<::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::interfaceModeList,::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getModeList",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::interfaceModeList, ::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t> _list, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _list.getValue(), _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_list, deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::getActiveRoles(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::WifiTypedefs::stringList &_roles, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_roles(static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList,::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getActiveRoles",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_roles, deploy_Result, deploy_Code);
_roles = deploy_roles.getValue();
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::getActiveRolesAsync(GetActiveRolesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> deploy_roles(static_cast<::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList,::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getActiveRoles",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t> _roles, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _roles.getValue(), _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_roles, deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::getInterfaceByRole(const std::string &_role, CommonAPI::CallStatus &_internalCallStatus, std::string &_interfaceName, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_role(_role, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getInterfaceByRole",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_role,
_internalCallStatus,
deploy_interfaceName, deploy_Result, deploy_Code);
_interfaceName = deploy_interfaceName.getValue();
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::getInterfaceByRoleAsync(const std::string &_role, GetInterfaceByRoleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_role(_role, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getInterfaceByRole",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_role,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _interfaceName, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _interfaceName.getValue(), _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_interfaceName, deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::getRoleByInterface(const std::string &_interfaceName, CommonAPI::CallStatus &_internalCallStatus, std::string &_role, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(_interfaceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_role(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getRoleByInterface",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_interfaceName,
_internalCallStatus,
deploy_role, deploy_Result, deploy_Code);
_role = deploy_role.getValue();
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::getRoleByInterfaceAsync(const std::string &_interfaceName, GetRoleByInterfaceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(_interfaceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_role(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getRoleByInterface",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_interfaceName,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _role, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _role.getValue(), _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_role, deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::getMacAddress(const std::string &_interfaceName, CommonAPI::CallStatus &_internalCallStatus, std::string &_macAddr, std::string &_role, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(_interfaceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_macAddr(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_role(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getMacAddress",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_interfaceName,
_internalCallStatus,
deploy_macAddr, deploy_role, deploy_Result, deploy_Code);
_macAddr = deploy_macAddr.getValue();
_role = deploy_role.getValue();
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::getMacAddressAsync(const std::string &_interfaceName, GetMacAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_interfaceName(_interfaceName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_macAddr(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_role(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getMacAddress",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_interfaceName,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _macAddr, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _role, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _macAddr.getValue(), _role.getValue(), _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_macAddr, deploy_role, deploy_Result, deploy_Code));
    }
    void WifiServiceDBusProxy::getConnectionStatus(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::WifiTypedefs::ConnectionStatusList &_list, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::ConnectionStatusList, ::com::harman::connectivity::WifiTypedefs_::ConnectionStatusListDeployment_t> deploy_list(static_cast<::com::harman::connectivity::WifiTypedefs_::ConnectionStatusListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::ConnectionStatusList,::com::harman::connectivity::WifiTypedefs_::ConnectionStatusListDeployment_t>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getConnectionStatus",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_list, deploy_Result, deploy_Code);
_list = deploy_list.getValue();
_Result = deploy_Result.getValue();
_Code = deploy_Code.getValue();
}
    std::future<CommonAPI::CallStatus> WifiServiceDBusProxy::getConnectionStatusAsync(GetConnectionStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::ConnectionStatusList, ::com::harman::connectivity::WifiTypedefs_::ConnectionStatusListDeployment_t> deploy_list(static_cast<::com::harman::connectivity::WifiTypedefs_::ConnectionStatusListDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_Result(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_Code(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::ConnectionStatusList,::com::harman::connectivity::WifiTypedefs_::ConnectionStatusListDeployment_t>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getConnectionStatus",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::ConnectionStatusList, ::com::harman::connectivity::WifiTypedefs_::ConnectionStatusListDeployment_t> _list, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _Result, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _Code) {
        	if (_callback)
        		_callback(_internalCallStatus, _list.getValue(), _Result.getValue(), _Code.getValue());
        },
        std::make_tuple(deploy_list, deploy_Result, deploy_Code));
    }


void WifiServiceDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace connectivity
      } // namespace harman
      } // namespace com
      } // namespace v1
