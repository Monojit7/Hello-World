/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V1_COM_HARMAN_CONNECTIVITY_Wifi_Service_DBUS_PROXY_HPP_
#define V1_COM_HARMAN_CONNECTIVITY_Wifi_Service_DBUS_PROXY_HPP_

#include <v1/com/harman/connectivity/WifiServiceProxyBase.hpp>
#include "v1/com/harman/connectivity/WifiServiceDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace com {
namespace harman {
namespace connectivity {

class WifiServiceDBusProxy
    : virtual public WifiServiceProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    WifiServiceDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~WifiServiceDBusProxy() { }


    virtual ScanningForNetworksEvent& getScanningForNetworksEvent();
    virtual ScanResultsEvent& getScanResultsEvent();
    virtual JoinedNetworkEvent& getJoinedNetworkEvent();
    virtual LeftNetworkEvent& getLeftNetworkEvent();
    virtual EnableClientUpdateEvent& getEnableClientUpdateEvent();
    virtual WPASuccessEvent& getWPASuccessEvent();
    virtual WPAFailureEvent& getWPAFailureEvent();
    virtual ConnectionErrorEvent& getConnectionErrorEvent();
    virtual ConnectionEstablishedEvent& getConnectionEstablishedEvent();
    virtual ConnectionLostEvent& getConnectionLostEvent();
    virtual PasswordRequiredEvent& getPasswordRequiredEvent();
    virtual MaxNumberKnownNetworksReachedEvent& getMaxNumberKnownNetworksReachedEvent();
    virtual EnableAPUpdateEvent& getEnableAPUpdateEvent();
    virtual ClientJoinedEvent& getClientJoinedEvent();
    virtual ClientLeaveEvent& getClientLeaveEvent();
    virtual ClientWPASuccessEvent& getClientWPASuccessEvent();
    virtual MaxClientSetEvent& getMaxClientSetEvent();
    virtual BandSetEvent& getBandSetEvent();
    virtual ModeListUpdateEvent& getModeListUpdateEvent();
    virtual IfCreatedEvent& getIfCreatedEvent();
    virtual IfDestroyedEvent& getIfDestroyedEvent();
    virtual RoleChangedEvent& getRoleChangedEvent();
    virtual IfUpEvent& getIfUpEvent();
    virtual IfDownEvent& getIfDownEvent();
    virtual WlanCrashEvent& getWlanCrashEvent();
    virtual ServiceFailureEvent& getServiceFailureEvent();

    virtual void enableClient(const std::string &_interfaceName, CommonAPI::CallStatus &_internalCallStatus, std::string &_interfaceName_out, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> enableClientAsync(const std::string &_interfaceName, EnableClientAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void disableClient(const std::string &_interfaceName, CommonAPI::CallStatus &_internalCallStatus, std::string &_interfaceName_out, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> disableClientAsync(const std::string &_interfaceName, DisableClientAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void scanNetworks(const int32_t &_scanTime, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> scanNetworksAsync(const int32_t &_scanTime, ScanNetworksAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void stopScanNetwork(const std::string &_interfaceName, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> stopScanNetworkAsync(const std::string &_interfaceName, StopScanNetworkAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void joinNetwork(const std::string &_ssid, const std::string &_password, const std::string &_hexKey, const ::com::harman::connectivity::WifiTypedefs::stringList &_security, const ::com::harman::connectivity::WifiTypedefs::stringList &_groupCipher, const ::com::harman::connectivity::WifiTypedefs::stringList &_pairwiseCipher, const ::com::harman::connectivity::WifiTypedefs::stringList &_authentication, const int32_t &_securityOption, const bool &_hidden, const std::string &_ipAddress, const std::string &_subnetMask, const bool &_saveNetwork, const bool &_highestPriority, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, std::string &_Status, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> joinNetworkAsync(const std::string &_ssid, const std::string &_password, const std::string &_hexKey, const ::com::harman::connectivity::WifiTypedefs::stringList &_security, const ::com::harman::connectivity::WifiTypedefs::stringList &_groupCipher, const ::com::harman::connectivity::WifiTypedefs::stringList &_pairwiseCipher, const ::com::harman::connectivity::WifiTypedefs::stringList &_authentication, const int32_t &_securityOption, const bool &_hidden, const std::string &_ipAddress, const std::string &_subnetMask, const bool &_saveNetwork, const bool &_highestPriority, JoinNetworkAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void leaveNetwork(CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> leaveNetworkAsync(LeaveNetworkAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getKnownNetworkList(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::WifiTypedefs::WiFiSvcNetworklist &_list, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getKnownNetworkListAsync(GetKnownNetworkListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getKnownNetworksCount(CommonAPI::CallStatus &_internalCallStatus, int32_t &_count, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getKnownNetworksCountAsync(GetKnownNetworksCountAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void storeAsKnownNetwork(const std::string &_ssid, const std::string &_password, const std::string &_hexKey, const ::com::harman::connectivity::WifiTypedefs::stringList &_security, const ::com::harman::connectivity::WifiTypedefs::stringList &_groupCipher, const ::com::harman::connectivity::WifiTypedefs::stringList &_pairwiseCipher, const ::com::harman::connectivity::WifiTypedefs::stringList &_authentication, const int32_t &_securityOption, const bool &_hidden, const bool &_highestPriority, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> storeAsKnownNetworkAsync(const std::string &_ssid, const std::string &_password, const std::string &_hexKey, const ::com::harman::connectivity::WifiTypedefs::stringList &_security, const ::com::harman::connectivity::WifiTypedefs::stringList &_groupCipher, const ::com::harman::connectivity::WifiTypedefs::stringList &_pairwiseCipher, const ::com::harman::connectivity::WifiTypedefs::stringList &_authentication, const int32_t &_securityOption, const bool &_hidden, const bool &_highestPriority, StoreAsKnownNetworkAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void updateKnownNetworkPriority(const ::com::harman::connectivity::WifiTypedefs::knownNetworkList &_list, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> updateKnownNetworkPriorityAsync(const ::com::harman::connectivity::WifiTypedefs::knownNetworkList &_list, UpdateKnownNetworkPriorityAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void deleteKnownNetwork(const std::string &_ssid, const std::string &_bssid, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> deleteKnownNetworkAsync(const std::string &_ssid, const std::string &_bssid, DeleteKnownNetworkAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void startPeriodicScanning(const int32_t &_interval, const int32_t &_scantime, const bool &_autoconnect, const ::com::harman::connectivity::WifiTypedefs::stringList &_doNotAutoconnect, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> startPeriodicScanningAsync(const int32_t &_interval, const int32_t &_scantime, const bool &_autoconnect, const ::com::harman::connectivity::WifiTypedefs::stringList &_doNotAutoconnect, StartPeriodicScanningAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void stopPeriodicScanning(CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> stopPeriodicScanningAsync(StopPeriodicScanningAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getClientStatus(CommonAPI::CallStatus &_internalCallStatus, int32_t &_assocState, std::string &_bssid, std::string &_securityState, int32_t &_rssi, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getClientStatusAsync(GetClientStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getClientAddress(CommonAPI::CallStatus &_internalCallStatus, std::string &_interfaceName, std::string &_ipAddress, std::string &_subnet, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getClientAddressAsync(GetClientAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void enableAP(const std::string &_interfaceName, const int32_t &_Keyindex, const ::com::harman::connectivity::WifiTypedefs::stringList &_Keylist, const std::string &_password, const std::string &_Encryption, const std::string &_Authentication, const int32_t &_Channel, const std::string &_opMode, const std::string &_CountryCode, const std::string &_ssid, const ::com::harman::connectivity::WifiTypedefs::stringList &_eWPSModeList, const bool &_broadcast_On, const std::string &_filter_Mode, const ::com::harman::connectivity::WifiTypedefs::stringList &_mac_list, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> enableAPAsync(const std::string &_interfaceName, const int32_t &_Keyindex, const ::com::harman::connectivity::WifiTypedefs::stringList &_Keylist, const std::string &_password, const std::string &_Encryption, const std::string &_Authentication, const int32_t &_Channel, const std::string &_opMode, const std::string &_CountryCode, const std::string &_ssid, const ::com::harman::connectivity::WifiTypedefs::stringList &_eWPSModeList, const bool &_broadcast_On, const std::string &_filter_Mode, const ::com::harman::connectivity::WifiTypedefs::stringList &_mac_list, EnableAPAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void disableAP(const std::string &_interfaceName, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> disableAPAsync(const std::string &_interfaceName, DisableAPAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getAccessPointProperties(CommonAPI::CallStatus &_internalCallStatus, std::string &_interfaceName, int32_t &_Keyindex, ::com::harman::connectivity::WifiTypedefs::stringList &_Keylist, std::string &_Encryption, std::string &_Authentication, int32_t &_Channel, std::string &_opMode, std::string &_CountryCode, std::string &_ssid, ::com::harman::connectivity::WifiTypedefs::stringList &_eWPSModeList, bool &_broadcast_On, std::string &_filter_Mode, ::com::harman::connectivity::WifiTypedefs::stringList &_mac_list, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getAccessPointPropertiesAsync(GetAccessPointPropertiesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getClientList(CommonAPI::CallStatus &_internalCallStatus, std::string &_interfaceName, ::com::harman::connectivity::WifiTypedefs::clientNodeList &_mClientList, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getClientListAsync(GetClientListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setMaxClient(const int32_t &_maxClient, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMaxClientAsync(const int32_t &_maxClient, SetMaxClientAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getMaxClient(CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMaxClientAsync(GetMaxClientAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setRadioPower(const bool &_RadioPower, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setRadioPowerAsync(const bool &_RadioPower, SetRadioPowerAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setBand(const std::string &_band, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setBandAsync(const std::string &_band, SetBandAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getBand(CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getBandAsync(GetBandAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setOperationMode11ac(const int32_t &_enable, CommonAPI::CallStatus &_internalCallStatus, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setOperationMode11acAsync(const int32_t &_enable, SetOperationMode11acAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getOperationMode11ac(CommonAPI::CallStatus &_internalCallStatus, int32_t &_enable, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getOperationMode11acAsync(GetOperationMode11acAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setMode(const ::com::harman::connectivity::WifiTypedefs::interfaceModeList &_list, CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::WifiTypedefs::interfaceModeList &_Interfaces_Created, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setModeAsync(const ::com::harman::connectivity::WifiTypedefs::interfaceModeList &_list, SetModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getModeList(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::WifiTypedefs::interfaceModeList &_list, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getModeListAsync(GetModeListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getActiveRoles(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::WifiTypedefs::stringList &_roles, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getActiveRolesAsync(GetActiveRolesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getInterfaceByRole(const std::string &_role, CommonAPI::CallStatus &_internalCallStatus, std::string &_interfaceName, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getInterfaceByRoleAsync(const std::string &_role, GetInterfaceByRoleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getRoleByInterface(const std::string &_interfaceName, CommonAPI::CallStatus &_internalCallStatus, std::string &_role, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getRoleByInterfaceAsync(const std::string &_interfaceName, GetRoleByInterfaceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getMacAddress(const std::string &_interfaceName, CommonAPI::CallStatus &_internalCallStatus, std::string &_macAddr, std::string &_role, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMacAddressAsync(const std::string &_interfaceName, GetMacAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getConnectionStatus(CommonAPI::CallStatus &_internalCallStatus, ::com::harman::connectivity::WifiTypedefs::ConnectionStatusList &_list, std::string &_Result, int32_t &_Code, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getConnectionStatusAsync(GetConnectionStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<ScanningForNetworksEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>> scanningForNetworks_;
    CommonAPI::DBus::DBusEvent<ScanResultsEvent, CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::WiFiSvcNetworklist, ::com::harman::connectivity::WifiTypedefs_::WiFiSvcNetworklistDeployment_t>> scanResults_;
    CommonAPI::DBus::DBusEvent<JoinedNetworkEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> joinedNetwork_;
    CommonAPI::DBus::DBusEvent<LeftNetworkEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>> leftNetwork_;
    CommonAPI::DBus::DBusEvent<EnableClientUpdateEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> enableClientUpdate_;
    CommonAPI::DBus::DBusEvent<WPASuccessEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> wPASuccess_;
    CommonAPI::DBus::DBusEvent<WPAFailureEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>> wPAFailure_;
    CommonAPI::DBus::DBusEvent<ConnectionErrorEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> connectionError_;
    CommonAPI::DBus::DBusEvent<ConnectionEstablishedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> connectionEstablished_;
    CommonAPI::DBus::DBusEvent<ConnectionLostEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> connectionLost_;
    CommonAPI::DBus::DBusEvent<PasswordRequiredEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t>> passwordRequired_;
    CommonAPI::DBus::DBusEvent<MaxNumberKnownNetworksReachedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>> maxNumberKnownNetworksReached_;
    CommonAPI::DBus::DBusEvent<EnableAPUpdateEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> enableAPUpdate_;
    CommonAPI::DBus::DBusEvent<ClientJoinedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> clientJoined_;
    CommonAPI::DBus::DBusEvent<ClientLeaveEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>> clientLeave_;
    CommonAPI::DBus::DBusEvent<ClientWPASuccessEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> clientWPASuccess_;
    CommonAPI::DBus::DBusEvent<MaxClientSetEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>> maxClientSet_;
    CommonAPI::DBus::DBusEvent<BandSetEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> bandSet_;
    CommonAPI::DBus::DBusEvent<ModeListUpdateEvent, CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::interfaceModeList, ::com::harman::connectivity::WifiTypedefs_::interfaceModeListDeployment_t>> modeListUpdate_;
    CommonAPI::DBus::DBusEvent<IfCreatedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> ifCreated_;
    CommonAPI::DBus::DBusEvent<IfDestroyedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> ifDestroyed_;
    CommonAPI::DBus::DBusEvent<RoleChangedEvent, CommonAPI::Deployable<::com::harman::connectivity::WifiTypedefs::stringList, ::com::harman::connectivity::WifiTypedefs_::stringListDeployment_t>> roleChanged_;
    CommonAPI::DBus::DBusEvent<IfUpEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> ifUp_;
    CommonAPI::DBus::DBusEvent<IfDownEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>> ifDown_;
    CommonAPI::DBus::DBusEvent<WlanCrashEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> wlanCrash_;
    CommonAPI::DBus::DBusEvent<ServiceFailureEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> serviceFailure_;

};

} // namespace connectivity
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_CONNECTIVITY_Wifi_Service_DBUS_PROXY_HPP_

