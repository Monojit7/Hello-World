/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * description: Device Manager interfaces provide device detection control
	and get device
 *   informations.
 * author: ydou
 */
#ifndef V1_COM_HARMAN_MEDIA_Device_Manager_DBUS_PROXY_HPP_
#define V1_COM_HARMAN_MEDIA_Device_Manager_DBUS_PROXY_HPP_

#include <v1/com/harman/media/DeviceManagerProxyBase.hpp>
#include "v1/com/harman/media/DeviceManagerDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace com {
namespace harman {
namespace media {

class DeviceManagerDBusProxy
    : virtual public DeviceManagerProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    DeviceManagerDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~DeviceManagerDBusProxy() { }


    virtual OnMediumChangedEvent& getOnMediumChangedEvent();

    /**
     * description: Trigger the Device Manager to init & work for device detection.
     * author: ydou
     */
    virtual void startDeviceDetection(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> startDeviceDetectionAsync(StartDeviceDetectionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Get the current connecting devices to Top with the detail information.
     * author: ydou
     */
    virtual void getDevices(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_error, ::v1::com::harman::media::BaseType::tMediumInfoList &_mediumList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getDevicesAsync(GetDevicesAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<OnMediumChangedEvent, CommonAPI::Deployable<::v1::com::harman::media::BaseType::tMediumInfo, ::v1::com::harman::media::BaseType_::tMediumInfoDeployment_t>> onMediumChanged_;

};

} // namespace media
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_MEDIA_Device_Manager_DBUS_PROXY_HPP_

