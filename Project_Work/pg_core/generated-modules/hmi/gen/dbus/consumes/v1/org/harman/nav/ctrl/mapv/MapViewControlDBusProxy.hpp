/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * description: MapViewerController = This interface offers functions to control the MapViewer
 */
#ifndef V1_ORG_HARMAN_NAV_CTRL_MAPV_Map_View_Control_DBUS_PROXY_HPP_
#define V1_ORG_HARMAN_NAV_CTRL_MAPV_Map_View_Control_DBUS_PROXY_HPP_

#include <v1/org/harman/nav/ctrl/mapv/MapViewControlProxyBase.hpp>
#include "v1/org/harman/nav/ctrl/mapv/MapViewControlDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace org {
namespace harman {
namespace nav {
namespace ctrl {
namespace mapv {

class MapViewControlDBusProxy
    : virtual public MapViewControlProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    MapViewControlDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~MapViewControlDBusProxy() { }

    virtual StatusAttribute& getStatusAttribute();

    virtual MapViewScaleChangedEvent& getMapViewScaleChangedEvent();
    virtual MapViewVisibilityChangedEvent& getMapViewVisibilityChangedEvent();
    virtual DisplayedRoutesEvent& getDisplayedRoutesEvent();

    /**
     * description: GetVersion = This method returns the API version implemented by the server
     *   application
     */
    virtual void getVersion(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: createMapViewInstance = This method creates a new map instance
     */
    virtual void createMapViewInstance(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::Dimension &_mapViewSize, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapViewType &_mapViewType, CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> createMapViewInstanceAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::Dimension &_mapViewSize, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapViewType &_mapViewType, CreateMapViewInstanceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: releaseMapViewInstance = This method releases (i.e. destroys) a given map
     *   instance. Only invisible map instances can be released
     */
    virtual void releaseMapViewInstance(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> releaseMapViewInstanceAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, ReleaseMapViewInstanceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewType = This method returns the map type of a map instance as it was
     *   set using CreateMapViewInstance
     */
    virtual void getMapViewType(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapViewType &_mapViewType, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewTypeAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetMapViewTypeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getSupportedMapViewTypes = This method retrieves the supported map view types
     */
    virtual void getSupportedMapViewTypes(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapViewType> &_mapViewTypeList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewTypesAsync(GetSupportedMapViewTypesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setTargetPoint = This method sets the position of the point the camera is
     *   always aimed at
     */
    virtual void setTargetPoint(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::org::harman::nav::ctrl::CommonTypes::Coordinate3D &_targetPoint, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setTargetPointAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::org::harman::nav::ctrl::CommonTypes::Coordinate3D &_targetPoint, SetTargetPointAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getTargetPoint = This method retrieves the target point position
     */
    virtual void getTargetPoint(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::CommonTypes::Coordinate3D &_targetPoint, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getTargetPointAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetTargetPointAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setFollowCarMode = This method sets the FollowCar mode
     */
    virtual void setFollowCarMode(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const bool &_followCarMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setFollowCarModeAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const bool &_followCarMode, SetFollowCarModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getFollowCarMode = This method returns the current FollowCar-mode
     */
    virtual void getFollowCarMode(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, bool &_followCarMode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getFollowCarModeAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetFollowCarModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setCameraPosition = This method sets the coordinates of the point at which the
     *   camera must be positioned
     */
    virtual void setCameraPosition(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::org::harman::nav::ctrl::CommonTypes::Coordinate3D &_position, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setCameraPositionAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::org::harman::nav::ctrl::CommonTypes::Coordinate3D &_position, SetCameraPositionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getCameraPosition = This method returns the coordinates of the point at which
     *   the camera is positioned
     */
    virtual void getCameraPosition(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::CommonTypes::Coordinate3D &_position, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCameraPositionAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetCameraPositionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setCameraHeadingAngle = This method sets the map view heading angle
     */
    virtual void setCameraHeadingAngle(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const int32_t &_heading, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setCameraHeadingAngleAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const int32_t &_heading, SetCameraHeadingAngleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setCameraHeadingToTarget = This method sets the camera heading in such a way,
     *   that the camera always looks at a given target
     */
    virtual void setCameraHeadingToTarget(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::org::harman::nav::ctrl::CommonTypes::Coordinate2D &_target, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setCameraHeadingToTargetAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::org::harman::nav::ctrl::CommonTypes::Coordinate2D &_target, SetCameraHeadingToTargetAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setCameraHeadingTrackUp = This method sets the camera heading in such a way,
     *   that the camera always looks in the direction in which the car is moving
     */
    virtual void setCameraHeadingTrackUp(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setCameraHeadingTrackUpAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, SetCameraHeadingTrackUpAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getCameraHeading = This method returns the current camera heading
     */
    virtual void getCameraHeading(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_headingType, int32_t &_headingAngle, ::org::harman::nav::ctrl::CommonTypes::Coordinate2D &_target, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCameraHeadingAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetCameraHeadingAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setCameraTiltAngle = This method sets the camera tilt angle
     */
    virtual void setCameraTiltAngle(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const int32_t &_tilt, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setCameraTiltAngleAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const int32_t &_tilt, SetCameraTiltAngleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getCameraTiltAngle = This method returns the camera tilt angle
     */
    virtual void getCameraTiltAngle(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, int32_t &_tilt, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCameraTiltAngleAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetCameraTiltAngleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setCameraRollAngle = This method sets the camera roll angle
     */
    virtual void setCameraRollAngle(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const int32_t &_roll, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setCameraRollAngleAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const int32_t &_roll, SetCameraRollAngleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getCameraRollAngle = This method returns the camera roll angle
     */
    virtual void getCameraRollAngle(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, int32_t &_roll, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCameraRollAngleAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetCameraRollAngleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setCameraDistanceFromTargetPoint = This method sets the mode and the camera
     *   distance from the target point
     */
    virtual void setCameraDistanceFromTargetPoint(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const uint32_t &_distance, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setCameraDistanceFromTargetPointAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const uint32_t &_distance, SetCameraDistanceFromTargetPointAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getCameraDistanceFromTargetPoint = This method gets the mode and the camera
     *   distance from the target point
     */
    virtual void getCameraDistanceFromTargetPoint(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_distance, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCameraDistanceFromTargetPointAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetCameraDistanceFromTargetPointAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewScaleMode = This method sets the scaling mode.
     */
    virtual void setMapViewScaleMode(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapScaleMode &_scaleMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewScaleModeAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapScaleMode &_scaleMode, SetMapViewScaleModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewScaleMode = This method gets the scaling mode.
     */
    virtual void getMapViewScaleMode(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapScaleMode &_scaleMode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewScaleModeAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetMapViewScaleModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getSupportedMapViewScaleModes = This method gets the supported scaling modes.
     */
    virtual void getSupportedMapViewScaleModes(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapScaleMode> &_scaleModeList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewScaleModesAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetSupportedMapViewScaleModesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: addMapViewScaleChangedListener = This method adds a listener which is notified
     *   when map view scale changes.
     */
    virtual void addMapViewScaleChangedListener(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> addMapViewScaleChangedListenerAsync(AddMapViewScaleChangedListenerAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: removeMapViewScaleChangedListener = This method removes a listener which is
     *   notified when map view scale changes.
     */
    virtual void removeMapViewScaleChangedListener(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> removeMapViewScaleChangedListenerAsync(RemoveMapViewScaleChangedListenerAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setCameraHeight = This method sets the camera height
     */
    virtual void setCameraHeight(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const uint32_t &_height, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setCameraHeightAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const uint32_t &_height, SetCameraHeightAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getCameraHeight = This method gets the camera height
     */
    virtual void getCameraHeight(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_height, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCameraHeightAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetCameraHeightAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewPerspective = This method sets the map perspective
     */
    virtual void setMapViewPerspective(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapPerspective &_perspective, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewPerspectiveAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapPerspective &_perspective, SetMapViewPerspectiveAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewPerspective = This method returns the current map perspective
     */
    virtual void getMapViewPerspective(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapPerspective &_perspective, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewPerspectiveAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetMapViewPerspectiveAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getSupportedMapViewPerspectives = This method retrieves the supported mapview
     *   perspectives
     */
    virtual void getSupportedMapViewPerspectives(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapPerspective> &_perspectiveList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewPerspectivesAsync(GetSupportedMapViewPerspectivesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewObjectVisibility = This method specifies the type of objects to show
     *   on the map.
     */
    virtual void setMapViewObjectVisibility(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapObjectVisibility &_objectVisibilityList, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewObjectVisibilityAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapObjectVisibility &_objectVisibilityList, SetMapViewObjectVisibilityAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewObjectVisibility = This method gets the type of objects shown on the
     *   map.
     */
    virtual void getMapViewObjectVisibility(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapObjectVisibility &_objectVisibilityList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewObjectVisibilityAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetMapViewObjectVisibilityAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getSupportedMapViewObjectVisibilities = This method gets the supported object
     *   visibilities.
     */
    virtual void getSupportedMapViewObjectVisibilities(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapObject> &_objectVisibilityList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewObjectVisibilitiesAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetSupportedMapViewObjectVisibilitiesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getScaleList = This method returns a list of supported map scales
     */
    virtual void getScaleList(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapScale> &_scaleList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getScaleListAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetScaleListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewScale = This method sets the map scale by specifying a ScaleID
     */
    virtual void setMapViewScale(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const uint16_t &_scaleID, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewScaleAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const uint16_t &_scaleID, SetMapViewScaleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewScaleByDelta = This method sets the map scale by specifying a delta
     *   value with respect to the currently set ScaleID
     */
    virtual void setMapViewScaleByDelta(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const int16_t &_scaleDelta, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewScaleByDeltaAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const int16_t &_scaleDelta, SetMapViewScaleByDeltaAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewScaleByMetersPerPixel = This method sets the map scale by specifying
     *   the number of meters that a pixel represents
     */
    virtual void setMapViewScaleByMetersPerPixel(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const double &_metersPerPixel, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewScaleByMetersPerPixelAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const double &_metersPerPixel, SetMapViewScaleByMetersPerPixelAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewScale = This method returns the currently used map scale
     */
    virtual void getMapViewScale(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, int8_t &_scaleID, ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapScaleType &_isMinMax, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewScaleAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetMapViewScaleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewBoundingBox = This method sets the map bounding box
     */
    virtual void setMapViewBoundingBox(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::ScreenRectangle &_boundingBox, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewBoundingBoxAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::ScreenRectangle &_boundingBox, SetMapViewBoundingBoxAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewBoundingBox = This method returns the bounding box of a given map
     *   instance
     */
    virtual void getMapViewBoundingBox(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::ScreenRectangle &_boundingBox, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewBoundingBoxAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetMapViewBoundingBoxAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewSaveArea = This methods defines the area that the HMI guarantees not
     *   to 
    cover with other windows or user interface elements
     */
    virtual void setMapViewSaveArea(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::ScreenRectangle &_saveArea, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewSaveAreaAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::ScreenRectangle &_saveArea, SetMapViewSaveAreaAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: SetMapViewSaveArea = This methods defines the area that the HMI guarantees not
     *   to 
    cover with other getMapViewSaveArea or user interface elements
     */
    virtual void getMapViewSaveArea(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::ScreenRectangle &_saveArea, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewSaveAreaAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetMapViewSaveAreaAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewPan = This method pans a given map instance
     */
    virtual void setMapViewPan(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const int32_t &_systemMilisecondsTime, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::PanAction &_panningAction, const std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::ScreenCoordinate> &_pixelCoordinates, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewPanAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const int32_t &_systemMilisecondsTime, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::PanAction &_panningAction, const std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::ScreenCoordinate> &_pixelCoordinates, SetMapViewPanAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewRotation = This method rotates the map
     */
    virtual void setMapViewRotation(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const int32_t &_rotationAngle, const int32_t &_rotationAnglePerSecond, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewRotationAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const int32_t &_rotationAngle, const int32_t &_rotationAnglePerSecond, SetMapViewRotationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewRotation = This method is particularly interesting for debugging
     *   purposes
     */
    virtual void getMapViewRotation(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, int32_t &_rotationAngle, int32_t &_rotationAnglePerFrame, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewRotationAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetMapViewRotationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewVisibilityMode = This method sets the current visibility mode
     */
    virtual void setMapViewVisibilityMode(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::Visibility &_visibilityMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewVisibilityModeAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::Visibility &_visibilityMode, SetMapViewVisibilityModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewVisibilityMode = This method returns the current visibility mode
     */
    virtual void getMapViewVisibilityMode(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::Visibility &_visibilityMode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewVisibilityModeAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetMapViewVisibilityModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getSupportedMapViewVisibilityModes = This method retrieves the supported
     *   mapview visibility modes
     */
    virtual void getSupportedMapViewVisibilityModes(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::Visibility> &_visibilityModeList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewVisibilityModesAsync(GetSupportedMapViewVisibilityModesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewPerformanceLevel = This method sets the perfomance level of a given
     *   map instance
     */
    virtual void setMapViewPerformanceLevel(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::Level &_performanceLevel, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewPerformanceLevelAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::Level &_performanceLevel, SetMapViewPerformanceLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewPerformanceLevel = This method returns the perfomance level of a
     *   given map instance
     */
    virtual void getMapViewPerformanceLevel(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::Level &_performanceLevel, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewPerformanceLevelAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetMapViewPerformanceLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getSupportedMapViewPerformanceLevels = This method retrieves the supported
     *   perfomance levels
     */
    virtual void getSupportedMapViewPerformanceLevels(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::Level> &_performanceLevelList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewPerformanceLevelsAsync(GetSupportedMapViewPerformanceLevelsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: displayRoute = This method visualizes one of the calculated routes
     */
    virtual void displayRoute(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_routeHandle, const bool &_highlighted, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> displayRouteAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_routeHandle, const bool &_highlighted, DisplayRouteAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: hideRoute = This method hides one of the visible routes
     */
    virtual void hideRoute(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_routeHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> hideRouteAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_routeHandle, HideRouteAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getDisplayedRoutes = This method returns a list of displayed routes
     */
    virtual void getDisplayedRoutes(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::DisplayedRoute> &_displayedRoutes, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getDisplayedRoutesAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetDisplayedRoutesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: addKml = add Kml Content to MapViewer
     */
    virtual void addKml(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::KmlType &_kmlType, const std::string &_kml, const bool &_show, CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::CommonTypes::Handle &_kmlHandle, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> addKmlAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::KmlType &_kmlType, const std::string &_kml, const bool &_show, AddKmlAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: deleteKml = deletes (and hides) Kml Content to MapViewer
     */
    virtual void deleteKml(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_kmlHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> deleteKmlAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_kmlHandle, DeleteKmlAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setKmlVisibility = shows/hides a kmlFile (without deleting it actually)
     */
    virtual void setKmlVisibility(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_kmlHandle, const bool &_show, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setKmlVisibilityAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_kmlHandle, const bool &_show, SetKmlVisibilityAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: pushSettings = stores the current map-ctrl setting (scale, orientation, visible
     *   objects ...) to an internal stack
     */
    virtual void pushSettings(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> pushSettingsAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, PushSettingsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: popSettings = re-stores the current map-ctrl setting (scale, orientation,
     *   visible objects ...) from the stack (called after pushSetting)
     */
    virtual void popSettings(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> popSettingsAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, PopSettingsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: resetSettings = resets the mapInstance to a dedicated state (same as startup)
     */
    virtual void resetSettings(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> resetSettingsAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, ResetSettingsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: displayObjectList = This method visualizes a list of objects, created in
     *   another domain
     */
    virtual void displayObjectList(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::ObjectList &_objectList, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> displayObjectListAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::ObjectList &_objectList, DisplayObjectListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: hideObjectList = This method hides a list of objects, created in another domain
     */
    virtual void hideObjectList(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::ObjectList &_objectList, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> hideObjectListAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::ObjectList &_objectList, HideObjectListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: highlightObjectListItem = highlights exclusively a various number of items
     *   within an objectList. For unhighlight all, objectListItems is empty
     */
    virtual void highlightObjectListItem(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::ObjectListItem> &_objectListItems, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> highlightObjectListItemAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::ObjectListItem> &_objectListItems, HighlightObjectListItemAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: centerOnObjectListItems = This method shows an overview map with the current
     *   route in the center
     */
    virtual void centerOnObjectListItems(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::ObjectListItem> &_objectListItems, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> centerOnObjectListItemsAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::ObjectListItem> &_objectListItems, CenterOnObjectListItemsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getPoiCategoriesVisible = Get the set of POI categories displayed on the map.
     */
    virtual void getPoiCategoriesVisible(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<uint32_t> &_poiCategoryIds, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getPoiCategoriesVisibleAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetPoiCategoriesVisibleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
     *   displayed on the map.
                       Any specified category that until now
     *   was displayed with scale limits is now displayed without limits.
     */
    virtual void setPoiCategoriesVisible(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const std::vector<uint32_t> &_poiCategoryIds, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setPoiCategoriesVisibleAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const std::vector<uint32_t> &_poiCategoryIds, SetPoiCategoriesVisibleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setPoiCategoriesVisibleMode = gives the possibility to show or hide all POI
     *   categories regardsless of
                       of which one are enabled with
     *   setPoiCategoriesVisible/setPoiCategoriesNotVisible.
                       The
     *   selection which is done with
     *   setPoiCategoriesVisible/setPoiCategoriesNotVisible is not changed by this
     *   command.
     */
    virtual void setPoiCategoriesVisibleMode(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::PoiCategoriesVisibleMode &_poiCategoriesVisibleMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setPoiCategoriesVisibleModeAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::PoiCategoriesVisibleMode &_poiCategoriesVisibleMode, SetPoiCategoriesVisibleModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
     *   displayed on the map, where the POI's are only displayed in a specific range
     *   of scales.
                       Any specified category that until now was
     *   displayed without scale limits is now displayed with limits.
     */
    virtual void setPoiCategoriesVisibleWithinLimits(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const std::vector<uint32_t> &_poiCategoryIds, const int8_t &_minScaleID, const int8_t &_maxScaleID, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setPoiCategoriesVisibleWithinLimitsAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const std::vector<uint32_t> &_poiCategoryIds, const int8_t &_minScaleID, const int8_t &_maxScaleID, SetPoiCategoriesVisibleWithinLimitsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setPoiCategoriesNotVisible = Remove POI categories from the set of POI
     *   categories displayed on the map.
     */
    virtual void setPoiCategoriesNotVisible(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const std::vector<uint32_t> &_poiCategoryIds, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setPoiCategoriesNotVisibleAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const std::vector<uint32_t> &_poiCategoryIds, SetPoiCategoriesNotVisibleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setTrafficIncidentsVisibility = Set the visibility of Traffic Incidents on the
     *   map.
     */
    virtual void setTrafficIncidentsVisibility(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const bool &_visible, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setTrafficIncidentsVisibilityAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const bool &_visible, SetTrafficIncidentsVisibilityAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewTheme = This method configures the theme of a given map view instance
     */
    virtual void setMapViewTheme(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapTheme &_mapViewTheme, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewThemeAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapTheme &_mapViewTheme, SetMapViewThemeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewTheme = This method returns the current theme of a given map view
     *   instance
     */
    virtual void getMapViewTheme(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapTheme &_mapViewTheme, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewThemeAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetMapViewThemeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getSupportedMapViewThemes = This method retrieves the supported mapview themes
     */
    virtual void getSupportedMapViewThemes(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapTheme> &_mapViewThemeList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewThemesAsync(GetSupportedMapViewThemesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: convertPixelCoordsToGeoCoords = This method converts pixel coordinates to
     *   geographical coordinates
     */
    virtual void convertPixelCoordsToGeoCoords(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::Pixel> &_pixelCoordinates, CommonAPI::CallStatus &_internalCallStatus, std::vector<::org::harman::nav::ctrl::CommonTypes::Coordinate2D> &_geoCoordinates, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> convertPixelCoordsToGeoCoordsAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::Pixel> &_pixelCoordinates, ConvertPixelCoordsToGeoCoordsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: convertGeoCoordsToPixelCoords = This method converts geographical coordinates
     *   into pixel coordinates
     */
    virtual void convertGeoCoordsToPixelCoords(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const std::vector<::org::harman::nav::ctrl::CommonTypes::Coordinate2D> &_geoCoordinates, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::Pixel> &_pixelCoordinates, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> convertGeoCoordsToPixelCoordsAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const std::vector<::org::harman::nav::ctrl::CommonTypes::Coordinate2D> &_geoCoordinates, ConvertGeoCoordsToPixelCoordsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: displayCustomElements = This method visualizes a set of custom elements on the
     *   map
     */
    virtual void displayCustomElements(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::CustomElement> &_customElements, CommonAPI::CallStatus &_internalCallStatus, std::vector<::org::harman::nav::ctrl::CommonTypes::Handle> &_customElemenHandles, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> displayCustomElementsAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::CustomElement> &_customElements, DisplayCustomElementsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: hideCustomElements = This method hides a set of custom elements which were
     *   visualized by DisplayCustomElements
     */
    virtual void hideCustomElements(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const std::vector<::org::harman::nav::ctrl::CommonTypes::Handle> &_customElemenHandles, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> hideCustomElementsAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const std::vector<::org::harman::nav::ctrl::CommonTypes::Handle> &_customElemenHandles, HideCustomElementsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getDisplayedCustomElements = This method retrieves the visualized custom
     *   elements on the map
     */
    virtual void getDisplayedCustomElements(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::tCustomElementDict &_customElements, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getDisplayedCustomElementsAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetDisplayedCustomElementsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: selectElementsOnMap = This method selects elements on the map view which are at
     *   the position specified by user input
     */
    virtual void selectElementsOnMap(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::Pixel &_pixelCoordinate, const std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::SelectableMapType> &_selectableTypes, const uint16_t &_maxNumberOfSelectedElements, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::SelectedMapElement> &_selectedElements, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> selectElementsOnMapAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::Pixel &_pixelCoordinate, const std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::SelectableMapType> &_selectableTypes, const uint16_t &_maxNumberOfSelectedElements, SelectElementsOnMapAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: mapViewGesture = This method is a compound gesture command
     */
    virtual void mapViewGesture(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const int32_t &_systemMilisecondsTime, const bool &_isFingerDown, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::ScreenCoordinate &_anchorScreen, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::ScreenCoordinate &_scrollOffset, const double &_zoomFactor, const double &_rotationAngle, const double &_pitchAngle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> mapViewGestureAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const int32_t &_systemMilisecondsTime, const bool &_isFingerDown, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::ScreenCoordinate &_anchorScreen, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::ScreenCoordinate &_scrollOffset, const double &_zoomFactor, const double &_rotationAngle, const double &_pitchAngle, MapViewGestureAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: mapShowRouteOverview = This method shows an overview map with the current route
     *   in the center
     */
    virtual void mapShowRouteOverview(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const uint32_t &_routeId, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapViewOrientation &_orientation, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> mapShowRouteOverviewAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const uint32_t &_routeId, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapViewOrientation &_orientation, MapShowRouteOverviewAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: mapSetStyle = Changes the StyleSet of the MapViewer. e.g. day/night switch
     */
    virtual void mapSetStyle(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapViewStyleSet &_styleSet, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> mapSetStyleAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapViewStyleSet &_styleSet, MapSetStyleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapModeList = This method returns a list of supported map modes
     */
    virtual void getMapModeList(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<std::string> &_mapModeList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapModeListAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetMapModeListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapMode = This method sets the map mode (String-datatype, could be
     *   hard-coded in HMI if controller is known)
     */
    virtual void setMapMode(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const std::string &_mapMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapModeAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const std::string &_mapMode, SetMapModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getMapMode(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::string &_mapMode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapModeAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetMapModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setAutozoomSetting(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::AutozoomSetting &_autozoomSetting, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setAutozoomSettingAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::AutozoomSetting &_autozoomSetting, SetAutozoomSettingAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getAutozoomSetting(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::AutozoomSetting &_autozoomSetting, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getAutozoomSettingAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetAutozoomSettingAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setAutozoomEnabled(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const bool &_enabled, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setAutozoomEnabledAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, const bool &_enabled, SetAutozoomEnabledAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getAutozoomEnabled(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, bool &_enabled, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getAutozoomEnabledAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_sessionHandle, const ::org::harman::nav::ctrl::CommonTypes::Handle &_mapViewInstanceHandle, GetAutozoomEnabledAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<StatusAttribute, ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes_::StatusDeployment_t>> status_;

    CommonAPI::DBus::DBusEvent<MapViewScaleChangedEvent, CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<int8_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapScaleType, CommonAPI::EmptyDeployment>> mapViewScaleChanged_;
    CommonAPI::DBus::DBusEvent<MapViewVisibilityChangedEvent, CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::Visibility, CommonAPI::EmptyDeployment>> mapViewVisibilityChanged_;
    CommonAPI::DBus::DBusEvent<DisplayedRoutesEvent, CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::vector<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::DisplayedRoute>, CommonAPI::DBus::ArrayDeployment<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes_::DisplayedRouteDeployment_t>>> displayedRoutes_;

};

} // namespace mapv
} // namespace ctrl
} // namespace nav
} // namespace harman
} // namespace org
} // namespace v1

#endif // V1_ORG_HARMAN_NAV_CTRL_MAPV_Map_View_Control_DBUS_PROXY_HPP_

