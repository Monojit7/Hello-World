/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * description: Device Manager interfaces provide device detection control
	and get device
 *   informations.
 * author: ydou
 */
#include <v1/com/harman/media/DeviceManagerDBusProxy.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace media {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createDeviceManagerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<DeviceManagerDBusProxy>(_address, _connection);
}

INITIALIZER(registerDeviceManagerDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		DeviceManager::getInterface(),
		&createDeviceManagerDBusProxy);
}

DeviceManagerDBusProxy::DeviceManagerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		onMediumChanged_(*this, "onMediumChanged", "(tsiiisss)", std::make_tuple(static_cast<::v1::com::harman::media::BaseType_::tMediumInfoDeployment_t*>(nullptr)))
{
}


DeviceManagerDBusProxy::OnMediumChangedEvent& DeviceManagerDBusProxy::getOnMediumChangedEvent() {
    return onMediumChanged_;
}
    
    /**
     * description: Trigger the Device Manager to init & work for device detection.
     * author: ydou
     */
    void DeviceManagerDBusProxy::startDeviceDetection(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_error, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "startDeviceDetection",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_error);
_error = deploy_error.getValue();
}
    std::future<CommonAPI::CallStatus> DeviceManagerDBusProxy::startDeviceDetectionAsync(StartDeviceDetectionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "startDeviceDetection",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> _deploy_error) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue());
        },
        std::make_tuple(deploy_error));
    }
    /**
     * description: Get the current connecting devices to Top with the detail information.
     * author: ydou
     */
    void DeviceManagerDBusProxy::getDevices(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_error, ::v1::com::harman::media::BaseType::tMediumInfoList &_mediumList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tMediumInfoList, ::v1::com::harman::media::BaseType_::tMediumInfoListDeployment_t> deploy_mediumList(static_cast<::v1::com::harman::media::BaseType_::tMediumInfoListDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tMediumInfoList,::v1::com::harman::media::BaseType_::tMediumInfoListDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getDevices",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_error,
deploy_mediumList);
_error = deploy_error.getValue();
_mediumList = deploy_mediumList.getValue();
}
    std::future<CommonAPI::CallStatus> DeviceManagerDBusProxy::getDevicesAsync(GetDevicesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::media::BaseType::tMediumInfoList, ::v1::com::harman::media::BaseType_::tMediumInfoListDeployment_t> deploy_mediumList(static_cast<::v1::com::harman::media::BaseType_::tMediumInfoListDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v1::com::harman::media::BaseType::tMediumInfoList,::v1::com::harman::media::BaseType_::tMediumInfoListDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getDevices",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::media::BaseType::tBaseError, CommonAPI::EmptyDeployment> _deploy_error, CommonAPI::Deployable<::v1::com::harman::media::BaseType::tMediumInfoList, ::v1::com::harman::media::BaseType_::tMediumInfoListDeployment_t> _mediumList) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue(), _mediumList.getValue());
        },
        std::make_tuple(deploy_error, deploy_mediumList));
    }


void DeviceManagerDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace media
      } // namespace harman
      } // namespace com
      } // namespace v1
