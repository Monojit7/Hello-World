/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#include <v3/com/harman/connectivity/CarPlayDomainSvcDBusProxy.hpp>

namespace v3 {
namespace com {
namespace harman {
namespace connectivity {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createCarPlayDomainSvcDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<CarPlayDomainSvcDBusProxy>(_address, _connection);
}

INITIALIZER(registerCarPlayDomainSvcDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		CarPlayDomainSvc::getInterface(),
		&createCarPlayDomainSvcDBusProxy);
}

CarPlayDomainSvcDBusProxy::CarPlayDomainSvcDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		sessionStatus_(*this, "sessionStatus", "b", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		remoteScreenActive_(*this, "remoteScreenActive", "", std::make_tuple()),
		remoteScreenInactive_(*this, "remoteScreenInactive", "", std::make_tuple())
{
}


CarPlayDomainSvcDBusProxy::SessionStatusEvent& CarPlayDomainSvcDBusProxy::getSessionStatusEvent() {
    return sessionStatus_;
}
CarPlayDomainSvcDBusProxy::RemoteScreenActiveEvent& CarPlayDomainSvcDBusProxy::getRemoteScreenActiveEvent() {
    return remoteScreenActive_;
}
CarPlayDomainSvcDBusProxy::RemoteScreenInactiveEvent& CarPlayDomainSvcDBusProxy::getRemoteScreenInactiveEvent() {
    return remoteScreenInactive_;
}
    
    void CarPlayDomainSvcDBusProxy::showRemoteScreen(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "showRemoteScreen",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> CarPlayDomainSvcDBusProxy::showRemoteScreenAsync(ShowRemoteScreenAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "showRemoteScreen",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    void CarPlayDomainSvcDBusProxy::hideRemoteScreen(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "hideRemoteScreen",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> CarPlayDomainSvcDBusProxy::hideRemoteScreenAsync(HideRemoteScreenAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "hideRemoteScreen",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    void CarPlayDomainSvcDBusProxy::setButtonEvent(const bool &_isBtnPressed, const CarPlayDomainSvc::enCarPlayHardButtonType &_btnType, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_isBtnPressed(_isBtnPressed, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<CarPlayDomainSvc::enCarPlayHardButtonType, CommonAPI::EmptyDeployment> deploy_btnType(_btnType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<CarPlayDomainSvc::enCarPlayHardButtonType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setButtonEvent",
        "bi",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_isBtnPressed, deploy_btnType,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> CarPlayDomainSvcDBusProxy::setButtonEventAsync(const bool &_isBtnPressed, const CarPlayDomainSvc::enCarPlayHardButtonType &_btnType, SetButtonEventAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_isBtnPressed(_isBtnPressed, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<CarPlayDomainSvc::enCarPlayHardButtonType, CommonAPI::EmptyDeployment> deploy_btnType(_btnType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<CarPlayDomainSvc::enCarPlayHardButtonType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setButtonEvent",
        "bi",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_isBtnPressed, deploy_btnType,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }


void CarPlayDomainSvcDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 3;
          ownVersionMinor = 0;
      }

      } // namespace connectivity
      } // namespace harman
      } // namespace com
      } // namespace v3
