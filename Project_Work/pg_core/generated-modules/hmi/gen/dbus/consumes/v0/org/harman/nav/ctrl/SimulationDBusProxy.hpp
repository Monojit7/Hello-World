/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V0_ORG_HARMAN_NAV_CTRL_Simulation_DBUS_PROXY_HPP_
#define V0_ORG_HARMAN_NAV_CTRL_Simulation_DBUS_PROXY_HPP_

#include <v0/org/harman/nav/ctrl/SimulationProxyBase.hpp>
#include "v0/org/harman/nav/ctrl/SimulationDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v0 {
namespace org {
namespace harman {
namespace nav {
namespace ctrl {

class SimulationDBusProxy
    : virtual public SimulationProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    SimulationDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~SimulationDBusProxy() { }


    virtual SimulationStatusChangedEvent& getSimulationStatusChangedEvent();
    virtual SimulationSpeedChangedEvent& getSimulationSpeedChangedEvent();

    /**
     * description: Activates or deactivates simulation mode
     */
    virtual void setSimulationMode(const bool &_activate, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setSimulationModeAsync(const bool &_activate, SetSimulationModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Retrieves the simulation status
     */
    virtual void getSimulationStatus(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::SimulationTypes::SimulationStatus &_simulationStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSimulationStatusAsync(GetSimulationStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Sets the speed factor for the simulation mode
     */
    virtual void setSimulationSpeed(const int8_t &_speedFactor, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setSimulationSpeedAsync(const int8_t &_speedFactor, SetSimulationSpeedAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Returns the speed factor for the simulation mode
     */
    virtual void getSimulationSpeed(CommonAPI::CallStatus &_internalCallStatus, int8_t &_speedFactor, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSimulationSpeedAsync(GetSimulationSpeedAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Resumes a follow active route simulation
     */
    virtual void resumeSimulation(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> resumeSimulationAsync(ResumeSimulationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Freezes the current location
     */
    virtual void pauseSimulation(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> pauseSimulationAsync(PauseSimulationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Sets the position to a specific location
     */
    virtual void setPosition(const ::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict &_position, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setPositionAsync(const ::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict &_position, SetPositionAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<SimulationStatusChangedEvent, CommonAPI::Deployable<::org::harman::nav::ctrl::SimulationTypes::SimulationStatus, CommonAPI::EmptyDeployment>> simulationStatusChanged_;
    CommonAPI::DBus::DBusEvent<SimulationSpeedChangedEvent, CommonAPI::Deployable<int8_t, CommonAPI::EmptyDeployment>> simulationSpeedChanged_;

};

} // namespace ctrl
} // namespace nav
} // namespace harman
} // namespace org
} // namespace v0

#endif // V0_ORG_HARMAN_NAV_CTRL_Simulation_DBUS_PROXY_HPP_

