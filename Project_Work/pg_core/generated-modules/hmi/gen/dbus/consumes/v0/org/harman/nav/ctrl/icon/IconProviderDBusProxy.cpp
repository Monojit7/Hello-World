/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * description: this interface offers methods to provide icons (POI, Road, Traffic, so on) to
 *   any client
 */
#include <v0/org/harman/nav/ctrl/icon/IconProviderDBusProxy.hpp>

namespace v0 {
namespace org {
namespace harman {
namespace nav {
namespace ctrl {
namespace icon {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createIconProviderDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<IconProviderDBusProxy>(_address, _connection);
}

INITIALIZER(registerIconProviderDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		IconProvider::getInterface(),
		&createIconProviderDBusProxy);
}

IconProviderDBusProxy::IconProviderDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
{
}


    
    /**
     * description: initialize an icon session. Prerequiste and mandatory to any other IconProvider
     *   call.
    	The client need to specify an iconFilePath, where all requested
     *   resources can be copied to.
     */
    void IconProviderDBusProxy::createSession(const std::string &_iconFilePath, CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::CommonTypes::Handle &_iconSessionHandle, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_iconFilePath(_iconFilePath, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_iconSessionHandle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "createSession",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_iconFilePath,
_internalCallStatus,
deploy_iconSessionHandle);
_iconSessionHandle = deploy_iconSessionHandle.getValue();
}
    std::future<CommonAPI::CallStatus> IconProviderDBusProxy::createSessionAsync(const std::string &_iconFilePath, CreateSessionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_iconFilePath(_iconFilePath, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_iconSessionHandle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "createSession",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_iconFilePath,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> _iconSessionHandle) {
        	if (_callback)
        		_callback(_internalCallStatus, _iconSessionHandle.getValue());
        },
        std::make_tuple(deploy_iconSessionHandle));
    }
    /**
     * description: deletes an icon session and all assiociated resources which were requested
     */
    void IconProviderDBusProxy::deleteSession(const ::org::harman::nav::ctrl::CommonTypes::Handle &_iconSessionHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_iconSessionHandle(_iconSessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "deleteSession",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_iconSessionHandle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> IconProviderDBusProxy::deleteSessionAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_iconSessionHandle, DeleteSessionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_iconSessionHandle(_iconSessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "deleteSession",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_iconSessionHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: generic icon request call to get a navigation based icon
     */
    void IconProviderDBusProxy::getIconResource(const ::org::harman::nav::ctrl::CommonTypes::Handle &_iconSessionHandle, const ::org::harman::nav::ctrl::icon::IconProviderTypes::IconResourceSetId &_iconResourceId, const ::org::harman::nav::ctrl::icon::IconProviderTypes::DesignParameters &_iconDesign, CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::icon::IconProviderTypes::IconResponseData &_icon, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_iconSessionHandle(_iconSessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::icon::IconProviderTypes::IconResourceSetId, CommonAPI::EmptyDeployment> deploy_iconResourceId(_iconResourceId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::icon::IconProviderTypes::DesignParameters, ::org::harman::nav::ctrl::icon::IconProviderTypes_::DesignParametersDeployment_t> deploy_iconDesign(_iconDesign, static_cast<::org::harman::nav::ctrl::icon::IconProviderTypes_::DesignParametersDeployment_t*>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::icon::IconProviderTypes::IconResponseData, ::org::harman::nav::ctrl::icon::IconProviderTypes_::IconResponseDataDeployment_t> deploy_icon(static_cast<::org::harman::nav::ctrl::icon::IconProviderTypes_::IconResponseDataDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::org::harman::nav::ctrl::icon::IconProviderTypes::IconResourceSetId, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::org::harman::nav::ctrl::icon::IconProviderTypes::DesignParameters, ::org::harman::nav::ctrl::icon::IconProviderTypes_::DesignParametersDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::icon::IconProviderTypes::IconResponseData,::org::harman::nav::ctrl::icon::IconProviderTypes_::IconResponseDataDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getIconResource",
        "uu(iiib)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_iconSessionHandle, deploy_iconResourceId, deploy_iconDesign,
_internalCallStatus,
deploy_icon);
_icon = deploy_icon.getValue();
}
    std::future<CommonAPI::CallStatus> IconProviderDBusProxy::getIconResourceAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_iconSessionHandle, const ::org::harman::nav::ctrl::icon::IconProviderTypes::IconResourceSetId &_iconResourceId, const ::org::harman::nav::ctrl::icon::IconProviderTypes::DesignParameters &_iconDesign, GetIconResourceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment> deploy_iconSessionHandle(_iconSessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::icon::IconProviderTypes::IconResourceSetId, CommonAPI::EmptyDeployment> deploy_iconResourceId(_iconResourceId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::icon::IconProviderTypes::DesignParameters, ::org::harman::nav::ctrl::icon::IconProviderTypes_::DesignParametersDeployment_t> deploy_iconDesign(_iconDesign, static_cast<::org::harman::nav::ctrl::icon::IconProviderTypes_::DesignParametersDeployment_t*>(nullptr));
        CommonAPI::Deployable<::org::harman::nav::ctrl::icon::IconProviderTypes::IconResponseData, ::org::harman::nav::ctrl::icon::IconProviderTypes_::IconResponseDataDeployment_t> deploy_icon(static_cast<::org::harman::nav::ctrl::icon::IconProviderTypes_::IconResponseDataDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::org::harman::nav::ctrl::icon::IconProviderTypes::IconResourceSetId, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::org::harman::nav::ctrl::icon::IconProviderTypes::DesignParameters, ::org::harman::nav::ctrl::icon::IconProviderTypes_::DesignParametersDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::icon::IconProviderTypes::IconResponseData,::org::harman::nav::ctrl::icon::IconProviderTypes_::IconResponseDataDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getIconResource",
        "uu(iiib)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_iconSessionHandle, deploy_iconResourceId, deploy_iconDesign,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::org::harman::nav::ctrl::icon::IconProviderTypes::IconResponseData, ::org::harman::nav::ctrl::icon::IconProviderTypes_::IconResponseDataDeployment_t> _icon) {
        	if (_callback)
        		_callback(_internalCallStatus, _icon.getValue());
        },
        std::make_tuple(deploy_icon));
    }


void IconProviderDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 2;
      }

      } // namespace icon
      } // namespace ctrl
      } // namespace nav
      } // namespace harman
      } // namespace org
      } // namespace v0
