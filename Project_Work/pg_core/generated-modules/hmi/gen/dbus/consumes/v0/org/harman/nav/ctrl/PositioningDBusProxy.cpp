/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#include <v0/org/harman/nav/ctrl/PositioningDBusProxy.hpp>

namespace v0 {
namespace org {
namespace harman {
namespace nav {
namespace ctrl {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createPositioningDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<PositioningDBusProxy>(_address, _connection);
}

INITIALIZER(registerPositioningDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		Positioning::getInterface(),
		&createPositioningDBusProxy);
}

PositioningDBusProxy::PositioningDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		gpsRTC_(*this, "onGpsRTCAttributeChanged", "(ti)", "getGpsRTCAttribute", static_cast<::v1::org::harman::nav::ctrl::PositioningTypes_::GpsTimeDeployment_t*>(nullptr))
,		positionUpdate_(*this, "positionUpdate", "a{i(yv)}", std::make_tuple(static_cast<::v1::org::harman::nav::ctrl::PositioningTypes_::PositionItemDictDeployment_t*>(nullptr))),
		addressUpdate_(*this, "addressUpdate", "a{i(yv)}", std::make_tuple(static_cast<::v1::org::harman::nav::ctrl::PositioningTypes_::AddressItemDictDeployment_t*>(nullptr))),
		statusUpdate_(*this, "statusUpdate", "a{i(yv)}", std::make_tuple(static_cast<::v1::org::harman::nav::ctrl::PositioningTypes_::PositionStatusDictDeployment_t*>(nullptr))),
		offRoadPositionChanged_(*this, "offRoadPositionChanged", "ui", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		currentRoadAttributesChanged_(*this, "currentRoadAttributesChanged", "a{i(yv)}", std::make_tuple(static_cast<::v1::org::harman::nav::ctrl::PositioningTypes_::RoadAttributeDictDeployment_t*>(nullptr)))
{
}

      PositioningDBusProxy::GpsRTCAttribute& PositioningDBusProxy::getGpsRTCAttribute() {
          return gpsRTC_;
      }

PositioningDBusProxy::PositionUpdateEvent& PositioningDBusProxy::getPositionUpdateEvent() {
    return positionUpdate_;
}
PositioningDBusProxy::AddressUpdateEvent& PositioningDBusProxy::getAddressUpdateEvent() {
    return addressUpdate_;
}
PositioningDBusProxy::StatusUpdateEvent& PositioningDBusProxy::getStatusUpdateEvent() {
    return statusUpdate_;
}
PositioningDBusProxy::OffRoadPositionChangedEvent& PositioningDBusProxy::getOffRoadPositionChangedEvent() {
    return offRoadPositionChanged_;
}
PositioningDBusProxy::CurrentRoadAttributesChangedEvent& PositioningDBusProxy::getCurrentRoadAttributesChangedEvent() {
    return currentRoadAttributesChanged_;
}
    
    /**
     * description: getPosition = This method returns the current position
     */
    void PositioningDBusProxy::getPosition(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemKey> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict &_position, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemKey>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_valuesToReturn(_valuesToReturn, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict, ::v1::org::harman::nav::ctrl::PositioningTypes_::PositionItemDictDeployment_t> deploy_position(static_cast<::v1::org::harman::nav::ctrl::PositioningTypes_::PositionItemDictDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemKey>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict,::v1::org::harman::nav::ctrl::PositioningTypes_::PositionItemDictDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getPosition",
        "ai",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_valuesToReturn,
_internalCallStatus,
deploy_position);
_position = deploy_position.getValue();
}
    std::future<CommonAPI::CallStatus> PositioningDBusProxy::getPositionAsync(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemKey> &_valuesToReturn, GetPositionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemKey>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_valuesToReturn(_valuesToReturn, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict, ::v1::org::harman::nav::ctrl::PositioningTypes_::PositionItemDictDeployment_t> deploy_position(static_cast<::v1::org::harman::nav::ctrl::PositioningTypes_::PositionItemDictDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemKey>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict,::v1::org::harman::nav::ctrl::PositioningTypes_::PositionItemDictDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getPosition",
        "ai",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_valuesToReturn,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict, ::v1::org::harman::nav::ctrl::PositioningTypes_::PositionItemDictDeployment_t> _position) {
        	if (_callback)
        		_callback(_internalCallStatus, _position.getValue());
        },
        std::make_tuple(deploy_position));
    }
    /**
     * description: getAddress = This method returns the current address
     */
    void PositioningDBusProxy::getAddress(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemKey> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemDict &_address, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemKey>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_valuesToReturn(_valuesToReturn, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemDict, ::v1::org::harman::nav::ctrl::PositioningTypes_::AddressItemDictDeployment_t> deploy_address(static_cast<::v1::org::harman::nav::ctrl::PositioningTypes_::AddressItemDictDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemKey>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemDict,::v1::org::harman::nav::ctrl::PositioningTypes_::AddressItemDictDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getAddress",
        "ai",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_valuesToReturn,
_internalCallStatus,
deploy_address);
_address = deploy_address.getValue();
}
    std::future<CommonAPI::CallStatus> PositioningDBusProxy::getAddressAsync(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemKey> &_valuesToReturn, GetAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemKey>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_valuesToReturn(_valuesToReturn, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemDict, ::v1::org::harman::nav::ctrl::PositioningTypes_::AddressItemDictDeployment_t> deploy_address(static_cast<::v1::org::harman::nav::ctrl::PositioningTypes_::AddressItemDictDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemKey>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemDict,::v1::org::harman::nav::ctrl::PositioningTypes_::AddressItemDictDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getAddress",
        "ai",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_valuesToReturn,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemDict, ::v1::org::harman::nav::ctrl::PositioningTypes_::AddressItemDictDeployment_t> _address) {
        	if (_callback)
        		_callback(_internalCallStatus, _address.getValue());
        },
        std::make_tuple(deploy_address));
    }
    /**
     * description: getStatus = This method returns the current status
     */
    void PositioningDBusProxy::getStatus(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatus> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatusDict &_posstatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatus>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_valuesToReturn(_valuesToReturn, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatusDict, ::v1::org::harman::nav::ctrl::PositioningTypes_::PositionStatusDictDeployment_t> deploy_posstatus(static_cast<::v1::org::harman::nav::ctrl::PositioningTypes_::PositionStatusDictDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatus>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatusDict,::v1::org::harman::nav::ctrl::PositioningTypes_::PositionStatusDictDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getStatus",
        "ai",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_valuesToReturn,
_internalCallStatus,
deploy_posstatus);
_posstatus = deploy_posstatus.getValue();
}
    std::future<CommonAPI::CallStatus> PositioningDBusProxy::getStatusAsync(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatus> &_valuesToReturn, GetStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatus>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_valuesToReturn(_valuesToReturn, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatusDict, ::v1::org::harman::nav::ctrl::PositioningTypes_::PositionStatusDictDeployment_t> deploy_posstatus(static_cast<::v1::org::harman::nav::ctrl::PositioningTypes_::PositionStatusDictDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatus>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatusDict,::v1::org::harman::nav::ctrl::PositioningTypes_::PositionStatusDictDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getStatus",
        "ai",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_valuesToReturn,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatusDict, ::v1::org::harman::nav::ctrl::PositioningTypes_::PositionStatusDictDeployment_t> _posstatus) {
        	if (_callback)
        		_callback(_internalCallStatus, _posstatus.getValue());
        },
        std::make_tuple(deploy_posstatus));
    }
    /**
     * description: getCurrentRoadAttributes = This method returns the current road attributes.
     */
    void PositioningDBusProxy::getCurrentRoadAttributes(const ::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeKeys &_keys, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeDict &_dict, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeKeys, ::v1::org::harman::nav::ctrl::PositioningTypes_::RoadAttributeKeysDeployment_t> deploy_keys(_keys, static_cast<::v1::org::harman::nav::ctrl::PositioningTypes_::RoadAttributeKeysDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeDict, ::v1::org::harman::nav::ctrl::PositioningTypes_::RoadAttributeDictDeployment_t> deploy_dict(static_cast<::v1::org::harman::nav::ctrl::PositioningTypes_::RoadAttributeDictDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeKeys, ::v1::org::harman::nav::ctrl::PositioningTypes_::RoadAttributeKeysDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeDict,::v1::org::harman::nav::ctrl::PositioningTypes_::RoadAttributeDictDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getCurrentRoadAttributes",
        "ai",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_keys,
_internalCallStatus,
deploy_dict);
_dict = deploy_dict.getValue();
}
    std::future<CommonAPI::CallStatus> PositioningDBusProxy::getCurrentRoadAttributesAsync(const ::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeKeys &_keys, GetCurrentRoadAttributesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeKeys, ::v1::org::harman::nav::ctrl::PositioningTypes_::RoadAttributeKeysDeployment_t> deploy_keys(_keys, static_cast<::v1::org::harman::nav::ctrl::PositioningTypes_::RoadAttributeKeysDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeDict, ::v1::org::harman::nav::ctrl::PositioningTypes_::RoadAttributeDictDeployment_t> deploy_dict(static_cast<::v1::org::harman::nav::ctrl::PositioningTypes_::RoadAttributeDictDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeKeys, ::v1::org::harman::nav::ctrl::PositioningTypes_::RoadAttributeKeysDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeDict,::v1::org::harman::nav::ctrl::PositioningTypes_::RoadAttributeDictDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getCurrentRoadAttributes",
        "ai",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_keys,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeDict, ::v1::org::harman::nav::ctrl::PositioningTypes_::RoadAttributeDictDeployment_t> _dict) {
        	if (_callback)
        		_callback(_internalCallStatus, _dict.getValue());
        },
        std::make_tuple(deploy_dict));
    }


void PositioningDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 2;
      }

      } // namespace ctrl
      } // namespace nav
      } // namespace harman
      } // namespace org
      } // namespace v0
