/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V0_ORG_HARMAN_NAV_CTRL_Positioning_DBUS_PROXY_HPP_
#define V0_ORG_HARMAN_NAV_CTRL_Positioning_DBUS_PROXY_HPP_

#include <v0/org/harman/nav/ctrl/PositioningProxyBase.hpp>
#include "v0/org/harman/nav/ctrl/PositioningDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v0 {
namespace org {
namespace harman {
namespace nav {
namespace ctrl {

class PositioningDBusProxy
    : virtual public PositioningProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    PositioningDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~PositioningDBusProxy() { }

    virtual GpsRTCAttribute& getGpsRTCAttribute();

    virtual PositionUpdateEvent& getPositionUpdateEvent();
    virtual AddressUpdateEvent& getAddressUpdateEvent();
    virtual StatusUpdateEvent& getStatusUpdateEvent();
    virtual OffRoadPositionChangedEvent& getOffRoadPositionChangedEvent();
    virtual CurrentRoadAttributesChangedEvent& getCurrentRoadAttributesChangedEvent();

    /**
     * description: getPosition = This method returns the current position
     */
    virtual void getPosition(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemKey> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict &_position, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getPositionAsync(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemKey> &_valuesToReturn, GetPositionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getAddress = This method returns the current address
     */
    virtual void getAddress(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemKey> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemDict &_address, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getAddressAsync(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemKey> &_valuesToReturn, GetAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getStatus = This method returns the current status
     */
    virtual void getStatus(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatus> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatusDict &_posstatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getStatusAsync(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatus> &_valuesToReturn, GetStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getCurrentRoadAttributes = This method returns the current road attributes.
     */
    virtual void getCurrentRoadAttributes(const ::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeKeys &_keys, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeDict &_dict, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCurrentRoadAttributesAsync(const ::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeKeys &_keys, GetCurrentRoadAttributesAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<GpsRTCAttribute, ::v1::org::harman::nav::ctrl::PositioningTypes_::GpsTimeDeployment_t>> gpsRTC_;

    CommonAPI::DBus::DBusEvent<PositionUpdateEvent, CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict, ::v1::org::harman::nav::ctrl::PositioningTypes_::PositionItemDictDeployment_t>> positionUpdate_;
    CommonAPI::DBus::DBusEvent<AddressUpdateEvent, CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemDict, ::v1::org::harman::nav::ctrl::PositioningTypes_::AddressItemDictDeployment_t>> addressUpdate_;
    CommonAPI::DBus::DBusEvent<StatusUpdateEvent, CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatusDict, ::v1::org::harman::nav::ctrl::PositioningTypes_::PositionStatusDictDeployment_t>> statusUpdate_;
    CommonAPI::DBus::DBusEvent<OffRoadPositionChangedEvent, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>> offRoadPositionChanged_;
    CommonAPI::DBus::DBusEvent<CurrentRoadAttributesChangedEvent, CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeDict, ::v1::org::harman::nav::ctrl::PositioningTypes_::RoadAttributeDictDeployment_t>> currentRoadAttributesChanged_;

};

} // namespace ctrl
} // namespace nav
} // namespace harman
} // namespace org
} // namespace v0

#endif // V0_ORG_HARMAN_NAV_CTRL_Positioning_DBUS_PROXY_HPP_

