/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#include <v0/org/harman/nav/ctrl/SimulationDBusProxy.hpp>

namespace v0 {
namespace org {
namespace harman {
namespace nav {
namespace ctrl {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createSimulationDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<SimulationDBusProxy>(_address, _connection);
}

INITIALIZER(registerSimulationDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		Simulation::getInterface(),
		&createSimulationDBusProxy);
}

SimulationDBusProxy::SimulationDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		simulationStatusChanged_(*this, "simulationStatusChanged", "i", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		simulationSpeedChanged_(*this, "simulationSpeedChanged", "y", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
{
}


SimulationDBusProxy::SimulationStatusChangedEvent& SimulationDBusProxy::getSimulationStatusChangedEvent() {
    return simulationStatusChanged_;
}
SimulationDBusProxy::SimulationSpeedChangedEvent& SimulationDBusProxy::getSimulationSpeedChangedEvent() {
    return simulationSpeedChanged_;
}
    
    /**
     * description: Activates or deactivates simulation mode
     */
    void SimulationDBusProxy::setSimulationMode(const bool &_activate, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_activate(_activate, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setSimulationMode",
        "b",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_activate,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> SimulationDBusProxy::setSimulationModeAsync(const bool &_activate, SetSimulationModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_activate(_activate, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setSimulationMode",
        "b",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_activate,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Retrieves the simulation status
     */
    void SimulationDBusProxy::getSimulationStatus(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::SimulationTypes::SimulationStatus &_simulationStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::SimulationTypes::SimulationStatus, CommonAPI::EmptyDeployment> deploy_simulationStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::SimulationTypes::SimulationStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getSimulationStatus",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_simulationStatus);
_simulationStatus = deploy_simulationStatus.getValue();
}
    std::future<CommonAPI::CallStatus> SimulationDBusProxy::getSimulationStatusAsync(GetSimulationStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::org::harman::nav::ctrl::SimulationTypes::SimulationStatus, CommonAPI::EmptyDeployment> deploy_simulationStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::org::harman::nav::ctrl::SimulationTypes::SimulationStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getSimulationStatus",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::org::harman::nav::ctrl::SimulationTypes::SimulationStatus, CommonAPI::EmptyDeployment> _simulationStatus) {
        	if (_callback)
        		_callback(_internalCallStatus, _simulationStatus.getValue());
        },
        std::make_tuple(deploy_simulationStatus));
    }
    /**
     * description: Sets the speed factor for the simulation mode
     */
    void SimulationDBusProxy::setSimulationSpeed(const int8_t &_speedFactor, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int8_t, CommonAPI::EmptyDeployment> deploy_speedFactor(_speedFactor, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int8_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setSimulationSpeed",
        "y",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_speedFactor,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> SimulationDBusProxy::setSimulationSpeedAsync(const int8_t &_speedFactor, SetSimulationSpeedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int8_t, CommonAPI::EmptyDeployment> deploy_speedFactor(_speedFactor, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int8_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setSimulationSpeed",
        "y",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_speedFactor,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Returns the speed factor for the simulation mode
     */
    void SimulationDBusProxy::getSimulationSpeed(CommonAPI::CallStatus &_internalCallStatus, int8_t &_speedFactor, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int8_t, CommonAPI::EmptyDeployment> deploy_speedFactor(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int8_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getSimulationSpeed",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_speedFactor);
_speedFactor = deploy_speedFactor.getValue();
}
    std::future<CommonAPI::CallStatus> SimulationDBusProxy::getSimulationSpeedAsync(GetSimulationSpeedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int8_t, CommonAPI::EmptyDeployment> deploy_speedFactor(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int8_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getSimulationSpeed",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int8_t, CommonAPI::EmptyDeployment> _speedFactor) {
        	if (_callback)
        		_callback(_internalCallStatus, _speedFactor.getValue());
        },
        std::make_tuple(deploy_speedFactor));
    }
    /**
     * description: Resumes a follow active route simulation
     */
    void SimulationDBusProxy::resumeSimulation(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "resumeSimulation",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> SimulationDBusProxy::resumeSimulationAsync(ResumeSimulationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "resumeSimulation",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Freezes the current location
     */
    void SimulationDBusProxy::pauseSimulation(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "pauseSimulation",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> SimulationDBusProxy::pauseSimulationAsync(PauseSimulationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "pauseSimulation",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Sets the position to a specific location
     */
    void SimulationDBusProxy::setPosition(const ::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict &_position, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict, ::v1::org::harman::nav::ctrl::PositioningTypes_::PositionItemDictDeployment_t> deploy_position(_position, static_cast<::v1::org::harman::nav::ctrl::PositioningTypes_::PositionItemDictDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict, ::v1::org::harman::nav::ctrl::PositioningTypes_::PositionItemDictDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setPosition",
        "a{i(yv)}",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_position,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> SimulationDBusProxy::setPositionAsync(const ::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict &_position, SetPositionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict, ::v1::org::harman::nav::ctrl::PositioningTypes_::PositionItemDictDeployment_t> deploy_position(_position, static_cast<::v1::org::harman::nav::ctrl::PositioningTypes_::PositionItemDictDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict, ::v1::org::harman::nav::ctrl::PositioningTypes_::PositionItemDictDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setPosition",
        "a{i(yv)}",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_position,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }


void SimulationDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 1;
      }

      } // namespace ctrl
      } // namespace nav
      } // namespace harman
      } // namespace org
      } // namespace v0
