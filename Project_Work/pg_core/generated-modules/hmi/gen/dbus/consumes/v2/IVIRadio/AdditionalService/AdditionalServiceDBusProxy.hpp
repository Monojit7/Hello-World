/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * description: Tuner generic and project independent interface for additional services. This
 *   interface provides functions to request data services and to configure them.
 *   Other services like announcements can also be configured.
 * author: EGMG_Tuner
 */
#ifndef V2_IVIRADIO_ADDITIONALSERVICE_Additional_Service_DBUS_PROXY_HPP_
#define V2_IVIRADIO_ADDITIONALSERVICE_Additional_Service_DBUS_PROXY_HPP_

#include <v2/IVIRadio/AdditionalService/AdditionalServiceProxyBase.hpp>
#include "v2/IVIRadio/AdditionalService/AdditionalServiceDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v2 {
namespace IVIRadio {
namespace AdditionalService {

class AdditionalServiceDBusProxy
    : virtual public AdditionalServiceProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    AdditionalServiceDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~AdditionalServiceDBusProxy() { }


    virtual DataEvent& getDataEvent();
    virtual AnnouncementEvent& getAnnouncementEvent();
    virtual AnnouncementFinishedEvent& getAnnouncementFinishedEvent();
    virtual SubscribedServiceOptionsEvent& getSubscribedServiceOptionsEvent();

    /**
     * description: Function to request data from one or many stations for a specific data service.
     *   It is possible to configure the request by the DataServiceOption parameter.
     */
    virtual void requestDataService(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataService, const ::v2::IVIRadio::Types::Types::StationSelectors &_selectors, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::UnifiedServiceOption &_unifiedOptions, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::DataServiceOption &_serviceOptions, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> requestDataServiceAsync(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataService, const ::v2::IVIRadio::Types::Types::StationSelectors &_selectors, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::UnifiedServiceOption &_unifiedOptions, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::DataServiceOption &_serviceOptions, const uint32_t &_handle, RequestDataServiceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void requestSubscribedServiceOptions(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataservice, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> requestSubscribedServiceOptionsAsync(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataservice, const uint32_t &_handle, RequestSubscribedServiceOptionsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: abort a currently active transmission of data
     */
    virtual void abort(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataService, const ::v2::IVIRadio::Types::Types::StationSelectors &_stationSelectors, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::UnifiedServiceOption &_unifiedOptions, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::DataServiceOption &_dataServiceOption, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> abortAsync(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataService, const ::v2::IVIRadio::Types::Types::StationSelectors &_stationSelectors, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::UnifiedServiceOption &_unifiedOptions, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::DataServiceOption &_dataServiceOption, const uint32_t &_handle, AbortAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<DataEvent, CommonAPI::Deployable<::v2::IVIRadio::Types::Types::StationSelectors, ::v2::IVIRadio::Types::Types_::StationSelectorsDeployment_t>, CommonAPI::Deployable<::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::UnifiedServiceOption, ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions_::UnifiedServiceOptionDeployment_t>, CommonAPI::Deployable<::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::DataServiceOption, ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions_::DataServiceOptionDeployment_t>, CommonAPI::Deployable<::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataFormat, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataType, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::Data, ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes_::DataDeployment_t>, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v2::IVIRadio::Types::Types::ErrorCodes, CommonAPI::EmptyDeployment>> data_;
    CommonAPI::DBus::DBusEvent<AnnouncementEvent, CommonAPI::Deployable<::v2::IVIRadio::Types::Types::StationSelectors, ::v2::IVIRadio::Types::Types_::StationSelectorsDeployment_t>, CommonAPI::Deployable<::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::AnnouncementConfigurations, ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes_::AnnouncementConfigurationsDeployment_t>, CommonAPI::Deployable<::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::arrayAnnouncementStates, ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes_::arrayAnnouncementStatesDeployment_t>, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v2::IVIRadio::Types::Types::ErrorCodes, CommonAPI::EmptyDeployment>> announcement_;
    CommonAPI::DBus::DBusEvent<AnnouncementFinishedEvent, CommonAPI::Deployable<::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::Announcement, ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes_::AnnouncementDeployment_t>, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v2::IVIRadio::Types::Types::ErrorCodes, CommonAPI::EmptyDeployment>> announcementFinished_;
    CommonAPI::DBus::DBusEvent<SubscribedServiceOptionsEvent, CommonAPI::Deployable<::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v2::IVIRadio::Types::Types::arrayStationSelectors, ::v2::IVIRadio::Types::Types_::arrayStationSelectorsDeployment_t>, CommonAPI::Deployable<::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::UnifiedServiceOptions, ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions_::UnifiedServiceOptionsDeployment_t>, CommonAPI::Deployable<::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::DataServiceOptions, ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions_::DataServiceOptionsDeployment_t>, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v2::IVIRadio::Types::Types::ErrorCodes, CommonAPI::EmptyDeployment>> subscribedServiceOptions_;

};

} // namespace AdditionalService
} // namespace IVIRadio
} // namespace v2

#endif // V2_IVIRADIO_ADDITIONALSERVICE_Additional_Service_DBUS_PROXY_HPP_

