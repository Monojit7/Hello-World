/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * author: EGMG_Tuner
 */
#include <v2/IVIRadio/Station/StationDBusProxy.hpp>

namespace v2 {
namespace IVIRadio {
namespace Station {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createStationDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<StationDBusProxy>(_address, _connection);
}

INITIALIZER(registerStationDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		Station::getInterface(),
		&createStationDBusProxy);
}

StationDBusProxy::StationDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		currentStation_(*this, "currentStation", "(uaua(sy)asau(uau)u)ui", std::make_tuple(static_cast<::v2::IVIRadio::Station::StationTypes_::StationDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		seek_(*this, "seek", "(uii)ui", std::make_tuple(static_cast<::v2::IVIRadio::Station::StationTypes_::SeekDataDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		stationList_(*this, "stationList", "(ua(uaua(sy)asau(uau)u)u)ui", std::make_tuple(static_cast<::v2::IVIRadio::Station::StationTypes_::StationListDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
{
}


StationDBusProxy::CurrentStationEvent& StationDBusProxy::getCurrentStationEvent() {
    return currentStation_;
}
StationDBusProxy::SeekEvent& StationDBusProxy::getSeekEvent() {
    return seek_;
}
StationDBusProxy::StationListEvent& StationDBusProxy::getStationListEvent() {
    return stationList_;
}
    
    /**
     * description: deallocate a tuner resource
     */
    void StationDBusProxy::abortTune(const ::v2::IVIRadio::Types::Types::DeviceType &_deviceType, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v2::IVIRadio::Types::Types::DeviceType, CommonAPI::EmptyDeployment> deploy_deviceType(_deviceType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handleOut(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback, CommonAPI::EmptyDeployment> deploy_feedback(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::IVIRadio::Types::Types::DeviceType, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "abortTune",
        "iu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_deviceType, deploy_handle,
_internalCallStatus,
deploy_handleOut, deploy_feedback);
_handleOut = deploy_handleOut.getValue();
_feedback = deploy_feedback.getValue();
}
    std::future<CommonAPI::CallStatus> StationDBusProxy::abortTuneAsync(const ::v2::IVIRadio::Types::Types::DeviceType &_deviceType, const uint32_t &_handle, AbortTuneAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v2::IVIRadio::Types::Types::DeviceType, CommonAPI::EmptyDeployment> deploy_deviceType(_deviceType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handleOut(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback, CommonAPI::EmptyDeployment> deploy_feedback(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::IVIRadio::Types::Types::DeviceType, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "abortTune",
        "iu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_deviceType, deploy_handle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> _handleOut, CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback, CommonAPI::EmptyDeployment> _feedback) {
        	if (_callback)
        		_callback(_internalCallStatus, _handleOut.getValue(), _feedback.getValue());
        },
        std::make_tuple(deploy_handleOut, deploy_feedback));
    }
    /**
     * description: make station permanent (tuning information will not be removed from middleware
     *   even if station is not receivable any more)
     */
    void StationDBusProxy::makePermanent(const ::v2::IVIRadio::Types::Types::StationSelector &_station, const bool &_permanent, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v2::IVIRadio::Types::Types::StationSelector, ::v2::IVIRadio::Types::Types_::StationSelectorDeployment_t> deploy_station(_station, static_cast<::v2::IVIRadio::Types::Types_::StationSelectorDeployment_t*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_permanent(_permanent, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handleOut(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback, CommonAPI::EmptyDeployment> deploy_feedback(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::IVIRadio::Types::Types::StationSelector, ::v2::IVIRadio::Types::Types_::StationSelectorDeployment_t >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "makePermanent",
        "(uau)bu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_station, deploy_permanent, deploy_handle,
_internalCallStatus,
deploy_handleOut, deploy_feedback);
_handleOut = deploy_handleOut.getValue();
_feedback = deploy_feedback.getValue();
}
    std::future<CommonAPI::CallStatus> StationDBusProxy::makePermanentAsync(const ::v2::IVIRadio::Types::Types::StationSelector &_station, const bool &_permanent, const uint32_t &_handle, MakePermanentAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v2::IVIRadio::Types::Types::StationSelector, ::v2::IVIRadio::Types::Types_::StationSelectorDeployment_t> deploy_station(_station, static_cast<::v2::IVIRadio::Types::Types_::StationSelectorDeployment_t*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_permanent(_permanent, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handleOut(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback, CommonAPI::EmptyDeployment> deploy_feedback(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::IVIRadio::Types::Types::StationSelector, ::v2::IVIRadio::Types::Types_::StationSelectorDeployment_t >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "makePermanent",
        "(uau)bu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_station, deploy_permanent, deploy_handle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> _handleOut, CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback, CommonAPI::EmptyDeployment> _feedback) {
        	if (_callback)
        		_callback(_internalCallStatus, _handleOut.getValue(), _feedback.getValue());
        },
        std::make_tuple(deploy_handleOut, deploy_feedback));
    }
    /**
     * description: request explicit update of currentStation or stationList information. E.g.
     *   necessary after startup.
     */
    void StationDBusProxy::controlUpdate(const ::v2::IVIRadio::Station::StationTypes::UpdateElement &_updateElement, const ::v2::IVIRadio::Types::Types::UpdateType &_updateType, const uint32_t &_sourceType, const uint32_t &_stationType, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v2::IVIRadio::Station::StationTypes::UpdateElement, CommonAPI::EmptyDeployment> deploy_updateElement(_updateElement, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::IVIRadio::Types::Types::UpdateType, CommonAPI::EmptyDeployment> deploy_updateType(_updateType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_sourceType(_sourceType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_stationType(_stationType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handleOut(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback, CommonAPI::EmptyDeployment> deploy_feedback(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::IVIRadio::Station::StationTypes::UpdateElement, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v2::IVIRadio::Types::Types::UpdateType, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "controlUpdate",
        "iiuuu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_updateElement, deploy_updateType, deploy_sourceType, deploy_stationType, deploy_handle,
_internalCallStatus,
deploy_handleOut, deploy_feedback);
_handleOut = deploy_handleOut.getValue();
_feedback = deploy_feedback.getValue();
}
    std::future<CommonAPI::CallStatus> StationDBusProxy::controlUpdateAsync(const ::v2::IVIRadio::Station::StationTypes::UpdateElement &_updateElement, const ::v2::IVIRadio::Types::Types::UpdateType &_updateType, const uint32_t &_sourceType, const uint32_t &_stationType, const uint32_t &_handle, ControlUpdateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v2::IVIRadio::Station::StationTypes::UpdateElement, CommonAPI::EmptyDeployment> deploy_updateElement(_updateElement, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::IVIRadio::Types::Types::UpdateType, CommonAPI::EmptyDeployment> deploy_updateType(_updateType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_sourceType(_sourceType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_stationType(_stationType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handleOut(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback, CommonAPI::EmptyDeployment> deploy_feedback(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::IVIRadio::Station::StationTypes::UpdateElement, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v2::IVIRadio::Types::Types::UpdateType, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "controlUpdate",
        "iiuuu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_updateElement, deploy_updateType, deploy_sourceType, deploy_stationType, deploy_handle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> _handleOut, CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback, CommonAPI::EmptyDeployment> _feedback) {
        	if (_callback)
        		_callback(_internalCallStatus, _handleOut.getValue(), _feedback.getValue());
        },
        std::make_tuple(deploy_handleOut, deploy_feedback));
    }
    /**
     * description: starts/stops a seek process
     */
    void StationDBusProxy::seek(const ::v2::IVIRadio::Types::Types::DeviceType &_device, const ::v2::IVIRadio::Station::StationTypes::SeekMode &_seekMode, const uint8_t &_genre, const uint32_t &_flags, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v2::IVIRadio::Types::Types::DeviceType, CommonAPI::EmptyDeployment> deploy_device(_device, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::IVIRadio::Station::StationTypes::SeekMode, CommonAPI::EmptyDeployment> deploy_seekMode(_seekMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_genre(_genre, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_flags(_flags, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handleOut(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback, CommonAPI::EmptyDeployment> deploy_feedback(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::IVIRadio::Types::Types::DeviceType, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v2::IVIRadio::Station::StationTypes::SeekMode, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "seek",
        "iiyuu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_device, deploy_seekMode, deploy_genre, deploy_flags, deploy_handle,
_internalCallStatus,
deploy_handleOut, deploy_feedback);
_handleOut = deploy_handleOut.getValue();
_feedback = deploy_feedback.getValue();
}
    std::future<CommonAPI::CallStatus> StationDBusProxy::seekAsync(const ::v2::IVIRadio::Types::Types::DeviceType &_device, const ::v2::IVIRadio::Station::StationTypes::SeekMode &_seekMode, const uint8_t &_genre, const uint32_t &_flags, const uint32_t &_handle, SeekAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v2::IVIRadio::Types::Types::DeviceType, CommonAPI::EmptyDeployment> deploy_device(_device, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::IVIRadio::Station::StationTypes::SeekMode, CommonAPI::EmptyDeployment> deploy_seekMode(_seekMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_genre(_genre, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_flags(_flags, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handleOut(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback, CommonAPI::EmptyDeployment> deploy_feedback(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::IVIRadio::Types::Types::DeviceType, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v2::IVIRadio::Station::StationTypes::SeekMode, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "seek",
        "iiyuu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_device, deploy_seekMode, deploy_genre, deploy_flags, deploy_handle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> _handleOut, CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback, CommonAPI::EmptyDeployment> _feedback) {
        	if (_callback)
        		_callback(_internalCallStatus, _handleOut.getValue(), _feedback.getValue());
        },
        std::make_tuple(deploy_handleOut, deploy_feedback));
    }
    /**
     * description: start tuning a frequency or selecting a station
     */
    void StationDBusProxy::startTune(const ::v2::IVIRadio::Types::Types::StationSelector &_station, const ::v2::IVIRadio::Station::StationTypes::SelectionMode &_selectionMode, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v2::IVIRadio::Types::Types::StationSelector, ::v2::IVIRadio::Types::Types_::StationSelectorDeployment_t> deploy_station(_station, static_cast<::v2::IVIRadio::Types::Types_::StationSelectorDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v2::IVIRadio::Station::StationTypes::SelectionMode, CommonAPI::EmptyDeployment> deploy_selectionMode(_selectionMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handleOut(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback, CommonAPI::EmptyDeployment> deploy_feedback(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::IVIRadio::Types::Types::StationSelector, ::v2::IVIRadio::Types::Types_::StationSelectorDeployment_t >,
            CommonAPI::Deployable<::v2::IVIRadio::Station::StationTypes::SelectionMode, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "startTune",
        "(uau)iu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_station, deploy_selectionMode, deploy_handle,
_internalCallStatus,
deploy_handleOut, deploy_feedback);
_handleOut = deploy_handleOut.getValue();
_feedback = deploy_feedback.getValue();
}
    std::future<CommonAPI::CallStatus> StationDBusProxy::startTuneAsync(const ::v2::IVIRadio::Types::Types::StationSelector &_station, const ::v2::IVIRadio::Station::StationTypes::SelectionMode &_selectionMode, const uint32_t &_handle, StartTuneAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v2::IVIRadio::Types::Types::StationSelector, ::v2::IVIRadio::Types::Types_::StationSelectorDeployment_t> deploy_station(_station, static_cast<::v2::IVIRadio::Types::Types_::StationSelectorDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v2::IVIRadio::Station::StationTypes::SelectionMode, CommonAPI::EmptyDeployment> deploy_selectionMode(_selectionMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handleOut(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback, CommonAPI::EmptyDeployment> deploy_feedback(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::IVIRadio::Types::Types::StationSelector, ::v2::IVIRadio::Types::Types_::StationSelectorDeployment_t >,
            CommonAPI::Deployable<::v2::IVIRadio::Station::StationTypes::SelectionMode, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "startTune",
        "(uau)iu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_station, deploy_selectionMode, deploy_handle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> _handleOut, CommonAPI::Deployable<::v2::IVIRadio::Types::Types::Feedback, CommonAPI::EmptyDeployment> _feedback) {
        	if (_callback)
        		_callback(_internalCallStatus, _handleOut.getValue(), _feedback.getValue());
        },
        std::make_tuple(deploy_handleOut, deploy_feedback));
    }


void StationDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 2;
          ownVersionMinor = 1;
      }

      } // namespace Station
      } // namespace IVIRadio
      } // namespace v2
