/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * author: EGMG_Tuner
 */
#ifndef V2_IVIRADIO_CONFIGURATION_Configuration_DBUS_PROXY_HPP_
#define V2_IVIRADIO_CONFIGURATION_Configuration_DBUS_PROXY_HPP_

#include <v2/IVIRadio/Configuration/ConfigurationProxyBase.hpp>
#include "v2/IVIRadio/Configuration/ConfigurationDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v2 {
namespace IVIRadio {
namespace Configuration {

class ConfigurationDBusProxy
    : virtual public ConfigurationProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    ConfigurationDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~ConfigurationDBusProxy() { }


    virtual FunctionalityConfigurationEvent& getFunctionalityConfigurationEvent();

    /**
     * description: change configuration of a basic functionalites like following or smart favorite
     *   options. it is possible to set more then one configuration at a time by adding
     *   multiple functionality types and configuration to the arrays
     */
    virtual void changeFunctionalityConfiguration(const ::v2::IVIRadio::Configuration::ConfigurationTypesEnum::FunctionalityTypes &_functionalityTypes, const ::v2::IVIRadio::Configuration::ConfigurationOptions::FuntionalityOptions &_functionalityOptionsSet, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> changeFunctionalityConfigurationAsync(const ::v2::IVIRadio::Configuration::ConfigurationTypesEnum::FunctionalityTypes &_functionalityTypes, const ::v2::IVIRadio::Configuration::ConfigurationOptions::FuntionalityOptions &_functionalityOptionsSet, const uint32_t &_handle, ChangeFunctionalityConfigurationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: request configuration of basic functionalities like following or conditional
     *   access. it is possible to request more than one configuration at a time by
     *   adding multiple functionality types and get options to the arrays
     */
    virtual void requestFunctionalityConfiguration(const ::v2::IVIRadio::Configuration::ConfigurationTypesEnum::FunctionalityTypes &_functionalityTypes, const ::v2::IVIRadio::Configuration::ConfigurationOptionsGetter::FuntionalityOptionsGet &_functionalityOptionsGet, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handle_out, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> requestFunctionalityConfigurationAsync(const ::v2::IVIRadio::Configuration::ConfigurationTypesEnum::FunctionalityTypes &_functionalityTypes, const ::v2::IVIRadio::Configuration::ConfigurationOptionsGetter::FuntionalityOptionsGet &_functionalityOptionsGet, const uint32_t &_handle, RequestFunctionalityConfigurationAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<FunctionalityConfigurationEvent, CommonAPI::Deployable<::v2::IVIRadio::Configuration::ConfigurationTypesEnum::FunctionalityTypes, ::v2::IVIRadio::Configuration::ConfigurationTypesEnum_::FunctionalityTypesDeployment_t>, CommonAPI::Deployable<::v2::IVIRadio::Configuration::ConfigurationOptions::FuntionalityOptions, ::v2::IVIRadio::Configuration::ConfigurationOptions_::FuntionalityOptionsDeployment_t>, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v2::IVIRadio::Types::Types::ErrorCodes, CommonAPI::EmptyDeployment>> functionalityConfiguration_;

};

} // namespace Configuration
} // namespace IVIRadio
} // namespace v2

#endif // V2_IVIRADIO_CONFIGURATION_Configuration_DBUS_PROXY_HPP_

