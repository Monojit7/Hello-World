/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * description: LocationInput = This interface offers functions that implement the
 *   location-input functionality of a navigation system
 */
#ifndef V2_ORG_HARMAN_NAV_CTRL_DI_Location_Input_DBUS_PROXY_HPP_
#define V2_ORG_HARMAN_NAV_CTRL_DI_Location_Input_DBUS_PROXY_HPP_

#include <v2/org/harman/nav/ctrl/di/LocationInputProxyBase.hpp>
#include "v2/org/harman/nav/ctrl/di/LocationInputDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v2 {
namespace org {
namespace harman {
namespace nav {
namespace ctrl {
namespace di {

class LocationInputDBusProxy
    : virtual public LocationInputProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    LocationInputDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~LocationInputDBusProxy() { }


    virtual CurrentSelectionCriterionEvent& getCurrentSelectionCriterionEvent();
    virtual SearchStatusEvent& getSearchStatusEvent();
    virtual SpellResultEvent& getSpellResultEvent();
    virtual SearchResultListEvent& getSearchResultListEvent();
    virtual SearchResultListSizeChangedEvent& getSearchResultListSizeChangedEvent();
    virtual ContentUpdatedEvent& getContentUpdatedEvent();
    virtual AddressValidationResultEvent& getAddressValidationResultEvent();

    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     */
    virtual void getVersion(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: createLocationInput = This method creates a new location input and retrieves a
     *   handle
     */
    virtual void createLocationInput(CommonAPI::CallStatus &_internalCallStatus, LocationInput::createLocationInputError &_error, ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> createLocationInputAsync(CreateLocationInputAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: deleteLocationInput = This method deletes a location input and its associated
     *   resources
     */
    virtual void deleteLocationInput(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> deleteLocationInputAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, DeleteLocationInputAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getSupportedAddressAttributes = This method retrieves the supported address
     *   attributes
     */
    virtual void getSupportedAddressAttributes(CommonAPI::CallStatus &_internalCallStatus, ::v2::org::harman::nav::ctrl::di::LocationInputTypes::AddressAttributeList &_addressAttributesList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedAddressAttributesAsync(GetSupportedAddressAttributesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setAddress = This method sets the address to start with for the LocationInput
     *   identified by the given handle
     */
    virtual void setAddress(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const ::v2::org::harman::nav::ctrl::di::LocationInputTypes::Address &_address, CommonAPI::CallStatus &_internalCallStatus, LocationInput::setAddressError &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setAddressAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const ::v2::org::harman::nav::ctrl::di::LocationInputTypes::Address &_address, SetAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setSelectionCriterion = This method sets the selection criterion for the
     *   current speller, search input and the corresponding result-lists for the
     *   current session
     */
    virtual void setSelectionCriterion(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const ::v2::org::harman::nav::ctrl::di::LocationInputTypes::AddressAttribute &_selectionCriterion, CommonAPI::CallStatus &_internalCallStatus, LocationInput::setSelectionCriterionError &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setSelectionCriterionAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const ::v2::org::harman::nav::ctrl::di::LocationInputTypes::AddressAttribute &_selectionCriterion, SetSelectionCriterionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: spell = This method sends the next spell input for the current session
         
     *   TBD: expected broadcasts
     */
    virtual void spell(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const std::string &_inputCharacter, const uint16_t &_maxWindowSize, CommonAPI::CallStatus &_internalCallStatus, LocationInput::spellError &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> spellAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const std::string &_inputCharacter, const uint16_t &_maxWindowSize, SpellAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: search = This method sets the inputString for the current selection criterion
     
     *       TBD: expected broadcasts
     */
    virtual void search(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const std::string &_inputString, const uint16_t &_maxWindowSize, CommonAPI::CallStatus &_internalCallStatus, LocationInput::searchError &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> searchAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const std::string &_inputString, const uint16_t &_maxWindowSize, SearchAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: requestListUpdate = This method sends a request for more list elements for the
     *   current session
          If a session changes, e.g. new character is entered, a
     *   new list is generated. Offset is starting at 0 again.
     */
    virtual void requestListUpdate(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, CommonAPI::CallStatus &_internalCallStatus, LocationInput::requestListUpdateError &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> requestListUpdateAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, RequestListUpdateAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: selectEntry = This method triggers selection of a result list entry by index
     */
    virtual void selectEntry(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const uint16_t &_index, CommonAPI::CallStatus &_internalCallStatus, LocationInput::selectEntryError &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> selectEntryAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const uint16_t &_index, SelectEntryAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getEntry = This method synchronously gets the address for the given result list
     *   entry
     */
    virtual void getEntry(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const uint16_t &_index, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::harman::nav::ctrl::di::LocationInputTypes::Address &_address, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getEntryAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const uint16_t &_index, GetEntryAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: validateAddress = This method validates an address from different sources than
     *   Navigation
          TBD: functionality to be clarified
     */
    virtual void validateAddress(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const ::v2::org::harman::nav::ctrl::di::LocationInputTypes::Address &_inputAddress, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> validateAddressAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const ::v2::org::harman::nav::ctrl::di::LocationInputTypes::Address &_inputAddress, ValidateAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: reverseGeocode = This method transforms a geocoordinate into an address
     */
    virtual void reverseGeocode(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const ::org::harman::nav::ctrl::CommonTypes::Coordinate2D &_coordinate, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> reverseGeocodeAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const ::org::harman::nav::ctrl::CommonTypes::Coordinate2D &_coordinate, ReverseGeocodeAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<CurrentSelectionCriterionEvent, CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v2::org::harman::nav::ctrl::di::LocationInputTypes::AddressAttribute, CommonAPI::EmptyDeployment>> currentSelectionCriterion_;
    CommonAPI::DBus::DBusEvent<SearchStatusEvent, CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v2::org::harman::nav::ctrl::di::LocationInputTypes::SearchStatus, CommonAPI::EmptyDeployment>> searchStatus_;
    CommonAPI::DBus::DBusEvent<SpellResultEvent, CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> spellResult_;
    CommonAPI::DBus::DBusEvent<SearchResultListEvent, CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::vector<::v2::org::harman::nav::ctrl::di::LocationInputTypes::Address>, CommonAPI::DBus::ArrayDeployment<::v2::org::harman::nav::ctrl::di::LocationInputTypes_::AddressDeployment_t>>> searchResultList_;
    CommonAPI::DBus::DBusEvent<SearchResultListSizeChangedEvent, CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment>> searchResultListSizeChanged_;
    CommonAPI::DBus::DBusEvent<ContentUpdatedEvent, CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::vector<::v2::org::harman::nav::ctrl::di::LocationInputTypes::AddressAttribute>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>, CommonAPI::Deployable<::v2::org::harman::nav::ctrl::di::LocationInputTypes::Address, ::v2::org::harman::nav::ctrl::di::LocationInputTypes_::AddressDeployment_t>> contentUpdated_;
    CommonAPI::DBus::DBusEvent<AddressValidationResultEvent, CommonAPI::Deployable<::org::harman::nav::ctrl::CommonTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::vector<::v2::org::harman::nav::ctrl::di::LocationInputTypes::Address>, CommonAPI::DBus::ArrayDeployment<::v2::org::harman::nav::ctrl::di::LocationInputTypes_::AddressDeployment_t>>, CommonAPI::Deployable<std::vector<::v2::org::harman::nav::ctrl::di::LocationInputTypes::ValidationStatus>, CommonAPI::DBus::ArrayDeployment<::v2::org::harman::nav::ctrl::di::LocationInputTypes_::ValidationStatusDeployment_t>>> addressValidationResult_;

};

} // namespace di
} // namespace ctrl
} // namespace nav
} // namespace harman
} // namespace org
} // namespace v2

#endif // V2_ORG_HARMAN_NAV_CTRL_DI_Location_Input_DBUS_PROXY_HPP_

