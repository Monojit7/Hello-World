/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V4_COM_HARMAN_CONNECTIVITY_Mirror_Link_Domain_Svc_DBUS_PROXY_HPP_
#define V4_COM_HARMAN_CONNECTIVITY_Mirror_Link_Domain_Svc_DBUS_PROXY_HPP_

#include <v4/com/harman/connectivity/MirrorLinkDomainSvcProxyBase.hpp>
#include "v4/com/harman/connectivity/MirrorLinkDomainSvcDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v4 {
namespace com {
namespace harman {
namespace connectivity {

class MirrorLinkDomainSvcDBusProxy
    : virtual public MirrorLinkDomainSvcProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    MirrorLinkDomainSvcDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~MirrorLinkDomainSvcDBusProxy() { }


    virtual DeviceListChangedEvent& getDeviceListChangedEvent();
    virtual DeviceAttachedEvent& getDeviceAttachedEvent();
    virtual ApplicationListEvent& getApplicationListEvent();
    virtual ApplicationIconEvent& getApplicationIconEvent();
    virtual AppLaunchedEvent& getAppLaunchedEvent();
    virtual DriveModeStatusEvent& getDriveModeStatusEvent();
    virtual AppTerminatedEvent& getAppTerminatedEvent();
    virtual DeviceDetachedEvent& getDeviceDetachedEvent();
    virtual ApplicationStatusChangedEvent& getApplicationStatusChangedEvent();
    virtual ServerSupportedConfigurationEvent& getServerSupportedConfigurationEvent();
    virtual AudioDataReceivedEvent& getAudioDataReceivedEvent();
    virtual SwitchToNativeUIEvent& getSwitchToNativeUIEvent();
    virtual VirtualKeyboardTriggerEvent& getVirtualKeyboardTriggerEvent();
    virtual NotificationSupportedAppListEvent& getNotificationSupportedAppListEvent();
    virtual NotificationInfoEvent& getNotificationInfoEvent();
    virtual InvokeNotiActionResultEvent& getInvokeNotiActionResultEvent();
    virtual AppListUpdateEvent& getAppListUpdateEvent();
    virtual ActiveNotiEventEvent& getActiveNotiEventEvent();
    virtual NotiAppListUpdateEvent& getNotiAppListUpdateEvent();
    virtual ShowVirtualKeyboardEvent& getShowVirtualKeyboardEvent();
    virtual HideVirtualKeyboardEvent& getHideVirtualKeyboardEvent();

    /**
     * description: Attach a device.
     */
    virtual void ConnectMirrorLink(const std::string &_deviceId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> ConnectMirrorLinkAsync(const std::string &_deviceId, ConnectMirrorLinkAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Detach a device.
     */
    virtual void DisconnectMirrorLink(const std::string &_deviceId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> DisconnectMirrorLinkAsync(const std::string &_deviceId, DisconnectMirrorLinkAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Retrieve a list of applications available on the device.
     */
    virtual void GetApplicationList(const std::string &_deviceId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> GetApplicationListAsync(const std::string &_deviceId, GetApplicationListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Retrieve icon associated with given application.
     */
    virtual void GetApplicationIcon(const std::string &_deviceId, const uint32_t &_applicationId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> GetApplicationIconAsync(const std::string &_deviceId, const uint32_t &_applicationId, GetApplicationIconAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Launch an application.
     */
    virtual void LaunchApplication(const std::string &_deviceId, const uint32_t &_applicationId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> LaunchApplicationAsync(const std::string &_deviceId, const uint32_t &_applicationId, LaunchApplicationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Terminate an application.
     */
    virtual void TerminateApplication(const std::string &_deviceId, const uint32_t &_applicationId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> TerminateApplicationAsync(const std::string &_deviceId, const uint32_t &_applicationId, TerminateApplicationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Send a key event.
     */
    virtual void SendKeyEvent(const std::string &_deviceId, const std::string &_keyId, const bool &_downFlag, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> SendKeyEventAsync(const std::string &_deviceId, const std::string &_keyId, const bool &_downFlag, SendKeyEventAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Send a pointer event.
     */
    virtual void SendPointerEvent(const std::string &_deviceId, const uint8_t &_buttonMask, const uint16_t &_xPosition, const uint16_t &_yPosition, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> SendPointerEventAsync(const std::string &_deviceId, const uint8_t &_buttonMask, const uint16_t &_xPosition, const uint16_t &_yPosition, SendPointerEventAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Sends a touch event.
     */
    virtual void SendTouchEvent(const std::string &_deviceId, const MirrorLinkDomainSvc::IndividualTouchEvents &_individualEvents, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> SendTouchEventAsync(const std::string &_deviceId, const MirrorLinkDomainSvc::IndividualTouchEvents &_individualEvents, SendTouchEventAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Sends the entered text by virtual
                          keyboard or speller.
     */
    virtual void SendVirtualKeyboardInput(const std::string &_deviceId, const std::string &_text, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> SendVirtualKeyboardInputAsync(const std::string &_deviceId, const std::string &_text, SendVirtualKeyboardInputAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Enable or disable the virtual keyboard trigger service on server side.
     */
    virtual void SetVirtualKeyboardTrigger(const std::string &_deviceId, const bool &_enable, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> SetVirtualKeyboardTriggerAsync(const std::string &_deviceId, const bool &_enable, SetVirtualKeyboardTriggerAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Get list of Notification server service supported applications
     */
    virtual void GetNotificationSupportedAppList(const std::string &_deviceId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> GetNotificationSupportedAppListAsync(const std::string &_deviceId, GetNotificationSupportedAppListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Sets the MirrorLink Server applications from which MirrorLink Client 
             
     *               wants to receive notifications.
     */
    virtual void SetNotificationAllowedApplications(const std::string &_deviceId, const MirrorLinkDomainSvc::AppIDs &_allowedAppIds, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> SetNotificationAllowedApplicationsAsync(const std::string &_deviceId, const MirrorLinkDomainSvc::AppIDs &_allowedAppIds, SetNotificationAllowedApplicationsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Gets the detailed information of the notification
     */
    virtual void GetNotificationInfo(const std::string &_deviceId, const std::string &_notiId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> GetNotificationInfoAsync(const std::string &_deviceId, const std::string &_notiId, GetNotificationInfoAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Sends the action ID to the MirrorLink UPnP Server.
     */
    virtual void InvokeNotiAction(const std::string &_deviceId, const std::string &_notiId, const std::string &_actionId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> InvokeNotiActionAsync(const std::string &_deviceId, const std::string &_notiId, const std::string &_actionId, InvokeNotiActionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Set video focus.
     */
    virtual void SetVideoFocus(const std::string &_deviceId, const bool &_videoFocus, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> SetVideoFocusAsync(const std::string &_deviceId, const bool &_videoFocus, SetVideoFocusAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Send X11 Key Event.
     */
    virtual void SendX11KeyEvent(const std::string &_deviceId, const uint32_t &_keyId, const bool &_downFlag, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> SendX11KeyEventAsync(const std::string &_deviceId, const uint32_t &_keyId, const bool &_downFlag, SendX11KeyEventAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<DeviceListChangedEvent, CommonAPI::Deployable<::v4::com::harman::connectivity::MirrorLinkDomainSvc::Device, MirrorLinkDomainSvc_::DeviceDeployment_t>, CommonAPI::Deployable<::v4::com::harman::connectivity::MirrorLinkDomainSvc::ChangeState, CommonAPI::EmptyDeployment>> deviceListChanged_;
    CommonAPI::DBus::DBusEvent<DeviceAttachedEvent, CommonAPI::Deployable<::v4::com::harman::connectivity::MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> deviceAttached_;
    CommonAPI::DBus::DBusEvent<ApplicationListEvent, CommonAPI::Deployable<::v4::com::harman::connectivity::MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<::v4::com::harman::connectivity::MirrorLinkDomainSvc::Applications, MirrorLinkDomainSvc_::ApplicationsDeployment_t>> applicationList_;
    CommonAPI::DBus::DBusEvent<ApplicationIconEvent, CommonAPI::Deployable<::v4::com::harman::connectivity::MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> applicationIcon_;
    CommonAPI::DBus::DBusEvent<AppLaunchedEvent, CommonAPI::Deployable<::v4::com::harman::connectivity::MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment>> appLaunched_;
    CommonAPI::DBus::DBusEvent<DriveModeStatusEvent, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> driveModeStatus_;
    CommonAPI::DBus::DBusEvent<AppTerminatedEvent, CommonAPI::Deployable<::v4::com::harman::connectivity::MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment>> appTerminated_;
    CommonAPI::DBus::DBusEvent<DeviceDetachedEvent, CommonAPI::Deployable<::v4::com::harman::connectivity::MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> deviceDetached_;
    CommonAPI::DBus::DBusEvent<ApplicationStatusChangedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v4::com::harman::connectivity::MirrorLinkDomainSvc::ApplicationStatus, CommonAPI::EmptyDeployment>> applicationStatusChanged_;
    CommonAPI::DBus::DBusEvent<ServerSupportedConfigurationEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<::v4::com::harman::connectivity::MirrorLinkDomainSvc::ServerSupportedConfig, MirrorLinkDomainSvc_::ServerSupportedConfigDeployment_t>> serverSupportedConfiguration_;
    CommonAPI::DBus::DBusEvent<AudioDataReceivedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> audioDataReceived_;
    CommonAPI::DBus::DBusEvent<SwitchToNativeUIEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> switchToNativeUI_;
    CommonAPI::DBus::DBusEvent<VirtualKeyboardTriggerEvent, CommonAPI::Deployable<::v4::com::harman::connectivity::MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> virtualKeyboardTrigger_;
    CommonAPI::DBus::DBusEvent<NotificationSupportedAppListEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<::v4::com::harman::connectivity::MirrorLinkDomainSvc::AppIDs, MirrorLinkDomainSvc_::AppIDsDeployment_t>> notificationSupportedAppList_;
    CommonAPI::DBus::DBusEvent<NotificationInfoEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<::v4::com::harman::connectivity::MirrorLinkDomainSvc::Notification, MirrorLinkDomainSvc_::NotificationDeployment_t>> notificationInfo_;
    CommonAPI::DBus::DBusEvent<InvokeNotiActionResultEvent, CommonAPI::Deployable<::v4::com::harman::connectivity::MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> invokeNotiActionResult_;
    CommonAPI::DBus::DBusEvent<AppListUpdateEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<::v4::com::harman::connectivity::MirrorLinkDomainSvc::AppIDs, MirrorLinkDomainSvc_::AppIDsDeployment_t>> appListUpdate_;
    CommonAPI::DBus::DBusEvent<ActiveNotiEventEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> activeNotiEvent_;
    CommonAPI::DBus::DBusEvent<NotiAppListUpdateEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<::v4::com::harman::connectivity::MirrorLinkDomainSvc::AppIDs, MirrorLinkDomainSvc_::AppIDsDeployment_t>> notiAppListUpdate_;
    CommonAPI::DBus::DBusEvent<ShowVirtualKeyboardEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<::v4::com::harman::connectivity::MirrorLinkDomainSvc::KeyboardType, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v4::com::harman::connectivity::MirrorLinkDomainSvc::TextInputArea, MirrorLinkDomainSvc_::TextInputAreaDeployment_t>> showVirtualKeyboard_;
    CommonAPI::DBus::DBusEvent<HideVirtualKeyboardEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> hideVirtualKeyboard_;

};

} // namespace connectivity
} // namespace harman
} // namespace com
} // namespace v4

#endif // V4_COM_HARMAN_CONNECTIVITY_Mirror_Link_Domain_Svc_DBUS_PROXY_HPP_

