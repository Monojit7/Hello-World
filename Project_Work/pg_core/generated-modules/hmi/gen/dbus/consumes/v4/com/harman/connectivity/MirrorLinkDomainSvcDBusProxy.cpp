/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#include <v4/com/harman/connectivity/MirrorLinkDomainSvcDBusProxy.hpp>

namespace v4 {
namespace com {
namespace harman {
namespace connectivity {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createMirrorLinkDomainSvcDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<MirrorLinkDomainSvcDBusProxy>(_address, _connection);
}

INITIALIZER(registerMirrorLinkDomainSvcDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		MirrorLinkDomainSvc::getInterface(),
		&createMirrorLinkDomainSvcDBusProxy);
}

MirrorLinkDomainSvcDBusProxy::MirrorLinkDomainSvcDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		deviceListChanged_(*this, "DeviceListChanged", "(ssssssa(suuu))i", std::make_tuple(static_cast<MirrorLinkDomainSvc_::DeviceDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		deviceAttached_(*this, "DeviceAttached", "isb", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		applicationList_(*this, "ApplicationList", "isa(usa(suuu)(ss)ib)", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<MirrorLinkDomainSvc_::ApplicationsDeployment_t*>(nullptr))),
		applicationIcon_(*this, "ApplicationIcon", "isus", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		appLaunched_(*this, "AppLaunched", "isu", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		driveModeStatus_(*this, "DriveModeStatus", "b", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		appTerminated_(*this, "AppTerminated", "isu", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		deviceDetached_(*this, "DeviceDetached", "is", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		applicationStatusChanged_(*this, "ApplicationStatusChanged", "sui", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		serverSupportedConfiguration_(*this, "ServerSupportedConfiguration", "s(qqqqasasasbb)", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<MirrorLinkDomainSvc_::ServerSupportedConfigDeployment_t*>(nullptr))),
		audioDataReceived_(*this, "AudioDataReceived", "sb", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		switchToNativeUI_(*this, "SwitchToNativeUI", "s", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		virtualKeyboardTrigger_(*this, "VirtualKeyboardTrigger", "is", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		notificationSupportedAppList_(*this, "NotificationSupportedAppList", "sau", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<MirrorLinkDomainSvc_::AppIDsDeployment_t*>(nullptr))),
		notificationInfo_(*this, "NotificationInfo", "s(sssa(suuu)ua(ssba(suuu)))", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<MirrorLinkDomainSvc_::NotificationDeployment_t*>(nullptr))),
		invokeNotiActionResult_(*this, "InvokeNotiActionResult", "is", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		appListUpdate_(*this, "AppListUpdate", "sau", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<MirrorLinkDomainSvc_::AppIDsDeployment_t*>(nullptr))),
		activeNotiEvent_(*this, "ActiveNotiEvent", "ss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		notiAppListUpdate_(*this, "NotiAppListUpdate", "sau", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<MirrorLinkDomainSvc_::AppIDsDeployment_t*>(nullptr))),
		showVirtualKeyboard_(*this, "ShowVirtualKeyboard", "sisqq(qqqq)", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<MirrorLinkDomainSvc_::TextInputAreaDeployment_t*>(nullptr))),
		hideVirtualKeyboard_(*this, "HideVirtualKeyboard", "s", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)))
{
}


MirrorLinkDomainSvcDBusProxy::DeviceListChangedEvent& MirrorLinkDomainSvcDBusProxy::getDeviceListChangedEvent() {
    return deviceListChanged_;
}
MirrorLinkDomainSvcDBusProxy::DeviceAttachedEvent& MirrorLinkDomainSvcDBusProxy::getDeviceAttachedEvent() {
    return deviceAttached_;
}
MirrorLinkDomainSvcDBusProxy::ApplicationListEvent& MirrorLinkDomainSvcDBusProxy::getApplicationListEvent() {
    return applicationList_;
}
MirrorLinkDomainSvcDBusProxy::ApplicationIconEvent& MirrorLinkDomainSvcDBusProxy::getApplicationIconEvent() {
    return applicationIcon_;
}
MirrorLinkDomainSvcDBusProxy::AppLaunchedEvent& MirrorLinkDomainSvcDBusProxy::getAppLaunchedEvent() {
    return appLaunched_;
}
MirrorLinkDomainSvcDBusProxy::DriveModeStatusEvent& MirrorLinkDomainSvcDBusProxy::getDriveModeStatusEvent() {
    return driveModeStatus_;
}
MirrorLinkDomainSvcDBusProxy::AppTerminatedEvent& MirrorLinkDomainSvcDBusProxy::getAppTerminatedEvent() {
    return appTerminated_;
}
MirrorLinkDomainSvcDBusProxy::DeviceDetachedEvent& MirrorLinkDomainSvcDBusProxy::getDeviceDetachedEvent() {
    return deviceDetached_;
}
MirrorLinkDomainSvcDBusProxy::ApplicationStatusChangedEvent& MirrorLinkDomainSvcDBusProxy::getApplicationStatusChangedEvent() {
    return applicationStatusChanged_;
}
MirrorLinkDomainSvcDBusProxy::ServerSupportedConfigurationEvent& MirrorLinkDomainSvcDBusProxy::getServerSupportedConfigurationEvent() {
    return serverSupportedConfiguration_;
}
MirrorLinkDomainSvcDBusProxy::AudioDataReceivedEvent& MirrorLinkDomainSvcDBusProxy::getAudioDataReceivedEvent() {
    return audioDataReceived_;
}
MirrorLinkDomainSvcDBusProxy::SwitchToNativeUIEvent& MirrorLinkDomainSvcDBusProxy::getSwitchToNativeUIEvent() {
    return switchToNativeUI_;
}
MirrorLinkDomainSvcDBusProxy::VirtualKeyboardTriggerEvent& MirrorLinkDomainSvcDBusProxy::getVirtualKeyboardTriggerEvent() {
    return virtualKeyboardTrigger_;
}
MirrorLinkDomainSvcDBusProxy::NotificationSupportedAppListEvent& MirrorLinkDomainSvcDBusProxy::getNotificationSupportedAppListEvent() {
    return notificationSupportedAppList_;
}
MirrorLinkDomainSvcDBusProxy::NotificationInfoEvent& MirrorLinkDomainSvcDBusProxy::getNotificationInfoEvent() {
    return notificationInfo_;
}
MirrorLinkDomainSvcDBusProxy::InvokeNotiActionResultEvent& MirrorLinkDomainSvcDBusProxy::getInvokeNotiActionResultEvent() {
    return invokeNotiActionResult_;
}
MirrorLinkDomainSvcDBusProxy::AppListUpdateEvent& MirrorLinkDomainSvcDBusProxy::getAppListUpdateEvent() {
    return appListUpdate_;
}
MirrorLinkDomainSvcDBusProxy::ActiveNotiEventEvent& MirrorLinkDomainSvcDBusProxy::getActiveNotiEventEvent() {
    return activeNotiEvent_;
}
MirrorLinkDomainSvcDBusProxy::NotiAppListUpdateEvent& MirrorLinkDomainSvcDBusProxy::getNotiAppListUpdateEvent() {
    return notiAppListUpdate_;
}
MirrorLinkDomainSvcDBusProxy::ShowVirtualKeyboardEvent& MirrorLinkDomainSvcDBusProxy::getShowVirtualKeyboardEvent() {
    return showVirtualKeyboard_;
}
MirrorLinkDomainSvcDBusProxy::HideVirtualKeyboardEvent& MirrorLinkDomainSvcDBusProxy::getHideVirtualKeyboardEvent() {
    return hideVirtualKeyboard_;
}
    
    /**
     * description: Attach a device.
     */
    void MirrorLinkDomainSvcDBusProxy::ConnectMirrorLink(const std::string &_deviceId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "ConnectMirrorLink",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_deviceId,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcDBusProxy::ConnectMirrorLinkAsync(const std::string &_deviceId, ConnectMirrorLinkAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "ConnectMirrorLink",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_deviceId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: Detach a device.
     */
    void MirrorLinkDomainSvcDBusProxy::DisconnectMirrorLink(const std::string &_deviceId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "DisconnectMirrorLink",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_deviceId,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcDBusProxy::DisconnectMirrorLinkAsync(const std::string &_deviceId, DisconnectMirrorLinkAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "DisconnectMirrorLink",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_deviceId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: Retrieve a list of applications available on the device.
     */
    void MirrorLinkDomainSvcDBusProxy::GetApplicationList(const std::string &_deviceId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "GetApplicationList",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_deviceId,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcDBusProxy::GetApplicationListAsync(const std::string &_deviceId, GetApplicationListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "GetApplicationList",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_deviceId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: Retrieve icon associated with given application.
     */
    void MirrorLinkDomainSvcDBusProxy::GetApplicationIcon(const std::string &_deviceId, const uint32_t &_applicationId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_applicationId(_applicationId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "GetApplicationIcon",
        "su",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_deviceId, deploy_applicationId,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcDBusProxy::GetApplicationIconAsync(const std::string &_deviceId, const uint32_t &_applicationId, GetApplicationIconAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_applicationId(_applicationId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "GetApplicationIcon",
        "su",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_deviceId, deploy_applicationId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: Launch an application.
     */
    void MirrorLinkDomainSvcDBusProxy::LaunchApplication(const std::string &_deviceId, const uint32_t &_applicationId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_applicationId(_applicationId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "LaunchApplication",
        "su",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_deviceId, deploy_applicationId,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcDBusProxy::LaunchApplicationAsync(const std::string &_deviceId, const uint32_t &_applicationId, LaunchApplicationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_applicationId(_applicationId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "LaunchApplication",
        "su",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_deviceId, deploy_applicationId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: Terminate an application.
     */
    void MirrorLinkDomainSvcDBusProxy::TerminateApplication(const std::string &_deviceId, const uint32_t &_applicationId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_applicationId(_applicationId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "TerminateApplication",
        "su",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_deviceId, deploy_applicationId,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcDBusProxy::TerminateApplicationAsync(const std::string &_deviceId, const uint32_t &_applicationId, TerminateApplicationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_applicationId(_applicationId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "TerminateApplication",
        "su",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_deviceId, deploy_applicationId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: Send a key event.
     */
    void MirrorLinkDomainSvcDBusProxy::SendKeyEvent(const std::string &_deviceId, const std::string &_keyId, const bool &_downFlag, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_keyId(_keyId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_downFlag(_downFlag, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "SendKeyEvent",
        "ssb",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_deviceId, deploy_keyId, deploy_downFlag,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcDBusProxy::SendKeyEventAsync(const std::string &_deviceId, const std::string &_keyId, const bool &_downFlag, SendKeyEventAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_keyId(_keyId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_downFlag(_downFlag, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "SendKeyEvent",
        "ssb",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_deviceId, deploy_keyId, deploy_downFlag,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Send a pointer event.
     */
    void MirrorLinkDomainSvcDBusProxy::SendPointerEvent(const std::string &_deviceId, const uint8_t &_buttonMask, const uint16_t &_xPosition, const uint16_t &_yPosition, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_buttonMask(_buttonMask, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_xPosition(_xPosition, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_yPosition(_yPosition, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "SendPointerEvent",
        "syqq",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_deviceId, deploy_buttonMask, deploy_xPosition, deploy_yPosition,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcDBusProxy::SendPointerEventAsync(const std::string &_deviceId, const uint8_t &_buttonMask, const uint16_t &_xPosition, const uint16_t &_yPosition, SendPointerEventAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_buttonMask(_buttonMask, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_xPosition(_xPosition, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_yPosition(_yPosition, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "SendPointerEvent",
        "syqq",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_deviceId, deploy_buttonMask, deploy_xPosition, deploy_yPosition,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Sends a touch event.
     */
    void MirrorLinkDomainSvcDBusProxy::SendTouchEvent(const std::string &_deviceId, const MirrorLinkDomainSvc::IndividualTouchEvents &_individualEvents, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::IndividualTouchEvents, MirrorLinkDomainSvc_::IndividualTouchEventsDeployment_t> deploy_individualEvents(_individualEvents, static_cast<MirrorLinkDomainSvc_::IndividualTouchEventsDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<MirrorLinkDomainSvc::IndividualTouchEvents, MirrorLinkDomainSvc_::IndividualTouchEventsDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "SendTouchEvent",
        "sa(qqyy)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_deviceId, deploy_individualEvents,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcDBusProxy::SendTouchEventAsync(const std::string &_deviceId, const MirrorLinkDomainSvc::IndividualTouchEvents &_individualEvents, SendTouchEventAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::IndividualTouchEvents, MirrorLinkDomainSvc_::IndividualTouchEventsDeployment_t> deploy_individualEvents(_individualEvents, static_cast<MirrorLinkDomainSvc_::IndividualTouchEventsDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<MirrorLinkDomainSvc::IndividualTouchEvents, MirrorLinkDomainSvc_::IndividualTouchEventsDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "SendTouchEvent",
        "sa(qqyy)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_deviceId, deploy_individualEvents,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Sends the entered text by virtual
                          keyboard or speller.
     */
    void MirrorLinkDomainSvcDBusProxy::SendVirtualKeyboardInput(const std::string &_deviceId, const std::string &_text, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_text(_text, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "SendVirtualKeyboardInput",
        "ss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_deviceId, deploy_text,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcDBusProxy::SendVirtualKeyboardInputAsync(const std::string &_deviceId, const std::string &_text, SendVirtualKeyboardInputAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_text(_text, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "SendVirtualKeyboardInput",
        "ss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_deviceId, deploy_text,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: Enable or disable the virtual keyboard trigger service on server side.
     */
    void MirrorLinkDomainSvcDBusProxy::SetVirtualKeyboardTrigger(const std::string &_deviceId, const bool &_enable, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_enable(_enable, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "SetVirtualKeyboardTrigger",
        "sb",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_deviceId, deploy_enable,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcDBusProxy::SetVirtualKeyboardTriggerAsync(const std::string &_deviceId, const bool &_enable, SetVirtualKeyboardTriggerAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_enable(_enable, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "SetVirtualKeyboardTrigger",
        "sb",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_deviceId, deploy_enable,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: Get list of Notification server service supported applications
     */
    void MirrorLinkDomainSvcDBusProxy::GetNotificationSupportedAppList(const std::string &_deviceId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "GetNotificationSupportedAppList",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_deviceId,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcDBusProxy::GetNotificationSupportedAppListAsync(const std::string &_deviceId, GetNotificationSupportedAppListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "GetNotificationSupportedAppList",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_deviceId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: Sets the MirrorLink Server applications from which MirrorLink Client 
             
     *               wants to receive notifications.
     */
    void MirrorLinkDomainSvcDBusProxy::SetNotificationAllowedApplications(const std::string &_deviceId, const MirrorLinkDomainSvc::AppIDs &_allowedAppIds, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::AppIDs, MirrorLinkDomainSvc_::AppIDsDeployment_t> deploy_allowedAppIds(_allowedAppIds, static_cast<MirrorLinkDomainSvc_::AppIDsDeployment_t*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<MirrorLinkDomainSvc::AppIDs, MirrorLinkDomainSvc_::AppIDsDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "SetNotificationAllowedApplications",
        "sau",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_deviceId, deploy_allowedAppIds,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcDBusProxy::SetNotificationAllowedApplicationsAsync(const std::string &_deviceId, const MirrorLinkDomainSvc::AppIDs &_allowedAppIds, SetNotificationAllowedApplicationsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::AppIDs, MirrorLinkDomainSvc_::AppIDsDeployment_t> deploy_allowedAppIds(_allowedAppIds, static_cast<MirrorLinkDomainSvc_::AppIDsDeployment_t*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<MirrorLinkDomainSvc::AppIDs, MirrorLinkDomainSvc_::AppIDsDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "SetNotificationAllowedApplications",
        "sau",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_deviceId, deploy_allowedAppIds,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: Gets the detailed information of the notification
     */
    void MirrorLinkDomainSvcDBusProxy::GetNotificationInfo(const std::string &_deviceId, const std::string &_notiId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_notiId(_notiId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "GetNotificationInfo",
        "ss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_deviceId, deploy_notiId,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcDBusProxy::GetNotificationInfoAsync(const std::string &_deviceId, const std::string &_notiId, GetNotificationInfoAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_notiId(_notiId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "GetNotificationInfo",
        "ss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_deviceId, deploy_notiId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: Sends the action ID to the MirrorLink UPnP Server.
     */
    void MirrorLinkDomainSvcDBusProxy::InvokeNotiAction(const std::string &_deviceId, const std::string &_notiId, const std::string &_actionId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_notiId(_notiId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_actionId(_actionId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "InvokeNotiAction",
        "sss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_deviceId, deploy_notiId, deploy_actionId,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcDBusProxy::InvokeNotiActionAsync(const std::string &_deviceId, const std::string &_notiId, const std::string &_actionId, InvokeNotiActionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_notiId(_notiId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_actionId(_actionId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MirrorLinkDomainSvc::Result,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "InvokeNotiAction",
        "sss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_deviceId, deploy_notiId, deploy_actionId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MirrorLinkDomainSvc::Result, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: Set video focus.
     */
    void MirrorLinkDomainSvcDBusProxy::SetVideoFocus(const std::string &_deviceId, const bool &_videoFocus, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_videoFocus(_videoFocus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "SetVideoFocus",
        "sb",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_deviceId, deploy_videoFocus,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcDBusProxy::SetVideoFocusAsync(const std::string &_deviceId, const bool &_videoFocus, SetVideoFocusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_videoFocus(_videoFocus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "SetVideoFocus",
        "sb",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_deviceId, deploy_videoFocus,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Send X11 Key Event.
     */
    void MirrorLinkDomainSvcDBusProxy::SendX11KeyEvent(const std::string &_deviceId, const uint32_t &_keyId, const bool &_downFlag, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_keyId(_keyId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_downFlag(_downFlag, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "SendX11KeyEvent",
        "sub",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_deviceId, deploy_keyId, deploy_downFlag,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcDBusProxy::SendX11KeyEventAsync(const std::string &_deviceId, const uint32_t &_keyId, const bool &_downFlag, SendX11KeyEventAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_deviceId(_deviceId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_keyId(_keyId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_downFlag(_downFlag, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "SendX11KeyEvent",
        "sub",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_deviceId, deploy_keyId, deploy_downFlag,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }


void MirrorLinkDomainSvcDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 4;
          ownVersionMinor = 0;
      }

      } // namespace connectivity
      } // namespace harman
      } // namespace com
      } // namespace v4
