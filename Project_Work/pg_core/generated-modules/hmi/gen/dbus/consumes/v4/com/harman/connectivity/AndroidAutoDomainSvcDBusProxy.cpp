/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#include <v4/com/harman/connectivity/AndroidAutoDomainSvcDBusProxy.hpp>

namespace v4 {
namespace com {
namespace harman {
namespace connectivity {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createAndroidAutoDomainSvcDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<AndroidAutoDomainSvcDBusProxy>(_address, _connection);
}

INITIALIZER(registerAndroidAutoDomainSvcDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		AndroidAutoDomainSvc::getInterface(),
		&createAndroidAutoDomainSvcDBusProxy);
}

AndroidAutoDomainSvcDBusProxy::AndroidAutoDomainSvcDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		sessionStatus_(*this, "sessionStatus", "is", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		remoteScreenActive_(*this, "remoteScreenActive", "", std::make_tuple()),
		remoteScreenInactive_(*this, "remoteScreenInactive", "", std::make_tuple()),
		requestScreen_(*this, "requestScreen", "", std::make_tuple())
{
}


AndroidAutoDomainSvcDBusProxy::SessionStatusEvent& AndroidAutoDomainSvcDBusProxy::getSessionStatusEvent() {
    return sessionStatus_;
}
AndroidAutoDomainSvcDBusProxy::RemoteScreenActiveEvent& AndroidAutoDomainSvcDBusProxy::getRemoteScreenActiveEvent() {
    return remoteScreenActive_;
}
AndroidAutoDomainSvcDBusProxy::RemoteScreenInactiveEvent& AndroidAutoDomainSvcDBusProxy::getRemoteScreenInactiveEvent() {
    return remoteScreenInactive_;
}
AndroidAutoDomainSvcDBusProxy::RequestScreenEvent& AndroidAutoDomainSvcDBusProxy::getRequestScreenEvent() {
    return requestScreen_;
}
    
    void AndroidAutoDomainSvcDBusProxy::showRemoteScreen(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "showRemoteScreen",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> AndroidAutoDomainSvcDBusProxy::showRemoteScreenAsync(ShowRemoteScreenAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "showRemoteScreen",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    void AndroidAutoDomainSvcDBusProxy::hideRemoteScreen(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "hideRemoteScreen",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> AndroidAutoDomainSvcDBusProxy::hideRemoteScreenAsync(HideRemoteScreenAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "hideRemoteScreen",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    void AndroidAutoDomainSvcDBusProxy::hideRemoteScreenTransient(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "hideRemoteScreenTransient",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> AndroidAutoDomainSvcDBusProxy::hideRemoteScreenTransientAsync(HideRemoteScreenTransientAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "hideRemoteScreenTransient",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    void AndroidAutoDomainSvcDBusProxy::reportKey(const AndroidAutoDomainSvc::enKeyCodes &_keycode, const bool &_isDown, const int32_t &_metaState, CommonAPI::CallStatus &_internalCallStatus, int32_t &_retval, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<AndroidAutoDomainSvc::enKeyCodes, CommonAPI::EmptyDeployment> deploy_keycode(_keycode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_isDown(_isDown, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_metaState(_metaState, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_retval(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<AndroidAutoDomainSvc::enKeyCodes, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "reportKey",
        "ibi",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_keycode, deploy_isDown, deploy_metaState,
_internalCallStatus,
deploy_retval);
_retval = deploy_retval.getValue();
}
    std::future<CommonAPI::CallStatus> AndroidAutoDomainSvcDBusProxy::reportKeyAsync(const AndroidAutoDomainSvc::enKeyCodes &_keycode, const bool &_isDown, const int32_t &_metaState, ReportKeyAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<AndroidAutoDomainSvc::enKeyCodes, CommonAPI::EmptyDeployment> deploy_keycode(_keycode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_isDown(_isDown, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_metaState(_metaState, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_retval(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<AndroidAutoDomainSvc::enKeyCodes, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "reportKey",
        "ibi",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_keycode, deploy_isDown, deploy_metaState,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _retval) {
        	if (_callback)
        		_callback(_internalCallStatus, _retval.getValue());
        },
        std::make_tuple(deploy_retval));
    }
    void AndroidAutoDomainSvcDBusProxy::reportKeyLongPress(const AndroidAutoDomainSvc::enKeyCodes &_keycode, const int32_t &_metastate, CommonAPI::CallStatus &_internalCallStatus, int32_t &_retval, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<AndroidAutoDomainSvc::enKeyCodes, CommonAPI::EmptyDeployment> deploy_keycode(_keycode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_metastate(_metastate, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_retval(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<AndroidAutoDomainSvc::enKeyCodes, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "reportKeyLongPress",
        "ii",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_keycode, deploy_metastate,
_internalCallStatus,
deploy_retval);
_retval = deploy_retval.getValue();
}
    std::future<CommonAPI::CallStatus> AndroidAutoDomainSvcDBusProxy::reportKeyLongPressAsync(const AndroidAutoDomainSvc::enKeyCodes &_keycode, const int32_t &_metastate, ReportKeyLongPressAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<AndroidAutoDomainSvc::enKeyCodes, CommonAPI::EmptyDeployment> deploy_keycode(_keycode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_metastate(_metastate, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_retval(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<AndroidAutoDomainSvc::enKeyCodes, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "reportKeyLongPress",
        "ii",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_keycode, deploy_metastate,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _retval) {
        	if (_callback)
        		_callback(_internalCallStatus, _retval.getValue());
        },
        std::make_tuple(deploy_retval));
    }
    void AndroidAutoDomainSvcDBusProxy::reportKeyAbsolute(const AndroidAutoDomainSvc::enKeyCodes &_keycode, const int32_t &_value, CommonAPI::CallStatus &_internalCallStatus, int32_t &_retval, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<AndroidAutoDomainSvc::enKeyCodes, CommonAPI::EmptyDeployment> deploy_keycode(_keycode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_value(_value, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_retval(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<AndroidAutoDomainSvc::enKeyCodes, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "reportKeyAbsolute",
        "ii",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_keycode, deploy_value,
_internalCallStatus,
deploy_retval);
_retval = deploy_retval.getValue();
}
    std::future<CommonAPI::CallStatus> AndroidAutoDomainSvcDBusProxy::reportKeyAbsoluteAsync(const AndroidAutoDomainSvc::enKeyCodes &_keycode, const int32_t &_value, ReportKeyAbsoluteAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<AndroidAutoDomainSvc::enKeyCodes, CommonAPI::EmptyDeployment> deploy_keycode(_keycode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_value(_value, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_retval(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<AndroidAutoDomainSvc::enKeyCodes, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "reportKeyAbsolute",
        "ii",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_keycode, deploy_value,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _retval) {
        	if (_callback)
        		_callback(_internalCallStatus, _retval.getValue());
        },
        std::make_tuple(deploy_retval));
    }
    void AndroidAutoDomainSvcDBusProxy::reportKeyRelative(const AndroidAutoDomainSvc::enKeyCodes &_keycode, const int32_t &_delta, CommonAPI::CallStatus &_internalCallStatus, int32_t &_retval, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<AndroidAutoDomainSvc::enKeyCodes, CommonAPI::EmptyDeployment> deploy_keycode(_keycode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_delta(_delta, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_retval(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<AndroidAutoDomainSvc::enKeyCodes, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "reportKeyRelative",
        "ii",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_keycode, deploy_delta,
_internalCallStatus,
deploy_retval);
_retval = deploy_retval.getValue();
}
    std::future<CommonAPI::CallStatus> AndroidAutoDomainSvcDBusProxy::reportKeyRelativeAsync(const AndroidAutoDomainSvc::enKeyCodes &_keycode, const int32_t &_delta, ReportKeyRelativeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<AndroidAutoDomainSvc::enKeyCodes, CommonAPI::EmptyDeployment> deploy_keycode(_keycode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_delta(_delta, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_retval(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<AndroidAutoDomainSvc::enKeyCodes, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "reportKeyRelative",
        "ii",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_keycode, deploy_delta,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _retval) {
        	if (_callback)
        		_callback(_internalCallStatus, _retval.getValue());
        },
        std::make_tuple(deploy_retval));
    }


void AndroidAutoDomainSvcDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 4;
          ownVersionMinor = 0;
      }

      } // namespace connectivity
      } // namespace harman
      } // namespace com
      } // namespace v4
