/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V0_ORG_HARMAN_NAV_CTRL_Simulation_PROXY_BASE_HPP_
#define V0_ORG_HARMAN_NAV_CTRL_Simulation_PROXY_BASE_HPP_

#include <v0/org/harman/nav/ctrl/Simulation.hpp>


#include <org/harman/nav/ctrl/CommonTypes.hpp>
#include <org/harman/nav/ctrl/SimulationTypes.hpp>
#include <v1/org/harman/nav/ctrl/PositioningTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <unordered_map>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace nav {
namespace ctrl {

class SimulationProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::org::harman::nav::ctrl::SimulationTypes::SimulationStatus
    > SimulationStatusChangedEvent;
    typedef CommonAPI::Event<
        int8_t
    > SimulationSpeedChangedEvent;

    typedef std::function<void(const CommonAPI::CallStatus&)> SetSimulationModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::org::harman::nav::ctrl::SimulationTypes::SimulationStatus&)> GetSimulationStatusAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetSimulationSpeedAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int8_t&)> GetSimulationSpeedAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> ResumeSimulationAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> PauseSimulationAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetPositionAsyncCallback;


    /**
     * description: Notification when the Simulation Status has changed
     */
    virtual SimulationStatusChangedEvent& getSimulationStatusChangedEvent() = 0;
    /**
     * description: Notification when the simulation speed factor has changed
     */
    virtual SimulationSpeedChangedEvent& getSimulationSpeedChangedEvent() = 0;

    /**
     * description: Activates or deactivates simulation mode
     */
    virtual void setSimulationMode(const bool &_activate, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setSimulationModeAsync(const bool &_activate, SetSimulationModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Retrieves the simulation status
     */
    virtual void getSimulationStatus(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::SimulationTypes::SimulationStatus &_simulationStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSimulationStatusAsync(GetSimulationStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Sets the speed factor for the simulation mode
     */
    virtual void setSimulationSpeed(const int8_t &_speedFactor, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setSimulationSpeedAsync(const int8_t &_speedFactor, SetSimulationSpeedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Returns the speed factor for the simulation mode
     */
    virtual void getSimulationSpeed(CommonAPI::CallStatus &_internalCallStatus, int8_t &_speedFactor, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSimulationSpeedAsync(GetSimulationSpeedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Resumes a follow active route simulation
     */
    virtual void resumeSimulation(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> resumeSimulationAsync(ResumeSimulationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Freezes the current location
     */
    virtual void pauseSimulation(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> pauseSimulationAsync(PauseSimulationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Sets the position to a specific location
     */
    virtual void setPosition(const ::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict &_position, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setPositionAsync(const ::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict &_position, SetPositionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace ctrl
} // namespace nav
} // namespace harman
} // namespace org
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_NAV_CTRL_Simulation_PROXY_BASE_HPP_
