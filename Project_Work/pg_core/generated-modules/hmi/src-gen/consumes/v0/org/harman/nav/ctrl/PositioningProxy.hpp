/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V0_ORG_HARMAN_NAV_CTRL_Positioning_PROXY_HPP_
#define V0_ORG_HARMAN_NAV_CTRL_Positioning_PROXY_HPP_

#include <v0/org/harman/nav/ctrl/PositioningProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace nav {
namespace ctrl {

template <typename ... _AttributeExtensions>
class PositioningProxy
    : virtual public Positioning, 
      virtual public PositioningProxyBase,
      virtual public _AttributeExtensions... {
public:
    PositioningProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~PositioningProxy();

    typedef Positioning InterfaceType;


    /**
     * description: Real-time GPS clock corrected by leap-seconds.
     */
    /**
     * Returns the wrapper class that provides access to the attribute gpsRTC.
     */
    virtual GpsRTCAttribute& getGpsRTCAttribute() {
        return delegate_->getGpsRTCAttribute();
    }

    /**
     * description: positionUpdate = This signal is called to notify a client application of a
     *   position change. The update frequency is implementation specific. The maximal
     *   allowed frequency is 10Hz
     */
    /**
     * Returns the wrapper class that provides access to the broadcast positionUpdate.
     */
    virtual PositionUpdateEvent& getPositionUpdateEvent() {
        return delegate_->getPositionUpdateEvent();
    }
    /**
     * description: addressUpdate = This signal is called to notify a client application that the
     *   current address changed
     */
    /**
     * Returns the wrapper class that provides access to the broadcast addressUpdate.
     */
    virtual AddressUpdateEvent& getAddressUpdateEvent() {
        return delegate_->getAddressUpdateEvent();
    }
    /**
     * description: statusUpdate = This signal is emitted to notify a client application that the
     *   current status changed
     */
    /**
     * Returns the wrapper class that provides access to the broadcast statusUpdate.
     */
    virtual StatusUpdateEvent& getStatusUpdateEvent() {
        return delegate_->getStatusUpdateEvent();
    }
    /**
     * description: offroadPositionChanged = This signal is emitted when the heading and the
     *   distance to the closest point on the road network changes
     */
    /**
     * Returns the wrapper class that provides access to the broadcast offRoadPositionChanged.
     */
    virtual OffRoadPositionChangedEvent& getOffRoadPositionChangedEvent() {
        return delegate_->getOffRoadPositionChangedEvent();
    }
    /**
     * description: currentRoadAttributesChanged = This signal is emitted when the current road
     *   attributes have changed.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast currentRoadAttributesChanged.
     */
    virtual CurrentRoadAttributesChangedEvent& getCurrentRoadAttributesChangedEvent() {
        return delegate_->getCurrentRoadAttributesChangedEvent();
    }

    /**
     * description: getPosition = This method returns the current position
     * Calls getPosition with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getPosition(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemKey> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict &_position, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getPosition with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getPositionAsync(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemKey> &_valuesToReturn, GetPositionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getAddress = This method returns the current address
     * Calls getAddress with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getAddress(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemKey> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemDict &_address, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getAddress with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getAddressAsync(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemKey> &_valuesToReturn, GetAddressAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getStatus = This method returns the current status
     * Calls getStatus with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getStatus(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatus> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatusDict &_posstatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getStatus with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getStatusAsync(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatus> &_valuesToReturn, GetStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getCurrentRoadAttributes = This method returns the current road attributes.
     * Calls getCurrentRoadAttributes with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getCurrentRoadAttributes(const ::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeKeys &_keys, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeDict &_dict, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getCurrentRoadAttributes with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getCurrentRoadAttributesAsync(const ::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeKeys &_keys, GetCurrentRoadAttributesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<PositioningProxyBase> delegate_;
};

typedef PositioningProxy<> PositioningProxyDefault;

namespace PositioningExtensions {
    /**
     * description: Real-time GPS clock corrected by leap-seconds.
     */
    template <template <typename > class _ExtensionType>
    class GpsRTCAttributeExtension {
     public:
        typedef _ExtensionType<PositioningProxyBase::GpsRTCAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PositioningProxyBase::GpsRTCAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        GpsRTCAttributeExtension() {}
    #endif
    
        GpsRTCAttributeExtension(PositioningProxyBase& proxy): attributeExtension_(proxy.getGpsRTCAttribute()) {
        }
    
        inline extension_type& getGpsRTCAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace PositioningExtensions

//
// PositioningProxy Implementation
//
template <typename ... _AttributeExtensions>
PositioningProxy<_AttributeExtensions...>::PositioningProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<PositioningProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<PositioningProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
PositioningProxy<_AttributeExtensions...>::~PositioningProxy() {
}

/**
 * description: getPosition = This method returns the current position
 */
template <typename ... _AttributeExtensions>
void PositioningProxy<_AttributeExtensions...>::getPosition(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemKey> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict &_position, const CommonAPI::CallInfo *_info) {
    delegate_->getPosition(_valuesToReturn, _internalCallStatus, _position, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PositioningProxy<_AttributeExtensions...>::getPositionAsync(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemKey> &_valuesToReturn, GetPositionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getPositionAsync(_valuesToReturn, _callback, _info);
}
/**
 * description: getAddress = This method returns the current address
 */
template <typename ... _AttributeExtensions>
void PositioningProxy<_AttributeExtensions...>::getAddress(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemKey> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemDict &_address, const CommonAPI::CallInfo *_info) {
    delegate_->getAddress(_valuesToReturn, _internalCallStatus, _address, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PositioningProxy<_AttributeExtensions...>::getAddressAsync(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemKey> &_valuesToReturn, GetAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getAddressAsync(_valuesToReturn, _callback, _info);
}
/**
 * description: getStatus = This method returns the current status
 */
template <typename ... _AttributeExtensions>
void PositioningProxy<_AttributeExtensions...>::getStatus(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatus> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatusDict &_posstatus, const CommonAPI::CallInfo *_info) {
    delegate_->getStatus(_valuesToReturn, _internalCallStatus, _posstatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PositioningProxy<_AttributeExtensions...>::getStatusAsync(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatus> &_valuesToReturn, GetStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getStatusAsync(_valuesToReturn, _callback, _info);
}
/**
 * description: getCurrentRoadAttributes = This method returns the current road attributes.
 */
template <typename ... _AttributeExtensions>
void PositioningProxy<_AttributeExtensions...>::getCurrentRoadAttributes(const ::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeKeys &_keys, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeDict &_dict, const CommonAPI::CallInfo *_info) {
    delegate_->getCurrentRoadAttributes(_keys, _internalCallStatus, _dict, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PositioningProxy<_AttributeExtensions...>::getCurrentRoadAttributesAsync(const ::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeKeys &_keys, GetCurrentRoadAttributesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getCurrentRoadAttributesAsync(_keys, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &PositioningProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool PositioningProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool PositioningProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& PositioningProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& PositioningProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace ctrl
} // namespace nav
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::org::harman::nav::ctrl::PositioningProxy,
    _AttributeExtension> {
    typedef typename ::v0::org::harman::nav::ctrl::PositioningProxy<
            ::v0::org::harman::nav::ctrl::PositioningExtensions::GpsRTCAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_2 = v0;

#endif // V0_ORG_HARMAN_NAV_CTRL_Positioning_PROXY_HPP_
