/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V0_ORG_HARMAN_NAV_CTRL_Positioning_PROXY_BASE_HPP_
#define V0_ORG_HARMAN_NAV_CTRL_Positioning_PROXY_BASE_HPP_

#include <v0/org/harman/nav/ctrl/Positioning.hpp>


#include <org/harman/nav/ctrl/CommonTypes.hpp>
#include <v1/org/harman/nav/ctrl/PositioningTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <unordered_map>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace nav {
namespace ctrl {

class PositioningProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::org::harman::nav::ctrl::PositioningTypes::GpsTime> GpsRTCAttribute;
    typedef CommonAPI::Event<
        ::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict
    > PositionUpdateEvent;
    typedef CommonAPI::Event<
        ::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemDict
    > AddressUpdateEvent;
    typedef CommonAPI::Event<
        ::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatusDict
    > StatusUpdateEvent;
    typedef CommonAPI::Event<
        uint32_t, int32_t
    > OffRoadPositionChangedEvent;
    typedef CommonAPI::Event<
        ::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeDict
    > CurrentRoadAttributesChangedEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict&)> GetPositionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemDict&)> GetAddressAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatusDict&)> GetStatusAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeDict&)> GetCurrentRoadAttributesAsyncCallback;

    /**
     * description: Real-time GPS clock corrected by leap-seconds.
     */
    virtual GpsRTCAttribute& getGpsRTCAttribute() = 0;

    /**
     * description: positionUpdate = This signal is called to notify a client application of a
     *   position change. The update frequency is implementation specific. The maximal
     *   allowed frequency is 10Hz
     */
    virtual PositionUpdateEvent& getPositionUpdateEvent() = 0;
    /**
     * description: addressUpdate = This signal is called to notify a client application that the
     *   current address changed
     */
    virtual AddressUpdateEvent& getAddressUpdateEvent() = 0;
    /**
     * description: statusUpdate = This signal is emitted to notify a client application that the
     *   current status changed
     */
    virtual StatusUpdateEvent& getStatusUpdateEvent() = 0;
    /**
     * description: offroadPositionChanged = This signal is emitted when the heading and the
     *   distance to the closest point on the road network changes
     */
    virtual OffRoadPositionChangedEvent& getOffRoadPositionChangedEvent() = 0;
    /**
     * description: currentRoadAttributesChanged = This signal is emitted when the current road
     *   attributes have changed.
     */
    virtual CurrentRoadAttributesChangedEvent& getCurrentRoadAttributesChangedEvent() = 0;

    /**
     * description: getPosition = This method returns the current position
     */
    virtual void getPosition(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemKey> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict &_position, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getPositionAsync(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemKey> &_valuesToReturn, GetPositionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getAddress = This method returns the current address
     */
    virtual void getAddress(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemKey> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemDict &_address, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getAddressAsync(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::AddressItemKey> &_valuesToReturn, GetAddressAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getStatus = This method returns the current status
     */
    virtual void getStatus(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatus> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatusDict &_posstatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getStatusAsync(const std::vector<::v1::org::harman::nav::ctrl::PositioningTypes::PositionStatus> &_valuesToReturn, GetStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getCurrentRoadAttributes = This method returns the current road attributes.
     */
    virtual void getCurrentRoadAttributes(const ::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeKeys &_keys, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeDict &_dict, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getCurrentRoadAttributesAsync(const ::v1::org::harman::nav::ctrl::PositioningTypes::RoadAttributeKeys &_keys, GetCurrentRoadAttributesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace ctrl
} // namespace nav
} // namespace harman
} // namespace org
} // namespace v0


// Compatibility
namespace v0_2 = v0;

#endif // V0_ORG_HARMAN_NAV_CTRL_Positioning_PROXY_BASE_HPP_
