/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V0_ORG_HARMAN_NAV_CTRL_Simulation_PROXY_HPP_
#define V0_ORG_HARMAN_NAV_CTRL_Simulation_PROXY_HPP_

#include <v0/org/harman/nav/ctrl/SimulationProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace nav {
namespace ctrl {

template <typename ... _AttributeExtensions>
class SimulationProxy
    : virtual public Simulation, 
      virtual public SimulationProxyBase,
      virtual public _AttributeExtensions... {
public:
    SimulationProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~SimulationProxy();

    typedef Simulation InterfaceType;



    /**
     * description: Notification when the Simulation Status has changed
     */
    /**
     * Returns the wrapper class that provides access to the broadcast simulationStatusChanged.
     */
    virtual SimulationStatusChangedEvent& getSimulationStatusChangedEvent() {
        return delegate_->getSimulationStatusChangedEvent();
    }
    /**
     * description: Notification when the simulation speed factor has changed
     */
    /**
     * Returns the wrapper class that provides access to the broadcast simulationSpeedChanged.
     */
    virtual SimulationSpeedChangedEvent& getSimulationSpeedChangedEvent() {
        return delegate_->getSimulationSpeedChangedEvent();
    }

    /**
     * description: Activates or deactivates simulation mode
     * Calls setSimulationMode with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setSimulationMode(const bool &_activate, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setSimulationMode with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setSimulationModeAsync(const bool &_activate, SetSimulationModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Retrieves the simulation status
     * Calls getSimulationStatus with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getSimulationStatus(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::SimulationTypes::SimulationStatus &_simulationStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getSimulationStatus with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getSimulationStatusAsync(GetSimulationStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Sets the speed factor for the simulation mode
     * Calls setSimulationSpeed with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setSimulationSpeed(const int8_t &_speedFactor, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setSimulationSpeed with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setSimulationSpeedAsync(const int8_t &_speedFactor, SetSimulationSpeedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Returns the speed factor for the simulation mode
     * Calls getSimulationSpeed with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getSimulationSpeed(CommonAPI::CallStatus &_internalCallStatus, int8_t &_speedFactor, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getSimulationSpeed with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getSimulationSpeedAsync(GetSimulationSpeedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Resumes a follow active route simulation
     * Calls resumeSimulation with synchronous semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void resumeSimulation(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls resumeSimulation with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> resumeSimulationAsync(ResumeSimulationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Freezes the current location
     * Calls pauseSimulation with synchronous semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void pauseSimulation(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls pauseSimulation with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> pauseSimulationAsync(PauseSimulationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Sets the position to a specific location
     * Calls setPosition with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setPosition(const ::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict &_position, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setPosition with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setPositionAsync(const ::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict &_position, SetPositionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<SimulationProxyBase> delegate_;
};

typedef SimulationProxy<> SimulationProxyDefault;


//
// SimulationProxy Implementation
//
template <typename ... _AttributeExtensions>
SimulationProxy<_AttributeExtensions...>::SimulationProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<SimulationProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<SimulationProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
SimulationProxy<_AttributeExtensions...>::~SimulationProxy() {
}

/**
 * description: Activates or deactivates simulation mode
 */
template <typename ... _AttributeExtensions>
void SimulationProxy<_AttributeExtensions...>::setSimulationMode(const bool &_activate, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setSimulationMode(_activate, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimulationProxy<_AttributeExtensions...>::setSimulationModeAsync(const bool &_activate, SetSimulationModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setSimulationModeAsync(_activate, _callback, _info);
}
/**
 * description: Retrieves the simulation status
 */
template <typename ... _AttributeExtensions>
void SimulationProxy<_AttributeExtensions...>::getSimulationStatus(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::SimulationTypes::SimulationStatus &_simulationStatus, const CommonAPI::CallInfo *_info) {
    delegate_->getSimulationStatus(_internalCallStatus, _simulationStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimulationProxy<_AttributeExtensions...>::getSimulationStatusAsync(GetSimulationStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getSimulationStatusAsync(_callback, _info);
}
/**
 * description: Sets the speed factor for the simulation mode
 */
template <typename ... _AttributeExtensions>
void SimulationProxy<_AttributeExtensions...>::setSimulationSpeed(const int8_t &_speedFactor, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setSimulationSpeed(_speedFactor, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimulationProxy<_AttributeExtensions...>::setSimulationSpeedAsync(const int8_t &_speedFactor, SetSimulationSpeedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setSimulationSpeedAsync(_speedFactor, _callback, _info);
}
/**
 * description: Returns the speed factor for the simulation mode
 */
template <typename ... _AttributeExtensions>
void SimulationProxy<_AttributeExtensions...>::getSimulationSpeed(CommonAPI::CallStatus &_internalCallStatus, int8_t &_speedFactor, const CommonAPI::CallInfo *_info) {
    delegate_->getSimulationSpeed(_internalCallStatus, _speedFactor, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimulationProxy<_AttributeExtensions...>::getSimulationSpeedAsync(GetSimulationSpeedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getSimulationSpeedAsync(_callback, _info);
}
/**
 * description: Resumes a follow active route simulation
 */
template <typename ... _AttributeExtensions>
void SimulationProxy<_AttributeExtensions...>::resumeSimulation(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->resumeSimulation(_internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimulationProxy<_AttributeExtensions...>::resumeSimulationAsync(ResumeSimulationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->resumeSimulationAsync(_callback, _info);
}
/**
 * description: Freezes the current location
 */
template <typename ... _AttributeExtensions>
void SimulationProxy<_AttributeExtensions...>::pauseSimulation(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->pauseSimulation(_internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimulationProxy<_AttributeExtensions...>::pauseSimulationAsync(PauseSimulationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->pauseSimulationAsync(_callback, _info);
}
/**
 * description: Sets the position to a specific location
 */
template <typename ... _AttributeExtensions>
void SimulationProxy<_AttributeExtensions...>::setPosition(const ::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict &_position, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setPosition(_position, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimulationProxy<_AttributeExtensions...>::setPositionAsync(const ::v1::org::harman::nav::ctrl::PositioningTypes::PositionItemDict &_position, SetPositionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setPositionAsync(_position, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &SimulationProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool SimulationProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool SimulationProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& SimulationProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& SimulationProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace ctrl
} // namespace nav
} // namespace harman
} // namespace org
} // namespace v0



// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_NAV_CTRL_Simulation_PROXY_HPP_
