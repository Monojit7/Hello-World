/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V3_COM_HARMAN_CONNECTIVITY_Car_Play_Domain_Svc_PROXY_HPP_
#define V3_COM_HARMAN_CONNECTIVITY_Car_Play_Domain_Svc_PROXY_HPP_

#include <v3/com/harman/connectivity/CarPlayDomainSvcProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v3 {
namespace com {
namespace harman {
namespace connectivity {

template <typename ... _AttributeExtensions>
class CarPlayDomainSvcProxy
    : virtual public CarPlayDomainSvc, 
      virtual public CarPlayDomainSvcProxyBase,
      virtual public _AttributeExtensions... {
public:
    CarPlayDomainSvcProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~CarPlayDomainSvcProxy();

    typedef CarPlayDomainSvc InterfaceType;



    /**
     * Returns the wrapper class that provides access to the broadcast sessionStatus.
     */
    virtual SessionStatusEvent& getSessionStatusEvent() {
        return delegate_->getSessionStatusEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast remoteScreenActive.
     */
    virtual RemoteScreenActiveEvent& getRemoteScreenActiveEvent() {
        return delegate_->getRemoteScreenActiveEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast remoteScreenInactive.
     */
    virtual RemoteScreenInactiveEvent& getRemoteScreenInactiveEvent() {
        return delegate_->getRemoteScreenInactiveEvent();
    }

    /**
     * Calls showRemoteScreen with synchronous semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void showRemoteScreen(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls showRemoteScreen with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> showRemoteScreenAsync(ShowRemoteScreenAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls hideRemoteScreen with synchronous semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void hideRemoteScreen(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls hideRemoteScreen with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> hideRemoteScreenAsync(HideRemoteScreenAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setButtonEvent with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setButtonEvent(const bool &_isBtnPressed, const CarPlayDomainSvc::enCarPlayHardButtonType &_btnType, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setButtonEvent with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setButtonEventAsync(const bool &_isBtnPressed, const CarPlayDomainSvc::enCarPlayHardButtonType &_btnType, SetButtonEventAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<CarPlayDomainSvcProxyBase> delegate_;
};

typedef CarPlayDomainSvcProxy<> CarPlayDomainSvcProxyDefault;


//
// CarPlayDomainSvcProxy Implementation
//
template <typename ... _AttributeExtensions>
CarPlayDomainSvcProxy<_AttributeExtensions...>::CarPlayDomainSvcProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<CarPlayDomainSvcProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<CarPlayDomainSvcProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
CarPlayDomainSvcProxy<_AttributeExtensions...>::~CarPlayDomainSvcProxy() {
}

template <typename ... _AttributeExtensions>
void CarPlayDomainSvcProxy<_AttributeExtensions...>::showRemoteScreen(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->showRemoteScreen(_internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CarPlayDomainSvcProxy<_AttributeExtensions...>::showRemoteScreenAsync(ShowRemoteScreenAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->showRemoteScreenAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void CarPlayDomainSvcProxy<_AttributeExtensions...>::hideRemoteScreen(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->hideRemoteScreen(_internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CarPlayDomainSvcProxy<_AttributeExtensions...>::hideRemoteScreenAsync(HideRemoteScreenAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->hideRemoteScreenAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void CarPlayDomainSvcProxy<_AttributeExtensions...>::setButtonEvent(const bool &_isBtnPressed, const CarPlayDomainSvc::enCarPlayHardButtonType &_btnType, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_btnType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->setButtonEvent(_isBtnPressed, _btnType, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CarPlayDomainSvcProxy<_AttributeExtensions...>::setButtonEventAsync(const bool &_isBtnPressed, const CarPlayDomainSvc::enCarPlayHardButtonType &_btnType, SetButtonEventAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_btnType.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->setButtonEventAsync(_isBtnPressed, _btnType, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &CarPlayDomainSvcProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool CarPlayDomainSvcProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool CarPlayDomainSvcProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& CarPlayDomainSvcProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& CarPlayDomainSvcProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace connectivity
} // namespace harman
} // namespace com
} // namespace v3



// Compatibility
namespace v3_0 = v3;

#endif // V3_COM_HARMAN_CONNECTIVITY_Car_Play_Domain_Svc_PROXY_HPP_
