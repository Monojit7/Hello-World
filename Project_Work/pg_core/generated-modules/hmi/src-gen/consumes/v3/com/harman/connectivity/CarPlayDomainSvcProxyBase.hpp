/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V3_COM_HARMAN_CONNECTIVITY_Car_Play_Domain_Svc_PROXY_BASE_HPP_
#define V3_COM_HARMAN_CONNECTIVITY_Car_Play_Domain_Svc_PROXY_BASE_HPP_

#include <v3/com/harman/connectivity/CarPlayDomainSvc.hpp>



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v3 {
namespace com {
namespace harman {
namespace connectivity {

class CarPlayDomainSvcProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        bool
    > SessionStatusEvent;
    typedef CommonAPI::Event<
    > RemoteScreenActiveEvent;
    typedef CommonAPI::Event<
    > RemoteScreenInactiveEvent;

    typedef std::function<void(const CommonAPI::CallStatus&)> ShowRemoteScreenAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> HideRemoteScreenAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetButtonEventAsyncCallback;


    virtual SessionStatusEvent& getSessionStatusEvent() = 0;
    virtual RemoteScreenActiveEvent& getRemoteScreenActiveEvent() = 0;
    virtual RemoteScreenInactiveEvent& getRemoteScreenInactiveEvent() = 0;

    virtual void showRemoteScreen(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> showRemoteScreenAsync(ShowRemoteScreenAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void hideRemoteScreen(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> hideRemoteScreenAsync(HideRemoteScreenAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void setButtonEvent(const bool &_isBtnPressed, const CarPlayDomainSvc::enCarPlayHardButtonType &_btnType, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setButtonEventAsync(const bool &_isBtnPressed, const CarPlayDomainSvc::enCarPlayHardButtonType &_btnType, SetButtonEventAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace connectivity
} // namespace harman
} // namespace com
} // namespace v3


// Compatibility
namespace v3_0 = v3;

#endif // V3_COM_HARMAN_CONNECTIVITY_Car_Play_Domain_Svc_PROXY_BASE_HPP_
