/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V3_COM_HARMAN_CONNECTIVITY_CAR_PLAY_DOMAIN_SVC_HPP_
#define V3_COM_HARMAN_CONNECTIVITY_CAR_PLAY_DOMAIN_SVC_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v3 {
namespace com {
namespace harman {
namespace connectivity {

class CarPlayDomainSvc {
public:
    virtual ~CarPlayDomainSvc() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    
    struct enCarPlayHardButtonType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            CarPlayHardButton_PhoneAccept = 0,
            CarPlayHardButton_PhoneReject = 1,
            CarPlayHardButton_PhoneFlash = 2,
            CarPlayHardButton_PhoneKey0 = 3,
            CarPlayHardButton_PhoneKey1 = 4,
            CarPlayHardButton_PhoneKey2 = 5,
            CarPlayHardButton_PhoneKey3 = 6,
            CarPlayHardButton_PhoneKey4 = 7,
            CarPlayHardButton_PhoneKey5 = 8,
            CarPlayHardButton_PhoneKey6 = 9,
            CarPlayHardButton_PhoneKey7 = 10,
            CarPlayHardButton_PhoneKey8 = 11,
            CarPlayHardButton_PhoneKey9 = 12,
            CarPlayHardButton_PhoneStar = 13,
            CarPlayHardButton_PhonePound = 14,
            CarPlayHardButton_ACHome = 15,
            CarPlayHardButton_ACBack = 16,
            CarPlayHardButton_Play = 17,
            CarPlayHardButton_Pause = 18,
            CarPlayHardButton_PlayPause = 19,
            CarPlayHardButton_NextTrack = 20,
            CarPlayHardButton_PrevTrack = 21,
            CarPlayHardButton_Siri = 22
        };
        
        enCarPlayHardButtonType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::CarPlayHardButton_PhoneAccept)) {}
        enCarPlayHardButtonType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::CarPlayHardButton_PhoneAccept):
                case static_cast<int32_t>(Literal::CarPlayHardButton_PhoneReject):
                case static_cast<int32_t>(Literal::CarPlayHardButton_PhoneFlash):
                case static_cast<int32_t>(Literal::CarPlayHardButton_PhoneKey0):
                case static_cast<int32_t>(Literal::CarPlayHardButton_PhoneKey1):
                case static_cast<int32_t>(Literal::CarPlayHardButton_PhoneKey2):
                case static_cast<int32_t>(Literal::CarPlayHardButton_PhoneKey3):
                case static_cast<int32_t>(Literal::CarPlayHardButton_PhoneKey4):
                case static_cast<int32_t>(Literal::CarPlayHardButton_PhoneKey5):
                case static_cast<int32_t>(Literal::CarPlayHardButton_PhoneKey6):
                case static_cast<int32_t>(Literal::CarPlayHardButton_PhoneKey7):
                case static_cast<int32_t>(Literal::CarPlayHardButton_PhoneKey8):
                case static_cast<int32_t>(Literal::CarPlayHardButton_PhoneKey9):
                case static_cast<int32_t>(Literal::CarPlayHardButton_PhoneStar):
                case static_cast<int32_t>(Literal::CarPlayHardButton_PhonePound):
                case static_cast<int32_t>(Literal::CarPlayHardButton_ACHome):
                case static_cast<int32_t>(Literal::CarPlayHardButton_ACBack):
                case static_cast<int32_t>(Literal::CarPlayHardButton_Play):
                case static_cast<int32_t>(Literal::CarPlayHardButton_Pause):
                case static_cast<int32_t>(Literal::CarPlayHardButton_PlayPause):
                case static_cast<int32_t>(Literal::CarPlayHardButton_NextTrack):
                case static_cast<int32_t>(Literal::CarPlayHardButton_PrevTrack):
                case static_cast<int32_t>(Literal::CarPlayHardButton_Siri):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enCarPlayHardButtonType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enCarPlayHardButtonType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enCarPlayHardButtonType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enCarPlayHardButtonType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enCarPlayHardButtonType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enCarPlayHardButtonType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
};

const char* CarPlayDomainSvc::getInterface() {
    return ("com.harman.connectivity.CarPlayDomainSvc");
}

CommonAPI::Version CarPlayDomainSvc::getInterfaceVersion() {
    return CommonAPI::Version(3, 0);
}


} // namespace connectivity
} // namespace harman
} // namespace com
} // namespace v3

namespace CommonAPI {
}


// Compatibility
namespace v3_0 = v3;

#endif // V3_COM_HARMAN_CONNECTIVITY_CAR_PLAY_DOMAIN_SVC_HPP_
