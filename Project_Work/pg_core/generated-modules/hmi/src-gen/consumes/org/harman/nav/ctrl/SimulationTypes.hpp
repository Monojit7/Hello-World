/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef ORG_HARMAN_NAV_CTRL_Simulation_Types_HPP_
#define ORG_HARMAN_NAV_CTRL_Simulation_Types_HPP_


#include <org/harman/nav/ctrl/CommonTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace harman {
namespace nav {
namespace ctrl {

struct SimulationTypes {
    
    struct SimulationStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            SIMULATION_STATUS_NO_SIMULATION = 1,
            SIMULATION_STATUS_RUNNING = 2,
            SIMULATION_STATUS_PAUSED = 3,
            SIMULATION_STATUS_FIXED_POSITION = 4
        };
        
        SimulationStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        SimulationStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        SimulationStatus &operator=(const ::org::harman::nav::ctrl::CommonTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::SIMULATION_STATUS_NO_SIMULATION):
                case static_cast<int32_t>(Literal::SIMULATION_STATUS_RUNNING):
                case static_cast<int32_t>(Literal::SIMULATION_STATUS_PAUSED):
                case static_cast<int32_t>(Literal::SIMULATION_STATUS_FIXED_POSITION):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SimulationStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SimulationStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SimulationStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SimulationStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SimulationStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SimulationStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.harman.nav.ctrl.SimulationTypes";
    return typeCollectionName;
}


}; // struct SimulationTypes

} // namespace ctrl
} // namespace nav
} // namespace harman
} // namespace org

namespace CommonAPI {
}


namespace std {
    //Hash for SimulationStatus
    template<>
    struct hash<::org::harman::nav::ctrl::SimulationTypes::SimulationStatus> {
        inline size_t operator()(const ::org::harman::nav::ctrl::SimulationTypes::SimulationStatus& simulationStatus) const {
            return static_cast<int32_t>(simulationStatus);
        }
    };
}



#endif // ORG_HARMAN_NAV_CTRL_Simulation_Types_HPP_
