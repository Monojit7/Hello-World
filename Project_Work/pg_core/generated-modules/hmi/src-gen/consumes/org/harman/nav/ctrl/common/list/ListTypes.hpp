/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef ORG_HARMAN_NAV_CTRL_COMMON_LIST_List_Types_HPP_
#define ORG_HARMAN_NAV_CTRL_COMMON_LIST_List_Types_HPP_


#include <org/harman/nav/ctrl/CommonTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace harman {
namespace nav {
namespace ctrl {
namespace common {
namespace list {

struct ListTypes {
    
    struct ListError : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            INVALID_LIST_ID = 1,
            INVALID_VIEW = 2,
            INVALID_PARAMETER = 3,
            SIZE_LIMIT_EXCEEDED = 4,
            OUT_OF_RESSOURCES = 5,
            OUT_OF_RANGE_POSITION = 6,
            POLICY_DENIED = 7
        };
        
        ListError() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        ListError(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        ListError &operator=(const ::org::harman::nav::ctrl::CommonTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::INVALID_LIST_ID):
                case static_cast<int32_t>(Literal::INVALID_VIEW):
                case static_cast<int32_t>(Literal::INVALID_PARAMETER):
                case static_cast<int32_t>(Literal::SIZE_LIMIT_EXCEEDED):
                case static_cast<int32_t>(Literal::OUT_OF_RESSOURCES):
                case static_cast<int32_t>(Literal::OUT_OF_RANGE_POSITION):
                case static_cast<int32_t>(Literal::POLICY_DENIED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ListError &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ListError &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ListError &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ListError &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ListError &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ListError &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: The ListId is the name of a list.
     */
    struct ListId : CommonAPI::Struct<std::string> {
    	
    	ListId() {
    	}
    	ListId(const std::string &_listname)
    	{
    		std::get<0>(values_) = _listname;
    	}
    	inline const std::string &getListname() const { return std::get<0>(values_); }
    	inline void setListname(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const ListId& _other) const {
                return (getListname() == _other.getListname());
        }
    	inline bool operator!=(const ListId &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct SortOption : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            TYPE = 1,
            NAME = 2,
            TIME = 3,
            CUSTOM_SORT_1 = 4,
            CUSTOM_SORT_2 = 5,
            CUSTOM_SORT_3 = 6,
            CUSTOM_SORT_4 = 7,
            CUSTOM_SORT_5 = 8,
            CUSTOM_SORT_6 = 9,
            CUSTOM_SORT_7 = 10,
            CUSTOM_SORT_8 = 11
        };
        
        SortOption() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        SortOption(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        SortOption &operator=(const ::org::harman::nav::ctrl::CommonTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::TYPE):
                case static_cast<int32_t>(Literal::NAME):
                case static_cast<int32_t>(Literal::TIME):
                case static_cast<int32_t>(Literal::CUSTOM_SORT_1):
                case static_cast<int32_t>(Literal::CUSTOM_SORT_2):
                case static_cast<int32_t>(Literal::CUSTOM_SORT_3):
                case static_cast<int32_t>(Literal::CUSTOM_SORT_4):
                case static_cast<int32_t>(Literal::CUSTOM_SORT_5):
                case static_cast<int32_t>(Literal::CUSTOM_SORT_6):
                case static_cast<int32_t>(Literal::CUSTOM_SORT_7):
                case static_cast<int32_t>(Literal::CUSTOM_SORT_8):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SortOption &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SortOption &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SortOption &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SortOption &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SortOption &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SortOption &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ModificationPolicy : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            E_POLLICY_ADD = 0,
            E_POLICY_REMOVE = 1,
            E_POLICY_REMOVE_ALL = 2
        };
        
        ModificationPolicy() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::E_POLLICY_ADD)) {}
        ModificationPolicy(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::E_POLLICY_ADD):
                case static_cast<int32_t>(Literal::E_POLICY_REMOVE):
                case static_cast<int32_t>(Literal::E_POLICY_REMOVE_ALL):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ModificationPolicy &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ModificationPolicy &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ModificationPolicy &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ModificationPolicy &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ModificationPolicy &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ModificationPolicy &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Absolute position within the whole list
     */
    typedef uint16_t ListKey;
    /**
     * description: total size of the whole list
     */
    typedef uint16_t ListSize;
    /**
     * description: size related to the created view only
     */
    typedef ListSize ViewSize;
    /**
     * description: the relative view anchor based on position ListKey
     */
    typedef uint16_t AnchorOffset;
    /**
     * description: every create view is assigned to one view id
     */
    typedef uint16_t ViewId;
    /**
     * description: relative position within the view window only starting from the first view
     *   element
     */
    typedef uint16_t ViewKey;
    /**
     * description: description of how the snapshot of a view was positioned when querying the data
     *   contained in a view
     */
    struct ViewSnapshotPosition : CommonAPI::Struct<ListSize, ListKey, AnchorOffset> {
    	
    	ViewSnapshotPosition() {
    	}
    	ViewSnapshotPosition(const ListSize &_listSize, const ListKey &_listKey, const AnchorOffset &_anchorOffset)
    	{
    		std::get<0>(values_) = _listSize;
    		std::get<1>(values_) = _listKey;
    		std::get<2>(values_) = _anchorOffset;
    	}
    	/**
    	 * description: size of the underlying list
    	 */
    	inline const ListSize &getListSize() const { return std::get<0>(values_); }
    	inline void setListSize(const ListSize &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: key of the first element of the view snapshot
    	 */
    	inline const ListKey &getListKey() const { return std::get<1>(values_); }
    	inline void setListKey(const ListKey &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: offset of the anchor element within the view snapshot
    	 */
    	inline const AnchorOffset &getAnchorOffset() const { return std::get<2>(values_); }
    	inline void setAnchorOffset(const AnchorOffset &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const ViewSnapshotPosition& _other) const {
                return (getListSize() == _other.getListSize() && getListKey() == _other.getListKey() && getAnchorOffset() == _other.getAnchorOffset());
        }
    	inline bool operator!=(const ViewSnapshotPosition &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.harman.nav.ctrl.common.list.ListTypes";
    return typeCollectionName;
}


}; // struct ListTypes

} // namespace list
} // namespace common
} // namespace ctrl
} // namespace nav
} // namespace harman
} // namespace org

namespace CommonAPI {
}


namespace std {
    //Hash for ListError
    template<>
    struct hash<::org::harman::nav::ctrl::common::list::ListTypes::ListError> {
        inline size_t operator()(const ::org::harman::nav::ctrl::common::list::ListTypes::ListError& listError) const {
            return static_cast<int32_t>(listError);
        }
    };
    //Hash for SortOption
    template<>
    struct hash<::org::harman::nav::ctrl::common::list::ListTypes::SortOption> {
        inline size_t operator()(const ::org::harman::nav::ctrl::common::list::ListTypes::SortOption& sortOption) const {
            return static_cast<int32_t>(sortOption);
        }
    };
    //Hash for ModificationPolicy
    template<>
    struct hash<::org::harman::nav::ctrl::common::list::ListTypes::ModificationPolicy> {
        inline size_t operator()(const ::org::harman::nav::ctrl::common::list::ListTypes::ModificationPolicy& modificationPolicy) const {
            return static_cast<int32_t>(modificationPolicy);
        }
    };
}



#endif // ORG_HARMAN_NAV_CTRL_COMMON_LIST_List_Types_HPP_
