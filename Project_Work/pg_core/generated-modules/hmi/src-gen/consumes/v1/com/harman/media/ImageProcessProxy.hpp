/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * description: ImageProcess provide image scale interfaces.
 */
#ifndef V1_COM_HARMAN_MEDIA_Image_Process_PROXY_HPP_
#define V1_COM_HARMAN_MEDIA_Image_Process_PROXY_HPP_

#include <v1/com/harman/media/ImageProcessProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace media {

template <typename ... _AttributeExtensions>
class ImageProcessProxy
    : virtual public ImageProcess, 
      virtual public ImageProcessProxyBase,
      virtual public _AttributeExtensions... {
public:
    ImageProcessProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~ImageProcessProxy();

    typedef ImageProcess InterfaceType;




    /**
     * description: scale images to specified resolution(width x height),write output files into
     *   tmpfs.
    	      If width x height not honoring original aspect ratio,outWidth x
     *   OutHeight is the real resolution
    	      for output file.
     * author: daoyong,tang
     * Calls scaleImage with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void scaleImage(const std::string &_inputfile, const uint32_t &_width, const uint32_t &_height, CommonAPI::CallStatus &_internalCallStatus, std::string &_outputfile, uint32_t &_outWidth, uint32_t &_OutHeight, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls scaleImage with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> scaleImageAsync(const std::string &_inputfile, const uint32_t &_width, const uint32_t &_height, ScaleImageAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<ImageProcessProxyBase> delegate_;
};

typedef ImageProcessProxy<> ImageProcessProxyDefault;


//
// ImageProcessProxy Implementation
//
template <typename ... _AttributeExtensions>
ImageProcessProxy<_AttributeExtensions...>::ImageProcessProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<ImageProcessProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<ImageProcessProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
ImageProcessProxy<_AttributeExtensions...>::~ImageProcessProxy() {
}

/**
 * description: scale images to specified resolution(width x height),write output files into
 *   tmpfs.
	      If width x height not honoring original aspect ratio,outWidth x
 *   OutHeight is the real resolution
	      for output file.
 * author: daoyong,tang
 */
template <typename ... _AttributeExtensions>
void ImageProcessProxy<_AttributeExtensions...>::scaleImage(const std::string &_inputfile, const uint32_t &_width, const uint32_t &_height, CommonAPI::CallStatus &_internalCallStatus, std::string &_outputfile, uint32_t &_outWidth, uint32_t &_OutHeight, const CommonAPI::CallInfo *_info) {
    delegate_->scaleImage(_inputfile, _width, _height, _internalCallStatus, _outputfile, _outWidth, _OutHeight, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ImageProcessProxy<_AttributeExtensions...>::scaleImageAsync(const std::string &_inputfile, const uint32_t &_width, const uint32_t &_height, ScaleImageAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->scaleImageAsync(_inputfile, _width, _height, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &ImageProcessProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool ImageProcessProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool ImageProcessProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& ImageProcessProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& ImageProcessProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace media
} // namespace harman
} // namespace com
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_MEDIA_Image_Process_PROXY_HPP_
