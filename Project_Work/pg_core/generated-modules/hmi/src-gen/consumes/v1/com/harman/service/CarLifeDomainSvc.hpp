/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V1_COM_HARMAN_SERVICE_CAR_LIFE_DOMAIN_SVC_HPP_
#define V1_COM_HARMAN_SERVICE_CAR_LIFE_DOMAIN_SVC_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace service {

class CarLifeDomainSvc {
public:
    virtual ~CarLifeDomainSvc() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    
    struct enSessionStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SESSION_DEVICE_CONNECTED = 0,
            SESSION_DEVICE_DISCONNECTED = 1,
            SESSION_APP_ACTIVE = 2,
            SESSION_APP_INACTIVE = 3,
            SESSION_APP_BACKGROUND = 4,
            SESSION_APP_FOREGROUND = 5,
            SESSION_ERROR = 6
        };
        
        enSessionStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SESSION_DEVICE_CONNECTED)) {}
        enSessionStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SESSION_DEVICE_CONNECTED):
                case static_cast<int32_t>(Literal::SESSION_DEVICE_DISCONNECTED):
                case static_cast<int32_t>(Literal::SESSION_APP_ACTIVE):
                case static_cast<int32_t>(Literal::SESSION_APP_INACTIVE):
                case static_cast<int32_t>(Literal::SESSION_APP_BACKGROUND):
                case static_cast<int32_t>(Literal::SESSION_APP_FOREGROUND):
                case static_cast<int32_t>(Literal::SESSION_ERROR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enSessionStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enSessionStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enSessionStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enSessionStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enSessionStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enSessionStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enCarLifeHardButtonType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            CarLifeHardButton_VR = 0
        };
        
        enCarLifeHardButtonType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::CarLifeHardButton_VR)) {}
        enCarLifeHardButtonType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::CarLifeHardButton_VR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enCarLifeHardButtonType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enCarLifeHardButtonType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enCarLifeHardButtonType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enCarLifeHardButtonType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enCarLifeHardButtonType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enCarLifeHardButtonType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
};

const char* CarLifeDomainSvc::getInterface() {
    return ("com.harman.service.CarLifeDomainSvc");
}

CommonAPI::Version CarLifeDomainSvc::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}


} // namespace service
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_SERVICE_CAR_LIFE_DOMAIN_SVC_HPP_
