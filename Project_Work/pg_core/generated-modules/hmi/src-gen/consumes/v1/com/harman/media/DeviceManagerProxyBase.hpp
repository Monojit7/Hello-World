/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * description: Device Manager interfaces provide device detection control
	and get device
 *   informations.
 * author: ydou
 */
#ifndef V1_COM_HARMAN_MEDIA_Device_Manager_PROXY_BASE_HPP_
#define V1_COM_HARMAN_MEDIA_Device_Manager_PROXY_BASE_HPP_

#include <v1/com/harman/media/DeviceManager.hpp>


#include <v1/com/harman/media/BaseType.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace media {

class DeviceManagerProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::v1::com::harman::media::BaseType::tMediumInfo
    > OnMediumChangedEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::media::BaseType::tBaseError&)> StartDeviceDetectionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::media::BaseType::tBaseError&, const ::v1::com::harman::media::BaseType::tMediumInfoList&)> GetDevicesAsyncCallback;


    /**
     * description: Emit an event to Top when insert or remove a device.
     * author: ydou
     */
    virtual OnMediumChangedEvent& getOnMediumChangedEvent() = 0;

    /**
     * description: Trigger the Device Manager to init & work for device detection.
     * author: ydou
     */
    virtual void startDeviceDetection(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startDeviceDetectionAsync(StartDeviceDetectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Get the current connecting devices to Top with the detail information.
     * author: ydou
     */
    virtual void getDevices(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::media::BaseType::tBaseError &_error, ::v1::com::harman::media::BaseType::tMediumInfoList &_mediumList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getDevicesAsync(GetDevicesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace media
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_MEDIA_Device_Manager_PROXY_BASE_HPP_
