/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V1_COM_HARMAN_SWDL_Swdl_Types_HPP_
#define V1_COM_HARMAN_SWDL_Swdl_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace swdl {

struct SwdlTypes {
    
    struct eUpdateAvailability : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            UPDATE_AVAILABLE = 0,
            SERVER_SESSION_ERROR = 1,
            NO_CONNECTION_AVAILABLE = 2,
            NW_NOT_IN_UPDATABLE_MODE = 3,
            NO_UPDATE_AVAILABLE = 4,
            UPDATE_ALREADY_IN_PROGRESS = 5
        };
        
        eUpdateAvailability() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::UPDATE_AVAILABLE)) {}
        eUpdateAvailability(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::UPDATE_AVAILABLE):
                case static_cast<int32_t>(Literal::SERVER_SESSION_ERROR):
                case static_cast<int32_t>(Literal::NO_CONNECTION_AVAILABLE):
                case static_cast<int32_t>(Literal::NW_NOT_IN_UPDATABLE_MODE):
                case static_cast<int32_t>(Literal::NO_UPDATE_AVAILABLE):
                case static_cast<int32_t>(Literal::UPDATE_ALREADY_IN_PROGRESS):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eUpdateAvailability &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eUpdateAvailability &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eUpdateAvailability &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eUpdateAvailability &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eUpdateAvailability &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eUpdateAvailability &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Update package details.
     */
    struct tPackageDetails : CommonAPI::Struct<std::string, uint32_t> {
    	
    	tPackageDetails() {
    	}
    	tPackageDetails(const std::string &_PackageName, const uint32_t &_PackageSize)
    	{
    		std::get<0>(values_) = _PackageName;
    		std::get<1>(values_) = _PackageSize;
    	}
    	inline const std::string &getPackageName() const { return std::get<0>(values_); }
    	inline void setPackageName(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const uint32_t &getPackageSize() const { return std::get<1>(values_); }
    	inline void setPackageSize(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const tPackageDetails& _other) const {
                return (getPackageName() == _other.getPackageName() && getPackageSize() == _other.getPackageSize());
        }
    	inline bool operator!=(const tPackageDetails &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Result of check for Update
     */
    struct tUpdateCheckResult : CommonAPI::Struct<eUpdateAvailability, tPackageDetails> {
    	
    	tUpdateCheckResult() {
    	}
    	tUpdateCheckResult(const eUpdateAvailability &_updateAvailability, const tPackageDetails &_packageDetails)
    	{
    		std::get<0>(values_) = _updateAvailability;
    		std::get<1>(values_) = _packageDetails;
    	}
    	inline const eUpdateAvailability &getUpdateAvailability() const { return std::get<0>(values_); }
    	inline void setUpdateAvailability(const eUpdateAvailability &_value) { std::get<0>(values_) = _value; }
    	inline const tPackageDetails &getPackageDetails() const { return std::get<1>(values_); }
    	inline void setPackageDetails(const tPackageDetails &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const tUpdateCheckResult& _other) const {
                return (getUpdateAvailability() == _other.getUpdateAvailability() && getPackageDetails() == _other.getPackageDetails());
        }
    	inline bool operator!=(const tUpdateCheckResult &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct eRequestDownload : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            START_DOWNLOAD = 0,
            DEFER_DOWNLOAD = 1,
            DECLINE_DOWNLOAD = 2
        };
        
        eRequestDownload() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::START_DOWNLOAD)) {}
        eRequestDownload(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::START_DOWNLOAD):
                case static_cast<int32_t>(Literal::DEFER_DOWNLOAD):
                case static_cast<int32_t>(Literal::DECLINE_DOWNLOAD):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eRequestDownload &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eRequestDownload &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eRequestDownload &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eRequestDownload &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eRequestDownload &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eRequestDownload &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eInstallPackage : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            START_INSTALLATION = 0,
            DEFER_INSTALLATION = 1,
            DECLINE_INSTALLATION = 2
        };
        
        eInstallPackage() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::START_INSTALLATION)) {}
        eInstallPackage(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::START_INSTALLATION):
                case static_cast<int32_t>(Literal::DEFER_INSTALLATION):
                case static_cast<int32_t>(Literal::DECLINE_INSTALLATION):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eInstallPackage &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eInstallPackage &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eInstallPackage &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eInstallPackage &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eInstallPackage &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eInstallPackage &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eSwdlError : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            REQ_OK = 0,
            REQ_FAILED = 1,
            REQ_UNKNOWN = 2,
            REQ_UNSUPPORTED = 3,
            REQ_BUSY = 4
        };
        
        eSwdlError() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::REQ_OK)) {}
        eSwdlError(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::REQ_OK):
                case static_cast<int32_t>(Literal::REQ_FAILED):
                case static_cast<int32_t>(Literal::REQ_UNKNOWN):
                case static_cast<int32_t>(Literal::REQ_UNSUPPORTED):
                case static_cast<int32_t>(Literal::REQ_BUSY):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eSwdlError &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eSwdlError &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eSwdlError &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eSwdlError &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eSwdlError &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eSwdlError &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eDownloadState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DOWNLOAD_COMPLETE = 0,
            DOWNLOAD_FAILED = 1
        };
        
        eDownloadState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DOWNLOAD_COMPLETE)) {}
        eDownloadState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DOWNLOAD_COMPLETE):
                case static_cast<int32_t>(Literal::DOWNLOAD_FAILED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eDownloadState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eDownloadState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eDownloadState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eDownloadState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eDownloadState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eDownloadState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Software Package Download status
     */
    struct tDownloadStatus : CommonAPI::Struct<eDownloadState, std::string> {
    	
    	tDownloadStatus() {
    	}
    	tDownloadStatus(const eDownloadState &_downloadState, const std::string &_errorInfo)
    	{
    		std::get<0>(values_) = _downloadState;
    		std::get<1>(values_) = _errorInfo;
    	}
    	inline const eDownloadState &getDownloadState() const { return std::get<0>(values_); }
    	inline void setDownloadState(const eDownloadState &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getErrorInfo() const { return std::get<1>(values_); }
    	inline void setErrorInfo(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const tDownloadStatus& _other) const {
                return (getDownloadState() == _other.getDownloadState() && getErrorInfo() == _other.getErrorInfo());
        }
    	inline bool operator!=(const tDownloadStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.swdl.SwdlTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct SwdlTypes

} // namespace swdl
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for eUpdateAvailability
    template<>
    struct hash<::v1::com::harman::swdl::SwdlTypes::eUpdateAvailability> {
        inline size_t operator()(const ::v1::com::harman::swdl::SwdlTypes::eUpdateAvailability& eUpdateAvailability) const {
            return static_cast<int32_t>(eUpdateAvailability);
        }
    };
    //Hash for eRequestDownload
    template<>
    struct hash<::v1::com::harman::swdl::SwdlTypes::eRequestDownload> {
        inline size_t operator()(const ::v1::com::harman::swdl::SwdlTypes::eRequestDownload& eRequestDownload) const {
            return static_cast<int32_t>(eRequestDownload);
        }
    };
    //Hash for eInstallPackage
    template<>
    struct hash<::v1::com::harman::swdl::SwdlTypes::eInstallPackage> {
        inline size_t operator()(const ::v1::com::harman::swdl::SwdlTypes::eInstallPackage& eInstallPackage) const {
            return static_cast<int32_t>(eInstallPackage);
        }
    };
    //Hash for eSwdlError
    template<>
    struct hash<::v1::com::harman::swdl::SwdlTypes::eSwdlError> {
        inline size_t operator()(const ::v1::com::harman::swdl::SwdlTypes::eSwdlError& eSwdlError) const {
            return static_cast<int32_t>(eSwdlError);
        }
    };
    //Hash for eDownloadState
    template<>
    struct hash<::v1::com::harman::swdl::SwdlTypes::eDownloadState> {
        inline size_t operator()(const ::v1::com::harman::swdl::SwdlTypes::eDownloadState& eDownloadState) const {
            return static_cast<int32_t>(eDownloadState);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_SWDL_Swdl_Types_HPP_
