/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * description: This is a Common API DBUS interface Orinoco 2.0 that can used to Software
 *   Download from other interested modules
 * author: SThekkumbada
 */
#ifndef V1_COM_HARMAN_SWDL_Software_Download_PROXY_BASE_HPP_
#define V1_COM_HARMAN_SWDL_Software_Download_PROXY_BASE_HPP_

#include <v1/com/harman/swdl/SoftwareDownload.hpp>


#include <v1/com/harman/swdl/SwdlTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace swdl {

class SoftwareDownloadProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableAttribute<uint32_t> DownloadProgressAttribute;
    typedef CommonAPI::Event<
        ::v1::com::harman::swdl::SwdlTypes::tPackageDetails
    > SoftwareAvailableForDownloadEvent;
    typedef CommonAPI::Event<
    > SoftwareAvailableForInstallEvent;
    typedef CommonAPI::Event<
        ::v1::com::harman::swdl::SwdlTypes::tDownloadStatus
    > SoftwareDownloadStatusEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::swdl::SwdlTypes::eSwdlError&, const ::v1::com::harman::swdl::SwdlTypes::tUpdateCheckResult&)> CheckForUpdatesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::swdl::SwdlTypes::eSwdlError&)> StartSoftwareDownloadAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::swdl::SwdlTypes::eSwdlError&)> StartInstallationAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::swdl::SwdlTypes::eSwdlError&)> CancelDownloadAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::swdl::SwdlTypes::eSwdlError&)> SetAutomaticCheckAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::swdl::SwdlTypes::eSwdlError&, const bool&, const uint32_t&)> GetAutomaticCheckStatusAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::swdl::SwdlTypes::eSwdlError&)> SetAutomaticDownloadAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::swdl::SwdlTypes::eSwdlError&, const bool&, const uint32_t&)> GetAutomaticDownloadStatusAsyncCallback;

    /**
     * description: Software download package download progress info.
     */
    virtual DownloadProgressAttribute& getDownloadProgressAttribute() = 0;

    /**
     * description: Broadcast signals when new SoftwareUpdate image available for download.
     */
    virtual SoftwareAvailableForDownloadEvent& getSoftwareAvailableForDownloadEvent() = 0;
    /**
     * description: Broadcast signals when new SoftwareUpdate is downloaded and available for
     *   install.
     */
    virtual SoftwareAvailableForInstallEvent& getSoftwareAvailableForInstallEvent() = 0;
    /**
     * description: Broadcast signals for indication of download complete or failed.
     */
    virtual SoftwareDownloadStatusEvent& getSoftwareDownloadStatusEvent() = 0;

    /**
     * description: To check for any software updates are available for download and install.
     *   
    					   Software update service checks in server for any update available.
     */
    virtual void CheckForUpdates(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, ::v1::com::harman::swdl::SwdlTypes::tUpdateCheckResult &_checkResult, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> CheckForUpdatesAsync(CheckForUpdatesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: To start the download of newly available software. Download can be accepted,
     *   deferred and declined using this method
     */
    virtual void StartSoftwareDownload(const ::v1::com::harman::swdl::SwdlTypes::eRequestDownload &_requestDownload, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> StartSoftwareDownloadAsync(const ::v1::com::harman::swdl::SwdlTypes::eRequestDownload &_requestDownload, StartSoftwareDownloadAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: To start the installation of newly available software. Download can be
     *   accepted, deferred and declined using this method.
    					   The installation
     *   happens in special software update mode.
     */
    virtual void StartInstallation(const ::v1::com::harman::swdl::SwdlTypes::eInstallPackage &_installPackage, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> StartInstallationAsync(const ::v1::com::harman::swdl::SwdlTypes::eInstallPackage &_installPackage, StartInstallationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: To cancel the download which is already started
     */
    virtual void CancelDownload(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> CancelDownloadAsync(CancelDownloadAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: To enable disable automatic download. true for enabling automatic download and
     *   false for disabling. 
    							In case of enabling automatic check, checking
     *   interval in minutes can be passed
     */
    virtual void SetAutomaticCheck(const bool &_enableAutoCheck, const uint32_t &_checkInterval, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetAutomaticCheckAsync(const bool &_enableAutoCheck, const uint32_t &_checkInterval, SetAutomaticCheckAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: To get the enable/disable status of automatich check. If automtic check is
     *   enabled checkInterval 
    							will checking interval in minutes otherwise
     *   checkInterval is not valid
     */
    virtual void GetAutomaticCheckStatus(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, bool &_enableAutoCheck, uint32_t &_checkInterval, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetAutomaticCheckStatusAsync(GetAutomaticCheckStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: To enable disable automatic download. true for enabling automatic download and
     *   false for disabling. 
    							In case of enabling automatic download, the
     *   automatic download limet autoDownloadLimit can be passed
     */
    virtual void SetAutomaticDownload(const bool &_enableAutoCheck, const uint32_t &_autoDownloadLimit, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetAutomaticDownloadAsync(const bool &_enableAutoCheck, const uint32_t &_autoDownloadLimit, SetAutomaticDownloadAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: To get the enable/disable status of automatich download. If automtic download
     *   is enabled the autoDownloadLimit 
    							will give the value of automatic
     *   download limit
     */
    virtual void GetAutomaticDownloadStatus(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, bool &_enableAutoCheck, uint32_t &_autoDownloadLimit, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetAutomaticDownloadStatusAsync(GetAutomaticDownloadStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace swdl
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_SWDL_Software_Download_PROXY_BASE_HPP_
