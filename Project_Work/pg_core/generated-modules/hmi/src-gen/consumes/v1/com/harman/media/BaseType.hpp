/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V1_COM_HARMAN_MEDIA_Base_Type_HPP_
#define V1_COM_HARMAN_MEDIA_Base_Type_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace media {

struct BaseType {
    
    struct tMediumType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            MT_UNKNOWN = 0,
            MT_HDD = 1,
            MT_DISCSINGLE = 2,
            MT_DISCCHANGER = 3,
            MT_UMASS = 4,
            MT_iAP1 = 5,
            MT_iAP2 = 6,
            MT_MTP = 7,
            MT_BLUETOOTH = 8,
            MT_CARPLAY = 9,
            MT_GAL = 10
        };
        
        tMediumType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::MT_UNKNOWN)) {}
        tMediumType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::MT_UNKNOWN):
                case static_cast<int32_t>(Literal::MT_HDD):
                case static_cast<int32_t>(Literal::MT_DISCSINGLE):
                case static_cast<int32_t>(Literal::MT_DISCCHANGER):
                case static_cast<int32_t>(Literal::MT_UMASS):
                case static_cast<int32_t>(Literal::MT_iAP1):
                case static_cast<int32_t>(Literal::MT_iAP2):
                case static_cast<int32_t>(Literal::MT_MTP):
                case static_cast<int32_t>(Literal::MT_BLUETOOTH):
                case static_cast<int32_t>(Literal::MT_CARPLAY):
                case static_cast<int32_t>(Literal::MT_GAL):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const tMediumType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const tMediumType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const tMediumType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const tMediumType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const tMediumType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const tMediumType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct tContentType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            CT_UNKNOWN = 0,
            CT_FS = 1,
            CT_CDDA = 2,
            CT_DVD = 3,
            CT_BD = 4,
            CT_STREAM = 5
        };
        
        tContentType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::CT_UNKNOWN)) {}
        tContentType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::CT_UNKNOWN):
                case static_cast<int32_t>(Literal::CT_FS):
                case static_cast<int32_t>(Literal::CT_CDDA):
                case static_cast<int32_t>(Literal::CT_DVD):
                case static_cast<int32_t>(Literal::CT_BD):
                case static_cast<int32_t>(Literal::CT_STREAM):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const tContentType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const tContentType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const tContentType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const tContentType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const tContentType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const tContentType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct tMediumState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            MS_UNKNOWN = 0,
            MS_UNAVAILABLE = 1,
            MS_AVAILABLE = 2,
            MS_ACTIVE = 3,
            MS_READY_TO_PLAY = 4
        };
        
        tMediumState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::MS_UNKNOWN)) {}
        tMediumState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::MS_UNKNOWN):
                case static_cast<int32_t>(Literal::MS_UNAVAILABLE):
                case static_cast<int32_t>(Literal::MS_AVAILABLE):
                case static_cast<int32_t>(Literal::MS_ACTIVE):
                case static_cast<int32_t>(Literal::MS_READY_TO_PLAY):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const tMediumState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const tMediumState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const tMediumState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const tMediumState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const tMediumState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const tMediumState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Medium information.
     */
    struct tMediumInfo : CommonAPI::Struct<uint64_t, std::string, tMediumType, tContentType, tMediumState, std::string, std::string, std::string> {
    	
    	tMediumInfo() {
    	}
    	tMediumInfo(const uint64_t &_mMediumId, const std::string &_mMediumName, const tMediumType &_mMediumType, const tContentType &_mContentType, const tMediumState &_mMediumState, const std::string &_mMountPath, const std::string &_mDeviceUri, const std::string &_mDeviceBrowsePath)
    	{
    		std::get<0>(values_) = _mMediumId;
    		std::get<1>(values_) = _mMediumName;
    		std::get<2>(values_) = _mMediumType;
    		std::get<3>(values_) = _mContentType;
    		std::get<4>(values_) = _mMediumState;
    		std::get<5>(values_) = _mMountPath;
    		std::get<6>(values_) = _mDeviceUri;
    		std::get<7>(values_) = _mDeviceBrowsePath;
    	}
    	/**
    	 * description: medium id.
    	 */
    	inline const uint64_t &getMMediumId() const { return std::get<0>(values_); }
    	inline void setMMediumId(const uint64_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: medium name.
    	 */
    	inline const std::string &getMMediumName() const { return std::get<1>(values_); }
    	inline void setMMediumName(const std::string &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: medium type.
    	 */
    	inline const tMediumType &getMMediumType() const { return std::get<2>(values_); }
    	inline void setMMediumType(const tMediumType &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: content type.
    	 */
    	inline const tContentType &getMContentType() const { return std::get<3>(values_); }
    	inline void setMContentType(const tContentType &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: medium state.
    	 */
    	inline const tMediumState &getMMediumState() const { return std::get<4>(values_); }
    	inline void setMMediumState(const tMediumState &_value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: mount path.
    	 */
    	inline const std::string &getMMountPath() const { return std::get<5>(values_); }
    	inline void setMMountPath(const std::string &_value) { std::get<5>(values_) = _value; }
    	/**
    	 * description: device uri.
    	 */
    	inline const std::string &getMDeviceUri() const { return std::get<6>(values_); }
    	inline void setMDeviceUri(const std::string &_value) { std::get<6>(values_) = _value; }
    	/**
    	 * description: device browse path.
    	 */
    	inline const std::string &getMDeviceBrowsePath() const { return std::get<7>(values_); }
    	inline void setMDeviceBrowsePath(const std::string &_value) { std::get<7>(values_) = _value; }
    	inline bool operator==(const tMediumInfo& _other) const {
                return (getMMediumId() == _other.getMMediumId() && getMMediumName() == _other.getMMediumName() && getMMediumType() == _other.getMMediumType() && getMContentType() == _other.getMContentType() && getMMediumState() == _other.getMMediumState() && getMMountPath() == _other.getMMountPath() && getMDeviceUri() == _other.getMDeviceUri() && getMDeviceBrowsePath() == _other.getMDeviceBrowsePath());
        }
    	inline bool operator!=(const tMediumInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<BaseType::tMediumInfo> tMediumInfoList;
    
    struct tBaseError : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            S_OK = 0,
            E_UNKNOWN = 1,
            E_UNSUPPORTED = 2,
            E_BUSY = 3,
            E_NOMEM = 4,
            E_INVALIDPARAMATERS = 5,
            E_WRONGSTATE = 6
        };
        
        tBaseError() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::S_OK)) {}
        tBaseError(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::S_OK):
                case static_cast<int32_t>(Literal::E_UNKNOWN):
                case static_cast<int32_t>(Literal::E_UNSUPPORTED):
                case static_cast<int32_t>(Literal::E_BUSY):
                case static_cast<int32_t>(Literal::E_NOMEM):
                case static_cast<int32_t>(Literal::E_INVALIDPARAMATERS):
                case static_cast<int32_t>(Literal::E_WRONGSTATE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const tBaseError &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const tBaseError &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const tBaseError &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const tBaseError &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const tBaseError &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const tBaseError &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.media.BaseType";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct BaseType

} // namespace media
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for tMediumType
    template<>
    struct hash<::v1::com::harman::media::BaseType::tMediumType> {
        inline size_t operator()(const ::v1::com::harman::media::BaseType::tMediumType& tMediumType) const {
            return static_cast<int32_t>(tMediumType);
        }
    };
    //Hash for tContentType
    template<>
    struct hash<::v1::com::harman::media::BaseType::tContentType> {
        inline size_t operator()(const ::v1::com::harman::media::BaseType::tContentType& tContentType) const {
            return static_cast<int32_t>(tContentType);
        }
    };
    //Hash for tMediumState
    template<>
    struct hash<::v1::com::harman::media::BaseType::tMediumState> {
        inline size_t operator()(const ::v1::com::harman::media::BaseType::tMediumState& tMediumState) const {
            return static_cast<int32_t>(tMediumState);
        }
    };
    //Hash for tBaseError
    template<>
    struct hash<::v1::com::harman::media::BaseType::tBaseError> {
        inline size_t operator()(const ::v1::com::harman::media::BaseType::tBaseError& tBaseError) const {
            return static_cast<int32_t>(tBaseError);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_MEDIA_Base_Type_HPP_
