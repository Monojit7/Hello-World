/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * description: This is a Common API DBUS interface Orinoco 2.0 that can used to Software
 *   Download from other interested modules
 * author: SThekkumbada
 */
#ifndef V1_COM_HARMAN_SWDL_Software_Download_PROXY_HPP_
#define V1_COM_HARMAN_SWDL_Software_Download_PROXY_HPP_

#include <v1/com/harman/swdl/SoftwareDownloadProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace swdl {

template <typename ... _AttributeExtensions>
class SoftwareDownloadProxy
    : virtual public SoftwareDownload, 
      virtual public SoftwareDownloadProxyBase,
      virtual public _AttributeExtensions... {
public:
    SoftwareDownloadProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~SoftwareDownloadProxy();

    typedef SoftwareDownload InterfaceType;


    /**
     * description: Software download package download progress info.
     */
    /**
     * Returns the wrapper class that provides access to the attribute downloadProgress.
     */
    virtual DownloadProgressAttribute& getDownloadProgressAttribute() {
        return delegate_->getDownloadProgressAttribute();
    }

    /**
     * description: Broadcast signals when new SoftwareUpdate image available for download.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast SoftwareAvailableForDownload.
     */
    virtual SoftwareAvailableForDownloadEvent& getSoftwareAvailableForDownloadEvent() {
        return delegate_->getSoftwareAvailableForDownloadEvent();
    }
    /**
     * description: Broadcast signals when new SoftwareUpdate is downloaded and available for
     *   install.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast SoftwareAvailableForInstall.
     */
    virtual SoftwareAvailableForInstallEvent& getSoftwareAvailableForInstallEvent() {
        return delegate_->getSoftwareAvailableForInstallEvent();
    }
    /**
     * description: Broadcast signals for indication of download complete or failed.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast SoftwareDownloadStatus.
     */
    virtual SoftwareDownloadStatusEvent& getSoftwareDownloadStatusEvent() {
        return delegate_->getSoftwareDownloadStatusEvent();
    }

    /**
     * description: To check for any software updates are available for download and install.
     *   
    					   Software update service checks in server for any update available.
     * Calls CheckForUpdates with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void CheckForUpdates(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, ::v1::com::harman::swdl::SwdlTypes::tUpdateCheckResult &_checkResult, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls CheckForUpdates with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> CheckForUpdatesAsync(CheckForUpdatesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: To start the download of newly available software. Download can be accepted,
     *   deferred and declined using this method
     * Calls StartSoftwareDownload with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void StartSoftwareDownload(const ::v1::com::harman::swdl::SwdlTypes::eRequestDownload &_requestDownload, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls StartSoftwareDownload with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> StartSoftwareDownloadAsync(const ::v1::com::harman::swdl::SwdlTypes::eRequestDownload &_requestDownload, StartSoftwareDownloadAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: To start the installation of newly available software. Download can be
     *   accepted, deferred and declined using this method.
    					   The installation
     *   happens in special software update mode.
     * Calls StartInstallation with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void StartInstallation(const ::v1::com::harman::swdl::SwdlTypes::eInstallPackage &_installPackage, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls StartInstallation with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> StartInstallationAsync(const ::v1::com::harman::swdl::SwdlTypes::eInstallPackage &_installPackage, StartInstallationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: To cancel the download which is already started
     * Calls CancelDownload with synchronous semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void CancelDownload(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls CancelDownload with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> CancelDownloadAsync(CancelDownloadAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: To enable disable automatic download. true for enabling automatic download and
     *   false for disabling. 
    							In case of enabling automatic check, checking
     *   interval in minutes can be passed
     * Calls SetAutomaticCheck with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SetAutomaticCheck(const bool &_enableAutoCheck, const uint32_t &_checkInterval, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SetAutomaticCheck with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SetAutomaticCheckAsync(const bool &_enableAutoCheck, const uint32_t &_checkInterval, SetAutomaticCheckAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: To get the enable/disable status of automatich check. If automtic check is
     *   enabled checkInterval 
    							will checking interval in minutes otherwise
     *   checkInterval is not valid
     * Calls GetAutomaticCheckStatus with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetAutomaticCheckStatus(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, bool &_enableAutoCheck, uint32_t &_checkInterval, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetAutomaticCheckStatus with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetAutomaticCheckStatusAsync(GetAutomaticCheckStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: To enable disable automatic download. true for enabling automatic download and
     *   false for disabling. 
    							In case of enabling automatic download, the
     *   automatic download limet autoDownloadLimit can be passed
     * Calls SetAutomaticDownload with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SetAutomaticDownload(const bool &_enableAutoCheck, const uint32_t &_autoDownloadLimit, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SetAutomaticDownload with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SetAutomaticDownloadAsync(const bool &_enableAutoCheck, const uint32_t &_autoDownloadLimit, SetAutomaticDownloadAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: To get the enable/disable status of automatich download. If automtic download
     *   is enabled the autoDownloadLimit 
    							will give the value of automatic
     *   download limit
     * Calls GetAutomaticDownloadStatus with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetAutomaticDownloadStatus(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, bool &_enableAutoCheck, uint32_t &_autoDownloadLimit, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetAutomaticDownloadStatus with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetAutomaticDownloadStatusAsync(GetAutomaticDownloadStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<SoftwareDownloadProxyBase> delegate_;
};

typedef SoftwareDownloadProxy<> SoftwareDownloadProxyDefault;

namespace SoftwareDownloadExtensions {
    /**
     * description: Software download package download progress info.
     */
    template <template <typename > class _ExtensionType>
    class DownloadProgressAttributeExtension {
     public:
        typedef _ExtensionType<SoftwareDownloadProxyBase::DownloadProgressAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<SoftwareDownloadProxyBase::DownloadProgressAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DownloadProgressAttributeExtension() {}
    #endif
    
        DownloadProgressAttributeExtension(SoftwareDownloadProxyBase& proxy): attributeExtension_(proxy.getDownloadProgressAttribute()) {
        }
    
        inline extension_type& getDownloadProgressAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace SoftwareDownloadExtensions

//
// SoftwareDownloadProxy Implementation
//
template <typename ... _AttributeExtensions>
SoftwareDownloadProxy<_AttributeExtensions...>::SoftwareDownloadProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<SoftwareDownloadProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<SoftwareDownloadProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
SoftwareDownloadProxy<_AttributeExtensions...>::~SoftwareDownloadProxy() {
}

/**
 * description: To check for any software updates are available for download and install.
 *   
					   Software update service checks in server for any update available.
 */
template <typename ... _AttributeExtensions>
void SoftwareDownloadProxy<_AttributeExtensions...>::CheckForUpdates(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, ::v1::com::harman::swdl::SwdlTypes::tUpdateCheckResult &_checkResult, const CommonAPI::CallInfo *_info) {
    delegate_->CheckForUpdates(_internalCallStatus, _error, _checkResult, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SoftwareDownloadProxy<_AttributeExtensions...>::CheckForUpdatesAsync(CheckForUpdatesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->CheckForUpdatesAsync(_callback, _info);
}
/**
 * description: To start the download of newly available software. Download can be accepted,
 *   deferred and declined using this method
 */
template <typename ... _AttributeExtensions>
void SoftwareDownloadProxy<_AttributeExtensions...>::StartSoftwareDownload(const ::v1::com::harman::swdl::SwdlTypes::eRequestDownload &_requestDownload, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, const CommonAPI::CallInfo *_info) {
    if (!_requestDownload.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->StartSoftwareDownload(_requestDownload, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SoftwareDownloadProxy<_AttributeExtensions...>::StartSoftwareDownloadAsync(const ::v1::com::harman::swdl::SwdlTypes::eRequestDownload &_requestDownload, StartSoftwareDownloadAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_requestDownload.validate()) {
        ::v1::com::harman::swdl::SwdlTypes::eSwdlError error;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->StartSoftwareDownloadAsync(_requestDownload, _callback, _info);
}
/**
 * description: To start the installation of newly available software. Download can be
 *   accepted, deferred and declined using this method.
					   The installation
 *   happens in special software update mode.
 */
template <typename ... _AttributeExtensions>
void SoftwareDownloadProxy<_AttributeExtensions...>::StartInstallation(const ::v1::com::harman::swdl::SwdlTypes::eInstallPackage &_installPackage, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, const CommonAPI::CallInfo *_info) {
    if (!_installPackage.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->StartInstallation(_installPackage, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SoftwareDownloadProxy<_AttributeExtensions...>::StartInstallationAsync(const ::v1::com::harman::swdl::SwdlTypes::eInstallPackage &_installPackage, StartInstallationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_installPackage.validate()) {
        ::v1::com::harman::swdl::SwdlTypes::eSwdlError error;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->StartInstallationAsync(_installPackage, _callback, _info);
}
/**
 * description: To cancel the download which is already started
 */
template <typename ... _AttributeExtensions>
void SoftwareDownloadProxy<_AttributeExtensions...>::CancelDownload(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, const CommonAPI::CallInfo *_info) {
    delegate_->CancelDownload(_internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SoftwareDownloadProxy<_AttributeExtensions...>::CancelDownloadAsync(CancelDownloadAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->CancelDownloadAsync(_callback, _info);
}
/**
 * description: To enable disable automatic download. true for enabling automatic download and
 *   false for disabling. 
							In case of enabling automatic check, checking
 *   interval in minutes can be passed
 */
template <typename ... _AttributeExtensions>
void SoftwareDownloadProxy<_AttributeExtensions...>::SetAutomaticCheck(const bool &_enableAutoCheck, const uint32_t &_checkInterval, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, const CommonAPI::CallInfo *_info) {
    delegate_->SetAutomaticCheck(_enableAutoCheck, _checkInterval, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SoftwareDownloadProxy<_AttributeExtensions...>::SetAutomaticCheckAsync(const bool &_enableAutoCheck, const uint32_t &_checkInterval, SetAutomaticCheckAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->SetAutomaticCheckAsync(_enableAutoCheck, _checkInterval, _callback, _info);
}
/**
 * description: To get the enable/disable status of automatich check. If automtic check is
 *   enabled checkInterval 
							will checking interval in minutes otherwise
 *   checkInterval is not valid
 */
template <typename ... _AttributeExtensions>
void SoftwareDownloadProxy<_AttributeExtensions...>::GetAutomaticCheckStatus(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, bool &_enableAutoCheck, uint32_t &_checkInterval, const CommonAPI::CallInfo *_info) {
    delegate_->GetAutomaticCheckStatus(_internalCallStatus, _error, _enableAutoCheck, _checkInterval, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SoftwareDownloadProxy<_AttributeExtensions...>::GetAutomaticCheckStatusAsync(GetAutomaticCheckStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetAutomaticCheckStatusAsync(_callback, _info);
}
/**
 * description: To enable disable automatic download. true for enabling automatic download and
 *   false for disabling. 
							In case of enabling automatic download, the
 *   automatic download limet autoDownloadLimit can be passed
 */
template <typename ... _AttributeExtensions>
void SoftwareDownloadProxy<_AttributeExtensions...>::SetAutomaticDownload(const bool &_enableAutoCheck, const uint32_t &_autoDownloadLimit, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, const CommonAPI::CallInfo *_info) {
    delegate_->SetAutomaticDownload(_enableAutoCheck, _autoDownloadLimit, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SoftwareDownloadProxy<_AttributeExtensions...>::SetAutomaticDownloadAsync(const bool &_enableAutoCheck, const uint32_t &_autoDownloadLimit, SetAutomaticDownloadAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->SetAutomaticDownloadAsync(_enableAutoCheck, _autoDownloadLimit, _callback, _info);
}
/**
 * description: To get the enable/disable status of automatich download. If automtic download
 *   is enabled the autoDownloadLimit 
							will give the value of automatic
 *   download limit
 */
template <typename ... _AttributeExtensions>
void SoftwareDownloadProxy<_AttributeExtensions...>::GetAutomaticDownloadStatus(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::swdl::SwdlTypes::eSwdlError &_error, bool &_enableAutoCheck, uint32_t &_autoDownloadLimit, const CommonAPI::CallInfo *_info) {
    delegate_->GetAutomaticDownloadStatus(_internalCallStatus, _error, _enableAutoCheck, _autoDownloadLimit, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SoftwareDownloadProxy<_AttributeExtensions...>::GetAutomaticDownloadStatusAsync(GetAutomaticDownloadStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetAutomaticDownloadStatusAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &SoftwareDownloadProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool SoftwareDownloadProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool SoftwareDownloadProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& SoftwareDownloadProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& SoftwareDownloadProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace swdl
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v1::com::harman::swdl::SoftwareDownloadProxy,
    _AttributeExtension> {
    typedef typename ::v1::com::harman::swdl::SoftwareDownloadProxy<
            ::v1::com::harman::swdl::SoftwareDownloadExtensions::DownloadProgressAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_SWDL_Software_Download_PROXY_HPP_
