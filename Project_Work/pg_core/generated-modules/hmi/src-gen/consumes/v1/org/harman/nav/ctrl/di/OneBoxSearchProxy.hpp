/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V1_ORG_HARMAN_NAV_CTRL_DI_One_Box_Search_PROXY_HPP_
#define V1_ORG_HARMAN_NAV_CTRL_DI_One_Box_Search_PROXY_HPP_

#include <v1/org/harman/nav/ctrl/di/OneBoxSearchProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace harman {
namespace nav {
namespace ctrl {
namespace di {

template <typename ... _AttributeExtensions>
class OneBoxSearchProxy
    : virtual public OneBoxSearch, 
      virtual public OneBoxSearchProxyBase,
      virtual public _AttributeExtensions... {
public:
    OneBoxSearchProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~OneBoxSearchProxy();

    typedef OneBoxSearch InterfaceType;



    /**
     * description: searchStatus = This signal updates the search status of the specified session
     */
    /**
     * Returns the wrapper class that provides access to the broadcast searchStatus.
     */
    virtual SearchStatusEvent& getSearchStatusEvent() {
        return delegate_->getSearchStatusEvent();
    }
    /**
     * description: searchResultList = This signal updates the address result list (e.g. after a
     *   Search/Spell/Scroll call)
     */
    /**
     * Returns the wrapper class that provides access to the broadcast searchResultList.
     */
    virtual SearchResultListEvent& getSearchResultListEvent() {
        return delegate_->getSearchResultListEvent();
    }
    /**
     * description: searchResultListSizeChanged = This signal updates the size of the address
     *   result list
     */
    /**
     * Returns the wrapper class that provides access to the broadcast searchResultListSizeChanged.
     */
    virtual SearchResultListSizeChangedEvent& getSearchResultListSizeChangedEvent() {
        return delegate_->getSearchResultListSizeChangedEvent();
    }

    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     * Calls getVersion with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getVersion(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getVersion with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(GetVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: createOneBoxSearch = This method creates a new OneBoxSearch and retrieves a
     *   handle
     * Calls createOneBoxSearch with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void createOneBoxSearch(CommonAPI::CallStatus &_internalCallStatus, OneBoxSearch::createOneBoxSearchError &_error, ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls createOneBoxSearch with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> createOneBoxSearchAsync(CreateOneBoxSearchAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: deleteLocationInput = This method deletes a location input and its associated
     *   resources
     * Calls deleteOneBoxSearch with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void deleteOneBoxSearch(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls deleteOneBoxSearch with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> deleteOneBoxSearchAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, DeleteOneBoxSearchAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setSearchCountry = This method sets the target country for the current search,
     *   If no country is set the current center position is used to determine the
     *   country
     * Calls setSearchCountry with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setSearchCountry(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const std::string &_country, CommonAPI::CallStatus &_internalCallStatus, OneBoxSearch::setSearchCountryError &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setSearchCountry with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setSearchCountryAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const std::string &_country, SetSearchCountryAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setSearchLanguage = for the phonetic search algorithms the language and script
     *   are important
     * Calls setSearchLanguage with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setSearchLanguage(const ::org::harman::nav::ctrl::CommonTypes::Handle &_ftsSearchHandle, const std::string &_language, const std::string &_script, CommonAPI::CallStatus &_internalCallStatus, OneBoxSearch::setSearchLanguageError &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setSearchLanguage with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setSearchLanguageAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_ftsSearchHandle, const std::string &_language, const std::string &_script, SetSearchLanguageAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setSearchParameters = SetSearchParameters = configure if we want to search for
     *   addresses and/or pois.
    			configure if we want to search in the vicinity of
     *   the specified center.
            	configure if we want to search using
     *   fuzziness.
            	Default behaviour if no option is set we search everywhere
     * Calls setSearchParameters with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setSearchParameters(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_searchOptions, CommonAPI::CallStatus &_internalCallStatus, OneBoxSearch::setSearchParametersError &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setSearchParameters with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setSearchParametersAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_searchOptions, SetSearchParametersAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: startOneBoxSearch = This method sends the search input for the search
     *   handle.
    						The search will start with the location.
     * Calls startOneBoxSearch with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void startOneBoxSearch(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const std::string &_inputString, CommonAPI::CallStatus &_internalCallStatus, OneBoxSearch::startOneBoxSearchError &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls startOneBoxSearch with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> startOneBoxSearchAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const std::string &_inputString, StartOneBoxSearchAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: cancelFtsSearch = This method cancels the search for the current session
     * Calls cancelOneBoxSearch with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void cancelOneBoxSearch(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, CommonAPI::CallStatus &_internalCallStatus, OneBoxSearch::cancelOneBoxSearchError &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls cancelOneBoxSearch with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> cancelOneBoxSearchAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, CancelOneBoxSearchAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: requestListUpdate = This method sends a request for more list elements for the
     *   current session
     * Calls requestResultList with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestResultList(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_statusValue, uint16_t &_resultListSize, ::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes::LocationList &_locations, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestResultList with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestResultListAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, RequestResultListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: selectEntry = This method triggers selection of a result list entry by index
     * Calls selectEntry with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void selectEntry(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_index, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls selectEntry with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> selectEntryAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_index, SelectEntryAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getEntry = This method synchronously gets the address for the given result list
     *   entry
     * Calls getEntry with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getEntry(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_index, CommonAPI::CallStatus &_internalCallStatus, ::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes::Location &_locItem, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getEntry with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getEntryAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_index, GetEntryAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<OneBoxSearchProxyBase> delegate_;
};

typedef OneBoxSearchProxy<> OneBoxSearchProxyDefault;


//
// OneBoxSearchProxy Implementation
//
template <typename ... _AttributeExtensions>
OneBoxSearchProxy<_AttributeExtensions...>::OneBoxSearchProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<OneBoxSearchProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<OneBoxSearchProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
OneBoxSearchProxy<_AttributeExtensions...>::~OneBoxSearchProxy() {
}

/**
 * description: getVersion = This method returns the API version implemented by the server
 *   application
 */
template <typename ... _AttributeExtensions>
void OneBoxSearchProxy<_AttributeExtensions...>::getVersion(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info) {
    delegate_->getVersion(_internalCallStatus, _version, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> OneBoxSearchProxy<_AttributeExtensions...>::getVersionAsync(GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getVersionAsync(_callback, _info);
}
/**
 * description: createOneBoxSearch = This method creates a new OneBoxSearch and retrieves a
 *   handle
 */
template <typename ... _AttributeExtensions>
void OneBoxSearchProxy<_AttributeExtensions...>::createOneBoxSearch(CommonAPI::CallStatus &_internalCallStatus, OneBoxSearch::createOneBoxSearchError &_error, ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const CommonAPI::CallInfo *_info) {
    delegate_->createOneBoxSearch(_internalCallStatus, _error, _oneBoxSearchHandle, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> OneBoxSearchProxy<_AttributeExtensions...>::createOneBoxSearchAsync(CreateOneBoxSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->createOneBoxSearchAsync(_callback, _info);
}
/**
 * description: deleteLocationInput = This method deletes a location input and its associated
 *   resources
 */
template <typename ... _AttributeExtensions>
void OneBoxSearchProxy<_AttributeExtensions...>::deleteOneBoxSearch(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->deleteOneBoxSearch(_oneBoxSearchHandle, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> OneBoxSearchProxy<_AttributeExtensions...>::deleteOneBoxSearchAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, DeleteOneBoxSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->deleteOneBoxSearchAsync(_oneBoxSearchHandle, _callback, _info);
}
/**
 * description: setSearchCountry = This method sets the target country for the current search,
 *   If no country is set the current center position is used to determine the
 *   country
 */
template <typename ... _AttributeExtensions>
void OneBoxSearchProxy<_AttributeExtensions...>::setSearchCountry(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const std::string &_country, CommonAPI::CallStatus &_internalCallStatus, OneBoxSearch::setSearchCountryError &_error, const CommonAPI::CallInfo *_info) {
    delegate_->setSearchCountry(_oneBoxSearchHandle, _country, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> OneBoxSearchProxy<_AttributeExtensions...>::setSearchCountryAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const std::string &_country, SetSearchCountryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setSearchCountryAsync(_oneBoxSearchHandle, _country, _callback, _info);
}
/**
 * description: setSearchLanguage = for the phonetic search algorithms the language and script
 *   are important
 */
template <typename ... _AttributeExtensions>
void OneBoxSearchProxy<_AttributeExtensions...>::setSearchLanguage(const ::org::harman::nav::ctrl::CommonTypes::Handle &_ftsSearchHandle, const std::string &_language, const std::string &_script, CommonAPI::CallStatus &_internalCallStatus, OneBoxSearch::setSearchLanguageError &_error, const CommonAPI::CallInfo *_info) {
    delegate_->setSearchLanguage(_ftsSearchHandle, _language, _script, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> OneBoxSearchProxy<_AttributeExtensions...>::setSearchLanguageAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_ftsSearchHandle, const std::string &_language, const std::string &_script, SetSearchLanguageAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setSearchLanguageAsync(_ftsSearchHandle, _language, _script, _callback, _info);
}
/**
 * description: setSearchParameters = SetSearchParameters = configure if we want to search for
 *   addresses and/or pois.
			configure if we want to search in the vicinity of
 *   the specified center.
        	configure if we want to search using
 *   fuzziness.
        	Default behaviour if no option is set we search everywhere
 */
template <typename ... _AttributeExtensions>
void OneBoxSearchProxy<_AttributeExtensions...>::setSearchParameters(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_searchOptions, CommonAPI::CallStatus &_internalCallStatus, OneBoxSearch::setSearchParametersError &_error, const CommonAPI::CallInfo *_info) {
    delegate_->setSearchParameters(_oneBoxSearchHandle, _searchOptions, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> OneBoxSearchProxy<_AttributeExtensions...>::setSearchParametersAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_searchOptions, SetSearchParametersAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setSearchParametersAsync(_oneBoxSearchHandle, _searchOptions, _callback, _info);
}
/**
 * description: startOneBoxSearch = This method sends the search input for the search
 *   handle.
						The search will start with the location.
 */
template <typename ... _AttributeExtensions>
void OneBoxSearchProxy<_AttributeExtensions...>::startOneBoxSearch(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const std::string &_inputString, CommonAPI::CallStatus &_internalCallStatus, OneBoxSearch::startOneBoxSearchError &_error, const CommonAPI::CallInfo *_info) {
    delegate_->startOneBoxSearch(_oneBoxSearchHandle, _inputString, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> OneBoxSearchProxy<_AttributeExtensions...>::startOneBoxSearchAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const std::string &_inputString, StartOneBoxSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->startOneBoxSearchAsync(_oneBoxSearchHandle, _inputString, _callback, _info);
}
/**
 * description: cancelFtsSearch = This method cancels the search for the current session
 */
template <typename ... _AttributeExtensions>
void OneBoxSearchProxy<_AttributeExtensions...>::cancelOneBoxSearch(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, CommonAPI::CallStatus &_internalCallStatus, OneBoxSearch::cancelOneBoxSearchError &_error, const CommonAPI::CallInfo *_info) {
    delegate_->cancelOneBoxSearch(_oneBoxSearchHandle, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> OneBoxSearchProxy<_AttributeExtensions...>::cancelOneBoxSearchAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, CancelOneBoxSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->cancelOneBoxSearchAsync(_oneBoxSearchHandle, _callback, _info);
}
/**
 * description: requestListUpdate = This method sends a request for more list elements for the
 *   current session
 */
template <typename ... _AttributeExtensions>
void OneBoxSearchProxy<_AttributeExtensions...>::requestResultList(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_statusValue, uint16_t &_resultListSize, ::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes::LocationList &_locations, const CommonAPI::CallInfo *_info) {
    delegate_->requestResultList(_oneBoxSearchHandle, _offset, _maxWindowSize, _internalCallStatus, _statusValue, _resultListSize, _locations, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> OneBoxSearchProxy<_AttributeExtensions...>::requestResultListAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, RequestResultListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestResultListAsync(_oneBoxSearchHandle, _offset, _maxWindowSize, _callback, _info);
}
/**
 * description: selectEntry = This method triggers selection of a result list entry by index
 */
template <typename ... _AttributeExtensions>
void OneBoxSearchProxy<_AttributeExtensions...>::selectEntry(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_index, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->selectEntry(_oneBoxSearchHandle, _index, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> OneBoxSearchProxy<_AttributeExtensions...>::selectEntryAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_index, SelectEntryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->selectEntryAsync(_oneBoxSearchHandle, _index, _callback, _info);
}
/**
 * description: getEntry = This method synchronously gets the address for the given result list
 *   entry
 */
template <typename ... _AttributeExtensions>
void OneBoxSearchProxy<_AttributeExtensions...>::getEntry(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_index, CommonAPI::CallStatus &_internalCallStatus, ::v3::org::harman::nav::ctrl::memory::LocationMemoryTypes::Location &_locItem, const CommonAPI::CallInfo *_info) {
    delegate_->getEntry(_oneBoxSearchHandle, _index, _internalCallStatus, _locItem, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> OneBoxSearchProxy<_AttributeExtensions...>::getEntryAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_oneBoxSearchHandle, const uint16_t &_index, GetEntryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getEntryAsync(_oneBoxSearchHandle, _index, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &OneBoxSearchProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool OneBoxSearchProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool OneBoxSearchProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& OneBoxSearchProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& OneBoxSearchProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace di
} // namespace ctrl
} // namespace nav
} // namespace harman
} // namespace org
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_HARMAN_NAV_CTRL_DI_One_Box_Search_PROXY_HPP_
