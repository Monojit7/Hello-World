/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * author: Rico Schuster
 * description: Configuration baed interface to get the current configuration settings. This
 *   interface provides
    only getter methods.
 */
#ifndef V1_ORG_HARMAN_NAV_CTRL_CONFIGURATION_Configuration_Base_PROXY_BASE_HPP_
#define V1_ORG_HARMAN_NAV_CTRL_CONFIGURATION_Configuration_Base_PROXY_BASE_HPP_

#include <v1/org/harman/nav/ctrl/configuration/ConfigurationBase.hpp>


#include <org/harman/nav/ctrl/CommonTypes.hpp>
#include <org/harman/nav/ctrl/configuration/ConfigurationTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace harman {
namespace nav {
namespace ctrl {
namespace configuration {

class ConfigurationBaseProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::org::harman::nav::ctrl::configuration::ConfigurationTypes::Settings
    > ConfigurationChangesEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetVersionError&, const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::NavigationVersion&)> GetNavigationVersionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetSupportedUnitsOfMeasurementError&, const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::UnitsOfMeasurement&)> GetSupportedUnitsOfMeasurementAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetUnitsOfMeasurementError&, const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::UnitsOfMeasurement&)> GetUnitsOfMeasurementAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetTimeFormatError&, const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::TimeFormat&)> GetTimeFormatAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetCoordinatesFormatError&, const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::CoordinatesFormat&)> GetCoordinatesFormatAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetSupportedCoordinatesFormatsError&, const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::CoordinatesFormats&)> GetSupportedCoordinatesFormatsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetLocaleError&, const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::Locale&)> GetLocaleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetLocalesError&, const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::Locales&)> GetSupportedLocalesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetStyleThemeError&, const ::org::harman::nav::ctrl::configuration::ConfigurationTypes::StyleTheme&)> GetStyleThemeAsyncCallback;


    /**
     * description: This signals there was a change is configuration.
     */
    virtual ConfigurationChangesEvent& getConfigurationChangesEvent() = 0;

    /**
     * description: Methode for getting version.
     */
    virtual void getNavigationVersion(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetVersionError &_error, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::NavigationVersion &_navigationVersion, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getNavigationVersionAsync(GetNavigationVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Methode for getting supported units of measurements.
     */
    virtual void getSupportedUnitsOfMeasurement(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetSupportedUnitsOfMeasurementError &_error, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::UnitsOfMeasurement &_unitsOfMeasurement, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSupportedUnitsOfMeasurementAsync(GetSupportedUnitsOfMeasurementAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Methode for getting units of measurements.
     */
    virtual void getUnitsOfMeasurement(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetUnitsOfMeasurementError &_error, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::UnitsOfMeasurement &_unitsOfMeasurement, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getUnitsOfMeasurementAsync(GetUnitsOfMeasurementAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Methode for getting time format.
     */
    virtual void getTimeFormat(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetTimeFormatError &_error, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::TimeFormat &_timeFormat, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getTimeFormatAsync(GetTimeFormatAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Methode for getting coordinates format.
     */
    virtual void getCoordinatesFormat(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetCoordinatesFormatError &_error, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::CoordinatesFormat &_coordinatesFormat, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getCoordinatesFormatAsync(GetCoordinatesFormatAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Methode for getting supported coordinates format.
     */
    virtual void getSupportedCoordinatesFormats(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetSupportedCoordinatesFormatsError &_error, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::CoordinatesFormats &_coordinatesFormats, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSupportedCoordinatesFormatsAsync(GetSupportedCoordinatesFormatsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Methode for getting locale.
     */
    virtual void getLocale(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetLocaleError &_error, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::Locale &_locale, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getLocaleAsync(GetLocaleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Methode for getting supported locales.
     */
    virtual void getSupportedLocales(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetLocalesError &_error, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::Locales &_locales, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSupportedLocalesAsync(GetSupportedLocalesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Methode for getting style theme.
     */
    virtual void getStyleTheme(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::GetStyleThemeError &_error, ::org::harman::nav::ctrl::configuration::ConfigurationTypes::StyleTheme &_style, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getStyleThemeAsync(GetStyleThemeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace configuration
} // namespace ctrl
} // namespace nav
} // namespace harman
} // namespace org
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_HARMAN_NAV_CTRL_CONFIGURATION_Configuration_Base_PROXY_BASE_HPP_
