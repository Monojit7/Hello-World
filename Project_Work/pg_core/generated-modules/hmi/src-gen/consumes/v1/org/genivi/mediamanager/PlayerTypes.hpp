/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V1_ORG_GENIVI_MEDIAMANAGER_Player_Types_HPP_
#define V1_ORG_GENIVI_MEDIAMANAGER_Player_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace genivi {
namespace mediamanager {

struct PlayerTypes {
    
    struct MuteStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            MUTED = 0,
            UNMUTED = 1
        };
        
        MuteStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::MUTED)) {}
        MuteStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::MUTED):
                case static_cast<int32_t>(Literal::UNMUTED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MuteStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MuteStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MuteStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MuteStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MuteStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MuteStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PlayerError : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NO_ERROR = 0,
            BAD_PLAYLIST = 1,
            BACKEND_UNREACHABLE = 2
        };
        
        PlayerError() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NO_ERROR)) {}
        PlayerError(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NO_ERROR):
                case static_cast<int32_t>(Literal::BAD_PLAYLIST):
                case static_cast<int32_t>(Literal::BACKEND_UNREACHABLE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PlayerError &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PlayerError &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PlayerError &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PlayerError &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PlayerError &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PlayerError &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ShuffleStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SHUFFLE = 0,
            UNSHUFFLE = 1
        };
        
        ShuffleStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SHUFFLE)) {}
        ShuffleStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SHUFFLE):
                case static_cast<int32_t>(Literal::UNSHUFFLE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ShuffleStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ShuffleStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ShuffleStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ShuffleStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ShuffleStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ShuffleStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct RepeatStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            REPEAT = 0,
            REPEAT_SINGLE = 1,
            NO_REPEAT = 2,
            REPEAT_CHANGE = 3
        };
        
        RepeatStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::REPEAT)) {}
        RepeatStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::REPEAT):
                case static_cast<int32_t>(Literal::REPEAT_SINGLE):
                case static_cast<int32_t>(Literal::NO_REPEAT):
                case static_cast<int32_t>(Literal::REPEAT_CHANGE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RepeatStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RepeatStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RepeatStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RepeatStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RepeatStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RepeatStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PlaybackStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            PLAYING = 0,
            PAUSED = 1
        };
        
        PlaybackStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::PLAYING)) {}
        PlaybackStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::PLAYING):
                case static_cast<int32_t>(Literal::PAUSED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PlaybackStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PlaybackStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PlaybackStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PlaybackStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PlaybackStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PlaybackStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.genivi.mediamanager.PlayerTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct PlayerTypes

} // namespace mediamanager
} // namespace genivi
} // namespace org
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for MuteStatus
    template<>
    struct hash<::v1::org::genivi::mediamanager::PlayerTypes::MuteStatus> {
        inline size_t operator()(const ::v1::org::genivi::mediamanager::PlayerTypes::MuteStatus& muteStatus) const {
            return static_cast<int32_t>(muteStatus);
        }
    };
    //Hash for PlayerError
    template<>
    struct hash<::v1::org::genivi::mediamanager::PlayerTypes::PlayerError> {
        inline size_t operator()(const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError& playerError) const {
            return static_cast<int32_t>(playerError);
        }
    };
    //Hash for ShuffleStatus
    template<>
    struct hash<::v1::org::genivi::mediamanager::PlayerTypes::ShuffleStatus> {
        inline size_t operator()(const ::v1::org::genivi::mediamanager::PlayerTypes::ShuffleStatus& shuffleStatus) const {
            return static_cast<int32_t>(shuffleStatus);
        }
    };
    //Hash for RepeatStatus
    template<>
    struct hash<::v1::org::genivi::mediamanager::PlayerTypes::RepeatStatus> {
        inline size_t operator()(const ::v1::org::genivi::mediamanager::PlayerTypes::RepeatStatus& repeatStatus) const {
            return static_cast<int32_t>(repeatStatus);
        }
    };
    //Hash for PlaybackStatus
    template<>
    struct hash<::v1::org::genivi::mediamanager::PlayerTypes::PlaybackStatus> {
        inline size_t operator()(const ::v1::org::genivi::mediamanager::PlayerTypes::PlaybackStatus& playbackStatus) const {
            return static_cast<int32_t>(playbackStatus);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_GENIVI_MEDIAMANAGER_Player_Types_HPP_
