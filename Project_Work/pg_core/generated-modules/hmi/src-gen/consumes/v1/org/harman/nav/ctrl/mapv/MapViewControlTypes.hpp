/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V1_ORG_HARMAN_NAV_CTRL_MAPV_Map_View_Control_Types_HPP_
#define V1_ORG_HARMAN_NAV_CTRL_MAPV_Map_View_Control_Types_HPP_


#include <org/harman/nav/ctrl/CommonTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <CommonAPI/Variant.hpp>
#include <cstdint>
#include <memory>
#include <string>
#include <unordered_map>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace harman {
namespace nav {
namespace ctrl {
namespace mapv {

struct MapViewControlTypes {
    typedef uint32_t Handle;
    
    struct MapViewType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            MAIN_MAP = 1,
            SPLIT_SCREEN = 2
        };
        
        MapViewType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        MapViewType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        MapViewType &operator=(const ::org::harman::nav::ctrl::CommonTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::MAIN_MAP):
                case static_cast<int32_t>(Literal::SPLIT_SCREEN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MapViewType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MapViewType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MapViewType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MapViewType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MapViewType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MapViewType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct MapScaleMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            AUTOMATIC = 1,
            MANUAL = 2,
            HYBRID = 3
        };
        
        MapScaleMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        MapScaleMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        MapScaleMode &operator=(const ::org::harman::nav::ctrl::CommonTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::AUTOMATIC):
                case static_cast<int32_t>(Literal::MANUAL):
                case static_cast<int32_t>(Literal::HYBRID):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MapScaleMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MapScaleMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MapScaleMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MapScaleMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MapScaleMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MapScaleMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct MapPerspective : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            PERSPECTIVE_2D = 1,
            PERSPECTIVE_3D = 2
        };
        
        MapPerspective() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        MapPerspective(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        MapPerspective &operator=(const ::org::harman::nav::ctrl::CommonTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::PERSPECTIVE_2D):
                case static_cast<int32_t>(Literal::PERSPECTIVE_3D):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MapPerspective &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MapPerspective &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MapPerspective &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MapPerspective &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MapPerspective &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MapPerspective &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct MapObject : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            BUILDINGS = 1,
            TERRAIN = 2
        };
        
        MapObject() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        MapObject(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        MapObject &operator=(const ::org::harman::nav::ctrl::CommonTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::BUILDINGS):
                case static_cast<int32_t>(Literal::TERRAIN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MapObject &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MapObject &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MapObject &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MapObject &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MapObject &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MapObject &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PanAction : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            PAN_START = 1,
            PAN_TO = 2,
            PAN_END = 3
        };
        
        PanAction() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        PanAction(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        PanAction &operator=(const ::org::harman::nav::ctrl::CommonTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::PAN_START):
                case static_cast<int32_t>(Literal::PAN_TO):
                case static_cast<int32_t>(Literal::PAN_END):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PanAction &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PanAction &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PanAction &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PanAction &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PanAction &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PanAction &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Visibility : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            VISIBLE = 1,
            INVISIBLE = 2,
            FROZEN = 3
        };
        
        Visibility() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        Visibility(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        Visibility &operator=(const ::org::harman::nav::ctrl::CommonTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::VISIBLE):
                case static_cast<int32_t>(Literal::INVISIBLE):
                case static_cast<int32_t>(Literal::FROZEN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Visibility &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Visibility &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Visibility &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Visibility &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Visibility &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Visibility &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Level : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            LEVEL_1 = 1,
            LEVEL_2 = 2,
            LEVEL_3 = 3,
            LEVEL_4 = 4,
            LEVEL_5 = 5
        };
        
        Level() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        Level(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        Level &operator=(const ::org::harman::nav::ctrl::CommonTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::LEVEL_1):
                case static_cast<int32_t>(Literal::LEVEL_2):
                case static_cast<int32_t>(Literal::LEVEL_3):
                case static_cast<int32_t>(Literal::LEVEL_4):
                case static_cast<int32_t>(Literal::LEVEL_5):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Level &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Level &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Level &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Level &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Level &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Level &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct MapTheme : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            DAY = 1,
            NIGHT = 2
        };
        
        MapTheme() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        MapTheme(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        MapTheme &operator=(const ::org::harman::nav::ctrl::CommonTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::DAY):
                case static_cast<int32_t>(Literal::NIGHT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MapTheme &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MapTheme &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MapTheme &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MapTheme &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MapTheme &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MapTheme &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct AutozoomSetting : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NEAR = 0,
            NORMAL = 1,
            FAR = 2
        };
        
        AutozoomSetting() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NEAR)) {}
        AutozoomSetting(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NEAR):
                case static_cast<int32_t>(Literal::NORMAL):
                case static_cast<int32_t>(Literal::FAR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AutozoomSetting &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AutozoomSetting &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AutozoomSetting &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AutozoomSetting &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AutozoomSetting &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AutozoomSetting &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PoiCategoriesVisibleMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SELECTED = 0,
            ALL = 1,
            NONE = 2
        };
        
        PoiCategoriesVisibleMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SELECTED)) {}
        PoiCategoriesVisibleMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SELECTED):
                case static_cast<int32_t>(Literal::ALL):
                case static_cast<int32_t>(Literal::NONE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PoiCategoriesVisibleMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PoiCategoriesVisibleMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PoiCategoriesVisibleMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PoiCategoriesVisibleMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PoiCategoriesVisibleMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PoiCategoriesVisibleMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: struct generated for DBus argument CreateMapViewInstance_mapViewSize
     */
    struct Dimension : CommonAPI::Struct<uint16_t, uint16_t> {
    	
    	Dimension() {
    	}
    	Dimension(const uint16_t &_horizontalSize, const uint16_t &_verticalSize)
    	{
    		std::get<0>(values_) = _horizontalSize;
    		std::get<1>(values_) = _verticalSize;
    	}
    	inline const uint16_t &getHorizontalSize() const { return std::get<0>(values_); }
    	inline void setHorizontalSize(const uint16_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint16_t &getVerticalSize() const { return std::get<1>(values_); }
    	inline void setVerticalSize(const uint16_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const Dimension& _other) const {
                return (getHorizontalSize() == _other.getHorizontalSize() && getVerticalSize() == _other.getVerticalSize());
        }
    	inline bool operator!=(const Dimension &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::unordered_map<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapObject, bool, CommonAPI::EnumHasher<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapObject>> MapObjectVisibility;
    
    struct MapScaleUnit : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            METER = 1,
            MILE = 2,
            KM = 3,
            YARD = 4,
            FOOT = 5
        };
        
        MapScaleUnit() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        MapScaleUnit(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        MapScaleUnit &operator=(const ::org::harman::nav::ctrl::CommonTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::METER):
                case static_cast<int32_t>(Literal::MILE):
                case static_cast<int32_t>(Literal::KM):
                case static_cast<int32_t>(Literal::YARD):
                case static_cast<int32_t>(Literal::FOOT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MapScaleUnit &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MapScaleUnit &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MapScaleUnit &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MapScaleUnit &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MapScaleUnit &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MapScaleUnit &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct MapScaleType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            MIN = 1,
            MAX = 2,
            MID = 3
        };
        
        MapScaleType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        MapScaleType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        MapScaleType &operator=(const ::org::harman::nav::ctrl::CommonTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::MIN):
                case static_cast<int32_t>(Literal::MAX):
                case static_cast<int32_t>(Literal::MID):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MapScaleType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MapScaleType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MapScaleType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MapScaleType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MapScaleType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MapScaleType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SelectableMapType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            CUSTOM_ELEMENT = 1,
            CURRENT_POSITION = 2,
            WAYPOINT = 3,
            POI = 4,
            TRAFFIC_INCIDENT = 5,
            ROUTE = 6,
            GEOCOORDINATES = 7,
            OBJECT_LIST_ITEM = 8
        };
        
        SelectableMapType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        SelectableMapType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        SelectableMapType &operator=(const ::org::harman::nav::ctrl::CommonTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::CUSTOM_ELEMENT):
                case static_cast<int32_t>(Literal::CURRENT_POSITION):
                case static_cast<int32_t>(Literal::WAYPOINT):
                case static_cast<int32_t>(Literal::POI):
                case static_cast<int32_t>(Literal::TRAFFIC_INCIDENT):
                case static_cast<int32_t>(Literal::ROUTE):
                case static_cast<int32_t>(Literal::GEOCOORDINATES):
                case static_cast<int32_t>(Literal::OBJECT_LIST_ITEM):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SelectableMapType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SelectableMapType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SelectableMapType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SelectableMapType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SelectableMapType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SelectableMapType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: struct generated for DBus argument GetScaleList_scaleList
     */
    struct MapScale : CommonAPI::Struct<uint16_t, uint16_t, MapScaleUnit, uint32_t> {
    	
    	MapScale() {
    	}
    	MapScale(const uint16_t &_scaleId, const uint16_t &_scaleValue, const MapScaleUnit &_unit, const uint32_t &_millimetersPerPixel)
    	{
    		std::get<0>(values_) = _scaleId;
    		std::get<1>(values_) = _scaleValue;
    		std::get<2>(values_) = _unit;
    		std::get<3>(values_) = _millimetersPerPixel;
    	}
    	inline const uint16_t &getScaleId() const { return std::get<0>(values_); }
    	inline void setScaleId(const uint16_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint16_t &getScaleValue() const { return std::get<1>(values_); }
    	inline void setScaleValue(const uint16_t &_value) { std::get<1>(values_) = _value; }
    	inline const MapScaleUnit &getUnit() const { return std::get<2>(values_); }
    	inline void setUnit(const MapScaleUnit &_value) { std::get<2>(values_) = _value; }
    	inline const uint32_t &getMillimetersPerPixel() const { return std::get<3>(values_); }
    	inline void setMillimetersPerPixel(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const MapScale& _other) const {
                return (getScaleId() == _other.getScaleId() && getScaleValue() == _other.getScaleValue() && getUnit() == _other.getUnit() && getMillimetersPerPixel() == _other.getMillimetersPerPixel());
        }
    	inline bool operator!=(const MapScale &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: struct generated for DBus argument SetMapViewPan_pixelCoordinates
     */
    struct Pixel : CommonAPI::Struct<uint16_t, uint16_t> {
    	
    	Pixel() {
    	}
    	Pixel(const uint16_t &_x, const uint16_t &_y)
    	{
    		std::get<0>(values_) = _x;
    		std::get<1>(values_) = _y;
    	}
    	inline const uint16_t &getX() const { return std::get<0>(values_); }
    	inline void setX(const uint16_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint16_t &getY() const { return std::get<1>(values_); }
    	inline void setY(const uint16_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const Pixel& _other) const {
                return (getX() == _other.getX() && getY() == _other.getY());
        }
    	inline bool operator!=(const Pixel &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: struct pixel-coordinate
     */
    struct ScreenCoordinate : CommonAPI::Struct<int32_t, int32_t> {
    	
    	ScreenCoordinate() {
    	}
    	ScreenCoordinate(const int32_t &_x, const int32_t &_y)
    	{
    		std::get<0>(values_) = _x;
    		std::get<1>(values_) = _y;
    	}
    	inline const int32_t &getX() const { return std::get<0>(values_); }
    	inline void setX(const int32_t &_value) { std::get<0>(values_) = _value; }
    	inline const int32_t &getY() const { return std::get<1>(values_); }
    	inline void setY(const int32_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const ScreenCoordinate& _other) const {
                return (getX() == _other.getX() && getY() == _other.getY());
        }
    	inline bool operator!=(const ScreenCoordinate &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: struct pixel-coordinate
     */
    struct ScreenRectangle : CommonAPI::Struct<int32_t, int32_t, uint32_t, uint32_t> {
    	
    	ScreenRectangle() {
    	}
    	ScreenRectangle(const int32_t &_left, const int32_t &_top, const uint32_t &_width, const uint32_t &_height)
    	{
    		std::get<0>(values_) = _left;
    		std::get<1>(values_) = _top;
    		std::get<2>(values_) = _width;
    		std::get<3>(values_) = _height;
    	}
    	inline const int32_t &getLeft() const { return std::get<0>(values_); }
    	inline void setLeft(const int32_t &_value) { std::get<0>(values_) = _value; }
    	inline const int32_t &getTop() const { return std::get<1>(values_); }
    	inline void setTop(const int32_t &_value) { std::get<1>(values_) = _value; }
    	inline const uint32_t &getWidth() const { return std::get<2>(values_); }
    	inline void setWidth(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	inline const uint32_t &getHeight() const { return std::get<3>(values_); }
    	inline void setHeight(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const ScreenRectangle& _other) const {
                return (getLeft() == _other.getLeft() && getTop() == _other.getTop() && getWidth() == _other.getWidth() && getHeight() == _other.getHeight());
        }
    	inline bool operator!=(const ScreenRectangle &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: struct generated for DBus argument GetDisplayedRoutes_displayedRoutes
     */
    struct DisplayedRoute : CommonAPI::Struct<Handle, bool> {
    	
    	DisplayedRoute() {
    		std::get<1>(values_) = false;
    	}
    	DisplayedRoute(const Handle &_routeHandle, const bool &_highlighted)
    	{
    		std::get<0>(values_) = _routeHandle;
    		std::get<1>(values_) = _highlighted;
    	}
    	inline const Handle &getRouteHandle() const { return std::get<0>(values_); }
    	inline void setRouteHandle(const Handle &_value) { std::get<0>(values_) = _value; }
    	inline const bool &getHighlighted() const { return std::get<1>(values_); }
    	inline void setHighlighted(const bool _value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const DisplayedRoute& _other) const {
                return (getRouteHandle() == _other.getRouteHandle() && getHighlighted() == _other.getHighlighted());
        }
    	inline bool operator!=(const DisplayedRoute &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MapViewControlTypes::DisplayedRoute> DisplayedRoutes;
    /**
     * description: struct generated for DBus argument DisplayCustomElements_customElementsElem4
     */
    struct AnchorPoint : CommonAPI::Struct<int16_t, int16_t> {
    	
    	AnchorPoint() {
    	}
    	AnchorPoint(const int16_t &_x, const int16_t &_y)
    	{
    		std::get<0>(values_) = _x;
    		std::get<1>(values_) = _y;
    	}
    	inline const int16_t &getX() const { return std::get<0>(values_); }
    	inline void setX(const int16_t &_value) { std::get<0>(values_) = _value; }
    	inline const int16_t &getY() const { return std::get<1>(values_); }
    	inline void setY(const int16_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const AnchorPoint& _other) const {
                return (getX() == _other.getX() && getY() == _other.getY());
        }
    	inline bool operator!=(const AnchorPoint &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: struct generated for DBus argument DisplayCustomElements_customElements
     */
    struct CustomElement : CommonAPI::Struct<std::string, std::string, ::org::harman::nav::ctrl::CommonTypes::Coordinate2D, AnchorPoint> {
    	
    	CustomElement() {
    	}
    	CustomElement(const std::string &_name, const std::string &_iconUri, const ::org::harman::nav::ctrl::CommonTypes::Coordinate2D &_coordinate, const AnchorPoint &_elem4)
    	{
    		std::get<0>(values_) = _name;
    		std::get<1>(values_) = _iconUri;
    		std::get<2>(values_) = _coordinate;
    		std::get<3>(values_) = _elem4;
    	}
    	inline const std::string &getName() const { return std::get<0>(values_); }
    	inline void setName(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getIconUri() const { return std::get<1>(values_); }
    	inline void setIconUri(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const ::org::harman::nav::ctrl::CommonTypes::Coordinate2D &getCoordinate() const { return std::get<2>(values_); }
    	inline void setCoordinate(const ::org::harman::nav::ctrl::CommonTypes::Coordinate2D &_value) { std::get<2>(values_) = _value; }
    	inline const AnchorPoint &getElem4() const { return std::get<3>(values_); }
    	inline void setElem4(const AnchorPoint &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const CustomElement& _other) const {
                return (getName() == _other.getName() && getIconUri() == _other.getIconUri() && getCoordinate() == _other.getCoordinate() && getElem4() == _other.getElem4());
        }
    	inline bool operator!=(const CustomElement &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::unordered_map<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::Handle, ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::CustomElement> tCustomElementDict;
    
    struct EObjectListDomain : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            POI_SERVICE = 0
        };
        
        EObjectListDomain() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::POI_SERVICE)) {}
        EObjectListDomain(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::POI_SERVICE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EObjectListDomain &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EObjectListDomain &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EObjectListDomain &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EObjectListDomain &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EObjectListDomain &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EObjectListDomain &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: ObjectList, used in displayObjectList/hideObjectList
     */
    struct ObjectList : CommonAPI::Struct<EObjectListDomain, Handle> {
    	
    	ObjectList() {
    	}
    	ObjectList(const EObjectListDomain &_domain, const Handle &_domainHandle)
    	{
    		std::get<0>(values_) = _domain;
    		std::get<1>(values_) = _domainHandle;
    	}
    	inline const EObjectListDomain &getDomain() const { return std::get<0>(values_); }
    	inline void setDomain(const EObjectListDomain &_value) { std::get<0>(values_) = _value; }
    	inline const Handle &getDomainHandle() const { return std::get<1>(values_); }
    	inline void setDomainHandle(const Handle &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const ObjectList& _other) const {
                return (getDomain() == _other.getDomain() && getDomainHandle() == _other.getDomainHandle());
        }
    	inline bool operator!=(const ObjectList &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: ObjectListItem, used in highlightObjectListItem
     */
    struct ObjectListItem : CommonAPI::Struct<ObjectList, uint32_t> {
    	
    	ObjectListItem() {
    	}
    	ObjectListItem(const ObjectList &_objectList, const uint32_t &_domainIndex)
    	{
    		std::get<0>(values_) = _objectList;
    		std::get<1>(values_) = _domainIndex;
    	}
    	inline const ObjectList &getObjectList() const { return std::get<0>(values_); }
    	inline void setObjectList(const ObjectList &_value) { std::get<0>(values_) = _value; }
    	inline const uint32_t &getDomainIndex() const { return std::get<1>(values_); }
    	inline void setDomainIndex(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const ObjectListItem& _other) const {
                return (getObjectList() == _other.getObjectList() && getDomainIndex() == _other.getDomainIndex());
        }
    	inline bool operator!=(const ObjectListItem &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef CommonAPI::Variant<int32_t, Handle, CustomElement, ObjectListItem>  ElementValue;
    /**
     * description: struct generated for DBus argument SelectElementsOnMap_selectedElements
     */
    struct SelectedMapElement : CommonAPI::Struct<SelectableMapType, ::org::harman::nav::ctrl::CommonTypes::Coordinate2D, ElementValue> {
    	
    	SelectedMapElement() {
    	}
    	SelectedMapElement(const SelectableMapType &_type, const ::org::harman::nav::ctrl::CommonTypes::Coordinate2D &_position, const ElementValue &_value)
    	{
    		std::get<0>(values_) = _type;
    		std::get<1>(values_) = _position;
    		std::get<2>(values_) = _value;
    	}
    	inline const SelectableMapType &getType() const { return std::get<0>(values_); }
    	inline void setType(const SelectableMapType &_value) { std::get<0>(values_) = _value; }
    	inline const ::org::harman::nav::ctrl::CommonTypes::Coordinate2D &getPosition() const { return std::get<1>(values_); }
    	inline void setPosition(const ::org::harman::nav::ctrl::CommonTypes::Coordinate2D &_value) { std::get<1>(values_) = _value; }
    	inline const ElementValue &getValue() const { return std::get<2>(values_); }
    	inline void setValue(const ElementValue &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const SelectedMapElement& _other) const {
                return (getType() == _other.getType() && getPosition() == _other.getPosition() && getValue() == _other.getValue());
        }
    	inline bool operator!=(const SelectedMapElement &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct MapViewOrientation : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NORTH_UP = 0,
            HEADING_UP = 1,
            MANEUVER_UP = 2,
            DESTINATION_UP = 3,
            FIXED_ANGLE = 4
        };
        
        MapViewOrientation() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NORTH_UP)) {}
        MapViewOrientation(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NORTH_UP):
                case static_cast<int32_t>(Literal::HEADING_UP):
                case static_cast<int32_t>(Literal::MANEUVER_UP):
                case static_cast<int32_t>(Literal::DESTINATION_UP):
                case static_cast<int32_t>(Literal::FIXED_ANGLE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MapViewOrientation &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MapViewOrientation &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MapViewOrientation &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MapViewOrientation &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MapViewOrientation &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MapViewOrientation &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct MapViewStyleSet : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DAY = 0,
            NIGHT = 1
        };
        
        MapViewStyleSet() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DAY)) {}
        MapViewStyleSet(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DAY):
                case static_cast<int32_t>(Literal::NIGHT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MapViewStyleSet &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MapViewStyleSet &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MapViewStyleSet &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MapViewStyleSet &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MapViewStyleSet &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MapViewStyleSet &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: compound POI-id
     */
    struct PoiId : CommonAPI::Struct<uint32_t, uint64_t> {
    	
    	PoiId() {
    	}
    	PoiId(const uint32_t &_databaseId, const uint64_t &_poiId)
    	{
    		std::get<0>(values_) = _databaseId;
    		std::get<1>(values_) = _poiId;
    	}
    	inline const uint32_t &getDatabaseId() const { return std::get<0>(values_); }
    	inline void setDatabaseId(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint64_t &getPoiId() const { return std::get<1>(values_); }
    	inline void setPoiId(const uint64_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const PoiId& _other) const {
                return (getDatabaseId() == _other.getDatabaseId() && getPoiId() == _other.getPoiId());
        }
    	inline bool operator!=(const PoiId &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct KmlType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            KML_URL = 0,
            KML_CONTENT = 1
        };
        
        KmlType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::KML_URL)) {}
        KmlType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::KML_URL):
                case static_cast<int32_t>(Literal::KML_CONTENT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const KmlType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const KmlType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const KmlType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const KmlType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const KmlType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const KmlType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Settings per map view instance.
     */
    struct ScreenStatus : CommonAPI::Struct<Handle, std::string, Visibility, MapViewType, MapViewStyleSet, MapTheme, MapViewOrientation, MapPerspective, DisplayedRoutes, MapScaleMode, MapScale, bool, AutozoomSetting, bool, int32_t, ::org::harman::nav::ctrl::CommonTypes::Coordinate3D, Dimension> {
    	
    	ScreenStatus() {
    		std::get<11>(values_) = false;
    		std::get<13>(values_) = false;
    	}
    	ScreenStatus(const Handle &_mapViewInstanceHandle, const std::string &_mapMode, const Visibility &_visibility, const MapViewType &_viewType, const MapViewStyleSet &_style, const MapTheme &_theme, const MapViewOrientation &_orientation, const MapPerspective &_perspective, const DisplayedRoutes &_displayedRoutes, const MapScaleMode &_scaleMode, const MapScale &_scale, const bool &_autozoomEnabled, const AutozoomSetting &_autozoomSetting, const bool &_followCarMode, const int32_t &_cameraHeadingAngle, const ::org::harman::nav::ctrl::CommonTypes::Coordinate3D &_cameraPosition, const Dimension &_screenDimensions)
    	{
    		std::get<0>(values_) = _mapViewInstanceHandle;
    		std::get<1>(values_) = _mapMode;
    		std::get<2>(values_) = _visibility;
    		std::get<3>(values_) = _viewType;
    		std::get<4>(values_) = _style;
    		std::get<5>(values_) = _theme;
    		std::get<6>(values_) = _orientation;
    		std::get<7>(values_) = _perspective;
    		std::get<8>(values_) = _displayedRoutes;
    		std::get<9>(values_) = _scaleMode;
    		std::get<10>(values_) = _scale;
    		std::get<11>(values_) = _autozoomEnabled;
    		std::get<12>(values_) = _autozoomSetting;
    		std::get<13>(values_) = _followCarMode;
    		std::get<14>(values_) = _cameraHeadingAngle;
    		std::get<15>(values_) = _cameraPosition;
    		std::get<16>(values_) = _screenDimensions;
    	}
    	inline const Handle &getMapViewInstanceHandle() const { return std::get<0>(values_); }
    	inline void setMapViewInstanceHandle(const Handle &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getMapMode() const { return std::get<1>(values_); }
    	inline void setMapMode(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const Visibility &getVisibility() const { return std::get<2>(values_); }
    	inline void setVisibility(const Visibility &_value) { std::get<2>(values_) = _value; }
    	inline const MapViewType &getViewType() const { return std::get<3>(values_); }
    	inline void setViewType(const MapViewType &_value) { std::get<3>(values_) = _value; }
    	inline const MapViewStyleSet &getStyle() const { return std::get<4>(values_); }
    	inline void setStyle(const MapViewStyleSet &_value) { std::get<4>(values_) = _value; }
    	inline const MapTheme &getTheme() const { return std::get<5>(values_); }
    	inline void setTheme(const MapTheme &_value) { std::get<5>(values_) = _value; }
    	inline const MapViewOrientation &getOrientation() const { return std::get<6>(values_); }
    	inline void setOrientation(const MapViewOrientation &_value) { std::get<6>(values_) = _value; }
    	inline const MapPerspective &getPerspective() const { return std::get<7>(values_); }
    	inline void setPerspective(const MapPerspective &_value) { std::get<7>(values_) = _value; }
    	inline const DisplayedRoutes &getDisplayedRoutes() const { return std::get<8>(values_); }
    	inline void setDisplayedRoutes(const DisplayedRoutes &_value) { std::get<8>(values_) = _value; }
    	inline const MapScaleMode &getScaleMode() const { return std::get<9>(values_); }
    	inline void setScaleMode(const MapScaleMode &_value) { std::get<9>(values_) = _value; }
    	inline const MapScale &getScale() const { return std::get<10>(values_); }
    	inline void setScale(const MapScale &_value) { std::get<10>(values_) = _value; }
    	inline const bool &getAutozoomEnabled() const { return std::get<11>(values_); }
    	inline void setAutozoomEnabled(const bool _value) { std::get<11>(values_) = _value; }
    	inline const AutozoomSetting &getAutozoomSetting() const { return std::get<12>(values_); }
    	inline void setAutozoomSetting(const AutozoomSetting &_value) { std::get<12>(values_) = _value; }
    	inline const bool &getFollowCarMode() const { return std::get<13>(values_); }
    	inline void setFollowCarMode(const bool _value) { std::get<13>(values_) = _value; }
    	inline const int32_t &getCameraHeadingAngle() const { return std::get<14>(values_); }
    	inline void setCameraHeadingAngle(const int32_t &_value) { std::get<14>(values_) = _value; }
    	inline const ::org::harman::nav::ctrl::CommonTypes::Coordinate3D &getCameraPosition() const { return std::get<15>(values_); }
    	inline void setCameraPosition(const ::org::harman::nav::ctrl::CommonTypes::Coordinate3D &_value) { std::get<15>(values_) = _value; }
    	inline const Dimension &getScreenDimensions() const { return std::get<16>(values_); }
    	inline void setScreenDimensions(const Dimension &_value) { std::get<16>(values_) = _value; }
    	inline bool operator==(const ScreenStatus& _other) const {
                return (getMapViewInstanceHandle() == _other.getMapViewInstanceHandle() && getMapMode() == _other.getMapMode() && getVisibility() == _other.getVisibility() && getViewType() == _other.getViewType() && getStyle() == _other.getStyle() && getTheme() == _other.getTheme() && getOrientation() == _other.getOrientation() && getPerspective() == _other.getPerspective() && getDisplayedRoutes() == _other.getDisplayedRoutes() && getScaleMode() == _other.getScaleMode() && getScale() == _other.getScale() && getAutozoomEnabled() == _other.getAutozoomEnabled() && getAutozoomSetting() == _other.getAutozoomSetting() && getFollowCarMode() == _other.getFollowCarMode() && getCameraHeadingAngle() == _other.getCameraHeadingAngle() && getCameraPosition() == _other.getCameraPosition() && getScreenDimensions() == _other.getScreenDimensions());
        }
    	inline bool operator!=(const ScreenStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MapViewControlTypes::ScreenStatus> ScreenStatusList;
    /**
     * description: Settings for map viewer.
     */
    struct Status : CommonAPI::Struct<ScreenStatusList> {
    	
    	Status() {
    	}
    	Status(const ScreenStatusList &_statusList)
    	{
    		std::get<0>(values_) = _statusList;
    	}
    	inline const ScreenStatusList &getStatusList() const { return std::get<0>(values_); }
    	inline void setStatusList(const ScreenStatusList &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const Status& _other) const {
                return (getStatusList() == _other.getStatusList());
        }
    	inline bool operator!=(const Status &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.harman.nav.ctrl.mapv.MapViewControlTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 1);
}

}; // struct MapViewControlTypes

} // namespace mapv
} // namespace ctrl
} // namespace nav
} // namespace harman
} // namespace org
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for MapViewType
    template<>
    struct hash<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapViewType> {
        inline size_t operator()(const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapViewType& mapViewType) const {
            return static_cast<int32_t>(mapViewType);
        }
    };
    //Hash for MapScaleMode
    template<>
    struct hash<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapScaleMode> {
        inline size_t operator()(const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapScaleMode& mapScaleMode) const {
            return static_cast<int32_t>(mapScaleMode);
        }
    };
    //Hash for MapPerspective
    template<>
    struct hash<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapPerspective> {
        inline size_t operator()(const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapPerspective& mapPerspective) const {
            return static_cast<int32_t>(mapPerspective);
        }
    };
    //Hash for MapObject
    template<>
    struct hash<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapObject> {
        inline size_t operator()(const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapObject& mapObject) const {
            return static_cast<int32_t>(mapObject);
        }
    };
    //Hash for PanAction
    template<>
    struct hash<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::PanAction> {
        inline size_t operator()(const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::PanAction& panAction) const {
            return static_cast<int32_t>(panAction);
        }
    };
    //Hash for Visibility
    template<>
    struct hash<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::Visibility> {
        inline size_t operator()(const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::Visibility& visibility) const {
            return static_cast<int32_t>(visibility);
        }
    };
    //Hash for Level
    template<>
    struct hash<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::Level> {
        inline size_t operator()(const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::Level& level) const {
            return static_cast<int32_t>(level);
        }
    };
    //Hash for MapTheme
    template<>
    struct hash<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapTheme> {
        inline size_t operator()(const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapTheme& mapTheme) const {
            return static_cast<int32_t>(mapTheme);
        }
    };
    //Hash for AutozoomSetting
    template<>
    struct hash<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::AutozoomSetting> {
        inline size_t operator()(const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::AutozoomSetting& autozoomSetting) const {
            return static_cast<int32_t>(autozoomSetting);
        }
    };
    //Hash for PoiCategoriesVisibleMode
    template<>
    struct hash<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::PoiCategoriesVisibleMode> {
        inline size_t operator()(const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::PoiCategoriesVisibleMode& poiCategoriesVisibleMode) const {
            return static_cast<int32_t>(poiCategoriesVisibleMode);
        }
    };
    //Hash for MapScaleUnit
    template<>
    struct hash<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapScaleUnit> {
        inline size_t operator()(const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapScaleUnit& mapScaleUnit) const {
            return static_cast<int32_t>(mapScaleUnit);
        }
    };
    //Hash for MapScaleType
    template<>
    struct hash<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapScaleType> {
        inline size_t operator()(const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapScaleType& mapScaleType) const {
            return static_cast<int32_t>(mapScaleType);
        }
    };
    //Hash for SelectableMapType
    template<>
    struct hash<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::SelectableMapType> {
        inline size_t operator()(const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::SelectableMapType& selectableMapType) const {
            return static_cast<int32_t>(selectableMapType);
        }
    };
    //Hash for MapViewOrientation
    template<>
    struct hash<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapViewOrientation> {
        inline size_t operator()(const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapViewOrientation& mapViewOrientation) const {
            return static_cast<int32_t>(mapViewOrientation);
        }
    };
    //Hash for MapViewStyleSet
    template<>
    struct hash<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapViewStyleSet> {
        inline size_t operator()(const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::MapViewStyleSet& mapViewStyleSet) const {
            return static_cast<int32_t>(mapViewStyleSet);
        }
    };
    //Hash for EObjectListDomain
    template<>
    struct hash<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::EObjectListDomain> {
        inline size_t operator()(const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::EObjectListDomain& eObjectListDomain) const {
            return static_cast<int32_t>(eObjectListDomain);
        }
    };
    //Hash for KmlType
    template<>
    struct hash<::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::KmlType> {
        inline size_t operator()(const ::v1::org::harman::nav::ctrl::mapv::MapViewControlTypes::KmlType& kmlType) const {
            return static_cast<int32_t>(kmlType);
        }
    };
}


// Compatibility
namespace v1_1 = v1;

#endif // V1_ORG_HARMAN_NAV_CTRL_MAPV_Map_View_Control_Types_HPP_
