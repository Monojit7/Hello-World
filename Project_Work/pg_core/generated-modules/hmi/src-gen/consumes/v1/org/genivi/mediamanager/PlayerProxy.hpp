/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V1_ORG_GENIVI_MEDIAMANAGER_Player_PROXY_HPP_
#define V1_ORG_GENIVI_MEDIAMANAGER_Player_PROXY_HPP_

#include <v1/org/genivi/mediamanager/PlayerProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace genivi {
namespace mediamanager {

template <typename ... _AttributeExtensions>
class PlayerProxy
    : virtual public Player, 
      virtual public PlayerProxyBase,
      virtual public _AttributeExtensions... {
public:
    PlayerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~PlayerProxy();

    typedef Player InterfaceType;


    /**
     * description: Mute or unmute audio. When muted, the player backend will
                         
     *   not produce any audio output.
     */
    /**
     * Returns the wrapper class that provides access to the attribute mute.
     */
    virtual MuteAttribute& getMuteAttribute() {
        return delegate_->getMuteAttribute();
    }
    /**
     * description: Shuffle or unshuffle the current play queue. Shuffling,
                      
     *   un-shuffling and then re-shuffling will yield two different
                      
     *   shufflings (which are not guaranteed to be different)
     */
    /**
     * Returns the wrapper class that provides access to the attribute shuffle.
     */
    virtual ShuffleAttribute& getShuffleAttribute() {
        return delegate_->getShuffleAttribute();
    }
    /**
     * description: Toggle repeat for the current playlist. If enabled,
                         
     *   playback will continue with the first item of the current
                        
     *    play queue when the last item has finished playing
     */
    /**
     * Returns the wrapper class that provides access to the attribute repeat.
     */
    virtual RepeatAttribute& getRepeatAttribute() {
        return delegate_->getRepeatAttribute();
    }
    /**
     * description: Get or set the playback rate. The allowed range of values
                         
     *   is -16 to +16
     */
    /**
     * Returns the wrapper class that provides access to the attribute rate.
     */
    virtual RateAttribute& getRateAttribute() {
        return delegate_->getRateAttribute();
    }
    /**
     * description: Get or set volume, 0 is muted, and 1.0 means maximum
                         
     *   volume. Values outside this range will be capped
     */
    /**
     * Returns the wrapper class that provides access to the attribute volume.
     */
    virtual VolumeAttribute& getVolumeAttribute() {
        return delegate_->getVolumeAttribute();
    }
    /**
     * description: Indicates whether Next() is available
     */
    /**
     * Returns the wrapper class that provides access to the attribute canGoNext.
     */
    virtual CanGoNextAttribute& getCanGoNextAttribute() {
        return delegate_->getCanGoNextAttribute();
    }
    /**
     * description: Indicates whether Previous() is available
     */
    /**
     * Returns the wrapper class that provides access to the attribute canGoPrevious.
     */
    virtual CanGoPreviousAttribute& getCanGoPreviousAttribute() {
        return delegate_->getCanGoPreviousAttribute();
    }
    /**
     * description: Indicates whether Pause() is available
     */
    /**
     * Returns the wrapper class that provides access to the attribute canPause.
     */
    virtual CanPauseAttribute& getCanPauseAttribute() {
        return delegate_->getCanPauseAttribute();
    }
    /**
     * description: Indicates whether Play() is available
     */
    /**
     * Returns the wrapper class that provides access to the attribute canPlay.
     */
    virtual CanPlayAttribute& getCanPlayAttribute() {
        return delegate_->getCanPlayAttribute();
    }
    /**
     * description: Indicates whether Seek and SetPosition() are available
     */
    /**
     * Returns the wrapper class that provides access to the attribute canSeek.
     */
    virtual CanSeekAttribute& getCanSeekAttribute() {
        return delegate_->getCanSeekAttribute();
    }
    /**
     * description: Indicates the index in the play queue of the currently
                         
     *   playing track
     */
    /**
     * Returns the wrapper class that provides access to the attribute currentTrack.
     */
    virtual CurrentTrackAttribute& getCurrentTrackAttribute() {
        return delegate_->getCurrentTrackAttribute();
    }
    /**
     * description: Indicates current playback status
     */
    /**
     * Returns the wrapper class that provides access to the attribute playbackStatus.
     */
    virtual PlaybackStatusAttribute& getPlaybackStatusAttribute() {
        return delegate_->getPlaybackStatusAttribute();
    }
    /**
     * description: Indicates current position in the currently playing
                          track
     */
    /**
     * Returns the wrapper class that provides access to the attribute position.
     */
    virtual PositionAttribute& getPositionAttribute() {
        return delegate_->getPositionAttribute();
    }
    /**
     * description: Indicates duration of the current track
     */
    /**
     * Returns the wrapper class that provides access to the attribute duration.
     */
    virtual DurationAttribute& getDurationAttribute() {
        return delegate_->getDurationAttribute();
    }
    /**
     * description: Indicates playback video only,true: start video play; false: stop
     */
    /**
     * Returns the wrapper class that provides access to the attribute videoPlayStatus.
     */
    virtual VideoPlayStatusAttribute& getVideoPlayStatusAttribute() {
        return delegate_->getVideoPlayStatusAttribute();
    }
    /**
     * description: The metadata of the current element.
           If there is a current track, this
     *   must have following entries to display:
           mandatory: "DisplayName",
     *   "Artists", "Album", "Genre", "Duration"
           addtional: "AlbumArt"
     */
    /**
     * Returns the wrapper class that provides access to the attribute metadata.
     */
    virtual MetadataAttribute& getMetadataAttribute() {
        return delegate_->getMetadataAttribute();
    }


    /**
     * description: Skip to the next track in the play queue. If there is no
                          
     *   next track, playback is stopped. If playback is paused or
                        
     *     stopped, this function will set the next plack to be
                          
     *   played once playback is activated
     * Calls next with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void next(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls next with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> nextAsync(NextAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Open the supplied Uri for playback in the playback engine.
             returns:
     *   INVALID_URI When an invalid URI is supplied
                                  
     *   (decided by playback engine)
                       NO_ERROR    On success
     * param: uri URI of media to play, uri format is decided by backend
     * Calls openUri with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void openUri(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls openUri with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> openUriAsync(const std::string &_uri, OpenUriAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Enqueue the supplied Uri for playback in the playback engine.
             returns:
     *   INVALID_URI When an invalid URI is supplied
                                  
     *   (decided by playback engine)
                      NO_ERROR    On success
     * param: uri URI of media to enqueue, uri format is decided by backend
     * Calls enqueueUri with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void enqueueUri(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls enqueueUri with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> enqueueUriAsync(const std::string &_uri, EnqueueUriAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Dequeue the item with the supplied index in the playback
                         
     *   engine.
     * param: pos index of media to dequeue
     * Calls dequeueIndex with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void dequeueIndex(const uint64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls dequeueIndex with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> dequeueIndexAsync(const uint64_t &_pos, DequeueIndexAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Retrieve the current play queue. The format of the result
                         
     *   object is described in MediaTypes.fidl
             returns: Current play queue
     * Calls getCurrentPlayQueue with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getCurrentPlayQueue(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_playQueue, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getCurrentPlayQueue with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getCurrentPlayQueueAsync(GetCurrentPlayQueueAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Dequeue all elements, emptying the play queue
     * Calls dequeueAll with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void dequeueAll(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls dequeueAll with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> dequeueAllAsync(DequeueAllAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Use the supplied playlist as the current play queue. If
                         
     *   the play queue is invalid, the old play queue is
                         
     *   untouched.
             returns: BAD_PLAYLIST If playlist can not be loaded
          
     *               NO_ERROR     On success
     * Calls openPlaylist with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void openPlaylist(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls openPlaylist with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> openPlaylistAsync(const std::string &_uri, OpenPlaylistAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Pause playback in the playback engine.
                           If already
     *   paused, this has no effect
                           Note: If CanPause is false,
     *   this has no effect
     * Calls pause with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void pause(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls pause with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> pauseAsync(PauseAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Start or resume playback in the playback engine.
                           If
     *   playback is already commencing, this has not effect.
                           If
     *   paused, playback resumes from the current position.
                           If
     *   there is no track to play, calling this has no effect
                          
     *   Note: If CanPlay is false, this has no effect
     * Calls play with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void play(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls play with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> playAsync(PlayAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Starts playback (see Play) if paused
                          Pauses playback (see
     *   Pause) is playing
     * see: Play
     * see: Pause
     * Calls playPause with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void playPause(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls playPause with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> playPauseAsync(PlayPauseAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Loads previous track in play queue
                          If there is no
     *   previous track, playback is stopped
                          If playback is
     *   stopped or paused, it remains this way,
                          but the next
     *   track to be played will the set
                          by this function
           
     *                 Note: If CanGoPrevious is false, this has no effect
     * Calls previous with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void previous(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls previous with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> previousAsync(PreviousAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Seek relatively in the current track
                          If a negative seek
     *   leads to a play position less than 0,
                          the play position
     *   will be set to 0.
                          If a positive seek leads outside the
     *   length of the current
                          track, this is treated like a call
     *   to Next()
                          Note: If CanSeek is false, this has no effect
     * param: pos Relative seek amount in microseconds
     * see: Next
     * Calls seek with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void seek(const int64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls seek with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> seekAsync(const int64_t &_pos, SeekAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Jump to the specified position in the current
                           If the
     *   position is not within range of the current track,
                           do
     *   nothing
             Note: If CanSeek is false, this has no effect
     * param: pos Absolute position in microseconds
     * Calls setPosition with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setPosition(const uint64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setPosition with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setPositionAsync(const uint64_t &_pos, SetPositionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<PlayerProxyBase> delegate_;
};

typedef PlayerProxy<> PlayerProxyDefault;

namespace PlayerExtensions {
    /**
     * description: Mute or unmute audio. When muted, the player backend will
                         
     *   not produce any audio output.
     */
    template <template <typename > class _ExtensionType>
    class MuteAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::MuteAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::MuteAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        MuteAttributeExtension() {}
    #endif
    
        MuteAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getMuteAttribute()) {
        }
    
        inline extension_type& getMuteAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Shuffle or unshuffle the current play queue. Shuffling,
                      
     *   un-shuffling and then re-shuffling will yield two different
                      
     *   shufflings (which are not guaranteed to be different)
     */
    template <template <typename > class _ExtensionType>
    class ShuffleAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::ShuffleAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::ShuffleAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ShuffleAttributeExtension() {}
    #endif
    
        ShuffleAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getShuffleAttribute()) {
        }
    
        inline extension_type& getShuffleAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Toggle repeat for the current playlist. If enabled,
                         
     *   playback will continue with the first item of the current
                        
     *    play queue when the last item has finished playing
     */
    template <template <typename > class _ExtensionType>
    class RepeatAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::RepeatAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::RepeatAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        RepeatAttributeExtension() {}
    #endif
    
        RepeatAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getRepeatAttribute()) {
        }
    
        inline extension_type& getRepeatAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Get or set the playback rate. The allowed range of values
                         
     *   is -16 to +16
     */
    template <template <typename > class _ExtensionType>
    class RateAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::RateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::RateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        RateAttributeExtension() {}
    #endif
    
        RateAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getRateAttribute()) {
        }
    
        inline extension_type& getRateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Get or set volume, 0 is muted, and 1.0 means maximum
                         
     *   volume. Values outside this range will be capped
     */
    template <template <typename > class _ExtensionType>
    class VolumeAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::VolumeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::VolumeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VolumeAttributeExtension() {}
    #endif
    
        VolumeAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getVolumeAttribute()) {
        }
    
        inline extension_type& getVolumeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates whether Next() is available
     */
    template <template <typename > class _ExtensionType>
    class CanGoNextAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::CanGoNextAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::CanGoNextAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CanGoNextAttributeExtension() {}
    #endif
    
        CanGoNextAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getCanGoNextAttribute()) {
        }
    
        inline extension_type& getCanGoNextAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates whether Previous() is available
     */
    template <template <typename > class _ExtensionType>
    class CanGoPreviousAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::CanGoPreviousAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::CanGoPreviousAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CanGoPreviousAttributeExtension() {}
    #endif
    
        CanGoPreviousAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getCanGoPreviousAttribute()) {
        }
    
        inline extension_type& getCanGoPreviousAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates whether Pause() is available
     */
    template <template <typename > class _ExtensionType>
    class CanPauseAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::CanPauseAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::CanPauseAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CanPauseAttributeExtension() {}
    #endif
    
        CanPauseAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getCanPauseAttribute()) {
        }
    
        inline extension_type& getCanPauseAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates whether Play() is available
     */
    template <template <typename > class _ExtensionType>
    class CanPlayAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::CanPlayAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::CanPlayAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CanPlayAttributeExtension() {}
    #endif
    
        CanPlayAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getCanPlayAttribute()) {
        }
    
        inline extension_type& getCanPlayAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates whether Seek and SetPosition() are available
     */
    template <template <typename > class _ExtensionType>
    class CanSeekAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::CanSeekAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::CanSeekAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CanSeekAttributeExtension() {}
    #endif
    
        CanSeekAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getCanSeekAttribute()) {
        }
    
        inline extension_type& getCanSeekAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates the index in the play queue of the currently
                         
     *   playing track
     */
    template <template <typename > class _ExtensionType>
    class CurrentTrackAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::CurrentTrackAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::CurrentTrackAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CurrentTrackAttributeExtension() {}
    #endif
    
        CurrentTrackAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getCurrentTrackAttribute()) {
        }
    
        inline extension_type& getCurrentTrackAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates current playback status
     */
    template <template <typename > class _ExtensionType>
    class PlaybackStatusAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::PlaybackStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::PlaybackStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PlaybackStatusAttributeExtension() {}
    #endif
    
        PlaybackStatusAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getPlaybackStatusAttribute()) {
        }
    
        inline extension_type& getPlaybackStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates current position in the currently playing
                          track
     */
    template <template <typename > class _ExtensionType>
    class PositionAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::PositionAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::PositionAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PositionAttributeExtension() {}
    #endif
    
        PositionAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getPositionAttribute()) {
        }
    
        inline extension_type& getPositionAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates duration of the current track
     */
    template <template <typename > class _ExtensionType>
    class DurationAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::DurationAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::DurationAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DurationAttributeExtension() {}
    #endif
    
        DurationAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getDurationAttribute()) {
        }
    
        inline extension_type& getDurationAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates playback video only,true: start video play; false: stop
     */
    template <template <typename > class _ExtensionType>
    class VideoPlayStatusAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::VideoPlayStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::VideoPlayStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VideoPlayStatusAttributeExtension() {}
    #endif
    
        VideoPlayStatusAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getVideoPlayStatusAttribute()) {
        }
    
        inline extension_type& getVideoPlayStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: The metadata of the current element.
           If there is a current track, this
     *   must have following entries to display:
           mandatory: "DisplayName",
     *   "Artists", "Album", "Genre", "Duration"
           addtional: "AlbumArt"
     */
    template <template <typename > class _ExtensionType>
    class MetadataAttributeExtension {
     public:
        typedef _ExtensionType<PlayerProxyBase::MetadataAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PlayerProxyBase::MetadataAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        MetadataAttributeExtension() {}
    #endif
    
        MetadataAttributeExtension(PlayerProxyBase& proxy): attributeExtension_(proxy.getMetadataAttribute()) {
        }
    
        inline extension_type& getMetadataAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace PlayerExtensions

//
// PlayerProxy Implementation
//
template <typename ... _AttributeExtensions>
PlayerProxy<_AttributeExtensions...>::PlayerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<PlayerProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<PlayerProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
PlayerProxy<_AttributeExtensions...>::~PlayerProxy() {
}

/**
 * description: Skip to the next track in the play queue. If there is no
                      
 *   next track, playback is stopped. If playback is paused or
                    
 *     stopped, this function will set the next plack to be
                      
 *   played once playback is activated
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::next(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->next(_internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::nextAsync(NextAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->nextAsync(_callback, _info);
}
/**
 * description: Open the supplied Uri for playback in the playback engine.
         returns:
 *   INVALID_URI When an invalid URI is supplied
                              
 *   (decided by playback engine)
                   NO_ERROR    On success
 * param: uri URI of media to play, uri format is decided by backend
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::openUri(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->openUri(_uri, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::openUriAsync(const std::string &_uri, OpenUriAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->openUriAsync(_uri, _callback, _info);
}
/**
 * description: Enqueue the supplied Uri for playback in the playback engine.
         returns:
 *   INVALID_URI When an invalid URI is supplied
                              
 *   (decided by playback engine)
                  NO_ERROR    On success
 * param: uri URI of media to enqueue, uri format is decided by backend
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::enqueueUri(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->enqueueUri(_uri, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::enqueueUriAsync(const std::string &_uri, EnqueueUriAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->enqueueUriAsync(_uri, _callback, _info);
}
/**
 * description: Dequeue the item with the supplied index in the playback
                     
 *   engine.
 * param: pos index of media to dequeue
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::dequeueIndex(const uint64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->dequeueIndex(_pos, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::dequeueIndexAsync(const uint64_t &_pos, DequeueIndexAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->dequeueIndexAsync(_pos, _callback, _info);
}
/**
 * description: Retrieve the current play queue. The format of the result
                     
 *   object is described in MediaTypes.fidl
         returns: Current play queue
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::getCurrentPlayQueue(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_playQueue, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->getCurrentPlayQueue(_internalCallStatus, _playQueue, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::getCurrentPlayQueueAsync(GetCurrentPlayQueueAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getCurrentPlayQueueAsync(_callback, _info);
}
/**
 * description: Dequeue all elements, emptying the play queue
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::dequeueAll(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->dequeueAll(_internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::dequeueAllAsync(DequeueAllAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->dequeueAllAsync(_callback, _info);
}
/**
 * description: Use the supplied playlist as the current play queue. If
                     
 *   the play queue is invalid, the old play queue is
                     
 *   untouched.
         returns: BAD_PLAYLIST If playlist can not be loaded
      
 *               NO_ERROR     On success
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::openPlaylist(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->openPlaylist(_uri, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::openPlaylistAsync(const std::string &_uri, OpenPlaylistAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->openPlaylistAsync(_uri, _callback, _info);
}
/**
 * description: Pause playback in the playback engine.
                       If already
 *   paused, this has no effect
                       Note: If CanPause is false,
 *   this has no effect
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::pause(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->pause(_internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::pauseAsync(PauseAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->pauseAsync(_callback, _info);
}
/**
 * description: Start or resume playback in the playback engine.
                       If
 *   playback is already commencing, this has not effect.
                       If
 *   paused, playback resumes from the current position.
                       If
 *   there is no track to play, calling this has no effect
                      
 *   Note: If CanPlay is false, this has no effect
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::play(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->play(_internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::playAsync(PlayAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->playAsync(_callback, _info);
}
/**
 * description: Starts playback (see Play) if paused
                      Pauses playback (see
 *   Pause) is playing
 * see: Play
 * see: Pause
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::playPause(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->playPause(_internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::playPauseAsync(PlayPauseAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->playPauseAsync(_callback, _info);
}
/**
 * description: Loads previous track in play queue
                      If there is no
 *   previous track, playback is stopped
                      If playback is
 *   stopped or paused, it remains this way,
                      but the next
 *   track to be played will the set
                      by this function
       
 *                 Note: If CanGoPrevious is false, this has no effect
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::previous(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->previous(_internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::previousAsync(PreviousAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->previousAsync(_callback, _info);
}
/**
 * description: Seek relatively in the current track
                      If a negative seek
 *   leads to a play position less than 0,
                      the play position
 *   will be set to 0.
                      If a positive seek leads outside the
 *   length of the current
                      track, this is treated like a call
 *   to Next()
                      Note: If CanSeek is false, this has no effect
 * param: pos Relative seek amount in microseconds
 * see: Next
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::seek(const int64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->seek(_pos, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::seekAsync(const int64_t &_pos, SeekAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->seekAsync(_pos, _callback, _info);
}
/**
 * description: Jump to the specified position in the current
                       If the
 *   position is not within range of the current track,
                       do
 *   nothing
         Note: If CanSeek is false, this has no effect
 * param: pos Absolute position in microseconds
 */
template <typename ... _AttributeExtensions>
void PlayerProxy<_AttributeExtensions...>::setPosition(const uint64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->setPosition(_pos, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlayerProxy<_AttributeExtensions...>::setPositionAsync(const uint64_t &_pos, SetPositionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setPositionAsync(_pos, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &PlayerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool PlayerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool PlayerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& PlayerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& PlayerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace mediamanager
} // namespace genivi
} // namespace org
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v1::org::genivi::mediamanager::PlayerProxy,
    _AttributeExtension> {
    typedef typename ::v1::org::genivi::mediamanager::PlayerProxy<
            ::v1::org::genivi::mediamanager::PlayerExtensions::MuteAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::ShuffleAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::RepeatAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::RateAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::VolumeAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::CanGoNextAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::CanGoPreviousAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::CanPauseAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::CanPlayAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::CanSeekAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::CurrentTrackAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::PlaybackStatusAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::PositionAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::DurationAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::VideoPlayStatusAttributeExtension<_AttributeExtension>, 
            ::v1::org::genivi::mediamanager::PlayerExtensions::MetadataAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_GENIVI_MEDIAMANAGER_Player_PROXY_HPP_
