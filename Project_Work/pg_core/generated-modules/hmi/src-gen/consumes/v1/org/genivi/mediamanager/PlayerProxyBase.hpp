/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V1_ORG_GENIVI_MEDIAMANAGER_Player_PROXY_BASE_HPP_
#define V1_ORG_GENIVI_MEDIAMANAGER_Player_PROXY_BASE_HPP_

#include <v1/org/genivi/mediamanager/Player.hpp>


#include <v1/org/genivi/mediamanager/MediaTypes.hpp>
#include <v1/org/genivi/mediamanager/PlayerTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace genivi {
namespace mediamanager {

class PlayerProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableAttribute<::v1::org::genivi::mediamanager::PlayerTypes::MuteStatus> MuteAttribute;
    typedef CommonAPI::ObservableAttribute<::v1::org::genivi::mediamanager::PlayerTypes::ShuffleStatus> ShuffleAttribute;
    typedef CommonAPI::ObservableAttribute<::v1::org::genivi::mediamanager::PlayerTypes::RepeatStatus> RepeatAttribute;
    typedef CommonAPI::ObservableAttribute<double> RateAttribute;
    typedef CommonAPI::ObservableAttribute<double> VolumeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> CanGoNextAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> CanGoPreviousAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> CanPauseAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> CanPlayAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> CanSeekAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<uint64_t> CurrentTrackAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::org::genivi::mediamanager::PlayerTypes::PlaybackStatus> PlaybackStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<uint64_t> PositionAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<uint64_t> DurationAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> VideoPlayStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::org::genivi::mediamanager::MediaTypes::ResultMap> MetadataAttribute;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> NextAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> OpenUriAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> EnqueueUriAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> DequeueIndexAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> GetCurrentPlayQueueAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> DequeueAllAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> OpenPlaylistAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> PauseAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> PlayAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> PlayPauseAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> PreviousAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> SeekAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError&)> SetPositionAsyncCallback;

    /**
     * description: Mute or unmute audio. When muted, the player backend will
                         
     *   not produce any audio output.
     */
    virtual MuteAttribute& getMuteAttribute() = 0;
    /**
     * description: Shuffle or unshuffle the current play queue. Shuffling,
                      
     *   un-shuffling and then re-shuffling will yield two different
                      
     *   shufflings (which are not guaranteed to be different)
     */
    virtual ShuffleAttribute& getShuffleAttribute() = 0;
    /**
     * description: Toggle repeat for the current playlist. If enabled,
                         
     *   playback will continue with the first item of the current
                        
     *    play queue when the last item has finished playing
     */
    virtual RepeatAttribute& getRepeatAttribute() = 0;
    /**
     * description: Get or set the playback rate. The allowed range of values
                         
     *   is -16 to +16
     */
    virtual RateAttribute& getRateAttribute() = 0;
    /**
     * description: Get or set volume, 0 is muted, and 1.0 means maximum
                         
     *   volume. Values outside this range will be capped
     */
    virtual VolumeAttribute& getVolumeAttribute() = 0;
    /**
     * description: Indicates whether Next() is available
     */
    virtual CanGoNextAttribute& getCanGoNextAttribute() = 0;
    /**
     * description: Indicates whether Previous() is available
     */
    virtual CanGoPreviousAttribute& getCanGoPreviousAttribute() = 0;
    /**
     * description: Indicates whether Pause() is available
     */
    virtual CanPauseAttribute& getCanPauseAttribute() = 0;
    /**
     * description: Indicates whether Play() is available
     */
    virtual CanPlayAttribute& getCanPlayAttribute() = 0;
    /**
     * description: Indicates whether Seek and SetPosition() are available
     */
    virtual CanSeekAttribute& getCanSeekAttribute() = 0;
    /**
     * description: Indicates the index in the play queue of the currently
                         
     *   playing track
     */
    virtual CurrentTrackAttribute& getCurrentTrackAttribute() = 0;
    /**
     * description: Indicates current playback status
     */
    virtual PlaybackStatusAttribute& getPlaybackStatusAttribute() = 0;
    /**
     * description: Indicates current position in the currently playing
                          track
     */
    virtual PositionAttribute& getPositionAttribute() = 0;
    /**
     * description: Indicates duration of the current track
     */
    virtual DurationAttribute& getDurationAttribute() = 0;
    /**
     * description: Indicates playback video only,true: start video play; false: stop
     */
    virtual VideoPlayStatusAttribute& getVideoPlayStatusAttribute() = 0;
    /**
     * description: The metadata of the current element.
           If there is a current track, this
     *   must have following entries to display:
           mandatory: "DisplayName",
     *   "Artists", "Album", "Genre", "Duration"
           addtional: "AlbumArt"
     */
    virtual MetadataAttribute& getMetadataAttribute() = 0;


    /**
     * description: Skip to the next track in the play queue. If there is no
                          
     *   next track, playback is stopped. If playback is paused or
                        
     *     stopped, this function will set the next plack to be
                          
     *   played once playback is activated
     */
    virtual void next(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> nextAsync(NextAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Open the supplied Uri for playback in the playback engine.
             returns:
     *   INVALID_URI When an invalid URI is supplied
                                  
     *   (decided by playback engine)
                       NO_ERROR    On success
     * param: uri URI of media to play, uri format is decided by backend
     */
    virtual void openUri(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> openUriAsync(const std::string &_uri, OpenUriAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Enqueue the supplied Uri for playback in the playback engine.
             returns:
     *   INVALID_URI When an invalid URI is supplied
                                  
     *   (decided by playback engine)
                      NO_ERROR    On success
     * param: uri URI of media to enqueue, uri format is decided by backend
     */
    virtual void enqueueUri(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> enqueueUriAsync(const std::string &_uri, EnqueueUriAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Dequeue the item with the supplied index in the playback
                         
     *   engine.
     * param: pos index of media to dequeue
     */
    virtual void dequeueIndex(const uint64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> dequeueIndexAsync(const uint64_t &_pos, DequeueIndexAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Retrieve the current play queue. The format of the result
                         
     *   object is described in MediaTypes.fidl
             returns: Current play queue
     */
    virtual void getCurrentPlayQueue(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::MediaTypes::ResultMapList &_playQueue, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getCurrentPlayQueueAsync(GetCurrentPlayQueueAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Dequeue all elements, emptying the play queue
     */
    virtual void dequeueAll(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> dequeueAllAsync(DequeueAllAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Use the supplied playlist as the current play queue. If
                         
     *   the play queue is invalid, the old play queue is
                         
     *   untouched.
             returns: BAD_PLAYLIST If playlist can not be loaded
          
     *               NO_ERROR     On success
     */
    virtual void openPlaylist(const std::string &_uri, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> openPlaylistAsync(const std::string &_uri, OpenPlaylistAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Pause playback in the playback engine.
                           If already
     *   paused, this has no effect
                           Note: If CanPause is false,
     *   this has no effect
     */
    virtual void pause(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> pauseAsync(PauseAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Start or resume playback in the playback engine.
                           If
     *   playback is already commencing, this has not effect.
                           If
     *   paused, playback resumes from the current position.
                           If
     *   there is no track to play, calling this has no effect
                          
     *   Note: If CanPlay is false, this has no effect
     */
    virtual void play(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> playAsync(PlayAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Starts playback (see Play) if paused
                          Pauses playback (see
     *   Pause) is playing
     * see: Play
     * see: Pause
     */
    virtual void playPause(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> playPauseAsync(PlayPauseAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Loads previous track in play queue
                          If there is no
     *   previous track, playback is stopped
                          If playback is
     *   stopped or paused, it remains this way,
                          but the next
     *   track to be played will the set
                          by this function
           
     *                 Note: If CanGoPrevious is false, this has no effect
     */
    virtual void previous(CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> previousAsync(PreviousAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Seek relatively in the current track
                          If a negative seek
     *   leads to a play position less than 0,
                          the play position
     *   will be set to 0.
                          If a positive seek leads outside the
     *   length of the current
                          track, this is treated like a call
     *   to Next()
                          Note: If CanSeek is false, this has no effect
     * param: pos Relative seek amount in microseconds
     * see: Next
     */
    virtual void seek(const int64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> seekAsync(const int64_t &_pos, SeekAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Jump to the specified position in the current
                           If the
     *   position is not within range of the current track,
                           do
     *   nothing
             Note: If CanSeek is false, this has no effect
     * param: pos Absolute position in microseconds
     */
    virtual void setPosition(const uint64_t &_pos, CommonAPI::CallStatus &_internalCallStatus, ::v1::org::genivi::mediamanager::PlayerTypes::PlayerError &_e, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setPositionAsync(const uint64_t &_pos, SetPositionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace mediamanager
} // namespace genivi
} // namespace org
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_GENIVI_MEDIAMANAGER_Player_PROXY_BASE_HPP_
