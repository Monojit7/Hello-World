/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * description: package defines all the structures needed to request the configuration of the
 *   functionality types
 * author: MGEG_Tuner
 */
#ifndef V2_IVIRADIO_CONFIGURATION_Configuration_Options_Getter_HPP_
#define V2_IVIRADIO_CONFIGURATION_Configuration_Options_Getter_HPP_


#include <v2/IVIRadio/Configuration/ConfigurationTypesEnum.hpp>
#include <v2/IVIRadio/Types/Types.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <CommonAPI/Variant.hpp>
#include <cstdint>
#include <memory>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v2 {
namespace IVIRadio {
namespace Configuration {

struct ConfigurationOptionsGetter {
    struct EPGOptionsGet : CommonAPI::Struct<bool> {
    	
    	EPGOptionsGet() {
    		std::get<0>(values_) = false;
    	}
    	EPGOptionsGet(const bool &_dummy)
    	{
    		std::get<0>(values_) = _dummy;
    	}
    	inline const bool &getDummy() const { return std::get<0>(values_); }
    	inline void setDummy(const bool _value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const EPGOptionsGet& _other) const {
                return (getDummy() == _other.getDummy());
        }
    	inline bool operator!=(const EPGOptionsGet &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct TPEGOptionsGet : CommonAPI::Struct<bool> {
    	
    	TPEGOptionsGet() {
    		std::get<0>(values_) = false;
    	}
    	TPEGOptionsGet(const bool &_dummy)
    	{
    		std::get<0>(values_) = _dummy;
    	}
    	inline const bool &getDummy() const { return std::get<0>(values_); }
    	inline void setDummy(const bool _value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const TPEGOptionsGet& _other) const {
                return (getDummy() == _other.getDummy());
        }
    	inline bool operator!=(const TPEGOptionsGet &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct RegionalisationOptionsGet : CommonAPI::Struct<::v2::IVIRadio::Types::Types::DeviceTypes> {
    	
    	RegionalisationOptionsGet() {
    	}
    	RegionalisationOptionsGet(const ::v2::IVIRadio::Types::Types::DeviceTypes &_deviceTypes)
    	{
    		std::get<0>(values_) = _deviceTypes;
    	}
    	/**
    	 * description: device types for which coding options are requested. here only AMFM makes sense
    	 */
    	inline const ::v2::IVIRadio::Types::Types::DeviceTypes &getDeviceTypes() const { return std::get<0>(values_); }
    	inline void setDeviceTypes(const ::v2::IVIRadio::Types::Types::DeviceTypes &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const RegionalisationOptionsGet& _other) const {
                return (getDeviceTypes() == _other.getDeviceTypes());
        }
    	inline bool operator!=(const RegionalisationOptionsGet &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct DLSOptionsGet : CommonAPI::Struct<::v2::IVIRadio::Types::Types::DeviceTypes> {
    	
    	DLSOptionsGet() {
    	}
    	DLSOptionsGet(const ::v2::IVIRadio::Types::Types::DeviceTypes &_deviceTypes)
    	{
    		std::get<0>(values_) = _deviceTypes;
    	}
    	/**
    	 * description: device types for which coding options are requested. here only AMFM makes sense
    	 */
    	inline const ::v2::IVIRadio::Types::Types::DeviceTypes &getDeviceTypes() const { return std::get<0>(values_); }
    	inline void setDeviceTypes(const ::v2::IVIRadio::Types::Types::DeviceTypes &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const DLSOptionsGet& _other) const {
                return (getDeviceTypes() == _other.getDeviceTypes());
        }
    	inline bool operator!=(const DLSOptionsGet &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct AvailableBandoptionsGet : CommonAPI::Struct<::v2::IVIRadio::Types::Types::DeviceTypes> {
    	
    	AvailableBandoptionsGet() {
    	}
    	AvailableBandoptionsGet(const ::v2::IVIRadio::Types::Types::DeviceTypes &_deviceTypes)
    	{
    		std::get<0>(values_) = _deviceTypes;
    	}
    	/**
    	 * description: device types for which available band are requested
    	 */
    	inline const ::v2::IVIRadio::Types::Types::DeviceTypes &getDeviceTypes() const { return std::get<0>(values_); }
    	inline void setDeviceTypes(const ::v2::IVIRadio::Types::Types::DeviceTypes &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const AvailableBandoptionsGet& _other) const {
                return (getDeviceTypes() == _other.getDeviceTypes());
        }
    	inline bool operator!=(const AvailableBandoptionsGet &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct RTOptionsGet : CommonAPI::Struct<::v2::IVIRadio::Types::Types::DeviceTypes> {
    	
    	RTOptionsGet() {
    	}
    	RTOptionsGet(const ::v2::IVIRadio::Types::Types::DeviceTypes &_deviceTypes)
    	{
    		std::get<0>(values_) = _deviceTypes;
    	}
    	/**
    	 * description: device types for which coding options are requested. here only AMFM makes sense
    	 */
    	inline const ::v2::IVIRadio::Types::Types::DeviceTypes &getDeviceTypes() const { return std::get<0>(values_); }
    	inline void setDeviceTypes(const ::v2::IVIRadio::Types::Types::DeviceTypes &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const RTOptionsGet& _other) const {
                return (getDeviceTypes() == _other.getDeviceTypes());
        }
    	inline bool operator!=(const RTOptionsGet &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct CoverageAreaOptionsGet : CommonAPI::Struct<::v2::IVIRadio::Types::Types::DeviceTypes> {
    	
    	CoverageAreaOptionsGet() {
    	}
    	CoverageAreaOptionsGet(const ::v2::IVIRadio::Types::Types::DeviceTypes &_deviceTypes)
    	{
    		std::get<0>(values_) = _deviceTypes;
    	}
    	/**
    	 * description: device types for which country variants are requested
    	 */
    	inline const ::v2::IVIRadio::Types::Types::DeviceTypes &getDeviceTypes() const { return std::get<0>(values_); }
    	inline void setDeviceTypes(const ::v2::IVIRadio::Types::Types::DeviceTypes &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const CoverageAreaOptionsGet& _other) const {
                return (getDeviceTypes() == _other.getDeviceTypes());
        }
    	inline bool operator!=(const CoverageAreaOptionsGet &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct AMModiOptionsGet : CommonAPI::Struct<::v2::IVIRadio::Types::Types::DeviceType> {
    	
    	AMModiOptionsGet() {
    	}
    	AMModiOptionsGet(const ::v2::IVIRadio::Types::Types::DeviceType &_deviceType)
    	{
    		std::get<0>(values_) = _deviceType;
    	}
    	/**
    	 * description: device type for am modi. In this special case only AM makes sense
    	 */
    	inline const ::v2::IVIRadio::Types::Types::DeviceType &getDeviceType() const { return std::get<0>(values_); }
    	inline void setDeviceType(const ::v2::IVIRadio::Types::Types::DeviceType &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const AMModiOptionsGet& _other) const {
                return (getDeviceType() == _other.getDeviceType());
        }
    	inline bool operator!=(const AMModiOptionsGet &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct RDSOptionsGet : CommonAPI::Struct<::v2::IVIRadio::Types::Types::DeviceTypes> {
    	
    	RDSOptionsGet() {
    	}
    	RDSOptionsGet(const ::v2::IVIRadio::Types::Types::DeviceTypes &_deviceTypes)
    	{
    		std::get<0>(values_) = _deviceTypes;
    	}
    	/**
    	 * description: device types for which coding options are requested. here only AMFM makes sense
    	 */
    	inline const ::v2::IVIRadio::Types::Types::DeviceTypes &getDeviceTypes() const { return std::get<0>(values_); }
    	inline void setDeviceTypes(const ::v2::IVIRadio::Types::Types::DeviceTypes &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const RDSOptionsGet& _other) const {
                return (getDeviceTypes() == _other.getDeviceTypes());
        }
    	inline bool operator!=(const RDSOptionsGet &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct InterfaceVersionOptionsGet : CommonAPI::Struct<bool> {
    	
    	InterfaceVersionOptionsGet() {
    		std::get<0>(values_) = false;
    	}
    	InterfaceVersionOptionsGet(const bool &_dummy)
    	{
    		std::get<0>(values_) = _dummy;
    	}
    	inline const bool &getDummy() const { return std::get<0>(values_); }
    	inline void setDummy(const bool _value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const InterfaceVersionOptionsGet& _other) const {
                return (getDummy() == _other.getDummy());
        }
    	inline bool operator!=(const InterfaceVersionOptionsGet &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct HDOptionsGet : CommonAPI::Struct<::v2::IVIRadio::Types::Types::DeviceType> {
    	
    	HDOptionsGet() {
    	}
    	HDOptionsGet(const ::v2::IVIRadio::Types::Types::DeviceType &_deviceType)
    	{
    		std::get<0>(values_) = _deviceType;
    	}
    	/**
    	 * description: device type for the HD Options are. Here only FM makes sense
    	 */
    	inline const ::v2::IVIRadio::Types::Types::DeviceType &getDeviceType() const { return std::get<0>(values_); }
    	inline void setDeviceType(const ::v2::IVIRadio::Types::Types::DeviceType &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const HDOptionsGet& _other) const {
                return (getDeviceType() == _other.getDeviceType());
        }
    	inline bool operator!=(const HDOptionsGet &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct CountryVariantsOptionsGet : CommonAPI::Struct<::v2::IVIRadio::Types::Types::DeviceTypes> {
    	
    	CountryVariantsOptionsGet() {
    	}
    	CountryVariantsOptionsGet(const ::v2::IVIRadio::Types::Types::DeviceTypes &_deviceTypes)
    	{
    		std::get<0>(values_) = _deviceTypes;
    	}
    	/**
    	 * description: device Types for which the country variants are requested
    	 */
    	inline const ::v2::IVIRadio::Types::Types::DeviceTypes &getDeviceTypes() const { return std::get<0>(values_); }
    	inline void setDeviceTypes(const ::v2::IVIRadio::Types::Types::DeviceTypes &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const CountryVariantsOptionsGet& _other) const {
                return (getDeviceTypes() == _other.getDeviceTypes());
        }
    	inline bool operator!=(const CountryVariantsOptionsGet &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct FollowingOptionsGet : CommonAPI::Struct<ConfigurationTypesEnum::FollowingTypes> {
    	
    	FollowingOptionsGet() {
    	}
    	FollowingOptionsGet(const ConfigurationTypesEnum::FollowingTypes &_followingTypes)
    	{
    		std::get<0>(values_) = _followingTypes;
    	}
    	inline const ConfigurationTypesEnum::FollowingTypes &getFollowingTypes() const { return std::get<0>(values_); }
    	inline void setFollowingTypes(const ConfigurationTypesEnum::FollowingTypes &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const FollowingOptionsGet& _other) const {
                return (getFollowingTypes() == _other.getFollowingTypes());
        }
    	inline bool operator!=(const FollowingOptionsGet &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct SmartFavoriteOptionsGet : CommonAPI::Struct<::v2::IVIRadio::Types::Types::DeviceType> {
    	
    	SmartFavoriteOptionsGet() {
    	}
    	SmartFavoriteOptionsGet(const ::v2::IVIRadio::Types::Types::DeviceType &_deviceType)
    	{
    		std::get<0>(values_) = _deviceType;
    	}
    	/**
    	 * description: device type for which the smart favorite options are requested. Here only SDARS
    	 *   makes sense
    	 */
    	inline const ::v2::IVIRadio::Types::Types::DeviceType &getDeviceType() const { return std::get<0>(values_); }
    	inline void setDeviceType(const ::v2::IVIRadio::Types::Types::DeviceType &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const SmartFavoriteOptionsGet& _other) const {
                return (getDeviceType() == _other.getDeviceType());
        }
    	inline bool operator!=(const SmartFavoriteOptionsGet &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef CommonAPI::Variant<HDOptionsGet, FollowingOptionsGet, SmartFavoriteOptionsGet, CountryVariantsOptionsGet, CoverageAreaOptionsGet, AvailableBandoptionsGet, InterfaceVersionOptionsGet, AMModiOptionsGet, RDSOptionsGet, RTOptionsGet, DLSOptionsGet, RegionalisationOptionsGet>  FunctionalityOptionGet;
    /**
     * description: Array of functionality options. This parameter is part of the request method.
     *   Using a array of union types enables to request  multiple configuration of
     *   different functionality types at once.
     */
    typedef std::vector<ConfigurationOptionsGetter::FunctionalityOptionGet> FuntionalityOptionsGet;



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "IVIRadio.Configuration.ConfigurationOptionsGetter";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(2, 0);
}

}; // struct ConfigurationOptionsGetter

} // namespace Configuration
} // namespace IVIRadio
} // namespace v2

namespace CommonAPI {
}


namespace std {
}


// Compatibility
namespace v2_0 = v2;

#endif // V2_IVIRADIO_CONFIGURATION_Configuration_Options_Getter_HPP_
