/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * author: EGMG_Tuner
 */
#ifndef V2_IVIRADIO_STATION_Station_PROXY_BASE_HPP_
#define V2_IVIRADIO_STATION_Station_PROXY_BASE_HPP_

#include <v2/IVIRadio/Station/Station.hpp>


#include <v2/IVIRadio/Station/StationTypes.hpp>
#include <v2/IVIRadio/Types/Types.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v2 {
namespace IVIRadio {
namespace Station {

class StationProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::v2::IVIRadio::Station::StationTypes::Station, uint32_t, ::v2::IVIRadio::Types::Types::ErrorCodes
    > CurrentStationEvent;
    typedef CommonAPI::Event<
        ::v2::IVIRadio::Station::StationTypes::SeekData, uint32_t, ::v2::IVIRadio::Types::Types::ErrorCodes
    > SeekEvent;
    typedef CommonAPI::Event<
        ::v2::IVIRadio::Station::StationTypes::StationList, uint32_t, ::v2::IVIRadio::Types::Types::ErrorCodes
    > StationListEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const uint32_t&, const ::v2::IVIRadio::Types::Types::Feedback&)> AbortTuneAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint32_t&, const ::v2::IVIRadio::Types::Types::Feedback&)> MakePermanentAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint32_t&, const ::v2::IVIRadio::Types::Types::Feedback&)> ControlUpdateAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint32_t&, const ::v2::IVIRadio::Types::Types::Feedback&)> SeekAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint32_t&, const ::v2::IVIRadio::Types::Types::Feedback&)> StartTuneAsyncCallback;


    /**
     * description: information about the currently active station
     */
    virtual CurrentStationEvent& getCurrentStationEvent() = 0;
    /**
     * description: seek information sent during an active search.
     */
    virtual SeekEvent& getSeekEvent() = 0;
    /**
     * description: station list information.
     */
    virtual StationListEvent& getStationListEvent() = 0;

    /**
     * description: deallocate a tuner resource
     */
    virtual void abortTune(const ::v2::IVIRadio::Types::Types::DeviceType &_deviceType, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> abortTuneAsync(const ::v2::IVIRadio::Types::Types::DeviceType &_deviceType, const uint32_t &_handle, AbortTuneAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: make station permanent (tuning information will not be removed from middleware
     *   even if station is not receivable any more)
     */
    virtual void makePermanent(const ::v2::IVIRadio::Types::Types::StationSelector &_station, const bool &_permanent, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> makePermanentAsync(const ::v2::IVIRadio::Types::Types::StationSelector &_station, const bool &_permanent, const uint32_t &_handle, MakePermanentAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: request explicit update of currentStation or stationList information. E.g.
     *   necessary after startup.
     */
    virtual void controlUpdate(const ::v2::IVIRadio::Station::StationTypes::UpdateElement &_updateElement, const ::v2::IVIRadio::Types::Types::UpdateType &_updateType, const uint32_t &_sourceType, const uint32_t &_stationType, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> controlUpdateAsync(const ::v2::IVIRadio::Station::StationTypes::UpdateElement &_updateElement, const ::v2::IVIRadio::Types::Types::UpdateType &_updateType, const uint32_t &_sourceType, const uint32_t &_stationType, const uint32_t &_handle, ControlUpdateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: starts/stops a seek process
     */
    virtual void seek(const ::v2::IVIRadio::Types::Types::DeviceType &_device, const ::v2::IVIRadio::Station::StationTypes::SeekMode &_seekMode, const uint8_t &_genre, const uint32_t &_flags, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> seekAsync(const ::v2::IVIRadio::Types::Types::DeviceType &_device, const ::v2::IVIRadio::Station::StationTypes::SeekMode &_seekMode, const uint8_t &_genre, const uint32_t &_flags, const uint32_t &_handle, SeekAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: start tuning a frequency or selecting a station
     */
    virtual void startTune(const ::v2::IVIRadio::Types::Types::StationSelector &_station, const ::v2::IVIRadio::Station::StationTypes::SelectionMode &_selectionMode, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startTuneAsync(const ::v2::IVIRadio::Types::Types::StationSelector &_station, const ::v2::IVIRadio::Station::StationTypes::SelectionMode &_selectionMode, const uint32_t &_handle, StartTuneAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace Station
} // namespace IVIRadio
} // namespace v2


// Compatibility
namespace v2_1 = v2;

#endif // V2_IVIRADIO_STATION_Station_PROXY_BASE_HPP_
