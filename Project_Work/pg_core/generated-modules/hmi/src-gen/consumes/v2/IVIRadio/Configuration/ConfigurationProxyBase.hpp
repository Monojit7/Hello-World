/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * author: EGMG_Tuner
 */
#ifndef V2_IVIRADIO_CONFIGURATION_Configuration_PROXY_BASE_HPP_
#define V2_IVIRADIO_CONFIGURATION_Configuration_PROXY_BASE_HPP_

#include <v2/IVIRadio/Configuration/Configuration.hpp>


#include <v2/IVIRadio/Configuration/ConfigurationOptions.hpp>
#include <v2/IVIRadio/Configuration/ConfigurationOptionsGetter.hpp>
#include <v2/IVIRadio/Configuration/ConfigurationTypesEnum.hpp>
#include <v2/IVIRadio/Types/Types.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v2 {
namespace IVIRadio {
namespace Configuration {

class ConfigurationProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::v2::IVIRadio::Configuration::ConfigurationTypesEnum::FunctionalityTypes, ::v2::IVIRadio::Configuration::ConfigurationOptions::FuntionalityOptions, uint32_t, ::v2::IVIRadio::Types::Types::ErrorCodes
    > FunctionalityConfigurationEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const uint32_t&, const ::v2::IVIRadio::Types::Types::Feedback&)> ChangeFunctionalityConfigurationAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint32_t&, const ::v2::IVIRadio::Types::Types::Feedback&)> RequestFunctionalityConfigurationAsyncCallback;


    /**
     * description: broadcast to return the requested functionality configuration
     */
    virtual FunctionalityConfigurationEvent& getFunctionalityConfigurationEvent() = 0;

    /**
     * description: change configuration of a basic functionalites like following or smart favorite
     *   options. it is possible to set more then one configuration at a time by adding
     *   multiple functionality types and configuration to the arrays
     */
    virtual void changeFunctionalityConfiguration(const ::v2::IVIRadio::Configuration::ConfigurationTypesEnum::FunctionalityTypes &_functionalityTypes, const ::v2::IVIRadio::Configuration::ConfigurationOptions::FuntionalityOptions &_functionalityOptionsSet, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> changeFunctionalityConfigurationAsync(const ::v2::IVIRadio::Configuration::ConfigurationTypesEnum::FunctionalityTypes &_functionalityTypes, const ::v2::IVIRadio::Configuration::ConfigurationOptions::FuntionalityOptions &_functionalityOptionsSet, const uint32_t &_handle, ChangeFunctionalityConfigurationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: request configuration of basic functionalities like following or conditional
     *   access. it is possible to request more than one configuration at a time by
     *   adding multiple functionality types and get options to the arrays
     */
    virtual void requestFunctionalityConfiguration(const ::v2::IVIRadio::Configuration::ConfigurationTypesEnum::FunctionalityTypes &_functionalityTypes, const ::v2::IVIRadio::Configuration::ConfigurationOptionsGetter::FuntionalityOptionsGet &_functionalityOptionsGet, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handle_out, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestFunctionalityConfigurationAsync(const ::v2::IVIRadio::Configuration::ConfigurationTypesEnum::FunctionalityTypes &_functionalityTypes, const ::v2::IVIRadio::Configuration::ConfigurationOptionsGetter::FuntionalityOptionsGet &_functionalityOptionsGet, const uint32_t &_handle, RequestFunctionalityConfigurationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace Configuration
} // namespace IVIRadio
} // namespace v2


// Compatibility
namespace v2_1 = v2;

#endif // V2_IVIRADIO_CONFIGURATION_Configuration_PROXY_BASE_HPP_
