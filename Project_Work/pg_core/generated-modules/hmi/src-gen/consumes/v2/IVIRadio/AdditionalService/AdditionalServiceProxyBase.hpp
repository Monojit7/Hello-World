/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * description: Tuner generic and project independent interface for additional services. This
 *   interface provides functions to request data services and to configure them.
 *   Other services like announcements can also be configured.
 * author: EGMG_Tuner
 */
#ifndef V2_IVIRADIO_ADDITIONALSERVICE_Additional_Service_PROXY_BASE_HPP_
#define V2_IVIRADIO_ADDITIONALSERVICE_Additional_Service_PROXY_BASE_HPP_

#include <v2/IVIRadio/AdditionalService/AdditionalService.hpp>


#include <v2/IVIRadio/AdditionalService/AdditionalServiceTypes.hpp>
#include <v2/IVIRadio/AdditionalService/AdditionalServiceTypesOptions.hpp>
#include <v2/IVIRadio/Types/Types.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/ByteBuffer.hpp>
#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Variant.hpp>
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v2 {
namespace IVIRadio {
namespace AdditionalService {

class AdditionalServiceProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::v2::IVIRadio::Types::Types::StationSelectors, ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService, ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::UnifiedServiceOption, ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::DataServiceOption, ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataFormat, ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataType, ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::Data, uint32_t, ::v2::IVIRadio::Types::Types::ErrorCodes
    > DataEvent;
    typedef CommonAPI::Event<
        ::v2::IVIRadio::Types::Types::StationSelectors, ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::AnnouncementConfigurations, ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::arrayAnnouncementStates, uint32_t, ::v2::IVIRadio::Types::Types::ErrorCodes
    > AnnouncementEvent;
    typedef CommonAPI::Event<
        ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::Announcement, uint32_t, ::v2::IVIRadio::Types::Types::ErrorCodes
    > AnnouncementFinishedEvent;
    typedef CommonAPI::Event<
        ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService, ::v2::IVIRadio::Types::Types::arrayStationSelectors, ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::UnifiedServiceOptions, ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::DataServiceOptions, uint32_t, ::v2::IVIRadio::Types::Types::ErrorCodes
    > SubscribedServiceOptionsEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const uint32_t&, const ::v2::IVIRadio::Types::Types::Feedback&)> RequestDataServiceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint32_t&, const ::v2::IVIRadio::Types::Types::Feedback&)> RequestSubscribedServiceOptionsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint32_t&, const ::v2::IVIRadio::Types::Types::Feedback&)> AbortAsyncCallback;


    /**
     * description: Broadcast to return the requested data
     */
    virtual DataEvent& getDataEvent() = 0;
    /**
     * description: Broadcast to provide information about the currently incoming announcement
     */
    virtual AnnouncementEvent& getAnnouncementEvent() = 0;
    /**
     * description: Broadcast to signalize that the announcement is finished
     */
    virtual AnnouncementFinishedEvent& getAnnouncementFinishedEvent() = 0;
    /**
     * description: Broadcast to return the subscribed service options
     */
    virtual SubscribedServiceOptionsEvent& getSubscribedServiceOptionsEvent() = 0;

    /**
     * description: Function to request data from one or many stations for a specific data service.
     *   It is possible to configure the request by the DataServiceOption parameter.
     */
    virtual void requestDataService(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataService, const ::v2::IVIRadio::Types::Types::StationSelectors &_selectors, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::UnifiedServiceOption &_unifiedOptions, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::DataServiceOption &_serviceOptions, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestDataServiceAsync(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataService, const ::v2::IVIRadio::Types::Types::StationSelectors &_selectors, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::UnifiedServiceOption &_unifiedOptions, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::DataServiceOption &_serviceOptions, const uint32_t &_handle, RequestDataServiceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestSubscribedServiceOptions(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataservice, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestSubscribedServiceOptionsAsync(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataservice, const uint32_t &_handle, RequestSubscribedServiceOptionsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: abort a currently active transmission of data
     */
    virtual void abort(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataService, const ::v2::IVIRadio::Types::Types::StationSelectors &_stationSelectors, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::UnifiedServiceOption &_unifiedOptions, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::DataServiceOption &_dataServiceOption, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> abortAsync(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataService, const ::v2::IVIRadio::Types::Types::StationSelectors &_stationSelectors, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::UnifiedServiceOption &_unifiedOptions, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::DataServiceOption &_dataServiceOption, const uint32_t &_handle, AbortAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace AdditionalService
} // namespace IVIRadio
} // namespace v2


// Compatibility
namespace v2_1 = v2;

#endif // V2_IVIRADIO_ADDITIONALSERVICE_Additional_Service_PROXY_BASE_HPP_
