/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * description: Tuner generic and project independent interface for additional services. This
 *   interface provides functions to request data services and to configure them.
 *   Other services like announcements can also be configured.
 * author: EGMG_Tuner
 */
#ifndef V2_IVIRADIO_ADDITIONALSERVICE_Additional_Service_PROXY_HPP_
#define V2_IVIRADIO_ADDITIONALSERVICE_Additional_Service_PROXY_HPP_

#include <v2/IVIRadio/AdditionalService/AdditionalServiceProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v2 {
namespace IVIRadio {
namespace AdditionalService {

template <typename ... _AttributeExtensions>
class AdditionalServiceProxy
    : virtual public AdditionalService, 
      virtual public AdditionalServiceProxyBase,
      virtual public _AttributeExtensions... {
public:
    AdditionalServiceProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~AdditionalServiceProxy();

    typedef AdditionalService InterfaceType;



    /**
     * description: Broadcast to return the requested data
     */
    /**
     * Returns the wrapper class that provides access to the broadcast Data.
     */
    virtual DataEvent& getDataEvent() {
        return delegate_->getDataEvent();
    }
    /**
     * description: Broadcast to provide information about the currently incoming announcement
     */
    /**
     * Returns the wrapper class that provides access to the broadcast Announcement.
     */
    virtual AnnouncementEvent& getAnnouncementEvent() {
        return delegate_->getAnnouncementEvent();
    }
    /**
     * description: Broadcast to signalize that the announcement is finished
     */
    /**
     * Returns the wrapper class that provides access to the broadcast AnnouncementFinished.
     */
    virtual AnnouncementFinishedEvent& getAnnouncementFinishedEvent() {
        return delegate_->getAnnouncementFinishedEvent();
    }
    /**
     * description: Broadcast to return the subscribed service options
     */
    /**
     * Returns the wrapper class that provides access to the broadcast SubscribedServiceOptions.
     */
    virtual SubscribedServiceOptionsEvent& getSubscribedServiceOptionsEvent() {
        return delegate_->getSubscribedServiceOptionsEvent();
    }

    /**
     * description: Function to request data from one or many stations for a specific data service.
     *   It is possible to configure the request by the DataServiceOption parameter.
     * Calls requestDataService with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestDataService(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataService, const ::v2::IVIRadio::Types::Types::StationSelectors &_selectors, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::UnifiedServiceOption &_unifiedOptions, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::DataServiceOption &_serviceOptions, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestDataService with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestDataServiceAsync(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataService, const ::v2::IVIRadio::Types::Types::StationSelectors &_selectors, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::UnifiedServiceOption &_unifiedOptions, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::DataServiceOption &_serviceOptions, const uint32_t &_handle, RequestDataServiceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSubscribedServiceOptions with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestSubscribedServiceOptions(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataservice, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSubscribedServiceOptions with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestSubscribedServiceOptionsAsync(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataservice, const uint32_t &_handle, RequestSubscribedServiceOptionsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: abort a currently active transmission of data
     * Calls abort with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void abort(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataService, const ::v2::IVIRadio::Types::Types::StationSelectors &_stationSelectors, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::UnifiedServiceOption &_unifiedOptions, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::DataServiceOption &_dataServiceOption, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls abort with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> abortAsync(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataService, const ::v2::IVIRadio::Types::Types::StationSelectors &_stationSelectors, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::UnifiedServiceOption &_unifiedOptions, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::DataServiceOption &_dataServiceOption, const uint32_t &_handle, AbortAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<AdditionalServiceProxyBase> delegate_;
};

typedef AdditionalServiceProxy<> AdditionalServiceProxyDefault;


//
// AdditionalServiceProxy Implementation
//
template <typename ... _AttributeExtensions>
AdditionalServiceProxy<_AttributeExtensions...>::AdditionalServiceProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<AdditionalServiceProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<AdditionalServiceProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
AdditionalServiceProxy<_AttributeExtensions...>::~AdditionalServiceProxy() {
}

/**
 * description: Function to request data from one or many stations for a specific data service.
 *   It is possible to configure the request by the DataServiceOption parameter.
 */
template <typename ... _AttributeExtensions>
void AdditionalServiceProxy<_AttributeExtensions...>::requestDataService(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataService, const ::v2::IVIRadio::Types::Types::StationSelectors &_selectors, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::UnifiedServiceOption &_unifiedOptions, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::DataServiceOption &_serviceOptions, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info) {
    if (!_dataService.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->requestDataService(_dataService, _selectors, _unifiedOptions, _serviceOptions, _handle, _internalCallStatus, _handleOut, _feedback, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> AdditionalServiceProxy<_AttributeExtensions...>::requestDataServiceAsync(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataService, const ::v2::IVIRadio::Types::Types::StationSelectors &_selectors, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::UnifiedServiceOption &_unifiedOptions, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::DataServiceOption &_serviceOptions, const uint32_t &_handle, RequestDataServiceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_dataService.validate()) {
        uint32_t handleOut = 0ul;
        ::v2::IVIRadio::Types::Types::Feedback feedback = ::v2::IVIRadio::Types::Types::Feedback::DONE;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, handleOut, feedback);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->requestDataServiceAsync(_dataService, _selectors, _unifiedOptions, _serviceOptions, _handle, _callback, _info);
}
template <typename ... _AttributeExtensions>
void AdditionalServiceProxy<_AttributeExtensions...>::requestSubscribedServiceOptions(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataservice, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info) {
    if (!_dataservice.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->requestSubscribedServiceOptions(_dataservice, _handle, _internalCallStatus, _handleOut, _feedback, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> AdditionalServiceProxy<_AttributeExtensions...>::requestSubscribedServiceOptionsAsync(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataservice, const uint32_t &_handle, RequestSubscribedServiceOptionsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_dataservice.validate()) {
        uint32_t handleOut = 0ul;
        ::v2::IVIRadio::Types::Types::Feedback feedback = ::v2::IVIRadio::Types::Types::Feedback::DONE;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, handleOut, feedback);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->requestSubscribedServiceOptionsAsync(_dataservice, _handle, _callback, _info);
}
/**
 * description: abort a currently active transmission of data
 */
template <typename ... _AttributeExtensions>
void AdditionalServiceProxy<_AttributeExtensions...>::abort(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataService, const ::v2::IVIRadio::Types::Types::StationSelectors &_stationSelectors, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::UnifiedServiceOption &_unifiedOptions, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::DataServiceOption &_dataServiceOption, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_handleOut, ::v2::IVIRadio::Types::Types::Feedback &_feedback, const CommonAPI::CallInfo *_info) {
    if (!_dataService.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->abort(_dataService, _stationSelectors, _unifiedOptions, _dataServiceOption, _handle, _internalCallStatus, _handleOut, _feedback, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> AdditionalServiceProxy<_AttributeExtensions...>::abortAsync(const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypes::DataService &_dataService, const ::v2::IVIRadio::Types::Types::StationSelectors &_stationSelectors, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::UnifiedServiceOption &_unifiedOptions, const ::v2::IVIRadio::AdditionalService::AdditionalServiceTypesOptions::DataServiceOption &_dataServiceOption, const uint32_t &_handle, AbortAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_dataService.validate()) {
        uint32_t handleOut = 0ul;
        ::v2::IVIRadio::Types::Types::Feedback feedback = ::v2::IVIRadio::Types::Types::Feedback::DONE;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, handleOut, feedback);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->abortAsync(_dataService, _stationSelectors, _unifiedOptions, _dataServiceOption, _handle, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &AdditionalServiceProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool AdditionalServiceProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool AdditionalServiceProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& AdditionalServiceProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& AdditionalServiceProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace AdditionalService
} // namespace IVIRadio
} // namespace v2



// Compatibility
namespace v2_1 = v2;

#endif // V2_IVIRADIO_ADDITIONALSERVICE_Additional_Service_PROXY_HPP_
