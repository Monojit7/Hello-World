/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * description: package defines all the structures needed to change the configuration of the
 *   functionality types
 * author: MGEG_Tuner
 */
#ifndef V2_IVIRADIO_CONFIGURATION_Configuration_Options_HPP_
#define V2_IVIRADIO_CONFIGURATION_Configuration_Options_HPP_


#include <v2/IVIRadio/Configuration/ConfigurationTypesEnum.hpp>
#include <v2/IVIRadio/Types/Types.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <CommonAPI/Variant.hpp>
#include <cstdint>
#include <memory>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v2 {
namespace IVIRadio {
namespace Configuration {

struct ConfigurationOptions {
    struct AvailableBandoptions : CommonAPI::Struct<::v2::IVIRadio::Types::Types::SourceTypes, ::v2::IVIRadio::Types::Types::DeviceTypes> {
    	
    	AvailableBandoptions() {
    	}
    	AvailableBandoptions(const ::v2::IVIRadio::Types::Types::SourceTypes &_availableBands, const ::v2::IVIRadio::Types::Types::DeviceTypes &_deviceTypes)
    	{
    		std::get<0>(values_) = _availableBands;
    		std::get<1>(values_) = _deviceTypes;
    	}
    	inline const ::v2::IVIRadio::Types::Types::SourceTypes &getAvailableBands() const { return std::get<0>(values_); }
    	inline void setAvailableBands(const ::v2::IVIRadio::Types::Types::SourceTypes &_value) { std::get<0>(values_) = _value; }
    	inline const ::v2::IVIRadio::Types::Types::DeviceTypes &getDeviceTypes() const { return std::get<1>(values_); }
    	inline void setDeviceTypes(const ::v2::IVIRadio::Types::Types::DeviceTypes &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const AvailableBandoptions& _other) const {
                return (getAvailableBands() == _other.getAvailableBands() && getDeviceTypes() == _other.getDeviceTypes());
        }
    	inline bool operator!=(const AvailableBandoptions &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct CoverageAreaOptions : CommonAPI::Struct<ConfigurationTypesEnum::CountryVariants, ::v2::IVIRadio::Types::Types::DeviceTypes> {
    	
    	CoverageAreaOptions() {
    	}
    	CoverageAreaOptions(const ConfigurationTypesEnum::CountryVariants &_countryVariants, const ::v2::IVIRadio::Types::Types::DeviceTypes &_deviceTypes)
    	{
    		std::get<0>(values_) = _countryVariants;
    		std::get<1>(values_) = _deviceTypes;
    	}
    	/**
    	 * description: possible current receiver areas
    	 */
    	inline const ConfigurationTypesEnum::CountryVariants &getCountryVariants() const { return std::get<0>(values_); }
    	inline void setCountryVariants(const ConfigurationTypesEnum::CountryVariants &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Device Types for  the country variants
    	 */
    	inline const ::v2::IVIRadio::Types::Types::DeviceTypes &getDeviceTypes() const { return std::get<1>(values_); }
    	inline void setDeviceTypes(const ::v2::IVIRadio::Types::Types::DeviceTypes &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const CoverageAreaOptions& _other) const {
                return (getCountryVariants() == _other.getCountryVariants() && getDeviceTypes() == _other.getDeviceTypes());
        }
    	inline bool operator!=(const CoverageAreaOptions &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct DLSOptions : CommonAPI::Struct<::v2::IVIRadio::Types::Types::Activations, ::v2::IVIRadio::Types::Types::DeviceTypes> {
    	
    	DLSOptions() {
    	}
    	DLSOptions(const ::v2::IVIRadio::Types::Types::Activations &_activations, const ::v2::IVIRadio::Types::Types::DeviceTypes &_deviceTypes)
    	{
    		std::get<0>(values_) = _activations;
    		std::get<1>(values_) = _deviceTypes;
    	}
    	inline const ::v2::IVIRadio::Types::Types::Activations &getActivations() const { return std::get<0>(values_); }
    	inline void setActivations(const ::v2::IVIRadio::Types::Types::Activations &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: device types for the coding options
    	 */
    	inline const ::v2::IVIRadio::Types::Types::DeviceTypes &getDeviceTypes() const { return std::get<1>(values_); }
    	inline void setDeviceTypes(const ::v2::IVIRadio::Types::Types::DeviceTypes &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const DLSOptions& _other) const {
                return (getActivations() == _other.getActivations() && getDeviceTypes() == _other.getDeviceTypes());
        }
    	inline bool operator!=(const DLSOptions &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct RDSOptions : CommonAPI::Struct<::v2::IVIRadio::Types::Types::Activations, ::v2::IVIRadio::Types::Types::DeviceTypes> {
    	
    	RDSOptions() {
    	}
    	RDSOptions(const ::v2::IVIRadio::Types::Types::Activations &_activations, const ::v2::IVIRadio::Types::Types::DeviceTypes &_deviceTypes)
    	{
    		std::get<0>(values_) = _activations;
    		std::get<1>(values_) = _deviceTypes;
    	}
    	inline const ::v2::IVIRadio::Types::Types::Activations &getActivations() const { return std::get<0>(values_); }
    	inline void setActivations(const ::v2::IVIRadio::Types::Types::Activations &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: device types for the coding options
    	 */
    	inline const ::v2::IVIRadio::Types::Types::DeviceTypes &getDeviceTypes() const { return std::get<1>(values_); }
    	inline void setDeviceTypes(const ::v2::IVIRadio::Types::Types::DeviceTypes &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const RDSOptions& _other) const {
                return (getActivations() == _other.getActivations() && getDeviceTypes() == _other.getDeviceTypes());
        }
    	inline bool operator!=(const RDSOptions &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct RTOptions : CommonAPI::Struct<::v2::IVIRadio::Types::Types::Activations, ::v2::IVIRadio::Types::Types::DeviceTypes> {
    	
    	RTOptions() {
    	}
    	RTOptions(const ::v2::IVIRadio::Types::Types::Activations &_activations, const ::v2::IVIRadio::Types::Types::DeviceTypes &_deviceTypes)
    	{
    		std::get<0>(values_) = _activations;
    		std::get<1>(values_) = _deviceTypes;
    	}
    	inline const ::v2::IVIRadio::Types::Types::Activations &getActivations() const { return std::get<0>(values_); }
    	inline void setActivations(const ::v2::IVIRadio::Types::Types::Activations &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: device types for the coding options
    	 */
    	inline const ::v2::IVIRadio::Types::Types::DeviceTypes &getDeviceTypes() const { return std::get<1>(values_); }
    	inline void setDeviceTypes(const ::v2::IVIRadio::Types::Types::DeviceTypes &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const RTOptions& _other) const {
                return (getActivations() == _other.getActivations() && getDeviceTypes() == _other.getDeviceTypes());
        }
    	inline bool operator!=(const RTOptions &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct AMModiOptions : CommonAPI::Struct<ConfigurationTypesEnum::AMMode, ::v2::IVIRadio::Types::Types::DeviceType> {
    	
    	AMModiOptions() {
    	}
    	AMModiOptions(const ConfigurationTypesEnum::AMMode &_amMode, const ::v2::IVIRadio::Types::Types::DeviceType &_deviceType)
    	{
    		std::get<0>(values_) = _amMode;
    		std::get<1>(values_) = _deviceType;
    	}
    	/**
    	 * description: possible  modi for amplitude modulation analog device
    	 */
    	inline const ConfigurationTypesEnum::AMMode &getAmMode() const { return std::get<0>(values_); }
    	inline void setAmMode(const ConfigurationTypesEnum::AMMode &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: device type for the am modi. in this special case only am makes sense
    	 */
    	inline const ::v2::IVIRadio::Types::Types::DeviceType &getDeviceType() const { return std::get<1>(values_); }
    	inline void setDeviceType(const ::v2::IVIRadio::Types::Types::DeviceType &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const AMModiOptions& _other) const {
                return (getAmMode() == _other.getAmMode() && getDeviceType() == _other.getDeviceType());
        }
    	inline bool operator!=(const AMModiOptions &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct InterfaceVersionOptions : CommonAPI::Struct<uint32_t, uint32_t> {
    	
    	InterfaceVersionOptions() {
    	}
    	InterfaceVersionOptions(const uint32_t &_minorVersion, const uint32_t &_majorVersion)
    	{
    		std::get<0>(values_) = _minorVersion;
    		std::get<1>(values_) = _majorVersion;
    	}
    	inline const uint32_t &getMinorVersion() const { return std::get<0>(values_); }
    	inline void setMinorVersion(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint32_t &getMajorVersion() const { return std::get<1>(values_); }
    	inline void setMajorVersion(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const InterfaceVersionOptions& _other) const {
                return (getMinorVersion() == _other.getMinorVersion() && getMajorVersion() == _other.getMajorVersion());
        }
    	inline bool operator!=(const InterfaceVersionOptions &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct HDOptions : CommonAPI::Struct<::v2::IVIRadio::Types::Types::Activation> {
    	
    	HDOptions() {
    	}
    	HDOptions(const ::v2::IVIRadio::Types::Types::Activation &_activation)
    	{
    		std::get<0>(values_) = _activation;
    	}
    	inline const ::v2::IVIRadio::Types::Types::Activation &getActivation() const { return std::get<0>(values_); }
    	inline void setActivation(const ::v2::IVIRadio::Types::Types::Activation &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const HDOptions& _other) const {
                return (getActivation() == _other.getActivation());
        }
    	inline bool operator!=(const HDOptions &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct CountryVariantsOptions : CommonAPI::Struct<::v2::IVIRadio::Types::Types::DeviceTypes, ConfigurationTypesEnum::CountryVariants> {
    	
    	CountryVariantsOptions() {
    	}
    	CountryVariantsOptions(const ::v2::IVIRadio::Types::Types::DeviceTypes &_deviceTypes, const ConfigurationTypesEnum::CountryVariants &_countryVariants)
    	{
    		std::get<0>(values_) = _deviceTypes;
    		std::get<1>(values_) = _countryVariants;
    	}
    	/**
    	 * description: device types for which the country variant are
    	 */
    	inline const ::v2::IVIRadio::Types::Types::DeviceTypes &getDeviceTypes() const { return std::get<0>(values_); }
    	inline void setDeviceTypes(const ::v2::IVIRadio::Types::Types::DeviceTypes &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: country variants for the different device types
    	 */
    	inline const ConfigurationTypesEnum::CountryVariants &getCountryVariants() const { return std::get<1>(values_); }
    	inline void setCountryVariants(const ConfigurationTypesEnum::CountryVariants &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const CountryVariantsOptions& _other) const {
                return (getDeviceTypes() == _other.getDeviceTypes() && getCountryVariants() == _other.getCountryVariants());
        }
    	inline bool operator!=(const CountryVariantsOptions &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct FollowingOptions : CommonAPI::Struct<::v2::IVIRadio::Types::Types::Activations, ConfigurationTypesEnum::FollowingTypes> {
    	
    	FollowingOptions() {
    	}
    	FollowingOptions(const ::v2::IVIRadio::Types::Types::Activations &_activations, const ConfigurationTypesEnum::FollowingTypes &_followingStates)
    	{
    		std::get<0>(values_) = _activations;
    		std::get<1>(values_) = _followingStates;
    	}
    	/**
    	 * description: activations for the different following states
    	 */
    	inline const ::v2::IVIRadio::Types::Types::Activations &getActivations() const { return std::get<0>(values_); }
    	inline void setActivations(const ::v2::IVIRadio::Types::Types::Activations &_value) { std::get<0>(values_) = _value; }
    	inline const ConfigurationTypesEnum::FollowingTypes &getFollowingStates() const { return std::get<1>(values_); }
    	inline void setFollowingStates(const ConfigurationTypesEnum::FollowingTypes &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const FollowingOptions& _other) const {
                return (getActivations() == _other.getActivations() && getFollowingStates() == _other.getFollowingStates());
        }
    	inline bool operator!=(const FollowingOptions &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct SmartFavoriteOptions : CommonAPI::Struct<::v2::IVIRadio::Types::Types::Activation> {
    	
    	SmartFavoriteOptions() {
    	}
    	SmartFavoriteOptions(const ::v2::IVIRadio::Types::Types::Activation &_activity)
    	{
    		std::get<0>(values_) = _activity;
    	}
    	/**
    	 * description: Activation for smart favorite. Here only for SDRAS
    	 */
    	inline const ::v2::IVIRadio::Types::Types::Activation &getActivity() const { return std::get<0>(values_); }
    	inline void setActivity(const ::v2::IVIRadio::Types::Types::Activation &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const SmartFavoriteOptions& _other) const {
                return (getActivity() == _other.getActivity());
        }
    	inline bool operator!=(const SmartFavoriteOptions &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef CommonAPI::Variant<HDOptions, FollowingOptions, SmartFavoriteOptions, CountryVariantsOptions, CoverageAreaOptions, AvailableBandoptions, InterfaceVersionOptions, AMModiOptions, RDSOptions, DLSOptions, RTOptions>  FunctionalityOption;
    typedef std::vector<ConfigurationOptions::FunctionalityOption> FuntionalityOptions;
    struct RegionalisationOptions : CommonAPI::Struct<::v2::IVIRadio::Types::Types::DeviceTypes, ::v2::IVIRadio::Types::Types::Activations> {
    	
    	RegionalisationOptions() {
    	}
    	RegionalisationOptions(const ::v2::IVIRadio::Types::Types::DeviceTypes &_deviceTypes, const ::v2::IVIRadio::Types::Types::Activations &_activations)
    	{
    		std::get<0>(values_) = _deviceTypes;
    		std::get<1>(values_) = _activations;
    	}
    	/**
    	 * description: device types for which coding options are requested. here only AMFM makes sense
    	 */
    	inline const ::v2::IVIRadio::Types::Types::DeviceTypes &getDeviceTypes() const { return std::get<0>(values_); }
    	inline void setDeviceTypes(const ::v2::IVIRadio::Types::Types::DeviceTypes &_value) { std::get<0>(values_) = _value; }
    	inline const ::v2::IVIRadio::Types::Types::Activations &getActivations() const { return std::get<1>(values_); }
    	inline void setActivations(const ::v2::IVIRadio::Types::Types::Activations &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const RegionalisationOptions& _other) const {
                return (getDeviceTypes() == _other.getDeviceTypes() && getActivations() == _other.getActivations());
        }
    	inline bool operator!=(const RegionalisationOptions &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct EPGOptions : CommonAPI::Struct<ConfigurationTypesEnum::EPGCollectionMode> {
    	
    	EPGOptions() {
    	}
    	EPGOptions(const ConfigurationTypesEnum::EPGCollectionMode &_collectionMode)
    	{
    		std::get<0>(values_) = _collectionMode;
    	}
    	inline const ConfigurationTypesEnum::EPGCollectionMode &getCollectionMode() const { return std::get<0>(values_); }
    	inline void setCollectionMode(const ConfigurationTypesEnum::EPGCollectionMode &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const EPGOptions& _other) const {
                return (getCollectionMode() == _other.getCollectionMode());
        }
    	inline bool operator!=(const EPGOptions &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct TPEGOptions : CommonAPI::Struct<ConfigurationTypesEnum::TPEGRequestMode> {
    	
    	TPEGOptions() {
    	}
    	TPEGOptions(const ConfigurationTypesEnum::TPEGRequestMode &_requestMode)
    	{
    		std::get<0>(values_) = _requestMode;
    	}
    	inline const ConfigurationTypesEnum::TPEGRequestMode &getRequestMode() const { return std::get<0>(values_); }
    	inline void setRequestMode(const ConfigurationTypesEnum::TPEGRequestMode &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const TPEGOptions& _other) const {
                return (getRequestMode() == _other.getRequestMode());
        }
    	inline bool operator!=(const TPEGOptions &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "IVIRadio.Configuration.ConfigurationOptions";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(2, 0);
}

}; // struct ConfigurationOptions

} // namespace Configuration
} // namespace IVIRadio
} // namespace v2

namespace CommonAPI {
}


namespace std {
}


// Compatibility
namespace v2_0 = v2;

#endif // V2_IVIRADIO_CONFIGURATION_Configuration_Options_HPP_
