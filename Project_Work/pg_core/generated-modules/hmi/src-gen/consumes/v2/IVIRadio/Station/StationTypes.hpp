/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * author: MGEG_Tuner
 */
#ifndef V2_IVIRADIO_STATION_Station_Types_HPP_
#define V2_IVIRADIO_STATION_Station_Types_HPP_


#include <v2/IVIRadio/Types/Types.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v2 {
namespace IVIRadio {
namespace Station {

struct StationTypes {
    /**
     * description: Type of meta data (device dependent, refer to specific hbtd file)
     */
    struct Metadata : CommonAPI::Struct<std::string, uint8_t> {
    	
    	Metadata() {
    	}
    	Metadata(const std::string &_str, const uint8_t &_type)
    	{
    		std::get<0>(values_) = _str;
    		std::get<1>(values_) = _type;
    	}
    	/**
    	 * description: additional information to be defined
    	 */
    	inline const std::string &getStr() const { return std::get<0>(values_); }
    	inline void setStr(const std::string &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Type of meta data (device dependent, refer to specific hbtd file)
    	 */
    	inline const uint8_t &getType() const { return std::get<1>(values_); }
    	inline void setType(const uint8_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const Metadata& _other) const {
                return (getStr() == _other.getStr() && getType() == _other.getType());
        }
    	inline bool operator!=(const Metadata &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct SeekMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SM_OFF = 0,
            SM_MAN_UP = 1,
            SM_MAN_DOWN = 2,
            SM_AUTO_UP = 3,
            SM_AUTO_DOWN = 4,
            SM_SCAN_UP = 5,
            SM_SCAN_DOWN = 6,
            SM_SCAN_SKIP_UP = 7,
            SM_SCAN_SKIP_DOWN = 8,
            SM_AUTOSTORE = 9
        };
        
        SeekMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SM_OFF)) {}
        SeekMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SM_OFF):
                case static_cast<int32_t>(Literal::SM_MAN_UP):
                case static_cast<int32_t>(Literal::SM_MAN_DOWN):
                case static_cast<int32_t>(Literal::SM_AUTO_UP):
                case static_cast<int32_t>(Literal::SM_AUTO_DOWN):
                case static_cast<int32_t>(Literal::SM_SCAN_UP):
                case static_cast<int32_t>(Literal::SM_SCAN_DOWN):
                case static_cast<int32_t>(Literal::SM_SCAN_SKIP_UP):
                case static_cast<int32_t>(Literal::SM_SCAN_SKIP_DOWN):
                case static_cast<int32_t>(Literal::SM_AUTOSTORE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SeekMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SeekMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SeekMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SeekMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SeekMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SeekMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SeekReturnValue : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SM_FREQUENCY = 0,
            SM_PERCENTAGE = 1
        };
        
        SeekReturnValue() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SM_FREQUENCY)) {}
        SeekReturnValue(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SM_FREQUENCY):
                case static_cast<int32_t>(Literal::SM_PERCENTAGE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SeekReturnValue &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SeekReturnValue &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SeekReturnValue &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SeekReturnValue &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SeekReturnValue &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SeekReturnValue &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Seek mode relevant data
     */
    struct SeekData : CommonAPI::Struct<uint32_t, SeekMode, SeekReturnValue> {
    	
    	SeekData() {
    	}
    	SeekData(const uint32_t &_data, const SeekMode &_mode, const SeekReturnValue &_returnValue)
    	{
    		std::get<0>(values_) = _data;
    		std::get<1>(values_) = _mode;
    		std::get<2>(values_) = _returnValue;
    	}
    	/**
    	 * description: Value in frequency or progress in percent
    	 */
    	inline const uint32_t &getData() const { return std::get<0>(values_); }
    	inline void setData(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: The current seek mode
    	 */
    	inline const SeekMode &getMode() const { return std::get<1>(values_); }
    	inline void setMode(const SeekMode &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: The current frequency (during seek mode)
    	 */
    	inline const SeekReturnValue &getReturnValue() const { return std::get<2>(values_); }
    	inline void setReturnValue(const SeekReturnValue &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const SeekData& _other) const {
                return (getData() == _other.getData() && getMode() == _other.getMode() && getReturnValue() == _other.getReturnValue());
        }
    	inline bool operator!=(const SeekData &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Pairs of MetaData
     */
    typedef std::vector<StationTypes::Metadata> Metadatas;
    /**
     * description: All important information about a station
     */
    struct Station : CommonAPI::Struct<uint32_t, ::v2::IVIRadio::Types::Types::UInt32s, Metadatas, ::v2::IVIRadio::Types::Types::Strings, ::v2::IVIRadio::Types::Types::UInt32s, ::v2::IVIRadio::Types::Types::StationSelector, uint32_t> {
    	
    	Station() {
    	}
    	Station(const uint32_t &_flags, const ::v2::IVIRadio::Types::Types::UInt32s &_genre, const Metadatas &_meta, const ::v2::IVIRadio::Types::Types::Strings &_name, const ::v2::IVIRadio::Types::Types::UInt32s &_quality, const ::v2::IVIRadio::Types::Types::StationSelector &_sel, const uint32_t &_stationType)
    	{
    		std::get<0>(values_) = _flags;
    		std::get<1>(values_) = _genre;
    		std::get<2>(values_) = _meta;
    		std::get<3>(values_) = _name;
    		std::get<4>(values_) = _quality;
    		std::get<5>(values_) = _sel;
    		std::get<6>(values_) = _stationType;
    	}
    	/**
    	 * description: Additional flags (device and project specific, refer to specific hbtd file)
    	 */
    	inline const uint32_t &getFlags() const { return std::get<0>(values_); }
    	inline void setFlags(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Genres of station (indices are device and project dependent, refer to specific
    	 *   hbtd file)
    	 */
    	inline const ::v2::IVIRadio::Types::Types::UInt32s &getGenre() const { return std::get<1>(values_); }
    	inline void setGenre(const ::v2::IVIRadio::Types::Types::UInt32s &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Vector of metadata (e.g. RT+ or DL+), only currently available types are part
    	 *   of this vector.
    	 */
    	inline const Metadatas &getMeta() const { return std::get<2>(values_); }
    	inline void setMeta(const Metadatas &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: Name vector (indices are device and project dependent, refer to specific hbtd
    	 *   file)
    	 */
    	inline const ::v2::IVIRadio::Types::Types::Strings &getName() const { return std::get<3>(values_); }
    	inline void setName(const ::v2::IVIRadio::Types::Types::Strings &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: The quality vector (indices are device and project dependent, refer to specific
    	 *   hbtd file)
    	 */
    	inline const ::v2::IVIRadio::Types::Types::UInt32s &getQuality() const { return std::get<4>(values_); }
    	inline void setQuality(const ::v2::IVIRadio::Types::Types::UInt32s &_value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: Frequency and ID vector, can be directly passed into requestStartTune().
    	 */
    	inline const ::v2::IVIRadio::Types::Types::StationSelector &getSel() const { return std::get<5>(values_); }
    	inline void setSel(const ::v2::IVIRadio::Types::Types::StationSelector &_value) { std::get<5>(values_) = _value; }
    	/**
    	 * description: Station type characterized by a bit field (available bits are defined in
    	 *   StationType enum)
    	 */
    	inline const uint32_t &getStationType() const { return std::get<6>(values_); }
    	inline void setStationType(const uint32_t &_value) { std::get<6>(values_) = _value; }
    	inline bool operator==(const Station& _other) const {
                return (getFlags() == _other.getFlags() && getGenre() == _other.getGenre() && getMeta() == _other.getMeta() && getName() == _other.getName() && getQuality() == _other.getQuality() && getSel() == _other.getSel() && getStationType() == _other.getStationType());
        }
    	inline bool operator!=(const Station &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: A vector of stations
     */
    typedef std::vector<StationTypes::Station> Stations;
    /**
     * description: Station list
     */
    struct StationList : CommonAPI::Struct<uint32_t, Stations, uint32_t> {
    	
    	StationList() {
    	}
    	StationList(const uint32_t &_deviceType, const Stations &_stations, const uint32_t &_stationType)
    	{
    		std::get<0>(values_) = _deviceType;
    		std::get<1>(values_) = _stations;
    		std::get<2>(values_) = _stationType;
    	}
    	/**
    	 * description: Bit field characterizing the emitting tuner source (SourceType enum). That is
    	 *   the ORing of all possible deviceTypes in this list.
    	 */
    	inline const uint32_t &getDeviceType() const { return std::get<0>(values_); }
    	inline void setDeviceType(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: list of stations
    	 */
    	inline const Stations &getStations() const { return std::get<1>(values_); }
    	inline void setStations(const Stations &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Containing station types characterized by a bit field (available bits are
    	 *   defined in StationType enum). That is the ORing of all possible stationTypes
    	 *   in this list.
    	 */
    	inline const uint32_t &getStationType() const { return std::get<2>(values_); }
    	inline void setStationType(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const StationList& _other) const {
                return (getDeviceType() == _other.getDeviceType() && getStations() == _other.getStations() && getStationType() == _other.getStationType());
        }
    	inline bool operator!=(const StationList &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct SelectionMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SM_UNDEF = 0,
            SM_DIRECT = 1,
            SM_LIST = 2,
            SM_PRESET = 3
        };
        
        SelectionMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SM_UNDEF)) {}
        SelectionMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SM_UNDEF):
                case static_cast<int32_t>(Literal::SM_DIRECT):
                case static_cast<int32_t>(Literal::SM_LIST):
                case static_cast<int32_t>(Literal::SM_PRESET):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SelectionMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SelectionMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SelectionMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SelectionMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SelectionMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SelectionMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct StationType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ST_UNDEF = 0,
            ST_RECEIVABLE = 1,
            ST_PERMANENT = 2,
            ST_AUTOSTORED = 4,
            ST_ENSEMBLE = 8,
            ST_SERVICE = 16,
            ST_PRIMARY = 32,
            ST_SECONDARY = 64,
            ST_CHANGED = 32768
        };
        
        StationType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ST_UNDEF)) {}
        StationType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ST_UNDEF):
                case static_cast<int32_t>(Literal::ST_RECEIVABLE):
                case static_cast<int32_t>(Literal::ST_PERMANENT):
                case static_cast<int32_t>(Literal::ST_AUTOSTORED):
                case static_cast<int32_t>(Literal::ST_ENSEMBLE):
                case static_cast<int32_t>(Literal::ST_SERVICE):
                case static_cast<int32_t>(Literal::ST_PRIMARY):
                case static_cast<int32_t>(Literal::ST_SECONDARY):
                case static_cast<int32_t>(Literal::ST_CHANGED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const StationType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const StationType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const StationType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const StationType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const StationType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const StationType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct UpdateElement : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            UE_SEEK = 0,
            UE_CURRENT_STATION = 1,
            UE_STATION_LIST = 2,
            UE_FREQUENCY_GRID = 3
        };
        
        UpdateElement() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::UE_SEEK)) {}
        UpdateElement(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::UE_SEEK):
                case static_cast<int32_t>(Literal::UE_CURRENT_STATION):
                case static_cast<int32_t>(Literal::UE_STATION_LIST):
                case static_cast<int32_t>(Literal::UE_FREQUENCY_GRID):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const UpdateElement &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const UpdateElement &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const UpdateElement &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const UpdateElement &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const UpdateElement &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const UpdateElement &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct FlagsDefAmFm : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            AMFM_FLG_TP = 1,
            AMFM_FLG_ANN_TA = 2,
            AMFM_FLG_MS = 4,
            AMFM_FLG_TMC = 8,
            AMFM_FLG_HDDIGAUDIO = 16,
            AMFM_FLG_HDENCRYPTED = 32,
            AMFM_FLG_HDBALLGAME = 64,
            AMFM_FLG_IMG_STATIONLOGO = 128
        };
        
        FlagsDefAmFm() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::AMFM_FLG_TP)) {}
        FlagsDefAmFm(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::AMFM_FLG_TP):
                case static_cast<int32_t>(Literal::AMFM_FLG_ANN_TA):
                case static_cast<int32_t>(Literal::AMFM_FLG_MS):
                case static_cast<int32_t>(Literal::AMFM_FLG_TMC):
                case static_cast<int32_t>(Literal::AMFM_FLG_HDDIGAUDIO):
                case static_cast<int32_t>(Literal::AMFM_FLG_HDENCRYPTED):
                case static_cast<int32_t>(Literal::AMFM_FLG_HDBALLGAME):
                case static_cast<int32_t>(Literal::AMFM_FLG_IMG_STATIONLOGO):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const FlagsDefAmFm &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FlagsDefAmFm &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FlagsDefAmFm &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FlagsDefAmFm &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FlagsDefAmFm &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const FlagsDefAmFm &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct FlagsDefDab : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DAB_FLG_LOCKED = 1,
            DAB_FLG_VALID = 2,
            DAB_FLG_MUTED = 4,
            DAB_FLG_ENS_MUTED = 8,
            DAB_FLG_ANN_ALARM = 16,
            DAB_FLG_ANN_TRAFFIC = 32,
            DAB_FLG_ANN_TRANSPORT = 64,
            DAB_FLG_ANN_WARNING = 128,
            DAB_FLG_ANN_NEWS = 256,
            DAB_FLG_ANN_WEATHER = 512,
            DAB_FLG_ANN_EVENT = 1024,
            DAB_FLG_ANN_SPECIAL_EVENT = 2048,
            DAB_FLG_ANN_PROGRAMM_INFO = 4096,
            DAB_FLG_ANN_SPORT = 8192,
            DAB_FLG_ANN_FINANCES = 16384,
            DAB_FLG_EPG = 32768,
            DAB_FLG_JLN = 65536,
            DAB_FLG_IMG_SLS_NPAD = 131072,
            DAB_FLG_IMG_SLS_XPAD = 262144,
            DAB_FLG_TMC = 524288,
            DAB_FLG_TPEG = 1048576,
            DAB_FLG_BWS = 2097152,
            DAB_FLG_MPEG2 = 4194304,
            DAB_FLG_AAC = 8388608,
            DAB_FLG_IMG_CSLS = 16777216,
            DAB_FLG_IMG_ALBUMCOVER = 33554432,
            DAB_FLG_IMG_STATIONLOGO = 67108864
        };
        
        FlagsDefDab() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DAB_FLG_LOCKED)) {}
        FlagsDefDab(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DAB_FLG_LOCKED):
                case static_cast<int32_t>(Literal::DAB_FLG_VALID):
                case static_cast<int32_t>(Literal::DAB_FLG_MUTED):
                case static_cast<int32_t>(Literal::DAB_FLG_ENS_MUTED):
                case static_cast<int32_t>(Literal::DAB_FLG_ANN_ALARM):
                case static_cast<int32_t>(Literal::DAB_FLG_ANN_TRAFFIC):
                case static_cast<int32_t>(Literal::DAB_FLG_ANN_TRANSPORT):
                case static_cast<int32_t>(Literal::DAB_FLG_ANN_WARNING):
                case static_cast<int32_t>(Literal::DAB_FLG_ANN_NEWS):
                case static_cast<int32_t>(Literal::DAB_FLG_ANN_WEATHER):
                case static_cast<int32_t>(Literal::DAB_FLG_ANN_EVENT):
                case static_cast<int32_t>(Literal::DAB_FLG_ANN_SPECIAL_EVENT):
                case static_cast<int32_t>(Literal::DAB_FLG_ANN_PROGRAMM_INFO):
                case static_cast<int32_t>(Literal::DAB_FLG_ANN_SPORT):
                case static_cast<int32_t>(Literal::DAB_FLG_ANN_FINANCES):
                case static_cast<int32_t>(Literal::DAB_FLG_EPG):
                case static_cast<int32_t>(Literal::DAB_FLG_JLN):
                case static_cast<int32_t>(Literal::DAB_FLG_IMG_SLS_NPAD):
                case static_cast<int32_t>(Literal::DAB_FLG_IMG_SLS_XPAD):
                case static_cast<int32_t>(Literal::DAB_FLG_TMC):
                case static_cast<int32_t>(Literal::DAB_FLG_TPEG):
                case static_cast<int32_t>(Literal::DAB_FLG_BWS):
                case static_cast<int32_t>(Literal::DAB_FLG_MPEG2):
                case static_cast<int32_t>(Literal::DAB_FLG_AAC):
                case static_cast<int32_t>(Literal::DAB_FLG_IMG_CSLS):
                case static_cast<int32_t>(Literal::DAB_FLG_IMG_ALBUMCOVER):
                case static_cast<int32_t>(Literal::DAB_FLG_IMG_STATIONLOGO):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const FlagsDefDab &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FlagsDefDab &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FlagsDefDab &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FlagsDefDab &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FlagsDefDab &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const FlagsDefDab &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct FlagsDefUndef : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            UNDEF_FLG_MUTED = 1,
            UNDEF_FLG_ANN_ALARM = 2,
            UNDEF_FLG_ANN_TRAFFIC = 4,
            UNDEF_FLG_ANN_TRANSPORT = 8,
            UNDEF_FLG_ANN_WARNING = 16,
            UNDEF_FLG_ANN_NEWS = 32,
            UNDEF_FLG_ANN_WEATHER = 64,
            UNDEF_FLG_ANN_EVENT = 128,
            UNDEF_FLG_ANN_SPECIAL_EVENT = 256,
            UNDEF_FLG_ANN_PROGRAMM_INFO = 512,
            UNDEF_FLG_ANN_SPORT = 1024,
            UNDEF_FLG_ANN_FINANCES = 2048,
            UNDEF_FLG_EPG = 4096,
            UNDEF_FLG_JLN = 8192,
            UNDEF_FLG_IMG_SLS_NPAD = 16384,
            UNDEF_FLG_IMG_SLS_XPAD = 32768,
            UNDEF_FLG_TMC = 65536,
            UNDEF_FLG_TPEG = 131072,
            UNDEF_FLG_BWS = 262144,
            UNDEF_FLG_MPEG2 = 524288,
            UNDEF_FLG_AAC = 1048576,
            UNDEF_FLG_IMG_CSLS = 2097152,
            UNDEF_FLG_IMG_ALBUMCOVER = 4194304,
            UNDEF_FLG_IMG_STATIONLOGO = 8388608,
            UNDEF_FLG_SUBTITLE = 16777216,
            UNDEF_FLG_TELETEXT = 33554432
        };
        
        FlagsDefUndef() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::UNDEF_FLG_MUTED)) {}
        FlagsDefUndef(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::UNDEF_FLG_MUTED):
                case static_cast<int32_t>(Literal::UNDEF_FLG_ANN_ALARM):
                case static_cast<int32_t>(Literal::UNDEF_FLG_ANN_TRAFFIC):
                case static_cast<int32_t>(Literal::UNDEF_FLG_ANN_TRANSPORT):
                case static_cast<int32_t>(Literal::UNDEF_FLG_ANN_WARNING):
                case static_cast<int32_t>(Literal::UNDEF_FLG_ANN_NEWS):
                case static_cast<int32_t>(Literal::UNDEF_FLG_ANN_WEATHER):
                case static_cast<int32_t>(Literal::UNDEF_FLG_ANN_EVENT):
                case static_cast<int32_t>(Literal::UNDEF_FLG_ANN_SPECIAL_EVENT):
                case static_cast<int32_t>(Literal::UNDEF_FLG_ANN_PROGRAMM_INFO):
                case static_cast<int32_t>(Literal::UNDEF_FLG_ANN_SPORT):
                case static_cast<int32_t>(Literal::UNDEF_FLG_ANN_FINANCES):
                case static_cast<int32_t>(Literal::UNDEF_FLG_EPG):
                case static_cast<int32_t>(Literal::UNDEF_FLG_JLN):
                case static_cast<int32_t>(Literal::UNDEF_FLG_IMG_SLS_NPAD):
                case static_cast<int32_t>(Literal::UNDEF_FLG_IMG_SLS_XPAD):
                case static_cast<int32_t>(Literal::UNDEF_FLG_TMC):
                case static_cast<int32_t>(Literal::UNDEF_FLG_TPEG):
                case static_cast<int32_t>(Literal::UNDEF_FLG_BWS):
                case static_cast<int32_t>(Literal::UNDEF_FLG_MPEG2):
                case static_cast<int32_t>(Literal::UNDEF_FLG_AAC):
                case static_cast<int32_t>(Literal::UNDEF_FLG_IMG_CSLS):
                case static_cast<int32_t>(Literal::UNDEF_FLG_IMG_ALBUMCOVER):
                case static_cast<int32_t>(Literal::UNDEF_FLG_IMG_STATIONLOGO):
                case static_cast<int32_t>(Literal::UNDEF_FLG_SUBTITLE):
                case static_cast<int32_t>(Literal::UNDEF_FLG_TELETEXT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const FlagsDefUndef &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FlagsDefUndef &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FlagsDefUndef &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FlagsDefUndef &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FlagsDefUndef &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const FlagsDefUndef &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct GenreIndexAmFm : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            AMFM_GEN_PTY = 0
        };
        
        GenreIndexAmFm() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::AMFM_GEN_PTY)) {}
        GenreIndexAmFm(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::AMFM_GEN_PTY):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const GenreIndexAmFm &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const GenreIndexAmFm &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const GenreIndexAmFm &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const GenreIndexAmFm &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const GenreIndexAmFm &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const GenreIndexAmFm &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct GenreIndexDab : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DAB_GEN_STATIC_PTY = 0,
            DAB_GEN_DYNAMIC_PTY = 1
        };
        
        GenreIndexDab() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DAB_GEN_STATIC_PTY)) {}
        GenreIndexDab(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DAB_GEN_STATIC_PTY):
                case static_cast<int32_t>(Literal::DAB_GEN_DYNAMIC_PTY):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const GenreIndexDab &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const GenreIndexDab &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const GenreIndexDab &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const GenreIndexDab &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const GenreIndexDab &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const GenreIndexDab &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct GenreIndexUndef : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            UNDEF_GEN_STATIC = 0,
            UNDEF_GEN_DYNAMIC = 1
        };
        
        GenreIndexUndef() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::UNDEF_GEN_STATIC)) {}
        GenreIndexUndef(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::UNDEF_GEN_STATIC):
                case static_cast<int32_t>(Literal::UNDEF_GEN_DYNAMIC):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const GenreIndexUndef &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const GenreIndexUndef &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const GenreIndexUndef &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const GenreIndexUndef &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const GenreIndexUndef &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const GenreIndexUndef &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct IdConstants : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ID_UNDEF = 0
        };
        
        IdConstants() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ID_UNDEF)) {}
        IdConstants(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ID_UNDEF):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const IdConstants &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const IdConstants &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const IdConstants &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const IdConstants &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const IdConstants &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const IdConstants &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct IdIndexAmFm : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            AMFM_ID_KEY = 0,
            AMFM_ID_FREQUENCY = 1,
            AMFM_ID_PI = 2,
            AMFM_ID_SERVICE = 3
        };
        
        IdIndexAmFm() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::AMFM_ID_KEY)) {}
        IdIndexAmFm(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::AMFM_ID_KEY):
                case static_cast<int32_t>(Literal::AMFM_ID_FREQUENCY):
                case static_cast<int32_t>(Literal::AMFM_ID_PI):
                case static_cast<int32_t>(Literal::AMFM_ID_SERVICE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const IdIndexAmFm &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const IdIndexAmFm &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const IdIndexAmFm &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const IdIndexAmFm &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const IdIndexAmFm &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const IdIndexAmFm &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct IdIndexAmFmFrequencyGrid : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            AMFM_ID_LOWER_LIMIT = 0,
            AMFM_ID_UPPER_LIMIT = 1,
            AMFM_ID_STEP_WIDTH = 2
        };
        
        IdIndexAmFmFrequencyGrid() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::AMFM_ID_LOWER_LIMIT)) {}
        IdIndexAmFmFrequencyGrid(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::AMFM_ID_LOWER_LIMIT):
                case static_cast<int32_t>(Literal::AMFM_ID_UPPER_LIMIT):
                case static_cast<int32_t>(Literal::AMFM_ID_STEP_WIDTH):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const IdIndexAmFmFrequencyGrid &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const IdIndexAmFmFrequencyGrid &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const IdIndexAmFmFrequencyGrid &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const IdIndexAmFmFrequencyGrid &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const IdIndexAmFmFrequencyGrid &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const IdIndexAmFmFrequencyGrid &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct IdIndexDab : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DAB_ID_KEY = 0,
            DAB_ID_FREQUENCY = 1,
            DAB_ID_ENSEMBLE = 2,
            DAB_ID_SERVICE = 3,
            DAB_ID_COMPONENT = 4
        };
        
        IdIndexDab() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DAB_ID_KEY)) {}
        IdIndexDab(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DAB_ID_KEY):
                case static_cast<int32_t>(Literal::DAB_ID_FREQUENCY):
                case static_cast<int32_t>(Literal::DAB_ID_ENSEMBLE):
                case static_cast<int32_t>(Literal::DAB_ID_SERVICE):
                case static_cast<int32_t>(Literal::DAB_ID_COMPONENT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const IdIndexDab &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const IdIndexDab &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const IdIndexDab &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const IdIndexDab &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const IdIndexDab &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const IdIndexDab &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct IdIndexUndef : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            UNDEF_ID_KEY = 0,
            UNDEF_ID_PARENT = 1
        };
        
        IdIndexUndef() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::UNDEF_ID_KEY)) {}
        IdIndexUndef(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::UNDEF_ID_KEY):
                case static_cast<int32_t>(Literal::UNDEF_ID_PARENT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const IdIndexUndef &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const IdIndexUndef &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const IdIndexUndef &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const IdIndexUndef &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const IdIndexUndef &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const IdIndexUndef &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct MetaIndexAmFm : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            AMFM_RTP_DUMMY = 0,
            AMFM_RTP_TITLE = 1,
            AMFM_RTP_ALBUM = 2,
            AMFM_RTP_TRACKNUMBER = 3,
            AMFM_RTP_ARTIST = 4,
            AMFM_RTP_COMPOSITION = 5,
            AMFM_RTP_MOVEMENT = 6,
            AMFM_RTP_CONDUCTOR = 7,
            AMFM_RTP_COMPOSER = 8,
            AMFM_RTP_BAND = 9,
            AMFM_RTP_COMMENT = 10,
            AMFM_RTP_GENRE = 11,
            AMFM_RTP_NEWS = 12,
            AMFM_RTP_NEWS_LOCAL = 13,
            AMFM_RTP_STOCKMARKET = 14,
            AMFM_RTP_SPORT = 15,
            AMFM_RTP_LOTTERY = 16,
            AMFM_RTP_HOROSCOPE = 17,
            AMFM_RTP_DAILY_DIVISION = 18,
            AMFM_RTP_HEALTH = 19,
            AMFM_RTP_EVENT = 20,
            AMFM_RTP_SZENE = 21,
            AMFM_RTP_CINEMA = 22,
            AMFM_RTP_TV = 23,
            AMFM_RTP_DATE_TIME = 24,
            AMFM_RTP_WEATHER = 25,
            AMFM_RTP_TRAFFIC = 26,
            AMFM_RTP_ALARM = 27,
            AMFM_RTP_ADVERTISEMENT = 28,
            AMFM_RTP_URL = 29,
            AMFM_RTP_OTHER = 30,
            AMFM_RTP_STATIONNAME_SHORT = 31,
            AMFM_RTP_STATIONNAME_LONG = 32,
            AMFM_RTP_NOW = 33,
            AMFM_RTP_NEXT = 34,
            AMFM_RTP_PART = 35,
            AMFM_RTP_HOST = 36,
            AMFM_RTP_EDITORIAL = 37,
            AMFM_RTP_FREQUENCY = 38,
            AMFM_RTP_HOMEPAGE = 39,
            AMFM_RTP_SUBCHANNEL = 40,
            AMFM_RTP_PHONE_HOTLINE = 41,
            AMFM_RTP_PHONE_STUDIO = 42,
            AMFM_RTP_PHONE_OTHER = 43,
            AMFM_RTP_SMS_STUDIO = 44,
            AMFM_RTP_SMS_OTHER = 45,
            AMFM_RTP_EMAIL_HOTLINE = 46,
            AMFM_RTP_EMAIL_STUDIO = 47,
            AMFM_RTP_EMAIL_OTHER = 48,
            AMFM_RTP_MMS_OTHER = 49,
            AMFM_RTP_CHAT = 50,
            AMFM_RTP_CHAT_CENTER = 51,
            AMFM_RTP_VOTE_QUESTION = 52,
            AMFM_RTP_VOTE_CENTER = 53,
            AMFM_RTP_PLACE = 59,
            AMFM_RTP_APPOINTMENT = 60,
            AMFM_RTP_IDENTIFIER = 61,
            AMFM_RTP_PURCHASE = 62,
            AMFM_RTP_GET_DATA = 63,
            AMFM_HD_ARTIST = 128,
            AMFM_HD_TITLE = 129,
            AMFM_HD_ALBUM = 130,
            AMFM_HD_COMMENT_LANGUAGE = 131,
            AMFM_HD_COMMENT_SHORT_DESCRIPTION = 132,
            AMFM_HD_COMMENT_CONTENT_FIELD = 133,
            AMFM_HD_COMMERCIAL_PRICE = 134,
            AMFM_HD_COMMERCIAL_VALID_UNTIL = 135,
            AMFM_HD_COMMERCIAL_CONTACT_URL = 136,
            AMFM_HD_COMMERCIAL_NAME_OF_SELLER = 137,
            AMFM_HD_COMMERCIAL_DESCRIPTION = 138,
            AMFM_HD_COMMERCIAL_RECEIVE_AS = 139,
            AMFM_HD_GENRE = 140
        };
        
        MetaIndexAmFm() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::AMFM_RTP_DUMMY)) {}
        MetaIndexAmFm(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::AMFM_RTP_DUMMY):
                case static_cast<int32_t>(Literal::AMFM_RTP_TITLE):
                case static_cast<int32_t>(Literal::AMFM_RTP_ALBUM):
                case static_cast<int32_t>(Literal::AMFM_RTP_TRACKNUMBER):
                case static_cast<int32_t>(Literal::AMFM_RTP_ARTIST):
                case static_cast<int32_t>(Literal::AMFM_RTP_COMPOSITION):
                case static_cast<int32_t>(Literal::AMFM_RTP_MOVEMENT):
                case static_cast<int32_t>(Literal::AMFM_RTP_CONDUCTOR):
                case static_cast<int32_t>(Literal::AMFM_RTP_COMPOSER):
                case static_cast<int32_t>(Literal::AMFM_RTP_BAND):
                case static_cast<int32_t>(Literal::AMFM_RTP_COMMENT):
                case static_cast<int32_t>(Literal::AMFM_RTP_GENRE):
                case static_cast<int32_t>(Literal::AMFM_RTP_NEWS):
                case static_cast<int32_t>(Literal::AMFM_RTP_NEWS_LOCAL):
                case static_cast<int32_t>(Literal::AMFM_RTP_STOCKMARKET):
                case static_cast<int32_t>(Literal::AMFM_RTP_SPORT):
                case static_cast<int32_t>(Literal::AMFM_RTP_LOTTERY):
                case static_cast<int32_t>(Literal::AMFM_RTP_HOROSCOPE):
                case static_cast<int32_t>(Literal::AMFM_RTP_DAILY_DIVISION):
                case static_cast<int32_t>(Literal::AMFM_RTP_HEALTH):
                case static_cast<int32_t>(Literal::AMFM_RTP_EVENT):
                case static_cast<int32_t>(Literal::AMFM_RTP_SZENE):
                case static_cast<int32_t>(Literal::AMFM_RTP_CINEMA):
                case static_cast<int32_t>(Literal::AMFM_RTP_TV):
                case static_cast<int32_t>(Literal::AMFM_RTP_DATE_TIME):
                case static_cast<int32_t>(Literal::AMFM_RTP_WEATHER):
                case static_cast<int32_t>(Literal::AMFM_RTP_TRAFFIC):
                case static_cast<int32_t>(Literal::AMFM_RTP_ALARM):
                case static_cast<int32_t>(Literal::AMFM_RTP_ADVERTISEMENT):
                case static_cast<int32_t>(Literal::AMFM_RTP_URL):
                case static_cast<int32_t>(Literal::AMFM_RTP_OTHER):
                case static_cast<int32_t>(Literal::AMFM_RTP_STATIONNAME_SHORT):
                case static_cast<int32_t>(Literal::AMFM_RTP_STATIONNAME_LONG):
                case static_cast<int32_t>(Literal::AMFM_RTP_NOW):
                case static_cast<int32_t>(Literal::AMFM_RTP_NEXT):
                case static_cast<int32_t>(Literal::AMFM_RTP_PART):
                case static_cast<int32_t>(Literal::AMFM_RTP_HOST):
                case static_cast<int32_t>(Literal::AMFM_RTP_EDITORIAL):
                case static_cast<int32_t>(Literal::AMFM_RTP_FREQUENCY):
                case static_cast<int32_t>(Literal::AMFM_RTP_HOMEPAGE):
                case static_cast<int32_t>(Literal::AMFM_RTP_SUBCHANNEL):
                case static_cast<int32_t>(Literal::AMFM_RTP_PHONE_HOTLINE):
                case static_cast<int32_t>(Literal::AMFM_RTP_PHONE_STUDIO):
                case static_cast<int32_t>(Literal::AMFM_RTP_PHONE_OTHER):
                case static_cast<int32_t>(Literal::AMFM_RTP_SMS_STUDIO):
                case static_cast<int32_t>(Literal::AMFM_RTP_SMS_OTHER):
                case static_cast<int32_t>(Literal::AMFM_RTP_EMAIL_HOTLINE):
                case static_cast<int32_t>(Literal::AMFM_RTP_EMAIL_STUDIO):
                case static_cast<int32_t>(Literal::AMFM_RTP_EMAIL_OTHER):
                case static_cast<int32_t>(Literal::AMFM_RTP_MMS_OTHER):
                case static_cast<int32_t>(Literal::AMFM_RTP_CHAT):
                case static_cast<int32_t>(Literal::AMFM_RTP_CHAT_CENTER):
                case static_cast<int32_t>(Literal::AMFM_RTP_VOTE_QUESTION):
                case static_cast<int32_t>(Literal::AMFM_RTP_VOTE_CENTER):
                case static_cast<int32_t>(Literal::AMFM_RTP_PLACE):
                case static_cast<int32_t>(Literal::AMFM_RTP_APPOINTMENT):
                case static_cast<int32_t>(Literal::AMFM_RTP_IDENTIFIER):
                case static_cast<int32_t>(Literal::AMFM_RTP_PURCHASE):
                case static_cast<int32_t>(Literal::AMFM_RTP_GET_DATA):
                case static_cast<int32_t>(Literal::AMFM_HD_ARTIST):
                case static_cast<int32_t>(Literal::AMFM_HD_TITLE):
                case static_cast<int32_t>(Literal::AMFM_HD_ALBUM):
                case static_cast<int32_t>(Literal::AMFM_HD_COMMENT_LANGUAGE):
                case static_cast<int32_t>(Literal::AMFM_HD_COMMENT_SHORT_DESCRIPTION):
                case static_cast<int32_t>(Literal::AMFM_HD_COMMENT_CONTENT_FIELD):
                case static_cast<int32_t>(Literal::AMFM_HD_COMMERCIAL_PRICE):
                case static_cast<int32_t>(Literal::AMFM_HD_COMMERCIAL_VALID_UNTIL):
                case static_cast<int32_t>(Literal::AMFM_HD_COMMERCIAL_CONTACT_URL):
                case static_cast<int32_t>(Literal::AMFM_HD_COMMERCIAL_NAME_OF_SELLER):
                case static_cast<int32_t>(Literal::AMFM_HD_COMMERCIAL_DESCRIPTION):
                case static_cast<int32_t>(Literal::AMFM_HD_COMMERCIAL_RECEIVE_AS):
                case static_cast<int32_t>(Literal::AMFM_HD_GENRE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MetaIndexAmFm &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MetaIndexAmFm &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MetaIndexAmFm &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MetaIndexAmFm &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MetaIndexAmFm &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MetaIndexAmFm &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct MetaIndexDab : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DAB_DLS_DUMMY = 0,
            DAB_DLS_TITLE = 1,
            DAB_DLS_ALBUM = 2,
            DAB_DLS_TRACKNUMBER = 3,
            DAB_DLS_ARTIST = 4,
            DAB_DLS_COMPOSITION = 5,
            DAB_DLS_MOVEMENT = 6,
            DAB_DLS_CONDUCTOR = 7,
            DAB_DLS_COMPOSER = 8,
            DAB_DLS_BAND = 9,
            DAB_DLS_COMMENT = 10,
            DAB_DLS_GENRE = 11,
            DAB_DLS_NEWS = 12,
            DAB_DLS_NEWS_LOCAL = 13,
            DAB_DLS_STOCKMARKET = 14,
            DAB_DLS_SPORT = 15,
            DAB_DLS_LOTTERY = 16,
            DAB_DLS_HOROSCOPE = 17,
            DAB_DLS_DAILY_DIVISION = 18,
            DAB_DLS_HEALTH = 19,
            DAB_DLS_EVENT = 20,
            DAB_DLS_SZENE = 21,
            DAB_DLS_CINEMA = 22,
            DAB_DLS_TV = 23,
            DAB_DLS_DATE_TIME = 24,
            DAB_DLS_WEATHER = 25,
            DAB_DLS_TRAFFIC = 26,
            DAB_DLS_ALARM = 27,
            DAB_DLS_ADVERTISEMENT = 28,
            DAB_DLS_URL = 29,
            DAB_DLS_OTHER = 30,
            DAB_DLS_STATIONNAME_SHORT = 31,
            DAB_DLS_STATIONNAME_LONG = 32,
            DAB_DLS_NOW = 33,
            DAB_DLS_NEXT = 34,
            DAB_DLS_PART = 35,
            DAB_DLS_HOST = 36,
            DAB_DLS_EDITORIAL = 37,
            DAB_DLS_FREQUENCY = 38,
            DAB_DLS_HOMEPAGE = 39,
            DAB_DLS_SUBCHANNEL = 40,
            DAB_DLS_PHONE_HOTLINE = 41,
            DAB_DLS_PHONE_STUDIO = 42,
            DAB_DLS_PHONE_OTHER = 43,
            DAB_DLS_SMS_STUDIO = 44,
            DAB_DLS_SMS_OTHER = 45,
            DAB_DLS_EMAIL_HOTLINE = 46,
            DAB_DLS_EMAIL_STUDIO = 47,
            DAB_DLS_EMAIL_OTHER = 48,
            DAB_DLS_MMS_OTHER = 49,
            DAB_DLS_CHAT = 50,
            DAB_DLS_CHAT_CENTER = 51,
            DAB_DLS_VOTE_QUESTION = 52,
            DAB_DLS_VOTE_CENTER = 53,
            DAB_DLS_PLACE = 59,
            DAB_DLS_APPOINTMENT = 60,
            DAB_DLS_IDENTIFIER = 61,
            DAB_DLS_PURCHASE = 62,
            DAB_DLS_GET_DATA = 63
        };
        
        MetaIndexDab() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DAB_DLS_DUMMY)) {}
        MetaIndexDab(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DAB_DLS_DUMMY):
                case static_cast<int32_t>(Literal::DAB_DLS_TITLE):
                case static_cast<int32_t>(Literal::DAB_DLS_ALBUM):
                case static_cast<int32_t>(Literal::DAB_DLS_TRACKNUMBER):
                case static_cast<int32_t>(Literal::DAB_DLS_ARTIST):
                case static_cast<int32_t>(Literal::DAB_DLS_COMPOSITION):
                case static_cast<int32_t>(Literal::DAB_DLS_MOVEMENT):
                case static_cast<int32_t>(Literal::DAB_DLS_CONDUCTOR):
                case static_cast<int32_t>(Literal::DAB_DLS_COMPOSER):
                case static_cast<int32_t>(Literal::DAB_DLS_BAND):
                case static_cast<int32_t>(Literal::DAB_DLS_COMMENT):
                case static_cast<int32_t>(Literal::DAB_DLS_GENRE):
                case static_cast<int32_t>(Literal::DAB_DLS_NEWS):
                case static_cast<int32_t>(Literal::DAB_DLS_NEWS_LOCAL):
                case static_cast<int32_t>(Literal::DAB_DLS_STOCKMARKET):
                case static_cast<int32_t>(Literal::DAB_DLS_SPORT):
                case static_cast<int32_t>(Literal::DAB_DLS_LOTTERY):
                case static_cast<int32_t>(Literal::DAB_DLS_HOROSCOPE):
                case static_cast<int32_t>(Literal::DAB_DLS_DAILY_DIVISION):
                case static_cast<int32_t>(Literal::DAB_DLS_HEALTH):
                case static_cast<int32_t>(Literal::DAB_DLS_EVENT):
                case static_cast<int32_t>(Literal::DAB_DLS_SZENE):
                case static_cast<int32_t>(Literal::DAB_DLS_CINEMA):
                case static_cast<int32_t>(Literal::DAB_DLS_TV):
                case static_cast<int32_t>(Literal::DAB_DLS_DATE_TIME):
                case static_cast<int32_t>(Literal::DAB_DLS_WEATHER):
                case static_cast<int32_t>(Literal::DAB_DLS_TRAFFIC):
                case static_cast<int32_t>(Literal::DAB_DLS_ALARM):
                case static_cast<int32_t>(Literal::DAB_DLS_ADVERTISEMENT):
                case static_cast<int32_t>(Literal::DAB_DLS_URL):
                case static_cast<int32_t>(Literal::DAB_DLS_OTHER):
                case static_cast<int32_t>(Literal::DAB_DLS_STATIONNAME_SHORT):
                case static_cast<int32_t>(Literal::DAB_DLS_STATIONNAME_LONG):
                case static_cast<int32_t>(Literal::DAB_DLS_NOW):
                case static_cast<int32_t>(Literal::DAB_DLS_NEXT):
                case static_cast<int32_t>(Literal::DAB_DLS_PART):
                case static_cast<int32_t>(Literal::DAB_DLS_HOST):
                case static_cast<int32_t>(Literal::DAB_DLS_EDITORIAL):
                case static_cast<int32_t>(Literal::DAB_DLS_FREQUENCY):
                case static_cast<int32_t>(Literal::DAB_DLS_HOMEPAGE):
                case static_cast<int32_t>(Literal::DAB_DLS_SUBCHANNEL):
                case static_cast<int32_t>(Literal::DAB_DLS_PHONE_HOTLINE):
                case static_cast<int32_t>(Literal::DAB_DLS_PHONE_STUDIO):
                case static_cast<int32_t>(Literal::DAB_DLS_PHONE_OTHER):
                case static_cast<int32_t>(Literal::DAB_DLS_SMS_STUDIO):
                case static_cast<int32_t>(Literal::DAB_DLS_SMS_OTHER):
                case static_cast<int32_t>(Literal::DAB_DLS_EMAIL_HOTLINE):
                case static_cast<int32_t>(Literal::DAB_DLS_EMAIL_STUDIO):
                case static_cast<int32_t>(Literal::DAB_DLS_EMAIL_OTHER):
                case static_cast<int32_t>(Literal::DAB_DLS_MMS_OTHER):
                case static_cast<int32_t>(Literal::DAB_DLS_CHAT):
                case static_cast<int32_t>(Literal::DAB_DLS_CHAT_CENTER):
                case static_cast<int32_t>(Literal::DAB_DLS_VOTE_QUESTION):
                case static_cast<int32_t>(Literal::DAB_DLS_VOTE_CENTER):
                case static_cast<int32_t>(Literal::DAB_DLS_PLACE):
                case static_cast<int32_t>(Literal::DAB_DLS_APPOINTMENT):
                case static_cast<int32_t>(Literal::DAB_DLS_IDENTIFIER):
                case static_cast<int32_t>(Literal::DAB_DLS_PURCHASE):
                case static_cast<int32_t>(Literal::DAB_DLS_GET_DATA):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MetaIndexDab &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MetaIndexDab &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MetaIndexDab &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MetaIndexDab &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MetaIndexDab &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MetaIndexDab &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct MetaIndexUndef : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            UNDEF_RTP_DUMMY = 0,
            UNDEF_RTP_TITLE = 1,
            UNDEF_RTP_ALBUM = 2,
            UNDEF_RTP_TRACKNUMBER = 3,
            UNDEF_RTP_ARTIST = 4,
            UNDEF_RTP_COMPOSITION = 5,
            UNDEF_RTP_MOVEMENT = 6,
            UNDEF_RTP_CONDUCTOR = 7,
            UNDEF_RTP_COMPOSER = 8,
            UNDEF_RTP_BAND = 9,
            UNDEF_RTP_COMMENT = 10,
            UNDEF_RTP_GENRE = 11,
            UNDEF_RTP_NEWS = 12,
            UNDEF_RTP_NEWS_LOCAL = 13,
            UNDEF_RTP_STOCKMARKET = 14,
            UNDEF_RTP_SPORT = 15,
            UNDEF_RTP_LOTTERY = 16,
            UNDEF_RTP_HOROSCOPE = 17,
            UNDEF_RTP_DAILY_DIVISION = 18,
            UNDEF_RTP_HEALTH = 19,
            UNDEF_RTP_EVENT = 20,
            UNDEF_RTP_SZENE = 21,
            UNDEF_RTP_CINEMA = 22,
            UNDEF_RTP_TV = 23,
            UNDEF_RTP_DATE_TIME = 24,
            UNDEF_RTP_WEATHER = 25,
            UNDEF_RTP_TRAFFIC = 26,
            UNDEF_RTP_ALARM = 27,
            UNDEF_RTP_ADVERTISEMENT = 28,
            UNDEF_RTP_URL = 29,
            UNDEF_RTP_OTHER = 30,
            UNDEF_RTP_STATIONNAME_SHORT = 31,
            UNDEF_RTP_STATIONNAME_LONG = 32,
            UNDEF_RTP_NOW = 33,
            UNDEF_RTP_NEXT = 34,
            UNDEF_RTP_PART = 35,
            UNDEF_RTP_HOST = 36,
            UNDEF_RTP_EDITORIAL = 37,
            UNDEF_RTP_FREQUENCY = 38,
            UNDEF_RTP_HOMEPAGE = 39,
            UNDEF_RTP_SUBCHANNEL = 40,
            UNDEF_RTP_PHONE_HOTLINE = 41,
            UNDEF_RTP_PHONE_STUDIO = 42,
            UNDEF_RTP_PHONE_OTHER = 43,
            UNDEF_RTP_SMS_STUDIO = 44,
            UNDEF_RTP_SMS_OTHER = 45,
            UNDEF_RTP_EMAIL_HOTLINE = 46,
            UNDEF_RTP_EMAIL_STUDIO = 47,
            UNDEF_RTP_EMAIL_OTHER = 48,
            UNDEF_RTP_MMS_OTHER = 49,
            UNDEF_RTP_CHAT = 50,
            UNDEF_RTP_CHAT_CENTER = 51,
            UNDEF_RTP_VOTE_QUESTION = 52,
            UNDEF_RTP_VOTE_CENTER = 53,
            UNDEF_RTP_PLACE = 59,
            UNDEF_RTP_APPOINTMENT = 60,
            UNDEF_RTP_IDENTIFIER = 61,
            UNDEF_RTP_PURCHASE = 62,
            UNDEF_RTP_GET_DATA = 63,
            UNDEF_HD_ARTIST = 128,
            UNDEF_HD_TITLE = 129,
            UNDEF_HD_ALBUM = 130,
            UNDEF_HD_COMMENT_LANGUAGE = 131,
            UNDEF_HD_COMMENT_SHORT_DESCRIPTION = 132,
            UNDEF_HD_COMMENT_CONTENT_FIELD = 133,
            UNDEF_HD_COMMERCIAL_PRICE = 134,
            UNDEF_HD_COMMERCIAL_VALID_UNTIL = 135,
            UNDEF_HD_COMMERCIAL_CONTACT_URL = 136,
            UNDEF_HD_COMMERCIAL_NAME_OF_SELLER = 137,
            UNDEF_HD_COMMERCIAL_DESCRIPTION = 138,
            UNDEF_HD_COMMERCIAL_RECEIVE_AS = 139,
            UNDEF_HD_GENRE = 140
        };
        
        MetaIndexUndef() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::UNDEF_RTP_DUMMY)) {}
        MetaIndexUndef(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::UNDEF_RTP_DUMMY):
                case static_cast<int32_t>(Literal::UNDEF_RTP_TITLE):
                case static_cast<int32_t>(Literal::UNDEF_RTP_ALBUM):
                case static_cast<int32_t>(Literal::UNDEF_RTP_TRACKNUMBER):
                case static_cast<int32_t>(Literal::UNDEF_RTP_ARTIST):
                case static_cast<int32_t>(Literal::UNDEF_RTP_COMPOSITION):
                case static_cast<int32_t>(Literal::UNDEF_RTP_MOVEMENT):
                case static_cast<int32_t>(Literal::UNDEF_RTP_CONDUCTOR):
                case static_cast<int32_t>(Literal::UNDEF_RTP_COMPOSER):
                case static_cast<int32_t>(Literal::UNDEF_RTP_BAND):
                case static_cast<int32_t>(Literal::UNDEF_RTP_COMMENT):
                case static_cast<int32_t>(Literal::UNDEF_RTP_GENRE):
                case static_cast<int32_t>(Literal::UNDEF_RTP_NEWS):
                case static_cast<int32_t>(Literal::UNDEF_RTP_NEWS_LOCAL):
                case static_cast<int32_t>(Literal::UNDEF_RTP_STOCKMARKET):
                case static_cast<int32_t>(Literal::UNDEF_RTP_SPORT):
                case static_cast<int32_t>(Literal::UNDEF_RTP_LOTTERY):
                case static_cast<int32_t>(Literal::UNDEF_RTP_HOROSCOPE):
                case static_cast<int32_t>(Literal::UNDEF_RTP_DAILY_DIVISION):
                case static_cast<int32_t>(Literal::UNDEF_RTP_HEALTH):
                case static_cast<int32_t>(Literal::UNDEF_RTP_EVENT):
                case static_cast<int32_t>(Literal::UNDEF_RTP_SZENE):
                case static_cast<int32_t>(Literal::UNDEF_RTP_CINEMA):
                case static_cast<int32_t>(Literal::UNDEF_RTP_TV):
                case static_cast<int32_t>(Literal::UNDEF_RTP_DATE_TIME):
                case static_cast<int32_t>(Literal::UNDEF_RTP_WEATHER):
                case static_cast<int32_t>(Literal::UNDEF_RTP_TRAFFIC):
                case static_cast<int32_t>(Literal::UNDEF_RTP_ALARM):
                case static_cast<int32_t>(Literal::UNDEF_RTP_ADVERTISEMENT):
                case static_cast<int32_t>(Literal::UNDEF_RTP_URL):
                case static_cast<int32_t>(Literal::UNDEF_RTP_OTHER):
                case static_cast<int32_t>(Literal::UNDEF_RTP_STATIONNAME_SHORT):
                case static_cast<int32_t>(Literal::UNDEF_RTP_STATIONNAME_LONG):
                case static_cast<int32_t>(Literal::UNDEF_RTP_NOW):
                case static_cast<int32_t>(Literal::UNDEF_RTP_NEXT):
                case static_cast<int32_t>(Literal::UNDEF_RTP_PART):
                case static_cast<int32_t>(Literal::UNDEF_RTP_HOST):
                case static_cast<int32_t>(Literal::UNDEF_RTP_EDITORIAL):
                case static_cast<int32_t>(Literal::UNDEF_RTP_FREQUENCY):
                case static_cast<int32_t>(Literal::UNDEF_RTP_HOMEPAGE):
                case static_cast<int32_t>(Literal::UNDEF_RTP_SUBCHANNEL):
                case static_cast<int32_t>(Literal::UNDEF_RTP_PHONE_HOTLINE):
                case static_cast<int32_t>(Literal::UNDEF_RTP_PHONE_STUDIO):
                case static_cast<int32_t>(Literal::UNDEF_RTP_PHONE_OTHER):
                case static_cast<int32_t>(Literal::UNDEF_RTP_SMS_STUDIO):
                case static_cast<int32_t>(Literal::UNDEF_RTP_SMS_OTHER):
                case static_cast<int32_t>(Literal::UNDEF_RTP_EMAIL_HOTLINE):
                case static_cast<int32_t>(Literal::UNDEF_RTP_EMAIL_STUDIO):
                case static_cast<int32_t>(Literal::UNDEF_RTP_EMAIL_OTHER):
                case static_cast<int32_t>(Literal::UNDEF_RTP_MMS_OTHER):
                case static_cast<int32_t>(Literal::UNDEF_RTP_CHAT):
                case static_cast<int32_t>(Literal::UNDEF_RTP_CHAT_CENTER):
                case static_cast<int32_t>(Literal::UNDEF_RTP_VOTE_QUESTION):
                case static_cast<int32_t>(Literal::UNDEF_RTP_VOTE_CENTER):
                case static_cast<int32_t>(Literal::UNDEF_RTP_PLACE):
                case static_cast<int32_t>(Literal::UNDEF_RTP_APPOINTMENT):
                case static_cast<int32_t>(Literal::UNDEF_RTP_IDENTIFIER):
                case static_cast<int32_t>(Literal::UNDEF_RTP_PURCHASE):
                case static_cast<int32_t>(Literal::UNDEF_RTP_GET_DATA):
                case static_cast<int32_t>(Literal::UNDEF_HD_ARTIST):
                case static_cast<int32_t>(Literal::UNDEF_HD_TITLE):
                case static_cast<int32_t>(Literal::UNDEF_HD_ALBUM):
                case static_cast<int32_t>(Literal::UNDEF_HD_COMMENT_LANGUAGE):
                case static_cast<int32_t>(Literal::UNDEF_HD_COMMENT_SHORT_DESCRIPTION):
                case static_cast<int32_t>(Literal::UNDEF_HD_COMMENT_CONTENT_FIELD):
                case static_cast<int32_t>(Literal::UNDEF_HD_COMMERCIAL_PRICE):
                case static_cast<int32_t>(Literal::UNDEF_HD_COMMERCIAL_VALID_UNTIL):
                case static_cast<int32_t>(Literal::UNDEF_HD_COMMERCIAL_CONTACT_URL):
                case static_cast<int32_t>(Literal::UNDEF_HD_COMMERCIAL_NAME_OF_SELLER):
                case static_cast<int32_t>(Literal::UNDEF_HD_COMMERCIAL_DESCRIPTION):
                case static_cast<int32_t>(Literal::UNDEF_HD_COMMERCIAL_RECEIVE_AS):
                case static_cast<int32_t>(Literal::UNDEF_HD_GENRE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MetaIndexUndef &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MetaIndexUndef &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MetaIndexUndef &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MetaIndexUndef &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MetaIndexUndef &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MetaIndexUndef &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct NameIndexAmFm : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            AMFM_NAM_PS = 0,
            AMFM_NAM_HD = 1,
            AMFM_NAM_RT = 2
        };
        
        NameIndexAmFm() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::AMFM_NAM_PS)) {}
        NameIndexAmFm(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::AMFM_NAM_PS):
                case static_cast<int32_t>(Literal::AMFM_NAM_HD):
                case static_cast<int32_t>(Literal::AMFM_NAM_RT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const NameIndexAmFm &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const NameIndexAmFm &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const NameIndexAmFm &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const NameIndexAmFm &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const NameIndexAmFm &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const NameIndexAmFm &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct NameIndexDab : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DAB_NAM_CLONG = 0,
            DAB_NAM_CSHORT = 1,
            DAB_NAM_DYNAMIC = 2,
            DAB_NAM_SLONG = 3,
            DAB_NAM_SSHORT = 4,
            DAB_NAM_ELONG = 5,
            DAB_NAM_ESHORT = 6,
            DAB_NAM_FREQUENCY = 7
        };
        
        NameIndexDab() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DAB_NAM_CLONG)) {}
        NameIndexDab(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DAB_NAM_CLONG):
                case static_cast<int32_t>(Literal::DAB_NAM_CSHORT):
                case static_cast<int32_t>(Literal::DAB_NAM_DYNAMIC):
                case static_cast<int32_t>(Literal::DAB_NAM_SLONG):
                case static_cast<int32_t>(Literal::DAB_NAM_SSHORT):
                case static_cast<int32_t>(Literal::DAB_NAM_ELONG):
                case static_cast<int32_t>(Literal::DAB_NAM_ESHORT):
                case static_cast<int32_t>(Literal::DAB_NAM_FREQUENCY):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const NameIndexDab &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const NameIndexDab &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const NameIndexDab &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const NameIndexDab &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const NameIndexDab &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const NameIndexDab &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct NameIndexUndef : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            UNDEF_NAM_LONG = 0,
            UNDEF_NAM_SHORT = 1,
            UNDEF_NAM_DYNAMIC = 2
        };
        
        NameIndexUndef() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::UNDEF_NAM_LONG)) {}
        NameIndexUndef(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::UNDEF_NAM_LONG):
                case static_cast<int32_t>(Literal::UNDEF_NAM_SHORT):
                case static_cast<int32_t>(Literal::UNDEF_NAM_DYNAMIC):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const NameIndexUndef &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const NameIndexUndef &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const NameIndexUndef &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const NameIndexUndef &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const NameIndexUndef &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const NameIndexUndef &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct QualityIndexAmFm : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            AMFM_QAL_FIELDSTRENGTH = 0,
            AMFM_QAL_MULTIPATH = 1,
            AMFM_QAL_DIGITAL = 2
        };
        
        QualityIndexAmFm() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::AMFM_QAL_FIELDSTRENGTH)) {}
        QualityIndexAmFm(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::AMFM_QAL_FIELDSTRENGTH):
                case static_cast<int32_t>(Literal::AMFM_QAL_MULTIPATH):
                case static_cast<int32_t>(Literal::AMFM_QAL_DIGITAL):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const QualityIndexAmFm &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const QualityIndexAmFm &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const QualityIndexAmFm &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const QualityIndexAmFm &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const QualityIndexAmFm &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const QualityIndexAmFm &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct QualityIndexDab : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DAB_QAL_BER = 0,
            DAB_QAL_SERVICE = 1,
            DAB_QAL_AUDIO = 2
        };
        
        QualityIndexDab() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DAB_QAL_BER)) {}
        QualityIndexDab(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DAB_QAL_BER):
                case static_cast<int32_t>(Literal::DAB_QAL_SERVICE):
                case static_cast<int32_t>(Literal::DAB_QAL_AUDIO):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const QualityIndexDab &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const QualityIndexDab &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const QualityIndexDab &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const QualityIndexDab &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const QualityIndexDab &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const QualityIndexDab &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct QualityIndexUndef : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            UNDEF_QAL_AUDIO = 0
        };
        
        QualityIndexUndef() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::UNDEF_QAL_AUDIO)) {}
        QualityIndexUndef(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::UNDEF_QAL_AUDIO):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const QualityIndexUndef &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const QualityIndexUndef &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const QualityIndexUndef &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const QualityIndexUndef &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const QualityIndexUndef &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const QualityIndexUndef &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "IVIRadio.Station.StationTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(2, 0);
}

}; // struct StationTypes

} // namespace Station
} // namespace IVIRadio
} // namespace v2

namespace CommonAPI {
}


namespace std {
    //Hash for SelectionMode
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::SelectionMode> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::SelectionMode& selectionMode) const {
            return static_cast<int32_t>(selectionMode);
        }
    };
    //Hash for SeekMode
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::SeekMode> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::SeekMode& seekMode) const {
            return static_cast<int32_t>(seekMode);
        }
    };
    //Hash for SeekReturnValue
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::SeekReturnValue> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::SeekReturnValue& seekReturnValue) const {
            return static_cast<int32_t>(seekReturnValue);
        }
    };
    //Hash for StationType
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::StationType> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::StationType& stationType) const {
            return static_cast<int32_t>(stationType);
        }
    };
    //Hash for UpdateElement
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::UpdateElement> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::UpdateElement& updateElement) const {
            return static_cast<int32_t>(updateElement);
        }
    };
    //Hash for FlagsDefAmFm
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::FlagsDefAmFm> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::FlagsDefAmFm& flagsDefAmFm) const {
            return static_cast<int32_t>(flagsDefAmFm);
        }
    };
    //Hash for FlagsDefDab
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::FlagsDefDab> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::FlagsDefDab& flagsDefDab) const {
            return static_cast<int32_t>(flagsDefDab);
        }
    };
    //Hash for FlagsDefUndef
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::FlagsDefUndef> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::FlagsDefUndef& flagsDefUndef) const {
            return static_cast<int32_t>(flagsDefUndef);
        }
    };
    //Hash for GenreIndexAmFm
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::GenreIndexAmFm> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::GenreIndexAmFm& genreIndexAmFm) const {
            return static_cast<int32_t>(genreIndexAmFm);
        }
    };
    //Hash for GenreIndexDab
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::GenreIndexDab> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::GenreIndexDab& genreIndexDab) const {
            return static_cast<int32_t>(genreIndexDab);
        }
    };
    //Hash for GenreIndexUndef
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::GenreIndexUndef> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::GenreIndexUndef& genreIndexUndef) const {
            return static_cast<int32_t>(genreIndexUndef);
        }
    };
    //Hash for IdConstants
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::IdConstants> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::IdConstants& idConstants) const {
            return static_cast<int32_t>(idConstants);
        }
    };
    //Hash for IdIndexAmFm
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::IdIndexAmFm> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::IdIndexAmFm& idIndexAmFm) const {
            return static_cast<int32_t>(idIndexAmFm);
        }
    };
    //Hash for IdIndexAmFmFrequencyGrid
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::IdIndexAmFmFrequencyGrid> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::IdIndexAmFmFrequencyGrid& idIndexAmFmFrequencyGrid) const {
            return static_cast<int32_t>(idIndexAmFmFrequencyGrid);
        }
    };
    //Hash for IdIndexDab
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::IdIndexDab> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::IdIndexDab& idIndexDab) const {
            return static_cast<int32_t>(idIndexDab);
        }
    };
    //Hash for IdIndexUndef
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::IdIndexUndef> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::IdIndexUndef& idIndexUndef) const {
            return static_cast<int32_t>(idIndexUndef);
        }
    };
    //Hash for MetaIndexAmFm
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::MetaIndexAmFm> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::MetaIndexAmFm& metaIndexAmFm) const {
            return static_cast<int32_t>(metaIndexAmFm);
        }
    };
    //Hash for MetaIndexDab
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::MetaIndexDab> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::MetaIndexDab& metaIndexDab) const {
            return static_cast<int32_t>(metaIndexDab);
        }
    };
    //Hash for MetaIndexUndef
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::MetaIndexUndef> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::MetaIndexUndef& metaIndexUndef) const {
            return static_cast<int32_t>(metaIndexUndef);
        }
    };
    //Hash for NameIndexAmFm
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::NameIndexAmFm> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::NameIndexAmFm& nameIndexAmFm) const {
            return static_cast<int32_t>(nameIndexAmFm);
        }
    };
    //Hash for NameIndexDab
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::NameIndexDab> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::NameIndexDab& nameIndexDab) const {
            return static_cast<int32_t>(nameIndexDab);
        }
    };
    //Hash for NameIndexUndef
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::NameIndexUndef> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::NameIndexUndef& nameIndexUndef) const {
            return static_cast<int32_t>(nameIndexUndef);
        }
    };
    //Hash for QualityIndexAmFm
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::QualityIndexAmFm> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::QualityIndexAmFm& qualityIndexAmFm) const {
            return static_cast<int32_t>(qualityIndexAmFm);
        }
    };
    //Hash for QualityIndexDab
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::QualityIndexDab> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::QualityIndexDab& qualityIndexDab) const {
            return static_cast<int32_t>(qualityIndexDab);
        }
    };
    //Hash for QualityIndexUndef
    template<>
    struct hash<::v2::IVIRadio::Station::StationTypes::QualityIndexUndef> {
        inline size_t operator()(const ::v2::IVIRadio::Station::StationTypes::QualityIndexUndef& qualityIndexUndef) const {
            return static_cast<int32_t>(qualityIndexUndef);
        }
    };
}


// Compatibility
namespace v2_0 = v2;

#endif // V2_IVIRADIO_STATION_Station_Types_HPP_
