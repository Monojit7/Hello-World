/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
/**
 * description: LocationInput = This interface offers functions that implement the
 *   location-input functionality of a navigation system
 */
#ifndef V2_ORG_HARMAN_NAV_CTRL_DI_Location_Input_PROXY_BASE_HPP_
#define V2_ORG_HARMAN_NAV_CTRL_DI_Location_Input_PROXY_BASE_HPP_

#include <v2/org/harman/nav/ctrl/di/LocationInput.hpp>


#include <org/harman/nav/ctrl/CommonTypes.hpp>
#include <v2/org/harman/nav/ctrl/di/LocationInputTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v2 {
namespace org {
namespace harman {
namespace nav {
namespace ctrl {
namespace di {

class LocationInputProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::org::harman::nav::ctrl::CommonTypes::Handle, ::v2::org::harman::nav::ctrl::di::LocationInputTypes::AddressAttribute
    > CurrentSelectionCriterionEvent;
    typedef CommonAPI::Event<
        ::org::harman::nav::ctrl::CommonTypes::Handle, ::v2::org::harman::nav::ctrl::di::LocationInputTypes::SearchStatus
    > SearchStatusEvent;
    typedef CommonAPI::Event<
        ::org::harman::nav::ctrl::CommonTypes::Handle, std::string, std::string, bool
    > SpellResultEvent;
    typedef CommonAPI::Event<
        ::org::harman::nav::ctrl::CommonTypes::Handle, uint16_t, uint16_t, uint16_t, std::vector<::v2::org::harman::nav::ctrl::di::LocationInputTypes::Address>
    > SearchResultListEvent;
    typedef CommonAPI::Event<
        ::org::harman::nav::ctrl::CommonTypes::Handle, uint16_t
    > SearchResultListSizeChangedEvent;
    typedef CommonAPI::Event<
        ::org::harman::nav::ctrl::CommonTypes::Handle, bool, std::vector<::v2::org::harman::nav::ctrl::di::LocationInputTypes::AddressAttribute>, ::v2::org::harman::nav::ctrl::di::LocationInputTypes::Address
    > ContentUpdatedEvent;
    typedef CommonAPI::Event<
        ::org::harman::nav::ctrl::CommonTypes::Handle, std::vector<::v2::org::harman::nav::ctrl::di::LocationInputTypes::Address>, std::vector<::v2::org::harman::nav::ctrl::di::LocationInputTypes::ValidationStatus>
    > AddressValidationResultEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::org::harman::nav::ctrl::CommonTypes::Version&)> GetVersionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const LocationInput::createLocationInputError&, const ::org::harman::nav::ctrl::CommonTypes::Handle&)> CreateLocationInputAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> DeleteLocationInputAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v2::org::harman::nav::ctrl::di::LocationInputTypes::AddressAttributeList&)> GetSupportedAddressAttributesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const LocationInput::setAddressError&)> SetAddressAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const LocationInput::setSelectionCriterionError&)> SetSelectionCriterionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const LocationInput::spellError&)> SpellAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const LocationInput::searchError&)> SearchAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const LocationInput::requestListUpdateError&)> RequestListUpdateAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const LocationInput::selectEntryError&)> SelectEntryAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v2::org::harman::nav::ctrl::di::LocationInputTypes::Address&)> GetEntryAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> ValidateAddressAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> ReverseGeocodeAsyncCallback;


    /**
     * description: currentSelectionCriterion = This signal notifies the SelectionCriterion for the
     *   current speller input or search.
     */
    virtual CurrentSelectionCriterionEvent& getCurrentSelectionCriterionEvent() = 0;
    /**
     * description: searchStatus = This signal updates the search status of the specified session
     */
    virtual SearchStatusEvent& getSearchStatusEvent() = 0;
    /**
     * description: spellResult = This signal notifies the result of the previous Spell method
     */
    virtual SpellResultEvent& getSpellResultEvent() = 0;
    /**
     * description: searchResultList = This signal updates the address result list (e.g. after a
     *   Search/Spell/Scroll call)
     */
    virtual SearchResultListEvent& getSearchResultListEvent() = 0;
    /**
     * description: searchResultListSizeChanged = This signal updates the size of the address
     *   result list
     */
    virtual SearchResultListSizeChangedEvent& getSearchResultListSizeChangedEvent() = 0;
    /**
     * description: contentUpdated = This signal updates the input content data for the specified
     *   session
     */
    virtual ContentUpdatedEvent& getContentUpdatedEvent() = 0;
    /**
     * description: addressValidationResult = This signal notifies the validation result of a
     *   former ValidateAddress call
          TBD: functionality to be clarified
     */
    virtual AddressValidationResultEvent& getAddressValidationResultEvent() = 0;

    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     */
    virtual void getVersion(CommonAPI::CallStatus &_internalCallStatus, ::org::harman::nav::ctrl::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(GetVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: createLocationInput = This method creates a new location input and retrieves a
     *   handle
     */
    virtual void createLocationInput(CommonAPI::CallStatus &_internalCallStatus, LocationInput::createLocationInputError &_error, ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> createLocationInputAsync(CreateLocationInputAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: deleteLocationInput = This method deletes a location input and its associated
     *   resources
     */
    virtual void deleteLocationInput(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> deleteLocationInputAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, DeleteLocationInputAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getSupportedAddressAttributes = This method retrieves the supported address
     *   attributes
     */
    virtual void getSupportedAddressAttributes(CommonAPI::CallStatus &_internalCallStatus, ::v2::org::harman::nav::ctrl::di::LocationInputTypes::AddressAttributeList &_addressAttributesList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSupportedAddressAttributesAsync(GetSupportedAddressAttributesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setAddress = This method sets the address to start with for the LocationInput
     *   identified by the given handle
     */
    virtual void setAddress(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const ::v2::org::harman::nav::ctrl::di::LocationInputTypes::Address &_address, CommonAPI::CallStatus &_internalCallStatus, LocationInput::setAddressError &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setAddressAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const ::v2::org::harman::nav::ctrl::di::LocationInputTypes::Address &_address, SetAddressAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setSelectionCriterion = This method sets the selection criterion for the
     *   current speller, search input and the corresponding result-lists for the
     *   current session
     */
    virtual void setSelectionCriterion(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const ::v2::org::harman::nav::ctrl::di::LocationInputTypes::AddressAttribute &_selectionCriterion, CommonAPI::CallStatus &_internalCallStatus, LocationInput::setSelectionCriterionError &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setSelectionCriterionAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const ::v2::org::harman::nav::ctrl::di::LocationInputTypes::AddressAttribute &_selectionCriterion, SetSelectionCriterionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: spell = This method sends the next spell input for the current session
         
     *   TBD: expected broadcasts
     */
    virtual void spell(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const std::string &_inputCharacter, const uint16_t &_maxWindowSize, CommonAPI::CallStatus &_internalCallStatus, LocationInput::spellError &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> spellAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const std::string &_inputCharacter, const uint16_t &_maxWindowSize, SpellAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: search = This method sets the inputString for the current selection criterion
     
     *       TBD: expected broadcasts
     */
    virtual void search(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const std::string &_inputString, const uint16_t &_maxWindowSize, CommonAPI::CallStatus &_internalCallStatus, LocationInput::searchError &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> searchAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const std::string &_inputString, const uint16_t &_maxWindowSize, SearchAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: requestListUpdate = This method sends a request for more list elements for the
     *   current session
          If a session changes, e.g. new character is entered, a
     *   new list is generated. Offset is starting at 0 again.
     */
    virtual void requestListUpdate(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, CommonAPI::CallStatus &_internalCallStatus, LocationInput::requestListUpdateError &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestListUpdateAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, RequestListUpdateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: selectEntry = This method triggers selection of a result list entry by index
     */
    virtual void selectEntry(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const uint16_t &_index, CommonAPI::CallStatus &_internalCallStatus, LocationInput::selectEntryError &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> selectEntryAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const uint16_t &_index, SelectEntryAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getEntry = This method synchronously gets the address for the given result list
     *   entry
     */
    virtual void getEntry(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const uint16_t &_index, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::harman::nav::ctrl::di::LocationInputTypes::Address &_address, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getEntryAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const uint16_t &_index, GetEntryAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: validateAddress = This method validates an address from different sources than
     *   Navigation
          TBD: functionality to be clarified
     */
    virtual void validateAddress(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const ::v2::org::harman::nav::ctrl::di::LocationInputTypes::Address &_inputAddress, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> validateAddressAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const ::v2::org::harman::nav::ctrl::di::LocationInputTypes::Address &_inputAddress, ValidateAddressAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: reverseGeocode = This method transforms a geocoordinate into an address
     */
    virtual void reverseGeocode(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const ::org::harman::nav::ctrl::CommonTypes::Coordinate2D &_coordinate, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> reverseGeocodeAsync(const ::org::harman::nav::ctrl::CommonTypes::Handle &_locationInputHandle, const ::org::harman::nav::ctrl::CommonTypes::Coordinate2D &_coordinate, ReverseGeocodeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace di
} // namespace ctrl
} // namespace nav
} // namespace harman
} // namespace org
} // namespace v2


// Compatibility
namespace v2_1 = v2;

#endif // V2_ORG_HARMAN_NAV_CTRL_DI_Location_Input_PROXY_BASE_HPP_
