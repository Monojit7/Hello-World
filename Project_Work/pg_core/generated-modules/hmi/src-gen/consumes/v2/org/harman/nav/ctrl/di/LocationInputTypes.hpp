/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V2_ORG_HARMAN_NAV_CTRL_DI_Location_Input_Types_HPP_
#define V2_ORG_HARMAN_NAV_CTRL_DI_Location_Input_Types_HPP_


#include <org/harman/nav/ctrl/CommonTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/ByteBuffer.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <CommonAPI/Variant.hpp>
#include <cstdint>
#include <memory>
#include <string>
#include <unordered_map>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v2 {
namespace org {
namespace harman {
namespace nav {
namespace ctrl {
namespace di {

struct LocationInputTypes {
    
    struct AddressAttribute : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            LATITUDE = 1,
            LONGITUDE = 2,
            ALTITUDE = 3,
            COUNTRY = 4,
            STATE = 5,
            CITY = 6,
            ZIPCODE = 7,
            STREET = 8,
            HOUSENUMBER = 9,
            CROSSING = 10,
            DISTRICT = 11,
            TOWNCENTER = 12,
            REFINEMENT = 13,
            FULL_ADDRESS = 14,
            COUNTRYFLAG = 15,
            COUNTRYSET = 16,
            COUNTRYABBR = 17,
            INTERNAL_DATA = 18
        };
        
        AddressAttribute() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        AddressAttribute(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        AddressAttribute &operator=(const ::org::harman::nav::ctrl::CommonTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::LATITUDE):
                case static_cast<int32_t>(Literal::LONGITUDE):
                case static_cast<int32_t>(Literal::ALTITUDE):
                case static_cast<int32_t>(Literal::COUNTRY):
                case static_cast<int32_t>(Literal::STATE):
                case static_cast<int32_t>(Literal::CITY):
                case static_cast<int32_t>(Literal::ZIPCODE):
                case static_cast<int32_t>(Literal::STREET):
                case static_cast<int32_t>(Literal::HOUSENUMBER):
                case static_cast<int32_t>(Literal::CROSSING):
                case static_cast<int32_t>(Literal::DISTRICT):
                case static_cast<int32_t>(Literal::TOWNCENTER):
                case static_cast<int32_t>(Literal::REFINEMENT):
                case static_cast<int32_t>(Literal::FULL_ADDRESS):
                case static_cast<int32_t>(Literal::COUNTRYFLAG):
                case static_cast<int32_t>(Literal::COUNTRYSET):
                case static_cast<int32_t>(Literal::COUNTRYABBR):
                case static_cast<int32_t>(Literal::INTERNAL_DATA):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AddressAttribute &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AddressAttribute &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AddressAttribute &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AddressAttribute &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AddressAttribute &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AddressAttribute &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ValidationType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            OK = 1,
            UNKNOWN = 2,
            AMBIGUOUS = 3,
            INCONSISTENT = 4
        };
        
        ValidationType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        ValidationType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        ValidationType &operator=(const ::org::harman::nav::ctrl::CommonTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::OK):
                case static_cast<int32_t>(Literal::UNKNOWN):
                case static_cast<int32_t>(Literal::AMBIGUOUS):
                case static_cast<int32_t>(Literal::INCONSISTENT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ValidationType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ValidationType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ValidationType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ValidationType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ValidationType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ValidationType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SearchStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            SEARCHING = 1,
            FINISHED = 2
        };
        
        SearchStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        SearchStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        SearchStatus &operator=(const ::org::harman::nav::ctrl::CommonTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::SEARCHING):
                case static_cast<int32_t>(Literal::FINISHED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SearchStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SearchStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SearchStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SearchStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SearchStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SearchStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    typedef std::vector<LocationInputTypes::AddressAttribute> AddressAttributeList;
    typedef CommonAPI::Variant<int32_t, double, std::string, ::org::harman::nav::ctrl::CommonTypes::Coordinate3D, CommonAPI::ByteBuffer>  AddressValue;
    typedef std::unordered_map<::v2::org::harman::nav::ctrl::di::LocationInputTypes::AddressAttribute, ::v2::org::harman::nav::ctrl::di::LocationInputTypes::AddressValue, CommonAPI::EnumHasher<::v2::org::harman::nav::ctrl::di::LocationInputTypes::AddressAttribute>> Address;
    typedef std::unordered_map<::v2::org::harman::nav::ctrl::di::LocationInputTypes::AddressAttribute, ::v2::org::harman::nav::ctrl::di::LocationInputTypes::ValidationType, CommonAPI::EnumHasher<::v2::org::harman::nav::ctrl::di::LocationInputTypes::AddressAttribute>> ValidationStatus;



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.harman.nav.ctrl.di.LocationInputTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(2, 2);
}

}; // struct LocationInputTypes

} // namespace di
} // namespace ctrl
} // namespace nav
} // namespace harman
} // namespace org
} // namespace v2

namespace CommonAPI {
}


namespace std {
    //Hash for AddressAttribute
    template<>
    struct hash<::v2::org::harman::nav::ctrl::di::LocationInputTypes::AddressAttribute> {
        inline size_t operator()(const ::v2::org::harman::nav::ctrl::di::LocationInputTypes::AddressAttribute& addressAttribute) const {
            return static_cast<int32_t>(addressAttribute);
        }
    };
    //Hash for ValidationType
    template<>
    struct hash<::v2::org::harman::nav::ctrl::di::LocationInputTypes::ValidationType> {
        inline size_t operator()(const ::v2::org::harman::nav::ctrl::di::LocationInputTypes::ValidationType& validationType) const {
            return static_cast<int32_t>(validationType);
        }
    };
    //Hash for SearchStatus
    template<>
    struct hash<::v2::org::harman::nav::ctrl::di::LocationInputTypes::SearchStatus> {
        inline size_t operator()(const ::v2::org::harman::nav::ctrl::di::LocationInputTypes::SearchStatus& searchStatus) const {
            return static_cast<int32_t>(searchStatus);
        }
    };
}


// Compatibility
namespace v2_2 = v2;

#endif // V2_ORG_HARMAN_NAV_CTRL_DI_Location_Input_Types_HPP_
