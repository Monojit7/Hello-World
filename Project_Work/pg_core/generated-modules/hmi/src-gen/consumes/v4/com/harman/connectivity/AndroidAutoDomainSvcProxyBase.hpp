/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V4_COM_HARMAN_CONNECTIVITY_Android_Auto_Domain_Svc_PROXY_BASE_HPP_
#define V4_COM_HARMAN_CONNECTIVITY_Android_Auto_Domain_Svc_PROXY_BASE_HPP_

#include <v4/com/harman/connectivity/AndroidAutoDomainSvc.hpp>



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace com {
namespace harman {
namespace connectivity {

class AndroidAutoDomainSvcProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::v4::com::harman::connectivity::AndroidAutoDomainSvc::enSessionStatus, std::string
    > SessionStatusEvent;
    typedef CommonAPI::Event<
    > RemoteScreenActiveEvent;
    typedef CommonAPI::Event<
    > RemoteScreenInactiveEvent;
    typedef CommonAPI::Event<
    > RequestScreenEvent;

    typedef std::function<void(const CommonAPI::CallStatus&)> ShowRemoteScreenAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> HideRemoteScreenAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> HideRemoteScreenTransientAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> ReportKeyAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> ReportKeyLongPressAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> ReportKeyAbsoluteAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> ReportKeyRelativeAsyncCallback;


    virtual SessionStatusEvent& getSessionStatusEvent() = 0;
    virtual RemoteScreenActiveEvent& getRemoteScreenActiveEvent() = 0;
    virtual RemoteScreenInactiveEvent& getRemoteScreenInactiveEvent() = 0;
    virtual RequestScreenEvent& getRequestScreenEvent() = 0;

    virtual void showRemoteScreen(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> showRemoteScreenAsync(ShowRemoteScreenAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void hideRemoteScreen(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> hideRemoteScreenAsync(HideRemoteScreenAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void hideRemoteScreenTransient(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> hideRemoteScreenTransientAsync(HideRemoteScreenTransientAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void reportKey(const AndroidAutoDomainSvc::enKeyCodes &_keycode, const bool &_isDown, const int32_t &_metaState, CommonAPI::CallStatus &_internalCallStatus, int32_t &_retval, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> reportKeyAsync(const AndroidAutoDomainSvc::enKeyCodes &_keycode, const bool &_isDown, const int32_t &_metaState, ReportKeyAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void reportKeyLongPress(const AndroidAutoDomainSvc::enKeyCodes &_keycode, const int32_t &_metastate, CommonAPI::CallStatus &_internalCallStatus, int32_t &_retval, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> reportKeyLongPressAsync(const AndroidAutoDomainSvc::enKeyCodes &_keycode, const int32_t &_metastate, ReportKeyLongPressAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void reportKeyAbsolute(const AndroidAutoDomainSvc::enKeyCodes &_keycode, const int32_t &_value, CommonAPI::CallStatus &_internalCallStatus, int32_t &_retval, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> reportKeyAbsoluteAsync(const AndroidAutoDomainSvc::enKeyCodes &_keycode, const int32_t &_value, ReportKeyAbsoluteAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void reportKeyRelative(const AndroidAutoDomainSvc::enKeyCodes &_keycode, const int32_t &_delta, CommonAPI::CallStatus &_internalCallStatus, int32_t &_retval, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> reportKeyRelativeAsync(const AndroidAutoDomainSvc::enKeyCodes &_keycode, const int32_t &_delta, ReportKeyRelativeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace connectivity
} // namespace harman
} // namespace com
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_COM_HARMAN_CONNECTIVITY_Android_Auto_Domain_Svc_PROXY_BASE_HPP_
