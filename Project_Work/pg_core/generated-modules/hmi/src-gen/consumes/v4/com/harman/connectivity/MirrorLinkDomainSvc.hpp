/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V4_COM_HARMAN_CONNECTIVITY_MIRROR_LINK_DOMAIN_SVC_HPP_
#define V4_COM_HARMAN_CONNECTIVITY_MIRROR_LINK_DOMAIN_SVC_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace com {
namespace harman {
namespace connectivity {

class MirrorLinkDomainSvc {
public:
    virtual ~MirrorLinkDomainSvc() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    typedef std::vector<uint32_t> AppIDs;
    /**
     * description: Icon information.
     */
    struct Icon : CommonAPI::Struct<std::string, uint32_t, uint32_t, uint32_t> {
    	
    	Icon() {
    	}
    	Icon(const std::string &_mimeType, const uint32_t &_width, const uint32_t &_height, const uint32_t &_depth)
    	{
    		std::get<0>(values_) = _mimeType;
    		std::get<1>(values_) = _width;
    		std::get<2>(values_) = _height;
    		std::get<3>(values_) = _depth;
    	}
    	/**
    	 * description: MIME type.
    	 */
    	inline const std::string &getMimeType() const { return std::get<0>(values_); }
    	inline void setMimeType(const std::string &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Icon width.
    	 */
    	inline const uint32_t &getWidth() const { return std::get<1>(values_); }
    	inline void setWidth(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Icon height.
    	 */
    	inline const uint32_t &getHeight() const { return std::get<2>(values_); }
    	inline void setHeight(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: Icon color depth.
    	 */
    	inline const uint32_t &getDepth() const { return std::get<3>(values_); }
    	inline void setDepth(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const Icon& _other) const {
                return (getMimeType() == _other.getMimeType() && getWidth() == _other.getWidth() && getHeight() == _other.getHeight() && getDepth() == _other.getDepth());
        }
    	inline bool operator!=(const Icon &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MirrorLinkDomainSvc::Icon> Icons;
    /**
     * description: Device information.
     */
    struct Device : CommonAPI::Struct<std::string, std::string, std::string, std::string, std::string, std::string, Icons> {
    	
    	Device() {
    	}
    	Device(const std::string &_id, const std::string &_name, const std::string &_manufacturer, const std::string &_modelName, const std::string &_serialNumber, const std::string &_bdAddr, const Icons &_icons)
    	{
    		std::get<0>(values_) = _id;
    		std::get<1>(values_) = _name;
    		std::get<2>(values_) = _manufacturer;
    		std::get<3>(values_) = _modelName;
    		std::get<4>(values_) = _serialNumber;
    		std::get<5>(values_) = _bdAddr;
    		std::get<6>(values_) = _icons;
    	}
    	/**
    	 * description: Unique identifier.
    	 */
    	inline const std::string &getId() const { return std::get<0>(values_); }
    	inline void setId(const std::string &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Name.
    	 */
    	inline const std::string &getName() const { return std::get<1>(values_); }
    	inline void setName(const std::string &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Device manufacturer.
    	 */
    	inline const std::string &getManufacturer() const { return std::get<2>(values_); }
    	inline void setManufacturer(const std::string &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: Model name.
    	 */
    	inline const std::string &getModelName() const { return std::get<3>(values_); }
    	inline void setModelName(const std::string &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: Serial number.
    	 */
    	inline const std::string &getSerialNumber() const { return std::get<4>(values_); }
    	inline void setSerialNumber(const std::string &_value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: Bluetooth address of device. May be empty if device
    	                         is
    	 *   not supporting bluetooth
    	 */
    	inline const std::string &getBdAddr() const { return std::get<5>(values_); }
    	inline void setBdAddr(const std::string &_value) { std::get<5>(values_) = _value; }
    	/**
    	 * description: List of icons.
    	 */
    	inline const Icons &getIcons() const { return std::get<6>(values_); }
    	inline void setIcons(const Icons &_value) { std::get<6>(values_) = _value; }
    	inline bool operator==(const Device& _other) const {
                return (getId() == _other.getId() && getName() == _other.getName() && getManufacturer() == _other.getManufacturer() && getModelName() == _other.getModelName() && getSerialNumber() == _other.getSerialNumber() && getBdAddr() == _other.getBdAddr() && getIcons() == _other.getIcons());
        }
    	inline bool operator!=(const Device &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MirrorLinkDomainSvc::Device> Devices;
    /**
     * description: Application category
     */
    struct ApplicationCategory : CommonAPI::Struct<std::string, std::string> {
    	
    	ApplicationCategory() {
    	}
    	ApplicationCategory(const std::string &_mainCategory, const std::string &_subCategory)
    	{
    		std::get<0>(values_) = _mainCategory;
    		std::get<1>(values_) = _subCategory;
    	}
    	/**
    	 * description: Main-category.
    	 */
    	inline const std::string &getMainCategory() const { return std::get<0>(values_); }
    	inline void setMainCategory(const std::string &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Sub-category.
    	 */
    	inline const std::string &getSubCategory() const { return std::get<1>(values_); }
    	inline void setSubCategory(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const ApplicationCategory& _other) const {
                return (getMainCategory() == _other.getMainCategory() && getSubCategory() == _other.getSubCategory());
        }
    	inline bool operator!=(const ApplicationCategory &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MirrorLinkDomainSvc::ApplicationCategory> ApplicationCategories;
    
    struct ApplicationCertificate : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            None = 0,
            Base = 1,
            Drive = 2
        };
        
        ApplicationCertificate() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::None)) {}
        ApplicationCertificate(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::None):
                case static_cast<int32_t>(Literal::Base):
                case static_cast<int32_t>(Literal::Drive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ApplicationCertificate &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ApplicationCertificate &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ApplicationCertificate &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ApplicationCertificate &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ApplicationCertificate &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ApplicationCertificate &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Application information.
     */
    struct Application : CommonAPI::Struct<uint32_t, std::string, Icons, ApplicationCategory, ApplicationCertificate, bool> {
    	
    	Application() {
    		std::get<5>(values_) = false;
    	}
    	Application(const uint32_t &_id, const std::string &_name, const Icons &_icons, const ApplicationCategory &_category, const ApplicationCertificate &_certificateType, const bool &_regionSupported)
    	{
    		std::get<0>(values_) = _id;
    		std::get<1>(values_) = _name;
    		std::get<2>(values_) = _icons;
    		std::get<3>(values_) = _category;
    		std::get<4>(values_) = _certificateType;
    		std::get<5>(values_) = _regionSupported;
    	}
    	/**
    	 * description: Unique identifier.
    	 */
    	inline const uint32_t &getId() const { return std::get<0>(values_); }
    	inline void setId(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Name.
    	 */
    	inline const std::string &getName() const { return std::get<1>(values_); }
    	inline void setName(const std::string &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: List of icons.
    	 */
    	inline const Icons &getIcons() const { return std::get<2>(values_); }
    	inline void setIcons(const Icons &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: Category.
    	 */
    	inline const ApplicationCategory &getCategory() const { return std::get<3>(values_); }
    	inline void setCategory(const ApplicationCategory &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: Type of the application certificate.
    	 */
    	inline const ApplicationCertificate &getCertificateType() const { return std::get<4>(values_); }
    	inline void setCertificateType(const ApplicationCertificate &_value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: Is region of certificate supported or not.
    	 */
    	inline const bool &getRegionSupported() const { return std::get<5>(values_); }
    	inline void setRegionSupported(const bool _value) { std::get<5>(values_) = _value; }
    	inline bool operator==(const Application& _other) const {
                return (getId() == _other.getId() && getName() == _other.getName() && getIcons() == _other.getIcons() && getCategory() == _other.getCategory() && getCertificateType() == _other.getCertificateType() && getRegionSupported() == _other.getRegionSupported());
        }
    	inline bool operator!=(const Application &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MirrorLinkDomainSvc::Application> Applications;
    
    struct ScalingMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            Invalid = 0,
            Original = 1,
            Full = 2,
            FullWithAspectRatio = 3
        };
        
        ScalingMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::Invalid)) {}
        ScalingMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::Invalid):
                case static_cast<int32_t>(Literal::Original):
                case static_cast<int32_t>(Literal::Full):
                case static_cast<int32_t>(Literal::FullWithAspectRatio):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ScalingMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ScalingMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ScalingMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ScalingMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ScalingMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ScalingMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Window attributes.
     */
    struct WindowAttributes : CommonAPI::Struct<uint16_t, uint16_t, ScalingMode, uint32_t> {
    	
    	WindowAttributes() {
    	}
    	WindowAttributes(const uint16_t &_width, const uint16_t &_height, const ScalingMode &_scalingMode, const uint32_t &_maxRefreshRate)
    	{
    		std::get<0>(values_) = _width;
    		std::get<1>(values_) = _height;
    		std::get<2>(values_) = _scalingMode;
    		std::get<3>(values_) = _maxRefreshRate;
    	}
    	/**
    	 * description: Width of window.
    	 */
    	inline const uint16_t &getWidth() const { return std::get<0>(values_); }
    	inline void setWidth(const uint16_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Height of window.
    	 */
    	inline const uint16_t &getHeight() const { return std::get<1>(values_); }
    	inline void setHeight(const uint16_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Scaling mode.
    	 */
    	inline const ScalingMode &getScalingMode() const { return std::get<2>(values_); }
    	inline void setScalingMode(const ScalingMode &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: Maximum refresh rate (frames per second). The actual refresh rate may
    	         
    	 *                  be lower depending on the displayed content. If the value is
    	 *   '0', the
    	                         highest possbile refresh rate is choosen.
    	 */
    	inline const uint32_t &getMaxRefreshRate() const { return std::get<3>(values_); }
    	inline void setMaxRefreshRate(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const WindowAttributes& _other) const {
                return (getWidth() == _other.getWidth() && getHeight() == _other.getHeight() && getScalingMode() == _other.getScalingMode() && getMaxRefreshRate() == _other.getMaxRefreshRate());
        }
    	inline bool operator!=(const WindowAttributes &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Individual touch event.
     */
    struct IndividualTouchEvent : CommonAPI::Struct<uint16_t, uint16_t, uint8_t, uint8_t> {
    	
    	IndividualTouchEvent() {
    	}
    	IndividualTouchEvent(const uint16_t &_xPosition, const uint16_t &_yPosition, const uint8_t &_eventIdentifier, const uint8_t &_pressureValue)
    	{
    		std::get<0>(values_) = _xPosition;
    		std::get<1>(values_) = _yPosition;
    		std::get<2>(values_) = _eventIdentifier;
    		std::get<3>(values_) = _pressureValue;
    	}
    	/**
    	 * description: X-position of the individual event.
    	 */
    	inline const uint16_t &getXPosition() const { return std::get<0>(values_); }
    	inline void setXPosition(const uint16_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Y-position of the individual event.
    	 */
    	inline const uint16_t &getYPosition() const { return std::get<1>(values_); }
    	inline void setYPosition(const uint16_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Event identifier.
    	 */
    	inline const uint8_t &getEventIdentifier() const { return std::get<2>(values_); }
    	inline void setEventIdentifier(const uint8_t &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: Pressure value. A zero value (0) indicates a
    	                         touch
    	 *   release event, a non-zero value indicates
    	                         a touch
    	 *   press event with the given pressure level.
    	                         TBC: max
    	 *   according to registry config
    	 */
    	inline const uint8_t &getPressureValue() const { return std::get<3>(values_); }
    	inline void setPressureValue(const uint8_t &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const IndividualTouchEvent& _other) const {
                return (getXPosition() == _other.getXPosition() && getYPosition() == _other.getYPosition() && getEventIdentifier() == _other.getEventIdentifier() && getPressureValue() == _other.getPressureValue());
        }
    	inline bool operator!=(const IndividualTouchEvent &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MirrorLinkDomainSvc::IndividualTouchEvent> IndividualTouchEvents;
    
    struct VisualContentRuleId : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            MinFontSizeRequired = 0,
            NoVideo = 1,
            NoAutoScrollText = 2,
            MaxFeedbackTime = 3
        };
        
        VisualContentRuleId() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::MinFontSizeRequired)) {}
        VisualContentRuleId(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::MinFontSizeRequired):
                case static_cast<int32_t>(Literal::NoVideo):
                case static_cast<int32_t>(Literal::NoAutoScrollText):
                case static_cast<int32_t>(Literal::MaxFeedbackTime):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VisualContentRuleId &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VisualContentRuleId &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VisualContentRuleId &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VisualContentRuleId &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VisualContentRuleId &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VisualContentRuleId &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Rule for visual content.
     */
    struct VisualContentRule : CommonAPI::Struct<VisualContentRuleId, std::string> {
    	
    	VisualContentRule() {
    	}
    	VisualContentRule(const VisualContentRuleId &_id, const std::string &_value)
    	{
    		std::get<0>(values_) = _id;
    		std::get<1>(values_) = _value;
    	}
    	/**
    	 * description: Unique rule identifier.
    	 */
    	inline const VisualContentRuleId &getId() const { return std::get<0>(values_); }
    	inline void setId(const VisualContentRuleId &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Rule-specific value.
    	 * details: MinFontSizeRequired - minimum font size REQUIRED in pixel
    	                    
    	 *   divided by the target vertical screen resolution in pixel
    	                    
    	 *   (fixed-point format [Q0.31]). The representation must be
    	                    
    	 *   in hexadecimal format including the hex delimiter "0x".
    	                    
    	 *   Negative number MUST not be used.
    	                     NoVideo - ignored
    	     
    	 *                  NoAutoScrollText - ignored
    	                     MaxFeedbackTime
    	 *   - 32 bit unsigned integer, represented in
    	                     hexadecimal
    	 *   format.
    	 */
    	inline const std::string &getValue() const { return std::get<1>(values_); }
    	inline void setValue(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const VisualContentRule& _other) const {
                return (getId() == _other.getId() && getValue() == _other.getValue());
        }
    	inline bool operator!=(const VisualContentRule &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MirrorLinkDomainSvc::VisualContentRule> VisualContentRules;
    
    struct AudioProtocol : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            RTP = 0,
            BTA2DP = 1,
            BTHFP = 2
        };
        
        AudioProtocol() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::RTP)) {}
        AudioProtocol(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::RTP):
                case static_cast<int32_t>(Literal::BTA2DP):
                case static_cast<int32_t>(Literal::BTHFP):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AudioProtocol &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AudioProtocol &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AudioProtocol &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AudioProtocol &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AudioProtocol &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AudioProtocol &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Audio protocol information.
     */
    struct AudioProtocolInfo : CommonAPI::Struct<AudioProtocol, std::string, std::string> {
    	
    	AudioProtocolInfo() {
    	}
    	AudioProtocolInfo(const AudioProtocol &_protocol, const std::string &_controller, const std::string &_instance)
    	{
    		std::get<0>(values_) = _protocol;
    		std::get<1>(values_) = _controller;
    		std::get<2>(values_) = _instance;
    	}
    	/**
    	 * description: Audio protocol.
    	 */
    	inline const AudioProtocol &getProtocol() const { return std::get<0>(values_); }
    	inline void setProtocol(const AudioProtocol &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Controller (only used for BT protocols).
    	 */
    	inline const std::string &getController() const { return std::get<1>(values_); }
    	inline void setController(const std::string &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Instance (only used for BT protocols).
    	 */
    	inline const std::string &getInstance() const { return std::get<2>(values_); }
    	inline void setInstance(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const AudioProtocolInfo& _other) const {
                return (getProtocol() == _other.getProtocol() && getController() == _other.getController() && getInstance() == _other.getInstance());
        }
    	inline bool operator!=(const AudioProtocolInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Virtual Keyboard text input area.
     */
    struct TextInputArea : CommonAPI::Struct<uint16_t, uint16_t, uint16_t, uint16_t> {
    	
    	TextInputArea() {
    	}
    	TextInputArea(const uint16_t &_xPosition, const uint16_t &_yPosition, const uint16_t &_width, const uint16_t &_height)
    	{
    		std::get<0>(values_) = _xPosition;
    		std::get<1>(values_) = _yPosition;
    		std::get<2>(values_) = _width;
    		std::get<3>(values_) = _height;
    	}
    	/**
    	 * description: Text input area - X-Position.
    	 */
    	inline const uint16_t &getXPosition() const { return std::get<0>(values_); }
    	inline void setXPosition(const uint16_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Text input area - Y-Position.
    	 */
    	inline const uint16_t &getYPosition() const { return std::get<1>(values_); }
    	inline void setYPosition(const uint16_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Text input area - Width.
    	 */
    	inline const uint16_t &getWidth() const { return std::get<2>(values_); }
    	inline void setWidth(const uint16_t &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: Text input area - Height.
    	 */
    	inline const uint16_t &getHeight() const { return std::get<3>(values_); }
    	inline void setHeight(const uint16_t &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const TextInputArea& _other) const {
                return (getXPosition() == _other.getXPosition() && getYPosition() == _other.getYPosition() && getWidth() == _other.getWidth() && getHeight() == _other.getHeight());
        }
    	inline bool operator!=(const TextInputArea &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MirrorLinkDomainSvc::AudioProtocolInfo> AudioProtocolInfos;
    typedef std::vector<std::string> Strings;
    /**
     * description: Notiofication Action
     */
    struct Action : CommonAPI::Struct<std::string, std::string, bool, Icons> {
    	
    	Action() {
    		std::get<2>(values_) = false;
    	}
    	Action(const std::string &_actionId, const std::string &_actionName, const bool &_launchApp, const Icons &_iconList)
    	{
    		std::get<0>(values_) = _actionId;
    		std::get<1>(values_) = _actionName;
    		std::get<2>(values_) = _launchApp;
    		std::get<3>(values_) = _iconList;
    	}
    	/**
    	 * description: Identifier of the Action
    	 */
    	inline const std::string &getActionId() const { return std::get<0>(values_); }
    	inline void setActionId(const std::string &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Name of the Action
    	 */
    	inline const std::string &getActionName() const { return std::get<1>(values_); }
    	inline void setActionName(const std::string &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Application launch status
    	 */
    	inline const bool &getLaunchApp() const { return std::get<2>(values_); }
    	inline void setLaunchApp(const bool _value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: List of Icons
    	 */
    	inline const Icons &getIconList() const { return std::get<3>(values_); }
    	inline void setIconList(const Icons &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const Action& _other) const {
                return (getActionId() == _other.getActionId() && getActionName() == _other.getActionName() && getLaunchApp() == _other.getLaunchApp() && getIconList() == _other.getIconList());
        }
    	inline bool operator!=(const Action &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MirrorLinkDomainSvc::Action> Actions;
    /**
     * description: Notification Information
     */
    struct Notification : CommonAPI::Struct<std::string, std::string, std::string, Icons, uint32_t, Actions> {
    	
    	Notification() {
    	}
    	Notification(const std::string &_notiId, const std::string &_notiTitle, const std::string &_notiBody, const Icons &_iconList, const uint32_t &_appId, const Actions &_actionList)
    	{
    		std::get<0>(values_) = _notiId;
    		std::get<1>(values_) = _notiTitle;
    		std::get<2>(values_) = _notiBody;
    		std::get<3>(values_) = _iconList;
    		std::get<4>(values_) = _appId;
    		std::get<5>(values_) = _actionList;
    	}
    	/**
    	 * description: Identifier of the Notification
    	 */
    	inline const std::string &getNotiId() const { return std::get<0>(values_); }
    	inline void setNotiId(const std::string &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Notification title
    	 */
    	inline const std::string &getNotiTitle() const { return std::get<1>(values_); }
    	inline void setNotiTitle(const std::string &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Notification Body
    	 */
    	inline const std::string &getNotiBody() const { return std::get<2>(values_); }
    	inline void setNotiBody(const std::string &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: List of Icons
    	 */
    	inline const Icons &getIconList() const { return std::get<3>(values_); }
    	inline void setIconList(const Icons &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: Identifier of the Application corresponds to the Notification
    	 */
    	inline const uint32_t &getAppId() const { return std::get<4>(values_); }
    	inline void setAppId(const uint32_t &_value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: List of Actions
    	 */
    	inline const Actions &getActionList() const { return std::get<5>(values_); }
    	inline void setActionList(const Actions &_value) { std::get<5>(values_) = _value; }
    	inline bool operator==(const Notification& _other) const {
                return (getNotiId() == _other.getNotiId() && getNotiTitle() == _other.getNotiTitle() && getNotiBody() == _other.getNotiBody() && getIconList() == _other.getIconList() && getAppId() == _other.getAppId() && getActionList() == _other.getActionList());
        }
    	inline bool operator!=(const Notification &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: MirrorLink Server device Event configuration details
     */
    struct ServerSupportedConfig : CommonAPI::Struct<uint16_t, uint16_t, uint16_t, uint16_t, Strings, Strings, Strings, bool, bool> {
    	
    	ServerSupportedConfig() {
    		std::get<7>(values_) = false;
    		std::get<8>(values_) = false;
    	}
    	ServerSupportedConfig(const uint16_t &_keyboardLayoutLanguageCode, const uint16_t &_keyboardLayoutCountryCode, const uint16_t &_uiLanguageCode, const uint16_t &_uiCountryCode, const Strings &_knobKeyEventsList, const Strings &_deviceKeysList, const Strings &_multimediaKeysList, const bool &_ituKeypadSupport, const bool &_virtualKeyboardSupport)
    	{
    		std::get<0>(values_) = _keyboardLayoutLanguageCode;
    		std::get<1>(values_) = _keyboardLayoutCountryCode;
    		std::get<2>(values_) = _uiLanguageCode;
    		std::get<3>(values_) = _uiCountryCode;
    		std::get<4>(values_) = _knobKeyEventsList;
    		std::get<5>(values_) = _deviceKeysList;
    		std::get<6>(values_) = _multimediaKeysList;
    		std::get<7>(values_) = _ituKeypadSupport;
    		std::get<8>(values_) = _virtualKeyboardSupport;
    	}
    	/**
    	 * description: Keyboard layout - Language code (according ISO 639-1)
    	 */
    	inline const uint16_t &getKeyboardLayoutLanguageCode() const { return std::get<0>(values_); }
    	inline void setKeyboardLayoutLanguageCode(const uint16_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Keyboard layout - Country code (according ISO 3166-1 alpha-2)
    	 */
    	inline const uint16_t &getKeyboardLayoutCountryCode() const { return std::get<1>(values_); }
    	inline void setKeyboardLayoutCountryCode(const uint16_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: UI Language - Language code (according ISO 639-1)
    	 */
    	inline const uint16_t &getUiLanguageCode() const { return std::get<2>(values_); }
    	inline void setUiLanguageCode(const uint16_t &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: UI Language - Country code (according ISO 3166-1 alpha-2)
    	 */
    	inline const uint16_t &getUiCountryCode() const { return std::get<3>(values_); }
    	inline void setUiCountryCode(const uint16_t &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: List of Knob Key events supported
    	 */
    	inline const Strings &getKnobKeyEventsList() const { return std::get<4>(values_); }
    	inline void setKnobKeyEventsList(const Strings &_value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: List of Device key events supported
    	 */
    	inline const Strings &getDeviceKeysList() const { return std::get<5>(values_); }
    	inline void setDeviceKeysList(const Strings &_value) { std::get<5>(values_) = _value; }
    	/**
    	 * description: List of Multimedia Key events supported
    	 */
    	inline const Strings &getMultimediaKeysList() const { return std::get<6>(values_); }
    	inline void setMultimediaKeysList(const Strings &_value) { std::get<6>(values_) = _value; }
    	/**
    	 * description: ITU Keypad(T9) events  support status
    	 */
    	inline const bool &getItuKeypadSupport() const { return std::get<7>(values_); }
    	inline void setItuKeypadSupport(const bool _value) { std::get<7>(values_) = _value; }
    	/**
    	 * description: Virtual keyboard trigger support status
    	 */
    	inline const bool &getVirtualKeyboardSupport() const { return std::get<8>(values_); }
    	inline void setVirtualKeyboardSupport(const bool _value) { std::get<8>(values_) = _value; }
    	inline bool operator==(const ServerSupportedConfig& _other) const {
                return (getKeyboardLayoutLanguageCode() == _other.getKeyboardLayoutLanguageCode() && getKeyboardLayoutCountryCode() == _other.getKeyboardLayoutCountryCode() && getUiLanguageCode() == _other.getUiLanguageCode() && getUiCountryCode() == _other.getUiCountryCode() && getKnobKeyEventsList() == _other.getKnobKeyEventsList() && getDeviceKeysList() == _other.getDeviceKeysList() && getMultimediaKeysList() == _other.getMultimediaKeysList() && getItuKeypadSupport() == _other.getItuKeypadSupport() && getVirtualKeyboardSupport() == _other.getVirtualKeyboardSupport());
        }
    	inline bool operator!=(const ServerSupportedConfig &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct Result : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            OK = 0,
            InternalError = 1,
            InvalidDeviceId = 2,
            ParameterError = 3,
            DeviceNotAttached = 4,
            DeviceAlreadyAttached = 5,
            NoApplicationLaunched = 6,
            ApplicationNotAllowed = 7,
            UpnpInternalError = 8,
            UpnpDeviceErrorDefault = 9,
            UpnpDeviceErrorDeviceLocked = 10,
            DapVerificationFailed = 11,
            DapCannotTrustAppUri = 12,
            OutOfMemory = 13,
            NotSupported = 14,
            NotImplemented = 15
        };
        
        Result() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::OK)) {}
        Result(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OK):
                case static_cast<int32_t>(Literal::InternalError):
                case static_cast<int32_t>(Literal::InvalidDeviceId):
                case static_cast<int32_t>(Literal::ParameterError):
                case static_cast<int32_t>(Literal::DeviceNotAttached):
                case static_cast<int32_t>(Literal::DeviceAlreadyAttached):
                case static_cast<int32_t>(Literal::NoApplicationLaunched):
                case static_cast<int32_t>(Literal::ApplicationNotAllowed):
                case static_cast<int32_t>(Literal::UpnpInternalError):
                case static_cast<int32_t>(Literal::UpnpDeviceErrorDefault):
                case static_cast<int32_t>(Literal::UpnpDeviceErrorDeviceLocked):
                case static_cast<int32_t>(Literal::DapVerificationFailed):
                case static_cast<int32_t>(Literal::DapCannotTrustAppUri):
                case static_cast<int32_t>(Literal::OutOfMemory):
                case static_cast<int32_t>(Literal::NotSupported):
                case static_cast<int32_t>(Literal::NotImplemented):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Result &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Result &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Result &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Result &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Result &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Result &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ChangeState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            New = 0,
            Deleted = 1
        };
        
        ChangeState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::New)) {}
        ChangeState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::New):
                case static_cast<int32_t>(Literal::Deleted):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ChangeState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ChangeState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ChangeState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ChangeState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ChangeState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ChangeState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VisualContentCategory : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            Text = 0,
            Video = 1,
            Image = 2,
            GraphicsVector = 3,
            Graphics3D = 4,
            UserInterface = 5,
            CarMode = 6,
            Miscellaneous = 7
        };
        
        VisualContentCategory() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::Text)) {}
        VisualContentCategory(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::Text):
                case static_cast<int32_t>(Literal::Video):
                case static_cast<int32_t>(Literal::Image):
                case static_cast<int32_t>(Literal::GraphicsVector):
                case static_cast<int32_t>(Literal::Graphics3D):
                case static_cast<int32_t>(Literal::UserInterface):
                case static_cast<int32_t>(Literal::CarMode):
                case static_cast<int32_t>(Literal::Miscellaneous):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VisualContentCategory &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VisualContentCategory &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VisualContentCategory &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VisualContentCategory &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VisualContentCategory &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VisualContentCategory &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    typedef std::vector<MirrorLinkDomainSvc::VisualContentCategory> VisualContentCategories;
    
    struct DeviceFeatureSetting : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            Invalid = 0,
            Disabled = 1,
            Enabled = 2
        };
        
        DeviceFeatureSetting() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::Invalid)) {}
        DeviceFeatureSetting(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::Invalid):
                case static_cast<int32_t>(Literal::Disabled):
                case static_cast<int32_t>(Literal::Enabled):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DeviceFeatureSetting &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DeviceFeatureSetting &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DeviceFeatureSetting &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DeviceFeatureSetting &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DeviceFeatureSetting &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DeviceFeatureSetting &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct AbsoluteFramebufferRotation : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            Invalid = 0,
            Degree0 = 1,
            Degree90 = 2,
            Degree180 = 3,
            Degree270 = 4
        };
        
        AbsoluteFramebufferRotation() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::Invalid)) {}
        AbsoluteFramebufferRotation(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::Invalid):
                case static_cast<int32_t>(Literal::Degree0):
                case static_cast<int32_t>(Literal::Degree90):
                case static_cast<int32_t>(Literal::Degree180):
                case static_cast<int32_t>(Literal::Degree270):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AbsoluteFramebufferRotation &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AbsoluteFramebufferRotation &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AbsoluteFramebufferRotation &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AbsoluteFramebufferRotation &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AbsoluteFramebufferRotation &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AbsoluteFramebufferRotation &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct FramebufferOrientation : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            Invalid = 0,
            Landscape = 1,
            Portrait = 2
        };
        
        FramebufferOrientation() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::Invalid)) {}
        FramebufferOrientation(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::Invalid):
                case static_cast<int32_t>(Literal::Landscape):
                case static_cast<int32_t>(Literal::Portrait):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const FramebufferOrientation &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FramebufferOrientation &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FramebufferOrientation &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FramebufferOrientation &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FramebufferOrientation &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const FramebufferOrientation &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ApplicationStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            Unknown = 0,
            Foreground = 1,
            Background = 2,
            NotRunning = 3
        };
        
        ApplicationStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::Unknown)) {}
        ApplicationStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::Unknown):
                case static_cast<int32_t>(Literal::Foreground):
                case static_cast<int32_t>(Literal::Background):
                case static_cast<int32_t>(Literal::NotRunning):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ApplicationStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ApplicationStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ApplicationStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ApplicationStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ApplicationStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ApplicationStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct WindowAttributeId : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            Width = 0,
            Height = 1,
            ScalingMode = 2,
            MaxRefreshRate = 3
        };
        
        WindowAttributeId() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::Width)) {}
        WindowAttributeId(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::Width):
                case static_cast<int32_t>(Literal::Height):
                case static_cast<int32_t>(Literal::ScalingMode):
                case static_cast<int32_t>(Literal::MaxRefreshRate):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const WindowAttributeId &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const WindowAttributeId &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const WindowAttributeId &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const WindowAttributeId &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const WindowAttributeId &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const WindowAttributeId &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    typedef std::vector<MirrorLinkDomainSvc::WindowAttributeId> WindowAttributeIds;
    
    struct TrustLevel : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            Unknown = 0,
            UserConfiguration = 1,
            SelfRegisteredApplication = 2,
            RegisteredApplication = 3,
            ApplicationCertificate = 4
        };
        
        TrustLevel() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::Unknown)) {}
        TrustLevel(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::Unknown):
                case static_cast<int32_t>(Literal::UserConfiguration):
                case static_cast<int32_t>(Literal::SelfRegisteredApplication):
                case static_cast<int32_t>(Literal::RegisteredApplication):
                case static_cast<int32_t>(Literal::ApplicationCertificate):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TrustLevel &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TrustLevel &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TrustLevel &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TrustLevel &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TrustLevel &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TrustLevel &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct KeyboardType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            Unknown = 0,
            Qwerty = 1,
            Numeric = 2
        };
        
        KeyboardType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::Unknown)) {}
        KeyboardType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::Unknown):
                case static_cast<int32_t>(Literal::Qwerty):
                case static_cast<int32_t>(Literal::Numeric):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const KeyboardType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const KeyboardType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const KeyboardType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const KeyboardType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const KeyboardType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const KeyboardType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
};

const char* MirrorLinkDomainSvc::getInterface() {
    return ("com.harman.connectivity.MirrorLinkDomainSvc");
}

CommonAPI::Version MirrorLinkDomainSvc::getInterfaceVersion() {
    return CommonAPI::Version(4, 0);
}

/**
 * description: Icon information.
 */
/**
 * description: Device information.
 */
/**
 * description: Application category
 */
/**
 * description: Application information.
 */
/**
 * description: Window attributes.
 */
/**
 * description: Individual touch event.
 */
/**
 * description: Rule for visual content.
 */
/**
 * description: Audio protocol information.
 */
/**
 * description: Virtual Keyboard text input area.
 */
/**
 * description: Notiofication Action
 */
/**
 * description: Notification Information
 */
/**
 * description: MirrorLink Server device Event configuration details
 */
/**
 * description: Function results.
 */
/**
 * description: Change state.
 */
/**
 * description: Category of visual content.
 */
/**
 * description: Visual content rule identifier.
 */
/**
 * description: Device feature setting.
 */
/**
 * description: Absolute framebuffer rotation (clock-wise).
 */
/**
 * description: Framebuffer orientation.
 */
/**
 * description: Audio protocol.
 */
/**
 * description: Application status.
 */
/**
 * description: Scaling mode.
 */
/**
 * description: Window attribute identifiers.
 */
/**
 * description: Trust level. The significance of the level is increasing in ascending order.
 */
/**
 * description: Keyboard type.
 */
/**
 * description: Application certificate type.
 */

} // namespace connectivity
} // namespace harman
} // namespace com
} // namespace v4

namespace CommonAPI {
}


// Compatibility
namespace v4_0 = v4;

#endif // V4_COM_HARMAN_CONNECTIVITY_MIRROR_LINK_DOMAIN_SVC_HPP_
