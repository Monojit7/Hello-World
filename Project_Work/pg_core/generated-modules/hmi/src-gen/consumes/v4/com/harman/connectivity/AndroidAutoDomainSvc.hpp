/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V4_COM_HARMAN_CONNECTIVITY_ANDROID_AUTO_DOMAIN_SVC_HPP_
#define V4_COM_HARMAN_CONNECTIVITY_ANDROID_AUTO_DOMAIN_SVC_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace com {
namespace harman {
namespace connectivity {

class AndroidAutoDomainSvc {
public:
    virtual ~AndroidAutoDomainSvc() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    
    struct enSessionStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            MESSAGE_UNSOLICITED = 1,
            MESSAGE_SUCCESS = 0,
            NO_COMPATIBLE_VERSION = -1,
            CERTIFICATE_ERROR = -2,
            AUTHENTICATION_FAILURE = -3,
            INVALID_SENSOR = -9,
            BT_PAIRING_DELAYED = -10,
            BT_UNAVAILABLE = -11,
            BT_INVALID_ADDESS = -12,
            BT_INVALID_PAIRING_METHOD = -13,
            BT_INVALID_AUTH_DATA = -14,
            BT_AUTHDATA_MISMATCH = -15,
            BT_HFP_ANOTHER_CONNECTION = -16,
            BT_HFP_CONNECTION_FAILURE = -17,
            KEYCODE_NOT_FOUND = -18,
            RADIO_INVALID_STATION = -19,
            INVALID_INPUT = -20,
            RADIO_STATION_PRESETS_NOT_SUPPORTED = -21,
            RADIO_COMM_ERROR = -22,
            SESSION_DISCONNECTED = -100,
            SESSION_FIRST_TIME_CONNECTING = -101,
            SESSION_CONNECTED = -102,
            NO_RESPONSE_FROM_PHONE = -103,
            ANDROID_ACCESSORY_IS_DISCONNECTED = 23,
            ANDROID_ACCESSORY_IS_CONNECTED = 24
        };
        
        enSessionStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::MESSAGE_UNSOLICITED)) {}
        enSessionStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::MESSAGE_UNSOLICITED):
                case static_cast<int32_t>(Literal::MESSAGE_SUCCESS):
                case static_cast<int32_t>(Literal::NO_COMPATIBLE_VERSION):
                case static_cast<int32_t>(Literal::CERTIFICATE_ERROR):
                case static_cast<int32_t>(Literal::AUTHENTICATION_FAILURE):
                case static_cast<int32_t>(Literal::INVALID_SENSOR):
                case static_cast<int32_t>(Literal::BT_PAIRING_DELAYED):
                case static_cast<int32_t>(Literal::BT_UNAVAILABLE):
                case static_cast<int32_t>(Literal::BT_INVALID_ADDESS):
                case static_cast<int32_t>(Literal::BT_INVALID_PAIRING_METHOD):
                case static_cast<int32_t>(Literal::BT_INVALID_AUTH_DATA):
                case static_cast<int32_t>(Literal::BT_AUTHDATA_MISMATCH):
                case static_cast<int32_t>(Literal::BT_HFP_ANOTHER_CONNECTION):
                case static_cast<int32_t>(Literal::BT_HFP_CONNECTION_FAILURE):
                case static_cast<int32_t>(Literal::KEYCODE_NOT_FOUND):
                case static_cast<int32_t>(Literal::RADIO_INVALID_STATION):
                case static_cast<int32_t>(Literal::INVALID_INPUT):
                case static_cast<int32_t>(Literal::RADIO_STATION_PRESETS_NOT_SUPPORTED):
                case static_cast<int32_t>(Literal::RADIO_COMM_ERROR):
                case static_cast<int32_t>(Literal::SESSION_DISCONNECTED):
                case static_cast<int32_t>(Literal::SESSION_FIRST_TIME_CONNECTING):
                case static_cast<int32_t>(Literal::SESSION_CONNECTED):
                case static_cast<int32_t>(Literal::NO_RESPONSE_FROM_PHONE):
                case static_cast<int32_t>(Literal::ANDROID_ACCESSORY_IS_DISCONNECTED):
                case static_cast<int32_t>(Literal::ANDROID_ACCESSORY_IS_CONNECTED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enSessionStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enSessionStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enSessionStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enSessionStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enSessionStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enSessionStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enKeyCodes : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            KEYCODE_UNKNOWN = 0,
            KEYCODE_SOFT_LEFT = 1,
            KEYCODE_SOFT_RIGHT = 2,
            KEYCODE_HOME = 3,
            KEYCODE_BACK = 4,
            KEYCODE_CALL = 5,
            KEYCODE_ENDCALL = 6,
            KEYCODE_0 = 7,
            KEYCODE_1 = 8,
            KEYCODE_2 = 9,
            KEYCODE_3 = 10,
            KEYCODE_4 = 11,
            KEYCODE_5 = 12,
            KEYCODE_6 = 13,
            KEYCODE_7 = 14,
            KEYCODE_8 = 15,
            KEYCODE_9 = 16,
            KEYCODE_STAR = 17,
            KEYCODE_POUND = 18,
            KEYCODE_DPAD_UP = 19,
            KEYCODE_DPAD_DOWN = 20,
            KEYCODE_DPAD_LEFT = 21,
            KEYCODE_DPAD_RIGHT = 22,
            KEYCODE_DPAD_CENTER = 23,
            KEYCODE_VOLUME_UP = 24,
            KEYCODE_VOLUME_DOWN = 25,
            KEYCODE_POWER = 26,
            KEYCODE_CAMERA = 27,
            KEYCODE_CLEAR = 28,
            KEYCODE_A = 29,
            KEYCODE_B = 30,
            KEYCODE_C = 31,
            KEYCODE_D = 32,
            KEYCODE_E = 33,
            KEYCODE_F = 34,
            KEYCODE_G = 35,
            KEYCODE_H = 36,
            KEYCODE_I = 37,
            KEYCODE_J = 38,
            KEYCODE_K = 39,
            KEYCODE_L = 40,
            KEYCODE_M = 41,
            KEYCODE_N = 42,
            KEYCODE_O = 43,
            KEYCODE_P = 44,
            KEYCODE_Q = 45,
            KEYCODE_R = 46,
            KEYCODE_S = 47,
            KEYCODE_T = 48,
            KEYCODE_U = 49,
            KEYCODE_V = 50,
            KEYCODE_W = 51,
            KEYCODE_X = 52,
            KEYCODE_Y = 53,
            KEYCODE_Z = 54,
            KEYCODE_COMMA = 55,
            KEYCODE_PERIOD = 56,
            KEYCODE_ALT_LEFT = 57,
            KEYCODE_ALT_RIGHT = 58,
            KEYCODE_SHIFT_LEFT = 59,
            KEYCODE_SHIFT_RIGHT = 60,
            KEYCODE_TAB = 61,
            KEYCODE_SPACE = 62,
            KEYCODE_SYM = 63,
            KEYCODE_EXPLORER = 64,
            KEYCODE_ENVELOPE = 65,
            KEYCODE_ENTER = 66,
            KEYCODE_DEL = 67,
            KEYCODE_GRAVE = 68,
            KEYCODE_MINUS = 69,
            KEYCODE_EQUALS = 70,
            KEYCODE_LEFT_BRACKET = 71,
            KEYCODE_RIGHT_BRACKET = 72,
            KEYCODE_BACKSLASH = 73,
            KEYCODE_SEMICOLON = 74,
            KEYCODE_APOSTROPHE = 75,
            KEYCODE_SLASH = 76,
            KEYCODE_AT = 77,
            KEYCODE_NUM = 78,
            KEYCODE_HEADSETHOOK = 79,
            KEYCODE_FOCUS = 80,
            KEYCODE_PLUS = 81,
            KEYCODE_MENU = 82,
            KEYCODE_NOTIFICATION = 83,
            KEYCODE_SEARCH = 84,
            KEYCODE_MEDIA_PLAY_PAUSE = 85,
            KEYCODE_MEDIA_STOP = 86,
            KEYCODE_MEDIA_NEXT = 87,
            KEYCODE_MEDIA_PREVOUS = 88,
            KEYCODE_MEDIA_REWIND = 89,
            KEYCODE_MEDIA_FAST_FORWARD = 90,
            KEYCODE_MUTE = 91,
            KEYCODE_PAGE_UP = 92,
            KEYCODE_PAGE_DOWN = 93,
            KEYCODE_PICTSYMBOLS = 94,
            KEYCODE_SWITCH_CHARSET = 95,
            KEYCODE_BUTTON_A = 96,
            KEYCODE_BUTTON_B = 97,
            KEYCODE_BUTTON_C = 98,
            KEYCODE_BUTTON_X = 99,
            KEYCODE_BUTTON_Y = 100,
            KEYCODE_BUTTON_Z = 101,
            KEYCODE_BUTTON_L1 = 102,
            KEYCODE_BUTTON_R1 = 103,
            KEYCODE_BUTTON_L2 = 104,
            KEYCODE_BUTTON_R2 = 105,
            KEYCODE_BUTTON_THUMB_L = 106,
            KEYCODE_BUTTON_THUMB_R = 107,
            KEYCODE_BUTTON_START = 108,
            KEYCODE_BUTTON_SELECT = 109,
            KEYCODE_BUTTON_MODE = 110,
            KEYCODE_ESCAPE = 111,
            KEYCODE_FORWARD_DEL = 112,
            KEYCODE_CTRL_LEFT = 113,
            KEYCODE_CTRL_RIGHT = 114,
            KEYCODE_CAPS_LOCK = 115,
            KEYCODE_SCROLL_LOCK = 116,
            KEYCODE_META_LEFT = 117,
            KEYCODE_META_RIGHT = 118,
            KEYCODE_FUNCTION = 119,
            KEYCODE_SYSRQ = 120,
            KEYCODE_BREAK = 121,
            KEYCODE_MOVE_HOME = 122,
            KEYCODE_MOVE_END = 123,
            KEYCODE_INSERT = 124,
            KEYCODE_FORWARD = 125,
            KEYCODE_MEDIA_PLAY = 126,
            KEYCODE_MEDIA_PAUSE = 127,
            KEYCODE_MEDIA_CLOSE = 128,
            KEYCODE_MEDIA_EJECT = 129,
            KEYCODE_MEDIA_RECORD = 130,
            KEYCODE_F1 = 131,
            KEYCODE_F2 = 132,
            KEYCODE_F3 = 133,
            KEYCODE_F4 = 134,
            KEYCODE_F5 = 135,
            KEYCODE_F6 = 136,
            KEYCODE_F7 = 137,
            KEYCODE_F8 = 138,
            KEYCODE_F9 = 139,
            KEYCODE_F10 = 140,
            KEYCODE_F11 = 141,
            KEYCODE_F12 = 142,
            KEYCODE_NUM_LOCK = 143,
            KEYCODE_NUMPAD_0 = 144,
            KEYCODE_NUMPAD_1 = 145,
            KEYCODE_NUMPAD_2 = 146,
            KEYCODE_NUMPAD_3 = 147,
            KEYCODE_NUMPAD_4 = 148,
            KEYCODE_NUMPAD_5 = 149,
            KEYCODE_NUMPAD_6 = 150,
            KEYCODE_NUMPAD_7 = 151,
            KEYCODE_NUMPAD_8 = 152,
            KEYCODE_NUMPAD_9 = 153,
            KEYCODE_NUMPAD_DIVIDE = 154,
            KEYCODE_NUMPAD_MULTIPLY = 155,
            KEYCODE_NUMPAD_SUBTRACK = 156,
            KEYCODE_NUMPAD_ADD = 157,
            KEYCODE_NUMPAD_DOT = 158,
            KEYCODE_NUMPAD_COMMA = 159,
            KEYCODE_NUMPAD_ENTER = 160,
            KEYCODE_NUMPAD_EQUALS = 161,
            KEYCODE_NUMPAD_LEFT_PAREN = 162,
            KEYCODE_NUMPAD_RIGHT_PAREN = 163,
            KEYCODE_VOLUME_MUTE = 164,
            KEYCODE_INFO = 165,
            KEYCODE_CHANNEL_UP = 166,
            KEYCODE_CHANNEL_DOWN = 167,
            KEYCODE_ZOOM_IN = 168,
            KEYCODE_ZOMM_OUT = 169,
            KEYCODE_TV = 170,
            KEYCODE_WINDOW = 171,
            KEYCODE_GUIDE = 172,
            KEYCODE_DVR = 173,
            KEYCODE_BOOKMARK = 174,
            KEYCODE_CAPTIONS = 175,
            KEYCODE_SETTINGS = 176,
            KEYCODE_TV_POWER = 177,
            KEYCODE_TV_INPUT = 178,
            KEYCODE_STB_POWER = 179,
            KEYCODE_STB_INPUT = 180,
            KEYCODE_AVR_POWER = 181,
            KEYCODE_AVR_INPUT = 182,
            KEYCODE_PROG_RED = 183,
            KEYCODE_PROG_GREEN = 184,
            KEYCODE_PROG_YELLOW = 185,
            KEYCODE_PROG_BLUE = 186,
            KEYCODE_APP_SWITCH = 187,
            KEYCODE_BUTTON_1 = 188,
            KEYCODE_BUTTON_2 = 189,
            KEYCODE_BUTTON_3 = 190,
            KEYCODE_BUTTON_4 = 191,
            KEYCODE_BUTTON_5 = 192,
            KEYCODE_BUTTON_6 = 193,
            KEYCODE_BUTTON_7 = 194,
            KEYCODE_BUTTON_8 = 195,
            KEYCODE_BUTTON_9 = 196,
            KEYCODE_BUTTON_10 = 197,
            KEYCODE_BUTTON_11 = 198,
            KEYCODE_BUTTON_12 = 199,
            KEYCODE_BUTTON_13 = 200,
            KEYCODE_BUTTON_14 = 201,
            KEYCODE_BUTTON_15 = 202,
            KEYCODE_BUTTON_16 = 203,
            KEYCODE_LANGUAGE_SWITCH = 204,
            KEYCODE_MANNER_MODE = 205,
            KEYCODE_3D_MODE = 206,
            KEYCODE_CONTACTS = 207,
            KEYCODE_CALENDER = 208,
            KEYCODE_MUSIC = 209,
            KEYCODE_CALCULATOR = 210,
            KEYCODE_ZENKAKU_HANKAKU = 211,
            KEYCODE_EISU = 212,
            KEYCODE_MUHENKEN = 213,
            KEYCODE_HENKAN = 214,
            KEYCODE_KATAKANA_HIRAGANA = 215,
            KEYCODE_YEN = 216,
            KEYCODE_RO = 217,
            KEYCODE_KANA = 218,
            KEYCODE_ASSIST = 219,
            KEYCODE_BRIGHTNESS_DOWN = 220,
            KEYCODE_BRIGHTNESS_UP = 221,
            KEYCODE_MEDIA_AUDIO_TRACK = 222,
            KEYCODE_SLEEP = 223,
            KEYCODE_WAKEUP = 224,
            KEYCODE_PAIRING = 225,
            KEYCODE_MEDIA_TOP_MENU = 226,
            KEYCODE_HELP = 259,
            KEYCODE_NAVIGATE_PREVIOUS = 260,
            KEYCODE_NAVIGATE_NEXT = 261,
            KEYCODE_NAVIGATE_IN = 262,
            KEYCODE_NAVIGATE_OUT = 263,
            KEYCODE_DPAD_UP_LEFT = 268,
            KEYCODE_DPAD_DOWN_LEFT = 269,
            KEYCODE_DPAD_UP_RIGHT = 270,
            KEYCODE_DPAD_DOWN_RIGHT = 271,
            KEYCODE_SENTINEL = 65535,
            KEYCODE_ROTARY_CONTROLLER = 65536,
            KEYCODE_MEDIA = 65537,
            KEYCODE_NAVIATION = 65538,
            KEYCODE_RADIO = 65539,
            KEYCODE_TEL = 65540,
            KEYCODE_PRIMARY_BUTTON = 65541,
            KEYCODE_SECONDARY_BUTTON = 65542,
            KEYCODE_TERTIARY_BUTTON = 65543
        };
        
        enKeyCodes() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::KEYCODE_UNKNOWN)) {}
        enKeyCodes(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::KEYCODE_UNKNOWN):
                case static_cast<int32_t>(Literal::KEYCODE_SOFT_LEFT):
                case static_cast<int32_t>(Literal::KEYCODE_SOFT_RIGHT):
                case static_cast<int32_t>(Literal::KEYCODE_HOME):
                case static_cast<int32_t>(Literal::KEYCODE_BACK):
                case static_cast<int32_t>(Literal::KEYCODE_CALL):
                case static_cast<int32_t>(Literal::KEYCODE_ENDCALL):
                case static_cast<int32_t>(Literal::KEYCODE_0):
                case static_cast<int32_t>(Literal::KEYCODE_1):
                case static_cast<int32_t>(Literal::KEYCODE_2):
                case static_cast<int32_t>(Literal::KEYCODE_3):
                case static_cast<int32_t>(Literal::KEYCODE_4):
                case static_cast<int32_t>(Literal::KEYCODE_5):
                case static_cast<int32_t>(Literal::KEYCODE_6):
                case static_cast<int32_t>(Literal::KEYCODE_7):
                case static_cast<int32_t>(Literal::KEYCODE_8):
                case static_cast<int32_t>(Literal::KEYCODE_9):
                case static_cast<int32_t>(Literal::KEYCODE_STAR):
                case static_cast<int32_t>(Literal::KEYCODE_POUND):
                case static_cast<int32_t>(Literal::KEYCODE_DPAD_UP):
                case static_cast<int32_t>(Literal::KEYCODE_DPAD_DOWN):
                case static_cast<int32_t>(Literal::KEYCODE_DPAD_LEFT):
                case static_cast<int32_t>(Literal::KEYCODE_DPAD_RIGHT):
                case static_cast<int32_t>(Literal::KEYCODE_DPAD_CENTER):
                case static_cast<int32_t>(Literal::KEYCODE_VOLUME_UP):
                case static_cast<int32_t>(Literal::KEYCODE_VOLUME_DOWN):
                case static_cast<int32_t>(Literal::KEYCODE_POWER):
                case static_cast<int32_t>(Literal::KEYCODE_CAMERA):
                case static_cast<int32_t>(Literal::KEYCODE_CLEAR):
                case static_cast<int32_t>(Literal::KEYCODE_A):
                case static_cast<int32_t>(Literal::KEYCODE_B):
                case static_cast<int32_t>(Literal::KEYCODE_C):
                case static_cast<int32_t>(Literal::KEYCODE_D):
                case static_cast<int32_t>(Literal::KEYCODE_E):
                case static_cast<int32_t>(Literal::KEYCODE_F):
                case static_cast<int32_t>(Literal::KEYCODE_G):
                case static_cast<int32_t>(Literal::KEYCODE_H):
                case static_cast<int32_t>(Literal::KEYCODE_I):
                case static_cast<int32_t>(Literal::KEYCODE_J):
                case static_cast<int32_t>(Literal::KEYCODE_K):
                case static_cast<int32_t>(Literal::KEYCODE_L):
                case static_cast<int32_t>(Literal::KEYCODE_M):
                case static_cast<int32_t>(Literal::KEYCODE_N):
                case static_cast<int32_t>(Literal::KEYCODE_O):
                case static_cast<int32_t>(Literal::KEYCODE_P):
                case static_cast<int32_t>(Literal::KEYCODE_Q):
                case static_cast<int32_t>(Literal::KEYCODE_R):
                case static_cast<int32_t>(Literal::KEYCODE_S):
                case static_cast<int32_t>(Literal::KEYCODE_T):
                case static_cast<int32_t>(Literal::KEYCODE_U):
                case static_cast<int32_t>(Literal::KEYCODE_V):
                case static_cast<int32_t>(Literal::KEYCODE_W):
                case static_cast<int32_t>(Literal::KEYCODE_X):
                case static_cast<int32_t>(Literal::KEYCODE_Y):
                case static_cast<int32_t>(Literal::KEYCODE_Z):
                case static_cast<int32_t>(Literal::KEYCODE_COMMA):
                case static_cast<int32_t>(Literal::KEYCODE_PERIOD):
                case static_cast<int32_t>(Literal::KEYCODE_ALT_LEFT):
                case static_cast<int32_t>(Literal::KEYCODE_ALT_RIGHT):
                case static_cast<int32_t>(Literal::KEYCODE_SHIFT_LEFT):
                case static_cast<int32_t>(Literal::KEYCODE_SHIFT_RIGHT):
                case static_cast<int32_t>(Literal::KEYCODE_TAB):
                case static_cast<int32_t>(Literal::KEYCODE_SPACE):
                case static_cast<int32_t>(Literal::KEYCODE_SYM):
                case static_cast<int32_t>(Literal::KEYCODE_EXPLORER):
                case static_cast<int32_t>(Literal::KEYCODE_ENVELOPE):
                case static_cast<int32_t>(Literal::KEYCODE_ENTER):
                case static_cast<int32_t>(Literal::KEYCODE_DEL):
                case static_cast<int32_t>(Literal::KEYCODE_GRAVE):
                case static_cast<int32_t>(Literal::KEYCODE_MINUS):
                case static_cast<int32_t>(Literal::KEYCODE_EQUALS):
                case static_cast<int32_t>(Literal::KEYCODE_LEFT_BRACKET):
                case static_cast<int32_t>(Literal::KEYCODE_RIGHT_BRACKET):
                case static_cast<int32_t>(Literal::KEYCODE_BACKSLASH):
                case static_cast<int32_t>(Literal::KEYCODE_SEMICOLON):
                case static_cast<int32_t>(Literal::KEYCODE_APOSTROPHE):
                case static_cast<int32_t>(Literal::KEYCODE_SLASH):
                case static_cast<int32_t>(Literal::KEYCODE_AT):
                case static_cast<int32_t>(Literal::KEYCODE_NUM):
                case static_cast<int32_t>(Literal::KEYCODE_HEADSETHOOK):
                case static_cast<int32_t>(Literal::KEYCODE_FOCUS):
                case static_cast<int32_t>(Literal::KEYCODE_PLUS):
                case static_cast<int32_t>(Literal::KEYCODE_MENU):
                case static_cast<int32_t>(Literal::KEYCODE_NOTIFICATION):
                case static_cast<int32_t>(Literal::KEYCODE_SEARCH):
                case static_cast<int32_t>(Literal::KEYCODE_MEDIA_PLAY_PAUSE):
                case static_cast<int32_t>(Literal::KEYCODE_MEDIA_STOP):
                case static_cast<int32_t>(Literal::KEYCODE_MEDIA_NEXT):
                case static_cast<int32_t>(Literal::KEYCODE_MEDIA_PREVOUS):
                case static_cast<int32_t>(Literal::KEYCODE_MEDIA_REWIND):
                case static_cast<int32_t>(Literal::KEYCODE_MEDIA_FAST_FORWARD):
                case static_cast<int32_t>(Literal::KEYCODE_MUTE):
                case static_cast<int32_t>(Literal::KEYCODE_PAGE_UP):
                case static_cast<int32_t>(Literal::KEYCODE_PAGE_DOWN):
                case static_cast<int32_t>(Literal::KEYCODE_PICTSYMBOLS):
                case static_cast<int32_t>(Literal::KEYCODE_SWITCH_CHARSET):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_A):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_B):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_C):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_X):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_Y):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_Z):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_L1):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_R1):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_L2):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_R2):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_THUMB_L):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_THUMB_R):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_START):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_SELECT):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_MODE):
                case static_cast<int32_t>(Literal::KEYCODE_ESCAPE):
                case static_cast<int32_t>(Literal::KEYCODE_FORWARD_DEL):
                case static_cast<int32_t>(Literal::KEYCODE_CTRL_LEFT):
                case static_cast<int32_t>(Literal::KEYCODE_CTRL_RIGHT):
                case static_cast<int32_t>(Literal::KEYCODE_CAPS_LOCK):
                case static_cast<int32_t>(Literal::KEYCODE_SCROLL_LOCK):
                case static_cast<int32_t>(Literal::KEYCODE_META_LEFT):
                case static_cast<int32_t>(Literal::KEYCODE_META_RIGHT):
                case static_cast<int32_t>(Literal::KEYCODE_FUNCTION):
                case static_cast<int32_t>(Literal::KEYCODE_SYSRQ):
                case static_cast<int32_t>(Literal::KEYCODE_BREAK):
                case static_cast<int32_t>(Literal::KEYCODE_MOVE_HOME):
                case static_cast<int32_t>(Literal::KEYCODE_MOVE_END):
                case static_cast<int32_t>(Literal::KEYCODE_INSERT):
                case static_cast<int32_t>(Literal::KEYCODE_FORWARD):
                case static_cast<int32_t>(Literal::KEYCODE_MEDIA_PLAY):
                case static_cast<int32_t>(Literal::KEYCODE_MEDIA_PAUSE):
                case static_cast<int32_t>(Literal::KEYCODE_MEDIA_CLOSE):
                case static_cast<int32_t>(Literal::KEYCODE_MEDIA_EJECT):
                case static_cast<int32_t>(Literal::KEYCODE_MEDIA_RECORD):
                case static_cast<int32_t>(Literal::KEYCODE_F1):
                case static_cast<int32_t>(Literal::KEYCODE_F2):
                case static_cast<int32_t>(Literal::KEYCODE_F3):
                case static_cast<int32_t>(Literal::KEYCODE_F4):
                case static_cast<int32_t>(Literal::KEYCODE_F5):
                case static_cast<int32_t>(Literal::KEYCODE_F6):
                case static_cast<int32_t>(Literal::KEYCODE_F7):
                case static_cast<int32_t>(Literal::KEYCODE_F8):
                case static_cast<int32_t>(Literal::KEYCODE_F9):
                case static_cast<int32_t>(Literal::KEYCODE_F10):
                case static_cast<int32_t>(Literal::KEYCODE_F11):
                case static_cast<int32_t>(Literal::KEYCODE_F12):
                case static_cast<int32_t>(Literal::KEYCODE_NUM_LOCK):
                case static_cast<int32_t>(Literal::KEYCODE_NUMPAD_0):
                case static_cast<int32_t>(Literal::KEYCODE_NUMPAD_1):
                case static_cast<int32_t>(Literal::KEYCODE_NUMPAD_2):
                case static_cast<int32_t>(Literal::KEYCODE_NUMPAD_3):
                case static_cast<int32_t>(Literal::KEYCODE_NUMPAD_4):
                case static_cast<int32_t>(Literal::KEYCODE_NUMPAD_5):
                case static_cast<int32_t>(Literal::KEYCODE_NUMPAD_6):
                case static_cast<int32_t>(Literal::KEYCODE_NUMPAD_7):
                case static_cast<int32_t>(Literal::KEYCODE_NUMPAD_8):
                case static_cast<int32_t>(Literal::KEYCODE_NUMPAD_9):
                case static_cast<int32_t>(Literal::KEYCODE_NUMPAD_DIVIDE):
                case static_cast<int32_t>(Literal::KEYCODE_NUMPAD_MULTIPLY):
                case static_cast<int32_t>(Literal::KEYCODE_NUMPAD_SUBTRACK):
                case static_cast<int32_t>(Literal::KEYCODE_NUMPAD_ADD):
                case static_cast<int32_t>(Literal::KEYCODE_NUMPAD_DOT):
                case static_cast<int32_t>(Literal::KEYCODE_NUMPAD_COMMA):
                case static_cast<int32_t>(Literal::KEYCODE_NUMPAD_ENTER):
                case static_cast<int32_t>(Literal::KEYCODE_NUMPAD_EQUALS):
                case static_cast<int32_t>(Literal::KEYCODE_NUMPAD_LEFT_PAREN):
                case static_cast<int32_t>(Literal::KEYCODE_NUMPAD_RIGHT_PAREN):
                case static_cast<int32_t>(Literal::KEYCODE_VOLUME_MUTE):
                case static_cast<int32_t>(Literal::KEYCODE_INFO):
                case static_cast<int32_t>(Literal::KEYCODE_CHANNEL_UP):
                case static_cast<int32_t>(Literal::KEYCODE_CHANNEL_DOWN):
                case static_cast<int32_t>(Literal::KEYCODE_ZOOM_IN):
                case static_cast<int32_t>(Literal::KEYCODE_ZOMM_OUT):
                case static_cast<int32_t>(Literal::KEYCODE_TV):
                case static_cast<int32_t>(Literal::KEYCODE_WINDOW):
                case static_cast<int32_t>(Literal::KEYCODE_GUIDE):
                case static_cast<int32_t>(Literal::KEYCODE_DVR):
                case static_cast<int32_t>(Literal::KEYCODE_BOOKMARK):
                case static_cast<int32_t>(Literal::KEYCODE_CAPTIONS):
                case static_cast<int32_t>(Literal::KEYCODE_SETTINGS):
                case static_cast<int32_t>(Literal::KEYCODE_TV_POWER):
                case static_cast<int32_t>(Literal::KEYCODE_TV_INPUT):
                case static_cast<int32_t>(Literal::KEYCODE_STB_POWER):
                case static_cast<int32_t>(Literal::KEYCODE_STB_INPUT):
                case static_cast<int32_t>(Literal::KEYCODE_AVR_POWER):
                case static_cast<int32_t>(Literal::KEYCODE_AVR_INPUT):
                case static_cast<int32_t>(Literal::KEYCODE_PROG_RED):
                case static_cast<int32_t>(Literal::KEYCODE_PROG_GREEN):
                case static_cast<int32_t>(Literal::KEYCODE_PROG_YELLOW):
                case static_cast<int32_t>(Literal::KEYCODE_PROG_BLUE):
                case static_cast<int32_t>(Literal::KEYCODE_APP_SWITCH):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_1):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_2):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_3):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_4):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_5):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_6):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_7):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_8):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_9):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_10):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_11):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_12):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_13):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_14):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_15):
                case static_cast<int32_t>(Literal::KEYCODE_BUTTON_16):
                case static_cast<int32_t>(Literal::KEYCODE_LANGUAGE_SWITCH):
                case static_cast<int32_t>(Literal::KEYCODE_MANNER_MODE):
                case static_cast<int32_t>(Literal::KEYCODE_3D_MODE):
                case static_cast<int32_t>(Literal::KEYCODE_CONTACTS):
                case static_cast<int32_t>(Literal::KEYCODE_CALENDER):
                case static_cast<int32_t>(Literal::KEYCODE_MUSIC):
                case static_cast<int32_t>(Literal::KEYCODE_CALCULATOR):
                case static_cast<int32_t>(Literal::KEYCODE_ZENKAKU_HANKAKU):
                case static_cast<int32_t>(Literal::KEYCODE_EISU):
                case static_cast<int32_t>(Literal::KEYCODE_MUHENKEN):
                case static_cast<int32_t>(Literal::KEYCODE_HENKAN):
                case static_cast<int32_t>(Literal::KEYCODE_KATAKANA_HIRAGANA):
                case static_cast<int32_t>(Literal::KEYCODE_YEN):
                case static_cast<int32_t>(Literal::KEYCODE_RO):
                case static_cast<int32_t>(Literal::KEYCODE_KANA):
                case static_cast<int32_t>(Literal::KEYCODE_ASSIST):
                case static_cast<int32_t>(Literal::KEYCODE_BRIGHTNESS_DOWN):
                case static_cast<int32_t>(Literal::KEYCODE_BRIGHTNESS_UP):
                case static_cast<int32_t>(Literal::KEYCODE_MEDIA_AUDIO_TRACK):
                case static_cast<int32_t>(Literal::KEYCODE_SLEEP):
                case static_cast<int32_t>(Literal::KEYCODE_WAKEUP):
                case static_cast<int32_t>(Literal::KEYCODE_PAIRING):
                case static_cast<int32_t>(Literal::KEYCODE_MEDIA_TOP_MENU):
                case static_cast<int32_t>(Literal::KEYCODE_HELP):
                case static_cast<int32_t>(Literal::KEYCODE_NAVIGATE_PREVIOUS):
                case static_cast<int32_t>(Literal::KEYCODE_NAVIGATE_NEXT):
                case static_cast<int32_t>(Literal::KEYCODE_NAVIGATE_IN):
                case static_cast<int32_t>(Literal::KEYCODE_NAVIGATE_OUT):
                case static_cast<int32_t>(Literal::KEYCODE_DPAD_UP_LEFT):
                case static_cast<int32_t>(Literal::KEYCODE_DPAD_DOWN_LEFT):
                case static_cast<int32_t>(Literal::KEYCODE_DPAD_UP_RIGHT):
                case static_cast<int32_t>(Literal::KEYCODE_DPAD_DOWN_RIGHT):
                case static_cast<int32_t>(Literal::KEYCODE_SENTINEL):
                case static_cast<int32_t>(Literal::KEYCODE_ROTARY_CONTROLLER):
                case static_cast<int32_t>(Literal::KEYCODE_MEDIA):
                case static_cast<int32_t>(Literal::KEYCODE_NAVIATION):
                case static_cast<int32_t>(Literal::KEYCODE_RADIO):
                case static_cast<int32_t>(Literal::KEYCODE_TEL):
                case static_cast<int32_t>(Literal::KEYCODE_PRIMARY_BUTTON):
                case static_cast<int32_t>(Literal::KEYCODE_SECONDARY_BUTTON):
                case static_cast<int32_t>(Literal::KEYCODE_TERTIARY_BUTTON):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enKeyCodes &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enKeyCodes &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enKeyCodes &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enKeyCodes &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enKeyCodes &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enKeyCodes &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
};

const char* AndroidAutoDomainSvc::getInterface() {
    return ("com.harman.connectivity.AndroidAutoDomainSvc");
}

CommonAPI::Version AndroidAutoDomainSvc::getInterfaceVersion() {
    return CommonAPI::Version(4, 0);
}


} // namespace connectivity
} // namespace harman
} // namespace com
} // namespace v4

namespace CommonAPI {
}


// Compatibility
namespace v4_0 = v4;

#endif // V4_COM_HARMAN_CONNECTIVITY_ANDROID_AUTO_DOMAIN_SVC_HPP_
