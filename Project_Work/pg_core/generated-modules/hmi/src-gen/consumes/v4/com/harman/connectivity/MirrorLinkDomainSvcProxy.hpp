/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V4_COM_HARMAN_CONNECTIVITY_Mirror_Link_Domain_Svc_PROXY_HPP_
#define V4_COM_HARMAN_CONNECTIVITY_Mirror_Link_Domain_Svc_PROXY_HPP_

#include <v4/com/harman/connectivity/MirrorLinkDomainSvcProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace com {
namespace harman {
namespace connectivity {

template <typename ... _AttributeExtensions>
class MirrorLinkDomainSvcProxy
    : virtual public MirrorLinkDomainSvc, 
      virtual public MirrorLinkDomainSvcProxyBase,
      virtual public _AttributeExtensions... {
public:
    MirrorLinkDomainSvcProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~MirrorLinkDomainSvcProxy();

    typedef MirrorLinkDomainSvc InterfaceType;



    /**
     * description: Device list changed information.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast DeviceListChanged.
     */
    virtual DeviceListChangedEvent& getDeviceListChangedEvent() {
        return delegate_->getDeviceListChangedEvent();
    }
    /**
     * description: ConnectMirrorLink Response Information.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast DeviceAttached.
     */
    virtual DeviceAttachedEvent& getDeviceAttachedEvent() {
        return delegate_->getDeviceAttachedEvent();
    }
    /**
     * description: ApplicationList Response
     */
    /**
     * Returns the wrapper class that provides access to the broadcast ApplicationList.
     */
    virtual ApplicationListEvent& getApplicationListEvent() {
        return delegate_->getApplicationListEvent();
    }
    /**
     * description: ApplicationIcon Response
     */
    /**
     * Returns the wrapper class that provides access to the broadcast ApplicationIcon.
     */
    virtual ApplicationIconEvent& getApplicationIconEvent() {
        return delegate_->getApplicationIconEvent();
    }
    /**
     * description: App Launch Response
     */
    /**
     * Returns the wrapper class that provides access to the broadcast AppLaunched.
     */
    virtual AppLaunchedEvent& getAppLaunchedEvent() {
        return delegate_->getAppLaunchedEvent();
    }
    /**
     * description: SetDriveMode Response
     */
    /**
     * Returns the wrapper class that provides access to the broadcast DriveModeStatus.
     */
    virtual DriveModeStatusEvent& getDriveModeStatusEvent() {
        return delegate_->getDriveModeStatusEvent();
    }
    /**
     * description: App Terminate Response
     */
    /**
     * Returns the wrapper class that provides access to the broadcast AppTerminated.
     */
    virtual AppTerminatedEvent& getAppTerminatedEvent() {
        return delegate_->getAppTerminatedEvent();
    }
    /**
     * description: DisconnectMirrorLink Response Information.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast DeviceDetached.
     */
    virtual DeviceDetachedEvent& getDeviceDetachedEvent() {
        return delegate_->getDeviceDetachedEvent();
    }
    /**
     * description: Application status changed information.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast ApplicationStatusChanged.
     */
    virtual ApplicationStatusChangedEvent& getApplicationStatusChangedEvent() {
        return delegate_->getApplicationStatusChangedEvent();
    }
    /**
     * description: Server device Supported Event configuration details
     */
    /**
     * Returns the wrapper class that provides access to the broadcast ServerSupportedConfiguration.
     */
    virtual ServerSupportedConfigurationEvent& getServerSupportedConfigurationEvent() {
        return delegate_->getServerSupportedConfigurationEvent();
    }
    /**
     * description: The audio data is received.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast AudioDataReceived.
     */
    virtual AudioDataReceivedEvent& getAudioDataReceivedEvent() {
        return delegate_->getAudioDataReceivedEvent();
    }
    /**
     * description: The client should be switched to native UI window.
       In this mode the
     *   Framebuffer updated process is stopped.
       To exit from native UI mode client
     *   should make launch any application.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast SwitchToNativeUI.
     */
    virtual SwitchToNativeUIEvent& getSwitchToNativeUIEvent() {
        return delegate_->getSwitchToNativeUIEvent();
    }
    /**
     * description: SetVirtualKeyboardTrigger Response
     */
    /**
     * Returns the wrapper class that provides access to the broadcast VirtualKeyboardTrigger.
     */
    virtual VirtualKeyboardTriggerEvent& getVirtualKeyboardTriggerEvent() {
        return delegate_->getVirtualKeyboardTriggerEvent();
    }
    /**
     * description: GetNotificationSupportedAppList response.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast NotificationSupportedAppList.
     */
    virtual NotificationSupportedAppListEvent& getNotificationSupportedAppListEvent() {
        return delegate_->getNotificationSupportedAppListEvent();
    }
    /**
     * description: GetNotificationInfo Response.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast NotificationInfo.
     */
    virtual NotificationInfoEvent& getNotificationInfoEvent() {
        return delegate_->getNotificationInfoEvent();
    }
    /**
     * description: InvokeNotiAction Response.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast InvokeNotiActionResult.
     */
    virtual InvokeNotiActionResultEvent& getInvokeNotiActionResultEvent() {
        return delegate_->getInvokeNotiActionResultEvent();
    }
    /**
     * description: Event contains the list of AppIDs which are updated.
                          The
     *   client should re-fetch ApplicationList on this event.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast AppListUpdate.
     */
    virtual AppListUpdateEvent& getAppListUpdateEvent() {
        return delegate_->getAppListUpdateEvent();
    }
    /**
     * description: Event contains the most urgent notification that needs to be handled.
             
     *               On receiving this event, Client should call GetNotificationInfo
     */
    /**
     * Returns the wrapper class that provides access to the broadcast ActiveNotiEvent.
     */
    virtual ActiveNotiEventEvent& getActiveNotiEventEvent() {
        return delegate_->getActiveNotiEventEvent();
    }
    /**
     * description: Event contains list of applications identifiers of applications,
                  
     *          supporting notifications. On receiving this event, Client should invoke
     *   
                          GetSupportedApplications action.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast NotiAppListUpdate.
     */
    virtual NotiAppListUpdateEvent& getNotiAppListUpdateEvent() {
        return delegate_->getNotiAppListUpdateEvent();
    }
    /**
     * description: Device requested HMI to show virtual keyboard.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast ShowVirtualKeyboard.
     */
    virtual ShowVirtualKeyboardEvent& getShowVirtualKeyboardEvent() {
        return delegate_->getShowVirtualKeyboardEvent();
    }
    /**
     * description: Device requested HMI to hide virtual keyboard.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast HideVirtualKeyboard.
     */
    virtual HideVirtualKeyboardEvent& getHideVirtualKeyboardEvent() {
        return delegate_->getHideVirtualKeyboardEvent();
    }

    /**
     * description: Attach a device.
     * Calls ConnectMirrorLink with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void ConnectMirrorLink(const std::string &_deviceId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls ConnectMirrorLink with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> ConnectMirrorLinkAsync(const std::string &_deviceId, ConnectMirrorLinkAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Detach a device.
     * Calls DisconnectMirrorLink with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void DisconnectMirrorLink(const std::string &_deviceId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls DisconnectMirrorLink with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> DisconnectMirrorLinkAsync(const std::string &_deviceId, DisconnectMirrorLinkAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Retrieve a list of applications available on the device.
     * Calls GetApplicationList with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetApplicationList(const std::string &_deviceId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetApplicationList with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetApplicationListAsync(const std::string &_deviceId, GetApplicationListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Retrieve icon associated with given application.
     * Calls GetApplicationIcon with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetApplicationIcon(const std::string &_deviceId, const uint32_t &_applicationId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetApplicationIcon with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetApplicationIconAsync(const std::string &_deviceId, const uint32_t &_applicationId, GetApplicationIconAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Launch an application.
     * Calls LaunchApplication with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void LaunchApplication(const std::string &_deviceId, const uint32_t &_applicationId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls LaunchApplication with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> LaunchApplicationAsync(const std::string &_deviceId, const uint32_t &_applicationId, LaunchApplicationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Terminate an application.
     * Calls TerminateApplication with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void TerminateApplication(const std::string &_deviceId, const uint32_t &_applicationId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls TerminateApplication with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> TerminateApplicationAsync(const std::string &_deviceId, const uint32_t &_applicationId, TerminateApplicationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Send a key event.
     * Calls SendKeyEvent with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SendKeyEvent(const std::string &_deviceId, const std::string &_keyId, const bool &_downFlag, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SendKeyEvent with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SendKeyEventAsync(const std::string &_deviceId, const std::string &_keyId, const bool &_downFlag, SendKeyEventAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Send a pointer event.
     * Calls SendPointerEvent with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SendPointerEvent(const std::string &_deviceId, const uint8_t &_buttonMask, const uint16_t &_xPosition, const uint16_t &_yPosition, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SendPointerEvent with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SendPointerEventAsync(const std::string &_deviceId, const uint8_t &_buttonMask, const uint16_t &_xPosition, const uint16_t &_yPosition, SendPointerEventAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Sends a touch event.
     * Calls SendTouchEvent with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SendTouchEvent(const std::string &_deviceId, const MirrorLinkDomainSvc::IndividualTouchEvents &_individualEvents, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SendTouchEvent with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SendTouchEventAsync(const std::string &_deviceId, const MirrorLinkDomainSvc::IndividualTouchEvents &_individualEvents, SendTouchEventAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Sends the entered text by virtual
                          keyboard or speller.
     * Calls SendVirtualKeyboardInput with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SendVirtualKeyboardInput(const std::string &_deviceId, const std::string &_text, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SendVirtualKeyboardInput with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SendVirtualKeyboardInputAsync(const std::string &_deviceId, const std::string &_text, SendVirtualKeyboardInputAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Enable or disable the virtual keyboard trigger service on server side.
     * Calls SetVirtualKeyboardTrigger with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SetVirtualKeyboardTrigger(const std::string &_deviceId, const bool &_enable, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SetVirtualKeyboardTrigger with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SetVirtualKeyboardTriggerAsync(const std::string &_deviceId, const bool &_enable, SetVirtualKeyboardTriggerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Get list of Notification server service supported applications
     * Calls GetNotificationSupportedAppList with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetNotificationSupportedAppList(const std::string &_deviceId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetNotificationSupportedAppList with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetNotificationSupportedAppListAsync(const std::string &_deviceId, GetNotificationSupportedAppListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Sets the MirrorLink Server applications from which MirrorLink Client 
             
     *               wants to receive notifications.
     * Calls SetNotificationAllowedApplications with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SetNotificationAllowedApplications(const std::string &_deviceId, const MirrorLinkDomainSvc::AppIDs &_allowedAppIds, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SetNotificationAllowedApplications with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SetNotificationAllowedApplicationsAsync(const std::string &_deviceId, const MirrorLinkDomainSvc::AppIDs &_allowedAppIds, SetNotificationAllowedApplicationsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Gets the detailed information of the notification
     * Calls GetNotificationInfo with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetNotificationInfo(const std::string &_deviceId, const std::string &_notiId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetNotificationInfo with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetNotificationInfoAsync(const std::string &_deviceId, const std::string &_notiId, GetNotificationInfoAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Sends the action ID to the MirrorLink UPnP Server.
     * Calls InvokeNotiAction with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void InvokeNotiAction(const std::string &_deviceId, const std::string &_notiId, const std::string &_actionId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls InvokeNotiAction with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> InvokeNotiActionAsync(const std::string &_deviceId, const std::string &_notiId, const std::string &_actionId, InvokeNotiActionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Set video focus.
     * Calls SetVideoFocus with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SetVideoFocus(const std::string &_deviceId, const bool &_videoFocus, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SetVideoFocus with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SetVideoFocusAsync(const std::string &_deviceId, const bool &_videoFocus, SetVideoFocusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Send X11 Key Event.
     * Calls SendX11KeyEvent with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SendX11KeyEvent(const std::string &_deviceId, const uint32_t &_keyId, const bool &_downFlag, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SendX11KeyEvent with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SendX11KeyEventAsync(const std::string &_deviceId, const uint32_t &_keyId, const bool &_downFlag, SendX11KeyEventAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<MirrorLinkDomainSvcProxyBase> delegate_;
};

typedef MirrorLinkDomainSvcProxy<> MirrorLinkDomainSvcProxyDefault;


//
// MirrorLinkDomainSvcProxy Implementation
//
template <typename ... _AttributeExtensions>
MirrorLinkDomainSvcProxy<_AttributeExtensions...>::MirrorLinkDomainSvcProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<MirrorLinkDomainSvcProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<MirrorLinkDomainSvcProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
MirrorLinkDomainSvcProxy<_AttributeExtensions...>::~MirrorLinkDomainSvcProxy() {
}

/**
 * description: Attach a device.
 */
template <typename ... _AttributeExtensions>
void MirrorLinkDomainSvcProxy<_AttributeExtensions...>::ConnectMirrorLink(const std::string &_deviceId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
    delegate_->ConnectMirrorLink(_deviceId, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcProxy<_AttributeExtensions...>::ConnectMirrorLinkAsync(const std::string &_deviceId, ConnectMirrorLinkAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->ConnectMirrorLinkAsync(_deviceId, _callback, _info);
}
/**
 * description: Detach a device.
 */
template <typename ... _AttributeExtensions>
void MirrorLinkDomainSvcProxy<_AttributeExtensions...>::DisconnectMirrorLink(const std::string &_deviceId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
    delegate_->DisconnectMirrorLink(_deviceId, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcProxy<_AttributeExtensions...>::DisconnectMirrorLinkAsync(const std::string &_deviceId, DisconnectMirrorLinkAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->DisconnectMirrorLinkAsync(_deviceId, _callback, _info);
}
/**
 * description: Retrieve a list of applications available on the device.
 */
template <typename ... _AttributeExtensions>
void MirrorLinkDomainSvcProxy<_AttributeExtensions...>::GetApplicationList(const std::string &_deviceId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
    delegate_->GetApplicationList(_deviceId, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcProxy<_AttributeExtensions...>::GetApplicationListAsync(const std::string &_deviceId, GetApplicationListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetApplicationListAsync(_deviceId, _callback, _info);
}
/**
 * description: Retrieve icon associated with given application.
 */
template <typename ... _AttributeExtensions>
void MirrorLinkDomainSvcProxy<_AttributeExtensions...>::GetApplicationIcon(const std::string &_deviceId, const uint32_t &_applicationId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
    delegate_->GetApplicationIcon(_deviceId, _applicationId, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcProxy<_AttributeExtensions...>::GetApplicationIconAsync(const std::string &_deviceId, const uint32_t &_applicationId, GetApplicationIconAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetApplicationIconAsync(_deviceId, _applicationId, _callback, _info);
}
/**
 * description: Launch an application.
 */
template <typename ... _AttributeExtensions>
void MirrorLinkDomainSvcProxy<_AttributeExtensions...>::LaunchApplication(const std::string &_deviceId, const uint32_t &_applicationId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
    delegate_->LaunchApplication(_deviceId, _applicationId, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcProxy<_AttributeExtensions...>::LaunchApplicationAsync(const std::string &_deviceId, const uint32_t &_applicationId, LaunchApplicationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->LaunchApplicationAsync(_deviceId, _applicationId, _callback, _info);
}
/**
 * description: Terminate an application.
 */
template <typename ... _AttributeExtensions>
void MirrorLinkDomainSvcProxy<_AttributeExtensions...>::TerminateApplication(const std::string &_deviceId, const uint32_t &_applicationId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
    delegate_->TerminateApplication(_deviceId, _applicationId, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcProxy<_AttributeExtensions...>::TerminateApplicationAsync(const std::string &_deviceId, const uint32_t &_applicationId, TerminateApplicationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->TerminateApplicationAsync(_deviceId, _applicationId, _callback, _info);
}
/**
 * description: Send a key event.
 */
template <typename ... _AttributeExtensions>
void MirrorLinkDomainSvcProxy<_AttributeExtensions...>::SendKeyEvent(const std::string &_deviceId, const std::string &_keyId, const bool &_downFlag, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->SendKeyEvent(_deviceId, _keyId, _downFlag, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcProxy<_AttributeExtensions...>::SendKeyEventAsync(const std::string &_deviceId, const std::string &_keyId, const bool &_downFlag, SendKeyEventAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->SendKeyEventAsync(_deviceId, _keyId, _downFlag, _callback, _info);
}
/**
 * description: Send a pointer event.
 */
template <typename ... _AttributeExtensions>
void MirrorLinkDomainSvcProxy<_AttributeExtensions...>::SendPointerEvent(const std::string &_deviceId, const uint8_t &_buttonMask, const uint16_t &_xPosition, const uint16_t &_yPosition, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->SendPointerEvent(_deviceId, _buttonMask, _xPosition, _yPosition, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcProxy<_AttributeExtensions...>::SendPointerEventAsync(const std::string &_deviceId, const uint8_t &_buttonMask, const uint16_t &_xPosition, const uint16_t &_yPosition, SendPointerEventAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->SendPointerEventAsync(_deviceId, _buttonMask, _xPosition, _yPosition, _callback, _info);
}
/**
 * description: Sends a touch event.
 */
template <typename ... _AttributeExtensions>
void MirrorLinkDomainSvcProxy<_AttributeExtensions...>::SendTouchEvent(const std::string &_deviceId, const MirrorLinkDomainSvc::IndividualTouchEvents &_individualEvents, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->SendTouchEvent(_deviceId, _individualEvents, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcProxy<_AttributeExtensions...>::SendTouchEventAsync(const std::string &_deviceId, const MirrorLinkDomainSvc::IndividualTouchEvents &_individualEvents, SendTouchEventAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->SendTouchEventAsync(_deviceId, _individualEvents, _callback, _info);
}
/**
 * description: Sends the entered text by virtual
                      keyboard or speller.
 */
template <typename ... _AttributeExtensions>
void MirrorLinkDomainSvcProxy<_AttributeExtensions...>::SendVirtualKeyboardInput(const std::string &_deviceId, const std::string &_text, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
    delegate_->SendVirtualKeyboardInput(_deviceId, _text, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcProxy<_AttributeExtensions...>::SendVirtualKeyboardInputAsync(const std::string &_deviceId, const std::string &_text, SendVirtualKeyboardInputAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->SendVirtualKeyboardInputAsync(_deviceId, _text, _callback, _info);
}
/**
 * description: Enable or disable the virtual keyboard trigger service on server side.
 */
template <typename ... _AttributeExtensions>
void MirrorLinkDomainSvcProxy<_AttributeExtensions...>::SetVirtualKeyboardTrigger(const std::string &_deviceId, const bool &_enable, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
    delegate_->SetVirtualKeyboardTrigger(_deviceId, _enable, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcProxy<_AttributeExtensions...>::SetVirtualKeyboardTriggerAsync(const std::string &_deviceId, const bool &_enable, SetVirtualKeyboardTriggerAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->SetVirtualKeyboardTriggerAsync(_deviceId, _enable, _callback, _info);
}
/**
 * description: Get list of Notification server service supported applications
 */
template <typename ... _AttributeExtensions>
void MirrorLinkDomainSvcProxy<_AttributeExtensions...>::GetNotificationSupportedAppList(const std::string &_deviceId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
    delegate_->GetNotificationSupportedAppList(_deviceId, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcProxy<_AttributeExtensions...>::GetNotificationSupportedAppListAsync(const std::string &_deviceId, GetNotificationSupportedAppListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetNotificationSupportedAppListAsync(_deviceId, _callback, _info);
}
/**
 * description: Sets the MirrorLink Server applications from which MirrorLink Client 
         
 *               wants to receive notifications.
 */
template <typename ... _AttributeExtensions>
void MirrorLinkDomainSvcProxy<_AttributeExtensions...>::SetNotificationAllowedApplications(const std::string &_deviceId, const MirrorLinkDomainSvc::AppIDs &_allowedAppIds, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
    delegate_->SetNotificationAllowedApplications(_deviceId, _allowedAppIds, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcProxy<_AttributeExtensions...>::SetNotificationAllowedApplicationsAsync(const std::string &_deviceId, const MirrorLinkDomainSvc::AppIDs &_allowedAppIds, SetNotificationAllowedApplicationsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->SetNotificationAllowedApplicationsAsync(_deviceId, _allowedAppIds, _callback, _info);
}
/**
 * description: Gets the detailed information of the notification
 */
template <typename ... _AttributeExtensions>
void MirrorLinkDomainSvcProxy<_AttributeExtensions...>::GetNotificationInfo(const std::string &_deviceId, const std::string &_notiId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
    delegate_->GetNotificationInfo(_deviceId, _notiId, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcProxy<_AttributeExtensions...>::GetNotificationInfoAsync(const std::string &_deviceId, const std::string &_notiId, GetNotificationInfoAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetNotificationInfoAsync(_deviceId, _notiId, _callback, _info);
}
/**
 * description: Sends the action ID to the MirrorLink UPnP Server.
 */
template <typename ... _AttributeExtensions>
void MirrorLinkDomainSvcProxy<_AttributeExtensions...>::InvokeNotiAction(const std::string &_deviceId, const std::string &_notiId, const std::string &_actionId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info) {
    delegate_->InvokeNotiAction(_deviceId, _notiId, _actionId, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcProxy<_AttributeExtensions...>::InvokeNotiActionAsync(const std::string &_deviceId, const std::string &_notiId, const std::string &_actionId, InvokeNotiActionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->InvokeNotiActionAsync(_deviceId, _notiId, _actionId, _callback, _info);
}
/**
 * description: Set video focus.
 */
template <typename ... _AttributeExtensions>
void MirrorLinkDomainSvcProxy<_AttributeExtensions...>::SetVideoFocus(const std::string &_deviceId, const bool &_videoFocus, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->SetVideoFocus(_deviceId, _videoFocus, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcProxy<_AttributeExtensions...>::SetVideoFocusAsync(const std::string &_deviceId, const bool &_videoFocus, SetVideoFocusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->SetVideoFocusAsync(_deviceId, _videoFocus, _callback, _info);
}
/**
 * description: Send X11 Key Event.
 */
template <typename ... _AttributeExtensions>
void MirrorLinkDomainSvcProxy<_AttributeExtensions...>::SendX11KeyEvent(const std::string &_deviceId, const uint32_t &_keyId, const bool &_downFlag, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->SendX11KeyEvent(_deviceId, _keyId, _downFlag, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MirrorLinkDomainSvcProxy<_AttributeExtensions...>::SendX11KeyEventAsync(const std::string &_deviceId, const uint32_t &_keyId, const bool &_downFlag, SendX11KeyEventAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->SendX11KeyEventAsync(_deviceId, _keyId, _downFlag, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &MirrorLinkDomainSvcProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool MirrorLinkDomainSvcProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool MirrorLinkDomainSvcProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& MirrorLinkDomainSvcProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& MirrorLinkDomainSvcProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace connectivity
} // namespace harman
} // namespace com
} // namespace v4



// Compatibility
namespace v4_0 = v4;

#endif // V4_COM_HARMAN_CONNECTIVITY_Mirror_Link_Domain_Svc_PROXY_HPP_
