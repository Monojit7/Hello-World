/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Jun 21 15:32:43 IST 2016
*/
#ifndef V4_COM_HARMAN_CONNECTIVITY_Mirror_Link_Domain_Svc_PROXY_BASE_HPP_
#define V4_COM_HARMAN_CONNECTIVITY_Mirror_Link_Domain_Svc_PROXY_BASE_HPP_

#include <v4/com/harman/connectivity/MirrorLinkDomainSvc.hpp>



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace com {
namespace harman {
namespace connectivity {

class MirrorLinkDomainSvcProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::v4::com::harman::connectivity::MirrorLinkDomainSvc::Device, ::v4::com::harman::connectivity::MirrorLinkDomainSvc::ChangeState
    > DeviceListChangedEvent;
    typedef CommonAPI::Event<
        ::v4::com::harman::connectivity::MirrorLinkDomainSvc::Result, std::string, bool
    > DeviceAttachedEvent;
    typedef CommonAPI::Event<
        ::v4::com::harman::connectivity::MirrorLinkDomainSvc::Result, std::string, ::v4::com::harman::connectivity::MirrorLinkDomainSvc::Applications
    > ApplicationListEvent;
    typedef CommonAPI::Event<
        ::v4::com::harman::connectivity::MirrorLinkDomainSvc::Result, std::string, uint32_t, std::string
    > ApplicationIconEvent;
    typedef CommonAPI::Event<
        ::v4::com::harman::connectivity::MirrorLinkDomainSvc::Result, std::string, uint32_t
    > AppLaunchedEvent;
    typedef CommonAPI::Event<
        bool
    > DriveModeStatusEvent;
    typedef CommonAPI::Event<
        ::v4::com::harman::connectivity::MirrorLinkDomainSvc::Result, std::string, uint32_t
    > AppTerminatedEvent;
    typedef CommonAPI::Event<
        ::v4::com::harman::connectivity::MirrorLinkDomainSvc::Result, std::string
    > DeviceDetachedEvent;
    typedef CommonAPI::Event<
        std::string, uint32_t, ::v4::com::harman::connectivity::MirrorLinkDomainSvc::ApplicationStatus
    > ApplicationStatusChangedEvent;
    typedef CommonAPI::Event<
        std::string, ::v4::com::harman::connectivity::MirrorLinkDomainSvc::ServerSupportedConfig
    > ServerSupportedConfigurationEvent;
    typedef CommonAPI::Event<
        std::string, bool
    > AudioDataReceivedEvent;
    typedef CommonAPI::Event<
        std::string
    > SwitchToNativeUIEvent;
    typedef CommonAPI::Event<
        ::v4::com::harman::connectivity::MirrorLinkDomainSvc::Result, std::string
    > VirtualKeyboardTriggerEvent;
    typedef CommonAPI::Event<
        std::string, ::v4::com::harman::connectivity::MirrorLinkDomainSvc::AppIDs
    > NotificationSupportedAppListEvent;
    typedef CommonAPI::Event<
        std::string, ::v4::com::harman::connectivity::MirrorLinkDomainSvc::Notification
    > NotificationInfoEvent;
    typedef CommonAPI::Event<
        ::v4::com::harman::connectivity::MirrorLinkDomainSvc::Result, std::string
    > InvokeNotiActionResultEvent;
    typedef CommonAPI::Event<
        std::string, ::v4::com::harman::connectivity::MirrorLinkDomainSvc::AppIDs
    > AppListUpdateEvent;
    typedef CommonAPI::Event<
        std::string, std::string
    > ActiveNotiEventEvent;
    typedef CommonAPI::Event<
        std::string, ::v4::com::harman::connectivity::MirrorLinkDomainSvc::AppIDs
    > NotiAppListUpdateEvent;
    typedef CommonAPI::Event<
        std::string, ::v4::com::harman::connectivity::MirrorLinkDomainSvc::KeyboardType, std::string, uint16_t, uint16_t, ::v4::com::harman::connectivity::MirrorLinkDomainSvc::TextInputArea
    > ShowVirtualKeyboardEvent;
    typedef CommonAPI::Event<
        std::string
    > HideVirtualKeyboardEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const MirrorLinkDomainSvc::Result&)> ConnectMirrorLinkAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MirrorLinkDomainSvc::Result&)> DisconnectMirrorLinkAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MirrorLinkDomainSvc::Result&)> GetApplicationListAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MirrorLinkDomainSvc::Result&)> GetApplicationIconAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MirrorLinkDomainSvc::Result&)> LaunchApplicationAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MirrorLinkDomainSvc::Result&)> TerminateApplicationAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SendKeyEventAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SendPointerEventAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SendTouchEventAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MirrorLinkDomainSvc::Result&)> SendVirtualKeyboardInputAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MirrorLinkDomainSvc::Result&)> SetVirtualKeyboardTriggerAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MirrorLinkDomainSvc::Result&)> GetNotificationSupportedAppListAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MirrorLinkDomainSvc::Result&)> SetNotificationAllowedApplicationsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MirrorLinkDomainSvc::Result&)> GetNotificationInfoAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MirrorLinkDomainSvc::Result&)> InvokeNotiActionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetVideoFocusAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SendX11KeyEventAsyncCallback;


    /**
     * description: Device list changed information.
     */
    virtual DeviceListChangedEvent& getDeviceListChangedEvent() = 0;
    /**
     * description: ConnectMirrorLink Response Information.
     */
    virtual DeviceAttachedEvent& getDeviceAttachedEvent() = 0;
    /**
     * description: ApplicationList Response
     */
    virtual ApplicationListEvent& getApplicationListEvent() = 0;
    /**
     * description: ApplicationIcon Response
     */
    virtual ApplicationIconEvent& getApplicationIconEvent() = 0;
    /**
     * description: App Launch Response
     */
    virtual AppLaunchedEvent& getAppLaunchedEvent() = 0;
    /**
     * description: SetDriveMode Response
     */
    virtual DriveModeStatusEvent& getDriveModeStatusEvent() = 0;
    /**
     * description: App Terminate Response
     */
    virtual AppTerminatedEvent& getAppTerminatedEvent() = 0;
    /**
     * description: DisconnectMirrorLink Response Information.
     */
    virtual DeviceDetachedEvent& getDeviceDetachedEvent() = 0;
    /**
     * description: Application status changed information.
     */
    virtual ApplicationStatusChangedEvent& getApplicationStatusChangedEvent() = 0;
    /**
     * description: Server device Supported Event configuration details
     */
    virtual ServerSupportedConfigurationEvent& getServerSupportedConfigurationEvent() = 0;
    /**
     * description: The audio data is received.
     */
    virtual AudioDataReceivedEvent& getAudioDataReceivedEvent() = 0;
    /**
     * description: The client should be switched to native UI window.
       In this mode the
     *   Framebuffer updated process is stopped.
       To exit from native UI mode client
     *   should make launch any application.
     */
    virtual SwitchToNativeUIEvent& getSwitchToNativeUIEvent() = 0;
    /**
     * description: SetVirtualKeyboardTrigger Response
     */
    virtual VirtualKeyboardTriggerEvent& getVirtualKeyboardTriggerEvent() = 0;
    /**
     * description: GetNotificationSupportedAppList response.
     */
    virtual NotificationSupportedAppListEvent& getNotificationSupportedAppListEvent() = 0;
    /**
     * description: GetNotificationInfo Response.
     */
    virtual NotificationInfoEvent& getNotificationInfoEvent() = 0;
    /**
     * description: InvokeNotiAction Response.
     */
    virtual InvokeNotiActionResultEvent& getInvokeNotiActionResultEvent() = 0;
    /**
     * description: Event contains the list of AppIDs which are updated.
                          The
     *   client should re-fetch ApplicationList on this event.
     */
    virtual AppListUpdateEvent& getAppListUpdateEvent() = 0;
    /**
     * description: Event contains the most urgent notification that needs to be handled.
             
     *               On receiving this event, Client should call GetNotificationInfo
     */
    virtual ActiveNotiEventEvent& getActiveNotiEventEvent() = 0;
    /**
     * description: Event contains list of applications identifiers of applications,
                  
     *          supporting notifications. On receiving this event, Client should invoke
     *   
                          GetSupportedApplications action.
     */
    virtual NotiAppListUpdateEvent& getNotiAppListUpdateEvent() = 0;
    /**
     * description: Device requested HMI to show virtual keyboard.
     */
    virtual ShowVirtualKeyboardEvent& getShowVirtualKeyboardEvent() = 0;
    /**
     * description: Device requested HMI to hide virtual keyboard.
     */
    virtual HideVirtualKeyboardEvent& getHideVirtualKeyboardEvent() = 0;

    /**
     * description: Attach a device.
     */
    virtual void ConnectMirrorLink(const std::string &_deviceId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> ConnectMirrorLinkAsync(const std::string &_deviceId, ConnectMirrorLinkAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Detach a device.
     */
    virtual void DisconnectMirrorLink(const std::string &_deviceId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> DisconnectMirrorLinkAsync(const std::string &_deviceId, DisconnectMirrorLinkAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Retrieve a list of applications available on the device.
     */
    virtual void GetApplicationList(const std::string &_deviceId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetApplicationListAsync(const std::string &_deviceId, GetApplicationListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Retrieve icon associated with given application.
     */
    virtual void GetApplicationIcon(const std::string &_deviceId, const uint32_t &_applicationId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetApplicationIconAsync(const std::string &_deviceId, const uint32_t &_applicationId, GetApplicationIconAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Launch an application.
     */
    virtual void LaunchApplication(const std::string &_deviceId, const uint32_t &_applicationId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> LaunchApplicationAsync(const std::string &_deviceId, const uint32_t &_applicationId, LaunchApplicationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Terminate an application.
     */
    virtual void TerminateApplication(const std::string &_deviceId, const uint32_t &_applicationId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> TerminateApplicationAsync(const std::string &_deviceId, const uint32_t &_applicationId, TerminateApplicationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Send a key event.
     */
    virtual void SendKeyEvent(const std::string &_deviceId, const std::string &_keyId, const bool &_downFlag, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SendKeyEventAsync(const std::string &_deviceId, const std::string &_keyId, const bool &_downFlag, SendKeyEventAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Send a pointer event.
     */
    virtual void SendPointerEvent(const std::string &_deviceId, const uint8_t &_buttonMask, const uint16_t &_xPosition, const uint16_t &_yPosition, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SendPointerEventAsync(const std::string &_deviceId, const uint8_t &_buttonMask, const uint16_t &_xPosition, const uint16_t &_yPosition, SendPointerEventAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Sends a touch event.
     */
    virtual void SendTouchEvent(const std::string &_deviceId, const MirrorLinkDomainSvc::IndividualTouchEvents &_individualEvents, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SendTouchEventAsync(const std::string &_deviceId, const MirrorLinkDomainSvc::IndividualTouchEvents &_individualEvents, SendTouchEventAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Sends the entered text by virtual
                          keyboard or speller.
     */
    virtual void SendVirtualKeyboardInput(const std::string &_deviceId, const std::string &_text, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SendVirtualKeyboardInputAsync(const std::string &_deviceId, const std::string &_text, SendVirtualKeyboardInputAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Enable or disable the virtual keyboard trigger service on server side.
     */
    virtual void SetVirtualKeyboardTrigger(const std::string &_deviceId, const bool &_enable, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetVirtualKeyboardTriggerAsync(const std::string &_deviceId, const bool &_enable, SetVirtualKeyboardTriggerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Get list of Notification server service supported applications
     */
    virtual void GetNotificationSupportedAppList(const std::string &_deviceId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetNotificationSupportedAppListAsync(const std::string &_deviceId, GetNotificationSupportedAppListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Sets the MirrorLink Server applications from which MirrorLink Client 
             
     *               wants to receive notifications.
     */
    virtual void SetNotificationAllowedApplications(const std::string &_deviceId, const MirrorLinkDomainSvc::AppIDs &_allowedAppIds, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetNotificationAllowedApplicationsAsync(const std::string &_deviceId, const MirrorLinkDomainSvc::AppIDs &_allowedAppIds, SetNotificationAllowedApplicationsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Gets the detailed information of the notification
     */
    virtual void GetNotificationInfo(const std::string &_deviceId, const std::string &_notiId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetNotificationInfoAsync(const std::string &_deviceId, const std::string &_notiId, GetNotificationInfoAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Sends the action ID to the MirrorLink UPnP Server.
     */
    virtual void InvokeNotiAction(const std::string &_deviceId, const std::string &_notiId, const std::string &_actionId, CommonAPI::CallStatus &_internalCallStatus, MirrorLinkDomainSvc::Result &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> InvokeNotiActionAsync(const std::string &_deviceId, const std::string &_notiId, const std::string &_actionId, InvokeNotiActionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Set video focus.
     */
    virtual void SetVideoFocus(const std::string &_deviceId, const bool &_videoFocus, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetVideoFocusAsync(const std::string &_deviceId, const bool &_videoFocus, SetVideoFocusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Send X11 Key Event.
     */
    virtual void SendX11KeyEvent(const std::string &_deviceId, const uint32_t &_keyId, const bool &_downFlag, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SendX11KeyEventAsync(const std::string &_deviceId, const uint32_t &_keyId, const bool &_downFlag, SendX11KeyEventAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace connectivity
} // namespace harman
} // namespace com
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_COM_HARMAN_CONNECTIVITY_Mirror_Link_Domain_Svc_PROXY_BASE_HPP_
