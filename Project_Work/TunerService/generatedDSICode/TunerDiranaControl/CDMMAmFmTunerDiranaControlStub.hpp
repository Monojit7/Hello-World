#ifndef CDMMAMFMTUNERDIRANACONTROLSTUB_HPP
#define CDMMAMFMTUNERDIRANACONTROLSTUB_HPP
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2014
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 21.11.2014
 */


#include "DMMAmFmTunerDiranaControlStub.h"

/**
 * DSI Stub: DMMAmFmTunerDiranaControl
 *
 * Interface for control of Dirana audio routing, for experts only.
 */
class CDMMAmFmTunerDiranaControlStub : public DMMAmFmTunerDiranaControlStub
{
public:
   /**
    * Constructor.
    */
   CDMMAmFmTunerDiranaControlStub( );

   /**
    * Destructor.
    */
   virtual ~CDMMAmFmTunerDiranaControlStub();

   /**
    * Start the server
    */
   int start( const char* rolename );

   /**
    * Stop the server
    */
   void stop( int exitcode );

   /**
    * Called right before the stub thread ends
    */
   virtual void cleanup();

   /**
    * Changes Dirana audio routing: Connect input with output.
    */
   virtual void requestSetAudioRouting(  DMMAmFmTunerDiranaControl_AudioInputs input,  DMMAmFmTunerDiranaControl_AudioOutputs output ) = 0 ;

   /**
    * Get current audio input connected with given output.
    */
   virtual void requestGetAudioRouting(  DMMAmFmTunerDiranaControl_AudioOutputs output ) = 0 ;

   /**
    * Writes a single memory location with a 24-bit value in the dirana and returns the result of the operation in the corresponding response.
    */
   virtual void requestWriteXMem(  unsigned int memAddress,  unsigned int memValueX ) = 0 ;

   /**
    * Reads a single memory address from the dirana and returns the value in the corresponding response
    */
   virtual void requestReadXMem(  unsigned int memAddress ) = 0 ;

   /**
    * Writes a single memory location with a 16-bit value in the dirana and returns the result of the operation in the corresponding response.
    */
   virtual void requestWriteYMem(  unsigned int memAddress,  unsigned short memValueY ) = 0 ;

   /**
    * Reads a single memory address from the dirana and returns the value in the corresponding response
    */
   virtual void requestReadYMem(  unsigned int memAddress ) = 0 ;

   /**
    * Called when an internal event was sent to the server
    */
   virtual void processInternalEvent( int code, void* data ) {}

   /**
    * Returns success state of request, notifcation has to be set manually.
    */
   void responseSetAudioRouting(  DMMAmFmTunerDiranaControl_Result result );

   /**
    * Returns requested audio input
    */
   void responseGetAudioRouting(  DMMAmFmTunerDiranaControl_AudioInputs input );

   /**
    * The response.
    */
   void responseReadXMem(  DMMAmFmTunerDiranaControl_Result result,  unsigned int memValueX );

   /**
    * The response.
    */
   void responseWriteXMem(  DMMAmFmTunerDiranaControl_Result result );

   /**
    * The response.
    */
   void responseReadYMem(  DMMAmFmTunerDiranaControl_Result result,  unsigned short memValueY );

   /**
    * The response.
    */
   void responseWriteYMem(  DMMAmFmTunerDiranaControl_Result result );


   void sendNotification( DMMAmFmTunerDiranaControl_UpdateIdEnum updateId );

   /**
    * Respond with an error message.
    */
   void sendError( DMMAmFmTunerDiranaControl_UpdateIdEnum id );

   int postInternalEvent( int code, void* data );
   int sendInternalEvent( int code, void* data );

private:

   /*
    * Duplicating not allowed
    */
   CDMMAmFmTunerDiranaControlStub( const CDMMAmFmTunerDiranaControlStub& ) {}
   CDMMAmFmTunerDiranaControlStub& operator= (const CDMMAmFmTunerDiranaControlStub& ) { return *this ; }
};

inline void CDMMAmFmTunerDiranaControlStub::sendNotification( DMMAmFmTunerDiranaControl_UpdateIdEnum updateId )
{
   DMMAmFmTunerDiranaControlStub_SendNotification( this, updateId );
}


inline void CDMMAmFmTunerDiranaControlStub::responseSetAudioRouting(  DMMAmFmTunerDiranaControl_Result result )
{
   DMMAmFmTunerDiranaControl_ResponseSetAudioRouting( (DMMAmFmTunerDiranaControlStub*)this, result );
}

inline void CDMMAmFmTunerDiranaControlStub::responseGetAudioRouting(  DMMAmFmTunerDiranaControl_AudioInputs input )
{
   DMMAmFmTunerDiranaControl_ResponseGetAudioRouting( (DMMAmFmTunerDiranaControlStub*)this, input );
}

inline void CDMMAmFmTunerDiranaControlStub::responseReadXMem(  DMMAmFmTunerDiranaControl_Result result,  unsigned int memValueX )
{
   DMMAmFmTunerDiranaControl_ResponseReadXMem( (DMMAmFmTunerDiranaControlStub*)this, result, memValueX );
}

inline void CDMMAmFmTunerDiranaControlStub::responseWriteXMem(  DMMAmFmTunerDiranaControl_Result result )
{
   DMMAmFmTunerDiranaControl_ResponseWriteXMem( (DMMAmFmTunerDiranaControlStub*)this, result );
}

inline void CDMMAmFmTunerDiranaControlStub::responseReadYMem(  DMMAmFmTunerDiranaControl_Result result,  unsigned short memValueY )
{
   DMMAmFmTunerDiranaControl_ResponseReadYMem( (DMMAmFmTunerDiranaControlStub*)this, result, memValueY );
}

inline void CDMMAmFmTunerDiranaControlStub::responseWriteYMem(  DMMAmFmTunerDiranaControl_Result result )
{
   DMMAmFmTunerDiranaControl_ResponseWriteYMem( (DMMAmFmTunerDiranaControlStub*)this, result );
}


#endif // CDMMAMFMTUNERDIRANACONTROLSTUB_HPP


