 
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2014
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 21.11.2014
 */


#include "CDMMAmFmTunerDiranaControlProxy.hpp"
#include "CTunerRequestResponseHandler.hpp"
#include <string.h>
#include <iostream>
#include<fstream>
#include "TraceMacros.hpp"

TRC_SCOPE_DEF(TunerService, CDMMAmFmTunerDiranaControlProxy, ComponentConnected);
TRC_SCOPE_DEF(TunerService, CDMMAmFmTunerDiranaControlProxy, componentDisconnected);

bool CDMMAmFmTunerDiranaControlProxy::D3status =  false;
static void _responseSetAudioRouting( DMMAmFmTunerDiranaControlProxy* proxy,  DMMAmFmTunerDiranaControl_Result result )
{
   ((CDMMAmFmTunerDiranaControlProxy*)proxy)->responseSetAudioRouting( result ) ;
}

static void _responseGetAudioRouting( DMMAmFmTunerDiranaControlProxy* proxy,  DMMAmFmTunerDiranaControl_AudioInputs input )
{
   ((CDMMAmFmTunerDiranaControlProxy*)proxy)->responseGetAudioRouting( input ) ;
}

static void _responseReadXMem( DMMAmFmTunerDiranaControlProxy* proxy,  DMMAmFmTunerDiranaControl_Result result,  unsigned int memValueX )
{
   ((CDMMAmFmTunerDiranaControlProxy*)proxy)->responseReadXMem( result, memValueX ) ;
}

static void _responseWriteXMem( DMMAmFmTunerDiranaControlProxy* proxy,  DMMAmFmTunerDiranaControl_Result result )
{
   ((CDMMAmFmTunerDiranaControlProxy*)proxy)->responseWriteXMem( result ) ;
}

static void _responseReadYMem( DMMAmFmTunerDiranaControlProxy* proxy,  DMMAmFmTunerDiranaControl_Result result,  unsigned short memValueY )
{
   ((CDMMAmFmTunerDiranaControlProxy*)proxy)->responseReadYMem( result, memValueY ) ;
}

static void _responseWriteYMem( DMMAmFmTunerDiranaControlProxy* proxy,  DMMAmFmTunerDiranaControl_Result result )
{
   ((CDMMAmFmTunerDiranaControlProxy*)proxy)->responseWriteYMem( result ) ;
}

static void _processInternalEvent( DMMAmFmTunerDiranaControlProxy* proxy, int code, void* data )
{
   ((CDMMAmFmTunerDiranaControlProxy*)proxy)->processInternalEvent( code,  data ) ;
}

static void _processUpdateEvent( DMMAmFmTunerDiranaControlProxy* proxy, DMMAmFmTunerDiranaControl_UpdateIdEnum updateId )
{
   ((CDMMAmFmTunerDiranaControlProxy*)proxy)->processUpdateEvent( updateId ) ;
}

static void _componentConnected( DMMAmFmTunerDiranaControlProxy* proxy )
{
   ((CDMMAmFmTunerDiranaControlProxy*)proxy)->componentConnected( ) ;
}

static void _componentDisconnected( DMMAmFmTunerDiranaControlProxy* proxy )
{
   ((CDMMAmFmTunerDiranaControlProxy*)proxy)->componentDisconnected( ) ;
}

static void _cleanup( DMMAmFmTunerDiranaControlProxy* proxy )
{
   ((CDMMAmFmTunerDiranaControlProxy*)proxy)->cleanup( ) ;
}

static void _responseInvalid( DMMAmFmTunerDiranaControlProxy* proxy, DMMAmFmTunerDiranaControl_UpdateIdEnum id )
{
   ((CDMMAmFmTunerDiranaControlProxy*)proxy)->responseInvalid( id );
}

static void _requestSetAudioRoutingFailed( DMMAmFmTunerDiranaControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerDiranaControlProxy*)proxy)->requestSetAudioRoutingFailed( errType );
}

static void _requestGetAudioRoutingFailed( DMMAmFmTunerDiranaControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerDiranaControlProxy*)proxy)->requestGetAudioRoutingFailed( errType );
}

static void _requestWriteXMemFailed( DMMAmFmTunerDiranaControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerDiranaControlProxy*)proxy)->requestWriteXMemFailed( errType );
}

static void _requestReadXMemFailed( DMMAmFmTunerDiranaControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerDiranaControlProxy*)proxy)->requestReadXMemFailed( errType );
}

static void _requestWriteYMemFailed( DMMAmFmTunerDiranaControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerDiranaControlProxy*)proxy)->requestWriteYMemFailed( errType );
}

static void _requestReadYMemFailed( DMMAmFmTunerDiranaControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerDiranaControlProxy*)proxy)->requestReadYMemFailed( errType );
}


CDMMAmFmTunerDiranaControlProxy::CDMMAmFmTunerDiranaControlProxy( )
{
   memset( (DMMAmFmTunerDiranaControlProxy*)this, 0, sizeof(DMMAmFmTunerDiranaControlProxy) );

   fnResponseSetAudioRouting = _responseSetAudioRouting ;
   fnResponseGetAudioRouting = _responseGetAudioRouting ;
   fnResponseReadXMem = _responseReadXMem ;
   fnResponseWriteXMem = _responseWriteXMem ;
   fnResponseReadYMem = _responseReadYMem ;
   fnResponseWriteYMem = _responseWriteYMem ;

   fnRequestSetAudioRoutingFailed = _requestSetAudioRoutingFailed ;
   fnRequestGetAudioRoutingFailed = _requestGetAudioRoutingFailed ;
   fnRequestWriteXMemFailed = _requestWriteXMemFailed ;
   fnRequestReadXMemFailed = _requestReadXMemFailed ;
   fnRequestWriteYMemFailed = _requestWriteYMemFailed ;
   fnRequestReadYMemFailed = _requestReadYMemFailed ;

   fnProcessInternalEvent = _processInternalEvent ;
   fnProcessUpdateEvent = _processUpdateEvent ;
   fnComponentConnected = _componentConnected ;
   fnComponentDisconnected = _componentDisconnected ;
   fnResponseInvalid = _responseInvalid ;
   fnCleanup = _cleanup ;
}

CDMMAmFmTunerDiranaControlProxy::~CDMMAmFmTunerDiranaControlProxy()
{
}

int CDMMAmFmTunerDiranaControlProxy::start( const char* rolename )
{
   return DMMAmFmTunerDiranaControlProxy_Start( this, rolename ) ;
}

void CDMMAmFmTunerDiranaControlProxy::stop( int exitcode )
{
   DMMAmFmTunerDiranaControlProxy_Stop( this, exitcode );
}

int CDMMAmFmTunerDiranaControlProxy::postInternalEvent( int code, void* data )
{
   return DSIPostInternalEvent( client.Channel.Master, client.Id, 0, code, data );
}

int CDMMAmFmTunerDiranaControlProxy::sendInternalEvent( int code, void* data )
{
   return DSISendInternalEvent( client.Channel.Master, client.Id, 0, code, data );
}

void CDMMAmFmTunerDiranaControlProxy::cleanup()
{
}

void CDMMAmFmTunerDiranaControlProxy::componentConnected()
{
	TRC_SCOPE(TunerService, CDMMAmFmTunerDiranaControlProxy, ComponentConnected);
	std::string sig = "diranaFlashStatus";
	std::string signal = "diranaConnectionStatus";
	Json::Value data;
	data["value"] = true;
		Json::Value obj;
		obj[""] = "";
		CTunerRequestResponseHandler::handleNotif(sig,obj);
		CTunerRequestResponseHandler::handleNotif(signal,data);
		printf("Dirana control marker file to be created\n");
		ofstream f("/tmp/D3_Ready");
	    f.close();
	    D3status = true;

}
void CDMMAmFmTunerDiranaControlProxy::componentDisconnected( )
{
	TRC_SCOPE(TunerService, CDMMAmFmTunerDiranaControlProxy, componentDisconnected);
	//printf("Dirana control component disconnected called\n");
	DBG_MSG(("Dirana control component componentDisconnected !!!\n"));
	std::string signal = "diranaConnectionStatus";
	Json::Value data;
	data["value"] = false;
	CTunerRequestResponseHandler::handleNotif(signal,data);
	data["value"] = false;
	D3status = false;
}
