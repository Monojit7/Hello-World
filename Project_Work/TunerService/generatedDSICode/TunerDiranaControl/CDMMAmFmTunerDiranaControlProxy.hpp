#ifndef CDMMAMFMTUNERDIRANACONTROLPROXYIMPL_HPP
#define CDMMAMFMTUNERDIRANACONTROLPROXYIMPL_HPP
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2014
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 21.11.2014
 */


#include "DMMAmFmTunerDiranaControlProxy.h"

/**
 * DSI Proxy: DMMAmFmTunerDiranaControl
 *
 * Interface for control of Dirana audio routing, for experts only.
 */
class CDMMAmFmTunerDiranaControlProxy : public DMMAmFmTunerDiranaControlProxy
{
public:
   /**
    * Constructor.
    */
   CDMMAmFmTunerDiranaControlProxy();

   /**
    * Destructor.
    */
   virtual ~CDMMAmFmTunerDiranaControlProxy();

   /**
    * Start the proxy and enter the eventloop
    */
   virtual int start( const char* rolename );

   /**
    * stop the proxy
    * @param exitcode start(...) will return the exitcode
    */
   virtual void stop( int exitcode );

   /**
    * Called right before the proxy thread ends
    */
   virtual void cleanup();

   /**
    * Changes Dirana audio routing: Connect input with output.
    */
   virtual int requestSetAudioRouting(  DMMAmFmTunerDiranaControl_AudioInputs input,  DMMAmFmTunerDiranaControl_AudioOutputs output ) ;

   /**
    * Get current audio input connected with given output.
    */
   virtual int requestGetAudioRouting(  DMMAmFmTunerDiranaControl_AudioOutputs output ) ;

   /**
    * Writes a single memory location with a 24-bit value in the dirana and returns the result of the operation in the corresponding response.
    */
   virtual int requestWriteXMem(  unsigned int memAddress,  unsigned int memValueX ) ;

   /**
    * Reads a single memory address from the dirana and returns the value in the corresponding response
    */
   virtual int requestReadXMem(  unsigned int memAddress ) ;

   /**
    * Writes a single memory location with a 16-bit value in the dirana and returns the result of the operation in the corresponding response.
    */
   virtual int requestWriteYMem(  unsigned int memAddress,  unsigned short memValueY ) ;

   /**
    * Reads a single memory address from the dirana and returns the value in the corresponding response
    */
   virtual int requestReadYMem(  unsigned int memAddress ) ;

   /**
    * Request failure indicator for request @c DMMAmFmTunerDiranaControl_SetAudioRouting.
    * The @c DMMAmFmTunerDiranaControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSetAudioRoutingFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerDiranaControl_GetAudioRouting.
    * The @c DMMAmFmTunerDiranaControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestGetAudioRoutingFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerDiranaControl_WriteXMem.
    * The @c DMMAmFmTunerDiranaControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestWriteXMemFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerDiranaControl_ReadXMem.
    * The @c DMMAmFmTunerDiranaControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestReadXMemFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerDiranaControl_WriteYMem.
    * The @c DMMAmFmTunerDiranaControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestWriteYMemFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerDiranaControl_ReadYMem.
    * The @c DMMAmFmTunerDiranaControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestReadYMemFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * The @c DMMAmFmTunerDiranaControlSendError function was called on the stub side within a response handler
    * with a response id as argument.
    *
    * @param id The element which caused the error.
    */
   virtual void responseInvalid( DMMAmFmTunerDiranaControl_UpdateIdEnum id ) { /* NOOP */ }

   /**
    * Called when an internal event was sent to the server
    */
   virtual void processInternalEvent( int code, void* data ) {}

   /**
    * ...
    */
   virtual void processUpdateEvent( DMMAmFmTunerDiranaControl_UpdateIdEnum updateId ) {}

   /**
    * Called when the server connected to the proxy
    */
   void componentConnected( );

   /**
    * Called when the server disconnects from the proxy
    */
   void componentDisconnected( );

   /**
    * Methods to allow client objects to subscribe for notification
    * events when one of the data elements provided by the service
    * changes.
    */
   void setNotification( DMMAmFmTunerDiranaControl_UpdateIdEnum updateId );

   /**
    * Clear a notification
    */
   void clearNotification( DMMAmFmTunerDiranaControl_UpdateIdEnum updateId );

   /**
    * Returns success state of request, notifcation has to be set manually.
    */
   virtual void responseSetAudioRouting(  DMMAmFmTunerDiranaControl_Result result ) {} // empty implementation

   /**
    * Returns requested audio input
    */
   virtual void responseGetAudioRouting(  DMMAmFmTunerDiranaControl_AudioInputs input ) {} // empty implementation

   /**
    * The response.
    */
   virtual void responseReadXMem(  DMMAmFmTunerDiranaControl_Result result,  unsigned int memValueX ) {} // empty implementation

   /**
    * The response.
    */
   virtual void responseWriteXMem(  DMMAmFmTunerDiranaControl_Result result ) {} // empty implementation

   /**
    * The response.
    */
   virtual void responseReadYMem(  DMMAmFmTunerDiranaControl_Result result,  unsigned short memValueY ) {} // empty implementation

   /**
    * The response.
    */
   virtual void responseWriteYMem(  DMMAmFmTunerDiranaControl_Result result ) {} // empty implementation


   int postInternalEvent( int code, void* data );
   int sendInternalEvent( int code, void* data );
   static bool D3status;

private:

   /*
    * Duplicating not allowed
    */
   CDMMAmFmTunerDiranaControlProxy( const CDMMAmFmTunerDiranaControlProxy& ) {}
   CDMMAmFmTunerDiranaControlProxy& operator= (const CDMMAmFmTunerDiranaControlProxy& ) { return *this ; }
};

inline int CDMMAmFmTunerDiranaControlProxy::requestSetAudioRouting(  DMMAmFmTunerDiranaControl_AudioInputs input,  DMMAmFmTunerDiranaControl_AudioOutputs output )
{
   return DMMAmFmTunerDiranaControl_RequestSetAudioRouting( this, input, output ) ;
}

inline int CDMMAmFmTunerDiranaControlProxy::requestGetAudioRouting(  DMMAmFmTunerDiranaControl_AudioOutputs output )
{
   return DMMAmFmTunerDiranaControl_RequestGetAudioRouting( this, output ) ;
}

inline int CDMMAmFmTunerDiranaControlProxy::requestWriteXMem(  unsigned int memAddress,  unsigned int memValueX )
{
   return DMMAmFmTunerDiranaControl_RequestWriteXMem( this, memAddress, memValueX ) ;
}

inline int CDMMAmFmTunerDiranaControlProxy::requestReadXMem(  unsigned int memAddress )
{
   return DMMAmFmTunerDiranaControl_RequestReadXMem( this, memAddress ) ;
}

inline int CDMMAmFmTunerDiranaControlProxy::requestWriteYMem(  unsigned int memAddress,  unsigned short memValueY )
{
   return DMMAmFmTunerDiranaControl_RequestWriteYMem( this, memAddress, memValueY ) ;
}

inline int CDMMAmFmTunerDiranaControlProxy::requestReadYMem(  unsigned int memAddress )
{
   return DMMAmFmTunerDiranaControl_RequestReadYMem( this, memAddress ) ;
}

inline void CDMMAmFmTunerDiranaControlProxy::setNotification( DMMAmFmTunerDiranaControl_UpdateIdEnum updateId )
{
   DMMAmFmTunerDiranaControlProxy_SetNotification( this, updateId ) ;
}

inline void CDMMAmFmTunerDiranaControlProxy::clearNotification( DMMAmFmTunerDiranaControl_UpdateIdEnum updateId )
{
   DMMAmFmTunerDiranaControlProxy_ClearNotification( this, updateId ) ;
}

#endif // CDMMAMFMTUNERDIRANACONTROLPROXYIMPL_HPP


