#ifndef DMMAMFMTUNERDIRANACONTROLPROXY_H
#define DMMAMFMTUNERDIRANACONTROLPROXY_H
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2014
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 21.11.2014
 */


#include "DMMAmFmTunerDiranaControl.h"

#ifndef TDMMAmFmTunerDiranaControlProxy
#   define TDMMAmFmTunerDiranaControlProxy struct _DMMAmFmTunerDiranaControlProxy
#endif

DSI_EXTERN_C_BEGIN

/*
 * Only the DSI framework is allowed to modify the attributes.
 * For the user of the proxy the attributes are constant!
 */
#ifndef DSICONST
#ifdef __cplusplus
   #define DSICONST
#else
   #define DSICONST const
#endif
#endif

/**
 * DSI Stub: DMMAmFmTunerDiranaControl
 *
 * Interface for control of Dirana audio routing, for experts only.
 */

typedef struct _DMMAmFmTunerDiranaControlProxy
{
   /* DSICONST */ DSIClient client ;




   /**
    * Returns success state of request, notifcation has to be set manually.
    */
   void (*fnResponseSetAudioRouting)( TDMMAmFmTunerDiranaControlProxy* proxy,  DMMAmFmTunerDiranaControl_Result result );

   /**
    * Returns requested audio input
    */
   void (*fnResponseGetAudioRouting)( TDMMAmFmTunerDiranaControlProxy* proxy,  DMMAmFmTunerDiranaControl_AudioInputs input );

   /**
    * The response.
    */
   void (*fnResponseReadXMem)( TDMMAmFmTunerDiranaControlProxy* proxy,  DMMAmFmTunerDiranaControl_Result result,  unsigned int memValueX );

   /**
    * The response.
    */
   void (*fnResponseWriteXMem)( TDMMAmFmTunerDiranaControlProxy* proxy,  DMMAmFmTunerDiranaControl_Result result );

   /**
    * The response.
    */
   void (*fnResponseReadYMem)( TDMMAmFmTunerDiranaControlProxy* proxy,  DMMAmFmTunerDiranaControl_Result result,  unsigned short memValueY );

   /**
    * The response.
    */
   void (*fnResponseWriteYMem)( TDMMAmFmTunerDiranaControlProxy* proxy,  DMMAmFmTunerDiranaControl_Result result );

   /**
    * Request failure indicator for request @c DMMAmFmTunerDiranaControl_SetAudioRouting.
    * The @c DMMAmFmTunerDiranaControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSetAudioRoutingFailed)( TDMMAmFmTunerDiranaControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerDiranaControl_GetAudioRouting.
    * The @c DMMAmFmTunerDiranaControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestGetAudioRoutingFailed)( TDMMAmFmTunerDiranaControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerDiranaControl_WriteXMem.
    * The @c DMMAmFmTunerDiranaControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestWriteXMemFailed)( TDMMAmFmTunerDiranaControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerDiranaControl_ReadXMem.
    * The @c DMMAmFmTunerDiranaControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestReadXMemFailed)( TDMMAmFmTunerDiranaControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerDiranaControl_WriteYMem.
    * The @c DMMAmFmTunerDiranaControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestWriteYMemFailed)( TDMMAmFmTunerDiranaControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerDiranaControl_ReadYMem.
    * The @c DMMAmFmTunerDiranaControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestReadYMemFailed)( TDMMAmFmTunerDiranaControlProxy* proxy, DSIResultType errType );

   /**
    * The @c DMMAmFmTunerDiranaControlSendError function was called on the stub side within a response handler
    * with a response id as argument.
    *
    * @param id The element which caused the error.
    */
   void (*fnResponseInvalid)( TDMMAmFmTunerDiranaControlProxy* proxy, DMMAmFmTunerDiranaControl_UpdateIdEnum id );

   /**
    * Called when the server connected to the proxy
    */
   void (*fnComponentConnected)( TDMMAmFmTunerDiranaControlProxy* proxy );

   /**
    * Called when the server disconnects from the proxy
    */
   void (*fnComponentDisconnected)( TDMMAmFmTunerDiranaControlProxy* proxy );

   /**
    * Called when an update event occurs.
    */
   void (*fnProcessUpdateEvent) ( TDMMAmFmTunerDiranaControlProxy* proxy, DMMAmFmTunerDiranaControl_UpdateIdEnum updateId ) ;

   /**
    * Called when the proxy received an internal event
    */
   void (*fnProcessInternalEvent) ( TDMMAmFmTunerDiranaControlProxy* proxy, int id, void* data ) ;

   /**
    * Called right before the proxy thread ends
    */
   void (*fnCleanup) ( TDMMAmFmTunerDiranaControlProxy* proxy ) ;

} DMMAmFmTunerDiranaControlProxy ;

/**
 * Changes Dirana audio routing: Connect input with output.
 */
int DMMAmFmTunerDiranaControl_RequestSetAudioRouting( TDMMAmFmTunerDiranaControlProxy* proxy,  DMMAmFmTunerDiranaControl_AudioInputs input,  DMMAmFmTunerDiranaControl_AudioOutputs output );



/**
 * Get current audio input connected with given output.
 */
int DMMAmFmTunerDiranaControl_RequestGetAudioRouting( TDMMAmFmTunerDiranaControlProxy* proxy,  DMMAmFmTunerDiranaControl_AudioOutputs output );



/**
 * Writes a single memory location with a 24-bit value in the dirana and returns the result of the operation in the corresponding response.
 */
int DMMAmFmTunerDiranaControl_RequestWriteXMem( TDMMAmFmTunerDiranaControlProxy* proxy,  unsigned int memAddress,  unsigned int memValueX );



/**
 * Reads a single memory address from the dirana and returns the value in the corresponding response
 */
int DMMAmFmTunerDiranaControl_RequestReadXMem( TDMMAmFmTunerDiranaControlProxy* proxy,  unsigned int memAddress );



/**
 * Writes a single memory location with a 16-bit value in the dirana and returns the result of the operation in the corresponding response.
 */
int DMMAmFmTunerDiranaControl_RequestWriteYMem( TDMMAmFmTunerDiranaControlProxy* proxy,  unsigned int memAddress,  unsigned short memValueY );



/**
 * Reads a single memory address from the dirana and returns the value in the corresponding response
 */
int DMMAmFmTunerDiranaControl_RequestReadYMem( TDMMAmFmTunerDiranaControlProxy* proxy,  unsigned int memAddress );





/* -------------------------------------------------------------------------------
 *  notifications
 * ------------------------------------------------------------------------------- */

void DMMAmFmTunerDiranaControlProxy_SetNotification( TDMMAmFmTunerDiranaControlProxy* proxy, DMMAmFmTunerDiranaControl_UpdateIdEnum updateId );
void DMMAmFmTunerDiranaControlProxy_ClearNotification( TDMMAmFmTunerDiranaControlProxy* proxy, DMMAmFmTunerDiranaControl_UpdateIdEnum updateId );
void DMMAmFmTunerDiranaControlProxy_ClearAllNotifications( TDMMAmFmTunerDiranaControlProxy* proxy );


/* -------------------------------------------------------------------------------
 *  (de)initialization
 * ------------------------------------------------------------------------------- */

int DMMAmFmTunerDiranaControlProxy_Init( TDMMAmFmTunerDiranaControlProxy* proxy, const char* rolename );
void DMMAmFmTunerDiranaControlProxy_Free( TDMMAmFmTunerDiranaControlProxy* proxy  );

int DMMAmFmTunerDiranaControlProxy_Start( TDMMAmFmTunerDiranaControlProxy* proxy, const char* rolename );
int DMMAmFmTunerDiranaControlProxy_Stop( TDMMAmFmTunerDiranaControlProxy* proxy, int exitcode );

int DMMAmFmTunerDiranaControlProxy_PostInternalEvent( TDMMAmFmTunerDiranaControlProxy* proxy, int code, void* data );
int DMMAmFmTunerDiranaControlProxy_SendInternalEvent( TDMMAmFmTunerDiranaControlProxy* proxy, int code, void* data );


DSI_EXTERN_C_END

#endif // DMMAMFMTUNERDIRANACONTROLPROXY_H
