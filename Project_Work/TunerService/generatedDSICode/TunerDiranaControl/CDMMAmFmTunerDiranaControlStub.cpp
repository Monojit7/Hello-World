 
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2014
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 21.11.2014
 */


#include "CDMMAmFmTunerDiranaControlStub.hpp"
#include <string.h>

static void _requestSetAudioRouting( DMMAmFmTunerDiranaControlStub* stub,  DMMAmFmTunerDiranaControl_AudioInputs input,  DMMAmFmTunerDiranaControl_AudioOutputs output )
{
   ((CDMMAmFmTunerDiranaControlStub*)stub)->requestSetAudioRouting( input, output ) ;
}

static void _requestGetAudioRouting( DMMAmFmTunerDiranaControlStub* stub,  DMMAmFmTunerDiranaControl_AudioOutputs output )
{
   ((CDMMAmFmTunerDiranaControlStub*)stub)->requestGetAudioRouting( output ) ;
}

static void _requestWriteXMem( DMMAmFmTunerDiranaControlStub* stub,  unsigned int memAddress,  unsigned int memValueX )
{
   ((CDMMAmFmTunerDiranaControlStub*)stub)->requestWriteXMem( memAddress, memValueX ) ;
}

static void _requestReadXMem( DMMAmFmTunerDiranaControlStub* stub,  unsigned int memAddress )
{
   ((CDMMAmFmTunerDiranaControlStub*)stub)->requestReadXMem( memAddress ) ;
}

static void _requestWriteYMem( DMMAmFmTunerDiranaControlStub* stub,  unsigned int memAddress,  unsigned short memValueY )
{
   ((CDMMAmFmTunerDiranaControlStub*)stub)->requestWriteYMem( memAddress, memValueY ) ;
}

static void _requestReadYMem( DMMAmFmTunerDiranaControlStub* stub,  unsigned int memAddress )
{
   ((CDMMAmFmTunerDiranaControlStub*)stub)->requestReadYMem( memAddress ) ;
}

static void _processInternalEvent( DMMAmFmTunerDiranaControlStub* stub, int id, void* data )
{
   ((CDMMAmFmTunerDiranaControlStub*)stub)->processInternalEvent( id,  data ) ;
}

static void _cleanup( DMMAmFmTunerDiranaControlStub* stub )
{
   ((CDMMAmFmTunerDiranaControlStub*)stub)->cleanup( ) ;
}

CDMMAmFmTunerDiranaControlStub::CDMMAmFmTunerDiranaControlStub( )
{
   memset( (DMMAmFmTunerDiranaControlStub*)this, 0, sizeof(DMMAmFmTunerDiranaControlStub) );
   fnRequestSetAudioRouting = _requestSetAudioRouting ;
   fnRequestGetAudioRouting = _requestGetAudioRouting ;
   fnRequestWriteXMem = _requestWriteXMem ;
   fnRequestReadXMem = _requestReadXMem ;
   fnRequestWriteYMem = _requestWriteYMem ;
   fnRequestReadYMem = _requestReadYMem ;
   fnProcessInternalEvent = _processInternalEvent ;
   fnCleanup = _cleanup ;
}

CDMMAmFmTunerDiranaControlStub::~CDMMAmFmTunerDiranaControlStub()
{
   // DMMAmFmTunerDiranaControlStop( this ); not implemented
}

int CDMMAmFmTunerDiranaControlStub::start( const char* rolename )
{
   return DMMAmFmTunerDiranaControlStub_Start( this, rolename );
}

void CDMMAmFmTunerDiranaControlStub::stop( int exitcode )
{
   DMMAmFmTunerDiranaControlStub_Stop( this, exitcode );
}

void CDMMAmFmTunerDiranaControlStub::sendError( DMMAmFmTunerDiranaControl_UpdateIdEnum id )
{
   DMMAmFmTunerDiranaControlSendError( this, id );
}

int CDMMAmFmTunerDiranaControlStub::postInternalEvent( int code, void* data )
{
   return DSIPostInternalEvent( server.Channel.Master, server.Id, 0, code, data );
}

int CDMMAmFmTunerDiranaControlStub::sendInternalEvent( int code, void* data )
{
   return DSISendInternalEvent( server.Channel.Master, server.Id, 0, code, data );
}

void CDMMAmFmTunerDiranaControlStub::cleanup()
{
}
