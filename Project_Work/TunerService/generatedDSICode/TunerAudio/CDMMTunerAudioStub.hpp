#ifndef CDMMTUNERAUDIOSTUB_HPP
#define CDMMTUNERAUDIOSTUB_HPP
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2014
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 21.11.2014
 */


#include "DMMTunerAudioStub.h"

/**
 * DSI Stub: DMMTunerAudio
 *
 * Provides information about tuner audio source state (for domain internal use only).
 */
class CDMMTunerAudioStub : public DMMTunerAudioStub
{
public:
   /**
    * Constructor.
    */
   CDMMTunerAudioStub( );

   /**
    * Destructor.
    */
   virtual ~CDMMTunerAudioStub();

   /**
    * Start the server
    */
   int start( const char* rolename );

   /**
    * Stop the server
    */
   void stop( int exitcode );

   /**
    * Called right before the stub thread ends
    */
   virtual void cleanup();

   /**
    * Set the desired source activity state
    */
   virtual void requestSetSourceActivity(  DMMTunerAudio_SourceActivity activity,  unsigned char sourceNumber,  unsigned int handle ) = 0 ;

   /**
    * Enable/disable source mute
    */
   virtual void requestEnableSourceMute(  DSIBool mute,  unsigned int handle ) = 0 ;

   /**
    * Indicate the current sinks this audio is currently connected to
    */
   virtual void requestSetCurrentSinks(  DMMTunerAudio_SourceType sourceType, const DMMTunerAudio_SinkTypes sinkTypes,  unsigned int handle ) = 0 ;

   /**
    * Called when an internal event was sent to the server
    */
   virtual void processInternalEvent( int code, void* data ) {}

   /**
    * Result of setSourceActivity request. This response is only sent if handle of setSourceActivity is not equal to zero (notifcation has to be set explicitly).
    */
   void responseSetSourceActivity(  unsigned int handle,  DMMTunerTypes_Feedback feedback );

   /**
    * Result of enableSourceMute request. This response is only sent if handle of enableSourceMute is not equal to zero (notifcation has to be set explicitly).
    */
   void responseEnableSourceMute(  unsigned int handle,  DMMTunerTypes_Feedback feedback );

   /**
    * Result of setCurrentSinks request. This response is only sent if handle of setCurrentSinks is not equal to zero (notifcation has to be set explicitly).
    */
   void responseSetCurrentSinks(  unsigned int handle,  DMMTunerTypes_Feedback feedback );


   void sendNotification( DMMTunerAudio_UpdateIdEnum updateId );

   /**
    * Respond with an error message.
    */
   void sendError( DMMTunerAudio_UpdateIdEnum id );

   int postInternalEvent( int code, void* data );
   int sendInternalEvent( int code, void* data );

private:

   /*
    * Duplicating not allowed
    */
   CDMMTunerAudioStub( const CDMMTunerAudioStub& ) {}
   CDMMTunerAudioStub& operator= (const CDMMTunerAudioStub& ) { return *this ; }
};

inline void CDMMTunerAudioStub::sendNotification( DMMTunerAudio_UpdateIdEnum updateId )
{
   DMMTunerAudioStub_SendNotification( this, updateId );
}


inline void CDMMTunerAudioStub::responseSetSourceActivity(  unsigned int handle,  DMMTunerTypes_Feedback feedback )
{
   DMMTunerAudio_ResponseSetSourceActivity( (DMMTunerAudioStub*)this, handle, feedback );
}

inline void CDMMTunerAudioStub::responseEnableSourceMute(  unsigned int handle,  DMMTunerTypes_Feedback feedback )
{
   DMMTunerAudio_ResponseEnableSourceMute( (DMMTunerAudioStub*)this, handle, feedback );
}

inline void CDMMTunerAudioStub::responseSetCurrentSinks(  unsigned int handle,  DMMTunerTypes_Feedback feedback )
{
   DMMTunerAudio_ResponseSetCurrentSinks( (DMMTunerAudioStub*)this, handle, feedback );
}


#endif // CDMMTUNERAUDIOSTUB_HPP


