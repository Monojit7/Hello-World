#ifndef DMMTUNERAUDIOPROXY_H
#define DMMTUNERAUDIOPROXY_H
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2015
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 15.1.2015
 */


#include "DMMTunerAudio.h"

#ifndef TDMMTunerAudioProxy
#   define TDMMTunerAudioProxy struct _DMMTunerAudioProxy
#endif

DSI_EXTERN_C_BEGIN

/*
 * Only the DSI framework is allowed to modify the attributes.
 * For the user of the proxy the attributes are constant!
 */
#ifndef DSICONST
#ifdef __cplusplus
   #define DSICONST
#else
   #define DSICONST const
#endif
#endif

/**
 * DSI Stub: DMMTunerAudio
 *
 * Provides information about tuner audio source state (for domain internal use only).
 */

typedef struct _DMMTunerAudioProxy
{
   /* DSICONST */ DSIClient client ;


   /**
    * Audio availability state
    */
   DSICONST DMMTunerAudio_AudioAvailability audioAvailability ;
   DSICONST DataStateType audioAvailabilityState ;



   /**
    * Result of setSourceActivity request. This response is only sent if handle of setSourceActivity is not equal to zero (notifcation has to be set explicitly).
    */
   void (*fnResponseSetSourceActivity)( TDMMTunerAudioProxy* proxy,  unsigned int handle,  DMMTunerTypes_Feedback feedback );

   /**
    * Result of enableSourceMute request. This response is only sent if handle of enableSourceMute is not equal to zero (notifcation has to be set explicitly).
    */
   void (*fnResponseEnableSourceMute)( TDMMTunerAudioProxy* proxy,  unsigned int handle,  DMMTunerTypes_Feedback feedback );

   /**
    * Result of setCurrentSinks request. This response is only sent if handle of setCurrentSinks is not equal to zero (notifcation has to be set explicitly).
    */
   void (*fnResponseSetCurrentSinks)( TDMMTunerAudioProxy* proxy,  unsigned int handle,  DMMTunerTypes_Feedback feedback );

   /**
    * Request failure indicator for request @c DMMTunerAudio_SetSourceActivity.
    * The @c DMMTunerAudioSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSetSourceActivityFailed)( TDMMTunerAudioProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMTunerAudio_EnableSourceMute.
    * The @c DMMTunerAudioSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestEnableSourceMuteFailed)( TDMMTunerAudioProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMTunerAudio_SetCurrentSinks.
    * The @c DMMTunerAudioSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSetCurrentSinksFailed)( TDMMTunerAudioProxy* proxy, DSIResultType errType );

   /**
    * The @c DMMTunerAudioSendError function was called on the stub side within a response handler
    * with a response id as argument.
    *
    * @param id The element which caused the error.
    */
   void (*fnResponseInvalid)( TDMMTunerAudioProxy* proxy, DMMTunerAudio_UpdateIdEnum id );

   /**
    * Called when the server connected to the proxy
    */
   void (*fnComponentConnected)( TDMMTunerAudioProxy* proxy );

   /**
    * Called when the server disconnects from the proxy
    */
   void (*fnComponentDisconnected)( TDMMTunerAudioProxy* proxy );

   /**
    * Called when an update event occurs.
    */
   void (*fnProcessUpdateEvent) ( TDMMTunerAudioProxy* proxy, DMMTunerAudio_UpdateIdEnum updateId ) ;

   /**
    * Called when the proxy received an internal event
    */
   void (*fnProcessInternalEvent) ( TDMMTunerAudioProxy* proxy, int id, void* data ) ;

   /**
    * Called right before the proxy thread ends
    */
   void (*fnCleanup) ( TDMMTunerAudioProxy* proxy ) ;

} DMMTunerAudioProxy ;

/**
 * Set the desired source activity state
 * CAUTION: Use with care, for standard use cases use requestSetCurrentSinks instead!!!
 */
int DMMTunerAudio_RequestSetSourceActivity( TDMMTunerAudioProxy* proxy,  DMMTunerAudio_SourceActivity activity,  unsigned char sourceNumber,  unsigned int handle );



/**
 * Enable/disable source mute
 */
int DMMTunerAudio_RequestEnableSourceMute( TDMMTunerAudioProxy* proxy,  DSIBool mute,  unsigned int handle );



/**
 * Indicate the current sinks this audio is currently connected to
 */
int DMMTunerAudio_RequestSetCurrentSinks( TDMMTunerAudioProxy* proxy,  DMMTunerAudio_SourceType sourceType, const DMMTunerAudio_SinkTypes sinkTypes,  unsigned int handle );

int DMMTunerAudio_RequestSetCurrentSinksEx( TDMMTunerAudioProxy* proxy,  DMMTunerAudio_SourceType sourceType, const DMMTunerAudio_SinkType* sinkTypes, int sinkTypesSize,  unsigned int handle );




/* -------------------------------------------------------------------------------
 *  notifications
 * ------------------------------------------------------------------------------- */

void DMMTunerAudioProxy_SetNotification( TDMMTunerAudioProxy* proxy, DMMTunerAudio_UpdateIdEnum updateId );
void DMMTunerAudioProxy_ClearNotification( TDMMTunerAudioProxy* proxy, DMMTunerAudio_UpdateIdEnum updateId );
void DMMTunerAudioProxy_ClearAllNotifications( TDMMTunerAudioProxy* proxy );


/* -------------------------------------------------------------------------------
 *  (de)initialization
 * ------------------------------------------------------------------------------- */

int DMMTunerAudioProxy_Init( TDMMTunerAudioProxy* proxy, const char* rolename );
void DMMTunerAudioProxy_Free( TDMMTunerAudioProxy* proxy  );

int DMMTunerAudioProxy_Start( TDMMTunerAudioProxy* proxy, const char* rolename );
int DMMTunerAudioProxy_Stop( TDMMTunerAudioProxy* proxy, int exitcode );

int DMMTunerAudioProxy_PostInternalEvent( TDMMTunerAudioProxy* proxy, int code, void* data );
int DMMTunerAudioProxy_SendInternalEvent( TDMMTunerAudioProxy* proxy, int code, void* data );


DSI_EXTERN_C_END

#endif // DMMTUNERAUDIOPROXY_H
