#ifndef DMMTUNERAUDIOSTUB_H
#define DMMTUNERAUDIOSTUB_H
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2015
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 15.1.2015
 */


#include "DMMTunerAudio.h"

#ifndef TDMMTunerAudioStub
#define TDMMTunerAudioStub struct _DMMTunerAudioStub
#endif

DSI_EXTERN_C_BEGIN

/**
 * DSI Stub: DMMTunerAudio
 *
 * Provides information about tuner audio source state (for domain internal use only).
 */
typedef struct _DMMTunerAudioStub
{
   DSIServer server ;

   /**
    * Implementation version of this server
    */
   DSIVersionInfo implVersion ;

   /**
    * Audio availability state
    */
   DMMTunerAudio_AudioAvailability audioAvailability ;


   /**
    * Set the desired source activity state
    * CAUTION: Use with care, for standard use cases use requestSetCurrentSinks instead!!!
    */
   void (*fnRequestSetSourceActivity)( TDMMTunerAudioStub* stub,  DMMTunerAudio_SourceActivity activity,  unsigned char sourceNumber,  unsigned int handle );

   /**
    * Enable/disable source mute
    */
   void (*fnRequestEnableSourceMute)( TDMMTunerAudioStub* stub,  DSIBool mute,  unsigned int handle );

   /**
    * Indicate the current sinks this audio is currently connected to
    */
   void (*fnRequestSetCurrentSinks)( TDMMTunerAudioStub* stub,  DMMTunerAudio_SourceType sourceType, const DMMTunerAudio_SinkTypes sinkTypes,  unsigned int handle );

   void (*fnRequestSetCurrentSinksEx)( TDMMTunerAudioStub* stub,  DMMTunerAudio_SourceType sourceType, const DMMTunerAudio_SinkType* sinkTypes, int sinkTypesSize,  unsigned int handle );


   /**
    * Called when the stub received an internal event
    */
   void (*fnProcessInternalEvent) ( TDMMTunerAudioStub* stub, int id, void* data ) ;

   /**
    * Called right before the stub thread ends
    */
   void (*fnCleanup) ( TDMMTunerAudioStub* stub ) ;

} DMMTunerAudioStub ;

/**
 * Result of setSourceActivity request. This response is only sent if handle of setSourceActivity is not equal to zero (notifcation has to be set explicitly).
 */
void DMMTunerAudio_ResponseSetSourceActivity( TDMMTunerAudioStub* stub,  unsigned int handle,  DMMTunerTypes_Feedback feedback );

/**
 * Result of enableSourceMute request. This response is only sent if handle of enableSourceMute is not equal to zero (notifcation has to be set explicitly).
 */
void DMMTunerAudio_ResponseEnableSourceMute( TDMMTunerAudioStub* stub,  unsigned int handle,  DMMTunerTypes_Feedback feedback );

/**
 * Result of setCurrentSinks request. This response is only sent if handle of setCurrentSinks is not equal to zero (notifcation has to be set explicitly).
 */
void DMMTunerAudio_ResponseSetCurrentSinks( TDMMTunerAudioStub* stub,  unsigned int handle,  DMMTunerTypes_Feedback feedback );


/**
 * Sends a notification to all clients that are interested.
 */
void DMMTunerAudioStub_SendNotification( TDMMTunerAudioStub* stub, DMMTunerAudio_UpdateIdEnum id );

/**
 * Initailzes the stub
 */
int DMMTunerAudioStub_Init( TDMMTunerAudioStub* stub, const char* rolename );

/**
 * Frees the stub
 */
void DMMTunerAudioStub_Free( TDMMTunerAudioStub* stub );

/**
 * Starts the DMMTunerAudio stub and enters the message loop. This functions
 * does not return until void DMMTunerAudioStubStop() is called or an error
 * during startup occures.
 */
int DMMTunerAudioStub_Start( TDMMTunerAudioStub* stub, const char* rolename );

/**
 * Stops the DMMTunerAudio stub. This function ends the stubs message loop.
 * DMMTunerAudioStub_Start() returns the exitcode.
 */
int DMMTunerAudioStub_Stop( TDMMTunerAudioStub* stub, int exitcode );

/**
 * Respond with an error message.
 */
void DMMTunerAudioSendError( TDMMTunerAudioStub* stub, DMMTunerAudio_UpdateIdEnum id );

/**
 * Posts an internal event in the stubs message queue and returns immediately.
 */
int DMMTunerAudioStub_PostInternalEvent( TDMMTunerAudioStub* stub, int code, void* data );

/**
 * Send an internal event to the stub and waits until the stub handled it. Do not call this
 * function from within the stubs task. This will lead into a dead lock.
 */
int DMMTunerAudioStub_SendInternalEvent( TDMMTunerAudioStub* stub, int code, void* data );

#define DMMTunerAudioStub_RegisterCurrentSession( stub ) DSIServerRegisterCurrentSession( &stub->server )
#define DMMTunerAudioStub_ClearActiveSessions( stub ) DSIServerClearActiveSessions( &stub->server )
#define DMMTunerAudioStub_AddActiveSession( stub, sessionId ) DSIServerAddActiveSession( &stub->server, sessionId )
#define DMMTunerAudioStub_IsSessionActive( stub, sessionId ) DSIServerIsSessionActive( &stub->server, sessionId )

#define DMMTunerAudioStub_UnblockRequest( stub ) DSIServerUnblockRequest( &stub->server )
#define DMMTunerAudioStub_PrepareResponse( stub, sessionHandle ) DSIServerPrepareResponse( &stub->server, sessionHandle )

DSI_EXTERN_C_END

#endif // DMMTUNERAUDIOSTUB_H
