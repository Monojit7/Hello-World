 
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2014
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 21.11.2014
 */


#include "CDMMTunerAudioStub.hpp"
#include <string.h>

static void _requestSetSourceActivity( DMMTunerAudioStub* stub,  DMMTunerAudio_SourceActivity activity,  unsigned char sourceNumber,  unsigned int handle )
{
   ((CDMMTunerAudioStub*)stub)->requestSetSourceActivity( activity, sourceNumber, handle ) ;
}

static void _requestEnableSourceMute( DMMTunerAudioStub* stub,  DSIBool mute,  unsigned int handle )
{
   ((CDMMTunerAudioStub*)stub)->requestEnableSourceMute( mute, handle ) ;
}

static void _requestSetCurrentSinks( DMMTunerAudioStub* stub,  DMMTunerAudio_SourceType sourceType, const DMMTunerAudio_SinkTypes sinkTypes,  unsigned int handle )
{
   ((CDMMTunerAudioStub*)stub)->requestSetCurrentSinks( sourceType, sinkTypes, handle ) ;
}

static void _processInternalEvent( DMMTunerAudioStub* stub, int id, void* data )
{
   ((CDMMTunerAudioStub*)stub)->processInternalEvent( id,  data ) ;
}

static void _cleanup( DMMTunerAudioStub* stub )
{
   ((CDMMTunerAudioStub*)stub)->cleanup( ) ;
}

CDMMTunerAudioStub::CDMMTunerAudioStub( )
{
   memset( (DMMTunerAudioStub*)this, 0, sizeof(DMMTunerAudioStub) );
   fnRequestSetSourceActivity = _requestSetSourceActivity ;
   fnRequestEnableSourceMute = _requestEnableSourceMute ;
   fnRequestSetCurrentSinks = _requestSetCurrentSinks ;
   fnProcessInternalEvent = _processInternalEvent ;
   fnCleanup = _cleanup ;
}

CDMMTunerAudioStub::~CDMMTunerAudioStub()
{
   // DMMTunerAudioStop( this ); not implemented
}

int CDMMTunerAudioStub::start( const char* rolename )
{
   return DMMTunerAudioStub_Start( this, rolename );
}

void CDMMTunerAudioStub::stop( int exitcode )
{
   DMMTunerAudioStub_Stop( this, exitcode );
}

void CDMMTunerAudioStub::sendError( DMMTunerAudio_UpdateIdEnum id )
{
   DMMTunerAudioSendError( this, id );
}

int CDMMTunerAudioStub::postInternalEvent( int code, void* data )
{
   return DSIPostInternalEvent( server.Channel.Master, server.Id, 0, code, data );
}

int CDMMTunerAudioStub::sendInternalEvent( int code, void* data )
{
   return DSISendInternalEvent( server.Channel.Master, server.Id, 0, code, data );
}

void CDMMTunerAudioStub::cleanup()
{
}
