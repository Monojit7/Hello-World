#ifndef DMMTUNERAUDIO_H
#define DMMTUNERAUDIO_H
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2015
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 15.1.2015
 */


#include "api/sys/dsi/pf/base/src/DSI.h"
#include "DMMTunerTypes.h"

DSI_EXTERN_C_BEGIN


// Version information

static const int DMMTunerAudio_MAJOR_VERSION = 1 ;
static const int DMMTunerAudio_MINOR_VERSION = 1 ;


/** ***************************************************************************
 *  DMMTunerAudio
 *
 *  Provides information about tuner audio source state (for domain internal use only).
 */
typedef enum
{
   /**
    * Set the desired source activity state
    * CAUTION: Use with care, for standard use cases use requestSetCurrentSinks instead!!!
    */
   DMMTunerAudio_UPD_ID_requestSetSourceActivity = DSI_REQUEST_ID_FIRST + 0, // 0x00000000

   /**
    * Enable/disable source mute
    */
   DMMTunerAudio_UPD_ID_requestEnableSourceMute = DSI_REQUEST_ID_FIRST + 1, // 0x00000001

   /**
    * Indicate the current sinks this audio is currently connected to
    */
   DMMTunerAudio_UPD_ID_requestSetCurrentSinks = DSI_REQUEST_ID_FIRST + 2, // 0x00000002

   /**
    * Result of setSourceActivity request. This response is only sent if handle of setSourceActivity is not equal to zero (notifcation has to be set explicitly).
    */
   DMMTunerAudio_UPD_ID_responseSetSourceActivity = DSI_RESPONSE_ID_FIRST + 0, // 0x80000000

   /**
    * Result of enableSourceMute request. This response is only sent if handle of enableSourceMute is not equal to zero (notifcation has to be set explicitly).
    */
   DMMTunerAudio_UPD_ID_responseEnableSourceMute = DSI_RESPONSE_ID_FIRST + 1, // 0x80000001

   /**
    * Result of setCurrentSinks request. This response is only sent if handle of setCurrentSinks is not equal to zero (notifcation has to be set explicitly).
    */
   DMMTunerAudio_UPD_ID_responseSetCurrentSinks = DSI_RESPONSE_ID_FIRST + 2, // 0x80000002

   /**
    * Audio availability state
    */
   DMMTunerAudio_UPD_ID_audioAvailability = DSI_ATTRIBUTE_ID_FIRST + 0, // 0xC0000000

   /**
    * Implementation version
    */
   DMMTunerAudio_UPD_ID_implVersion = DSI_ATTRIBUTE_ID_LAST - 1,

   /**
    * Nothing
    */
   DMMTunerAudio_UPD_ID_NOP = DSI_ATTRIBUTE_ID_LAST

} DMMTunerAudio_UpdateIdEnum ;




/** ***************************************************************************
 * Source activity states
 */
typedef enum
{
   /*
    * No activity, tuner is not used
    */
   DMMTunerAudio_ACT_OFF,
   /*
    * Tuner is paused
    */
   DMMTunerAudio_ACT_PAUSE,
   /*
    * Tuner is used
    */
   DMMTunerAudio_ACT_ON,

} DMMTunerAudio_SourceActivity ;


/** ***************************************************************************
 * The source types
 */
typedef enum
{
   /*
    * Audio is available on sink as entertainment source
    */
   DMMTunerAudio_SRC_ENTERTAINMENT,
   /*
    * Audio is available on sink as announcement source
    */
   DMMTunerAudio_SRC_ANNOUNCEMENT,

} DMMTunerAudio_SourceType ;


/** ***************************************************************************
 * The sink types
 */
typedef enum
{
   /*
    * Speakers
    */
   DMMTunerAudio_SNK_SPEAKERS,
   /*
    * Rear seat 1
    */
   DMMTunerAudio_SNK_RSE1,
   /*
    * Rear seat 2
    */
   DMMTunerAudio_SNK_RSE2,

} DMMTunerAudio_SinkType ;


/** ***************************************************************************
 * Audio availability
 */
typedef enum
{
   /*
    * Initial value, no information
    */
   DMMTunerAudio_AUD_UNDEF,
   /*
    * Initial audio is/was actually available
    */
   DMMTunerAudio_AUD_FIRST_TIME,
   /*
    * No audio available (current state - might not be implemented)
    */
   DMMTunerAudio_AUD_NOT_AVAILABLE,
   /*
    * Audio available (current state - might not be implemented)
    */
   DMMTunerAudio_AUD_AVAILABLE,

} DMMTunerAudio_AudioAvailability ;

// forward declaration(s)
struct _DMMTunerAudio_SinkTypes ;

/** ***************************************************************************
 * A vector of audio sinks
 */
DSIVectorTypeDef( DMMTunerAudio_SinkTypes, DMMTunerAudio_SinkType ) ;

// Free the vector related data
#define DMMTunerAudio_SinkTypes_Free( p ) DSIVectorFree( *p )
void DMMTunerAudio_SinkTypes_Copy( DMMTunerAudio_SinkTypes* lhs, const DMMTunerAudio_SinkTypes* rhs );

void DSIReadDMMTunerAudio_SinkTypes( DSIStream *stream, DMMTunerAudio_SinkTypes *p ) ;
void DSIWriteDMMTunerAudio_SinkTypes( DSIStream *stream, const DMMTunerAudio_SinkTypes *p ) ;


/** ***************************************************************************
 * Constants
 */



/** ***************************************************************************
 * Argument List Structure for requestDMMTunerAudio_SetSourceActivity
 */
typedef struct _DMMTunerAudio_RequestSetSourceActivityArgList
{
   /**
    * Desired activity state
    */
   DMMTunerAudio_SourceActivity activity ;

   /**
    * Optional source number if device supports more than one audio source.
    */
   unsigned char sourceNumber ;

   /**
    * An optional handle for identifying the request
    */
   unsigned int handle ;

} DMMTunerAudio_RequestSetSourceActivityArgList ;

#define DMMTunerAudio_RequestSetSourceActivityArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMTunerAudio_RequestSetSourceActivityArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMTunerAudio_RequestSetSourceActivityArgList( DSIStream *stream, DMMTunerAudio_RequestSetSourceActivityArgList* arglist );
int DSIWriteDMMTunerAudio_RequestSetSourceActivityArgList( DSIStream *stream, const DMMTunerAudio_RequestSetSourceActivityArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMTunerAudio_EnableSourceMute
 */
typedef struct _DMMTunerAudio_RequestEnableSourceMuteArgList
{
   /**
    * True: mute, false: demute
    */
   DSIBool mute ;

   /**
    * An optional handle for identifying the request
    */
   unsigned int handle ;

} DMMTunerAudio_RequestEnableSourceMuteArgList ;

#define DMMTunerAudio_RequestEnableSourceMuteArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMTunerAudio_RequestEnableSourceMuteArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMTunerAudio_RequestEnableSourceMuteArgList( DSIStream *stream, DMMTunerAudio_RequestEnableSourceMuteArgList* arglist );
int DSIWriteDMMTunerAudio_RequestEnableSourceMuteArgList( DSIStream *stream, const DMMTunerAudio_RequestEnableSourceMuteArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMTunerAudio_SetCurrentSinks
 */
typedef struct _DMMTunerAudio_RequestSetCurrentSinksArgList
{
   /**
    * The source types
    */
   DMMTunerAudio_SourceType sourceType ;

   /**
    * The audio sinks this audio source is currently connected to, pass an empty vector if no sink is connected.
    */
   DMMTunerAudio_SinkTypes sinkTypes ;

   /**
    * An optional handle for identifying the request
    */
   unsigned int handle ;

} DMMTunerAudio_RequestSetCurrentSinksArgList ;

#define DMMTunerAudio_RequestSetCurrentSinksArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMTunerAudio_RequestSetCurrentSinksArgList_Free( DMMTunerAudio_RequestSetCurrentSinksArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMTunerAudio_RequestSetCurrentSinksArgList( DSIStream *stream, DMMTunerAudio_RequestSetCurrentSinksArgList* arglist );
int DSIWriteDMMTunerAudio_RequestSetCurrentSinksArgList( DSIStream *stream, const DMMTunerAudio_RequestSetCurrentSinksArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for responseDMMTunerAudio_SetSourceActivity
 */
typedef struct _DMMTunerAudio_ResponseSetSourceActivityArgList
{
   /**
    * The handle of the corresponding request
    */
   unsigned int handle ;

   /**
    * The result of the request
    */
   DMMTunerTypes_Feedback feedback ;

} DMMTunerAudio_ResponseSetSourceActivityArgList ;

#define DMMTunerAudio_ResponseSetSourceActivityArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMTunerAudio_ResponseSetSourceActivityArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMTunerAudio_ResponseSetSourceActivityArgList( DSIStream *stream, DMMTunerAudio_ResponseSetSourceActivityArgList* arglist );
int DSIWriteDMMTunerAudio_ResponseSetSourceActivityArgList( DSIStream *stream, const DMMTunerAudio_ResponseSetSourceActivityArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for responseDMMTunerAudio_EnableSourceMute
 */
typedef struct _DMMTunerAudio_ResponseEnableSourceMuteArgList
{
   /**
    * The handle of the corresponding request
    */
   unsigned int handle ;

   /**
    * The result of the request
    */
   DMMTunerTypes_Feedback feedback ;

} DMMTunerAudio_ResponseEnableSourceMuteArgList ;

#define DMMTunerAudio_ResponseEnableSourceMuteArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMTunerAudio_ResponseEnableSourceMuteArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMTunerAudio_ResponseEnableSourceMuteArgList( DSIStream *stream, DMMTunerAudio_ResponseEnableSourceMuteArgList* arglist );
int DSIWriteDMMTunerAudio_ResponseEnableSourceMuteArgList( DSIStream *stream, const DMMTunerAudio_ResponseEnableSourceMuteArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for responseDMMTunerAudio_SetCurrentSinks
 */
typedef struct _DMMTunerAudio_ResponseSetCurrentSinksArgList
{
   /**
    * The handle of the corresponding request
    */
   unsigned int handle ;

   /**
    * The result of the request
    */
   DMMTunerTypes_Feedback feedback ;

} DMMTunerAudio_ResponseSetCurrentSinksArgList ;

#define DMMTunerAudio_ResponseSetCurrentSinksArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMTunerAudio_ResponseSetCurrentSinksArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMTunerAudio_ResponseSetCurrentSinksArgList( DSIStream *stream, DMMTunerAudio_ResponseSetCurrentSinksArgList* arglist );
int DSIWriteDMMTunerAudio_ResponseSetCurrentSinksArgList( DSIStream *stream, const DMMTunerAudio_ResponseSetCurrentSinksArgList* arglist );




/**
 * Streaming Functions for Attributes
 */
#define DSIReadDMMTunerAudio_AudioAvailability( stream, attribute ) DSIRead32( stream, attribute )
#define  DSIWriteDMMTunerAudio_AudioAvailability( stream, attribute ) DSIWrite32( stream, attribute )


DSI_EXTERN_C_END

#endif // DMMTUNERAUDIO_H
