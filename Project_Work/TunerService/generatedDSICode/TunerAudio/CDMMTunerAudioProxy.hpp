#ifndef CDMMTUNERAUDIOPROXYIMPL_HPP
#define CDMMTUNERAUDIOPROXYIMPL_HPP
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2014
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 21.11.2014
 */


#include "DMMTunerAudioProxy.h"

/**
 * DSI Proxy: DMMTunerAudio
 *
 * Provides information about tuner audio source state (for domain internal use only).
 */
class CDMMTunerAudioProxy : public DMMTunerAudioProxy
{
public:
   /**
    * Constructor.
    */
   CDMMTunerAudioProxy();

   /**
    * Destructor.
    */
   virtual ~CDMMTunerAudioProxy();

   /**
    * Start the proxy and enter the eventloop
    */
   virtual int start( const char* rolename );

   /**
    * stop the proxy
    * @param exitcode start(...) will return the exitcode
    */
   virtual void stop( int exitcode );

   /**
    * Called right before the proxy thread ends
    */
   virtual void cleanup();

   /**
    * Set the desired source activity state
    * CAUTION: Use with care, for standard use cases use requestSetCurrentSinks instead!!!
    */
   virtual int requestSetSourceActivity(  DMMTunerAudio_SourceActivity activity,  unsigned char sourceNumber,  unsigned int handle ) ;

   /**
    * Enable/disable source mute
    */
   virtual int requestEnableSourceMute(  DSIBool mute,  unsigned int handle ) ;

   /**
    * Indicate the current sinks this audio is currently connected to
    */
   virtual int requestSetCurrentSinks(  DMMTunerAudio_SourceType sourceType, const DMMTunerAudio_SinkTypes sinkTypes,  unsigned int handle ) ;

   /**
    * Request failure indicator for request @c DMMTunerAudio_SetSourceActivity.
    * The @c DMMTunerAudioSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSetSourceActivityFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMTunerAudio_EnableSourceMute.
    * The @c DMMTunerAudioSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestEnableSourceMuteFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMTunerAudio_SetCurrentSinks.
    * The @c DMMTunerAudioSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSetCurrentSinksFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * The @c DMMTunerAudioSendError function was called on the stub side within a response handler
    * with a response id as argument.
    *
    * @param id The element which caused the error.
    */
   virtual void responseInvalid( DMMTunerAudio_UpdateIdEnum id ) { /* NOOP */ }

   /**
    * Called when an internal event was sent to the server
    */
   virtual void processInternalEvent( int code, void* data );

   /**
    * ...
    */
   virtual void processUpdateEvent( DMMTunerAudio_UpdateIdEnum updateId ) { /* NOOP */ }

   /**
    * Called when the server connected to the proxy
    */
   virtual void componentConnected( );

   /**
    * Called when the server disconnects from the proxy
    */
   virtual void componentDisconnected( ) {}

   /**
    * Methods to allow client objects to subscribe for notification
    * events when one of the data elements provided by the service
    * changes.
    */
   void setNotification( DMMTunerAudio_UpdateIdEnum updateId );

   /**
    * Clear a notification
    */
   void clearNotification( DMMTunerAudio_UpdateIdEnum updateId );

   /**
    * Result of setSourceActivity request. This response is only sent if handle of setSourceActivity is not equal to zero (notifcation has to be set explicitly).
    */
   virtual void responseSetSourceActivity(  unsigned int handle,  DMMTunerTypes_Feedback feedback ) {} // empty implementation

   /**
    * Result of enableSourceMute request. This response is only sent if handle of enableSourceMute is not equal to zero (notifcation has to be set explicitly).
    */
   virtual void responseEnableSourceMute(  unsigned int handle,  DMMTunerTypes_Feedback feedback ) {} // empty implementation

   /**
    * Result of setCurrentSinks request. This response is only sent if handle of setCurrentSinks is not equal to zero (notifcation has to be set explicitly).
    */
   virtual void responseSetCurrentSinks(  unsigned int handle,  DMMTunerTypes_Feedback feedback ); // empty implementation


   int postInternalEvent( int code, void* data );
   int sendInternalEvent( int code, void* data );
   static bool spkStatus;

private:

   /*
    * Duplicating not allowed
    */
   CDMMTunerAudioProxy( const CDMMTunerAudioProxy& ) {}
   CDMMTunerAudioProxy& operator= (const CDMMTunerAudioProxy& ) { return *this ; }
};

inline int CDMMTunerAudioProxy::requestSetSourceActivity(  DMMTunerAudio_SourceActivity activity,  unsigned char sourceNumber,  unsigned int handle )
{
   return DMMTunerAudio_RequestSetSourceActivity( this, activity, sourceNumber, handle ) ;
}

inline int CDMMTunerAudioProxy::requestEnableSourceMute(  DSIBool mute,  unsigned int handle )
{
   return DMMTunerAudio_RequestEnableSourceMute( this, mute, handle ) ;
}

inline int CDMMTunerAudioProxy::requestSetCurrentSinks(  DMMTunerAudio_SourceType sourceType, const DMMTunerAudio_SinkTypes sinkTypes,  unsigned int handle )
{
   return DMMTunerAudio_RequestSetCurrentSinks( this, sourceType, sinkTypes, handle ) ;
}

inline void CDMMTunerAudioProxy::setNotification( DMMTunerAudio_UpdateIdEnum updateId )
{
   DMMTunerAudioProxy_SetNotification( this, updateId ) ;
}

inline void CDMMTunerAudioProxy::clearNotification( DMMTunerAudio_UpdateIdEnum updateId )
{
   DMMTunerAudioProxy_ClearNotification( this, updateId ) ;
}

#endif // CDMMTUNERAUDIOPROXYIMPL_HPP


