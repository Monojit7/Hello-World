#ifndef CDMMTUNERANNOUNCEMENTPROXYIMPL_HPP
#define CDMMTUNERANNOUNCEMENTPROXYIMPL_HPP
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2013
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 6.5.2013
 */


#include "DMMTunerAnnouncementProxy.h"

/**
 * DSI Proxy: DMMTunerAnnouncement
 *
 * Tuner generic and project independent announcement interface. Via this interface announcements are indicated and can be controlled.
 */
class CDMMTunerAnnouncementProxy : public DMMTunerAnnouncementProxy
{
public:
   /**
    * Constructor.
    */
   CDMMTunerAnnouncementProxy();

   /**
    * Destructor.
    */
   virtual ~CDMMTunerAnnouncementProxy();

   /**
    * Start the proxy and enter the eventloop
    */
   virtual int start( const char* rolename );

   /**
    * stop the proxy
    * @param exitcode start(...) will return the exitcode
    */
   virtual void stop( int exitcode );

   /**
    * Called right before the proxy thread ends
    */
   virtual void cleanup();

   /**
    * Set the filter for one announcement of one tuner device (enable/disable; priority).
    */
   virtual int requestSetFilter( const DMMTunerAnnouncement_Filter& filter,  unsigned int handle ) ;

   /**
    * Abort an active announcement
    */
   virtual int requestAbort( const DMMTunerAnnouncement_StationSelector& source,  DMMTunerAnnouncement_AnnouncementType type,  unsigned int handle ) ;

   /**
    * Starts tuning a frequency or selecting a station. 
    * NOTE: Use this method ONLY if YOUR component is in charge to tune to an active announcement, usually this is done by the tuner itself or by the announcement master component.  
    */
   virtual int requestStartTune( const DMMTunerAnnouncement_StationSelector& station,  DSIBool blockStation,  unsigned int handle ) ;

   /**
    * Device shall unblock new tune requests via DMMTunerStation interface and shall also restore latest requested station.
    * NOTE: Use this method ONLY if YOUR component is in charge to tune to an active announcement, usually this is done by the tuner itself or by the announcement master component.
    */
   virtual int requestUnblockStation( ) ;

   /**
    * Like setFilter but with the capability to set several filters at once
    */
   virtual int requestSetFilters( const DMMTunerAnnouncement_Filters filters,  unsigned int handle ) ;

   /**
    * Request failure indicator for request @c DMMTunerAnnouncement_SetFilter.
    * The @c DMMTunerAnnouncementSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSetFilterFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMTunerAnnouncement_Abort.
    * The @c DMMTunerAnnouncementSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestAbortFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMTunerAnnouncement_StartTune.
    * The @c DMMTunerAnnouncementSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestStartTuneFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMTunerAnnouncement_UnblockStation.
    * The @c DMMTunerAnnouncementSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestUnblockStationFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMTunerAnnouncement_SetFilters.
    * The @c DMMTunerAnnouncementSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSetFiltersFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * The @c DMMTunerAnnouncementSendError function was called on the stub side within a response handler
    * with a response id as argument.
    *
    * @param id The element which caused the error.
    */
   virtual void responseInvalid( DMMTunerAnnouncement_UpdateIdEnum id ) { /* NOOP */ }

   /**
    * Called when an internal event was sent to the server
    */
   virtual void processInternalEvent( int code, void* data );

   /**
    * ...
    */
   virtual void processUpdateEvent( DMMTunerAnnouncement_UpdateIdEnum updateId ) {}

   /**
    * Called when the server connected to the proxy
    */
   virtual void componentConnected( );

   /**
    * Called when the server disconnects from the proxy
    */
   virtual void componentDisconnected( );

   /**
    * Methods to allow client objects to subscribe for notification
    * events when one of the data elements provided by the service
    * changes.
    */
   void setNotification( DMMTunerAnnouncement_UpdateIdEnum updateId );

   /**
    * Clear a notification
    */
   void clearNotification( DMMTunerAnnouncement_UpdateIdEnum updateId );

   /**
    * Result of filter setting request. This response is only sent if handle of setFilter is not equal to zero (notifcation has to be set explicitly).
    */
   virtual void responseSetFilter(  unsigned int handle,  DMMTunerTypes_Feedback feedback ) {} // empty implementation

   /**
    * Result of abort request. This response is only sent if handle of abort is not equal to zero (notifcation has to be set explicitly).
    */
   virtual void responseAbort(  unsigned int handle,  DMMTunerTypes_Feedback feedback ); //{} // empty implementation

   /**
    * Result of startTune() request
    */
   virtual void responseStartTune(  unsigned int handle,  DMMTunerTypes_Feedback feedback ); // empty implementation

   /**
    * Current announcement information
    */
   virtual void informationCurrentAnnouncement( const DMMTunerAnnouncement_Announcement& announcement ); // empty implementation

   /**
    * Result of filters setting request. This response is only sent if handle of setFilters is not equal to zero (notifcation has to be set explicitly).
    */
   virtual void responseSetFilters(  unsigned int handle, const DMMTunerTypes_Feedbacks feedbacks ) {} // empty implementation


   int postInternalEvent( int code, void* data );
   int sendInternalEvent( int code, void* data );

private:

   /*
    * Duplicating not allowed
    */
   CDMMTunerAnnouncementProxy( const CDMMTunerAnnouncementProxy& ) {}
   CDMMTunerAnnouncementProxy& operator= (const CDMMTunerAnnouncementProxy& ) { return *this ; }
};

inline int CDMMTunerAnnouncementProxy::requestSetFilter( const DMMTunerAnnouncement_Filter& filter,  unsigned int handle )
{
   return DMMTunerAnnouncement_RequestSetFilter( this,  &filter, handle ) ;
}

inline int CDMMTunerAnnouncementProxy::requestAbort( const DMMTunerAnnouncement_StationSelector& source,  DMMTunerAnnouncement_AnnouncementType type,  unsigned int handle )
{
   return DMMTunerAnnouncement_RequestAbort( this,  &source, type, handle ) ;
}

inline int CDMMTunerAnnouncementProxy::requestStartTune( const DMMTunerAnnouncement_StationSelector& station,  DSIBool blockStation,  unsigned int handle )
{
   return DMMTunerAnnouncement_RequestStartTune( this,  &station, blockStation, handle ) ;
}

inline int CDMMTunerAnnouncementProxy::requestUnblockStation( )
{
   return DMMTunerAnnouncement_RequestUnblockStation( this ) ;
}

inline int CDMMTunerAnnouncementProxy::requestSetFilters( const DMMTunerAnnouncement_Filters filters,  unsigned int handle )
{
   return DMMTunerAnnouncement_RequestSetFilters( this, filters, handle ) ;
}

inline void CDMMTunerAnnouncementProxy::setNotification( DMMTunerAnnouncement_UpdateIdEnum updateId )
{
   DMMTunerAnnouncementProxy_SetNotification( this, updateId ) ;
}

inline void CDMMTunerAnnouncementProxy::clearNotification( DMMTunerAnnouncement_UpdateIdEnum updateId )
{
   DMMTunerAnnouncementProxy_ClearNotification( this, updateId ) ;
}

#endif // CDMMTUNERANNOUNCEMENTPROXYIMPL_HPP


