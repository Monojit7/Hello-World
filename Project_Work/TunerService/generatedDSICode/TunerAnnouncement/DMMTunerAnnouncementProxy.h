#ifndef DMMTUNERANNOUNCEMENTPROXY_H
#define DMMTUNERANNOUNCEMENTPROXY_H
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2013
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 6.5.2013
 */


#include "DMMTunerAnnouncement.h"

#ifndef TDMMTunerAnnouncementProxy
#   define TDMMTunerAnnouncementProxy struct _DMMTunerAnnouncementProxy
#endif

DSI_EXTERN_C_BEGIN

/*
 * Only the DSI framework is allowed to modify the attributes.
 * For the user of the proxy the attributes are constant!
 */
#ifndef DSICONST
#ifdef __cplusplus
   #define DSICONST
#else
   #define DSICONST const
#endif
#endif

/**
 * DSI Stub: DMMTunerAnnouncement
 *
 * Tuner generic and project independent announcement interface. Via this interface announcements are indicated and can be controlled.
 */

typedef struct _DMMTunerAnnouncementProxy
{
   /* DSICONST */ DSIClient client ;


   /**
    * List of current announcement filters
    */
   DSICONST DMMTunerAnnouncement_Filters filters ;
   DSICONST DataStateType filtersState ;

   /**
    * List of currently available announcements (and announcements where additional information is available even when not active, respectively).
    */
   DSICONST DMMTunerAnnouncement_Announcements announcements ;
   DSICONST DataStateType announcementsState ;

   /**
    * This attribute is only needed for handler components (announcement master) which control the announcements of/between different tuner devices: Current station, incl. if currently active  or not
    * 
    * DEPRECATED: Use tunerState instead
    */
   DSICONST DMMTunerAnnouncement_Station currentStation ;
   DSICONST DataStateType currentStationState ;

   /**
    * This attribute is only needed for handler components (announcement master) which control the announcements of/between different tuner devices: Current station and bitmask which represents the current tuner state
    */
   DSICONST DMMTunerAnnouncement_TunerState tunerState ;
   DSICONST DataStateType tunerStateState ;



   /**
    * Result of filter setting request. This response is only sent if handle of setFilter is not equal to zero (notifcation has to be set explicitly).
    */
   void (*fnResponseSetFilter)( TDMMTunerAnnouncementProxy* proxy,  unsigned int handle,  DMMTunerTypes_Feedback feedback );

   /**
    * Result of abort request. This response is only sent if handle of abort is not equal to zero (notifcation has to be set explicitly).
    */
   void (*fnResponseAbort)( TDMMTunerAnnouncementProxy* proxy,  unsigned int handle,  DMMTunerTypes_Feedback feedback );

   /**
    * Result of startTune() request
    */
   void (*fnResponseStartTune)( TDMMTunerAnnouncementProxy* proxy,  unsigned int handle,  DMMTunerTypes_Feedback feedback );

   /**
    * Current announcement information
    */
   void (*fnInformationCurrentAnnouncement)( TDMMTunerAnnouncementProxy* proxy, const DMMTunerAnnouncement_Announcement* announcement );

   /**
    * Result of filters setting request. This response is only sent if handle of setFilters is not equal to zero (notifcation has to be set explicitly).
    */
   void (*fnResponseSetFilters)( TDMMTunerAnnouncementProxy* proxy,  unsigned int handle, const DMMTunerTypes_Feedbacks feedbacks );

   void (*fnResponseSetFiltersEx)( TDMMTunerAnnouncementProxy* proxy,  unsigned int handle, const DMMTunerTypes_Feedback* feedbacks, int feedbacksSize );
   
   /**
    * Request failure indicator for request @c DMMTunerAnnouncement_SetFilter.
    * The @c DMMTunerAnnouncementSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSetFilterFailed)( TDMMTunerAnnouncementProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMTunerAnnouncement_Abort.
    * The @c DMMTunerAnnouncementSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestAbortFailed)( TDMMTunerAnnouncementProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMTunerAnnouncement_StartTune.
    * The @c DMMTunerAnnouncementSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestStartTuneFailed)( TDMMTunerAnnouncementProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMTunerAnnouncement_UnblockStation.
    * The @c DMMTunerAnnouncementSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestUnblockStationFailed)( TDMMTunerAnnouncementProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMTunerAnnouncement_SetFilters.
    * The @c DMMTunerAnnouncementSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSetFiltersFailed)( TDMMTunerAnnouncementProxy* proxy, DSIResultType errType );

   /**
    * The @c DMMTunerAnnouncementSendError function was called on the stub side within a response handler
    * with a response id as argument.
    *
    * @param id The element which caused the error.
    */
   void (*fnResponseInvalid)( TDMMTunerAnnouncementProxy* proxy, DMMTunerAnnouncement_UpdateIdEnum id );

   /**
    * Called when the server connected to the proxy
    */
   void (*fnComponentConnected)( TDMMTunerAnnouncementProxy* proxy );

   /**
    * Called when the server disconnects from the proxy
    */
   void (*fnComponentDisconnected)( TDMMTunerAnnouncementProxy* proxy );

   /**
    * Called when an update event occurs.
    */
   void (*fnProcessUpdateEvent) ( TDMMTunerAnnouncementProxy* proxy, DMMTunerAnnouncement_UpdateIdEnum updateId ) ;

   /**
    * Called when the proxy received an internal event
    */
   void (*fnProcessInternalEvent) ( TDMMTunerAnnouncementProxy* proxy, int id, void* data ) ;

   /**
    * Called right before the proxy thread ends
    */
   void (*fnCleanup) ( TDMMTunerAnnouncementProxy* proxy ) ;

} DMMTunerAnnouncementProxy ;

/**
 * Set the filter for one announcement of one tuner device (enable/disable; priority).
 */
int DMMTunerAnnouncement_RequestSetFilter( TDMMTunerAnnouncementProxy* proxy, const DMMTunerAnnouncement_Filter* filter,  unsigned int handle );



/**
 * Abort an active announcement
 */
int DMMTunerAnnouncement_RequestAbort( TDMMTunerAnnouncementProxy* proxy, const DMMTunerAnnouncement_StationSelector* source,  DMMTunerAnnouncement_AnnouncementType type,  unsigned int handle );



/**
 * Starts tuning a frequency or selecting a station. 
 * NOTE: Use this method ONLY if YOUR component is in charge to tune to an active announcement, usually this is done by the tuner itself or by the announcement master component.  
 */
int DMMTunerAnnouncement_RequestStartTune( TDMMTunerAnnouncementProxy* proxy, const DMMTunerAnnouncement_StationSelector* station,  DSIBool blockStation,  unsigned int handle );



/**
 * Device shall unblock new tune requests via DMMTunerStation interface and shall also restore latest requested station.
 * NOTE: Use this method ONLY if YOUR component is in charge to tune to an active announcement, usually this is done by the tuner itself or by the announcement master component.
 */
int DMMTunerAnnouncement_RequestUnblockStation( TDMMTunerAnnouncementProxy* proxy );



/**
 * Like setFilter but with the capability to set several filters at once
 */
int DMMTunerAnnouncement_RequestSetFilters( TDMMTunerAnnouncementProxy* proxy, const DMMTunerAnnouncement_Filters filters,  unsigned int handle );

int DMMTunerAnnouncement_RequestSetFiltersEx( TDMMTunerAnnouncementProxy* proxy, const DMMTunerAnnouncement_Filter* filters, int filtersSize,  unsigned int handle );




/* -------------------------------------------------------------------------------
 *  notifications
 * ------------------------------------------------------------------------------- */

void DMMTunerAnnouncementProxy_SetNotification( TDMMTunerAnnouncementProxy* proxy, DMMTunerAnnouncement_UpdateIdEnum updateId );
void DMMTunerAnnouncementProxy_ClearNotification( TDMMTunerAnnouncementProxy* proxy, DMMTunerAnnouncement_UpdateIdEnum updateId );
void DMMTunerAnnouncementProxy_ClearAllNotifications( TDMMTunerAnnouncementProxy* proxy );


/* -------------------------------------------------------------------------------
 *  (de)initialization
 * ------------------------------------------------------------------------------- */

int DMMTunerAnnouncementProxy_Init( TDMMTunerAnnouncementProxy* proxy, const char* rolename );
void DMMTunerAnnouncementProxy_Free( TDMMTunerAnnouncementProxy* proxy  );

int DMMTunerAnnouncementProxy_Start( TDMMTunerAnnouncementProxy* proxy, const char* rolename );
int DMMTunerAnnouncementProxy_Stop( TDMMTunerAnnouncementProxy* proxy, int exitcode );

int DMMTunerAnnouncementProxy_PostInternalEvent( TDMMTunerAnnouncementProxy* proxy, int code, void* data );
int DMMTunerAnnouncementProxy_SendInternalEvent( TDMMTunerAnnouncementProxy* proxy, int code, void* data );


DSI_EXTERN_C_END

#endif // DMMTUNERANNOUNCEMENTPROXY_H
