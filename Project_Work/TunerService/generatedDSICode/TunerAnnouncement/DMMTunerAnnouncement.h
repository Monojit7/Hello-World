#ifndef DMMTUNERANNOUNCEMENT_H
#define DMMTUNERANNOUNCEMENT_H
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2013
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 6.5.2013
 */


#include "api/sys/dsi/pf/base/src/DSI.h"
#include "DMMTunerTypes.h"

DSI_EXTERN_C_BEGIN


// Version information

static const int DMMTunerAnnouncement_MAJOR_VERSION = 1 ;
static const int DMMTunerAnnouncement_MINOR_VERSION = 2 ;


/** ***************************************************************************
 *  DMMTunerAnnouncement
 *
 *  Tuner generic and project independent announcement interface. Via this interface announcements are indicated and can be controlled.
 */
typedef enum
{
   /**
    * Set the filter for one announcement of one tuner device (enable/disable; priority).
    */
   DMMTunerAnnouncement_UPD_ID_requestSetFilter = DSI_REQUEST_ID_FIRST + 0, // 0x00000000

   /**
    * Abort an active announcement
    */
   DMMTunerAnnouncement_UPD_ID_requestAbort = DSI_REQUEST_ID_FIRST + 1, // 0x00000001

   /**
    * Starts tuning a frequency or selecting a station. 
    * NOTE: Use this method ONLY if YOUR component is in charge to tune to an active announcement, usually this is done by the tuner itself or by the announcement master component.  
    */
   DMMTunerAnnouncement_UPD_ID_requestStartTune = DSI_REQUEST_ID_FIRST + 2, // 0x00000002

   /**
    * Device shall unblock new tune requests via DMMTunerStation interface and shall also restore latest requested station.
    * NOTE: Use this method ONLY if YOUR component is in charge to tune to an active announcement, usually this is done by the tuner itself or by the announcement master component.
    */
   DMMTunerAnnouncement_UPD_ID_requestUnblockStation = DSI_REQUEST_ID_FIRST + 3, // 0x00000003

   /**
    * Like setFilter but with the capability to set several filters at once
    */
   DMMTunerAnnouncement_UPD_ID_requestSetFilters = DSI_REQUEST_ID_FIRST + 4, // 0x00000004

   /**
    * Result of filter setting request. This response is only sent if handle of setFilter is not equal to zero (notifcation has to be set explicitly).
    */
   DMMTunerAnnouncement_UPD_ID_responseSetFilter = DSI_RESPONSE_ID_FIRST + 0, // 0x80000000

   /**
    * Result of abort request. This response is only sent if handle of abort is not equal to zero (notifcation has to be set explicitly).
    */
   DMMTunerAnnouncement_UPD_ID_responseAbort = DSI_RESPONSE_ID_FIRST + 1, // 0x80000001

   /**
    * Result of startTune() request
    */
   DMMTunerAnnouncement_UPD_ID_responseStartTune = DSI_RESPONSE_ID_FIRST + 2, // 0x80000002

   /**
    * Current announcement information
    */
   DMMTunerAnnouncement_UPD_ID_informationCurrentAnnouncement = DSI_RESPONSE_ID_FIRST + 3, // 0x80000003

   /**
    * Result of filters setting request. This response is only sent if handle of setFilters is not equal to zero (notifcation has to be set explicitly).
    */
   DMMTunerAnnouncement_UPD_ID_responseSetFilters = DSI_RESPONSE_ID_FIRST + 4, // 0x80000004

   /**
    * List of current announcement filters
    */
   DMMTunerAnnouncement_UPD_ID_filters = DSI_ATTRIBUTE_ID_FIRST + 0, // 0xC0000000

   /**
    * List of currently available announcements (and announcements where additional information is available even when not active, respectively).
    */
   DMMTunerAnnouncement_UPD_ID_announcements = DSI_ATTRIBUTE_ID_FIRST + 1, // 0xC0000001

   /**
    * This attribute is only needed for handler components (announcement master) which control the announcements of/between different tuner devices: Current station, incl. if currently active  or not
    * 
    * DEPRECATED: Use tunerState instead
    */
   DMMTunerAnnouncement_UPD_ID_currentStation = DSI_ATTRIBUTE_ID_FIRST + 2, // 0xC0000002

   /**
    * This attribute is only needed for handler components (announcement master) which control the announcements of/between different tuner devices: Current station and bitmask which represents the current tuner state
    */
   DMMTunerAnnouncement_UPD_ID_tunerState = DSI_ATTRIBUTE_ID_FIRST + 3, // 0xC0000003

   /**
    * Implementation version
    */
   DMMTunerAnnouncement_UPD_ID_implVersion = DSI_ATTRIBUTE_ID_LAST - 1,

   /**
    * Nothing
    */
   DMMTunerAnnouncement_UPD_ID_NOP = DSI_ATTRIBUTE_ID_LAST

} DMMTunerAnnouncement_UpdateIdEnum ;




/** ***************************************************************************
 * Type of announcement.
 */
typedef enum
{
   /*
    * PTY31
    */
   DMMTunerAnnouncement_ALARM = 1, // 0x0001
   /*
    * TA
    */
   DMMTunerAnnouncement_ROAD_TRAFFIC = 2, // 0x0002
   /*
    * DESCRIPTION MISSING
    */
   DMMTunerAnnouncement_TRANSPORT = 4, // 0x0004
   /*
    * DESCRIPTION MISSING
    */
   DMMTunerAnnouncement_WARNING = 8, // 0x0008
   /*
    * DESCRIPTION MISSING
    */
   DMMTunerAnnouncement_NEWS = 16, // 0x0010
   /*
    * DESCRIPTION MISSING
    */
   DMMTunerAnnouncement_AREA_WEATHER = 32, // 0x0020
   /*
    * DESCRIPTION MISSING
    */
   DMMTunerAnnouncement_EVENT = 64, // 0x0040
   /*
    * DESCRIPTION MISSING
    */
   DMMTunerAnnouncement_SPECIAL_EVENT = 128, // 0x0080
   /*
    * DESCRIPTION MISSING
    */
   DMMTunerAnnouncement_PROGRAM_INFO = 256, // 0x0100
   /*
    * DESCRIPTION MISSING
    */
   DMMTunerAnnouncement_SPORT = 512, // 0x0200
   /*
    * DESCRIPTION MISSING
    */
   DMMTunerAnnouncement_FINANCIAL = 1024, // 0x0400

} DMMTunerAnnouncement_AnnouncementType ;


/** ***************************************************************************
 * State of the announcement of a announcement source
 */
typedef enum
{
   /*
    * No information
    */
   DMMTunerAnnouncement_UNDEFINED,
   /*
    * No announcement source (e.g. NO_TP)
    */
   DMMTunerAnnouncement_NONE,
   /*
    * Announcement source lost (e.g. LOST_TP)
    */
   DMMTunerAnnouncement_LOST,
   /*
    * Announcement source available (e.g. TP_AVAILABLE)
    */
   DMMTunerAnnouncement_AVAILABLE,
   /*
    * Announcement active
    */
   DMMTunerAnnouncement_ACTIVE,
   /*
    * Announcement active and selected/tuned
    */
   DMMTunerAnnouncement_ACTIVE_SELECTED,

} DMMTunerAnnouncement_AnnouncementState ;


/** ***************************************************************************
 * Tuner state information bits, this enum might be extended in future
 */
typedef enum
{
   /*
    * No flag active
    */
   DMMTunerAnnouncement_TSF_NONE = 0, // 0x00
   /*
    * Tuner is currently used audio source
    */
   DMMTunerAnnouncement_TSF_ACTIVE_SOURCE = 1, // 0x01
   /*
    * Tuner is muted (digital tuners only)
    */
   DMMTunerAnnouncement_TSF_MUTED = 2, // 0x02
   /*
    * Frequency is locked (digital tuners only)
    */
   DMMTunerAnnouncement_TSF_LOCKED = 4, // 0x04
   /*
    * Tuner is currently used as linking alternative and audio of slave is used
    */
   DMMTunerAnnouncement_TSF_LINKING_SLAVE = 8, // 0x08

} DMMTunerAnnouncement_TunerStateFlags ;

// forward declaration(s)
struct _DMMTunerAnnouncement_Filters ;
struct _DMMTunerAnnouncement_Announcements ;

/** ***************************************************************************
 * Parameters in order to identify a frequency/station uniquely.
 */
typedef struct _DMMTunerAnnouncement_StationSelector
{
   /**
    * Used in a request: Addressed device which has to tune the frequency/station (DeviceType enum)
    * Used in a response/information: The emitting tuner source (SourceType enum)
    * This parameter determines how the id vector has to be interpreted (index order).
    */
   unsigned int deviceType ;

   /**
    * The frequency [kHz].
    */
   unsigned int frequency ;

   /**
    * The ID vector (indices are device and project dependent, refer to specific hbtd file).
    */
   struct _DMMTunerTypes_UInt32s* id ;

} DMMTunerAnnouncement_StationSelector ;

#define DMMTunerAnnouncement_StationSelector_Init( p ) memset( p, 0, sizeof(*p))
void DMMTunerAnnouncement_StationSelector_Free( DMMTunerAnnouncement_StationSelector *p );
void DMMTunerAnnouncement_StationSelector_Copy( DMMTunerAnnouncement_StationSelector* lhs, const DMMTunerAnnouncement_StationSelector* rhs );

void DSIReadDMMTunerAnnouncement_StationSelector( DSIStream *stream, DMMTunerAnnouncement_StationSelector *p ) ;
void DSIWriteDMMTunerAnnouncement_StationSelector( DSIStream *stream, const DMMTunerAnnouncement_StationSelector *p ) ;


/** ***************************************************************************
 * Announcement filter
 */
typedef struct _DMMTunerAnnouncement_Filter
{
   /**
    * The source of the announcement
    */
   DMMTunerAnnouncement_StationSelector source ;

   /**
    * The announcement type
    */
   DMMTunerAnnouncement_AnnouncementType type ;

   /**
    * Enable/disable announcement
    */
   DSIBool enable ;

   /**
    * The desired priority
    */
   unsigned short priority ;

} DMMTunerAnnouncement_Filter ;

#define DMMTunerAnnouncement_Filter_Init( p ) memset( p, 0, sizeof(*p))
void DMMTunerAnnouncement_Filter_Free( DMMTunerAnnouncement_Filter *p );
void DMMTunerAnnouncement_Filter_Copy( DMMTunerAnnouncement_Filter* lhs, const DMMTunerAnnouncement_Filter* rhs );

void DSIReadDMMTunerAnnouncement_Filter( DSIStream *stream, DMMTunerAnnouncement_Filter *p ) ;
void DSIWriteDMMTunerAnnouncement_Filter( DSIStream *stream, const DMMTunerAnnouncement_Filter *p ) ;


/** ***************************************************************************
 * Information about an announcement 
 */
typedef struct _DMMTunerAnnouncement_Announcement
{
   /**
    * The source of the announcement
    */
   DMMTunerAnnouncement_StationSelector source ;

   /**
    * The announcement type
    */
   DMMTunerAnnouncement_AnnouncementType type ;

   /**
    * State of announcement source, for active announcements state==AnnouncementState::ACTIVE has to be true.
    */
   DMMTunerAnnouncement_AnnouncementState state ;

   /**
    * Program name
    */
   char* name ;

   /**
    * Indicates whether the announcement is newly introduced or repeated
    */
   DSIBool repeated ;

} DMMTunerAnnouncement_Announcement ;

#define DMMTunerAnnouncement_Announcement_Init( p ) memset( p, 0, sizeof(*p))
void DMMTunerAnnouncement_Announcement_Free( DMMTunerAnnouncement_Announcement *p );
void DMMTunerAnnouncement_Announcement_Copy( DMMTunerAnnouncement_Announcement* lhs, const DMMTunerAnnouncement_Announcement* rhs );

void DSIReadDMMTunerAnnouncement_Announcement( DSIStream *stream, DMMTunerAnnouncement_Announcement *p ) ;
void DSIWriteDMMTunerAnnouncement_Announcement( DSIStream *stream, const DMMTunerAnnouncement_Announcement *p ) ;


/** ***************************************************************************
 * List containing all announcement filters for all tuner devices.
 */
DSIVectorTypeDef( DMMTunerAnnouncement_Filters, DMMTunerAnnouncement_Filter ) ;

// Free the vector related data
void DMMTunerAnnouncement_Filters_Free( DMMTunerAnnouncement_Filters *p );
void DMMTunerAnnouncement_Filters_Copy( DMMTunerAnnouncement_Filters* lhs, const DMMTunerAnnouncement_Filters* rhs );

void DSIReadDMMTunerAnnouncement_Filters( DSIStream *stream, DMMTunerAnnouncement_Filters *p ) ;
void DSIWriteDMMTunerAnnouncement_Filters( DSIStream *stream, const DMMTunerAnnouncement_Filters *p ) ;

/** ***************************************************************************
 * List containing all currently active announcements from all tuner devices.
 */
DSIVectorTypeDef( DMMTunerAnnouncement_Announcements, DMMTunerAnnouncement_Announcement ) ;

// Free the vector related data
void DMMTunerAnnouncement_Announcements_Free( DMMTunerAnnouncement_Announcements *p );
void DMMTunerAnnouncement_Announcements_Copy( DMMTunerAnnouncement_Announcements* lhs, const DMMTunerAnnouncement_Announcements* rhs );

void DSIReadDMMTunerAnnouncement_Announcements( DSIStream *stream, DMMTunerAnnouncement_Announcements *p ) ;
void DSIWriteDMMTunerAnnouncement_Announcements( DSIStream *stream, const DMMTunerAnnouncement_Announcements *p ) ;

/** ***************************************************************************
 * Station desciption (used for current station)
 * 
 * DEPRECATED: Only used by currentStation attribute which is also deprecated
 */
typedef struct _DMMTunerAnnouncement_Station
{
   /**
    * The station selector information
    */
   DMMTunerAnnouncement_StationSelector sel ;

   /**
    * Indication, if station  is currently active audio source
    */
   DSIBool activeSource ;

} DMMTunerAnnouncement_Station ;

#define DMMTunerAnnouncement_Station_Init( p ) memset( p, 0, sizeof(*p))
void DMMTunerAnnouncement_Station_Free( DMMTunerAnnouncement_Station *p );
void DMMTunerAnnouncement_Station_Copy( DMMTunerAnnouncement_Station* lhs, const DMMTunerAnnouncement_Station* rhs );

void DSIReadDMMTunerAnnouncement_Station( DSIStream *stream, DMMTunerAnnouncement_Station *p ) ;
void DSIWriteDMMTunerAnnouncement_Station( DSIStream *stream, const DMMTunerAnnouncement_Station *p ) ;


/** ***************************************************************************
 * Current tuner state
 */
typedef struct _DMMTunerAnnouncement_TunerState
{
   /**
    * The station selector information
    */
   DMMTunerAnnouncement_StationSelector sel ;

   /**
    * Bitmask which represents the current tuner state, use TunerStateFlags enum for interpretation
    */
   unsigned int flags ;

} DMMTunerAnnouncement_TunerState ;

#define DMMTunerAnnouncement_TunerState_Init( p ) memset( p, 0, sizeof(*p))
void DMMTunerAnnouncement_TunerState_Free( DMMTunerAnnouncement_TunerState *p );
void DMMTunerAnnouncement_TunerState_Copy( DMMTunerAnnouncement_TunerState* lhs, const DMMTunerAnnouncement_TunerState* rhs );

void DSIReadDMMTunerAnnouncement_TunerState( DSIStream *stream, DMMTunerAnnouncement_TunerState *p ) ;
void DSIWriteDMMTunerAnnouncement_TunerState( DSIStream *stream, const DMMTunerAnnouncement_TunerState *p ) ;



/** ***************************************************************************
 * Constants
 */



/** ***************************************************************************
 * Argument List Structure for requestDMMTunerAnnouncement_SetFilter
 */
typedef struct _DMMTunerAnnouncement_RequestSetFilterArgList
{
   /**
    * Announcement filter which shall be set
    */
   DMMTunerAnnouncement_Filter filter ;

   /**
    * Optional handle for identifying the request
    */
   unsigned int handle ;

} DMMTunerAnnouncement_RequestSetFilterArgList ;

#define DMMTunerAnnouncement_RequestSetFilterArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMTunerAnnouncement_RequestSetFilterArgList_Free( DMMTunerAnnouncement_RequestSetFilterArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMTunerAnnouncement_RequestSetFilterArgList( DSIStream *stream, DMMTunerAnnouncement_RequestSetFilterArgList* arglist );
int DSIWriteDMMTunerAnnouncement_RequestSetFilterArgList( DSIStream *stream, const DMMTunerAnnouncement_RequestSetFilterArgList* arglist );




/** ***************************************************************************
 * Argument List Structure for requestDMMTunerAnnouncement_Abort
 */
typedef struct _DMMTunerAnnouncement_RequestAbortArgList
{
   /**
    * The announcement source  where the announcement comes from
    */
   DMMTunerAnnouncement_StationSelector source ;

   /**
    * The announcement type
    */
   DMMTunerAnnouncement_AnnouncementType type ;

   /**
    * Handle for identifying the request
    */
   unsigned int handle ;

} DMMTunerAnnouncement_RequestAbortArgList ;

#define DMMTunerAnnouncement_RequestAbortArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMTunerAnnouncement_RequestAbortArgList_Free( DMMTunerAnnouncement_RequestAbortArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMTunerAnnouncement_RequestAbortArgList( DSIStream *stream, DMMTunerAnnouncement_RequestAbortArgList* arglist );
int DSIWriteDMMTunerAnnouncement_RequestAbortArgList( DSIStream *stream, const DMMTunerAnnouncement_RequestAbortArgList* arglist );




/** ***************************************************************************
 * Argument List Structure for requestDMMTunerAnnouncement_StartTune
 */
typedef struct _DMMTunerAnnouncement_RequestStartTuneArgList
{
   /**
    * The requested frequency/station.
    */
   DMMTunerAnnouncement_StationSelector station ;

   /**
    * True: Device shall block all tune requests via DMMTunerStation interface until unblockStation request is called. 
    */
   DSIBool blockStation ;

   /**
    * Optional handle for identifying the request
    */
   unsigned int handle ;

} DMMTunerAnnouncement_RequestStartTuneArgList ;

#define DMMTunerAnnouncement_RequestStartTuneArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMTunerAnnouncement_RequestStartTuneArgList_Free( DMMTunerAnnouncement_RequestStartTuneArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMTunerAnnouncement_RequestStartTuneArgList( DSIStream *stream, DMMTunerAnnouncement_RequestStartTuneArgList* arglist );
int DSIWriteDMMTunerAnnouncement_RequestStartTuneArgList( DSIStream *stream, const DMMTunerAnnouncement_RequestStartTuneArgList* arglist );






/** ***************************************************************************
 * Argument List Structure for requestDMMTunerAnnouncement_SetFilters
 */
typedef struct _DMMTunerAnnouncement_RequestSetFiltersArgList
{
   /**
    * Announcement filters that shall be set
    */
   DMMTunerAnnouncement_Filters filters ;

   /**
    * Optional handle for identifying the request
    */
   unsigned int handle ;

} DMMTunerAnnouncement_RequestSetFiltersArgList ;

#define DMMTunerAnnouncement_RequestSetFiltersArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMTunerAnnouncement_RequestSetFiltersArgList_Free( DMMTunerAnnouncement_RequestSetFiltersArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMTunerAnnouncement_RequestSetFiltersArgList( DSIStream *stream, DMMTunerAnnouncement_RequestSetFiltersArgList* arglist );
int DSIWriteDMMTunerAnnouncement_RequestSetFiltersArgList( DSIStream *stream, const DMMTunerAnnouncement_RequestSetFiltersArgList* arglist );




/** ***************************************************************************
 * Argument List Structure for responseDMMTunerAnnouncement_SetFilter
 */
typedef struct _DMMTunerAnnouncement_ResponseSetFilterArgList
{
   /**
    * The handle of the corresponding request
    */
   unsigned int handle ;

   /**
    * The result of the request
    */
   DMMTunerTypes_Feedback feedback ;

} DMMTunerAnnouncement_ResponseSetFilterArgList ;

#define DMMTunerAnnouncement_ResponseSetFilterArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMTunerAnnouncement_ResponseSetFilterArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMTunerAnnouncement_ResponseSetFilterArgList( DSIStream *stream, DMMTunerAnnouncement_ResponseSetFilterArgList* arglist );
int DSIWriteDMMTunerAnnouncement_ResponseSetFilterArgList( DSIStream *stream, const DMMTunerAnnouncement_ResponseSetFilterArgList* arglist );




/** ***************************************************************************
 * Argument List Structure for responseDMMTunerAnnouncement_Abort
 */
typedef struct _DMMTunerAnnouncement_ResponseAbortArgList
{
   /**
    * The handle of the corresponding request
    */
   unsigned int handle ;

   /**
    * The result of the request
    */
   DMMTunerTypes_Feedback feedback ;

} DMMTunerAnnouncement_ResponseAbortArgList ;

#define DMMTunerAnnouncement_ResponseAbortArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMTunerAnnouncement_ResponseAbortArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMTunerAnnouncement_ResponseAbortArgList( DSIStream *stream, DMMTunerAnnouncement_ResponseAbortArgList* arglist );
int DSIWriteDMMTunerAnnouncement_ResponseAbortArgList( DSIStream *stream, const DMMTunerAnnouncement_ResponseAbortArgList* arglist );




/** ***************************************************************************
 * Argument List Structure for responseDMMTunerAnnouncement_StartTune
 */
typedef struct _DMMTunerAnnouncement_ResponseStartTuneArgList
{
   /**
    * The handle of the corresponding request
    */
   unsigned int handle ;

   /**
    * The result of the request
    */
   DMMTunerTypes_Feedback feedback ;

} DMMTunerAnnouncement_ResponseStartTuneArgList ;

#define DMMTunerAnnouncement_ResponseStartTuneArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMTunerAnnouncement_ResponseStartTuneArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMTunerAnnouncement_ResponseStartTuneArgList( DSIStream *stream, DMMTunerAnnouncement_ResponseStartTuneArgList* arglist );
int DSIWriteDMMTunerAnnouncement_ResponseStartTuneArgList( DSIStream *stream, const DMMTunerAnnouncement_ResponseStartTuneArgList* arglist );




/** ***************************************************************************
 * Argument List Structure for informationDMMTunerAnnouncement_CurrentAnnouncement
 */
typedef struct _DMMTunerAnnouncement_InformationCurrentAnnouncementArgList
{
   /**
    * Current announcement data
    */
   DMMTunerAnnouncement_Announcement announcement ;

} DMMTunerAnnouncement_InformationCurrentAnnouncementArgList ;

#define DMMTunerAnnouncement_InformationCurrentAnnouncementArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMTunerAnnouncement_InformationCurrentAnnouncementArgList_Free( DMMTunerAnnouncement_InformationCurrentAnnouncementArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMTunerAnnouncement_InformationCurrentAnnouncementArgList( DSIStream *stream, DMMTunerAnnouncement_InformationCurrentAnnouncementArgList* arglist );
int DSIWriteDMMTunerAnnouncement_InformationCurrentAnnouncementArgList( DSIStream *stream, const DMMTunerAnnouncement_InformationCurrentAnnouncementArgList* arglist );




/** ***************************************************************************
 * Argument List Structure for responseDMMTunerAnnouncement_SetFilters
 */
typedef struct _DMMTunerAnnouncement_ResponseSetFiltersArgList
{
   /**
    * The handle of the corresponding request
    */
   unsigned int handle ;

   /**
    * The result of the request, the feedbacks are ordered the same way like the requested filter elements.
    */
   DMMTunerTypes_Feedbacks feedbacks ;

} DMMTunerAnnouncement_ResponseSetFiltersArgList ;

#define DMMTunerAnnouncement_ResponseSetFiltersArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMTunerAnnouncement_ResponseSetFiltersArgList_Free( DMMTunerAnnouncement_ResponseSetFiltersArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMTunerAnnouncement_ResponseSetFiltersArgList( DSIStream *stream, DMMTunerAnnouncement_ResponseSetFiltersArgList* arglist );
int DSIWriteDMMTunerAnnouncement_ResponseSetFiltersArgList( DSIStream *stream, const DMMTunerAnnouncement_ResponseSetFiltersArgList* arglist );





/**
 * Streaming Functions for Attributes
 */
#define DSIReadDMMTunerAnnouncement_Filters( stream, attribute ) DSIReadDMMTunerAnnouncement_Filters( stream, attribute )
#define  DSIWriteDMMTunerAnnouncement_Filters( stream, attribute ) DSIWriteDMMTunerAnnouncement_Filters( stream, attribute )

#define DSIReadDMMTunerAnnouncement_Announcements( stream, attribute ) DSIReadDMMTunerAnnouncement_Announcements( stream, attribute )
#define  DSIWriteDMMTunerAnnouncement_Announcements( stream, attribute ) DSIWriteDMMTunerAnnouncement_Announcements( stream, attribute )

#define DSIReadDMMTunerAnnouncement_CurrentStation( stream, attribute ) DSIReadDMMTunerAnnouncement_Station( stream, attribute )
#define  DSIWriteDMMTunerAnnouncement_CurrentStation( stream, attribute ) DSIWriteDMMTunerAnnouncement_Station( stream, attribute )

#define DSIReadDMMTunerAnnouncement_TunerState( stream, attribute ) DSIReadDMMTunerAnnouncement_TunerState( stream, attribute )
#define  DSIWriteDMMTunerAnnouncement_TunerState( stream, attribute ) DSIWriteDMMTunerAnnouncement_TunerState( stream, attribute )


DSI_EXTERN_C_END

#endif // DMMTUNERANNOUNCEMENT_H
