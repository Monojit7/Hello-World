#ifndef DMMAMFMTUNERCONTROLCLIENT_H
#define DMMAMFMTUNERCONTROLCLIENT_H
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2015
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 20.5.2015
 */


#include "DMMAmFmTunerControl.h"


DSI_EXTERN_C_BEGIN


/*
 * Only the DSI framework is allowed to modify the attributes.
 * For the user of the proxy the attributes are constant!
 */
#ifndef DSICONST
#ifdef __cplusplus
   #define DSICONST
#else
   #define DSICONST const
#endif
#endif


/**
 * Error indication for synchronous requst calls.
 */
typedef struct _DMMAmFmTunerControlErrorIndicator
{
   /// either request or response identifier or 0 on OS error.
   DSICONST int id;
} DMMAmFmTunerControlErrorIndicator;


/* -------------------------------------------------------------------------------
 *  synchronous method calls with corresponding response (containing data)
 * ------------------------------------------------------------------------------- */


/* -------------------------------------------------------------------------------
 *  synchronous attribute fetch
 * ------------------------------------------------------------------------------- */

/**
 * Synchronous attribute retrieval for 'afSwitch'.
 *
 * The caller is later responsible to clean up the attribute structure by calling the
 * appropriate cleanup function boolFree().
 *
 * @param attribute_out The structure where the attribute is stored in. Must not be NULL.
 * @param timeoutMs the wait timeout in milliseconds until the function returns.
 * @return 0 on success, -1 on error.
 */
int DMMAmFmTunerControl_GetAttributeAfSwitch( DSIClient* client, DSIBool* attribute_out, unsigned int timeoutMs );

/**
 * Synchronous attribute retrieval for 'multipleStationsSwitch'.
 *
 * The caller is later responsible to clean up the attribute structure by calling the
 * appropriate cleanup function boolFree().
 *
 * @param attribute_out The structure where the attribute is stored in. Must not be NULL.
 * @param timeoutMs the wait timeout in milliseconds until the function returns.
 * @return 0 on success, -1 on error.
 */
int DMMAmFmTunerControl_GetAttributeMultipleStationsSwitch( DSIClient* client, DSIBool* attribute_out, unsigned int timeoutMs );

/**
 * Synchronous attribute retrieval for 'regMode'.
 *
 * The caller is later responsible to clean up the attribute structure by calling the
 * appropriate cleanup function RegModeFree().
 *
 * @param attribute_out The structure where the attribute is stored in. Must not be NULL.
 * @param timeoutMs the wait timeout in milliseconds until the function returns.
 * @return 0 on success, -1 on error.
 */
int DMMAmFmTunerControl_GetAttributeRegMode( DSIClient* client, DMMAmFmTunerControl_RegMode* attribute_out, unsigned int timeoutMs );

/**
 * Synchronous attribute retrieval for 'stereoMode'.
 *
 * The caller is later responsible to clean up the attribute structure by calling the
 * appropriate cleanup function StereoModeFree().
 *
 * @param attribute_out The structure where the attribute is stored in. Must not be NULL.
 * @param timeoutMs the wait timeout in milliseconds until the function returns.
 * @return 0 on success, -1 on error.
 */
int DMMAmFmTunerControl_GetAttributeStereoMode( DSIClient* client, DMMAmFmTunerControl_StereoMode* attribute_out, unsigned int timeoutMs );

/**
 * Synchronous attribute retrieval for 'stereoState'.
 *
 * The caller is later responsible to clean up the attribute structure by calling the
 * appropriate cleanup function boolFree().
 *
 * @param attribute_out The structure where the attribute is stored in. Must not be NULL.
 * @param timeoutMs the wait timeout in milliseconds until the function returns.
 * @return 0 on success, -1 on error.
 */
int DMMAmFmTunerControl_GetAttributeStereoState( DSIClient* client, DSIBool* attribute_out, unsigned int timeoutMs );

/**
 * Synchronous attribute retrieval for 'hdMode'.
 *
 * The caller is later responsible to clean up the attribute structure by calling the
 * appropriate cleanup function HdModeFree().
 *
 * @param attribute_out The structure where the attribute is stored in. Must not be NULL.
 * @param timeoutMs the wait timeout in milliseconds until the function returns.
 * @return 0 on success, -1 on error.
 */
int DMMAmFmTunerControl_GetAttributeHdMode( DSIClient* client, DMMAmFmTunerControl_HdMode* attribute_out, unsigned int timeoutMs );

/**
 * Synchronous attribute retrieval for 'deviceState'.
 *
 * The caller is later responsible to clean up the attribute structure by calling the
 * appropriate cleanup function DeviceStateFree().
 *
 * @param attribute_out The structure where the attribute is stored in. Must not be NULL.
 * @param timeoutMs the wait timeout in milliseconds until the function returns.
 * @return 0 on success, -1 on error.
 */
int DMMAmFmTunerControl_GetAttributeDeviceState( DSIClient* client, DMMAmFmTunerControl_DeviceState* attribute_out, unsigned int timeoutMs );

/**
 * Synchronous attribute retrieval for 'diagSwitch'.
 *
 * The caller is later responsible to clean up the attribute structure by calling the
 * appropriate cleanup function boolFree().
 *
 * @param attribute_out The structure where the attribute is stored in. Must not be NULL.
 * @param timeoutMs the wait timeout in milliseconds until the function returns.
 * @return 0 on success, -1 on error.
 */
int DMMAmFmTunerControl_GetAttributeDiagSwitch( DSIClient* client, DSIBool* attribute_out, unsigned int timeoutMs );

/**
 * Synchronous attribute retrieval for 'wavebandGrids'.
 *
 * The caller is later responsible to clean up the attribute structure by calling the
 * appropriate cleanup function WavebandGridsFree().
 *
 * @param attribute_out The structure where the attribute is stored in. Must not be NULL.
 * @param timeoutMs the wait timeout in milliseconds until the function returns.
 * @return 0 on success, -1 on error.
 */
int DMMAmFmTunerControl_GetAttributeWavebandGrids( DSIClient* client, DMMAmFmTunerControl_WavebandGrids* attribute_out, unsigned int timeoutMs );

/**
 * Synchronous attribute retrieval for 'hwError'.
 *
 * The caller is later responsible to clean up the attribute structure by calling the
 * appropriate cleanup function HwErrorFree().
 *
 * @param attribute_out The structure where the attribute is stored in. Must not be NULL.
 * @param timeoutMs the wait timeout in milliseconds until the function returns.
 * @return 0 on success, -1 on error.
 */
int DMMAmFmTunerControl_GetAttributeHwError( DSIClient* client, DMMAmFmTunerControl_HwError* attribute_out, unsigned int timeoutMs );

/**
 * Synchronous attribute retrieval for 'versions'.
 *
 * The caller is later responsible to clean up the attribute structure by calling the
 * appropriate cleanup function StringsFree().
 *
 * @param attribute_out The structure where the attribute is stored in. Must not be NULL.
 * @param timeoutMs the wait timeout in milliseconds until the function returns.
 * @return 0 on success, -1 on error.
 */
int DMMAmFmTunerControl_GetAttributeVersions( DSIClient* client, DMMAmFmTunerControl_Strings* attribute_out, unsigned int timeoutMs );

/**
 * Synchronous attribute retrieval for 'codingData'.
 *
 * The caller is later responsible to clean up the attribute structure by calling the
 * appropriate cleanup function CodingDataFree().
 *
 * @param attribute_out The structure where the attribute is stored in. Must not be NULL.
 * @param timeoutMs the wait timeout in milliseconds until the function returns.
 * @return 0 on success, -1 on error.
 */
int DMMAmFmTunerControl_GetAttributeCodingData( DSIClient* client, DMMAmFmTunerControl_CodingData* attribute_out, unsigned int timeoutMs );

/**
 * Synchronous attribute retrieval for 'hdBallGameMode'.
 *
 * The caller is later responsible to clean up the attribute structure by calling the
 * appropriate cleanup function HdBallGameModeFree().
 *
 * @param attribute_out The structure where the attribute is stored in. Must not be NULL.
 * @param timeoutMs the wait timeout in milliseconds until the function returns.
 * @return 0 on success, -1 on error.
 */
int DMMAmFmTunerControl_GetAttributeHdBallGameMode( DSIClient* client, DMMAmFmTunerControl_HdBallGameMode* attribute_out, unsigned int timeoutMs );

/**
 * Synchronous attribute retrieval for 'tunerStateAttr'.
 *
 * The caller is later responsible to clean up the attribute structure by calling the
 * appropriate cleanup function TunerStatesFree().
 *
 * @param attribute_out The structure where the attribute is stored in. Must not be NULL.
 * @param timeoutMs the wait timeout in milliseconds until the function returns.
 * @return 0 on success, -1 on error.
 */
int DMMAmFmTunerControl_GetAttributeTunerStateAttr( DSIClient* client, DMMAmFmTunerControl_TunerStates* attribute_out, unsigned int timeoutMs );

/**
 * Synchronous attribute retrieval for 'arbitrationInfo'.
 *
 * The caller is later responsible to clean up the attribute structure by calling the
 * appropriate cleanup function ArbitrationInfoFree().
 *
 * @param attribute_out The structure where the attribute is stored in. Must not be NULL.
 * @param timeoutMs the wait timeout in milliseconds until the function returns.
 * @return 0 on success, -1 on error.
 */
int DMMAmFmTunerControl_GetAttributeArbitrationInfo( DSIClient* client, DMMAmFmTunerControl_ArbitrationInfo* attribute_out, unsigned int timeoutMs );

/**
 * Synchronous attribute retrieval for 'rdsClockTime'.
 *
 * The caller is later responsible to clean up the attribute structure by calling the
 * appropriate cleanup function RdsClockTimeFree().
 *
 * @param attribute_out The structure where the attribute is stored in. Must not be NULL.
 * @param timeoutMs the wait timeout in milliseconds until the function returns.
 * @return 0 on success, -1 on error.
 */
int DMMAmFmTunerControl_GetAttributeRdsClockTime( DSIClient* client, DMMAmFmTunerControl_RdsClockTime* attribute_out, unsigned int timeoutMs );

/**
 * Synchronous attribute retrieval for 'powerSync'.
 *
 * The caller is later responsible to clean up the attribute structure by calling the
 * appropriate cleanup function UInt32sFree().
 *
 * @param attribute_out The structure where the attribute is stored in. Must not be NULL.
 * @param timeoutMs the wait timeout in milliseconds until the function returns.
 * @return 0 on success, -1 on error.
 */
int DMMAmFmTunerControl_GetAttributePowerSync( DSIClient* client, DMMTunerTypes_UInt32s* attribute_out, unsigned int timeoutMs );



DSI_EXTERN_C_END


#endif // DMMAMFMTUNERCONTROLCLIENT_H
