#ifndef DMMAMFMTUNERCONTROL_H
#define DMMAMFMTUNERCONTROL_H
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2015
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 20.5.2015
 */


#include "api/sys/dsi/pf/base/src/DSI.h"
#include "DMMTunerTypes.h"

DSI_EXTERN_C_BEGIN


// Version information

static const int DMMAmFmTunerControl_MAJOR_VERSION = 6 ;
static const int DMMAmFmTunerControl_MINOR_VERSION = 5 ;


/** ***************************************************************************
 *  DMMAmFmTunerControl
 *
 *  Project independent but tuner specific interface.
 *  This interface contains AM/FM/HD specific functionality which is not covered by any generic tuner interface.
 */
typedef enum
{
   /**
    * Set switch to enable/disable alternative frequency following. The current state is reflected by afSwitch attribute.
    */
   DMMAmFmTunerControl_UPD_ID_requestSetAfSwitch = DSI_REQUEST_ID_FIRST + 0, // 0x00000000

   /**
    * Set switch whether all alternative frequencies of one station shall be inserted into FM station list or not. The current state is reflected by multipleStationsSwitch attribute.
    */
   DMMAmFmTunerControl_UPD_ID_requestSetMultipleStationsSwitch = DSI_REQUEST_ID_FIRST + 1, // 0x00000001

   /**
    * Set desired regionalization mode. The current mode is reflected by regMode attribute.
    */
   DMMAmFmTunerControl_UPD_ID_requestSetRegMode = DSI_REQUEST_ID_FIRST + 2, // 0x00000002

   /**
    * Set new desired stereo mode. The current mode is reflected by stereoMode attribute.
    */
   DMMAmFmTunerControl_UPD_ID_requestSetStereoMode = DSI_REQUEST_ID_FIRST + 3, // 0x00000003

   /**
    * Set new desired HD mode. The current mode is reflected by hdMode attribute.
    */
   DMMAmFmTunerControl_UPD_ID_requestSetHdMode = DSI_REQUEST_ID_FIRST + 4, // 0x00000004

   /**
    * Set switch to enable/disable diagnosis mode. The current state is reflected by diagSwitch attribute. Different behavior for Tuner32 and OOTuner implemenation, refert to "enable" parameter.
    */
   DMMAmFmTunerControl_UPD_ID_requestSetDiagSwitch = DSI_REQUEST_ID_FIRST + 5, // 0x00000005

   /**
    * Select a specific test mode, resulting test data is sent via testData response (don't forget to set notification).
    */
   DMMAmFmTunerControl_UPD_ID_requestSetTestMode = DSI_REQUEST_ID_FIRST + 6, // 0x00000006

   /**
    * Send a PMBus command to the tuner device. Don't forget to set notifcation for pmBusCommand response in order to get the resulting message.
    */
   DMMAmFmTunerControl_UPD_ID_requestSendPmBusCommand = DSI_REQUEST_ID_FIRST + 7, // 0x00000007

   /**
    * Configure the seek/scan stop thresholds for all wavebands. The current settings can be queried  by getSeekSensitivity.
    */
   DMMAmFmTunerControl_UPD_ID_requestSetSeekSensitivity = DSI_REQUEST_ID_FIRST + 8, // 0x00000008

   /**
    * Get the current seek/scan thresholds via seekSensitivity response (don't forget to set notification).
    */
   DMMAmFmTunerControl_UPD_ID_requestGetSeekSensitivity = DSI_REQUEST_ID_FIRST + 9, // 0x00000009

   /**
    * Set blending mode.
    */
   DMMAmFmTunerControl_UPD_ID_requestSetHdBlending = DSI_REQUEST_ID_FIRST + 10, // 0x0000000A

   /**
    * Get the current blending mode via hdSwVersion response (don't forget to set notification).
    */
   DMMAmFmTunerControl_UPD_ID_requestGetHdBlending = DSI_REQUEST_ID_FIRST + 11, // 0x0000000B

   /**
    * Enable/disable HD calibration functionality.
    */
   DMMAmFmTunerControl_UPD_ID_requestSetHdCalibration = DSI_REQUEST_ID_FIRST + 12, // 0x0000000C

   /**
    * Get the current HD calibration mode via hdCalibration response (don't forget to set notification).
    */
   DMMAmFmTunerControl_UPD_ID_requestGetHdCalibration = DSI_REQUEST_ID_FIRST + 13, // 0x0000000D

   /**
    * Set RegionCode.
    */
   DMMAmFmTunerControl_UPD_ID_requestSetRegionCode = DSI_REQUEST_ID_FIRST + 14, // 0x0000000E

   /**
    * Get HD bit error rates
    */
   DMMAmFmTunerControl_UPD_ID_requestGetHdBer = DSI_REQUEST_ID_FIRST + 15, // 0x0000000F

   /**
    * Control (start / stop / reset) HD bit error measurement
    */
   DMMAmFmTunerControl_UPD_ID_requestControlHdBer = DSI_REQUEST_ID_FIRST + 16, // 0x00000010

   /**
    * OOTuner: Manipulate tuner engineering parameter (for experts only)
    */
   DMMAmFmTunerControl_UPD_ID_requestSetTunerParameter = DSI_REQUEST_ID_FIRST + 17, // 0x00000011

   /**
    * OOTuner: Get tuner engineering parameter
    */
   DMMAmFmTunerControl_UPD_ID_requestGetTunerParameter = DSI_REQUEST_ID_FIRST + 18, // 0x00000012

   /**
    * OOTuner: Manipulate tuner timing parameter (for experts only)
    */
   DMMAmFmTunerControl_UPD_ID_requestSetTunerTiming = DSI_REQUEST_ID_FIRST + 19, // 0x00000013

   /**
    * OOTuner: Get tuner timing parameter
    */
   DMMAmFmTunerControl_UPD_ID_requestGetTunerTiming = DSI_REQUEST_ID_FIRST + 20, // 0x00000014

   /**
    * Delete persistent data
    */
   DMMAmFmTunerControl_UPD_ID_requestDeletePersistentData = DSI_REQUEST_ID_FIRST + 21, // 0x00000015

   /**
    * Configure waveband settings for specific waveband, becomes active with next setRegionCode (see MSCs).
    */
   DMMAmFmTunerControl_UPD_ID_requestSetWavebandGrid = DSI_REQUEST_ID_FIRST + 22, // 0x00000016

   /**
    * Set new desired HD ball game mode. The current mode is reflected by hdBallGameMode attribute.
    */
   DMMAmFmTunerControl_UPD_ID_requestSetHdBallGameMode = DSI_REQUEST_ID_FIRST + 23, // 0x00000017

   /**
    * Internal: Assign/withdraw resource 
    */
   DMMAmFmTunerControl_UPD_ID_requestAssign = DSI_REQUEST_ID_FIRST + 24, // 0x00000018

   /**
    * Configure special coding set via TunerParameter and TunerTiming, becomes active with next setRegionCode (see MSCs).
    */
   DMMAmFmTunerControl_UPD_ID_requestSetSpecialCoding = DSI_REQUEST_ID_FIRST + 25, // 0x00000019

   /**
    * ONLY for projects without dedicated persistency component (using simple files system persistency instead): Store persistent data, caller has to wait for response before shutting down system.
    */
   DMMAmFmTunerControl_UPD_ID_requestStorePersistentData = DSI_REQUEST_ID_FIRST + 26, // 0x0000001A

   /**
    * The response of the tuner device for a PMBus command.
    */
   DMMAmFmTunerControl_UPD_ID_responsePmBusCommand = DSI_RESPONSE_ID_FIRST + 0, // 0x80000000

   /**
    * Raw test data sent by device if enabled via setTestMode.
    */
   DMMAmFmTunerControl_UPD_ID_responseTestData = DSI_RESPONSE_ID_FIRST + 1, // 0x80000001

   /**
    * The current seek sensitivity settings.
    */
   DMMAmFmTunerControl_UPD_ID_responseSeekSensitivity = DSI_RESPONSE_ID_FIRST + 2, // 0x80000002

   /**
    * The current blending mode.
    */
   DMMAmFmTunerControl_UPD_ID_responseHdBlending = DSI_RESPONSE_ID_FIRST + 3, // 0x80000003

   /**
    * The HD calibration state.
    */
   DMMAmFmTunerControl_UPD_ID_responseHdCalibration = DSI_RESPONSE_ID_FIRST + 4, // 0x80000004

   /**
    * The HD bit error rates
    */
   DMMAmFmTunerControl_UPD_ID_responseHdBer = DSI_RESPONSE_ID_FIRST + 5, // 0x80000005

   /**
    * HD status data
    */
   DMMAmFmTunerControl_UPD_ID_informationHdStatus = DSI_RESPONSE_ID_FIRST + 6, // 0x80000006

   /**
    * HD performance data
    */
   DMMAmFmTunerControl_UPD_ID_informationHdPerformance = DSI_RESPONSE_ID_FIRST + 7, // 0x80000007

   /**
    * HD call to action information for decrypted services
    */
   DMMAmFmTunerControl_UPD_ID_informationHdCallToAction = DSI_RESPONSE_ID_FIRST + 8, // 0x80000008

   /**
    * HD program service data changed (trigger)
    */
   DMMAmFmTunerControl_UPD_ID_informationHdPsdChanged = DSI_RESPONSE_ID_FIRST + 9, // 0x80000009

   /**
    * Token for HD iTunes tagging
    */
   DMMAmFmTunerControl_UPD_ID_informationHdTagging = DSI_RESPONSE_ID_FIRST + 10, // 0x8000000A

   /**
    * Response of set/getTunerParameter
    */
   DMMAmFmTunerControl_UPD_ID_responseTunerParameter = DSI_RESPONSE_ID_FIRST + 11, // 0x8000000B

   /**
    * Response of set/getTunerTiming
    */
   DMMAmFmTunerControl_UPD_ID_responseTunerTiming = DSI_RESPONSE_ID_FIRST + 12, // 0x8000000C

   /**
    * An HD image (station logo or cover art) is available.
    * !!! Deprecated: Use DMMTunerStationImage instead !!!
    * 
    * DEPRECATED: Use DMMTunerStationImage instead
    */
   DMMAmFmTunerControl_UPD_ID_informationHdImage = DSI_RESPONSE_ID_FIRST + 13, // 0x8000000D

   /**
    * Data storing complete.
    */
   DMMAmFmTunerControl_UPD_ID_responseStorePersistentData = DSI_RESPONSE_ID_FIRST + 14, // 0x8000000E

   /**
    * True: Frequency can be automatically switched to better alternative frequency.
    * False: Stay on tuned frequency.
    */
   DMMAmFmTunerControl_UPD_ID_afSwitch = DSI_ATTRIBUTE_ID_FIRST + 0, // 0xC0000000

   /**
    * True: Insert all alternative frequencies of one station into FM station list.
    * False: Only one station per PI.
    */
   DMMAmFmTunerControl_UPD_ID_multipleStationsSwitch = DSI_ATTRIBUTE_ID_FIRST + 1, // 0xC0000001

   /**
    * The currently adjusted regionalization mode (how to handle regionalized stations).
    */
   DMMAmFmTunerControl_UPD_ID_regMode = DSI_ATTRIBUTE_ID_FIRST + 2, // 0xC0000002

   /**
    * The currently adjusted stereo mode state.
    */
   DMMAmFmTunerControl_UPD_ID_stereoMode = DSI_ATTRIBUTE_ID_FIRST + 3, // 0xC0000003

   /**
    * The current stereo state.
    */
   DMMAmFmTunerControl_UPD_ID_stereoState = DSI_ATTRIBUTE_ID_FIRST + 4, // 0xC0000004

   /**
    * The currently adjusted HD mode.
    */
   DMMAmFmTunerControl_UPD_ID_hdMode = DSI_ATTRIBUTE_ID_FIRST + 5, // 0xC0000005

   /**
    * The current device state. Requests can only be performed if the device is ready. Reasons for a not ready devices are e.g. startup phase, undervoltage etc..
    */
   DMMAmFmTunerControl_UPD_ID_deviceState = DSI_ATTRIBUTE_ID_FIRST + 6, // 0xC0000006

   /**
    * True: Diagnosis mode: diversity off and no background activity
    * False: Standard mode
    */
   DMMAmFmTunerControl_UPD_ID_diagSwitch = DSI_ATTRIBUTE_ID_FIRST + 7, // 0xC0000007

   /**
    * Waveband limits and step widths. Not supported wavebands have stepWidth=0.  Use Waveband enum for access.
    */
   DMMAmFmTunerControl_UPD_ID_wavebandGrids = DSI_ATTRIBUTE_ID_FIRST + 8, // 0xC0000008

   /**
    * HW error indication
    */
   DMMAmFmTunerControl_UPD_ID_hwError = DSI_ATTRIBUTE_ID_FIRST + 9, // 0xC0000009

   /**
    * Hardware and firmware versions (for index within vector refer to enum VersionIndex).
    */
   DMMAmFmTunerControl_UPD_ID_versions = DSI_ATTRIBUTE_ID_FIRST + 10, // 0xC000000A

   /**
    * The coding data
    */
   DMMAmFmTunerControl_UPD_ID_codingData = DSI_ATTRIBUTE_ID_FIRST + 11, // 0xC000000B

   /**
    * The currently adjusted HD ball game mode.
    */
   DMMAmFmTunerControl_UPD_ID_hdBallGameMode = DSI_ATTRIBUTE_ID_FIRST + 12, // 0xC000000C

   /**
    * Tuner status information
    */
   DMMAmFmTunerControl_UPD_ID_tunerStateAttr = DSI_ATTRIBUTE_ID_FIRST + 13, // 0xC000000D

   /**
    * Internal: Arbitration information of shared resources 
    */
   DMMAmFmTunerControl_UPD_ID_arbitrationInfo = DSI_ATTRIBUTE_ID_FIRST + 14, // 0xC000000E

   /**
    * RDS clock time
    */
   DMMAmFmTunerControl_UPD_ID_rdsClockTime = DSI_ATTRIBUTE_ID_FIRST + 15, // 0xC000000F

   /**
    * List of power sync frequencies.  The specific order and meaning of the entries is defined by a project specific enum PowerSyncIndex within DMMAmFmTunerControlTypes.
    */
   DMMAmFmTunerControl_UPD_ID_powerSync = DSI_ATTRIBUTE_ID_FIRST + 16, // 0xC0000010

   /**
    * Implementation version
    */
   DMMAmFmTunerControl_UPD_ID_implVersion = DSI_ATTRIBUTE_ID_LAST - 1,

   /**
    * Nothing
    */
   DMMAmFmTunerControl_UPD_ID_NOP = DSI_ATTRIBUTE_ID_LAST

} DMMAmFmTunerControl_UpdateIdEnum ;




/** ***************************************************************************
 * Possible device states
 */
typedef enum
{
   /*
    * Device not ready
    */
   DMMAmFmTunerControl_DEVICE_NOT_READY,
   /*
    * Device is ready
    */
   DMMAmFmTunerControl_DEVICE_READY,

} DMMAmFmTunerControl_DeviceState ;


/** ***************************************************************************
 * The different regionalization (REG) modes
 */
typedef enum
{
   /*
    * Undefined
    */
   DMMAmFmTunerControl_REGMODE_UNDEF = -1, // -1
   /*
    * Regionalization off, tuner may change between regionalized stations
    */
   DMMAmFmTunerControl_REGMODE_OFF,
   /*
    * Similar to REGMODE_ON but tuner stays at disturbed frequency for a short while
    */
   DMMAmFmTunerControl_REGMODE_AUTO_FAST,
   /*
    * Similar to REGMODE_ON but tuner stays at disturbed frequency for a while
    */
   DMMAmFmTunerControl_REGMODE_AUTO_NORMAL,
   /*
    * Similar to REGMODE_ON but tuner stays at disturbed frequency for a longer while
    */
   DMMAmFmTunerControl_REGMODE_AUTO_SLOW,
   /*
    * Regionalization on, tuner does NOT change between regionalized stations
    */
   DMMAmFmTunerControl_REGMODE_ON,

} DMMAmFmTunerControl_RegMode ;


/** ***************************************************************************
 * Available stereo modes
 */
typedef enum
{
   /*
    * Mono mode
    */
   DMMAmFmTunerControl_STEREOMODE_MONO,
   /*
    * Determine stereo/mono mode automatically
    */
   DMMAmFmTunerControl_STEREOMODE_AUTOMATIC,
   /*
    * Stereo mode
    */
   DMMAmFmTunerControl_STEREOMODE_STEREO,

} DMMAmFmTunerControl_StereoMode ;


/** ***************************************************************************
 * Available HD modes
 */
typedef enum
{
   /*
    * Alway analog no blending
    */
   DMMAmFmTunerControl_HDMODE_ANALOG,
   /*
    * Automatic blending between analog and digital
    */
   DMMAmFmTunerControl_HDMODE_AUTOMATIC,
   /*
    * Automatic blending between analog and digital for AM but no blending for FM
    */
   DMMAmFmTunerControl_HDMODE_AUTOMATIC_AM,
   /*
    * Automatic blending between analog and digital for FM but no blending for AM
    */
   DMMAmFmTunerControl_HDMODE_AUTOMATIC_FM,

} DMMAmFmTunerControl_HdMode ;


/** ***************************************************************************
 * All wavebands
 */
typedef enum
{
   /*
    * FM
    */
   DMMAmFmTunerControl_WAVEBAND_FM,
   /*
    * LW
    */
   DMMAmFmTunerControl_WAVEBAND_LW,
   /*
    * MW
    */
   DMMAmFmTunerControl_WAVEBAND_MW,
   /*
    * SW
    */
   DMMAmFmTunerControl_WAVEBAND_SW,
   /*
    * US: WB, Japan: TRF
    */
   DMMAmFmTunerControl_WAVEBAND_WB,

} DMMAmFmTunerControl_Waveband ;


/** ***************************************************************************
 * The possible modes for blending between analog and digital (HD) audio.
 */
typedef enum
{
   /*
    * No blending, always output analog audio
    */
   DMMAmFmTunerControl_HDBLENDING_ALWAYS_ANALOG,
   /*
    * Blend to analog the earliest
    */
   DMMAmFmTunerControl_HDBLENDING_EARLIEST,
   /*
    * Blend to analog the second earliest
    */
   DMMAmFmTunerControl_HDBLENDING_SECOND_EARLIEST,
   /*
    * Blend to analog the third earliest
    */
   DMMAmFmTunerControl_HDBLENDING_THIRD_EARLIEST,
   /*
    * Stay in digital the longest
    */
   DMMAmFmTunerControl_HDBLENDING_LONGEST,
   /*
    * No blending, always output digital audio
    */
   DMMAmFmTunerControl_HDBLENDING_ALWAYS_DIGITAL,

} DMMAmFmTunerControl_HdBlending ;


/** ***************************************************************************
 * The possible region codes
 */
typedef enum
{
   /*
    * Region code for Europe
    */
   DMMAmFmTunerControl_REGION_EUROPE,
   /*
    * Region code for North America
    */
   DMMAmFmTunerControl_REGION_NORTH_AMERICA,
   /*
    * Region code for South America
    */
   DMMAmFmTunerControl_REGION_SOUTH_AMERICA,
   /*
    * Region code for Canada
    */
   DMMAmFmTunerControl_REGION_CANADA,
   /*
    * Region code for Asia
    */
   DMMAmFmTunerControl_REGION_ASIA,
   /*
    * Region code for Japan
    */
   DMMAmFmTunerControl_REGION_JAPAN,
   /*
    * Region code for South Korea
    */
   DMMAmFmTunerControl_REGION_SOUTH_KOREA,
   /*
    * Region code for China
    */
   DMMAmFmTunerControl_REGION_CHINA,
   /*
    * Region code for Australia
    */
   DMMAmFmTunerControl_REGION_AUSTRALIA,
   /*
    * Region code for South Africa
    */
   DMMAmFmTunerControl_REGION_SOUTH_AFRICA,
   /*
    * Region code for Oceania
    */
   DMMAmFmTunerControl_REGION_OCEANIA,
   /*
    * Region code for rest of world
    */
   DMMAmFmTunerControl_REGION_ROW,
   /*
    * Region code for Brazil
    */
   DMMAmFmTunerControl_REGION_BRAZIL,
   /*
    * Region code for Middle Est
    */
   DMMAmFmTunerControl_REGION_MIDDLE_EAST,
   /*
    * Region code for India
    */
   DMMAmFmTunerControl_REGION_INDIA,
   /*
    * Region code for Russia
    */
   DMMAmFmTunerControl_REGION_RUSSIA,

} DMMAmFmTunerControl_RegionCode ;


/** ***************************************************************************
 * Different test modes provided by the tuner device
 */
typedef enum
{
   /*
    * TestMode off, switch off TestMode
    */
   DMMAmFmTunerControl_TESTMODE_OFF = 0, // 0
   /*
    * Test tmode A
    */
   DMMAmFmTunerControl_TESTMODE_A,
   /*
    * Test tmode B, index needed
    */
   DMMAmFmTunerControl_TESTMODE_B,
   /*
    * Test tmode C
    */
   DMMAmFmTunerControl_TESTMODE_C,
   /*
    * Test tmode D
    */
   DMMAmFmTunerControl_TESTMODE_D,
   /*
    * Test tmode E, index needed
    */
   DMMAmFmTunerControl_TESTMODE_E,
   /*
    * Test tmode F
    */
   DMMAmFmTunerControl_TESTMODE_F,
   /*
    * Test tmode M
    */
   DMMAmFmTunerControl_TESTMODE_M,
   /*
    * Test tmode Q
    */
   DMMAmFmTunerControl_TESTMODE_Q,
   /*
    * Test tmode R
    */
   DMMAmFmTunerControl_TESTMODE_R,
   /*
    * Test mode T (TMC)
    */
   DMMAmFmTunerControl_TESTMODE_T,
   /*
    * Test tmode V
    */
   DMMAmFmTunerControl_TESTMODE_V,
   /*
    * Test tmode X, project specific
    */
   DMMAmFmTunerControl_TESTMODE_X,
   /*
    * Test mode O, only available with OO-Tuner (new pool)
    */
   DMMAmFmTunerControl_TESTMODE_O,

} DMMAmFmTunerControl_TestMode ;


/** ***************************************************************************
 * Bitmask values for TestModeO
 */
typedef enum
{
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_OFF = 0, // 0x00000000
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_HW1_BASIC = 1, // 0x00000001
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_HW1_ENHANCED = 2, // 0x00000002
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_HW1_TRAFFIC = 4, // 0x00000004
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_HW1_COMMON = 8, // 0x00000008
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_HW2_BASIC = 16, // 0x00000010
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_HW2_ENHANCED = 32, // 0x00000020
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_HW2_TRAFFIC = 64, // 0x00000040
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_HW3_BASIC = 128, // 0x00000080
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_HW3_ENHANCED = 256, // 0x00000100
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_HW3_TRAFFIC = 512, // 0x00000200
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_HW4_BASIC = 1024, // 0x000000400
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_HW4_ENHANCED = 2048, // 0x00000800
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_HW4_TRAFFIC = 4096, // 0x00001000
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_FM_AF_LIST = 8192, // 0x00002000
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_AM_FM_STATION_LIST = 16384, // 0x00004000
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_TMC_ASSIGNMENTS = 32768, // 0x00008000
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_TMC_FILTER = 65536, // 0x00010000
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_TMC_LIST = 131072, // 0x00020000
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_HD_HW1_DATA = 262144, // 0x00040000
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_HD_HW2_DATA = 524288, // 0x00080000
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_HD_BER = 1048576, // 0x00100000
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_HD_STATUS = 2097152, // 0x00200000
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_HD_PERFORMANCE = 4194304, // 0x00400000
   /*
    * DESCRIPTION MISSING
    */
   DMMAmFmTunerControl_TMO_HD_PSD_DATA = 8388608, // 0x00800000

} DMMAmFmTunerControl_TestModeO ;


/** ***************************************************************************
 * Available diversity modes
 */
typedef enum
{
   /*
    * For response only; no information available, wrong mode
    */
   DMMAmFmTunerControl_DIVERSITYMODE_UNDEF = -1, // -1
   /*
    * Background RDS: Tuner1 tuned to foreground frequency using fixed antenna, 
    * tuner2 used for background scanning
    */
   DMMAmFmTunerControl_DIVERSITYMODE_BACKGROUND_RDS,
   /*
    * Scanning antenna diversity: Tuner1 is tuned to foreground frequency selecting 
    * dynamically the best of two antenna outputs, tuner2 used for background scanning
    */
   DMMAmFmTunerControl_DIVERSITYMODE_SCANNING_ANTENNA,
   /*
    * Phase diversity: Tuner1 and tuner2 are tuned to same foreground frequency to 
    * improve audio quality.
    */
   DMMAmFmTunerControl_DIVERSITYMODE_PHASE,

} DMMAmFmTunerControl_DiversityMode ;


/** ***************************************************************************
 * DESCRIPTION MISSING
 */
typedef enum
{
   /*
    * No failure detected.
    */
   DMMAmFmTunerControl_ANTENNA_OK,
   /*
    * Connection open circuit detected.
    */
   DMMAmFmTunerControl_ANTENNA_OPEN,
   /*
    * Connection short-circuit to ground.
    */
   DMMAmFmTunerControl_ANTENNA_SHORTCIRCUIT_GND,
   /*
    * Connection short-circuit to battery voltage.
    */
   DMMAmFmTunerControl_ANTENNA_SHORTCIRCUIT_UBATT,
   /*
    * Connection current too low.
    */
   DMMAmFmTunerControl_ANTENNA_CURRENT_TOO_LOW,
   /*
    * Connection current too high.
    */
   DMMAmFmTunerControl_ANTENNA_CURRENT_TOO_HIGH,
   /*
    * This connection is not supported.
    */
   DMMAmFmTunerControl_ANTENNA_NOT_AVAILABLE,
   /*
    * Out of range indication, calculated physical value is out of defined scope.
    */
   DMMAmFmTunerControl_ANTENNA_OUT_OF_RANGE,
   /*
    * Connection not checked yet.
    */
   DMMAmFmTunerControl_ANTENNA_NOT_CHECKED,
   /*
    * Antenna not connected to antenna amplifier.
    */
   DMMAmFmTunerControl_ANTENNA_MISSING,
   /*
    * Antenna overtemperature.
    */
   DMMAmFmTunerControl_ANTENNA_OVERTEMP,
   /*
    * Undefined value.
    */
   DMMAmFmTunerControl_ANTENNA_UNDEF,

} DMMAmFmTunerControl_AntennaState ;


/** ***************************************************************************
 * Additional coding flags.
 */
typedef enum
{
   /*
    * No active coding flags at all.
    */
   DMMAmFmTunerControl_COD_NONE = 0, // 0x0000
   /*
    * Activate HD (if supported by HW).
    */
   DMMAmFmTunerControl_COD_HD = 1, // 0x0001
   /*
    * Use 75us deemphasis
    */
   DMMAmFmTunerControl_COD_DEEMPHASIS_75 = 2, // 0x0002
   /*
    * AF off
    */
   DMMAmFmTunerControl_COD_AF_OFF = 4, // 0x0004
   /*
    * Don't provide LW
    */
   DMMAmFmTunerControl_COD_NO_LW = 8, // 0x0008
   /*
    * Don't provide MW
    */
   DMMAmFmTunerControl_COD_NO_MW = 16, // 0x0010
   /*
    * Don't provide SW
    */
   DMMAmFmTunerControl_COD_NO_SW = 32, // 0x0020
   /*
    * Provide station list sorted by frequency
    */
   DMMAmFmTunerControl_COD_FREQ_SORTED = 64, // 0x0040
   /*
    * Provide no TMC data
    */
   DMMAmFmTunerControl_COD_NO_TMC = 128, // 0x0080
   /*
    * Provide no RT+ data
    */
   DMMAmFmTunerControl_COD_NO_RTP = 256, // 0x0100
   /*
    * Station list contains all station even stations with same PI. 
    * Station name is assigned to frequency and not to PI anymore. 
    * Several stations with same PI but different PS are possible. 
    * AF switch is disabled per default and cannot be enabled.
    * Multiple station switch is enabled per default and cannot be disabled.
    * All PIs from 0x0000 to 0xFFFF are valid.
    * 
    */
   DMMAmFmTunerControl_COD_PI_IGNORE = 512, // 0x0200
   /*
    * Consider full HD stations in list
    */
   DMMAmFmTunerControl_COD_HDLIST_FULL = 1024, // 0x0400
   /*
    * Disable RDS (project specific meaning)
    */
   DMMAmFmTunerControl_COD_NO_RDS = 2048, // 0x0800
   /*
    * DAB hardware (e.g. to be considered for antenna diagnostics)
    */
   DMMAmFmTunerControl_COD_DAB = 4096, // 0x1000
   /*
    * SDARS hardware (e.g. to be considered for antenna diagnostics)
    */
   DMMAmFmTunerControl_COD_SDARS = 8192, // 0x2000
   /*
    * Use FM antenna instead of default AMFM. Do not use this flag in combination with other COD_HDANT flags!!
    */
   DMMAmFmTunerControl_COD_HDANT_FM = 16384, // 0x4000
   /*
    * Use antenna with best reception instead of default AMFM. Do not use this flag in combination with other COD_HDANT flags!!
    */
   DMMAmFmTunerControl_COD_HDANT_SWITCH = 32768, // 0x8000
   /*
    * Use both antennas concurrently in MRC mode instead of default AMFM. Do not use this flag in combination with other COD_HDANT flags!!
    */
   DMMAmFmTunerControl_COD_HDANT_MRC = 49152, // 0xC000
   /*
    * Ignore flag settings (don't care).
    */
   DMMAmFmTunerControl_COD_IGNORE = 65535, // 0xFFFF

} DMMAmFmTunerControl_CodingFlags ;


/** ***************************************************************************
 * Indices of versions attribute (check for length !!)
 */
typedef enum
{
   /*
    * Foreground tuner
    */
   DMMAmFmTunerControl_VER_FG,
   /*
    * First front-end of foreground tuner
    */
   DMMAmFmTunerControl_VER_FG_FE1,
   /*
    * Second front-end of foreground tuner
    */
   DMMAmFmTunerControl_VER_FG_FE2,
   /*
    * First background tuner
    */
   DMMAmFmTunerControl_VER_BG1,
   /*
    * Second background tuner
    */
   DMMAmFmTunerControl_VER_BG2,
   /*
    * HD hardware
    */
   DMMAmFmTunerControl_VER_HD_HW,
   /*
    * HD firmware
    */
   DMMAmFmTunerControl_VER_HD_FW,
   /*
    * HD radio ID
    */
   DMMAmFmTunerControl_VER_HD_ID,
   /*
    * VICS firmware
    */
   DMMAmFmTunerControl_VER_VICS_FW,

} DMMAmFmTunerControl_VersionIndex ;


/** ***************************************************************************
 * HD availability mode
 */
typedef enum
{
   /*
    * HD availability measurement disabled
    */
   DMMAmFmTunerControl_HDAVAIL_OFF,
   /*
    * HD availability measurement enabled but no updates via information messages
    */
   DMMAmFmTunerControl_HDAVAIL_ENABLE_NO_UPDATE,
   /*
    * HD availability measurement enabled and cyclic updates via information messages
    */
   DMMAmFmTunerControl_HDAVAIL_ENABLE_UPDATE,
   /*
    * Reset all HD availability measurements (not used in attribute)
    */
   DMMAmFmTunerControl_HDAVAIL_RESET_ALL,
   /*
    * Reset current HD availability measurement (not used in attribute)
    */
   DMMAmFmTunerControl_HDAVAIL_RESET_CURRENT,

} DMMAmFmTunerControl_HdAvailMode ;


/** ***************************************************************************
 * HD BER mode
 */
typedef enum
{
   /*
    * HD BER mode off
    */
   DMMAmFmTunerControl_HDBER_OFF,
   /*
    * HD BER mode on
    */
   DMMAmFmTunerControl_HDBER_ON,
   /*
    * Reset HD BER measurement (on/off state not affected)
    */
   DMMAmFmTunerControl_HDBER_RESET,

} DMMAmFmTunerControl_HdBerMode ;


/** ***************************************************************************
 * HD image type
 */
typedef enum
{
   /*
    * Station logo
    */
   DMMAmFmTunerControl_HDIMAGE_STATION_LOGO,
   /*
    * Cover art
    */
   DMMAmFmTunerControl_HDIMAGE_COVER_ART,

} DMMAmFmTunerControl_HdImageType ;


/** ***************************************************************************
 * HD image MIME type
 */
typedef enum
{
   /*
    * Unknown format
    */
   DMMAmFmTunerControl_HDMIME_UNKNOWN,
   /*
    * Image in JPEG format
    */
   DMMAmFmTunerControl_HDMIME_JPEG,
   /*
    * Image in PNG format
    */
   DMMAmFmTunerControl_HDMIME_PNG,

} DMMAmFmTunerControl_HdMimeType ;


/** ***************************************************************************
 * Persistence scope
 */
typedef enum
{
   /*
    * All persistent data
    */
   DMMAmFmTunerControl_PSCOPE_ALL,

} DMMAmFmTunerControl_PersistenceScope ;


/** ***************************************************************************
 * Available HD ball game modes
 */
typedef enum
{
   /*
    * always digital
    */
   DMMAmFmTunerControl_HDBGMODE_ALWAYS_DIGITAL,
   /*
    * always analog
    */
   DMMAmFmTunerControl_HDBGMODE_ALWAYS_ANALOG,

} DMMAmFmTunerControl_HdBallGameMode ;


/** ***************************************************************************
 * Shared resources
 */
typedef enum
{
   /*
    * Shared front-end
    */
   DMMAmFmTunerControl_SR_FRONTEND,
   /*
    * Shared front-end background
    */
   DMMAmFmTunerControl_SR_FRONTEND_BG,

} DMMAmFmTunerControl_SharedResources ;

// forward declaration(s)
struct _DMMAmFmTunerControl_WavebandGrids ;
struct _DMMAmFmTunerControl_StopLevels ;
struct _DMMAmFmTunerControl_HdBers ;
struct _DMMAmFmTunerControl_Strings ;
struct _DMMAmFmTunerControl_TunerParameters ;
struct _DMMAmFmTunerControl_TunerTimings ;

/** ***************************************************************************
 * Information about one waveband (frequency limits, frequency step width, frequency unit).
 */
typedef struct _DMMAmFmTunerControl_WavebandGrid
{
   /**
    * The lower frequency limit.
    */
   unsigned int lowerLimit ;

   /**
    * The upper frequency limit.
    */
   unsigned int upperLimit ;

   /**
    * The frequency step width. Equals zero if waveband is not available.
    */
   unsigned int stepWidth ;

   /**
    * Small step with [kHz], only valid for manual tunes 
    */
   unsigned int stepSmall ;

} DMMAmFmTunerControl_WavebandGrid ;

#define DMMAmFmTunerControl_WavebandGrid_Init( p ) memset( p, 0, sizeof(*p))
#define DMMAmFmTunerControl_WavebandGrid_Free( p ) // don't do anything

void DSIReadDMMAmFmTunerControl_WavebandGrid( DSIStream *stream, DMMAmFmTunerControl_WavebandGrid *p ) ;
void DSIWriteDMMAmFmTunerControl_WavebandGrid( DSIStream *stream, const DMMAmFmTunerControl_WavebandGrid *p ) ;

/** ***************************************************************************
 * A WavebandData vector.  Use Waveband enum for access.
 */
DSIVectorTypeDef( DMMAmFmTunerControl_WavebandGrids, DMMAmFmTunerControl_WavebandGrid ) ;

// Free the vector related data
#define DMMAmFmTunerControl_WavebandGrids_Free( p ) DSIVectorFree( *p )
void DMMAmFmTunerControl_WavebandGrids_Copy( DMMAmFmTunerControl_WavebandGrids* lhs, const DMMAmFmTunerControl_WavebandGrids* rhs );

void DSIReadDMMAmFmTunerControl_WavebandGrids( DSIStream *stream, DMMAmFmTunerControl_WavebandGrids *p ) ;
void DSIWriteDMMAmFmTunerControl_WavebandGrids( DSIStream *stream, const DMMAmFmTunerControl_WavebandGrids *p ) ;

/** ***************************************************************************
 * Stop level for seek/scan sensitivity.
 */
typedef struct _DMMAmFmTunerControl_StopLevel
{
   /**
    * Stop level for seek.
    */
   unsigned char seek ;

   /**
    * Stop level for scan.
    */
   unsigned char scan ;

} DMMAmFmTunerControl_StopLevel ;

#define DMMAmFmTunerControl_StopLevel_Init( p ) memset( p, 0, sizeof(*p))
#define DMMAmFmTunerControl_StopLevel_Free( p ) // don't do anything

void DSIReadDMMAmFmTunerControl_StopLevel( DSIStream *stream, DMMAmFmTunerControl_StopLevel *p ) ;
void DSIWriteDMMAmFmTunerControl_StopLevel( DSIStream *stream, const DMMAmFmTunerControl_StopLevel *p ) ;

/** ***************************************************************************
 * List of seek/scan stop levels (one list entry for each waveband). Use Waveband enum for access.
 */
DSIVectorTypeDef( DMMAmFmTunerControl_StopLevels, DMMAmFmTunerControl_StopLevel ) ;

// Free the vector related data
#define DMMAmFmTunerControl_StopLevels_Free( p ) DSIVectorFree( *p )
void DMMAmFmTunerControl_StopLevels_Copy( DMMAmFmTunerControl_StopLevels* lhs, const DMMAmFmTunerControl_StopLevels* rhs );

void DSIReadDMMAmFmTunerControl_StopLevels( DSIStream *stream, DMMAmFmTunerControl_StopLevels *p ) ;
void DSIWriteDMMAmFmTunerControl_StopLevels( DSIStream *stream, const DMMAmFmTunerControl_StopLevels *p ) ;

/** ***************************************************************************
 * HD bit error rate
 */
typedef struct _DMMAmFmTunerControl_HdBer
{
   /**
    * Mantissa
    */
   unsigned char mantissa ;

   /**
    * Exponent
    */
   unsigned char exponent ;

   /**
    * Number of bits in error
    */
   unsigned int number ;

} DMMAmFmTunerControl_HdBer ;

#define DMMAmFmTunerControl_HdBer_Init( p ) memset( p, 0, sizeof(*p))
#define DMMAmFmTunerControl_HdBer_Free( p ) // don't do anything

void DSIReadDMMAmFmTunerControl_HdBer( DSIStream *stream, DMMAmFmTunerControl_HdBer *p ) ;
void DSIWriteDMMAmFmTunerControl_HdBer( DSIStream *stream, const DMMAmFmTunerControl_HdBer *p ) ;

/** ***************************************************************************
 * HD bit error rate values
 */
DSIVectorTypeDef( DMMAmFmTunerControl_HdBers, DMMAmFmTunerControl_HdBer ) ;

// Free the vector related data
#define DMMAmFmTunerControl_HdBers_Free( p ) DSIVectorFree( *p )
void DMMAmFmTunerControl_HdBers_Copy( DMMAmFmTunerControl_HdBers* lhs, const DMMAmFmTunerControl_HdBers* rhs );

void DSIReadDMMAmFmTunerControl_HdBers( DSIStream *stream, DMMAmFmTunerControl_HdBers *p ) ;
void DSIWriteDMMAmFmTunerControl_HdBers( DSIStream *stream, const DMMAmFmTunerControl_HdBers *p ) ;

/** ***************************************************************************
 * Test mode A data
 */
typedef struct _DMMAmFmTunerControl_TestModeA
{
   /**
    * DESCRIPTION MISSING
    */
   unsigned short frequency ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned char fieldStrength ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned char quality ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned short bestAF ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned char bestAFFieldStrength ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned char bestAFQuality ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned char antSens ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned char iSens ;

} DMMAmFmTunerControl_TestModeA ;

#define DMMAmFmTunerControl_TestModeA_Init( p ) memset( p, 0, sizeof(*p))
#define DMMAmFmTunerControl_TestModeA_Free( p ) // don't do anything

void DSIReadDMMAmFmTunerControl_TestModeA( DSIStream *stream, DMMAmFmTunerControl_TestModeA *p ) ;
void DSIWriteDMMAmFmTunerControl_TestModeA( DSIStream *stream, const DMMAmFmTunerControl_TestModeA *p ) ;

/** ***************************************************************************
 * Test mode T data
 */
typedef struct _DMMAmFmTunerControl_TestModeT
{
   /**
    * DESCRIPTION MISSING
    */
   unsigned short filter0PI ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned short filter1PI ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned short filter2PI ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned short filter3PI ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned short tuner1freq ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned short tuner2freq ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned short tuner3freq ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned short tuner4freq ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned short tuner1ObserveFreq ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned short tuner1ObservePI ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned short tuner2ObserveFreq ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned short tuner2ObservePI ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned short tuner3ObserveFreq ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned short tuner3ObservePI ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned short tuner4ObserveFreq ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned short tuner4ObservePI ;

} DMMAmFmTunerControl_TestModeT ;

#define DMMAmFmTunerControl_TestModeT_Init( p ) memset( p, 0, sizeof(*p))
#define DMMAmFmTunerControl_TestModeT_Free( p ) // don't do anything

void DSIReadDMMAmFmTunerControl_TestModeT( DSIStream *stream, DMMAmFmTunerControl_TestModeT *p ) ;
void DSIWriteDMMAmFmTunerControl_TestModeT( DSIStream *stream, const DMMAmFmTunerControl_TestModeT *p ) ;

/** ***************************************************************************
 * HD status data
 */
typedef struct _DMMAmFmTunerControl_HdStatus
{
   /**
    * DESCRIPTION MISSING
    */
   unsigned char primaryServiceMode ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned char acquisitionStatus ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned char sisCrcStatus ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned char digitalAudioAcquired ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned char txBlendEnabled ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned char codecMode ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned char txDigitalAudioGain ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned char txBlendCtrlStatus ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned short qualityIndicator ;

} DMMAmFmTunerControl_HdStatus ;

#define DMMAmFmTunerControl_HdStatus_Init( p ) memset( p, 0, sizeof(*p))
#define DMMAmFmTunerControl_HdStatus_Free( p ) // don't do anything

void DSIReadDMMAmFmTunerControl_HdStatus( DSIStream *stream, DMMAmFmTunerControl_HdStatus *p ) ;
void DSIWriteDMMAmFmTunerControl_HdStatus( DSIStream *stream, const DMMAmFmTunerControl_HdStatus *p ) ;

/** ***************************************************************************
 * HD performance data
 */
typedef struct _DMMAmFmTunerControl_HdPerformance
{
   /**
    * DESCRIPTION MISSING
    */
   unsigned short sisFrameAcquisitionTime ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned short audioAcquisitionTime ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned char signalToNoiseRatio ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned short analogTime ;

} DMMAmFmTunerControl_HdPerformance ;

#define DMMAmFmTunerControl_HdPerformance_Init( p ) memset( p, 0, sizeof(*p))
#define DMMAmFmTunerControl_HdPerformance_Free( p ) // don't do anything

void DSIReadDMMAmFmTunerControl_HdPerformance( DSIStream *stream, DMMAmFmTunerControl_HdPerformance *p ) ;
void DSIWriteDMMAmFmTunerControl_HdPerformance( DSIStream *stream, const DMMAmFmTunerControl_HdPerformance *p ) ;

/** ***************************************************************************
 * Hardware error indication
 */
typedef struct _DMMAmFmTunerControl_HwError
{
   /**
    * HW error state of AM/FM tuner 1a
    */
   unsigned int amfm1a ;

   /**
    * HW error state of AM/FM tuner 1b
    */
   unsigned int amfm1b ;

   /**
    * HW error state of AM/FM tuner 2
    */
   unsigned int amfm2 ;

   /**
    * HW error state of AM/FM tuner 3
    */
   unsigned int amfm3 ;

   /**
    * HW error state of HD tuner 1
    */
   unsigned int hd1 ;

   /**
    * HW error state of HD tuner 2
    */
   unsigned int hd2 ;

   /**
    * HW error state of DARC tuner
    */
   unsigned int darc ;

} DMMAmFmTunerControl_HwError ;

#define DMMAmFmTunerControl_HwError_Init( p ) memset( p, 0, sizeof(*p))
#define DMMAmFmTunerControl_HwError_Free( p ) // don't do anything

void DSIReadDMMAmFmTunerControl_HwError( DSIStream *stream, DMMAmFmTunerControl_HwError *p ) ;
void DSIWriteDMMAmFmTunerControl_HwError( DSIStream *stream, const DMMAmFmTunerControl_HwError *p ) ;

/** ***************************************************************************
 * Vector of strings
 */
DSIVectorTypeDef( DMMAmFmTunerControl_Strings, char* ) ;

// Free the vector related data
void DMMAmFmTunerControl_Strings_Free( DMMAmFmTunerControl_Strings *p );
void DMMAmFmTunerControl_Strings_Copy( DMMAmFmTunerControl_Strings* lhs, const DMMAmFmTunerControl_Strings* rhs );

void DSIReadDMMAmFmTunerControl_Strings( DSIStream *stream, DMMAmFmTunerControl_Strings *p ) ;
void DSIWriteDMMAmFmTunerControl_Strings( DSIStream *stream, const DMMAmFmTunerControl_Strings *p ) ;

/** ***************************************************************************
 * HD audio blending filter (waveband depending)
 */
typedef struct _DMMAmFmTunerControl_HdAudioFilterBand
{
   /**
    * Analog cutoff frequency [Hz]
    */
   short cutoffAnalog ;

   /**
    * Digital cutoff frequency [Hz]
    */
   short cutoffDigital ;

   /**
    * Ramp time from analog to digital in samples
    */
   int rampToDigital ;

   /**
    * Start delay for the ramp from analog to digital
    */
   short delayToDigital ;

   /**
    * Ramp time from digital to analog in samples
    */
   int rampToAnalog ;

   /**
    * Start delay for the ramp from digital to analog
    */
   short delayToAnalog ;

} DMMAmFmTunerControl_HdAudioFilterBand ;

#define DMMAmFmTunerControl_HdAudioFilterBand_Init( p ) memset( p, 0, sizeof(*p))
#define DMMAmFmTunerControl_HdAudioFilterBand_Free( p ) // don't do anything

void DSIReadDMMAmFmTunerControl_HdAudioFilterBand( DSIStream *stream, DMMAmFmTunerControl_HdAudioFilterBand *p ) ;
void DSIWriteDMMAmFmTunerControl_HdAudioFilterBand( DSIStream *stream, const DMMAmFmTunerControl_HdAudioFilterBand *p ) ;

/** ***************************************************************************
 * HD audio blending filter
 */
typedef struct _DMMAmFmTunerControl_HdAudioFilter
{
   /**
    * Disable/Enable the HD blending filter. This flag completely enables/disables this function.
    */
   DSIBool enable ;

   /**
    * Force the analog (false) or digital (true) mode. Only efficient, when the blending filter is disabled.
    */
   DSIBool force ;

   /**
    * AM filter values
    */
   DMMAmFmTunerControl_HdAudioFilterBand am ;

   /**
    * FM filter values
    */
   DMMAmFmTunerControl_HdAudioFilterBand fm ;

} DMMAmFmTunerControl_HdAudioFilter ;

#define DMMAmFmTunerControl_HdAudioFilter_Init( p ) memset( p, 0, sizeof(*p))
#define DMMAmFmTunerControl_HdAudioFilter_Free( p ) // don't do anything

void DSIReadDMMAmFmTunerControl_HdAudioFilter( DSIStream *stream, DMMAmFmTunerControl_HdAudioFilter *p ) ;
void DSIWriteDMMAmFmTunerControl_HdAudioFilter( DSIStream *stream, const DMMAmFmTunerControl_HdAudioFilter *p ) ;

/** ***************************************************************************
 * DESCRIPTION MISSING
 */
typedef struct _DMMAmFmTunerControl_CodingData
{
   /**
    * The region code.
    */
   DMMAmFmTunerControl_RegionCode regionCode ;

   /**
    * The coding flags (for bitmask definition see CodingFlags enum).
    */
   unsigned int codingFlags ;

} DMMAmFmTunerControl_CodingData ;

#define DMMAmFmTunerControl_CodingData_Init( p ) memset( p, 0, sizeof(*p))
#define DMMAmFmTunerControl_CodingData_Free( p ) // don't do anything

void DSIReadDMMAmFmTunerControl_CodingData( DSIStream *stream, DMMAmFmTunerControl_CodingData *p ) ;
void DSIWriteDMMAmFmTunerControl_CodingData( DSIStream *stream, const DMMAmFmTunerControl_CodingData *p ) ;

/** ***************************************************************************
 * Date in BCD format
 */
typedef struct _DMMAmFmTunerControl_BcdDate
{
   /**
    * Month
    */
   unsigned char mm ;

   /**
    * Day
    */
   unsigned char dd ;

   /**
    * Year
    */
   unsigned char yy ;

} DMMAmFmTunerControl_BcdDate ;

#define DMMAmFmTunerControl_BcdDate_Init( p ) memset( p, 0, sizeof(*p))
#define DMMAmFmTunerControl_BcdDate_Free( p ) // don't do anything

void DSIReadDMMAmFmTunerControl_BcdDate( DSIStream *stream, DMMAmFmTunerControl_BcdDate *p ) ;
void DSIWriteDMMAmFmTunerControl_BcdDate( DSIStream *stream, const DMMAmFmTunerControl_BcdDate *p ) ;

/** ***************************************************************************
 * Time in BCD format
 */
typedef struct _DMMAmFmTunerControl_BcdTime
{
   /**
    * Hour
    */
   unsigned char hh ;

   /**
    * Minute
    */
   unsigned char mm ;

   /**
    * Second
    */
   unsigned char ss ;

} DMMAmFmTunerControl_BcdTime ;

#define DMMAmFmTunerControl_BcdTime_Init( p ) memset( p, 0, sizeof(*p))
#define DMMAmFmTunerControl_BcdTime_Free( p ) // don't do anything

void DSIReadDMMAmFmTunerControl_BcdTime( DSIStream *stream, DMMAmFmTunerControl_BcdTime *p ) ;
void DSIWriteDMMAmFmTunerControl_BcdTime( DSIStream *stream, const DMMAmFmTunerControl_BcdTime *p ) ;

/** ***************************************************************************
 * The HD iTunes tagging token
 */
typedef struct _DMMAmFmTunerControl_HdToken
{
   /**
    * DESCRIPTION MISSING
    */
   unsigned char metaDataVersion ;

   /**
    * Not used, always 0x00. Bit 0 Ambiguous Data Flag, Bit 1 Button pressed Flag, Bit 2 - Bit 7 reserved
    */
   unsigned char flags ;

   /**
    * DESCRIPTION MISSING
    */
   unsigned int stationId ;

   /**
    * [KHz]
    */
   unsigned int frequency ;

   /**
    * Service number (0x01=MPS, 0x02=SPS1, 0x03=SPS3 etc.)
    */
   unsigned char service ;

   /**
    * If a station is locked to GPS, the ALFN can be used to provide accurate time
    */
   unsigned int alfn ;

   /**
    * MM/DD/YY in BCD format
    */
   DMMAmFmTunerControl_BcdDate date ;

   /**
    * HH:MM:SS, 24-hour BCD format
    */
   DMMAmFmTunerControl_BcdTime time ;

   /**
    * DESCRIPTION MISSING
    */
   char* stationName ;

   /**
    * DESCRIPTION MISSING
    */
   char* title ;

   /**
    * DESCRIPTION MISSING
    */
   char* artist ;

   /**
    * DESCRIPTION MISSING
    */
   char* album ;

   /**
    * DESCRIPTION MISSING
    */
   char* ufidOwner ;

   /**
    * DESCRIPTION MISSING
    */
   DSIBuffer ufidId ;

   /**
    * DESCRIPTION MISSING
    */
   char* genre ;

} DMMAmFmTunerControl_HdToken ;

#define DMMAmFmTunerControl_HdToken_Init( p ) memset( p, 0, sizeof(*p))
void DMMAmFmTunerControl_HdToken_Free( DMMAmFmTunerControl_HdToken *p );
void DMMAmFmTunerControl_HdToken_Copy( DMMAmFmTunerControl_HdToken* lhs, const DMMAmFmTunerControl_HdToken* rhs );

void DSIReadDMMAmFmTunerControl_HdToken( DSIStream *stream, DMMAmFmTunerControl_HdToken *p ) ;
void DSIWriteDMMAmFmTunerControl_HdToken( DSIStream *stream, const DMMAmFmTunerControl_HdToken *p ) ;

/** ***************************************************************************
 * HD image and context information
 */
typedef struct _DMMAmFmTunerControl_HdImage
{
   /**
    * Image type
    */
   DMMAmFmTunerControl_HdImageType imageType ;

   /**
    * Frequency of receiving station (current station)
    */
   unsigned int frequency ;

   /**
    * The receiving MPS/SPS (current station). Not that this value is a bit value  (MPS: 0/1, SPS1: 2, SPS2: 4, SPS3: 8, ...)
    */
   unsigned char service ;

   /**
    * This image is not longer valid after discardDate / discardTime.
    */
   DMMAmFmTunerControl_BcdDate discardDate ;

   /**
    * This image is not longer valid after discardDate / discardTime.
    */
   DMMAmFmTunerControl_BcdTime discardTime ;

   /**
    * The image file name.
    */
   char* fileName ;

   /**
    * File MIME type
    */
   DMMAmFmTunerControl_HdMimeType fileType ;

   /**
    * The image data.
    */
   DSIBuffer data ;

} DMMAmFmTunerControl_HdImage ;

#define DMMAmFmTunerControl_HdImage_Init( p ) memset( p, 0, sizeof(*p))
void DMMAmFmTunerControl_HdImage_Free( DMMAmFmTunerControl_HdImage *p );
void DMMAmFmTunerControl_HdImage_Copy( DMMAmFmTunerControl_HdImage* lhs, const DMMAmFmTunerControl_HdImage* rhs );

void DSIReadDMMAmFmTunerControl_HdImage( DSIStream *stream, DMMAmFmTunerControl_HdImage *p ) ;
void DSIWriteDMMAmFmTunerControl_HdImage( DSIStream *stream, const DMMAmFmTunerControl_HdImage *p ) ;

/** ***************************************************************************
 * Tuner status information
 */
typedef struct _DMMAmFmTunerControl_TunerState
{
   /**
    * True: AM band (LW/MW/SW/TRF) is active
    * False: FM or WB
    */
   DSIBool amBandActive ;

} DMMAmFmTunerControl_TunerState ;

#define DMMAmFmTunerControl_TunerState_Init( p ) memset( p, 0, sizeof(*p))
#define DMMAmFmTunerControl_TunerState_Free( p ) // don't do anything

void DSIReadDMMAmFmTunerControl_TunerState( DSIStream *stream, DMMAmFmTunerControl_TunerState *p ) ;
void DSIWriteDMMAmFmTunerControl_TunerState( DSIStream *stream, const DMMAmFmTunerControl_TunerState *p ) ;

/** ***************************************************************************
 * Status information about foreground and background tuner
 */
typedef struct _DMMAmFmTunerControl_TunerStates
{
   /**
    * Foreground tuner status information
    */
   DMMAmFmTunerControl_TunerState foreground ;

   /**
    * Background tuner status information
    */
   DMMAmFmTunerControl_TunerState background ;

} DMMAmFmTunerControl_TunerStates ;

#define DMMAmFmTunerControl_TunerStates_Init( p ) memset( p, 0, sizeof(*p))
#define DMMAmFmTunerControl_TunerStates_Free( p ) // don't do anything

void DSIReadDMMAmFmTunerControl_TunerStates( DSIStream *stream, DMMAmFmTunerControl_TunerStates *p ) ;
void DSIWriteDMMAmFmTunerControl_TunerStates( DSIStream *stream, const DMMAmFmTunerControl_TunerStates *p ) ;

/** ***************************************************************************
 * Arbitration information of shared resources 
 */
typedef struct _DMMAmFmTunerControl_ArbitrationInfo
{
   /**
    * Shared front-end
    */
   DMMTunerTypes_ArbitrationElement frontEnd ;

   /**
    * Logical background front-end which is used for arbitration during DAB/FM linking
    */
   DMMTunerTypes_ArbitrationElement frontEndBg ;

} DMMAmFmTunerControl_ArbitrationInfo ;

#define DMMAmFmTunerControl_ArbitrationInfo_Init( p ) memset( p, 0, sizeof(*p))
#define DMMAmFmTunerControl_ArbitrationInfo_Free( p ) // don't do anything

void DSIReadDMMAmFmTunerControl_ArbitrationInfo( DSIStream *stream, DMMAmFmTunerControl_ArbitrationInfo *p ) ;
void DSIWriteDMMAmFmTunerControl_ArbitrationInfo( DSIStream *stream, const DMMAmFmTunerControl_ArbitrationInfo *p ) ;

/** ***************************************************************************
 * RDS clock time
 */
typedef struct _DMMAmFmTunerControl_RdsClockTime
{
   /**
    * Date
    */
   DMMAmFmTunerControl_BcdDate date ;

   /**
    * Time
    */
   DMMAmFmTunerControl_BcdTime time ;

   /**
    * Day of week
    */
   unsigned char dayOfWeek ;

   /**
    * Day of year
    */
   unsigned short dayOfYear ;

} DMMAmFmTunerControl_RdsClockTime ;

#define DMMAmFmTunerControl_RdsClockTime_Init( p ) memset( p, 0, sizeof(*p))
#define DMMAmFmTunerControl_RdsClockTime_Free( p ) // don't do anything

void DSIReadDMMAmFmTunerControl_RdsClockTime( DSIStream *stream, DMMAmFmTunerControl_RdsClockTime *p ) ;
void DSIWriteDMMAmFmTunerControl_RdsClockTime( DSIStream *stream, const DMMAmFmTunerControl_RdsClockTime *p ) ;

/** ***************************************************************************
 * Key/value pair for tuner parameters
 */
typedef struct _DMMAmFmTunerControl_TunerParameter
{
   /**
    * Desired tuner parameter
    * NOTE: Use TunerParameter enum of platform DMMAmFmTunerControlCoreTypes and project specific DMMAmFmTunerControlTypes (additional enum values might be added in future)
    */
   unsigned int parameter ;

   /**
    * New parameter value (consult CC_M_B)
    */
   DSIBuffer buffer ;

} DMMAmFmTunerControl_TunerParameter ;

#define DMMAmFmTunerControl_TunerParameter_Init( p ) memset( p, 0, sizeof(*p))
void DMMAmFmTunerControl_TunerParameter_Free( DMMAmFmTunerControl_TunerParameter *p );
void DMMAmFmTunerControl_TunerParameter_Copy( DMMAmFmTunerControl_TunerParameter* lhs, const DMMAmFmTunerControl_TunerParameter* rhs );

void DSIReadDMMAmFmTunerControl_TunerParameter( DSIStream *stream, DMMAmFmTunerControl_TunerParameter *p ) ;
void DSIWriteDMMAmFmTunerControl_TunerParameter( DSIStream *stream, const DMMAmFmTunerControl_TunerParameter *p ) ;

/** ***************************************************************************
 * Set of tuner parameters
 */
DSIVectorTypeDef( DMMAmFmTunerControl_TunerParameters, DMMAmFmTunerControl_TunerParameter ) ;

// Free the vector related data
void DMMAmFmTunerControl_TunerParameters_Free( DMMAmFmTunerControl_TunerParameters *p );
void DMMAmFmTunerControl_TunerParameters_Copy( DMMAmFmTunerControl_TunerParameters* lhs, const DMMAmFmTunerControl_TunerParameters* rhs );

void DSIReadDMMAmFmTunerControl_TunerParameters( DSIStream *stream, DMMAmFmTunerControl_TunerParameters *p ) ;
void DSIWriteDMMAmFmTunerControl_TunerParameters( DSIStream *stream, const DMMAmFmTunerControl_TunerParameters *p ) ;

/** ***************************************************************************
 * Key/value pair for tuner timings
 */
typedef struct _DMMAmFmTunerControl_TunerTiming
{
   /**
    * Desired tuner timing
    * NOTE: Use TunerTiming enum of platform DMMAmFmTunerControlCoreTypes (additional enum values might be added in future)
    */
   unsigned int timing ;

   /**
    * New timing value (consult CC_M_B)
    */
   unsigned int value ;

} DMMAmFmTunerControl_TunerTiming ;

#define DMMAmFmTunerControl_TunerTiming_Init( p ) memset( p, 0, sizeof(*p))
#define DMMAmFmTunerControl_TunerTiming_Free( p ) // don't do anything

void DSIReadDMMAmFmTunerControl_TunerTiming( DSIStream *stream, DMMAmFmTunerControl_TunerTiming *p ) ;
void DSIWriteDMMAmFmTunerControl_TunerTiming( DSIStream *stream, const DMMAmFmTunerControl_TunerTiming *p ) ;

/** ***************************************************************************
 * Set of tuner timings
 */
DSIVectorTypeDef( DMMAmFmTunerControl_TunerTimings, DMMAmFmTunerControl_TunerTiming ) ;

// Free the vector related data
#define DMMAmFmTunerControl_TunerTimings_Free( p ) DSIVectorFree( *p )
void DMMAmFmTunerControl_TunerTimings_Copy( DMMAmFmTunerControl_TunerTimings* lhs, const DMMAmFmTunerControl_TunerTimings* rhs );

void DSIReadDMMAmFmTunerControl_TunerTimings( DSIStream *stream, DMMAmFmTunerControl_TunerTimings *p ) ;
void DSIWriteDMMAmFmTunerControl_TunerTimings( DSIStream *stream, const DMMAmFmTunerControl_TunerTimings *p ) ;


/** ***************************************************************************
 * Constants
 */



/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_SetAfSwitch
 */
typedef struct _DMMAmFmTunerControl_RequestSetAfSwitchArgList
{
   /**
    * True: Frequency can be automatically switched to better alternative frequency.
    * False: Stay on tuned frequency.
    */
   DSIBool enable ;

} DMMAmFmTunerControl_RequestSetAfSwitchArgList ;

#define DMMAmFmTunerControl_RequestSetAfSwitchArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_RequestSetAfSwitchArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestSetAfSwitchArgList( DSIStream *stream, DMMAmFmTunerControl_RequestSetAfSwitchArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestSetAfSwitchArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestSetAfSwitchArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_SetMultipleStationsSwitch
 */
typedef struct _DMMAmFmTunerControl_RequestSetMultipleStationsSwitchArgList
{
   /**
    * True: Insert all alternative frequencies of one station into FM station list.
    * False: Only one station per PI.
    */
   DSIBool enable ;

} DMMAmFmTunerControl_RequestSetMultipleStationsSwitchArgList ;

#define DMMAmFmTunerControl_RequestSetMultipleStationsSwitchArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_RequestSetMultipleStationsSwitchArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestSetMultipleStationsSwitchArgList( DSIStream *stream, DMMAmFmTunerControl_RequestSetMultipleStationsSwitchArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestSetMultipleStationsSwitchArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestSetMultipleStationsSwitchArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_SetRegMode
 */
typedef struct _DMMAmFmTunerControl_RequestSetRegModeArgList
{
   /**
    * The desired new mode.
    */
   DMMAmFmTunerControl_RegMode regMode ;

} DMMAmFmTunerControl_RequestSetRegModeArgList ;

#define DMMAmFmTunerControl_RequestSetRegModeArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_RequestSetRegModeArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestSetRegModeArgList( DSIStream *stream, DMMAmFmTunerControl_RequestSetRegModeArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestSetRegModeArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestSetRegModeArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_SetStereoMode
 */
typedef struct _DMMAmFmTunerControl_RequestSetStereoModeArgList
{
   /**
    * The desired new mode.
    */
   DMMAmFmTunerControl_StereoMode stereoMode ;

} DMMAmFmTunerControl_RequestSetStereoModeArgList ;

#define DMMAmFmTunerControl_RequestSetStereoModeArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_RequestSetStereoModeArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestSetStereoModeArgList( DSIStream *stream, DMMAmFmTunerControl_RequestSetStereoModeArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestSetStereoModeArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestSetStereoModeArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_SetHdMode
 */
typedef struct _DMMAmFmTunerControl_RequestSetHdModeArgList
{
   /**
    * The desired new mode.
    */
   DMMAmFmTunerControl_HdMode hdMode ;

} DMMAmFmTunerControl_RequestSetHdModeArgList ;

#define DMMAmFmTunerControl_RequestSetHdModeArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_RequestSetHdModeArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestSetHdModeArgList( DSIStream *stream, DMMAmFmTunerControl_RequestSetHdModeArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestSetHdModeArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestSetHdModeArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_SetDiagSwitch
 */
typedef struct _DMMAmFmTunerControl_RequestSetDiagSwitchArgList
{
   /**
    * True: Diagnosis mode: 
    * Tuner32: diversity off, no background activity, PM bus enabled
    * OOTuner: no background activity
    * False: Standard mode
    */
   DSIBool enable ;

} DMMAmFmTunerControl_RequestSetDiagSwitchArgList ;

#define DMMAmFmTunerControl_RequestSetDiagSwitchArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_RequestSetDiagSwitchArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestSetDiagSwitchArgList( DSIStream *stream, DMMAmFmTunerControl_RequestSetDiagSwitchArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestSetDiagSwitchArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestSetDiagSwitchArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_SetTestMode
 */
typedef struct _DMMAmFmTunerControl_RequestSetTestModeArgList
{
   /**
    * The desired test mode.
    */
   DMMAmFmTunerControl_TestMode testMode ;

   /**
    * The optional test mode index, e.g. tuner selection for test mode M.
    * For test mode O use TestModeO enum to create bitmask.
    */
   unsigned int index ;

} DMMAmFmTunerControl_RequestSetTestModeArgList ;

#define DMMAmFmTunerControl_RequestSetTestModeArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_RequestSetTestModeArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestSetTestModeArgList( DSIStream *stream, DMMAmFmTunerControl_RequestSetTestModeArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestSetTestModeArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestSetTestModeArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_SendPmBusCommand
 */
typedef struct _DMMAmFmTunerControl_RequestSendPmBusCommandArgList
{
   /**
    * Please refer to the tuner pool documentation.
    */
   DSIBuffer commandStream ;

} DMMAmFmTunerControl_RequestSendPmBusCommandArgList ;

#define DMMAmFmTunerControl_RequestSendPmBusCommandArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMAmFmTunerControl_RequestSendPmBusCommandArgList_Free( DMMAmFmTunerControl_RequestSendPmBusCommandArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestSendPmBusCommandArgList( DSIStream *stream, DMMAmFmTunerControl_RequestSendPmBusCommandArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestSendPmBusCommandArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestSendPmBusCommandArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_SetSeekSensitivity
 */
typedef struct _DMMAmFmTunerControl_RequestSetSeekSensitivityArgList
{
   /**
    * The desired thresholds.
    */
   DMMAmFmTunerControl_StopLevels stopLevels ;

} DMMAmFmTunerControl_RequestSetSeekSensitivityArgList ;

#define DMMAmFmTunerControl_RequestSetSeekSensitivityArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMAmFmTunerControl_RequestSetSeekSensitivityArgList_Free( DMMAmFmTunerControl_RequestSetSeekSensitivityArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestSetSeekSensitivityArgList( DSIStream *stream, DMMAmFmTunerControl_RequestSetSeekSensitivityArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestSetSeekSensitivityArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestSetSeekSensitivityArgList* arglist );





/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_SetHdBlending
 */
typedef struct _DMMAmFmTunerControl_RequestSetHdBlendingArgList
{
   /**
    * The desired blending mode.
    */
   DMMAmFmTunerControl_HdBlending hdBlending ;

} DMMAmFmTunerControl_RequestSetHdBlendingArgList ;

#define DMMAmFmTunerControl_RequestSetHdBlendingArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_RequestSetHdBlendingArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestSetHdBlendingArgList( DSIStream *stream, DMMAmFmTunerControl_RequestSetHdBlendingArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestSetHdBlendingArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestSetHdBlendingArgList* arglist );





/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_SetHdCalibration
 */
typedef struct _DMMAmFmTunerControl_RequestSetHdCalibrationArgList
{
   /**
    * The desired calibration state.
    */
   DSIBool enable ;

} DMMAmFmTunerControl_RequestSetHdCalibrationArgList ;

#define DMMAmFmTunerControl_RequestSetHdCalibrationArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_RequestSetHdCalibrationArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestSetHdCalibrationArgList( DSIStream *stream, DMMAmFmTunerControl_RequestSetHdCalibrationArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestSetHdCalibrationArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestSetHdCalibrationArgList* arglist );





/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_SetRegionCode
 */
typedef struct _DMMAmFmTunerControl_RequestSetRegionCodeArgList
{
   /**
    * The desired region code.
    */
   DMMAmFmTunerControl_RegionCode regionCode ;

   /**
    * Set optional coding flags via this bitmask.
    */
   unsigned int flags ;

} DMMAmFmTunerControl_RequestSetRegionCodeArgList ;

#define DMMAmFmTunerControl_RequestSetRegionCodeArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_RequestSetRegionCodeArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestSetRegionCodeArgList( DSIStream *stream, DMMAmFmTunerControl_RequestSetRegionCodeArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestSetRegionCodeArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestSetRegionCodeArgList* arglist );





/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_ControlHdBer
 */
typedef struct _DMMAmFmTunerControl_RequestControlHdBerArgList
{
   /**
    * HD bit error measurement mode
    */
   DMMAmFmTunerControl_HdBerMode hdBerMode ;

} DMMAmFmTunerControl_RequestControlHdBerArgList ;

#define DMMAmFmTunerControl_RequestControlHdBerArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_RequestControlHdBerArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestControlHdBerArgList( DSIStream *stream, DMMAmFmTunerControl_RequestControlHdBerArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestControlHdBerArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestControlHdBerArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_SetTunerParameter
 */
typedef struct _DMMAmFmTunerControl_RequestSetTunerParameterArgList
{
   /**
    * Desired tuner parameter to manipulate
    * NOTE: Use TunerParameter enum of platform DMMAmFmTunerControlCoreTypes and project specific DMMAmFmTunerControlTypes (additional enum values might be added in future)
    */
   unsigned int tunerParameter ;

   /**
    * New parameter value (consult CC_M_B)
    */
   DSIBuffer buffer ;

} DMMAmFmTunerControl_RequestSetTunerParameterArgList ;

#define DMMAmFmTunerControl_RequestSetTunerParameterArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMAmFmTunerControl_RequestSetTunerParameterArgList_Free( DMMAmFmTunerControl_RequestSetTunerParameterArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestSetTunerParameterArgList( DSIStream *stream, DMMAmFmTunerControl_RequestSetTunerParameterArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestSetTunerParameterArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestSetTunerParameterArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_GetTunerParameter
 */
typedef struct _DMMAmFmTunerControl_RequestGetTunerParameterArgList
{
   /**
    * Desired tuner parameter to query
    * NOTE: Use TunerParameter enum of platform DMMAmFmTunerControlCoreTypes and project specific DMMAmFmTunerControlTypes (additional enum values might be added in future)
    */
   unsigned int tunerParameter ;

} DMMAmFmTunerControl_RequestGetTunerParameterArgList ;

#define DMMAmFmTunerControl_RequestGetTunerParameterArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_RequestGetTunerParameterArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestGetTunerParameterArgList( DSIStream *stream, DMMAmFmTunerControl_RequestGetTunerParameterArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestGetTunerParameterArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestGetTunerParameterArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_SetTunerTiming
 */
typedef struct _DMMAmFmTunerControl_RequestSetTunerTimingArgList
{
   /**
    * Desired timing parameter to manipulate
    * NOTE: Use TunerTiming enum of platform DMMAmFmTunerControlCoreTypes (additional enum values might be added in future)
    */
   unsigned int tunerTiming ;

   /**
    * New timing value (consult CC_M_B)
    */
   unsigned int value ;

} DMMAmFmTunerControl_RequestSetTunerTimingArgList ;

#define DMMAmFmTunerControl_RequestSetTunerTimingArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_RequestSetTunerTimingArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestSetTunerTimingArgList( DSIStream *stream, DMMAmFmTunerControl_RequestSetTunerTimingArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestSetTunerTimingArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestSetTunerTimingArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_GetTunerTiming
 */
typedef struct _DMMAmFmTunerControl_RequestGetTunerTimingArgList
{
   /**
    * Desired timing parameter to query
    * NOTE: Use TunerTiming enum of platform DMMAmFmTunerControlCoreTypes (additional enum values might be added in future)
    */
   unsigned int tunerTiming ;

} DMMAmFmTunerControl_RequestGetTunerTimingArgList ;

#define DMMAmFmTunerControl_RequestGetTunerTimingArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_RequestGetTunerTimingArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestGetTunerTimingArgList( DSIStream *stream, DMMAmFmTunerControl_RequestGetTunerTimingArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestGetTunerTimingArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestGetTunerTimingArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_DeletePersistentData
 */
typedef struct _DMMAmFmTunerControl_RequestDeletePersistentDataArgList
{
   /**
    * Data scope to be deleted
    */
   DMMAmFmTunerControl_PersistenceScope scope ;

} DMMAmFmTunerControl_RequestDeletePersistentDataArgList ;

#define DMMAmFmTunerControl_RequestDeletePersistentDataArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_RequestDeletePersistentDataArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestDeletePersistentDataArgList( DSIStream *stream, DMMAmFmTunerControl_RequestDeletePersistentDataArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestDeletePersistentDataArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestDeletePersistentDataArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_SetWavebandGrid
 */
typedef struct _DMMAmFmTunerControl_RequestSetWavebandGridArgList
{
   /**
    * Waveband to be manipulated
    */
   DMMAmFmTunerControl_Waveband waveband ;

   /**
    * New waveband limits and step width.
    */
   DMMAmFmTunerControl_WavebandGrid grid ;

} DMMAmFmTunerControl_RequestSetWavebandGridArgList ;

#define DMMAmFmTunerControl_RequestSetWavebandGridArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_RequestSetWavebandGridArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestSetWavebandGridArgList( DSIStream *stream, DMMAmFmTunerControl_RequestSetWavebandGridArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestSetWavebandGridArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestSetWavebandGridArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_SetHdBallGameMode
 */
typedef struct _DMMAmFmTunerControl_RequestSetHdBallGameModeArgList
{
   /**
    * The desired new mode.
    */
   DMMAmFmTunerControl_HdBallGameMode hdBallGameMode ;

} DMMAmFmTunerControl_RequestSetHdBallGameModeArgList ;

#define DMMAmFmTunerControl_RequestSetHdBallGameModeArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_RequestSetHdBallGameModeArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestSetHdBallGameModeArgList( DSIStream *stream, DMMAmFmTunerControl_RequestSetHdBallGameModeArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestSetHdBallGameModeArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestSetHdBallGameModeArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_Assign
 */
typedef struct _DMMAmFmTunerControl_RequestAssignArgList
{
   /**
    * Specific resource
    */
   DMMAmFmTunerControl_SharedResources resource ;

   /**
    * TRUE: grant, FALSE: withdraw
    */
   DSIBool grant ;

} DMMAmFmTunerControl_RequestAssignArgList ;

#define DMMAmFmTunerControl_RequestAssignArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_RequestAssignArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestAssignArgList( DSIStream *stream, DMMAmFmTunerControl_RequestAssignArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestAssignArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestAssignArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMAmFmTunerControl_SetSpecialCoding
 */
typedef struct _DMMAmFmTunerControl_RequestSetSpecialCodingArgList
{
   /**
    * Set of TunerParameters
    * NOTE: Use TunerParameter enum of platform DMMAmFmTunerControlCoreTypes and project specific DMMAmFmTunerControlTypes (additional enum values might be added in future)
    */
   DMMAmFmTunerControl_TunerParameters parameters ;

   /**
    * Set of TunerTimings
    * NOTE: Use TunerTiming enum of platform DMMAmFmTunerControlCoreTypes (additional enum values might be added in future)
    */
   DMMAmFmTunerControl_TunerTimings timings ;

} DMMAmFmTunerControl_RequestSetSpecialCodingArgList ;

#define DMMAmFmTunerControl_RequestSetSpecialCodingArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMAmFmTunerControl_RequestSetSpecialCodingArgList_Free( DMMAmFmTunerControl_RequestSetSpecialCodingArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_RequestSetSpecialCodingArgList( DSIStream *stream, DMMAmFmTunerControl_RequestSetSpecialCodingArgList* arglist );
int DSIWriteDMMAmFmTunerControl_RequestSetSpecialCodingArgList( DSIStream *stream, const DMMAmFmTunerControl_RequestSetSpecialCodingArgList* arglist );





/** ***************************************************************************
 * Argument List Structure for responseDMMAmFmTunerControl_PmBusCommand
 */
typedef struct _DMMAmFmTunerControl_ResponsePmBusCommandArgList
{
   /**
    * Please refer to the tuner pool documentation.
    */
   DSIBuffer resultStream ;

} DMMAmFmTunerControl_ResponsePmBusCommandArgList ;

#define DMMAmFmTunerControl_ResponsePmBusCommandArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMAmFmTunerControl_ResponsePmBusCommandArgList_Free( DMMAmFmTunerControl_ResponsePmBusCommandArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_ResponsePmBusCommandArgList( DSIStream *stream, DMMAmFmTunerControl_ResponsePmBusCommandArgList* arglist );
int DSIWriteDMMAmFmTunerControl_ResponsePmBusCommandArgList( DSIStream *stream, const DMMAmFmTunerControl_ResponsePmBusCommandArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for responseDMMAmFmTunerControl_TestData
 */
typedef struct _DMMAmFmTunerControl_ResponseTestDataArgList
{
   /**
    * The currently active test mode.
    */
   DMMAmFmTunerControl_TestMode testMode ;

   /**
    * The optional test mode index, e.g. tuner selection for test mode M.
    * For test mode O the current valid bitmask of TestModeO enum values is returned.
    */
   unsigned int index ;

   /**
    * The data stream (use TestMode structs for demarshalling ).
    */
   DSIBuffer data ;

} DMMAmFmTunerControl_ResponseTestDataArgList ;

#define DMMAmFmTunerControl_ResponseTestDataArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMAmFmTunerControl_ResponseTestDataArgList_Free( DMMAmFmTunerControl_ResponseTestDataArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_ResponseTestDataArgList( DSIStream *stream, DMMAmFmTunerControl_ResponseTestDataArgList* arglist );
int DSIWriteDMMAmFmTunerControl_ResponseTestDataArgList( DSIStream *stream, const DMMAmFmTunerControl_ResponseTestDataArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for responseDMMAmFmTunerControl_SeekSensitivity
 */
typedef struct _DMMAmFmTunerControl_ResponseSeekSensitivityArgList
{
   /**
    * The seek/scan thresholds.
    */
   DMMAmFmTunerControl_StopLevels stopLevels ;

} DMMAmFmTunerControl_ResponseSeekSensitivityArgList ;

#define DMMAmFmTunerControl_ResponseSeekSensitivityArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMAmFmTunerControl_ResponseSeekSensitivityArgList_Free( DMMAmFmTunerControl_ResponseSeekSensitivityArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_ResponseSeekSensitivityArgList( DSIStream *stream, DMMAmFmTunerControl_ResponseSeekSensitivityArgList* arglist );
int DSIWriteDMMAmFmTunerControl_ResponseSeekSensitivityArgList( DSIStream *stream, const DMMAmFmTunerControl_ResponseSeekSensitivityArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for responseDMMAmFmTunerControl_HdBlending
 */
typedef struct _DMMAmFmTunerControl_ResponseHdBlendingArgList
{
   /**
    * The current blending mode.
    */
   DMMAmFmTunerControl_HdBlending hdBlending ;

} DMMAmFmTunerControl_ResponseHdBlendingArgList ;

#define DMMAmFmTunerControl_ResponseHdBlendingArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_ResponseHdBlendingArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_ResponseHdBlendingArgList( DSIStream *stream, DMMAmFmTunerControl_ResponseHdBlendingArgList* arglist );
int DSIWriteDMMAmFmTunerControl_ResponseHdBlendingArgList( DSIStream *stream, const DMMAmFmTunerControl_ResponseHdBlendingArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for responseDMMAmFmTunerControl_HdCalibration
 */
typedef struct _DMMAmFmTunerControl_ResponseHdCalibrationArgList
{
   /**
    * HD calibration enabled/disabled.
    */
   DSIBool enabled ;

} DMMAmFmTunerControl_ResponseHdCalibrationArgList ;

#define DMMAmFmTunerControl_ResponseHdCalibrationArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_ResponseHdCalibrationArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_ResponseHdCalibrationArgList( DSIStream *stream, DMMAmFmTunerControl_ResponseHdCalibrationArgList* arglist );
int DSIWriteDMMAmFmTunerControl_ResponseHdCalibrationArgList( DSIStream *stream, const DMMAmFmTunerControl_ResponseHdCalibrationArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for responseDMMAmFmTunerControl_HdBer
 */
typedef struct _DMMAmFmTunerControl_ResponseHdBerArgList
{
   /**
    * The different bit error rates in case the corresponding index is available: 0=BLK, 1=PIDS, 2=P3, 3=P2, 4=P1
    */
   DMMAmFmTunerControl_HdBers bers ;

} DMMAmFmTunerControl_ResponseHdBerArgList ;

#define DMMAmFmTunerControl_ResponseHdBerArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMAmFmTunerControl_ResponseHdBerArgList_Free( DMMAmFmTunerControl_ResponseHdBerArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_ResponseHdBerArgList( DSIStream *stream, DMMAmFmTunerControl_ResponseHdBerArgList* arglist );
int DSIWriteDMMAmFmTunerControl_ResponseHdBerArgList( DSIStream *stream, const DMMAmFmTunerControl_ResponseHdBerArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for informationDMMAmFmTunerControl_HdStatus
 */
typedef struct _DMMAmFmTunerControl_InformationHdStatusArgList
{
   /**
    * HD status data
    */
   DMMAmFmTunerControl_HdStatus status ;

} DMMAmFmTunerControl_InformationHdStatusArgList ;

#define DMMAmFmTunerControl_InformationHdStatusArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_InformationHdStatusArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_InformationHdStatusArgList( DSIStream *stream, DMMAmFmTunerControl_InformationHdStatusArgList* arglist );
int DSIWriteDMMAmFmTunerControl_InformationHdStatusArgList( DSIStream *stream, const DMMAmFmTunerControl_InformationHdStatusArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for informationDMMAmFmTunerControl_HdPerformance
 */
typedef struct _DMMAmFmTunerControl_InformationHdPerformanceArgList
{
   /**
    * HD performance data
    */
   DMMAmFmTunerControl_HdPerformance performance ;

} DMMAmFmTunerControl_InformationHdPerformanceArgList ;

#define DMMAmFmTunerControl_InformationHdPerformanceArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_InformationHdPerformanceArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_InformationHdPerformanceArgList( DSIStream *stream, DMMAmFmTunerControl_InformationHdPerformanceArgList* arglist );
int DSIWriteDMMAmFmTunerControl_InformationHdPerformanceArgList( DSIStream *stream, const DMMAmFmTunerControl_InformationHdPerformanceArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for informationDMMAmFmTunerControl_HdCallToAction
 */
typedef struct _DMMAmFmTunerControl_InformationHdCallToActionArgList
{
   /**
    * Frequency of corresponding HD service.
    */
   unsigned int frequency ;

   /**
    * Service ID of corresponding service as bit mask: 0x01=MPS, 0x02=SPS1, 0x04=SPS2, 0x08=SPS, ...
    */
   unsigned char serviceId ;

   /**
    * Conditional access service Id
    */
   unsigned int caServiceId ;

   /**
    * The radio ID
    */
   unsigned int radioId ;

   /**
    * Message to be displayed
    */
   char* message ;

} DMMAmFmTunerControl_InformationHdCallToActionArgList ;

#define DMMAmFmTunerControl_InformationHdCallToActionArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMAmFmTunerControl_InformationHdCallToActionArgList_Free( DMMAmFmTunerControl_InformationHdCallToActionArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_InformationHdCallToActionArgList( DSIStream *stream, DMMAmFmTunerControl_InformationHdCallToActionArgList* arglist );
int DSIWriteDMMAmFmTunerControl_InformationHdCallToActionArgList( DSIStream *stream, const DMMAmFmTunerControl_InformationHdCallToActionArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for informationDMMAmFmTunerControl_HdPsdChanged
 */
typedef struct _DMMAmFmTunerControl_InformationHdPsdChangedArgList
{
   /**
    * Frequency of current station [KHz]
    */
   unsigned int frequency ;

   /**
    * Program service number (MPS: 0x1, SPS1: 0x2, ...)
    */
   unsigned char service ;

} DMMAmFmTunerControl_InformationHdPsdChangedArgList ;

#define DMMAmFmTunerControl_InformationHdPsdChangedArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_InformationHdPsdChangedArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_InformationHdPsdChangedArgList( DSIStream *stream, DMMAmFmTunerControl_InformationHdPsdChangedArgList* arglist );
int DSIWriteDMMAmFmTunerControl_InformationHdPsdChangedArgList( DSIStream *stream, const DMMAmFmTunerControl_InformationHdPsdChangedArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for informationDMMAmFmTunerControl_HdTagging
 */
typedef struct _DMMAmFmTunerControl_InformationHdTaggingArgList
{
   /**
    * The token
    */
   DMMAmFmTunerControl_HdToken token ;

} DMMAmFmTunerControl_InformationHdTaggingArgList ;

#define DMMAmFmTunerControl_InformationHdTaggingArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMAmFmTunerControl_InformationHdTaggingArgList_Free( DMMAmFmTunerControl_InformationHdTaggingArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_InformationHdTaggingArgList( DSIStream *stream, DMMAmFmTunerControl_InformationHdTaggingArgList* arglist );
int DSIWriteDMMAmFmTunerControl_InformationHdTaggingArgList( DSIStream *stream, const DMMAmFmTunerControl_InformationHdTaggingArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for responseDMMAmFmTunerControl_TunerParameter
 */
typedef struct _DMMAmFmTunerControl_ResponseTunerParameterArgList
{
   /**
    * Manipulated/queried tuner parameter
    * NOTE: Use TunerParameter enum of platform DMMAmFmTunerControlCoreTypes and project specific DMMAmFmTunerControlTypes (additional enum values might be added in future)
    */
   unsigned int tunerParameter ;

   /**
    * New parameter value (consult CC_M_B)
    */
   DSIBuffer buffer ;

   /**
    * Feedback information about the success of the request
    */
   DMMTunerTypes_Feedback feedback ;

} DMMAmFmTunerControl_ResponseTunerParameterArgList ;

#define DMMAmFmTunerControl_ResponseTunerParameterArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMAmFmTunerControl_ResponseTunerParameterArgList_Free( DMMAmFmTunerControl_ResponseTunerParameterArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_ResponseTunerParameterArgList( DSIStream *stream, DMMAmFmTunerControl_ResponseTunerParameterArgList* arglist );
int DSIWriteDMMAmFmTunerControl_ResponseTunerParameterArgList( DSIStream *stream, const DMMAmFmTunerControl_ResponseTunerParameterArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for responseDMMAmFmTunerControl_TunerTiming
 */
typedef struct _DMMAmFmTunerControl_ResponseTunerTimingArgList
{
   /**
    * Manipulated/queried tuner timing
    * NOTE: Use TunerTiming enum of platform DMMAmFmTunerControlCoreTypes (additional enum values might be added in future)
    */
   unsigned int tunerTiming ;

   /**
    * New timing value (consult CC_M_B)
    */
   unsigned int value ;

   /**
    * Feedback information about the success of the request
    */
   DMMTunerTypes_Feedback feedback ;

} DMMAmFmTunerControl_ResponseTunerTimingArgList ;

#define DMMAmFmTunerControl_ResponseTunerTimingArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMAmFmTunerControl_ResponseTunerTimingArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_ResponseTunerTimingArgList( DSIStream *stream, DMMAmFmTunerControl_ResponseTunerTimingArgList* arglist );
int DSIWriteDMMAmFmTunerControl_ResponseTunerTimingArgList( DSIStream *stream, const DMMAmFmTunerControl_ResponseTunerTimingArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for informationDMMAmFmTunerControl_HdImage
 */
typedef struct _DMMAmFmTunerControl_InformationHdImageArgList
{
   /**
    * The available image and context data.
    */
   DMMAmFmTunerControl_HdImage image ;

} DMMAmFmTunerControl_InformationHdImageArgList ;

#define DMMAmFmTunerControl_InformationHdImageArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMAmFmTunerControl_InformationHdImageArgList_Free( DMMAmFmTunerControl_InformationHdImageArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMAmFmTunerControl_InformationHdImageArgList( DSIStream *stream, DMMAmFmTunerControl_InformationHdImageArgList* arglist );
int DSIWriteDMMAmFmTunerControl_InformationHdImageArgList( DSIStream *stream, const DMMAmFmTunerControl_InformationHdImageArgList* arglist );






/**
 * Streaming Functions for Attributes
 */
#define DSIReadDMMAmFmTunerControl_AfSwitch( stream, attribute ) DSIReadBool( stream, attribute )
#define  DSIWriteDMMAmFmTunerControl_AfSwitch( stream, attribute ) DSIWriteBool( stream, attribute )

#define DSIReadDMMAmFmTunerControl_MultipleStationsSwitch( stream, attribute ) DSIReadBool( stream, attribute )
#define  DSIWriteDMMAmFmTunerControl_MultipleStationsSwitch( stream, attribute ) DSIWriteBool( stream, attribute )

#define DSIReadDMMAmFmTunerControl_RegMode( stream, attribute ) DSIRead32( stream, attribute )
#define  DSIWriteDMMAmFmTunerControl_RegMode( stream, attribute ) DSIWrite32( stream, attribute )

#define DSIReadDMMAmFmTunerControl_StereoMode( stream, attribute ) DSIRead32( stream, attribute )
#define  DSIWriteDMMAmFmTunerControl_StereoMode( stream, attribute ) DSIWrite32( stream, attribute )

#define DSIReadDMMAmFmTunerControl_StereoState( stream, attribute ) DSIReadBool( stream, attribute )
#define  DSIWriteDMMAmFmTunerControl_StereoState( stream, attribute ) DSIWriteBool( stream, attribute )

#define DSIReadDMMAmFmTunerControl_HdMode( stream, attribute ) DSIRead32( stream, attribute )
#define  DSIWriteDMMAmFmTunerControl_HdMode( stream, attribute ) DSIWrite32( stream, attribute )

#define DSIReadDMMAmFmTunerControl_DeviceState( stream, attribute ) DSIRead32( stream, attribute )
#define  DSIWriteDMMAmFmTunerControl_DeviceState( stream, attribute ) DSIWrite32( stream, attribute )

#define DSIReadDMMAmFmTunerControl_DiagSwitch( stream, attribute ) DSIReadBool( stream, attribute )
#define  DSIWriteDMMAmFmTunerControl_DiagSwitch( stream, attribute ) DSIWriteBool( stream, attribute )

#define DSIReadDMMAmFmTunerControl_WavebandGrids( stream, attribute ) DSIReadDMMAmFmTunerControl_WavebandGrids( stream, attribute )
#define  DSIWriteDMMAmFmTunerControl_WavebandGrids( stream, attribute ) DSIWriteDMMAmFmTunerControl_WavebandGrids( stream, attribute )

#define DSIReadDMMAmFmTunerControl_HwError( stream, attribute ) DSIReadDMMAmFmTunerControl_HwError( stream, attribute )
#define  DSIWriteDMMAmFmTunerControl_HwError( stream, attribute ) DSIWriteDMMAmFmTunerControl_HwError( stream, attribute )

#define DSIReadDMMAmFmTunerControl_Versions( stream, attribute ) DSIReadDMMAmFmTunerControl_Strings( stream, attribute )
#define  DSIWriteDMMAmFmTunerControl_Versions( stream, attribute ) DSIWriteDMMAmFmTunerControl_Strings( stream, attribute )

#define DSIReadDMMAmFmTunerControl_CodingData( stream, attribute ) DSIReadDMMAmFmTunerControl_CodingData( stream, attribute )
#define  DSIWriteDMMAmFmTunerControl_CodingData( stream, attribute ) DSIWriteDMMAmFmTunerControl_CodingData( stream, attribute )

#define DSIReadDMMAmFmTunerControl_HdBallGameMode( stream, attribute ) DSIRead32( stream, attribute )
#define  DSIWriteDMMAmFmTunerControl_HdBallGameMode( stream, attribute ) DSIWrite32( stream, attribute )

#define DSIReadDMMAmFmTunerControl_TunerStateAttr( stream, attribute ) DSIReadDMMAmFmTunerControl_TunerStates( stream, attribute )
#define  DSIWriteDMMAmFmTunerControl_TunerStateAttr( stream, attribute ) DSIWriteDMMAmFmTunerControl_TunerStates( stream, attribute )

#define DSIReadDMMAmFmTunerControl_ArbitrationInfo( stream, attribute ) DSIReadDMMAmFmTunerControl_ArbitrationInfo( stream, attribute )
#define  DSIWriteDMMAmFmTunerControl_ArbitrationInfo( stream, attribute ) DSIWriteDMMAmFmTunerControl_ArbitrationInfo( stream, attribute )

#define DSIReadDMMAmFmTunerControl_RdsClockTime( stream, attribute ) DSIReadDMMAmFmTunerControl_RdsClockTime( stream, attribute )
#define  DSIWriteDMMAmFmTunerControl_RdsClockTime( stream, attribute ) DSIWriteDMMAmFmTunerControl_RdsClockTime( stream, attribute )

#define DSIReadDMMAmFmTunerControl_PowerSync( stream, attribute ) DSIReadDMMTunerTypes_UInt32s( stream, attribute )
#define  DSIWriteDMMAmFmTunerControl_PowerSync( stream, attribute ) DSIWriteDMMTunerTypes_UInt32s( stream, attribute )


DSI_EXTERN_C_END

#endif // DMMAMFMTUNERCONTROL_H
