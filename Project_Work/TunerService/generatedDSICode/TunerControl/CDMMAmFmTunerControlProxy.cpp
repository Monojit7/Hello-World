 
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2013
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 9.4.2013
 */


#include "CDMMAmFmTunerControlProxy.hpp"
#include "CTunerRequestResponseHandler.hpp"
#include "DMMAmFmTunerControlTypes.h"
#include "api/sys/dsi/pf/base/src/DSITypes.h"
//#include "api/sys/colibry/pf/containers/src/CHBBuffer.hpp"
#include <string.h>
#include "TraceMacros.hpp"
#include "CTunerSeekHandler.hpp"
#include "TunerServiceMain.hpp"

TRC_SCOPE_DEF(TunerService, CDMMAmFmTunerControlProxy, postInternalEvent);
TRC_SCOPE_DEF(TunerService, CDMMAmFmTunerControlProxy, componentConnected);
TRC_SCOPE_DEF(TunerService, CDMMAmFmTunerControlProxy, processInternalEvent);
TRC_SCOPE_DEF(TunerService, CDMMAmFmTunerControlProxy, informationHdStatus);
TRC_SCOPE_DEF(TunerService, CDMMAmFmTunerControlProxy, responseInvalid);
TRC_SCOPE_DEF(TunerService, CDMMAmFmTunerControlProxy, requestSetHdModeFailed);
TRC_SCOPE_DEF(TunerService, CDMMAmFmTunerControlProxy, responseFieldStrengthAntenna);
TRC_SCOPE_DEF(TunerService, CDMMAmFmTunerControlProxy, responseTunerParameter);

static void _responsePmBusCommand( DMMAmFmTunerControlProxy* proxy, const DSIBuffer resultStream )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->responsePmBusCommand( resultStream ) ;
}

static void _responseTestData( DMMAmFmTunerControlProxy* proxy,  DMMAmFmTunerControl_TestMode testMode,  unsigned int index, const DSIBuffer data )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->responseTestData( testMode, index, data ) ;
}

static void _responseSeekSensitivity( DMMAmFmTunerControlProxy* proxy, const DMMAmFmTunerControl_StopLevels stopLevels )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->responseSeekSensitivity( stopLevels ) ;
}

static void _responseHdBlending( DMMAmFmTunerControlProxy* proxy,  DMMAmFmTunerControl_HdBlending hdBlending )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->responseHdBlending( hdBlending ) ;
}

static void _responseHdCalibration( DMMAmFmTunerControlProxy* proxy,  DSIBool enabled )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->responseHdCalibration( enabled ) ;
}

static void _responseHdBer( DMMAmFmTunerControlProxy* proxy, const DMMAmFmTunerControl_HdBers bers )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->responseHdBer( bers ) ;
}

static void _informationHdStatus( DMMAmFmTunerControlProxy* proxy, const DMMAmFmTunerControl_HdStatus* status )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->informationHdStatus(  *status ) ;
}

static void _informationHdPerformance( DMMAmFmTunerControlProxy* proxy, const DMMAmFmTunerControl_HdPerformance* performance )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->informationHdPerformance(  *performance ) ;
}

static void _informationHdCallToAction( DMMAmFmTunerControlProxy* proxy,  unsigned int frequency,  unsigned char serviceId,  unsigned int caServiceId,  unsigned int radioId, const char* message )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->informationHdCallToAction( frequency, serviceId, caServiceId, radioId, message ) ;
}

static void _informationHdPsdChanged( DMMAmFmTunerControlProxy* proxy,  unsigned int frequency,  unsigned char service )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->informationHdPsdChanged( frequency, service ) ;
}

static void _informationHdTagging( DMMAmFmTunerControlProxy* proxy, const DMMAmFmTunerControl_HdToken* token )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->informationHdTagging(  *token ) ;
}

static void _responseTunerParameter( DMMAmFmTunerControlProxy* proxy,  unsigned int tunerParameter, const DSIBuffer buffer,  DMMTunerTypes_Feedback feedback )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->responseTunerParameter( tunerParameter, buffer, feedback ) ;
}

static void _responseTunerTiming( DMMAmFmTunerControlProxy* proxy,  unsigned int tunerTiming,  unsigned int value,  DMMTunerTypes_Feedback feedback )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->responseTunerTiming( tunerTiming, value, feedback ) ;
}

static void _informationHdImage( DMMAmFmTunerControlProxy* proxy, const DMMAmFmTunerControl_HdImage* image )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->informationHdImage(  *image ) ;
}

static void _processInternalEvent( DMMAmFmTunerControlProxy* proxy, int code, void* data )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->processInternalEvent( code,  data ) ;
}

static void _processUpdateEvent( DMMAmFmTunerControlProxy* proxy, DMMAmFmTunerControl_UpdateIdEnum updateId )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->processUpdateEvent( updateId ) ;
}

static void _componentConnected( DMMAmFmTunerControlProxy* proxy )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->componentConnected( ) ;
}

static void _componentDisconnected( DMMAmFmTunerControlProxy* proxy )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->componentDisconnected( ) ;
}

static void _cleanup( DMMAmFmTunerControlProxy* proxy )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->cleanup( ) ;
}

static void _responseInvalid( DMMAmFmTunerControlProxy* proxy, DMMAmFmTunerControl_UpdateIdEnum id )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->responseInvalid( id );
}

static void _requestSetAfSwitchFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestSetAfSwitchFailed( errType );
}

static void _requestSetMultipleStationsSwitchFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestSetMultipleStationsSwitchFailed( errType );
}

static void _requestSetRegModeFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestSetRegModeFailed( errType );
}

static void _requestSetStereoModeFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestSetStereoModeFailed( errType );
}

static void _requestSetHdModeFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestSetHdModeFailed( errType );
}

static void _requestSetDiagSwitchFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestSetDiagSwitchFailed( errType );
}

static void _requestSetTestModeFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestSetTestModeFailed( errType );
}

static void _requestSendPmBusCommandFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestSendPmBusCommandFailed( errType );
}

static void _requestSetSeekSensitivityFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestSetSeekSensitivityFailed( errType );
}

static void _requestGetSeekSensitivityFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestGetSeekSensitivityFailed( errType );
}

static void _requestSetHdBlendingFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestSetHdBlendingFailed( errType );
}

static void _requestGetHdBlendingFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestGetHdBlendingFailed( errType );
}

static void _requestSetHdCalibrationFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestSetHdCalibrationFailed( errType );
}

static void _requestGetHdCalibrationFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestGetHdCalibrationFailed( errType );
}

static void _requestSetRegionCodeFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestSetRegionCodeFailed( errType );
}

static void _requestGetHdBerFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestGetHdBerFailed( errType );
}

static void _requestControlHdBerFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestControlHdBerFailed( errType );
}

static void _requestSetTunerParameterFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestSetTunerParameterFailed( errType );
}

static void _requestGetTunerParameterFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestGetTunerParameterFailed( errType );
}

static void _requestSetTunerTimingFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestSetTunerTimingFailed( errType );
}

static void _requestGetTunerTimingFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestGetTunerTimingFailed( errType );
}

static void _requestDeletePersistentDataFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestDeletePersistentDataFailed( errType );
}

static void _requestSetWavebandGridFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestSetWavebandGridFailed( errType );
}

static void _requestSetHdBallGameModeFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestSetHdBallGameModeFailed( errType );
}

static void _requestAssignFailed( DMMAmFmTunerControlProxy* proxy, DSIResultType errType )
{
   ((CDMMAmFmTunerControlProxy*)proxy)->requestAssignFailed( errType );
}


CDMMAmFmTunerControlProxy::CDMMAmFmTunerControlProxy( )
{
   memset( (DMMAmFmTunerControlProxy*)this, 0, sizeof(DMMAmFmTunerControlProxy) );

   fnResponsePmBusCommand = _responsePmBusCommand ;
   fnResponseTestData = _responseTestData ;
   fnResponseSeekSensitivity = _responseSeekSensitivity ;
   fnResponseHdBlending = _responseHdBlending ;
   fnResponseHdCalibration = _responseHdCalibration ;
   fnResponseHdBer = _responseHdBer ;
   fnInformationHdStatus = _informationHdStatus ;
   fnInformationHdPerformance = _informationHdPerformance ;
   fnInformationHdCallToAction = _informationHdCallToAction ;
   fnInformationHdPsdChanged = _informationHdPsdChanged ;
   fnInformationHdTagging = _informationHdTagging ;
   fnResponseTunerParameter = _responseTunerParameter ;
   fnResponseTunerTiming = _responseTunerTiming ;
   fnInformationHdImage = _informationHdImage ;

   fnRequestSetAfSwitchFailed = _requestSetAfSwitchFailed ;
   fnRequestSetMultipleStationsSwitchFailed = _requestSetMultipleStationsSwitchFailed ;
   fnRequestSetRegModeFailed = _requestSetRegModeFailed ;
   fnRequestSetStereoModeFailed = _requestSetStereoModeFailed ;
   fnRequestSetHdModeFailed = _requestSetHdModeFailed ;
   fnRequestSetDiagSwitchFailed = _requestSetDiagSwitchFailed ;
   fnRequestSetTestModeFailed = _requestSetTestModeFailed ;
   fnRequestSendPmBusCommandFailed = _requestSendPmBusCommandFailed ;
   fnRequestSetSeekSensitivityFailed = _requestSetSeekSensitivityFailed ;
   fnRequestGetSeekSensitivityFailed = _requestGetSeekSensitivityFailed ;
   fnRequestSetHdBlendingFailed = _requestSetHdBlendingFailed ;
   fnRequestGetHdBlendingFailed = _requestGetHdBlendingFailed ;
   fnRequestSetHdCalibrationFailed = _requestSetHdCalibrationFailed ;
   fnRequestGetHdCalibrationFailed = _requestGetHdCalibrationFailed ;
   fnRequestSetRegionCodeFailed = _requestSetRegionCodeFailed ;
   fnRequestGetHdBerFailed = _requestGetHdBerFailed ;
   fnRequestControlHdBerFailed = _requestControlHdBerFailed ;
   fnRequestSetTunerParameterFailed = _requestSetTunerParameterFailed ;
   fnRequestGetTunerParameterFailed = _requestGetTunerParameterFailed ;
   fnRequestSetTunerTimingFailed = _requestSetTunerTimingFailed ;
   fnRequestGetTunerTimingFailed = _requestGetTunerTimingFailed ;
   fnRequestDeletePersistentDataFailed = _requestDeletePersistentDataFailed ;
   fnRequestSetWavebandGridFailed = _requestSetWavebandGridFailed ;
   fnRequestSetHdBallGameModeFailed = _requestSetHdBallGameModeFailed ;
   fnRequestAssignFailed = _requestAssignFailed ;

   fnProcessInternalEvent = _processInternalEvent ;
   fnProcessUpdateEvent = _processUpdateEvent ;
   fnComponentConnected = _componentConnected ;
   fnComponentDisconnected = _componentDisconnected ;
   fnResponseInvalid = _responseInvalid ;
   fnCleanup = _cleanup ;
}

CDMMAmFmTunerControlProxy::~CDMMAmFmTunerControlProxy()
{
}

int CDMMAmFmTunerControlProxy::start( const char* rolename )
{
   return DMMAmFmTunerControlProxy_Start( this, rolename ) ;
}

void CDMMAmFmTunerControlProxy::stop( int exitcode )
{
   DMMAmFmTunerControlProxy_Stop( this, exitcode );
}

int CDMMAmFmTunerControlProxy::postInternalEvent( int code, void* data )
{
   TRC_SCOPE(TunerService, CDMMAmFmTunerControlProxy, postInternalEvent);
   DBG_MSG(("In postIntervalEvent generated code\n"));
    return DSIPostInternalEvent( client.Channel.Master, client.Id, 0, code, data );
}

int CDMMAmFmTunerControlProxy::sendInternalEvent( int code, void* data )
{
   return DSISendInternalEvent( client.Channel.Master, client.Id, 0, code, data );
}

void CDMMAmFmTunerControlProxy::cleanup()
{
}
void CDMMAmFmTunerControlProxy::componentConnected()
{
   TRC_SCOPE(TunerService, CDMMAmFmTunerControlProxy, componentConnected);
   CTunerRequestResponseHandler* mPMain = CTunerRequestResponseHandler::GetInstance();
   bool status = true;

   mPMain->setControlComponentStatus(status);
   DBG_MSG(("CDMMAmFmTunerControlProxy: Component connected !!!\n"));

   		//std::cout<<"CDMMAmFmTunerControlProxy:Region Code Connecting from component connected: "<<std::endl;
   		// Call set region code
   		//requestSetRegionCode(DMMAmFmTunerControl_REGION_EUROPE,DMMAmFmTunerControl_COD_NONE);

   setNotification(DMMAmFmTunerControl_UPD_ID_codingData);
   setNotification(DMMAmFmTunerControl_UPD_ID_requestSetHdMode);
   setNotification(DMMAmFmTunerControl_UPD_ID_requestSetHdBallGameMode);
   setNotification(DMMAmFmTunerControl_UPD_ID_informationHdStatus);
  // setNotification(DMMAmFmTunerControl_UPD_ID_responseFieldStrengthAntenna);
   setNotification(DMMAmFmTunerControl_UPD_ID_responseTunerParameter);

   //requestSetAfSwitch(false);
}
void CDMMAmFmTunerControlProxy::processInternalEvent( int code, void* data )
{
   TRC_SCOPE(TunerService, CDMMAmFmTunerControlProxy, processInternalEvent);
   DBG_MSG(("CDMMAmFmTunerControlProxy::processInternalEvent: code %d",code));
   switch(code)
   {
     case DMMAmFmTunerControl_UPD_ID_requestSetAfSwitch:
     {
       proxy info = *(proxy*)data;
       BOOL flag = info.switchFlag;
       requestSetAfSwitch(flag);
       break;
     }
     case DMMAmFmTunerControl_UPD_ID_requestSetHdMode:
     {
       proxy info = *(proxy*)data;
       DMMAmFmTunerControl_HdMode mode = info.hdMode;
       DBG_MSG(("CDMMAmFmTunerControlProxy::DMMAmFmTunerControl_UPD_ID_requestSetHdMode %u",mode));
       requestSetHdMode(mode);
       break;
     }
     case DMMAmFmTunerControl_UPD_ID_requestSetHdBallGameMode:
     {
       proxy info = *(proxy*)data;
       DMMAmFmTunerControl_HdBallGameMode mode = info.bgMode;
       requestSetHdBallGameMode(mode);
       break;
     }
#if 0
     case DMMAmFmTunerControl_UPD_ID_requestGetFieldStrengthAntenna:
     {
       proxy info = *(proxy*)data;
       unsigned char antenna = info.antennaNo;
       DBG_MSG(("CDMMAmFmTunerControlProxy::DMMAmFmTunerControl_UPD_ID_requestGetFieldStrengthAntenna %d",antenna));
       requestGetFieldStrengthAntenna(antenna);
       break;
     }
#endif
     case DMMAmFmTunerControl_UPD_ID_requestSetTunerParameter:
     {
       DBG_MSG(("CDMMAmFmTunerControlProxy::DMMAmFmTunerControl_UPD_ID_requestSetTunerParameter"));
       proxy info = *(proxy*)data;
       int type = info.reqType;
       int val = info.value;
       DSIBuffer buf = 0;
       //buf->padding = padding;
       int size = sizeof(val);
       DSIBufferSet(buf,&val,size);
       //DBG_MSG(("CDMMAmFmTunerControlProxy::DMMAmFmTunerControl_UPD_ID_requestSetTunerParameter padding is %d",padding));
       DBG_MSG(("CDMMAmFmTunerControlProxy::DMMAmFmTunerControl_UPD_ID_requestSetTunerParameter sending request"));
       requestSetTunerParameter(type,buf);
       break;

     }
     case DMMAmFmTunerControl_UPD_ID_requestGetTunerParameter:
     {
       DBG_MSG(("CDMMAmFmTunerControlProxy::DMMAmFmTunerControl_UPD_ID_requestGetTunerParameter"));
       proxy info = *(proxy*)data;
       int type = info.reqType;
       requestGetTunerParameter(type);
       break;
     }
     case DMMAmFmTunerControl_UPD_ID_requestSetRegMode:
     {
       DBG_MSG(("CDMMAmFmTunerControlProxy::DMMAmFmTunerControl_UPD_ID_requestSetRegionCode"));
       proxy info = *(proxy*)data;
       bool flag = info.switchFlag;
       DMMAmFmTunerControl_RegMode mode;
       if(true == flag)
       {
         mode = DMMAmFmTunerControl_REGMODE_ON;
       }
       else
       {
         mode = DMMAmFmTunerControl_REGMODE_OFF;
       }
       requestSetRegMode(mode);
       break;
     }
     case DMMAmFmTunerControl_UPD_ID_requestSetRegionCode:
     {
    	DBG_MSG(("CDMMAmFmTunerControlProxy::processInternalEvent"));
    	int region = *(INT32*)data;
    	DBG_MSG(("CDMMAmFmTunerControlProxy::processInternalEvent %d",region));
		DMMAmFmTunerControl_RegionCode regionCode = DMMAmFmTunerControl_REGION_EUROPE;
		DMMAmFmTunerControl_CodingFlags codingFlags = DMMAmFmTunerControl_COD_NONE;
		CTunerServiceMain* reqMain = CTunerServiceMain::GetInstance();
		switch(region)
		{
#if 0
		 case 1:
			regionCode = DMMAmFmTunerControl_REGION_EUROPE;
			codingFlags = DMMAmFmTunerControl_COD_NONE;
			DBG_MSG(("CDMMAmFmTunerControlProxy: Region 1"));
			break;
#endif
		 case 2:
#if 0
			 if(reqMain->getHwVariant() == true)
			 {

				if(true == CTunerSeekHandler::hdMode)
				{
				  codingFlags = DMMAmFmTunerControl_COD_HD;
				  DBG_MSG(("Level C board - set the HD coding flag"));
				}
				else if(false == CTunerSeekHandler::hdMode)
				{
				   codingFlags = DMMAmFmTunerControl_COD_NONE;
				   DBG_MSG(("Level C board - do not set the HD coding flag"));
				}
			 }
			 else
			 {
				 codingFlags = DMMAmFmTunerControl_COD_NONE;
				 DBG_MSG(("Level B board - do not set the HD coding flag"));
			 }
#endif
			 codingFlags = DMMAmFmTunerControl_COD_NONE;
			 regionCode = DMMAmFmTunerControl_REGION_NORTH_AMERICA;
			// printf("CDMMAmFmTunerControlProxy: Region 2 \n");
			 DBG_MSG(("CDMMAmFmTunerControlProxy: Region 2"));
			 break;
#if 0
		 case 3:
			 regionCode = DMMAmFmTunerControl_REGION_AUSTRALIA;
			 codingFlags = DMMAmFmTunerControl_COD_NONE;
			 DBG_MSG(("CDMMAmFmTunerControlProxy: Region 3"));
			 break;
		 case 4:
			 regionCode = DMMAmFmTunerControl_REGION_JAPAN;
			 codingFlags = DMMAmFmTunerControl_COD_NONE;
			 DBG_MSG(("CDMMAmFmTunerControlProxy: Region 4"));
			 break;
		 case 5:
		 case 6:
			 regionCode = DMMAmFmTunerControl_REGION_ROW;
			 codingFlags = DMMAmFmTunerControl_COD_NONE;
			 DBG_MSG(("CDMMAmFmTunerControlProxy: Region 5 & 6"));
			 break;
#endif
		 default:
			 break;
		}

		DBG_MSG(("CDMMAmFmTunerControlProxy: In processInternalEvent Region code is: %d",regionCode));
		//printf("CDMMAmFmTunerControlProxy: In processInternalEvent Region code is: %d \n", regionCode);
		// Call set region code
		requestSetRegionCode(regionCode,codingFlags);
		break;
     }
   }
}
void CDMMAmFmTunerControlProxy::informationHdStatus( const DMMAmFmTunerControl_HdStatus& status )
{
   TRC_SCOPE(TunerService, CDMMAmFmTunerControlProxy, informationHdStatus);
   DBG_MSG(("[CDMMAmFmTunerControlProxy]:informationHdStatus"));
   DBG_MSG(("[CDMMAmFmTunerControlProxy]informationHdStatus:: HD acquisition Status is %u",(status.acquisitionStatus)));
   DBG_MSG(("[CDMMAmFmTunerControlProxy]informationHdStatus:: HD digitalAudioAcquired is %u",(status.digitalAudioAcquired)));
   std::string signalName = "infoHDStatus";
   Json::Value data;
   if(status.digitalAudioAcquired == 1)
   {
	   CTunerSeekHandler::hdStatus = true;
   }
   else
   {
	  CTunerSeekHandler::hdStatus = false;
   }
   data["hdStatus"] = (status.digitalAudioAcquired);
   CTunerRequestResponseHandler::handleNotif(signalName,data);
}

void CDMMAmFmTunerControlProxy::responseInvalid( DMMAmFmTunerControl_UpdateIdEnum id )
{
   TRC_SCOPE(TunerService, CDMMAmFmTunerControlProxy, responseInvalid);
   DBG_MSG(("[CDMMAmFmTunerControlProxy]: responseInvalid value is %d",id));
}
void CDMMAmFmTunerControlProxy::requestSetHdModeFailed( DSIResultType errType )
{
   TRC_SCOPE(TunerService, CDMMAmFmTunerControlProxy, requestSetHdModeFailed);
   DBG_MSG(("[CDMMAmFmTunerControlProxy]: requestSetHdModeFailed value is %d",errType));
}
/*
void CDMMAmFmTunerControlProxy::responseFieldStrengthAntenna(  unsigned char antenna, unsigned char fieldStrength )
{
   TRC_SCOPE(TunerService, CDMMAmFmTunerControlProxy, responseFieldStrengthAntenna);
   DBG_MSG(("[CDMMAmFmTunerControlProxy]: responseFieldStrengthAntenna value is %d",fieldStrength));
   std::string signalName = "infoFieldStrengthAntenna";
   Json::Value data;
   data["antennaNo"] = antenna;
   data["fieldStrength"] = fieldStrength;
   CTunerRequestResponseHandler::handleNotif(signalName,data);
}
*/
void CDMMAmFmTunerControlProxy::responseTunerParameter( unsigned int tunerParameter, const DSIBuffer buffer,  DMMTunerTypes_Feedback feedback )
{
   TRC_SCOPE(TunerService, CDMMAmFmTunerControlProxy, responseTunerParameter);
   DBG_MSG(("[CDMMAmFmTunerControlProxy]: responseTunerParameter the parameter is %d",tunerParameter));
   int value = *static_cast<int*>DSIBufferGet(buffer);

   DBG_MSG(("[CDMMAmFmTunerControlProxy]: The value in buffer is %d",value));
   //DSIBuffer workstream;
   //DMMAmFmTunerControlTypes_tunParamQinList qual;
   //workstream = buffer;
   //workstream >> qual;
   //DBG_MSG(("[CDMMAmFmTunerControlProxy]: responseTunerParameter, the buffer value is %d & data is %d",size,padding));
   DBG_MSG(("[CDMMAmFmTunerControlProxy]: responseTunerParameter, the feedback value is %d",feedback));
   std::string signalName = "tunerParameter";
   Json::Value data;
   data["parameter"] = tunerParameter;
   data["value"] = value;
   CTunerRequestResponseHandler::handleNotif(signalName,data);
}

