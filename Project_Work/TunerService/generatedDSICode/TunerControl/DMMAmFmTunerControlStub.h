#ifndef DMMAMFMTUNERCONTROLSTUB_H
#define DMMAMFMTUNERCONTROLSTUB_H
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2015
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 20.5.2015
 */


#include "DMMAmFmTunerControl.h"

#ifndef TDMMAmFmTunerControlStub
#define TDMMAmFmTunerControlStub struct _DMMAmFmTunerControlStub
#endif

DSI_EXTERN_C_BEGIN

/**
 * DSI Stub: DMMAmFmTunerControl
 *
 * Project independent but tuner specific interface.
 * This interface contains AM/FM/HD specific functionality which is not covered by any generic tuner interface.
 */
typedef struct _DMMAmFmTunerControlStub
{
   DSIServer server ;

   /**
    * Implementation version of this server
    */
   DSIVersionInfo implVersion ;

   /**
    * True: Frequency can be automatically switched to better alternative frequency.
    * False: Stay on tuned frequency.
    */
   DSIBool afSwitch ;

   /**
    * True: Insert all alternative frequencies of one station into FM station list.
    * False: Only one station per PI.
    */
   DSIBool multipleStationsSwitch ;

   /**
    * The currently adjusted regionalization mode (how to handle regionalized stations).
    */
   DMMAmFmTunerControl_RegMode regMode ;

   /**
    * The currently adjusted stereo mode state.
    */
   DMMAmFmTunerControl_StereoMode stereoMode ;

   /**
    * The current stereo state.
    */
   DSIBool stereoState ;

   /**
    * The currently adjusted HD mode.
    */
   DMMAmFmTunerControl_HdMode hdMode ;

   /**
    * The current device state. Requests can only be performed if the device is ready. Reasons for a not ready devices are e.g. startup phase, undervoltage etc..
    */
   DMMAmFmTunerControl_DeviceState deviceState ;

   /**
    * True: Diagnosis mode: diversity off and no background activity
    * False: Standard mode
    */
   DSIBool diagSwitch ;

   /**
    * Waveband limits and step widths. Not supported wavebands have stepWidth=0.  Use Waveband enum for access.
    */
   DMMAmFmTunerControl_WavebandGrids wavebandGrids ;

   /**
    * HW error indication
    */
   DMMAmFmTunerControl_HwError hwError ;

   /**
    * Hardware and firmware versions (for index within vector refer to enum VersionIndex).
    */
   DMMAmFmTunerControl_Strings versions ;

   /**
    * The coding data
    */
   DMMAmFmTunerControl_CodingData codingData ;

   /**
    * The currently adjusted HD ball game mode.
    */
   DMMAmFmTunerControl_HdBallGameMode hdBallGameMode ;

   /**
    * Tuner status information
    */
   DMMAmFmTunerControl_TunerStates tunerStateAttr ;

   /**
    * Internal: Arbitration information of shared resources 
    */
   DMMAmFmTunerControl_ArbitrationInfo arbitrationInfo ;

   /**
    * RDS clock time
    */
   DMMAmFmTunerControl_RdsClockTime rdsClockTime ;

   /**
    * List of power sync frequencies.  The specific order and meaning of the entries is defined by a project specific enum PowerSyncIndex within DMMAmFmTunerControlTypes.
    */
   DMMTunerTypes_UInt32s powerSync ;


   /**
    * Set switch to enable/disable alternative frequency following. The current state is reflected by afSwitch attribute.
    */
   void (*fnRequestSetAfSwitch)( TDMMAmFmTunerControlStub* stub,  DSIBool enable );

   /**
    * Set switch whether all alternative frequencies of one station shall be inserted into FM station list or not. The current state is reflected by multipleStationsSwitch attribute.
    */
   void (*fnRequestSetMultipleStationsSwitch)( TDMMAmFmTunerControlStub* stub,  DSIBool enable );

   /**
    * Set desired regionalization mode. The current mode is reflected by regMode attribute.
    */
   void (*fnRequestSetRegMode)( TDMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_RegMode regMode );

   /**
    * Set new desired stereo mode. The current mode is reflected by stereoMode attribute.
    */
   void (*fnRequestSetStereoMode)( TDMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_StereoMode stereoMode );

   /**
    * Set new desired HD mode. The current mode is reflected by hdMode attribute.
    */
   void (*fnRequestSetHdMode)( TDMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_HdMode hdMode );

   /**
    * Set switch to enable/disable diagnosis mode. The current state is reflected by diagSwitch attribute. Different behavior for Tuner32 and OOTuner implemenation, refert to "enable" parameter.
    */
   void (*fnRequestSetDiagSwitch)( TDMMAmFmTunerControlStub* stub,  DSIBool enable );

   /**
    * Select a specific test mode, resulting test data is sent via testData response (don't forget to set notification).
    */
   void (*fnRequestSetTestMode)( TDMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_TestMode testMode,  unsigned int index );

   /**
    * Send a PMBus command to the tuner device. Don't forget to set notifcation for pmBusCommand response in order to get the resulting message.
    */
   void (*fnRequestSendPmBusCommand)( TDMMAmFmTunerControlStub* stub, const DSIBuffer commandStream );

   void (*fnRequestSendPmBusCommandEx)( TDMMAmFmTunerControlStub* stub, const void* commandStream, int commandStreamSize );

   /**
    * Configure the seek/scan stop thresholds for all wavebands. The current settings can be queried  by getSeekSensitivity.
    */
   void (*fnRequestSetSeekSensitivity)( TDMMAmFmTunerControlStub* stub, const DMMAmFmTunerControl_StopLevels stopLevels );

   void (*fnRequestSetSeekSensitivityEx)( TDMMAmFmTunerControlStub* stub, const DMMAmFmTunerControl_StopLevel* stopLevels, int stopLevelsSize );

   /**
    * Get the current seek/scan thresholds via seekSensitivity response (don't forget to set notification).
    */
   void (*fnRequestGetSeekSensitivity)( TDMMAmFmTunerControlStub* stub );

   /**
    * Set blending mode.
    */
   void (*fnRequestSetHdBlending)( TDMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_HdBlending hdBlending );

   /**
    * Get the current blending mode via hdSwVersion response (don't forget to set notification).
    */
   void (*fnRequestGetHdBlending)( TDMMAmFmTunerControlStub* stub );

   /**
    * Enable/disable HD calibration functionality.
    */
   void (*fnRequestSetHdCalibration)( TDMMAmFmTunerControlStub* stub,  DSIBool enable );

   /**
    * Get the current HD calibration mode via hdCalibration response (don't forget to set notification).
    */
   void (*fnRequestGetHdCalibration)( TDMMAmFmTunerControlStub* stub );

   /**
    * Set RegionCode.
    */
   void (*fnRequestSetRegionCode)( TDMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_RegionCode regionCode,  unsigned int flags );

   /**
    * Get HD bit error rates
    */
   void (*fnRequestGetHdBer)( TDMMAmFmTunerControlStub* stub );

   /**
    * Control (start / stop / reset) HD bit error measurement
    */
   void (*fnRequestControlHdBer)( TDMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_HdBerMode hdBerMode );

   /**
    * OOTuner: Manipulate tuner engineering parameter (for experts only)
    */
   void (*fnRequestSetTunerParameter)( TDMMAmFmTunerControlStub* stub,  unsigned int tunerParameter, const DSIBuffer buffer );

   void (*fnRequestSetTunerParameterEx)( TDMMAmFmTunerControlStub* stub,  unsigned int tunerParameter, const void* buffer, int bufferSize );

   /**
    * OOTuner: Get tuner engineering parameter
    */
   void (*fnRequestGetTunerParameter)( TDMMAmFmTunerControlStub* stub,  unsigned int tunerParameter );

   /**
    * OOTuner: Manipulate tuner timing parameter (for experts only)
    */
   void (*fnRequestSetTunerTiming)( TDMMAmFmTunerControlStub* stub,  unsigned int tunerTiming,  unsigned int value );

   /**
    * OOTuner: Get tuner timing parameter
    */
   void (*fnRequestGetTunerTiming)( TDMMAmFmTunerControlStub* stub,  unsigned int tunerTiming );

   /**
    * Delete persistent data
    */
   void (*fnRequestDeletePersistentData)( TDMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_PersistenceScope scope );

   /**
    * Configure waveband settings for specific waveband, becomes active with next setRegionCode (see MSCs).
    */
   void (*fnRequestSetWavebandGrid)( TDMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_Waveband waveband, const DMMAmFmTunerControl_WavebandGrid* grid );

   /**
    * Set new desired HD ball game mode. The current mode is reflected by hdBallGameMode attribute.
    */
   void (*fnRequestSetHdBallGameMode)( TDMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_HdBallGameMode hdBallGameMode );

   /**
    * Internal: Assign/withdraw resource 
    */
   void (*fnRequestAssign)( TDMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_SharedResources resource,  DSIBool grant );

   /**
    * Configure special coding set via TunerParameter and TunerTiming, becomes active with next setRegionCode (see MSCs).
    */
   void (*fnRequestSetSpecialCoding)( TDMMAmFmTunerControlStub* stub, const DMMAmFmTunerControl_TunerParameters parameters, const DMMAmFmTunerControl_TunerTimings timings );

   void (*fnRequestSetSpecialCodingEx)( TDMMAmFmTunerControlStub* stub, const DMMAmFmTunerControl_TunerParameter* parameters, int parametersSize, const DMMAmFmTunerControl_TunerTiming* timings, int timingsSize );

   /**
    * ONLY for projects without dedicated persistency component (using simple files system persistency instead): Store persistent data, caller has to wait for response before shutting down system.
    */
   void (*fnRequestStorePersistentData)( TDMMAmFmTunerControlStub* stub );


   /**
    * Called when the stub received an internal event
    */
   void (*fnProcessInternalEvent) ( TDMMAmFmTunerControlStub* stub, int id, void* data ) ;

   /**
    * Called right before the stub thread ends
    */
   void (*fnCleanup) ( TDMMAmFmTunerControlStub* stub ) ;

} DMMAmFmTunerControlStub ;

/**
 * The response of the tuner device for a PMBus command.
 */
void DMMAmFmTunerControl_ResponsePmBusCommand( TDMMAmFmTunerControlStub* stub, const DSIBuffer resultStream );

void DMMAmFmTunerControl_ResponsePmBusCommandEx( TDMMAmFmTunerControlStub* stub, const void* resultStream, int resultStreamSize );

/**
 * Raw test data sent by device if enabled via setTestMode.
 */
void DMMAmFmTunerControl_ResponseTestData( TDMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_TestMode testMode,  unsigned int index, const DSIBuffer data );

void DMMAmFmTunerControl_ResponseTestDataEx( TDMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_TestMode testMode,  unsigned int index, const void* data, int dataSize );

/**
 * The current seek sensitivity settings.
 */
void DMMAmFmTunerControl_ResponseSeekSensitivity( TDMMAmFmTunerControlStub* stub, const DMMAmFmTunerControl_StopLevels stopLevels );

void DMMAmFmTunerControl_ResponseSeekSensitivityEx( TDMMAmFmTunerControlStub* stub, const DMMAmFmTunerControl_StopLevel* stopLevels, int stopLevelsSize );

/**
 * The current blending mode.
 */
void DMMAmFmTunerControl_ResponseHdBlending( TDMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_HdBlending hdBlending );

/**
 * The HD calibration state.
 */
void DMMAmFmTunerControl_ResponseHdCalibration( TDMMAmFmTunerControlStub* stub,  DSIBool enabled );

/**
 * The HD bit error rates
 */
void DMMAmFmTunerControl_ResponseHdBer( TDMMAmFmTunerControlStub* stub, const DMMAmFmTunerControl_HdBers bers );

void DMMAmFmTunerControl_ResponseHdBerEx( TDMMAmFmTunerControlStub* stub, const DMMAmFmTunerControl_HdBer* bers, int bersSize );

/**
 * HD status data
 */
void DMMAmFmTunerControl_InformationHdStatus( TDMMAmFmTunerControlStub* stub, const DMMAmFmTunerControl_HdStatus* status );

/**
 * HD performance data
 */
void DMMAmFmTunerControl_InformationHdPerformance( TDMMAmFmTunerControlStub* stub, const DMMAmFmTunerControl_HdPerformance* performance );

/**
 * HD call to action information for decrypted services
 */
void DMMAmFmTunerControl_InformationHdCallToAction( TDMMAmFmTunerControlStub* stub,  unsigned int frequency,  unsigned char serviceId,  unsigned int caServiceId,  unsigned int radioId, const char* message );

/**
 * HD program service data changed (trigger)
 */
void DMMAmFmTunerControl_InformationHdPsdChanged( TDMMAmFmTunerControlStub* stub,  unsigned int frequency,  unsigned char service );

/**
 * Token for HD iTunes tagging
 */
void DMMAmFmTunerControl_InformationHdTagging( TDMMAmFmTunerControlStub* stub, const DMMAmFmTunerControl_HdToken* token );

/**
 * Response of set/getTunerParameter
 */
void DMMAmFmTunerControl_ResponseTunerParameter( TDMMAmFmTunerControlStub* stub,  unsigned int tunerParameter, const DSIBuffer buffer,  DMMTunerTypes_Feedback feedback );

void DMMAmFmTunerControl_ResponseTunerParameterEx( TDMMAmFmTunerControlStub* stub,  unsigned int tunerParameter, const void* buffer, int bufferSize,  DMMTunerTypes_Feedback feedback );

/**
 * Response of set/getTunerTiming
 */
void DMMAmFmTunerControl_ResponseTunerTiming( TDMMAmFmTunerControlStub* stub,  unsigned int tunerTiming,  unsigned int value,  DMMTunerTypes_Feedback feedback );

/**
 * An HD image (station logo or cover art) is available.
    * !!! Deprecated: Use DMMTunerStationImage instead !!!
    * 
    * DEPRECATED: Use DMMTunerStationImage instead
 */
void DMMAmFmTunerControl_InformationHdImage( TDMMAmFmTunerControlStub* stub, const DMMAmFmTunerControl_HdImage* image );

/**
 * Data storing complete.
 */
void DMMAmFmTunerControl_ResponseStorePersistentData( TDMMAmFmTunerControlStub* stub );


/**
 * Sends a notification to all clients that are interested.
 */
void DMMAmFmTunerControlStub_SendNotification( TDMMAmFmTunerControlStub* stub, DMMAmFmTunerControl_UpdateIdEnum id );

/**
 * Initailzes the stub
 */
int DMMAmFmTunerControlStub_Init( TDMMAmFmTunerControlStub* stub, const char* rolename );

/**
 * Frees the stub
 */
void DMMAmFmTunerControlStub_Free( TDMMAmFmTunerControlStub* stub );

/**
 * Starts the DMMAmFmTunerControl stub and enters the message loop. This functions
 * does not return until void DMMAmFmTunerControlStubStop() is called or an error
 * during startup occures.
 */
int DMMAmFmTunerControlStub_Start( TDMMAmFmTunerControlStub* stub, const char* rolename );

/**
 * Stops the DMMAmFmTunerControl stub. This function ends the stubs message loop.
 * DMMAmFmTunerControlStub_Start() returns the exitcode.
 */
int DMMAmFmTunerControlStub_Stop( TDMMAmFmTunerControlStub* stub, int exitcode );

/**
 * Respond with an error message.
 */
void DMMAmFmTunerControlSendError( TDMMAmFmTunerControlStub* stub, DMMAmFmTunerControl_UpdateIdEnum id );

/**
 * Posts an internal event in the stubs message queue and returns immediately.
 */
int DMMAmFmTunerControlStub_PostInternalEvent( TDMMAmFmTunerControlStub* stub, int code, void* data );

/**
 * Send an internal event to the stub and waits until the stub handled it. Do not call this
 * function from within the stubs task. This will lead into a dead lock.
 */
int DMMAmFmTunerControlStub_SendInternalEvent( TDMMAmFmTunerControlStub* stub, int code, void* data );

#define DMMAmFmTunerControlStub_RegisterCurrentSession( stub ) DSIServerRegisterCurrentSession( &stub->server )
#define DMMAmFmTunerControlStub_ClearActiveSessions( stub ) DSIServerClearActiveSessions( &stub->server )
#define DMMAmFmTunerControlStub_AddActiveSession( stub, sessionId ) DSIServerAddActiveSession( &stub->server, sessionId )
#define DMMAmFmTunerControlStub_IsSessionActive( stub, sessionId ) DSIServerIsSessionActive( &stub->server, sessionId )

#define DMMAmFmTunerControlStub_UnblockRequest( stub ) DSIServerUnblockRequest( &stub->server )
#define DMMAmFmTunerControlStub_PrepareResponse( stub, sessionHandle ) DSIServerPrepareResponse( &stub->server, sessionHandle )

DSI_EXTERN_C_END

#endif // DMMAMFMTUNERCONTROLSTUB_H
