#ifndef DMMAMFMTUNERCONTROLPROXY_H
#define DMMAMFMTUNERCONTROLPROXY_H
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2015
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 20.5.2015
 */


#include "DMMAmFmTunerControl.h"

#ifndef TDMMAmFmTunerControlProxy
#   define TDMMAmFmTunerControlProxy struct _DMMAmFmTunerControlProxy
#endif

DSI_EXTERN_C_BEGIN

/*
 * Only the DSI framework is allowed to modify the attributes.
 * For the user of the proxy the attributes are constant!
 */
#ifndef DSICONST
#ifdef __cplusplus
   #define DSICONST
#else
   #define DSICONST const
#endif
#endif

/**
 * DSI Stub: DMMAmFmTunerControl
 *
 * Project independent but tuner specific interface.
 * This interface contains AM/FM/HD specific functionality which is not covered by any generic tuner interface.
 */

typedef struct _DMMAmFmTunerControlProxy
{
   /* DSICONST */ DSIClient client ;


   /**
    * True: Frequency can be automatically switched to better alternative frequency.
    * False: Stay on tuned frequency.
    */
   DSICONST DSIBool afSwitch ;
   DSICONST DataStateType afSwitchState ;

   /**
    * True: Insert all alternative frequencies of one station into FM station list.
    * False: Only one station per PI.
    */
   DSICONST DSIBool multipleStationsSwitch ;
   DSICONST DataStateType multipleStationsSwitchState ;

   /**
    * The currently adjusted regionalization mode (how to handle regionalized stations).
    */
   DSICONST DMMAmFmTunerControl_RegMode regMode ;
   DSICONST DataStateType regModeState ;

   /**
    * The currently adjusted stereo mode state.
    */
   DSICONST DMMAmFmTunerControl_StereoMode stereoMode ;
   DSICONST DataStateType stereoModeState ;

   /**
    * The current stereo state.
    */
   DSICONST DSIBool stereoState ;
   DSICONST DataStateType stereoStateState ;

   /**
    * The currently adjusted HD mode.
    */
   DSICONST DMMAmFmTunerControl_HdMode hdMode ;
   DSICONST DataStateType hdModeState ;

   /**
    * The current device state. Requests can only be performed if the device is ready. Reasons for a not ready devices are e.g. startup phase, undervoltage etc..
    */
   DSICONST DMMAmFmTunerControl_DeviceState deviceState ;
   DSICONST DataStateType deviceStateState ;

   /**
    * True: Diagnosis mode: diversity off and no background activity
    * False: Standard mode
    */
   DSICONST DSIBool diagSwitch ;
   DSICONST DataStateType diagSwitchState ;

   /**
    * Waveband limits and step widths. Not supported wavebands have stepWidth=0.  Use Waveband enum for access.
    */
   DSICONST DMMAmFmTunerControl_WavebandGrids wavebandGrids ;
   DSICONST DataStateType wavebandGridsState ;

   /**
    * HW error indication
    */
   DSICONST DMMAmFmTunerControl_HwError hwError ;
   DSICONST DataStateType hwErrorState ;

   /**
    * Hardware and firmware versions (for index within vector refer to enum VersionIndex).
    */
   DSICONST DMMAmFmTunerControl_Strings versions ;
   DSICONST DataStateType versionsState ;

   /**
    * The coding data
    */
   DSICONST DMMAmFmTunerControl_CodingData codingData ;
   DSICONST DataStateType codingDataState ;

   /**
    * The currently adjusted HD ball game mode.
    */
   DSICONST DMMAmFmTunerControl_HdBallGameMode hdBallGameMode ;
   DSICONST DataStateType hdBallGameModeState ;

   /**
    * Tuner status information
    */
   DSICONST DMMAmFmTunerControl_TunerStates tunerStateAttr ;
   DSICONST DataStateType tunerStateAttrState ;

   /**
    * Internal: Arbitration information of shared resources 
    */
   DSICONST DMMAmFmTunerControl_ArbitrationInfo arbitrationInfo ;
   DSICONST DataStateType arbitrationInfoState ;

   /**
    * RDS clock time
    */
   DSICONST DMMAmFmTunerControl_RdsClockTime rdsClockTime ;
   DSICONST DataStateType rdsClockTimeState ;

   /**
    * List of power sync frequencies.  The specific order and meaning of the entries is defined by a project specific enum PowerSyncIndex within DMMAmFmTunerControlTypes.
    */
   DSICONST DMMTunerTypes_UInt32s powerSync ;
   DSICONST DataStateType powerSyncState ;



   /**
    * The response of the tuner device for a PMBus command.
    */
   void (*fnResponsePmBusCommand)( TDMMAmFmTunerControlProxy* proxy, const DSIBuffer resultStream );

   void (*fnResponsePmBusCommandEx)( TDMMAmFmTunerControlProxy* proxy, const void* resultStream, int resultStreamSize );
   
   /**
    * Raw test data sent by device if enabled via setTestMode.
    */
   void (*fnResponseTestData)( TDMMAmFmTunerControlProxy* proxy,  DMMAmFmTunerControl_TestMode testMode,  unsigned int index, const DSIBuffer data );

   void (*fnResponseTestDataEx)( TDMMAmFmTunerControlProxy* proxy,  DMMAmFmTunerControl_TestMode testMode,  unsigned int index, const void* data, int dataSize );
   
   /**
    * The current seek sensitivity settings.
    */
   void (*fnResponseSeekSensitivity)( TDMMAmFmTunerControlProxy* proxy, const DMMAmFmTunerControl_StopLevels stopLevels );

   void (*fnResponseSeekSensitivityEx)( TDMMAmFmTunerControlProxy* proxy, const DMMAmFmTunerControl_StopLevel* stopLevels, int stopLevelsSize );
   
   /**
    * The current blending mode.
    */
   void (*fnResponseHdBlending)( TDMMAmFmTunerControlProxy* proxy,  DMMAmFmTunerControl_HdBlending hdBlending );

   /**
    * The HD calibration state.
    */
   void (*fnResponseHdCalibration)( TDMMAmFmTunerControlProxy* proxy,  DSIBool enabled );

   /**
    * The HD bit error rates
    */
   void (*fnResponseHdBer)( TDMMAmFmTunerControlProxy* proxy, const DMMAmFmTunerControl_HdBers bers );

   void (*fnResponseHdBerEx)( TDMMAmFmTunerControlProxy* proxy, const DMMAmFmTunerControl_HdBer* bers, int bersSize );
   
   /**
    * HD status data
    */
   void (*fnInformationHdStatus)( TDMMAmFmTunerControlProxy* proxy, const DMMAmFmTunerControl_HdStatus* status );

   /**
    * HD performance data
    */
   void (*fnInformationHdPerformance)( TDMMAmFmTunerControlProxy* proxy, const DMMAmFmTunerControl_HdPerformance* performance );

   /**
    * HD call to action information for decrypted services
    */
   void (*fnInformationHdCallToAction)( TDMMAmFmTunerControlProxy* proxy,  unsigned int frequency,  unsigned char serviceId,  unsigned int caServiceId,  unsigned int radioId, const char* message );

   /**
    * HD program service data changed (trigger)
    */
   void (*fnInformationHdPsdChanged)( TDMMAmFmTunerControlProxy* proxy,  unsigned int frequency,  unsigned char service );

   /**
    * Token for HD iTunes tagging
    */
   void (*fnInformationHdTagging)( TDMMAmFmTunerControlProxy* proxy, const DMMAmFmTunerControl_HdToken* token );

   /**
    * Response of set/getTunerParameter
    */
   void (*fnResponseTunerParameter)( TDMMAmFmTunerControlProxy* proxy,  unsigned int tunerParameter, const DSIBuffer buffer,  DMMTunerTypes_Feedback feedback );

   void (*fnResponseTunerParameterEx)( TDMMAmFmTunerControlProxy* proxy,  unsigned int tunerParameter, const void* buffer, int bufferSize,  DMMTunerTypes_Feedback feedback );
   
   /**
    * Response of set/getTunerTiming
    */
   void (*fnResponseTunerTiming)( TDMMAmFmTunerControlProxy* proxy,  unsigned int tunerTiming,  unsigned int value,  DMMTunerTypes_Feedback feedback );

   /**
    * An HD image (station logo or cover art) is available.
    * !!! Deprecated: Use DMMTunerStationImage instead !!!
    * 
    * DEPRECATED: Use DMMTunerStationImage instead
    */
   void (*fnInformationHdImage)( TDMMAmFmTunerControlProxy* proxy, const DMMAmFmTunerControl_HdImage* image );

   /**
    * Data storing complete.
    */
   void (*fnResponseStorePersistentData)( TDMMAmFmTunerControlProxy* proxy );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetAfSwitch.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSetAfSwitchFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetMultipleStationsSwitch.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSetMultipleStationsSwitchFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetRegMode.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSetRegModeFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetStereoMode.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSetStereoModeFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetHdMode.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSetHdModeFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetDiagSwitch.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSetDiagSwitchFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetTestMode.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSetTestModeFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SendPmBusCommand.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSendPmBusCommandFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetSeekSensitivity.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSetSeekSensitivityFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_GetSeekSensitivity.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestGetSeekSensitivityFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetHdBlending.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSetHdBlendingFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_GetHdBlending.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestGetHdBlendingFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetHdCalibration.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSetHdCalibrationFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_GetHdCalibration.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestGetHdCalibrationFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetRegionCode.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSetRegionCodeFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_GetHdBer.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestGetHdBerFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_ControlHdBer.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestControlHdBerFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetTunerParameter.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSetTunerParameterFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_GetTunerParameter.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestGetTunerParameterFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetTunerTiming.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSetTunerTimingFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_GetTunerTiming.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestGetTunerTimingFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_DeletePersistentData.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestDeletePersistentDataFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetWavebandGrid.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSetWavebandGridFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetHdBallGameMode.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSetHdBallGameModeFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_Assign.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestAssignFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetSpecialCoding.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestSetSpecialCodingFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_StorePersistentData.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   void (*fnRequestStorePersistentDataFailed)( TDMMAmFmTunerControlProxy* proxy, DSIResultType errType );

   /**
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler
    * with a response id as argument.
    *
    * @param id The element which caused the error.
    */
   void (*fnResponseInvalid)( TDMMAmFmTunerControlProxy* proxy, DMMAmFmTunerControl_UpdateIdEnum id );

   /**
    * Called when the server connected to the proxy
    */
   void (*fnComponentConnected)( TDMMAmFmTunerControlProxy* proxy );

   /**
    * Called when the server disconnects from the proxy
    */
   void (*fnComponentDisconnected)( TDMMAmFmTunerControlProxy* proxy );

   /**
    * Called when an update event occurs.
    */
   void (*fnProcessUpdateEvent) ( TDMMAmFmTunerControlProxy* proxy, DMMAmFmTunerControl_UpdateIdEnum updateId ) ;

   /**
    * Called when the proxy received an internal event
    */
   void (*fnProcessInternalEvent) ( TDMMAmFmTunerControlProxy* proxy, int id, void* data ) ;

   /**
    * Called right before the proxy thread ends
    */
   void (*fnCleanup) ( TDMMAmFmTunerControlProxy* proxy ) ;

} DMMAmFmTunerControlProxy ;

/**
 * Set switch to enable/disable alternative frequency following. The current state is reflected by afSwitch attribute.
 */
int DMMAmFmTunerControl_RequestSetAfSwitch( TDMMAmFmTunerControlProxy* proxy,  DSIBool enable );



/**
 * Set switch whether all alternative frequencies of one station shall be inserted into FM station list or not. The current state is reflected by multipleStationsSwitch attribute.
 */
int DMMAmFmTunerControl_RequestSetMultipleStationsSwitch( TDMMAmFmTunerControlProxy* proxy,  DSIBool enable );



/**
 * Set desired regionalization mode. The current mode is reflected by regMode attribute.
 */
int DMMAmFmTunerControl_RequestSetRegMode( TDMMAmFmTunerControlProxy* proxy,  DMMAmFmTunerControl_RegMode regMode );



/**
 * Set new desired stereo mode. The current mode is reflected by stereoMode attribute.
 */
int DMMAmFmTunerControl_RequestSetStereoMode( TDMMAmFmTunerControlProxy* proxy,  DMMAmFmTunerControl_StereoMode stereoMode );



/**
 * Set new desired HD mode. The current mode is reflected by hdMode attribute.
 */
int DMMAmFmTunerControl_RequestSetHdMode( TDMMAmFmTunerControlProxy* proxy,  DMMAmFmTunerControl_HdMode hdMode );



/**
 * Set switch to enable/disable diagnosis mode. The current state is reflected by diagSwitch attribute. Different behavior for Tuner32 and OOTuner implemenation, refert to "enable" parameter.
 */
int DMMAmFmTunerControl_RequestSetDiagSwitch( TDMMAmFmTunerControlProxy* proxy,  DSIBool enable );



/**
 * Select a specific test mode, resulting test data is sent via testData response (don't forget to set notification).
 */
int DMMAmFmTunerControl_RequestSetTestMode( TDMMAmFmTunerControlProxy* proxy,  DMMAmFmTunerControl_TestMode testMode,  unsigned int index );



/**
 * Send a PMBus command to the tuner device. Don't forget to set notifcation for pmBusCommand response in order to get the resulting message.
 */
int DMMAmFmTunerControl_RequestSendPmBusCommand( TDMMAmFmTunerControlProxy* proxy, const DSIBuffer commandStream );

int DMMAmFmTunerControl_RequestSendPmBusCommandEx( TDMMAmFmTunerControlProxy* proxy, const void* commandStream, int commandStreamSize );


/**
 * Configure the seek/scan stop thresholds for all wavebands. The current settings can be queried  by getSeekSensitivity.
 */
int DMMAmFmTunerControl_RequestSetSeekSensitivity( TDMMAmFmTunerControlProxy* proxy, const DMMAmFmTunerControl_StopLevels stopLevels );

int DMMAmFmTunerControl_RequestSetSeekSensitivityEx( TDMMAmFmTunerControlProxy* proxy, const DMMAmFmTunerControl_StopLevel* stopLevels, int stopLevelsSize );


/**
 * Get the current seek/scan thresholds via seekSensitivity response (don't forget to set notification).
 */
int DMMAmFmTunerControl_RequestGetSeekSensitivity( TDMMAmFmTunerControlProxy* proxy );



/**
 * Set blending mode.
 */
int DMMAmFmTunerControl_RequestSetHdBlending( TDMMAmFmTunerControlProxy* proxy,  DMMAmFmTunerControl_HdBlending hdBlending );



/**
 * Get the current blending mode via hdSwVersion response (don't forget to set notification).
 */
int DMMAmFmTunerControl_RequestGetHdBlending( TDMMAmFmTunerControlProxy* proxy );



/**
 * Enable/disable HD calibration functionality.
 */
int DMMAmFmTunerControl_RequestSetHdCalibration( TDMMAmFmTunerControlProxy* proxy,  DSIBool enable );



/**
 * Get the current HD calibration mode via hdCalibration response (don't forget to set notification).
 */
int DMMAmFmTunerControl_RequestGetHdCalibration( TDMMAmFmTunerControlProxy* proxy );



/**
 * Set RegionCode.
 */
int DMMAmFmTunerControl_RequestSetRegionCode( TDMMAmFmTunerControlProxy* proxy,  DMMAmFmTunerControl_RegionCode regionCode,  unsigned int flags );



/**
 * Get HD bit error rates
 */
int DMMAmFmTunerControl_RequestGetHdBer( TDMMAmFmTunerControlProxy* proxy );



/**
 * Control (start / stop / reset) HD bit error measurement
 */
int DMMAmFmTunerControl_RequestControlHdBer( TDMMAmFmTunerControlProxy* proxy,  DMMAmFmTunerControl_HdBerMode hdBerMode );



/**
 * OOTuner: Manipulate tuner engineering parameter (for experts only)
 */
int DMMAmFmTunerControl_RequestSetTunerParameter( TDMMAmFmTunerControlProxy* proxy,  unsigned int tunerParameter, const DSIBuffer buffer );

int DMMAmFmTunerControl_RequestSetTunerParameterEx( TDMMAmFmTunerControlProxy* proxy,  unsigned int tunerParameter, const void* buffer, int bufferSize );


/**
 * OOTuner: Get tuner engineering parameter
 */
int DMMAmFmTunerControl_RequestGetTunerParameter( TDMMAmFmTunerControlProxy* proxy,  unsigned int tunerParameter );



/**
 * OOTuner: Manipulate tuner timing parameter (for experts only)
 */
int DMMAmFmTunerControl_RequestSetTunerTiming( TDMMAmFmTunerControlProxy* proxy,  unsigned int tunerTiming,  unsigned int value );



/**
 * OOTuner: Get tuner timing parameter
 */
int DMMAmFmTunerControl_RequestGetTunerTiming( TDMMAmFmTunerControlProxy* proxy,  unsigned int tunerTiming );



/**
 * Delete persistent data
 */
int DMMAmFmTunerControl_RequestDeletePersistentData( TDMMAmFmTunerControlProxy* proxy,  DMMAmFmTunerControl_PersistenceScope scope );



/**
 * Configure waveband settings for specific waveband, becomes active with next setRegionCode (see MSCs).
 */
int DMMAmFmTunerControl_RequestSetWavebandGrid( TDMMAmFmTunerControlProxy* proxy,  DMMAmFmTunerControl_Waveband waveband, const DMMAmFmTunerControl_WavebandGrid* grid );



/**
 * Set new desired HD ball game mode. The current mode is reflected by hdBallGameMode attribute.
 */
int DMMAmFmTunerControl_RequestSetHdBallGameMode( TDMMAmFmTunerControlProxy* proxy,  DMMAmFmTunerControl_HdBallGameMode hdBallGameMode );



/**
 * Internal: Assign/withdraw resource 
 */
int DMMAmFmTunerControl_RequestAssign( TDMMAmFmTunerControlProxy* proxy,  DMMAmFmTunerControl_SharedResources resource,  DSIBool grant );



/**
 * Configure special coding set via TunerParameter and TunerTiming, becomes active with next setRegionCode (see MSCs).
 */
int DMMAmFmTunerControl_RequestSetSpecialCoding( TDMMAmFmTunerControlProxy* proxy, const DMMAmFmTunerControl_TunerParameters parameters, const DMMAmFmTunerControl_TunerTimings timings );

int DMMAmFmTunerControl_RequestSetSpecialCodingEx( TDMMAmFmTunerControlProxy* proxy, const DMMAmFmTunerControl_TunerParameter* parameters, int parametersSize, const DMMAmFmTunerControl_TunerTiming* timings, int timingsSize );


/**
 * ONLY for projects without dedicated persistency component (using simple files system persistency instead): Store persistent data, caller has to wait for response before shutting down system.
 */
int DMMAmFmTunerControl_RequestStorePersistentData( TDMMAmFmTunerControlProxy* proxy );





/* -------------------------------------------------------------------------------
 *  notifications
 * ------------------------------------------------------------------------------- */

void DMMAmFmTunerControlProxy_SetNotification( TDMMAmFmTunerControlProxy* proxy, DMMAmFmTunerControl_UpdateIdEnum updateId );
void DMMAmFmTunerControlProxy_ClearNotification( TDMMAmFmTunerControlProxy* proxy, DMMAmFmTunerControl_UpdateIdEnum updateId );
void DMMAmFmTunerControlProxy_ClearAllNotifications( TDMMAmFmTunerControlProxy* proxy );


/* -------------------------------------------------------------------------------
 *  (de)initialization
 * ------------------------------------------------------------------------------- */

int DMMAmFmTunerControlProxy_Init( TDMMAmFmTunerControlProxy* proxy, const char* rolename );
void DMMAmFmTunerControlProxy_Free( TDMMAmFmTunerControlProxy* proxy  );

int DMMAmFmTunerControlProxy_Start( TDMMAmFmTunerControlProxy* proxy, const char* rolename );
int DMMAmFmTunerControlProxy_Stop( TDMMAmFmTunerControlProxy* proxy, int exitcode );

int DMMAmFmTunerControlProxy_PostInternalEvent( TDMMAmFmTunerControlProxy* proxy, int code, void* data );
int DMMAmFmTunerControlProxy_SendInternalEvent( TDMMAmFmTunerControlProxy* proxy, int code, void* data );


DSI_EXTERN_C_END

#endif // DMMAMFMTUNERCONTROLPROXY_H
