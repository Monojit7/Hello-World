 
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2015
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 15.1.2015
 */


#include "CDMMAmFmTunerControlStub.hpp"
#include <string.h>

static void _requestSetAfSwitch( DMMAmFmTunerControlStub* stub,  DSIBool enable )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestSetAfSwitch( enable ) ;
}

static void _requestSetMultipleStationsSwitch( DMMAmFmTunerControlStub* stub,  DSIBool enable )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestSetMultipleStationsSwitch( enable ) ;
}

static void _requestSetRegMode( DMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_RegMode regMode )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestSetRegMode( regMode ) ;
}

static void _requestSetStereoMode( DMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_StereoMode stereoMode )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestSetStereoMode( stereoMode ) ;
}

static void _requestSetHdMode( DMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_HdMode hdMode )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestSetHdMode( hdMode ) ;
}

static void _requestSetDiagSwitch( DMMAmFmTunerControlStub* stub,  DSIBool enable )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestSetDiagSwitch( enable ) ;
}

static void _requestSetTestMode( DMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_TestMode testMode,  unsigned int index )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestSetTestMode( testMode, index ) ;
}

static void _requestSendPmBusCommand( DMMAmFmTunerControlStub* stub, const DSIBuffer commandStream )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestSendPmBusCommand( commandStream ) ;
}

static void _requestSetSeekSensitivity( DMMAmFmTunerControlStub* stub, const DMMAmFmTunerControl_StopLevels stopLevels )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestSetSeekSensitivity( stopLevels ) ;
}

static void _requestGetSeekSensitivity( DMMAmFmTunerControlStub* stub )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestGetSeekSensitivity( ) ;
}

static void _requestSetHdBlending( DMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_HdBlending hdBlending )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestSetHdBlending( hdBlending ) ;
}

static void _requestGetHdBlending( DMMAmFmTunerControlStub* stub )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestGetHdBlending( ) ;
}

static void _requestSetHdCalibration( DMMAmFmTunerControlStub* stub,  DSIBool enable )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestSetHdCalibration( enable ) ;
}

static void _requestGetHdCalibration( DMMAmFmTunerControlStub* stub )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestGetHdCalibration( ) ;
}

static void _requestSetRegionCode( DMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_RegionCode regionCode,  unsigned int flags )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestSetRegionCode( regionCode, flags ) ;
}

static void _requestGetHdBer( DMMAmFmTunerControlStub* stub )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestGetHdBer( ) ;
}

static void _requestControlHdBer( DMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_HdBerMode hdBerMode )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestControlHdBer( hdBerMode ) ;
}

static void _requestSetTunerParameter( DMMAmFmTunerControlStub* stub,  unsigned int tunerParameter, const DSIBuffer buffer )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestSetTunerParameter( tunerParameter, buffer ) ;
}

static void _requestGetTunerParameter( DMMAmFmTunerControlStub* stub,  unsigned int tunerParameter )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestGetTunerParameter( tunerParameter ) ;
}

static void _requestSetTunerTiming( DMMAmFmTunerControlStub* stub,  unsigned int tunerTiming,  unsigned int value )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestSetTunerTiming( tunerTiming, value ) ;
}

static void _requestGetTunerTiming( DMMAmFmTunerControlStub* stub,  unsigned int tunerTiming )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestGetTunerTiming( tunerTiming ) ;
}

static void _requestDeletePersistentData( DMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_PersistenceScope scope )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestDeletePersistentData( scope ) ;
}

static void _requestSetWavebandGrid( DMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_Waveband waveband, const DMMAmFmTunerControl_WavebandGrid* grid )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestSetWavebandGrid( waveband,  *grid ) ;
}

static void _requestSetHdBallGameMode( DMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_HdBallGameMode hdBallGameMode )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestSetHdBallGameMode( hdBallGameMode ) ;
}

static void _requestAssign( DMMAmFmTunerControlStub* stub,  DMMAmFmTunerControl_SharedResources resource,  DSIBool grant )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestAssign( resource, grant ) ;
}

static void _requestSetSpecialCoding( DMMAmFmTunerControlStub* stub, const DMMAmFmTunerControl_TunerParameters parameters, const DMMAmFmTunerControl_TunerTimings timings )
{
   ((CDMMAmFmTunerControlStub*)stub)->requestSetSpecialCoding( parameters, timings ) ;
}

static void _processInternalEvent( DMMAmFmTunerControlStub* stub, int id, void* data )
{
   ((CDMMAmFmTunerControlStub*)stub)->processInternalEvent( id,  data ) ;
}

static void _cleanup( DMMAmFmTunerControlStub* stub )
{
   ((CDMMAmFmTunerControlStub*)stub)->cleanup( ) ;
}

CDMMAmFmTunerControlStub::CDMMAmFmTunerControlStub( )
{
   memset( (DMMAmFmTunerControlStub*)this, 0, sizeof(DMMAmFmTunerControlStub) );
   fnRequestSetAfSwitch = _requestSetAfSwitch ;
   fnRequestSetMultipleStationsSwitch = _requestSetMultipleStationsSwitch ;
   fnRequestSetRegMode = _requestSetRegMode ;
   fnRequestSetStereoMode = _requestSetStereoMode ;
   fnRequestSetHdMode = _requestSetHdMode ;
   fnRequestSetDiagSwitch = _requestSetDiagSwitch ;
   fnRequestSetTestMode = _requestSetTestMode ;
   fnRequestSendPmBusCommand = _requestSendPmBusCommand ;
   fnRequestSetSeekSensitivity = _requestSetSeekSensitivity ;
   fnRequestGetSeekSensitivity = _requestGetSeekSensitivity ;
   fnRequestSetHdBlending = _requestSetHdBlending ;
   fnRequestGetHdBlending = _requestGetHdBlending ;
   fnRequestSetHdCalibration = _requestSetHdCalibration ;
   fnRequestGetHdCalibration = _requestGetHdCalibration ;
   fnRequestSetRegionCode = _requestSetRegionCode ;
   fnRequestGetHdBer = _requestGetHdBer ;
   fnRequestControlHdBer = _requestControlHdBer ;
   fnRequestSetTunerParameter = _requestSetTunerParameter ;
   fnRequestGetTunerParameter = _requestGetTunerParameter ;
   fnRequestSetTunerTiming = _requestSetTunerTiming ;
   fnRequestGetTunerTiming = _requestGetTunerTiming ;
   fnRequestDeletePersistentData = _requestDeletePersistentData ;
   fnRequestSetWavebandGrid = _requestSetWavebandGrid ;
   fnRequestSetHdBallGameMode = _requestSetHdBallGameMode ;
   fnRequestAssign = _requestAssign ;
   fnRequestSetSpecialCoding = _requestSetSpecialCoding ;
   fnProcessInternalEvent = _processInternalEvent ;
   fnCleanup = _cleanup ;
}

CDMMAmFmTunerControlStub::~CDMMAmFmTunerControlStub()
{
   // DMMAmFmTunerControlStop( this ); not implemented
}

int CDMMAmFmTunerControlStub::start( const char* rolename )
{
   return DMMAmFmTunerControlStub_Start( this, rolename );
}

void CDMMAmFmTunerControlStub::stop( int exitcode )
{
   DMMAmFmTunerControlStub_Stop( this, exitcode );
}

void CDMMAmFmTunerControlStub::sendError( DMMAmFmTunerControl_UpdateIdEnum id )
{
   DMMAmFmTunerControlSendError( this, id );
}

int CDMMAmFmTunerControlStub::postInternalEvent( int code, void* data )
{
   return DSIPostInternalEvent( server.Channel.Master, server.Id, 0, code, data );
}

int CDMMAmFmTunerControlStub::sendInternalEvent( int code, void* data )
{
   return DSISendInternalEvent( server.Channel.Master, server.Id, 0, code, data );
}

void CDMMAmFmTunerControlStub::cleanup()
{
}
