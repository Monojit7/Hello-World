#ifndef CDMMAMFMTUNERCONTROLPROXYIMPL_HPP
#define CDMMAMFMTUNERCONTROLPROXYIMPL_HPP
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2015
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 15.1.2015
 */


#include "DMMAmFmTunerControlProxy.h"

/**
 * DSI Proxy: DMMAmFmTunerControl
 *
 * Project independent but tuner specific interface.
 * This interface contains AM/FM/HD specific functionality which is not covered by any generic tuner interface.
 */
class CDMMAmFmTunerControlProxy : public DMMAmFmTunerControlProxy
{
public:
   /**
    * Constructor.
    */
   CDMMAmFmTunerControlProxy();

   /**
    * Destructor.
    */
   virtual ~CDMMAmFmTunerControlProxy();

   /**
    * Start the proxy and enter the eventloop
    */
   virtual int start( const char* rolename );

   /**
    * stop the proxy
    * @param exitcode start(...) will return the exitcode
    */
   virtual void stop( int exitcode );

   /**
    * Called right before the proxy thread ends
    */
   virtual void cleanup();

   /**
    * Set switch to enable/disable alternative frequency following. The current state is reflected by afSwitch attribute.
    */
   virtual int requestSetAfSwitch(  DSIBool enable ) ;

   /**
    * Set switch whether all alternative frequencies of one station shall be inserted into FM station list or not. The current state is reflected by multipleStationsSwitch attribute.
    */
   virtual int requestSetMultipleStationsSwitch(  DSIBool enable ) ;

   /**
    * Set desired regionalization mode. The current mode is reflected by regMode attribute.
    */
   virtual int requestSetRegMode(  DMMAmFmTunerControl_RegMode regMode ) ;

   /**
    * Set new desired stereo mode. The current mode is reflected by stereoMode attribute.
    */
   virtual int requestSetStereoMode(  DMMAmFmTunerControl_StereoMode stereoMode ) ;

   /**
    * Set new desired HD mode. The current mode is reflected by hdMode attribute.
    */
   virtual int requestSetHdMode(  DMMAmFmTunerControl_HdMode hdMode ) ;

   /**
    * Set switch to enable/disable diagnosis mode. The current state is reflected by diagSwitch attribute. Different behavior for Tuner32 and OOTuner implemenation, refert to "enable" parameter.
    */
   virtual int requestSetDiagSwitch(  DSIBool enable ) ;

   /**
    * Select a specific test mode, resulting test data is sent via testData response (don't forget to set notification).
    */
   virtual int requestSetTestMode(  DMMAmFmTunerControl_TestMode testMode,  unsigned int index ) ;

   /**
    * Send a PMBus command to the tuner device. Don't forget to set notifcation for pmBusCommand response in order to get the resulting message.
    */
   virtual int requestSendPmBusCommand( const DSIBuffer commandStream ) ;

   /**
    * Configure the seek/scan stop thresholds for all wavebands. The current settings can be queried  by getSeekSensitivity.
    */
   virtual int requestSetSeekSensitivity( const DMMAmFmTunerControl_StopLevels stopLevels ) ;

   /**
    * Get the current seek/scan thresholds via seekSensitivity response (don't forget to set notification).
    */
   virtual int requestGetSeekSensitivity( ) ;

   /**
    * Set blending mode.
    */
   virtual int requestSetHdBlending(  DMMAmFmTunerControl_HdBlending hdBlending ) ;

   /**
    * Get the current blending mode via hdSwVersion response (don't forget to set notification).
    */
   virtual int requestGetHdBlending( ) ;

   /**
    * Enable/disable HD calibration functionality.
    */
   virtual int requestSetHdCalibration(  DSIBool enable ) ;

   /**
    * Get the current HD calibration mode via hdCalibration response (don't forget to set notification).
    */
   virtual int requestGetHdCalibration( ) ;

   /**
    * Set RegionCode.
    */
   virtual int requestSetRegionCode(  DMMAmFmTunerControl_RegionCode regionCode,  unsigned int flags ) ;

   /**
    * Get HD bit error rates
    */
   virtual int requestGetHdBer( ) ;

   /**
    * Control (start / stop / reset) HD bit error measurement
    */
   virtual int requestControlHdBer(  DMMAmFmTunerControl_HdBerMode hdBerMode ) ;

   /**
    * OOTuner: Manipulate tuner engineering parameter (for experts only)
    */
   virtual int requestSetTunerParameter(  unsigned int tunerParameter, const DSIBuffer buffer ) ;

   /**
    * OOTuner: Get tuner engineering parameter
    */
   virtual int requestGetTunerParameter(  unsigned int tunerParameter ) ;

   /**
    * OOTuner: Manipulate tuner timing parameter (for experts only)
    */
   virtual int requestSetTunerTiming(  unsigned int tunerTiming,  unsigned int value ) ;

   /**
    * OOTuner: Get tuner timing parameter
    */
   virtual int requestGetTunerTiming(  unsigned int tunerTiming ) ;

   /**
    * Delete persistent data
    */
   virtual int requestDeletePersistentData(  DMMAmFmTunerControl_PersistenceScope scope ) ;

   /**
    * Configure waveband settings for specific waveband, becomes active with next setRegionCode (see MSCs).
    */
   virtual int requestSetWavebandGrid(  DMMAmFmTunerControl_Waveband waveband, const DMMAmFmTunerControl_WavebandGrid& grid ) ;

   /**
    * Set new desired HD ball game mode. The current mode is reflected by hdBallGameMode attribute.
    */
   virtual int requestSetHdBallGameMode(  DMMAmFmTunerControl_HdBallGameMode hdBallGameMode ) ;

   /**
    * Internal: Assign/withdraw resource 
    */
   virtual int requestAssign(  DMMAmFmTunerControl_SharedResources resource,  DSIBool grant ) ;

   /**
    * Configure special coding set via TunerParameter and TunerTiming, becomes active with next setRegionCode (see MSCs).
    */
   virtual int requestSetSpecialCoding( const DMMAmFmTunerControl_TunerParameters parameters, const DMMAmFmTunerControl_TunerTimings timings ) ;

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetAfSwitch.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSetAfSwitchFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetMultipleStationsSwitch.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSetMultipleStationsSwitchFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetRegMode.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSetRegModeFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetStereoMode.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSetStereoModeFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetHdMode.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSetHdModeFailed( DSIResultType errType );// { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetDiagSwitch.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSetDiagSwitchFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetTestMode.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSetTestModeFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SendPmBusCommand.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSendPmBusCommandFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetSeekSensitivity.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSetSeekSensitivityFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_GetSeekSensitivity.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestGetSeekSensitivityFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetHdBlending.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSetHdBlendingFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_GetHdBlending.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestGetHdBlendingFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetHdCalibration.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSetHdCalibrationFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_GetHdCalibration.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestGetHdCalibrationFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetRegionCode.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSetRegionCodeFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_GetHdBer.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestGetHdBerFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_ControlHdBer.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestControlHdBerFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetTunerParameter.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSetTunerParameterFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_GetTunerParameter.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestGetTunerParameterFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetTunerTiming.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSetTunerTimingFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_GetTunerTiming.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestGetTunerTimingFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_DeletePersistentData.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestDeletePersistentDataFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetWavebandGrid.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSetWavebandGridFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetHdBallGameMode.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSetHdBallGameModeFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_Assign.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestAssignFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMAmFmTunerControl_SetSpecialCoding.
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestSetSpecialCodingFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * The @c DMMAmFmTunerControlSendError function was called on the stub side within a response handler
    * with a response id as argument.
    *
    * @param id The element which caused the error.
    */
   virtual void responseInvalid( DMMAmFmTunerControl_UpdateIdEnum id ) ;//{ /* NOOP */ }

   /**
    * Called when an internal event was sent to the server
    */
   virtual void processInternalEvent( int code, void* data );

   /**
    * ...
    */
   virtual void processUpdateEvent( DMMAmFmTunerControl_UpdateIdEnum updateId ) {}

   /**
    * Called when the server connected to the proxy
    */
   virtual void componentConnected( ) ;

   /**
    * Called when the server disconnects from the proxy
    */
   virtual void componentDisconnected( ) {}

   /**
    * Methods to allow client objects to subscribe for notification
    * events when one of the data elements provided by the service
    * changes.
    */
   void setNotification( DMMAmFmTunerControl_UpdateIdEnum updateId );

   /**
    * Clear a notification
    */
   void clearNotification( DMMAmFmTunerControl_UpdateIdEnum updateId );

   /**
    * The response of the tuner device for a PMBus command.
    */
   virtual void responsePmBusCommand( const DSIBuffer resultStream ) {} // empty implementation

   /**
    * Raw test data sent by device if enabled via setTestMode.
    */
   virtual void responseTestData(  DMMAmFmTunerControl_TestMode testMode,  unsigned int index, const DSIBuffer data ) {} // empty implementation

   /**
    * The current seek sensitivity settings.
    */
   virtual void responseSeekSensitivity( const DMMAmFmTunerControl_StopLevels stopLevels ) {} // empty implementation

   /**
    * The current blending mode.
    */
   virtual void responseHdBlending(  DMMAmFmTunerControl_HdBlending hdBlending ) {} // empty implementation

   /**
    * The HD calibration state.
    */
   virtual void responseHdCalibration(  DSIBool enabled ) {} // empty implementation

   /**
    * The HD bit error rates
    */
   virtual void responseHdBer( const DMMAmFmTunerControl_HdBers bers ) {} // empty implementation

   /**
    * HD status data
    */
   virtual void informationHdStatus( const DMMAmFmTunerControl_HdStatus& status ) ; // empty implementation

   /**
    * HD performance data
    */
   virtual void informationHdPerformance( const DMMAmFmTunerControl_HdPerformance& performance ) {} // empty implementation

   /**
    * HD call to action information for decrypted services
    */
   virtual void informationHdCallToAction(  unsigned int frequency,  unsigned char serviceId,  unsigned int caServiceId,  unsigned int radioId, const char* message ) {} // empty implementation

   /**
    * HD program service data changed (trigger)
    */
   virtual void informationHdPsdChanged(  unsigned int frequency,  unsigned char service ) {} // empty implementation

   /**
    * Token for HD iTunes tagging
    */
   virtual void informationHdTagging( const DMMAmFmTunerControl_HdToken& token ) {} // empty implementation

   /**
    * Response of set/getTunerParameter
    */
   virtual void responseTunerParameter(  unsigned int tunerParameter, const DSIBuffer buffer,  DMMTunerTypes_Feedback feedback ) ; // empty implementation

   /**
    * Response of set/getTunerTiming
    */
   virtual void responseTunerTiming(  unsigned int tunerTiming,  unsigned int value,  DMMTunerTypes_Feedback feedback ) {} // empty implementation

   /**
    * An HD image (station logo or cover art) is available.
    * !!! Deprecated: Use DMMTunerStationImage instead !!!
    * 
    * DEPRECATED: Use DMMTunerStationImage instead
    */
   virtual void informationHdImage( const DMMAmFmTunerControl_HdImage& image ) {} // empty implementation


   int postInternalEvent( int code, void* data );
   int sendInternalEvent( int code, void* data );

private:

   /*
    * Duplicating not allowed
    */
   CDMMAmFmTunerControlProxy( const CDMMAmFmTunerControlProxy& ) {}
   CDMMAmFmTunerControlProxy& operator= (const CDMMAmFmTunerControlProxy& ) { return *this ; }
};

inline int CDMMAmFmTunerControlProxy::requestSetAfSwitch(  DSIBool enable )
{
   return DMMAmFmTunerControl_RequestSetAfSwitch( this, enable ) ;
}

inline int CDMMAmFmTunerControlProxy::requestSetMultipleStationsSwitch(  DSIBool enable )
{
   return DMMAmFmTunerControl_RequestSetMultipleStationsSwitch( this, enable ) ;
}

inline int CDMMAmFmTunerControlProxy::requestSetRegMode(  DMMAmFmTunerControl_RegMode regMode )
{
   return DMMAmFmTunerControl_RequestSetRegMode( this, regMode ) ;
}

inline int CDMMAmFmTunerControlProxy::requestSetStereoMode(  DMMAmFmTunerControl_StereoMode stereoMode )
{
   return DMMAmFmTunerControl_RequestSetStereoMode( this, stereoMode ) ;
}

inline int CDMMAmFmTunerControlProxy::requestSetHdMode(  DMMAmFmTunerControl_HdMode hdMode )
{
   return DMMAmFmTunerControl_RequestSetHdMode( this, hdMode ) ;
}

inline int CDMMAmFmTunerControlProxy::requestSetDiagSwitch(  DSIBool enable )
{
   return DMMAmFmTunerControl_RequestSetDiagSwitch( this, enable ) ;
}

inline int CDMMAmFmTunerControlProxy::requestSetTestMode(  DMMAmFmTunerControl_TestMode testMode,  unsigned int index )
{
   return DMMAmFmTunerControl_RequestSetTestMode( this, testMode, index ) ;
}

inline int CDMMAmFmTunerControlProxy::requestSendPmBusCommand( const DSIBuffer commandStream )
{
   return DMMAmFmTunerControl_RequestSendPmBusCommand( this, commandStream ) ;
}

inline int CDMMAmFmTunerControlProxy::requestSetSeekSensitivity( const DMMAmFmTunerControl_StopLevels stopLevels )
{
   return DMMAmFmTunerControl_RequestSetSeekSensitivity( this, stopLevels ) ;
}

inline int CDMMAmFmTunerControlProxy::requestGetSeekSensitivity( )
{
   return DMMAmFmTunerControl_RequestGetSeekSensitivity( this ) ;
}

inline int CDMMAmFmTunerControlProxy::requestSetHdBlending(  DMMAmFmTunerControl_HdBlending hdBlending )
{
   return DMMAmFmTunerControl_RequestSetHdBlending( this, hdBlending ) ;
}

inline int CDMMAmFmTunerControlProxy::requestGetHdBlending( )
{
   return DMMAmFmTunerControl_RequestGetHdBlending( this ) ;
}

inline int CDMMAmFmTunerControlProxy::requestSetHdCalibration(  DSIBool enable )
{
   return DMMAmFmTunerControl_RequestSetHdCalibration( this, enable ) ;
}

inline int CDMMAmFmTunerControlProxy::requestGetHdCalibration( )
{
   return DMMAmFmTunerControl_RequestGetHdCalibration( this ) ;
}

inline int CDMMAmFmTunerControlProxy::requestSetRegionCode(  DMMAmFmTunerControl_RegionCode regionCode,  unsigned int flags )
{
   return DMMAmFmTunerControl_RequestSetRegionCode( this, regionCode, flags ) ;
}

inline int CDMMAmFmTunerControlProxy::requestGetHdBer( )
{
   return DMMAmFmTunerControl_RequestGetHdBer( this ) ;
}

inline int CDMMAmFmTunerControlProxy::requestControlHdBer(  DMMAmFmTunerControl_HdBerMode hdBerMode )
{
   return DMMAmFmTunerControl_RequestControlHdBer( this, hdBerMode ) ;
}

inline int CDMMAmFmTunerControlProxy::requestSetTunerParameter(  unsigned int tunerParameter, const DSIBuffer buffer )
{
   return DMMAmFmTunerControl_RequestSetTunerParameter( this, tunerParameter, buffer ) ;
}

inline int CDMMAmFmTunerControlProxy::requestGetTunerParameter(  unsigned int tunerParameter )
{
   return DMMAmFmTunerControl_RequestGetTunerParameter( this, tunerParameter ) ;
}

inline int CDMMAmFmTunerControlProxy::requestSetTunerTiming(  unsigned int tunerTiming,  unsigned int value )
{
   return DMMAmFmTunerControl_RequestSetTunerTiming( this, tunerTiming, value ) ;
}

inline int CDMMAmFmTunerControlProxy::requestGetTunerTiming(  unsigned int tunerTiming )
{
   return DMMAmFmTunerControl_RequestGetTunerTiming( this, tunerTiming ) ;
}

inline int CDMMAmFmTunerControlProxy::requestDeletePersistentData(  DMMAmFmTunerControl_PersistenceScope scope )
{
   return DMMAmFmTunerControl_RequestDeletePersistentData( this, scope ) ;
}

inline int CDMMAmFmTunerControlProxy::requestSetWavebandGrid(  DMMAmFmTunerControl_Waveband waveband, const DMMAmFmTunerControl_WavebandGrid& grid )
{
   return DMMAmFmTunerControl_RequestSetWavebandGrid( this, waveband,  &grid ) ;
}

inline int CDMMAmFmTunerControlProxy::requestSetHdBallGameMode(  DMMAmFmTunerControl_HdBallGameMode hdBallGameMode )
{
   return DMMAmFmTunerControl_RequestSetHdBallGameMode( this, hdBallGameMode ) ;
}

inline int CDMMAmFmTunerControlProxy::requestAssign(  DMMAmFmTunerControl_SharedResources resource,  DSIBool grant )
{
   return DMMAmFmTunerControl_RequestAssign( this, resource, grant ) ;
}

inline int CDMMAmFmTunerControlProxy::requestSetSpecialCoding( const DMMAmFmTunerControl_TunerParameters parameters, const DMMAmFmTunerControl_TunerTimings timings )
{
   return DMMAmFmTunerControl_RequestSetSpecialCoding( this, parameters, timings ) ;
}

inline void CDMMAmFmTunerControlProxy::setNotification( DMMAmFmTunerControl_UpdateIdEnum updateId )
{
   DMMAmFmTunerControlProxy_SetNotification( this, updateId ) ;
}

inline void CDMMAmFmTunerControlProxy::clearNotification( DMMAmFmTunerControl_UpdateIdEnum updateId )
{
   DMMAmFmTunerControlProxy_ClearNotification( this, updateId ) ;
}

#endif // CDMMAMFMTUNERCONTROLPROXYIMPL_HPP


