#ifndef DMMTUNERSTATIONSTUB_H
#define DMMTUNERSTATIONSTUB_H
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2014
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 21.11.2014
 */


#include "DMMTunerStation.h"

#ifndef TDMMTunerStationStub
#define TDMMTunerStationStub struct _DMMTunerStationStub
#endif

DSI_EXTERN_C_BEGIN

/**
 * DSI Stub: DMMTunerStation
 *
 * Tuner generic and project independent station interface. This interface provides information about the current station, the available station lists, and gives the possibilty to tune or select the current station.
 */
typedef struct _DMMTunerStationStub
{
   DSIServer server ;

   /**
    * Implementation version of this server
    */
   DSIVersionInfo implVersion ;


   /**
    * Starts tuning a frequency or selecting a station.
    */
   void (*fnRequestStartTune)( TDMMTunerStationStub* stub, const DMMTunerTypes_StationSelector* station,  unsigned int handle,  DMMTunerStation_SelectionMode selectionMode );

   /**
    * Starts/Stops a seek process
    */
   void (*fnRequestControlSeek)( TDMMTunerStationStub* stub,  DMMTunerTypes_DeviceType device,  DMMTunerStation_SeekMode seekMode,  unsigned char genre,  unsigned int flags,  unsigned int handle );

   /**
    * Aborts a running tune or station selection process
    */
   void (*fnRequestAbortTune)( TDMMTunerStationStub* stub,  DMMTunerTypes_DeviceType device,  unsigned int handle );

   /**
    * Request explicit update of currentStation or stationList information. E.g. necessary after startup.
    */
   void (*fnRequestForceUpdate)( TDMMTunerStationStub* stub,  unsigned int updateId,  unsigned int sourceType,  unsigned int stationType,  unsigned int handle );

   /**
    * Note: Only relevant if a key/tag is part of the ID vector. 
    * Make selector mapping (tag/key -> frequency, IDs) persistent and available even if station is not available any more.
    */
   void (*fnRequestMakePersistent)( TDMMTunerStationStub* stub, const DMMTunerTypes_StationSelector* station,  DSIBool persistent,  unsigned int handle );


   /**
    * Called when the stub received an internal event
    */
   void (*fnProcessInternalEvent) ( TDMMTunerStationStub* stub, int id, void* data ) ;

   /**
    * Called right before the stub thread ends
    */
   void (*fnCleanup) ( TDMMTunerStationStub* stub ) ;

} DMMTunerStationStub ;

/**
 * Information about the currently active station.
 */
void DMMTunerStation_InformationCurrentStation( TDMMTunerStationStub* stub, const DMMTunerStation_Station* current,  unsigned int handle );

/**
 * Station list information.
 */
void DMMTunerStation_InformationStationList( TDMMTunerStationStub* stub, const DMMTunerStation_StationList* list,  unsigned int handle );

/**
 * Seek information sent during an active search.
 */
void DMMTunerStation_InformationSeek( TDMMTunerStationStub* stub, const DMMTunerStation_SeekData* seekData,  unsigned int handle );

/**
 * Result of startTune request. This response is only sent if handle of startTune is not equal to zero (notifcation has to be set explicitly).
 */
void DMMTunerStation_ResponseStartTune( TDMMTunerStationStub* stub,  unsigned int handle,  DMMTunerTypes_Feedback feedback );

/**
 * Result of abortTune request. This response is only sent if handle of abortTune is not equal to zero (notifcation has to be set explicitly).
 */
void DMMTunerStation_ResponseAbortTune( TDMMTunerStationStub* stub,  unsigned int handle,  DMMTunerTypes_Feedback feedback );

/**
 * Result of controlSeek request. This response is only sent if handle of controlSeek is not equal to zero (notifcation has to be set explicitly).
 */
void DMMTunerStation_ResponseControlSeek( TDMMTunerStationStub* stub,  unsigned int handle,  DMMTunerTypes_Feedback feedback );

/**
 * Result of makePersistent request. This response is only sent if handle of controlSeek is not equal to zero (notifcation has to be set explicitly).
 */
void DMMTunerStation_ResponseMakePersistent( TDMMTunerStationStub* stub,  unsigned int handle,  DMMTunerTypes_Feedback feedback );

/**
 * DESCRIPTION MISSING
 */
void DMMTunerStation_ResponseForceUpdate( TDMMTunerStationStub* stub,  unsigned int handle,  DMMTunerTypes_Feedback feedback );


/**
 * Sends a notification to all clients that are interested.
 */
void DMMTunerStationStub_SendNotification( TDMMTunerStationStub* stub, DMMTunerStation_UpdateIdEnum id );

/**
 * Initailzes the stub
 */
int DMMTunerStationStub_Init( TDMMTunerStationStub* stub, const char* rolename );

/**
 * Frees the stub
 */
void DMMTunerStationStub_Free( TDMMTunerStationStub* stub );

/**
 * Starts the DMMTunerStation stub and enters the message loop. This functions
 * does not return until void DMMTunerStationStubStop() is called or an error
 * during startup occures.
 */
int DMMTunerStationStub_Start( TDMMTunerStationStub* stub, const char* rolename );

/**
 * Stops the DMMTunerStation stub. This function ends the stubs message loop.
 * DMMTunerStationStub_Start() returns the exitcode.
 */
int DMMTunerStationStub_Stop( TDMMTunerStationStub* stub, int exitcode );

/**
 * Respond with an error message.
 */
void DMMTunerStationSendError( TDMMTunerStationStub* stub, DMMTunerStation_UpdateIdEnum id );

/**
 * Posts an internal event in the stubs message queue and returns immediately.
 */
int DMMTunerStationStub_PostInternalEvent( TDMMTunerStationStub* stub, int code, void* data );

/**
 * Send an internal event to the stub and waits until the stub handled it. Do not call this
 * function from within the stubs task. This will lead into a dead lock.
 */
int DMMTunerStationStub_SendInternalEvent( TDMMTunerStationStub* stub, int code, void* data );

#define DMMTunerStationStub_RegisterCurrentSession( stub ) DSIServerRegisterCurrentSession( &stub->server )
#define DMMTunerStationStub_ClearActiveSessions( stub ) DSIServerClearActiveSessions( &stub->server )
#define DMMTunerStationStub_AddActiveSession( stub, sessionId ) DSIServerAddActiveSession( &stub->server, sessionId )
#define DMMTunerStationStub_IsSessionActive( stub, sessionId ) DSIServerIsSessionActive( &stub->server, sessionId )

#define DMMTunerStationStub_UnblockRequest( stub ) DSIServerUnblockRequest( &stub->server )
#define DMMTunerStationStub_PrepareResponse( stub, sessionHandle ) DSIServerPrepareResponse( &stub->server, sessionHandle )

DSI_EXTERN_C_END

#endif // DMMTUNERSTATIONSTUB_H
