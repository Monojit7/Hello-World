#ifndef CDMMTUNERSTATIONPROXYIMPL_HPP
#define CDMMTUNERSTATIONPROXYIMPL_HPP
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2014
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 21.11.2014
 */


#include "DMMTunerStationProxy.h"

/**
 * DSI Proxy: DMMTunerStation
 *
 * Tuner generic and project independent station interface. This interface provides information about the current station, the available station lists, and gives the possibilty to tune or select the current station.
 */
class CDMMTunerStationProxy : public DMMTunerStationProxy
{
public:
   /**
    * Constructor.
    */
   CDMMTunerStationProxy();

   /**
    * Destructor.
    */
   virtual ~CDMMTunerStationProxy();

   /**
    * Start the proxy and enter the eventloop
    */
   virtual int start( const char* rolename );

   /**
    * stop the proxy
    * @param exitcode start(...) will return the exitcode
    */
   virtual void stop( int exitcode );

   /**
    * Called right before the proxy thread ends
    */
   virtual void cleanup();

   /**
    * Starts tuning a frequency or selecting a station.
    */
   virtual int requestStartTune( const DMMTunerTypes_StationSelector& station,  unsigned int handle,  DMMTunerStation_SelectionMode selectionMode ) ;

   /**
    * Starts/Stops a seek process
    */
   virtual int requestControlSeek(  DMMTunerTypes_DeviceType device,  DMMTunerStation_SeekMode seekMode,  unsigned char genre,  unsigned int flags,  unsigned int handle ) ;

   /**
    * Aborts a running tune or station selection process
    */
   virtual int requestAbortTune(  DMMTunerTypes_DeviceType device,  unsigned int handle ) ;

   /**
    * Request explicit update of currentStation or stationList information. E.g. necessary after startup.
    */
   virtual int requestForceUpdate(  unsigned int updateId,  unsigned int sourceType,  unsigned int stationType,  unsigned int handle ) ;

   /**
    * Note: Only relevant if a key/tag is part of the ID vector. 
    * Make selector mapping (tag/key -> frequency, IDs) persistent and available even if station is not available any more.
    */
   virtual int requestMakePersistent( const DMMTunerTypes_StationSelector& station,  DSIBool persistent,  unsigned int handle ) ;

   /**
    * Request failure indicator for request @c DMMTunerStation_StartTune.
    * The @c DMMTunerStationSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestStartTuneFailed( DSIResultType errType );// { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMTunerStation_ControlSeek.
    * The @c DMMTunerStationSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestControlSeekFailed( DSIResultType errType );// { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMTunerStation_AbortTune.
    * The @c DMMTunerStationSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestAbortTuneFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMTunerStation_ForceUpdate.
    * The @c DMMTunerStationSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestForceUpdateFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * Request failure indicator for request @c DMMTunerStation_MakePersistent.
    * The @c DMMTunerStationSendError function was called on the stub side within a response handler with
    * a request id as argument.
    *
    * @param errType Can be either RESULT_REQUEST_ERROR or RESULT_REQUEST_BUSY.
    */
   virtual void requestMakePersistentFailed( DSIResultType errType ) { /* NOOP */ }

   /**
    * The @c DMMTunerStationSendError function was called on the stub side within a response handler
    * with a response id as argument.
    *
    * @param id The element which caused the error.
    */
   virtual void responseInvalid( DMMTunerStation_UpdateIdEnum id ) { /* NOOP */ }

   /**
    * Called when an internal event was sent to the server
    */
   virtual void processInternalEvent( int code, void* data );// {}

   /**
    * ...
    */
   virtual void processUpdateEvent( DMMTunerStation_UpdateIdEnum updateId ) {}

   /**
    * Called when the server connected to the proxy
    */
   virtual void componentConnected( );// {}

   /**
    * Called when the server disconnects from the proxy
    */
   virtual void componentDisconnected( ) {}

   /**
    * Methods to allow client objects to subscribe for notification
    * events when one of the data elements provided by the service
    * changes.
    */
   void setNotification( DMMTunerStation_UpdateIdEnum updateId );

   /**
    * Clear a notification
    */
   void clearNotification( DMMTunerStation_UpdateIdEnum updateId );

   /**
    * Information about the currently active station.
    */
   virtual void informationCurrentStation( const DMMTunerStation_Station& current,  unsigned int handle );// {} // empty implementation

   /**
    * Station list information.
    */
   virtual void informationStationList( const DMMTunerStation_StationList& list,  unsigned int handle );// {} // empty implementation

   /**
    * Seek information sent during an active search.
    */
   virtual void informationSeek( const DMMTunerStation_SeekData& seekData,  unsigned int handle );// {} // empty implementation

   /**
    * Result of startTune request. This response is only sent if handle of startTune is not equal to zero (notifcation has to be set explicitly).
    */
   virtual void responseStartTune(  unsigned int handle,  DMMTunerTypes_Feedback feedback );// {} // empty implementation

   /**
    * Result of abortTune request. This response is only sent if handle of abortTune is not equal to zero (notifcation has to be set explicitly).
    */
   virtual void responseAbortTune(  unsigned int handle,  DMMTunerTypes_Feedback feedback ) {} // empty implementation

   /**
    * Result of controlSeek request. This response is only sent if handle of controlSeek is not equal to zero (notifcation has to be set explicitly).
    */
   virtual void responseControlSeek(  unsigned int handle,  DMMTunerTypes_Feedback feedback );// {} // empty implementation

   /**
    * Result of makePersistent request. This response is only sent if handle of controlSeek is not equal to zero (notifcation has to be set explicitly).
    */
   virtual void responseMakePersistent(  unsigned int handle,  DMMTunerTypes_Feedback feedback ) {} // empty implementation

   /**
    * DESCRIPTION MISSING
    */
   virtual void responseForceUpdate(  unsigned int handle,  DMMTunerTypes_Feedback feedback ) {} // empty implementation


   int postInternalEvent( int code, void* data );
   int sendInternalEvent( int code, void* data );

private:

   /*
    * Duplicating not allowed
    */
   CDMMTunerStationProxy( const CDMMTunerStationProxy& ) {}
   CDMMTunerStationProxy& operator= (const CDMMTunerStationProxy& ) { return *this ; }
};

inline int CDMMTunerStationProxy::requestStartTune( const DMMTunerTypes_StationSelector& station,  unsigned int handle,  DMMTunerStation_SelectionMode selectionMode )
{
   return DMMTunerStation_RequestStartTune( this,  &station, handle, selectionMode ) ;
}

inline int CDMMTunerStationProxy::requestControlSeek(  DMMTunerTypes_DeviceType device,  DMMTunerStation_SeekMode seekMode,  unsigned char genre,  unsigned int flags,  unsigned int handle )
{
   return DMMTunerStation_RequestControlSeek( this, device, seekMode, genre, flags, handle ) ;
}

inline int CDMMTunerStationProxy::requestAbortTune(  DMMTunerTypes_DeviceType device,  unsigned int handle )
{
   return DMMTunerStation_RequestAbortTune( this, device, handle ) ;
}

inline int CDMMTunerStationProxy::requestForceUpdate(  unsigned int updateId,  unsigned int sourceType,  unsigned int stationType,  unsigned int handle )
{
   return DMMTunerStation_RequestForceUpdate( this, updateId, sourceType, stationType, handle ) ;
}

inline int CDMMTunerStationProxy::requestMakePersistent( const DMMTunerTypes_StationSelector& station,  DSIBool persistent,  unsigned int handle )
{
   return DMMTunerStation_RequestMakePersistent( this,  &station, persistent, handle ) ;
}

inline void CDMMTunerStationProxy::setNotification( DMMTunerStation_UpdateIdEnum updateId )
{
   DMMTunerStationProxy_SetNotification( this, updateId ) ;
}

inline void CDMMTunerStationProxy::clearNotification( DMMTunerStation_UpdateIdEnum updateId )
{
   DMMTunerStationProxy_ClearNotification( this, updateId ) ;
}

#endif // CDMMTUNERSTATIONPROXYIMPL_HPP



