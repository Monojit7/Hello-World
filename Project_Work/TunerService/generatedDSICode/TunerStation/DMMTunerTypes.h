#ifndef DMMTUNERTYPES_H
#define DMMTUNERTYPES_H
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2014
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 24.11.2014
 */


#include "api/sys/dsi/pf/base/src/DSI.h"

DSI_EXTERN_C_BEGIN




/** ***************************************************************************
 * Tuner source type of frequency/station
 */
typedef enum
{
   /*
    * No information available
    */
   DMMTunerTypes_UNDEF_SOURCE = 0, // 0x0000
   /*
    * FM frequency
    */
   DMMTunerTypes_AMFM_FM = 1, // 0x0001
   /*
    * MW frequency
    */
   DMMTunerTypes_AMFM_MW = 2, // 0x0002
   /*
    * LW frequency
    */
   DMMTunerTypes_AMFM_LW = 4, // 0x0004
   /*
    * SW fequency
    */
   DMMTunerTypes_AMFM_SW = 8, // 0x0008
   /*
    * WB frequency
    */
   DMMTunerTypes_AMFM_WB = 16, // 0x0010
   /*
    * TF frequency
    */
   DMMTunerTypes_AMFM_TF = 32, // 0x0020
   /*
    * HD station
    */
   DMMTunerTypes_AMFM_HD = 64, // 0x0040
   /*
    * DRM station
    */
   DMMTunerTypes_AMFM_DRM = 128, // 0x0080
   /*
    * L band frequency
    */
   DMMTunerTypes_DAB_L = 256, // 0x0100
   /*
    * Band III frequency
    */
   DMMTunerTypes_DAB_III = 512, // 0x0200
   /*
    * DAB service
    */
   DMMTunerTypes_DAB_DAB = 1024, // 0x0400
   /*
    * DAB+ service
    */
   DMMTunerTypes_DAB_DABPLUS = 2048, // 0x0800
   /*
    * DMB audio service
    */
   DMMTunerTypes_DAB_DMBA = 4096, // 0x1000
   /*
    * DMB video service
    */
   DMMTunerTypes_DAB_DMBV = 8192, // 0x2000
   /*
    * SIRIUS station
    */
   DMMTunerTypes_SDARS_SIRIUS = 16384, // 0x4000
   /*
    * XM station
    */
   DMMTunerTypes_SDARS_XM = 32768, // 0x8000
   /*
    * TV station: All frequencies, no wavebands
    */
   DMMTunerTypes_TV_ALL = 65536, // 0x10000

} DMMTunerTypes_SourceType ;


/** ***************************************************************************
 * Tuner device type (one for each device which has its own DevCtrl)
 */
typedef enum
{
   /*
    * No information available
    */
   DMMTunerTypes_UNDEF_DEVICE = 0, // 0
   /*
    * AMFM device
    */
   DMMTunerTypes_AMFM = 255, // AMFM_FM | AMFM_MW | AMFM_LW | AMFM_SW | AMFM_WB | AMFM_TF | AMFM_HD | AMFM_DRM
   /*
    * DAB device
    */
   DMMTunerTypes_DAB = 16128, // DAB_L | DAB_III | DAB_DAB | DAB_DABPLUS | DAB_DMBA | DAB_DMBV
   /*
    * SDARS device
    */
   DMMTunerTypes_SDARS = 49152, // SDARS_SIRIUS | SDARS_XM
   /*
    * TV device
    */
   DMMTunerTypes_TV = 65536, // TV_ALL

} DMMTunerTypes_DeviceType ;


/** ***************************************************************************
 * Client information about the result of a request; delivered with response method.
 */
typedef enum
{
   /*
    * Request was successful
    */
   DMMTunerTypes_DONE,
   /*
    * Request was interrupted by another request
    */
   DMMTunerTypes_INTERRUPTED,
   /*
    * Request not supported
    */
   DMMTunerTypes_NOT_APPLICABLE,
   /*
    * Request had no effect (not used consequently)
    */
   DMMTunerTypes_ALREADY_SET,
   /*
    * Request was not successful because of invalid parameters
    */
   DMMTunerTypes_FAILURE,
   /*
    * Done but result will be delayed (e.g. device currently blocked)
    */
   DMMTunerTypes_DELAYED,

} DMMTunerTypes_Feedback ;

// forward declaration(s)
struct _DMMTunerTypes_UInt32s ;
struct _DMMTunerTypes_CHBStrings ;
struct _DMMTunerTypes_Feedbacks ;
struct _DMMTunerTypes_StationSelectors ;

/** ***************************************************************************
 * A simple UInt32 vector
 */
DSIVectorTypeDef( DMMTunerTypes_UInt32s, unsigned int ) ;

// Free the vector related data
#define DMMTunerTypes_UInt32s_Free( p ) DSIVectorFree( *p )
void DMMTunerTypes_UInt32s_Copy( DMMTunerTypes_UInt32s* lhs, const DMMTunerTypes_UInt32s* rhs );

void DSIReadDMMTunerTypes_UInt32s( DSIStream *stream, DMMTunerTypes_UInt32s *p ) ;
void DSIWriteDMMTunerTypes_UInt32s( DSIStream *stream, const DMMTunerTypes_UInt32s *p ) ;

/** ***************************************************************************
 * A CHBString vector
 */
DSIVectorTypeDef( DMMTunerTypes_CHBStrings, char* ) ;

// Free the vector related data
void DMMTunerTypes_CHBStrings_Free( DMMTunerTypes_CHBStrings *p );
void DMMTunerTypes_CHBStrings_Copy( DMMTunerTypes_CHBStrings* lhs, const DMMTunerTypes_CHBStrings* rhs );

void DSIReadDMMTunerTypes_CHBStrings( DSIStream *stream, DMMTunerTypes_CHBStrings *p ) ;
void DSIWriteDMMTunerTypes_CHBStrings( DSIStream *stream, const DMMTunerTypes_CHBStrings *p ) ;

/** ***************************************************************************
 * A vector of Feedback
 */
DSIVectorTypeDef( DMMTunerTypes_Feedbacks, DMMTunerTypes_Feedback ) ;

// Free the vector related data
#define DMMTunerTypes_Feedbacks_Free( p ) DSIVectorFree( *p )
void DMMTunerTypes_Feedbacks_Copy( DMMTunerTypes_Feedbacks* lhs, const DMMTunerTypes_Feedbacks* rhs );

void DSIReadDMMTunerTypes_Feedbacks( DSIStream *stream, DMMTunerTypes_Feedbacks *p ) ;
void DSIWriteDMMTunerTypes_Feedbacks( DSIStream *stream, const DMMTunerTypes_Feedbacks *p ) ;

/** ***************************************************************************
 * Parameters in order to identify a frequency/station uniquely.
 */
typedef struct _DMMTunerTypes_StationSelector
{
   /**
    * Used in a request: Addressed device which has to tune the frequency/station (DeviceType enum)
    * Used in a response/information: The emitting tuner source (SourceType enum)
    * This parameter determines how the id vector has to be interpreted (index order).
    */
   unsigned int deviceType ;

   /**
    * The frequency [kHz]
    */
   unsigned int frequency ;

   /**
    * The ID vector (indices are device and project dependent, refer to specific hbtd file)
    */
   struct _DMMTunerTypes_UInt32s* id ;

} DMMTunerTypes_StationSelector ;

#define DMMTunerTypes_StationSelector_Init( p ) memset( p, 0, sizeof(*p))
void DMMTunerTypes_StationSelector_Free( DMMTunerTypes_StationSelector *p );
void DMMTunerTypes_StationSelector_Copy( DMMTunerTypes_StationSelector* lhs, const DMMTunerTypes_StationSelector* rhs );

void DSIReadDMMTunerTypes_StationSelector( DSIStream *stream, DMMTunerTypes_StationSelector *p ) ;
void DSIWriteDMMTunerTypes_StationSelector( DSIStream *stream, const DMMTunerTypes_StationSelector *p ) ;

/** ***************************************************************************
 * A vector of station selectors
 */
DSIVectorTypeDef( DMMTunerTypes_StationSelectors, DMMTunerTypes_StationSelector ) ;

// Free the vector related data
void DMMTunerTypes_StationSelectors_Free( DMMTunerTypes_StationSelectors *p );
void DMMTunerTypes_StationSelectors_Copy( DMMTunerTypes_StationSelectors* lhs, const DMMTunerTypes_StationSelectors* rhs );

void DSIReadDMMTunerTypes_StationSelectors( DSIStream *stream, DMMTunerTypes_StationSelectors *p ) ;
void DSIWriteDMMTunerTypes_StationSelectors( DSIStream *stream, const DMMTunerTypes_StationSelectors *p ) ;

/** ***************************************************************************
 * Actual / desired value pair
 */
typedef struct _DMMTunerTypes_ArbitrationElement
{
   /**
    * Actual value
    */
   DSIBool actual ;

   /**
    * Desired value
    */
   DSIBool desired ;

} DMMTunerTypes_ArbitrationElement ;

#define DMMTunerTypes_ArbitrationElement_Init( p ) memset( p, 0, sizeof(*p))
#define DMMTunerTypes_ArbitrationElement_Free( p ) // don't do anything

void DSIReadDMMTunerTypes_ArbitrationElement( DSIStream *stream, DMMTunerTypes_ArbitrationElement *p ) ;
void DSIWriteDMMTunerTypes_ArbitrationElement( DSIStream *stream, const DMMTunerTypes_ArbitrationElement *p ) ;


/** ***************************************************************************
 * Constants
 */




/**
 * Streaming Functions for Attributes
 */

DSI_EXTERN_C_END

#endif // DMMTUNERTYPES_H
