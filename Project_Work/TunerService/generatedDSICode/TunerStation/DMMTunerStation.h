#ifndef DMMTUNERSTATION_H
#define DMMTUNERSTATION_H
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2015
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 20.5.2015
 */


#include "api/sys/dsi/pf/base/src/DSI.h"
#include "DMMTunerTypes.h"

DSI_EXTERN_C_BEGIN


// Version information

static const int DMMTunerStation_MAJOR_VERSION = 7 ;
static const int DMMTunerStation_MINOR_VERSION = 0 ;


/** ***************************************************************************
 *  DMMTunerStation
 *
 *  Tuner generic and project independent station interface. This interface provides information about the current station, the available station lists, and gives the possibilty to tune or select the current station.
 */
typedef enum
{
   /**
    * Starts tuning a frequency or selecting a station.
    */
   DMMTunerStation_UPD_ID_requestStartTune = DSI_REQUEST_ID_FIRST + 0, // 0x00000000

   /**
    * Starts/Stops a seek process
    */
   DMMTunerStation_UPD_ID_requestControlSeek = DSI_REQUEST_ID_FIRST + 1, // 0x00000001

   /**
    * Aborts a running tune or station selection process
    */
   DMMTunerStation_UPD_ID_requestAbortTune = DSI_REQUEST_ID_FIRST + 2, // 0x00000002

   /**
    * Request explicit update of currentStation or stationList information. E.g. necessary after startup.
    */
   DMMTunerStation_UPD_ID_requestForceUpdate = DSI_REQUEST_ID_FIRST + 3, // 0x00000003

   /**
    * Note: Only relevant if a key/tag is part of the ID vector. 
    * Make selector mapping (tag/key -> frequency, IDs) persistent and available even if station is not available any more.
    */
   DMMTunerStation_UPD_ID_requestMakePersistent = DSI_REQUEST_ID_FIRST + 4, // 0x00000004

   /**
    * Information about the currently active station.
    */
   DMMTunerStation_UPD_ID_informationCurrentStation = DSI_RESPONSE_ID_FIRST + 0, // 0x80000000

   /**
    * Station list information.
    */
   DMMTunerStation_UPD_ID_informationStationList = DSI_RESPONSE_ID_FIRST + 1, // 0x80000001

   /**
    * Seek information sent during an active search.
    */
   DMMTunerStation_UPD_ID_informationSeek = DSI_RESPONSE_ID_FIRST + 2, // 0x80000002

   /**
    * Result of startTune request. This response is only sent if handle of startTune is not equal to zero (notifcation has to be set explicitly).
    */
   DMMTunerStation_UPD_ID_responseStartTune = DSI_RESPONSE_ID_FIRST + 3, // 0x80000003

   /**
    * Result of abortTune request. This response is only sent if handle of abortTune is not equal to zero (notifcation has to be set explicitly).
    */
   DMMTunerStation_UPD_ID_responseAbortTune = DSI_RESPONSE_ID_FIRST + 4, // 0x80000004

   /**
    * Result of controlSeek request. This response is only sent if handle of controlSeek is not equal to zero (notifcation has to be set explicitly).
    */
   DMMTunerStation_UPD_ID_responseControlSeek = DSI_RESPONSE_ID_FIRST + 5, // 0x80000005

   /**
    * Result of makePersistent request. This response is only sent if handle of controlSeek is not equal to zero (notifcation has to be set explicitly).
    */
   DMMTunerStation_UPD_ID_responseMakePersistent = DSI_RESPONSE_ID_FIRST + 6, // 0x80000006

   /**
    * DESCRIPTION MISSING
    */
   DMMTunerStation_UPD_ID_responseForceUpdate = DSI_RESPONSE_ID_FIRST + 7, // 0x80000007

   /**
    * Implementation version
    */
   DMMTunerStation_UPD_ID_implVersion = DSI_ATTRIBUTE_ID_LAST - 1,

   /**
    * Nothing
    */
   DMMTunerStation_UPD_ID_NOP = DSI_ATTRIBUTE_ID_LAST

} DMMTunerStation_UpdateIdEnum ;




/** ***************************************************************************
 * Generic tuner station characteristics (bit 0..15)
 */
typedef enum
{
   /*
    * No information
    */
   DMMTunerStation_UNDEF_STATION = 0, // 0x0000
   /*
    * Station receivable
    */
   DMMTunerStation_RECEIVABLE = 1, // 0x0001
   /*
    * Station is part of autostore list
    */
   DMMTunerStation_AUTOSTORED = 2, // 0x0002
   /*
    * This entry is an ensemble (multiplex), information about the ensemble (e.g. id or name) is part of the station struct.
    */
   DMMTunerStation_ENSEMBLE = 4, // 0x0004
   /*
    * This entry is a service, information about the service (e.g. id or name) is part of the station struct.
    */
   DMMTunerStation_SERVICE = 8, // 0x0008
   /*
    * This entry is a primary component, information about the component (e.g. id or name) is part of the station struct.
    */
   DMMTunerStation_PRIMARY = 16, // 0x0010
   /*
    * This entry is a secondary component, information about the component (e.g. id or name) is part of the station struct.
    */
   DMMTunerStation_SECONDARY = 32, // 0x0020
   /*
    * Station (selector mapping) was made persistent
    */
   DMMTunerStation_STORED = 64, // 0x0040
   /*
    * Only relevant for current station: Station was selected under control of FollowingMaster (service following)
    */
   DMMTunerStation_CTRL_FOLLOWING = 256, // 0x0100
   /*
    * Only relevant for current station: Station was selected under control of AnnouncementMaster
    */
   DMMTunerStation_CTRL_ANNOUNCE = 512, // 0x0200
   /*
    * Only relevant for current station: Tuner is not connected to any audio sink (not active) and station might change due to tuner internal strategy
    */
   DMMTunerStation_CTRL_INACTIVE = 1024, // 0x0400
   /*
    * Data changed since last update
    */
   DMMTunerStation_CHANGED = 32768, // 0x8000
   /*
    * Linked audio station data
    */
   DMMTunerStation_LINKED_AUDIO = 65536, // 0x10000

} DMMTunerStation_StationType ;


/** ***************************************************************************
 * The different seek modes
 */
typedef enum
{
   /*
    * No seek off, stop possible running seek mode
    */
   DMMTunerStation_SEEK_OFF,
   /*
    * Skip to next valid frequency
    */
   DMMTunerStation_SEEK_MAN_UP,
   /*
    * Skip to previous valid frequency
    */
   DMMTunerStation_SEEK_MAN_DOWN,
   /*
    * Search next receivable station
    */
   DMMTunerStation_SEEK_AUTO_UP,
   /*
    * Search previous receivable station
    */
   DMMTunerStation_SEEK_AUTO_DOWN,
   /*
    * Scan the available stations (upwards)
    */
   DMMTunerStation_SEEK_SCAN_UP,
   /*
    * Scan the available stations (downwards)
    */
   DMMTunerStation_SEEK_SCAN_DOWN,
   /*
    * While scan is active: Skip to next station
    */
   DMMTunerStation_SEEK_SCAN_SKIP_UP,
   /*
    * While scan is active: Skip to previous station
    */
   DMMTunerStation_SEEK_SCAN_SKIP_DOWN,
   /*
    * Autostore current waveband
    */
   DMMTunerStation_SEEK_AUTOSTORE,

} DMMTunerStation_SeekMode ;


/** ***************************************************************************
 * Possible selection modes
 */
typedef enum
{
   /*
    * Undefined selection mode
    */
   DMMTunerStation_SELECT_UNDEF,
   /*
    * Direct frequency input
    */
   DMMTunerStation_SELECT_DIRECT,
   /*
    * Station selected from background list
    */
   DMMTunerStation_SELECT_LIST,
   /*
    * Preset selection
    */
   DMMTunerStation_SELECT_PRESET,

} DMMTunerStation_SelectionMode ;


/** ***************************************************************************
 * Source activity states
 */
typedef enum
{
   /*
    * Off / mute
    */
   DMMTunerStation_ACTIVITY_OFF,
   /*
    * Pause
    */
   DMMTunerStation_ACTIVITY_PAUSE,
   /*
    * On / demute
    */
   DMMTunerStation_ACTIVITY_ON,

} DMMTunerStation_SourceActivity ;

// forward declaration(s)
struct _DMMTunerStation_Metadatas ;
struct _DMMTunerStation_Stations ;

typedef DMMTunerTypes_StationSelector DMMTunerStation_StationSelector ;

/** ***************************************************************************
 * Meta data (e.g. RT+ or DL+)
 */
typedef struct _DMMTunerStation_Metadata
{
   /**
    * Type of meta data (device dependent, refer to specific hbtd file)
    */
   unsigned char type ;

   /**
    * Type corresponding string
    */
   char* str ;

} DMMTunerStation_Metadata ;

#define DMMTunerStation_Metadata_Init( p ) memset( p, 0, sizeof(*p))
void DMMTunerStation_Metadata_Free( DMMTunerStation_Metadata *p );
void DMMTunerStation_Metadata_Copy( DMMTunerStation_Metadata* lhs, const DMMTunerStation_Metadata* rhs );

void DSIReadDMMTunerStation_Metadata( DSIStream *stream, DMMTunerStation_Metadata *p ) ;
void DSIWriteDMMTunerStation_Metadata( DSIStream *stream, const DMMTunerStation_Metadata *p ) ;

/** ***************************************************************************
 * Pairs of MetaData
 */
DSIVectorTypeDef( DMMTunerStation_Metadatas, DMMTunerStation_Metadata ) ;

// Free the vector related data
void DMMTunerStation_Metadatas_Free( DMMTunerStation_Metadatas *p );
void DMMTunerStation_Metadatas_Copy( DMMTunerStation_Metadatas* lhs, const DMMTunerStation_Metadatas* rhs );

void DSIReadDMMTunerStation_Metadatas( DSIStream *stream, DMMTunerStation_Metadatas *p ) ;
void DSIWriteDMMTunerStation_Metadatas( DSIStream *stream, const DMMTunerStation_Metadatas *p ) ;

/** ***************************************************************************
 * All important information about a station
 */
typedef struct _DMMTunerStation_Station
{
   /**
    * Frequency and ID vector, can be directly passed into requestStartTune().
    */
   DMMTunerStation_StationSelector sel ;

   /**
    * Station type characterized by a bit field (available bits are defined in StationType enum)
    */
   unsigned int stationType ;

   /**
    * Name vector (indices are device and project dependent, refer to specific hbtd file)
    */
   struct _DMMTunerTypes_CHBStrings* name ;

   /**
    * Vector of metadata (e.g. RT+ or DL+), only currently available types are part of this vector.
    */
   struct _DMMTunerStation_Metadatas* meta ;

   /**
    * Genres of station (indices are device and project dependent, refer to specific hbtd file)
    */
   struct _DMMTunerTypes_UInt32s* genre ;

   /**
    * Additional flags (device and project specific, refer to specific hbtd file)
    */
   unsigned int flags ;

   /**
    * The quality vector (indices are device and project dependent, refer to specific hbtd file)
    */
   struct _DMMTunerTypes_UInt32s* quality ;

} DMMTunerStation_Station ;

#define DMMTunerStation_Station_Init( p ) memset( p, 0, sizeof(*p))
void DMMTunerStation_Station_Free( DMMTunerStation_Station *p );
void DMMTunerStation_Station_Copy( DMMTunerStation_Station* lhs, const DMMTunerStation_Station* rhs );

void DSIReadDMMTunerStation_Station( DSIStream *stream, DMMTunerStation_Station *p ) ;
void DSIWriteDMMTunerStation_Station( DSIStream *stream, const DMMTunerStation_Station *p ) ;

/** ***************************************************************************
 * A vector of stations
 */
DSIVectorTypeDef( DMMTunerStation_Stations, DMMTunerStation_Station ) ;

// Free the vector related data
void DMMTunerStation_Stations_Free( DMMTunerStation_Stations *p );
void DMMTunerStation_Stations_Copy( DMMTunerStation_Stations* lhs, const DMMTunerStation_Stations* rhs );

void DSIReadDMMTunerStation_Stations( DSIStream *stream, DMMTunerStation_Stations *p ) ;
void DSIWriteDMMTunerStation_Stations( DSIStream *stream, const DMMTunerStation_Stations *p ) ;

/** ***************************************************************************
 * Seek mode relevant data
 */
typedef struct _DMMTunerStation_SeekData
{
   /**
    * The current seek mode
    */
   DMMTunerStation_SeekMode mode ;

   /**
    * The current frequency (during seek mode)
    */
   unsigned int frequency ;

} DMMTunerStation_SeekData ;

#define DMMTunerStation_SeekData_Init( p ) memset( p, 0, sizeof(*p))
#define DMMTunerStation_SeekData_Free( p ) // don't do anything

void DSIReadDMMTunerStation_SeekData( DSIStream *stream, DMMTunerStation_SeekData *p ) ;
void DSIWriteDMMTunerStation_SeekData( DSIStream *stream, const DMMTunerStation_SeekData *p ) ;

/** ***************************************************************************
 * Station list
 */
typedef struct _DMMTunerStation_StationList
{
   /**
    * Bit field characterizing the emitting tuner source (SourceType enum). That is the ORing of all possible deviceTypes in this list.
    */
   unsigned int deviceType ;

   /**
    * Containing station types characterized by a bit field (available bits are defined in StationType enum). That is the ORing of all possible stationTypes in this list.
    */
   unsigned int stationType ;

   /**
    * List of stations
    */
   struct _DMMTunerStation_Stations* stations ;

} DMMTunerStation_StationList ;

#define DMMTunerStation_StationList_Init( p ) memset( p, 0, sizeof(*p))
void DMMTunerStation_StationList_Free( DMMTunerStation_StationList *p );
void DMMTunerStation_StationList_Copy( DMMTunerStation_StationList* lhs, const DMMTunerStation_StationList* rhs );

void DSIReadDMMTunerStation_StationList( DSIStream *stream, DMMTunerStation_StationList *p ) ;
void DSIWriteDMMTunerStation_StationList( DSIStream *stream, const DMMTunerStation_StationList *p ) ;


/** ***************************************************************************
 * Constants
 */



/** ***************************************************************************
 * Argument List Structure for requestDMMTunerStation_StartTune
 */
typedef struct _DMMTunerStation_RequestStartTuneArgList
{
   /**
    * The requested frequency/station
    */
   DMMTunerStation_StationSelector station ;

   /**
    * An optional handle for identifying the request
    */
   unsigned int handle ;

   /**
    * Optional selection mode
    */
   DMMTunerStation_SelectionMode selectionMode ;

} DMMTunerStation_RequestStartTuneArgList ;

#define DMMTunerStation_RequestStartTuneArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMTunerStation_RequestStartTuneArgList_Free( DMMTunerStation_RequestStartTuneArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMTunerStation_RequestStartTuneArgList( DSIStream *stream, DMMTunerStation_RequestStartTuneArgList* arglist );
int DSIWriteDMMTunerStation_RequestStartTuneArgList( DSIStream *stream, const DMMTunerStation_RequestStartTuneArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMTunerStation_ControlSeek
 */
typedef struct _DMMTunerStation_RequestControlSeekArgList
{
   /**
    * Device which is addressed.
    */
   DMMTunerTypes_DeviceType device ;

   /**
    * The requested seek mode and genre/PTY mask
    */
   DMMTunerStation_SeekMode seekMode ;

   /**
    * Consider only stations of this genre
    */
   unsigned int genre ;

   /**
    * Additional flags to be considered (device and project dependent)
    */
   unsigned int flags ;

   /**
    * An optional handle for identifying the request
    */
   unsigned int handle ;

} DMMTunerStation_RequestControlSeekArgList ;

#define DMMTunerStation_RequestControlSeekArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMTunerStation_RequestControlSeekArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMTunerStation_RequestControlSeekArgList( DSIStream *stream, DMMTunerStation_RequestControlSeekArgList* arglist );
int DSIWriteDMMTunerStation_RequestControlSeekArgList( DSIStream *stream, const DMMTunerStation_RequestControlSeekArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMTunerStation_AbortTune
 */
typedef struct _DMMTunerStation_RequestAbortTuneArgList
{
   /**
    * Device on which tune process shall be aborted.
    */
   DMMTunerTypes_DeviceType device ;

   /**
    * An optional handle for identifying the request
    */
   unsigned int handle ;

} DMMTunerStation_RequestAbortTuneArgList ;

#define DMMTunerStation_RequestAbortTuneArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMTunerStation_RequestAbortTuneArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMTunerStation_RequestAbortTuneArgList( DSIStream *stream, DMMTunerStation_RequestAbortTuneArgList* arglist );
int DSIWriteDMMTunerStation_RequestAbortTuneArgList( DSIStream *stream, const DMMTunerStation_RequestAbortTuneArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMTunerStation_ForceUpdate
 */
typedef struct _DMMTunerStation_RequestForceUpdateArgList
{
   /**
    * Update id: DMMTunerStation::UPD_ID_informationCurrentStation or DMMTunerStation::UPD_ID_informationStationList
    */
   unsigned int updateId ;

   /**
    * Note: Might not be supported by all components (in particular dev-tuner-*)
    * Send only updates of given source type
    * 
    */
   unsigned int sourceType ;

   /**
    * Note: Might not be supported by all components (in particular dev-tuner-*)
    * Send only updates of given station type
    * 
    */
   unsigned int stationType ;

   /**
    * An optional handle for identifying the request
    */
   unsigned int handle ;

} DMMTunerStation_RequestForceUpdateArgList ;

#define DMMTunerStation_RequestForceUpdateArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMTunerStation_RequestForceUpdateArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMTunerStation_RequestForceUpdateArgList( DSIStream *stream, DMMTunerStation_RequestForceUpdateArgList* arglist );
int DSIWriteDMMTunerStation_RequestForceUpdateArgList( DSIStream *stream, const DMMTunerStation_RequestForceUpdateArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for requestDMMTunerStation_MakePersistent
 */
typedef struct _DMMTunerStation_RequestMakePersistentArgList
{
   /**
    * Station selector of interest.
    */
   DMMTunerStation_StationSelector station ;

   /**
    * true: Keep this station selector like it is
    * false: Station selector can be changed
    */
   DSIBool persistent ;

   /**
    * An optional handle for identifying the request
    */
   unsigned int handle ;

} DMMTunerStation_RequestMakePersistentArgList ;

#define DMMTunerStation_RequestMakePersistentArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMTunerStation_RequestMakePersistentArgList_Free( DMMTunerStation_RequestMakePersistentArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMTunerStation_RequestMakePersistentArgList( DSIStream *stream, DMMTunerStation_RequestMakePersistentArgList* arglist );
int DSIWriteDMMTunerStation_RequestMakePersistentArgList( DSIStream *stream, const DMMTunerStation_RequestMakePersistentArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for informationDMMTunerStation_CurrentStation
 */
typedef struct _DMMTunerStation_InformationCurrentStationArgList
{
   /**
    * Up-to-date information about the current station (optionally with additional metadata strings)
    */
   DMMTunerStation_Station current ;

   /**
    * Handle of original request.
    */
   unsigned int handle ;

} DMMTunerStation_InformationCurrentStationArgList ;

#define DMMTunerStation_InformationCurrentStationArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMTunerStation_InformationCurrentStationArgList_Free( DMMTunerStation_InformationCurrentStationArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMTunerStation_InformationCurrentStationArgList( DSIStream *stream, DMMTunerStation_InformationCurrentStationArgList* arglist );
int DSIWriteDMMTunerStation_InformationCurrentStationArgList( DSIStream *stream, const DMMTunerStation_InformationCurrentStationArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for informationDMMTunerStation_StationList
 */
typedef struct _DMMTunerStation_InformationStationListArgList
{
   /**
    * The current station list update (different station types might exist in parallel).
    */
   DMMTunerStation_StationList list ;

   /**
    * To be compatible with "GENIVI Station Management"
    * In case of autostore: Handle of corresponding controlSeek request
    */
   unsigned int handle ;

} DMMTunerStation_InformationStationListArgList ;

#define DMMTunerStation_InformationStationListArgList_Init( p ) memset( p, 0, sizeof(*p) )
void DMMTunerStation_InformationStationListArgList_Free( DMMTunerStation_InformationStationListArgList *p );


/**
 * Streaming Functions
 */
int DSIReadDMMTunerStation_InformationStationListArgList( DSIStream *stream, DMMTunerStation_InformationStationListArgList* arglist );
int DSIWriteDMMTunerStation_InformationStationListArgList( DSIStream *stream, const DMMTunerStation_InformationStationListArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for informationDMMTunerStation_Seek
 */
typedef struct _DMMTunerStation_InformationSeekArgList
{
   /**
    * The current seek data.
    */
   DMMTunerStation_SeekData seekData ;

   /**
    * Handle of original request.
    */
   unsigned int handle ;

} DMMTunerStation_InformationSeekArgList ;

#define DMMTunerStation_InformationSeekArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMTunerStation_InformationSeekArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMTunerStation_InformationSeekArgList( DSIStream *stream, DMMTunerStation_InformationSeekArgList* arglist );
int DSIWriteDMMTunerStation_InformationSeekArgList( DSIStream *stream, const DMMTunerStation_InformationSeekArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for responseDMMTunerStation_StartTune
 */
typedef struct _DMMTunerStation_ResponseStartTuneArgList
{
   /**
    * The handle of the corresponding request
    */
   unsigned int handle ;

   /**
    * The result of the request
    */
   DMMTunerTypes_Feedback feedback ;

} DMMTunerStation_ResponseStartTuneArgList ;

#define DMMTunerStation_ResponseStartTuneArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMTunerStation_ResponseStartTuneArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMTunerStation_ResponseStartTuneArgList( DSIStream *stream, DMMTunerStation_ResponseStartTuneArgList* arglist );
int DSIWriteDMMTunerStation_ResponseStartTuneArgList( DSIStream *stream, const DMMTunerStation_ResponseStartTuneArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for responseDMMTunerStation_AbortTune
 */
typedef struct _DMMTunerStation_ResponseAbortTuneArgList
{
   /**
    * The handle of the corresponding request
    */
   unsigned int handle ;

   /**
    * The result of the request
    */
   DMMTunerTypes_Feedback feedback ;

} DMMTunerStation_ResponseAbortTuneArgList ;

#define DMMTunerStation_ResponseAbortTuneArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMTunerStation_ResponseAbortTuneArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMTunerStation_ResponseAbortTuneArgList( DSIStream *stream, DMMTunerStation_ResponseAbortTuneArgList* arglist );
int DSIWriteDMMTunerStation_ResponseAbortTuneArgList( DSIStream *stream, const DMMTunerStation_ResponseAbortTuneArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for responseDMMTunerStation_ControlSeek
 */
typedef struct _DMMTunerStation_ResponseControlSeekArgList
{
   /**
    * The handle of the corresponding request
    */
   unsigned int handle ;

   /**
    * The result of the request
    */
   DMMTunerTypes_Feedback feedback ;

} DMMTunerStation_ResponseControlSeekArgList ;

#define DMMTunerStation_ResponseControlSeekArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMTunerStation_ResponseControlSeekArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMTunerStation_ResponseControlSeekArgList( DSIStream *stream, DMMTunerStation_ResponseControlSeekArgList* arglist );
int DSIWriteDMMTunerStation_ResponseControlSeekArgList( DSIStream *stream, const DMMTunerStation_ResponseControlSeekArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for responseDMMTunerStation_MakePersistent
 */
typedef struct _DMMTunerStation_ResponseMakePersistentArgList
{
   /**
    * The handle of the corresponding request
    */
   unsigned int handle ;

   /**
    * The result of the request
    */
   DMMTunerTypes_Feedback feedback ;

} DMMTunerStation_ResponseMakePersistentArgList ;

#define DMMTunerStation_ResponseMakePersistentArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMTunerStation_ResponseMakePersistentArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMTunerStation_ResponseMakePersistentArgList( DSIStream *stream, DMMTunerStation_ResponseMakePersistentArgList* arglist );
int DSIWriteDMMTunerStation_ResponseMakePersistentArgList( DSIStream *stream, const DMMTunerStation_ResponseMakePersistentArgList* arglist );



/** ***************************************************************************
 * Argument List Structure for responseDMMTunerStation_ForceUpdate
 */
typedef struct _DMMTunerStation_ResponseForceUpdateArgList
{
   /**
    * The handle of the corresponding request
    */
   unsigned int handle ;

   /**
    * DESCRIPTION MISSING
    */
   DMMTunerTypes_Feedback feedback ;

} DMMTunerStation_ResponseForceUpdateArgList ;

#define DMMTunerStation_ResponseForceUpdateArgList_Init( p ) memset( p, 0, sizeof(*p) )
#define DMMTunerStation_ResponseForceUpdateArgList_Free( p ) // don't do anything


/**
 * Streaming Functions
 */
int DSIReadDMMTunerStation_ResponseForceUpdateArgList( DSIStream *stream, DMMTunerStation_ResponseForceUpdateArgList* arglist );
int DSIWriteDMMTunerStation_ResponseForceUpdateArgList( DSIStream *stream, const DMMTunerStation_ResponseForceUpdateArgList* arglist );




/**
 * Streaming Functions for Attributes
 */

DSI_EXTERN_C_END

#endif // DMMTUNERSTATION_H
