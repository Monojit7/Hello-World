#ifndef CDMMTUNERSTATIONSTUB_HPP
#define CDMMTUNERSTATIONSTUB_HPP
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2014
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 21.11.2014
 */


#include "DMMTunerStationStub.h"

/**
 * DSI Stub: DMMTunerStation
 *
 * Tuner generic and project independent station interface. This interface provides information about the current station, the available station lists, and gives the possibilty to tune or select the current station.
 */
class CDMMTunerStationStub : public DMMTunerStationStub
{
public:
   /**
    * Constructor.
    */
   CDMMTunerStationStub( );

   /**
    * Destructor.
    */
   virtual ~CDMMTunerStationStub();

   /**
    * Start the server
    */
   int start( const char* rolename );

   /**
    * Stop the server
    */
   void stop( int exitcode );

   /**
    * Called right before the stub thread ends
    */
   virtual void cleanup();

   /**
    * Starts tuning a frequency or selecting a station.
    */
   virtual void requestStartTune( const DMMTunerTypes_StationSelector& station,  unsigned int handle,  DMMTunerStation_SelectionMode selectionMode ) = 0 ;

   /**
    * Starts/Stops a seek process
    */
   virtual void requestControlSeek(  DMMTunerTypes_DeviceType device,  DMMTunerStation_SeekMode seekMode,  unsigned char genre,  unsigned int flags,  unsigned int handle ) = 0 ;

   /**
    * Aborts a running tune or station selection process
    */
   virtual void requestAbortTune(  DMMTunerTypes_DeviceType device,  unsigned int handle ) = 0 ;

   /**
    * Request explicit update of currentStation or stationList information. E.g. necessary after startup.
    */
   virtual void requestForceUpdate(  unsigned int updateId,  unsigned int sourceType,  unsigned int stationType,  unsigned int handle ) = 0 ;

   /**
    * Note: Only relevant if a key/tag is part of the ID vector. 
    * Make selector mapping (tag/key -> frequency, IDs) persistent and available even if station is not available any more.
    */
   virtual void requestMakePersistent( const DMMTunerTypes_StationSelector& station,  DSIBool persistent,  unsigned int handle ) = 0 ;

   /**
    * Called when an internal event was sent to the server
    */
   virtual void processInternalEvent( int code, void* data ) {}

   /**
    * Information about the currently active station.
    */
   void informationCurrentStation( const DMMTunerStation_Station& current,  unsigned int handle );

   /**
    * Station list information.
    */
   void informationStationList( const DMMTunerStation_StationList& list,  unsigned int handle );

   /**
    * Seek information sent during an active search.
    */
   void informationSeek( const DMMTunerStation_SeekData& seekData,  unsigned int handle );

   /**
    * Result of startTune request. This response is only sent if handle of startTune is not equal to zero (notifcation has to be set explicitly).
    */
   void responseStartTune(  unsigned int handle,  DMMTunerTypes_Feedback feedback );

   /**
    * Result of abortTune request. This response is only sent if handle of abortTune is not equal to zero (notifcation has to be set explicitly).
    */
   void responseAbortTune(  unsigned int handle,  DMMTunerTypes_Feedback feedback );

   /**
    * Result of controlSeek request. This response is only sent if handle of controlSeek is not equal to zero (notifcation has to be set explicitly).
    */
   void responseControlSeek(  unsigned int handle,  DMMTunerTypes_Feedback feedback );

   /**
    * Result of makePersistent request. This response is only sent if handle of controlSeek is not equal to zero (notifcation has to be set explicitly).
    */
   void responseMakePersistent(  unsigned int handle,  DMMTunerTypes_Feedback feedback );

   /**
    * DESCRIPTION MISSING
    */
   void responseForceUpdate(  unsigned int handle,  DMMTunerTypes_Feedback feedback );


   void sendNotification( DMMTunerStation_UpdateIdEnum updateId );

   /**
    * Respond with an error message.
    */
   void sendError( DMMTunerStation_UpdateIdEnum id );

   int postInternalEvent( int code, void* data );
   int sendInternalEvent( int code, void* data );

private:

   /*
    * Duplicating not allowed
    */
   CDMMTunerStationStub( const CDMMTunerStationStub& ) {}
   CDMMTunerStationStub& operator= (const CDMMTunerStationStub& ) { return *this ; }
};

inline void CDMMTunerStationStub::sendNotification( DMMTunerStation_UpdateIdEnum updateId )
{
   DMMTunerStationStub_SendNotification( this, updateId );
}


inline void CDMMTunerStationStub::informationCurrentStation( const DMMTunerStation_Station& current,  unsigned int handle )
{
   DMMTunerStation_InformationCurrentStation( (DMMTunerStationStub*)this,  &current, handle );
}

inline void CDMMTunerStationStub::informationStationList( const DMMTunerStation_StationList& list,  unsigned int handle )
{
   DMMTunerStation_InformationStationList( (DMMTunerStationStub*)this,  &list, handle );
}

inline void CDMMTunerStationStub::informationSeek( const DMMTunerStation_SeekData& seekData,  unsigned int handle )
{
   DMMTunerStation_InformationSeek( (DMMTunerStationStub*)this,  &seekData, handle );
}

inline void CDMMTunerStationStub::responseStartTune(  unsigned int handle,  DMMTunerTypes_Feedback feedback )
{
   DMMTunerStation_ResponseStartTune( (DMMTunerStationStub*)this, handle, feedback );
}

inline void CDMMTunerStationStub::responseAbortTune(  unsigned int handle,  DMMTunerTypes_Feedback feedback )
{
   DMMTunerStation_ResponseAbortTune( (DMMTunerStationStub*)this, handle, feedback );
}

inline void CDMMTunerStationStub::responseControlSeek(  unsigned int handle,  DMMTunerTypes_Feedback feedback )
{
   DMMTunerStation_ResponseControlSeek( (DMMTunerStationStub*)this, handle, feedback );
}

inline void CDMMTunerStationStub::responseMakePersistent(  unsigned int handle,  DMMTunerTypes_Feedback feedback )
{
   DMMTunerStation_ResponseMakePersistent( (DMMTunerStationStub*)this, handle, feedback );
}

inline void CDMMTunerStationStub::responseForceUpdate(  unsigned int handle,  DMMTunerTypes_Feedback feedback )
{
   DMMTunerStation_ResponseForceUpdate( (DMMTunerStationStub*)this, handle, feedback );
}


#endif // CDMMTUNERSTATIONSTUB_HPP


