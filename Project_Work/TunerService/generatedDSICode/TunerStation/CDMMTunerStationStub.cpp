 
/**********************************************************************
 *  Project       Harman Car Multimedia System
 *  (c) copyright 2014
 *  Company       Harman/Becker Automotive Systems GmbH
 *                All rights reserved
 **********************************************************************/

/*
 * Generated by DSI Generator version 2.0
 * Date: 21.11.2014
 */


#include "CDMMTunerStationStub.hpp"
#include <string.h>

static void _requestStartTune( DMMTunerStationStub* stub, const DMMTunerTypes_StationSelector* station,  unsigned int handle,  DMMTunerStation_SelectionMode selectionMode )
{
   ((CDMMTunerStationStub*)stub)->requestStartTune(  *station, handle, selectionMode ) ;
}

static void _requestControlSeek( DMMTunerStationStub* stub,  DMMTunerTypes_DeviceType device,  DMMTunerStation_SeekMode seekMode,  unsigned char genre,  unsigned int flags,  unsigned int handle )
{
   ((CDMMTunerStationStub*)stub)->requestControlSeek( device, seekMode, genre, flags, handle ) ;
}

static void _requestAbortTune( DMMTunerStationStub* stub,  DMMTunerTypes_DeviceType device,  unsigned int handle )
{
   ((CDMMTunerStationStub*)stub)->requestAbortTune( device, handle ) ;
}

static void _requestForceUpdate( DMMTunerStationStub* stub,  unsigned int updateId,  unsigned int sourceType,  unsigned int stationType,  unsigned int handle )
{
   ((CDMMTunerStationStub*)stub)->requestForceUpdate( updateId, sourceType, stationType, handle ) ;
}

static void _requestMakePersistent( DMMTunerStationStub* stub, const DMMTunerTypes_StationSelector* station,  DSIBool persistent,  unsigned int handle )
{
   ((CDMMTunerStationStub*)stub)->requestMakePersistent(  *station, persistent, handle ) ;
}

static void _processInternalEvent( DMMTunerStationStub* stub, int id, void* data )
{
   ((CDMMTunerStationStub*)stub)->processInternalEvent( id,  data ) ;
}

static void _cleanup( DMMTunerStationStub* stub )
{
   ((CDMMTunerStationStub*)stub)->cleanup( ) ;
}

CDMMTunerStationStub::CDMMTunerStationStub( )
{
   memset( (DMMTunerStationStub*)this, 0, sizeof(DMMTunerStationStub) );
   fnRequestStartTune = _requestStartTune ;
   fnRequestControlSeek = _requestControlSeek ;
   fnRequestAbortTune = _requestAbortTune ;
   fnRequestForceUpdate = _requestForceUpdate ;
   fnRequestMakePersistent = _requestMakePersistent ;
   fnProcessInternalEvent = _processInternalEvent ;
   fnCleanup = _cleanup ;
}

CDMMTunerStationStub::~CDMMTunerStationStub()
{
   // DMMTunerStationStop( this ); not implemented
}

int CDMMTunerStationStub::start( const char* rolename )
{
   return DMMTunerStationStub_Start( this, rolename );
}

void CDMMTunerStationStub::stop( int exitcode )
{
   DMMTunerStationStub_Stop( this, exitcode );
}

void CDMMTunerStationStub::sendError( DMMTunerStation_UpdateIdEnum id )
{
   DMMTunerStationSendError( this, id );
}

int CDMMTunerStationStub::postInternalEvent( int code, void* data )
{
   return DSIPostInternalEvent( server.Channel.Master, server.Id, 0, code, data );
}

int CDMMTunerStationStub::sendInternalEvent( int code, void* data )
{
   return DSISendInternalEvent( server.Channel.Master, server.Id, 0, code, data );
}

void CDMMTunerStationStub::cleanup()
{
}
